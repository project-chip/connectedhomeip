/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

#import "MTRCallbackBridgeBase.h"
#import <Foundation/Foundation.h>

#include <app-common/zap-generated/cluster-objects.h>
#include <app/data-model/DecodableList.h>
#include <app/util/im-client-callbacks.h>

typedef void (*CommandSuccessCallback)(void *, const chip::app::DataModel::NullObjectType &);
using CommandSuccessCallbackType = CommandSuccessCallback;
typedef void (*DefaultSuccessCallbackType)(void *);

typedef void (*VendorIdAttributeCallback)(void *, chip::VendorId);
typedef void (*NullableVendorIdAttributeCallback)(void *, const chip::app::DataModel::Nullable<chip::VendorId> &);

typedef void (*GroupsClusterAddGroupResponseCallbackType)(
    void *, const chip::app::Clusters::Groups::Commands::AddGroupResponse::DecodableType &);
typedef void (*GroupsClusterViewGroupResponseCallbackType)(
    void *, const chip::app::Clusters::Groups::Commands::ViewGroupResponse::DecodableType &);
typedef void (*GroupsClusterGetGroupMembershipResponseCallbackType)(
    void *, const chip::app::Clusters::Groups::Commands::GetGroupMembershipResponse::DecodableType &);
typedef void (*GroupsClusterRemoveGroupResponseCallbackType)(
    void *, const chip::app::Clusters::Groups::Commands::RemoveGroupResponse::DecodableType &);
typedef void (*ScenesClusterAddSceneResponseCallbackType)(
    void *, const chip::app::Clusters::Scenes::Commands::AddSceneResponse::DecodableType &);
typedef void (*ScenesClusterViewSceneResponseCallbackType)(
    void *, const chip::app::Clusters::Scenes::Commands::ViewSceneResponse::DecodableType &);
typedef void (*ScenesClusterRemoveSceneResponseCallbackType)(
    void *, const chip::app::Clusters::Scenes::Commands::RemoveSceneResponse::DecodableType &);
typedef void (*ScenesClusterRemoveAllScenesResponseCallbackType)(
    void *, const chip::app::Clusters::Scenes::Commands::RemoveAllScenesResponse::DecodableType &);
typedef void (*ScenesClusterStoreSceneResponseCallbackType)(
    void *, const chip::app::Clusters::Scenes::Commands::StoreSceneResponse::DecodableType &);
typedef void (*ScenesClusterGetSceneMembershipResponseCallbackType)(
    void *, const chip::app::Clusters::Scenes::Commands::GetSceneMembershipResponse::DecodableType &);
typedef void (*ScenesClusterEnhancedAddSceneResponseCallbackType)(
    void *, const chip::app::Clusters::Scenes::Commands::EnhancedAddSceneResponse::DecodableType &);
typedef void (*ScenesClusterEnhancedViewSceneResponseCallbackType)(
    void *, const chip::app::Clusters::Scenes::Commands::EnhancedViewSceneResponse::DecodableType &);
typedef void (*ScenesClusterCopySceneResponseCallbackType)(
    void *, const chip::app::Clusters::Scenes::Commands::CopySceneResponse::DecodableType &);
typedef void (*OTASoftwareUpdateProviderClusterQueryImageResponseCallbackType)(
    void *, const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImageResponse::DecodableType &);
typedef void (*OTASoftwareUpdateProviderClusterApplyUpdateResponseCallbackType)(
    void *, const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateResponse::DecodableType &);
typedef void (*GeneralCommissioningClusterArmFailSafeResponseCallbackType)(
    void *, const chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafeResponse::DecodableType &);
typedef void (*GeneralCommissioningClusterSetRegulatoryConfigResponseCallbackType)(
    void *, const chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfigResponse::DecodableType &);
typedef void (*GeneralCommissioningClusterCommissioningCompleteResponseCallbackType)(
    void *, const chip::app::Clusters::GeneralCommissioning::Commands::CommissioningCompleteResponse::DecodableType &);
typedef void (*NetworkCommissioningClusterScanNetworksResponseCallbackType)(
    void *, const chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworksResponse::DecodableType &);
typedef void (*NetworkCommissioningClusterNetworkConfigResponseCallbackType)(
    void *, const chip::app::Clusters::NetworkCommissioning::Commands::NetworkConfigResponse::DecodableType &);
typedef void (*NetworkCommissioningClusterConnectNetworkResponseCallbackType)(
    void *, const chip::app::Clusters::NetworkCommissioning::Commands::ConnectNetworkResponse::DecodableType &);
typedef void (*DiagnosticLogsClusterRetrieveLogsResponseCallbackType)(
    void *, const chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsResponse::DecodableType &);
typedef void (*OperationalCredentialsClusterAttestationResponseCallbackType)(
    void *, const chip::app::Clusters::OperationalCredentials::Commands::AttestationResponse::DecodableType &);
typedef void (*OperationalCredentialsClusterCertificateChainResponseCallbackType)(
    void *, const chip::app::Clusters::OperationalCredentials::Commands::CertificateChainResponse::DecodableType &);
typedef void (*OperationalCredentialsClusterCSRResponseCallbackType)(
    void *, const chip::app::Clusters::OperationalCredentials::Commands::CSRResponse::DecodableType &);
typedef void (*OperationalCredentialsClusterNOCResponseCallbackType)(
    void *, const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType &);
typedef void (*GroupKeyManagementClusterKeySetReadResponseCallbackType)(
    void *, const chip::app::Clusters::GroupKeyManagement::Commands::KeySetReadResponse::DecodableType &);
typedef void (*GroupKeyManagementClusterKeySetReadAllIndicesResponseCallbackType)(
    void *, const chip::app::Clusters::GroupKeyManagement::Commands::KeySetReadAllIndicesResponse::DecodableType &);
typedef void (*DoorLockClusterGetWeekDayScheduleResponseCallbackType)(
    void *, const chip::app::Clusters::DoorLock::Commands::GetWeekDayScheduleResponse::DecodableType &);
typedef void (*DoorLockClusterGetYearDayScheduleResponseCallbackType)(
    void *, const chip::app::Clusters::DoorLock::Commands::GetYearDayScheduleResponse::DecodableType &);
typedef void (*DoorLockClusterGetHolidayScheduleResponseCallbackType)(
    void *, const chip::app::Clusters::DoorLock::Commands::GetHolidayScheduleResponse::DecodableType &);
typedef void (*DoorLockClusterGetUserResponseCallbackType)(
    void *, const chip::app::Clusters::DoorLock::Commands::GetUserResponse::DecodableType &);
typedef void (*DoorLockClusterSetCredentialResponseCallbackType)(
    void *, const chip::app::Clusters::DoorLock::Commands::SetCredentialResponse::DecodableType &);
typedef void (*DoorLockClusterGetCredentialStatusResponseCallbackType)(
    void *, const chip::app::Clusters::DoorLock::Commands::GetCredentialStatusResponse::DecodableType &);
typedef void (*ThermostatClusterGetWeeklyScheduleResponseCallbackType)(
    void *, const chip::app::Clusters::Thermostat::Commands::GetWeeklyScheduleResponse::DecodableType &);
typedef void (*ChannelClusterChangeChannelResponseCallbackType)(
    void *, const chip::app::Clusters::Channel::Commands::ChangeChannelResponse::DecodableType &);
typedef void (*TargetNavigatorClusterNavigateTargetResponseCallbackType)(
    void *, const chip::app::Clusters::TargetNavigator::Commands::NavigateTargetResponse::DecodableType &);
typedef void (*MediaPlaybackClusterPlaybackResponseCallbackType)(
    void *, const chip::app::Clusters::MediaPlayback::Commands::PlaybackResponse::DecodableType &);
typedef void (*KeypadInputClusterSendKeyResponseCallbackType)(
    void *, const chip::app::Clusters::KeypadInput::Commands::SendKeyResponse::DecodableType &);
typedef void (*ContentLauncherClusterLauncherResponseCallbackType)(
    void *, const chip::app::Clusters::ContentLauncher::Commands::LauncherResponse::DecodableType &);
typedef void (*ApplicationLauncherClusterLauncherResponseCallbackType)(
    void *, const chip::app::Clusters::ApplicationLauncher::Commands::LauncherResponse::DecodableType &);
typedef void (*AccountLoginClusterGetSetupPINResponseCallbackType)(
    void *, const chip::app::Clusters::AccountLogin::Commands::GetSetupPINResponse::DecodableType &);
typedef void (*UnitTestingClusterTestSpecificResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestSpecificResponse::DecodableType &);
typedef void (*UnitTestingClusterTestAddArgumentsResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestAddArgumentsResponse::DecodableType &);
typedef void (*UnitTestingClusterTestSimpleArgumentResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestSimpleArgumentResponse::DecodableType &);
typedef void (*UnitTestingClusterTestStructArrayArgumentResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestStructArrayArgumentResponse::DecodableType &);
typedef void (*UnitTestingClusterTestListInt8UReverseResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestListInt8UReverseResponse::DecodableType &);
typedef void (*UnitTestingClusterTestEnumsResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestEnumsResponse::DecodableType &);
typedef void (*UnitTestingClusterTestNullableOptionalResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestNullableOptionalResponse::DecodableType &);
typedef void (*UnitTestingClusterTestComplexNullableOptionalResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestComplexNullableOptionalResponse::DecodableType &);
typedef void (*UnitTestingClusterBooleanResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::BooleanResponse::DecodableType &);
typedef void (*UnitTestingClusterSimpleStructResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::SimpleStructResponse::DecodableType &);
typedef void (*UnitTestingClusterTestEmitTestEventResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestEmitTestEventResponse::DecodableType &);
typedef void (*UnitTestingClusterTestEmitTestFabricScopedEventResponseCallbackType)(
    void *, const chip::app::Clusters::UnitTesting::Commands::TestEmitTestFabricScopedEventResponse::DecodableType &);

typedef void (*IdentifyClusterIdentifyEffectIdentifierAttributeCallback)(void *,
                                                                         chip::app::Clusters::Identify::IdentifyEffectIdentifier);
typedef void (*NullableIdentifyClusterIdentifyEffectIdentifierAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Identify::IdentifyEffectIdentifier> &);
typedef void (*IdentifyClusterIdentifyEffectVariantAttributeCallback)(void *, chip::app::Clusters::Identify::IdentifyEffectVariant);
typedef void (*NullableIdentifyClusterIdentifyEffectVariantAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Identify::IdentifyEffectVariant> &);
typedef void (*IdentifyClusterIdentifyIdentifyTypeAttributeCallback)(void *, chip::app::Clusters::Identify::IdentifyIdentifyType);
typedef void (*NullableIdentifyClusterIdentifyIdentifyTypeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Identify::IdentifyIdentifyType> &);
typedef void (*OnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallback)(
    void *, chip::app::Clusters::OnOff::OnOffDelayedAllOffEffectVariant);
typedef void (*NullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::OnOffDelayedAllOffEffectVariant> &);
typedef void (*OnOffClusterOnOffDyingLightEffectVariantAttributeCallback)(void *,
                                                                          chip::app::Clusters::OnOff::OnOffDyingLightEffectVariant);
typedef void (*NullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::OnOffDyingLightEffectVariant> &);
typedef void (*OnOffClusterOnOffEffectIdentifierAttributeCallback)(void *, chip::app::Clusters::OnOff::OnOffEffectIdentifier);
typedef void (*NullableOnOffClusterOnOffEffectIdentifierAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::OnOffEffectIdentifier> &);
typedef void (*OnOffClusterOnOffStartUpOnOffAttributeCallback)(void *, chip::app::Clusters::OnOff::OnOffStartUpOnOff);
typedef void (*NullableOnOffClusterOnOffStartUpOnOffAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::OnOffStartUpOnOff> &);
typedef void (*LevelControlClusterMoveModeAttributeCallback)(void *, chip::app::Clusters::LevelControl::MoveMode);
typedef void (*NullableLevelControlClusterMoveModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::LevelControl::MoveMode> &);
typedef void (*LevelControlClusterStepModeAttributeCallback)(void *, chip::app::Clusters::LevelControl::StepMode);
typedef void (*NullableLevelControlClusterStepModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::LevelControl::StepMode> &);
typedef void (*AccessControlClusterAccessControlEntryAuthModeEnumAttributeCallback)(
    void *, chip::app::Clusters::AccessControl::AccessControlEntryAuthModeEnum);
typedef void (*NullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::AccessControl::AccessControlEntryAuthModeEnum> &);
typedef void (*AccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallback)(
    void *, chip::app::Clusters::AccessControl::AccessControlEntryPrivilegeEnum);
typedef void (*NullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::AccessControl::AccessControlEntryPrivilegeEnum> &);
typedef void (*AccessControlClusterChangeTypeEnumAttributeCallback)(void *, chip::app::Clusters::AccessControl::ChangeTypeEnum);
typedef void (*NullableAccessControlClusterChangeTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::AccessControl::ChangeTypeEnum> &);
typedef void (*ActionsClusterActionErrorEnumAttributeCallback)(void *, chip::app::Clusters::Actions::ActionErrorEnum);
typedef void (*NullableActionsClusterActionErrorEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Actions::ActionErrorEnum> &);
typedef void (*ActionsClusterActionStateEnumAttributeCallback)(void *, chip::app::Clusters::Actions::ActionStateEnum);
typedef void (*NullableActionsClusterActionStateEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Actions::ActionStateEnum> &);
typedef void (*ActionsClusterActionTypeEnumAttributeCallback)(void *, chip::app::Clusters::Actions::ActionTypeEnum);
typedef void (*NullableActionsClusterActionTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Actions::ActionTypeEnum> &);
typedef void (*ActionsClusterEndpointListTypeEnumAttributeCallback)(void *, chip::app::Clusters::Actions::EndpointListTypeEnum);
typedef void (*NullableActionsClusterEndpointListTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Actions::EndpointListTypeEnum> &);
typedef void (*BasicInformationClusterColorEnumAttributeCallback)(void *, chip::app::Clusters::BasicInformation::ColorEnum);
typedef void (*NullableBasicInformationClusterColorEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BasicInformation::ColorEnum> &);
typedef void (*BasicInformationClusterProductFinishEnumAttributeCallback)(void *,
                                                                          chip::app::Clusters::BasicInformation::ProductFinishEnum);
typedef void (*NullableBasicInformationClusterProductFinishEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BasicInformation::ProductFinishEnum> &);
typedef void (*OTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallback)(
    void *, chip::app::Clusters::OtaSoftwareUpdateProvider::OTAApplyUpdateAction);
typedef void (*NullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateProvider::OTAApplyUpdateAction> &);
typedef void (*OTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallback)(
    void *, chip::app::Clusters::OtaSoftwareUpdateProvider::OTADownloadProtocol);
typedef void (*NullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateProvider::OTADownloadProtocol> &);
typedef void (*OTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallback)(
    void *, chip::app::Clusters::OtaSoftwareUpdateProvider::OTAQueryStatus);
typedef void (*NullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateProvider::OTAQueryStatus> &);
typedef void (*OTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallback)(
    void *, chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAAnnouncementReason);
typedef void (*NullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAAnnouncementReason> &);
typedef void (*OTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallback)(
    void *, chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAChangeReasonEnum);
typedef void (*NullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAChangeReasonEnum> &);
typedef void (*OTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallback)(
    void *, chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAUpdateStateEnum);
typedef void (*NullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAUpdateStateEnum> &);
typedef void (*TimeFormatLocalizationClusterCalendarTypeEnumAttributeCallback)(
    void *, chip::app::Clusters::TimeFormatLocalization::CalendarTypeEnum);
typedef void (*NullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TimeFormatLocalization::CalendarTypeEnum> &);
typedef void (*TimeFormatLocalizationClusterHourFormatEnumAttributeCallback)(
    void *, chip::app::Clusters::TimeFormatLocalization::HourFormatEnum);
typedef void (*NullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TimeFormatLocalization::HourFormatEnum> &);
typedef void (*UnitLocalizationClusterTempUnitEnumAttributeCallback)(void *, chip::app::Clusters::UnitLocalization::TempUnitEnum);
typedef void (*NullableUnitLocalizationClusterTempUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::UnitLocalization::TempUnitEnum> &);
typedef void (*PowerSourceClusterBatApprovedChemistryEnumAttributeCallback)(
    void *, chip::app::Clusters::PowerSource::BatApprovedChemistryEnum);
typedef void (*NullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatApprovedChemistryEnum> &);
typedef void (*PowerSourceClusterBatChargeFaultEnumAttributeCallback)(void *, chip::app::Clusters::PowerSource::BatChargeFaultEnum);
typedef void (*NullablePowerSourceClusterBatChargeFaultEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatChargeFaultEnum> &);
typedef void (*PowerSourceClusterBatChargeLevelEnumAttributeCallback)(void *, chip::app::Clusters::PowerSource::BatChargeLevelEnum);
typedef void (*NullablePowerSourceClusterBatChargeLevelEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatChargeLevelEnum> &);
typedef void (*PowerSourceClusterBatChargeStateEnumAttributeCallback)(void *, chip::app::Clusters::PowerSource::BatChargeStateEnum);
typedef void (*NullablePowerSourceClusterBatChargeStateEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatChargeStateEnum> &);
typedef void (*PowerSourceClusterBatCommonDesignationEnumAttributeCallback)(
    void *, chip::app::Clusters::PowerSource::BatCommonDesignationEnum);
typedef void (*NullablePowerSourceClusterBatCommonDesignationEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatCommonDesignationEnum> &);
typedef void (*PowerSourceClusterBatFaultEnumAttributeCallback)(void *, chip::app::Clusters::PowerSource::BatFaultEnum);
typedef void (*NullablePowerSourceClusterBatFaultEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatFaultEnum> &);
typedef void (*PowerSourceClusterBatReplaceabilityEnumAttributeCallback)(void *,
                                                                         chip::app::Clusters::PowerSource::BatReplaceabilityEnum);
typedef void (*NullablePowerSourceClusterBatReplaceabilityEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatReplaceabilityEnum> &);
typedef void (*PowerSourceClusterPowerSourceStatusEnumAttributeCallback)(void *,
                                                                         chip::app::Clusters::PowerSource::PowerSourceStatusEnum);
typedef void (*NullablePowerSourceClusterPowerSourceStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::PowerSourceStatusEnum> &);
typedef void (*PowerSourceClusterWiredCurrentTypeEnumAttributeCallback)(void *,
                                                                        chip::app::Clusters::PowerSource::WiredCurrentTypeEnum);
typedef void (*NullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::WiredCurrentTypeEnum> &);
typedef void (*PowerSourceClusterWiredFaultEnumAttributeCallback)(void *, chip::app::Clusters::PowerSource::WiredFaultEnum);
typedef void (*NullablePowerSourceClusterWiredFaultEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::WiredFaultEnum> &);
typedef void (*GeneralCommissioningClusterCommissioningErrorAttributeCallback)(
    void *, chip::app::Clusters::GeneralCommissioning::CommissioningError);
typedef void (*NullableGeneralCommissioningClusterCommissioningErrorAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralCommissioning::CommissioningError> &);
typedef void (*GeneralCommissioningClusterRegulatoryLocationTypeAttributeCallback)(
    void *, chip::app::Clusters::GeneralCommissioning::RegulatoryLocationType);
typedef void (*NullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralCommissioning::RegulatoryLocationType> &);
typedef void (*NetworkCommissioningClusterNetworkCommissioningStatusAttributeCallback)(
    void *, chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatus);
typedef void (*NullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatus> &);
typedef void (*NetworkCommissioningClusterWiFiBandAttributeCallback)(void *, chip::app::Clusters::NetworkCommissioning::WiFiBand);
typedef void (*NullableNetworkCommissioningClusterWiFiBandAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::NetworkCommissioning::WiFiBand> &);
typedef void (*DiagnosticLogsClusterIntentEnumAttributeCallback)(void *, chip::app::Clusters::DiagnosticLogs::IntentEnum);
typedef void (*NullableDiagnosticLogsClusterIntentEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DiagnosticLogs::IntentEnum> &);
typedef void (*DiagnosticLogsClusterStatusEnumAttributeCallback)(void *, chip::app::Clusters::DiagnosticLogs::StatusEnum);
typedef void (*NullableDiagnosticLogsClusterStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DiagnosticLogs::StatusEnum> &);
typedef void (*DiagnosticLogsClusterTransferProtocolEnumAttributeCallback)(
    void *, chip::app::Clusters::DiagnosticLogs::TransferProtocolEnum);
typedef void (*NullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DiagnosticLogs::TransferProtocolEnum> &);
typedef void (*GeneralDiagnosticsClusterBootReasonEnumAttributeCallback)(void *,
                                                                         chip::app::Clusters::GeneralDiagnostics::BootReasonEnum);
typedef void (*NullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::BootReasonEnum> &);
typedef void (*GeneralDiagnosticsClusterHardwareFaultEnumAttributeCallback)(
    void *, chip::app::Clusters::GeneralDiagnostics::HardwareFaultEnum);
typedef void (*NullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::HardwareFaultEnum> &);
typedef void (*GeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallback)(
    void *, chip::app::Clusters::GeneralDiagnostics::InterfaceTypeEnum);
typedef void (*NullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::InterfaceTypeEnum> &);
typedef void (*GeneralDiagnosticsClusterNetworkFaultEnumAttributeCallback)(
    void *, chip::app::Clusters::GeneralDiagnostics::NetworkFaultEnum);
typedef void (*NullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::NetworkFaultEnum> &);
typedef void (*GeneralDiagnosticsClusterRadioFaultEnumAttributeCallback)(void *,
                                                                         chip::app::Clusters::GeneralDiagnostics::RadioFaultEnum);
typedef void (*NullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::RadioFaultEnum> &);
typedef void (*ThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback)(
    void *, chip::app::Clusters::ThreadNetworkDiagnostics::ConnectionStatusEnum);
typedef void (*NullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ThreadNetworkDiagnostics::ConnectionStatusEnum> &);
typedef void (*ThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallback)(
    void *, chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault);
typedef void (*NullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> &);
typedef void (*ThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallback)(
    void *, chip::app::Clusters::ThreadNetworkDiagnostics::RoutingRole);
typedef void (*NullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ThreadNetworkDiagnostics::RoutingRole> &);
typedef void (*WiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallback)(
    void *, chip::app::Clusters::WiFiNetworkDiagnostics::AssociationFailureCauseEnum);
typedef void (*NullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::WiFiNetworkDiagnostics::AssociationFailureCauseEnum> &);
typedef void (*WiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback)(
    void *, chip::app::Clusters::WiFiNetworkDiagnostics::ConnectionStatusEnum);
typedef void (*NullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::WiFiNetworkDiagnostics::ConnectionStatusEnum> &);
typedef void (*WiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallback)(
    void *, chip::app::Clusters::WiFiNetworkDiagnostics::SecurityTypeEnum);
typedef void (*NullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::WiFiNetworkDiagnostics::SecurityTypeEnum> &);
typedef void (*WiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallback)(
    void *, chip::app::Clusters::WiFiNetworkDiagnostics::WiFiVersionEnum);
typedef void (*NullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::WiFiNetworkDiagnostics::WiFiVersionEnum> &);
typedef void (*EthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallback)(
    void *, chip::app::Clusters::EthernetNetworkDiagnostics::PHYRateEnum);
typedef void (*NullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::EthernetNetworkDiagnostics::PHYRateEnum> &);
typedef void (*TimeSynchronizationClusterGranularityEnumAttributeCallback)(
    void *, chip::app::Clusters::TimeSynchronization::GranularityEnum);
typedef void (*NullableTimeSynchronizationClusterGranularityEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TimeSynchronization::GranularityEnum> &);
typedef void (*TimeSynchronizationClusterTimeSourceEnumAttributeCallback)(void *,
                                                                          chip::app::Clusters::TimeSynchronization::TimeSourceEnum);
typedef void (*NullableTimeSynchronizationClusterTimeSourceEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TimeSynchronization::TimeSourceEnum> &);
typedef void (*BridgedDeviceBasicInformationClusterColorEnumAttributeCallback)(
    void *, chip::app::Clusters::BridgedDeviceBasicInformation::ColorEnum);
typedef void (*NullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BridgedDeviceBasicInformation::ColorEnum> &);
typedef void (*BridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallback)(
    void *, chip::app::Clusters::BridgedDeviceBasicInformation::ProductFinishEnum);
typedef void (*NullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BridgedDeviceBasicInformation::ProductFinishEnum> &);
typedef void (*AdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallback)(
    void *, chip::app::Clusters::AdministratorCommissioning::CommissioningWindowStatusEnum);
typedef void (*NullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::AdministratorCommissioning::CommissioningWindowStatusEnum> &);
typedef void (*AdministratorCommissioningClusterStatusCodeAttributeCallback)(
    void *, chip::app::Clusters::AdministratorCommissioning::StatusCode);
typedef void (*NullableAdministratorCommissioningClusterStatusCodeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::AdministratorCommissioning::StatusCode> &);
typedef void (*OperationalCredentialsClusterCertificateChainTypeEnumAttributeCallback)(
    void *, chip::app::Clusters::OperationalCredentials::CertificateChainTypeEnum);
typedef void (*NullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OperationalCredentials::CertificateChainTypeEnum> &);
typedef void (*OperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallback)(
    void *, chip::app::Clusters::OperationalCredentials::NodeOperationalCertStatusEnum);
typedef void (*NullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OperationalCredentials::NodeOperationalCertStatusEnum> &);
typedef void (*GroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallback)(
    void *, chip::app::Clusters::GroupKeyManagement::GroupKeySecurityPolicyEnum);
typedef void (*NullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::GroupKeyManagement::GroupKeySecurityPolicyEnum> &);
typedef void (*DoorLockClusterAlarmCodeEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::AlarmCodeEnum);
typedef void (*NullableDoorLockClusterAlarmCodeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::AlarmCodeEnum> &);
typedef void (*DoorLockClusterCredentialRuleEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::CredentialRuleEnum);
typedef void (*NullableDoorLockClusterCredentialRuleEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::CredentialRuleEnum> &);
typedef void (*DoorLockClusterCredentialTypeEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::CredentialTypeEnum);
typedef void (*NullableDoorLockClusterCredentialTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::CredentialTypeEnum> &);
typedef void (*DoorLockClusterDataOperationTypeEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::DataOperationTypeEnum);
typedef void (*NullableDoorLockClusterDataOperationTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DataOperationTypeEnum> &);
typedef void (*DoorLockClusterDlLockStateAttributeCallback)(void *, chip::app::Clusters::DoorLock::DlLockState);
typedef void (*NullableDoorLockClusterDlLockStateAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockState> &);
typedef void (*DoorLockClusterDlLockTypeAttributeCallback)(void *, chip::app::Clusters::DoorLock::DlLockType);
typedef void (*NullableDoorLockClusterDlLockTypeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockType> &);
typedef void (*DoorLockClusterDlStatusAttributeCallback)(void *, chip::app::Clusters::DoorLock::DlStatus);
typedef void (*NullableDoorLockClusterDlStatusAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlStatus> &);
typedef void (*DoorLockClusterDoorLockOperationEventCodeAttributeCallback)(
    void *, chip::app::Clusters::DoorLock::DoorLockOperationEventCode);
typedef void (*NullableDoorLockClusterDoorLockOperationEventCodeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorLockOperationEventCode> &);
typedef void (*DoorLockClusterDoorLockProgrammingEventCodeAttributeCallback)(
    void *, chip::app::Clusters::DoorLock::DoorLockProgrammingEventCode);
typedef void (*NullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorLockProgrammingEventCode> &);
typedef void (*DoorLockClusterDoorLockSetPinOrIdStatusAttributeCallback)(void *,
                                                                         chip::app::Clusters::DoorLock::DoorLockSetPinOrIdStatus);
typedef void (*NullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorLockSetPinOrIdStatus> &);
typedef void (*DoorLockClusterDoorStateEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::DoorStateEnum);
typedef void (*NullableDoorLockClusterDoorStateEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorStateEnum> &);
typedef void (*DoorLockClusterLockDataTypeEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::LockDataTypeEnum);
typedef void (*NullableDoorLockClusterLockDataTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::LockDataTypeEnum> &);
typedef void (*DoorLockClusterLockOperationTypeEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::LockOperationTypeEnum);
typedef void (*NullableDoorLockClusterLockOperationTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::LockOperationTypeEnum> &);
typedef void (*DoorLockClusterOperatingModeEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::OperatingModeEnum);
typedef void (*NullableDoorLockClusterOperatingModeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::OperatingModeEnum> &);
typedef void (*DoorLockClusterOperationErrorEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::OperationErrorEnum);
typedef void (*NullableDoorLockClusterOperationErrorEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::OperationErrorEnum> &);
typedef void (*DoorLockClusterOperationSourceEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::OperationSourceEnum);
typedef void (*NullableDoorLockClusterOperationSourceEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::OperationSourceEnum> &);
typedef void (*DoorLockClusterUserStatusEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::UserStatusEnum);
typedef void (*NullableDoorLockClusterUserStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::UserStatusEnum> &);
typedef void (*DoorLockClusterUserTypeEnumAttributeCallback)(void *, chip::app::Clusters::DoorLock::UserTypeEnum);
typedef void (*NullableDoorLockClusterUserTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::UserTypeEnum> &);
typedef void (*WindowCoveringClusterEndProductTypeAttributeCallback)(void *, chip::app::Clusters::WindowCovering::EndProductType);
typedef void (*NullableWindowCoveringClusterEndProductTypeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::WindowCovering::EndProductType> &);
typedef void (*WindowCoveringClusterTypeAttributeCallback)(void *, chip::app::Clusters::WindowCovering::Type);
typedef void (*NullableWindowCoveringClusterTypeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::WindowCovering::Type> &);
typedef void (*PumpConfigurationAndControlClusterControlModeEnumAttributeCallback)(
    void *, chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum);
typedef void (*NullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum> &);
typedef void (*PumpConfigurationAndControlClusterOperationModeEnumAttributeCallback)(
    void *, chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum);
typedef void (*NullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum> &);
typedef void (*ThermostatClusterSetpointAdjustModeAttributeCallback)(void *, chip::app::Clusters::Thermostat::SetpointAdjustMode);
typedef void (*NullableThermostatClusterSetpointAdjustModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Thermostat::SetpointAdjustMode> &);
typedef void (*ThermostatClusterThermostatControlSequenceAttributeCallback)(
    void *, chip::app::Clusters::Thermostat::ThermostatControlSequence);
typedef void (*NullableThermostatClusterThermostatControlSequenceAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Thermostat::ThermostatControlSequence> &);
typedef void (*ThermostatClusterThermostatRunningModeAttributeCallback)(void *,
                                                                        chip::app::Clusters::Thermostat::ThermostatRunningMode);
typedef void (*NullableThermostatClusterThermostatRunningModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Thermostat::ThermostatRunningMode> &);
typedef void (*ThermostatClusterThermostatSystemModeAttributeCallback)(void *,
                                                                       chip::app::Clusters::Thermostat::ThermostatSystemMode);
typedef void (*NullableThermostatClusterThermostatSystemModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Thermostat::ThermostatSystemMode> &);
typedef void (*FanControlClusterFanModeSequenceTypeAttributeCallback)(void *, chip::app::Clusters::FanControl::FanModeSequenceType);
typedef void (*NullableFanControlClusterFanModeSequenceTypeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FanControl::FanModeSequenceType> &);
typedef void (*FanControlClusterFanModeTypeAttributeCallback)(void *, chip::app::Clusters::FanControl::FanModeType);
typedef void (*NullableFanControlClusterFanModeTypeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FanControl::FanModeType> &);
typedef void (*ColorControlClusterColorLoopActionAttributeCallback)(void *, chip::app::Clusters::ColorControl::ColorLoopAction);
typedef void (*NullableColorControlClusterColorLoopActionAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::ColorLoopAction> &);
typedef void (*ColorControlClusterColorLoopDirectionAttributeCallback)(void *,
                                                                       chip::app::Clusters::ColorControl::ColorLoopDirection);
typedef void (*NullableColorControlClusterColorLoopDirectionAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::ColorLoopDirection> &);
typedef void (*ColorControlClusterColorModeAttributeCallback)(void *, chip::app::Clusters::ColorControl::ColorMode);
typedef void (*NullableColorControlClusterColorModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::ColorMode> &);
typedef void (*ColorControlClusterHueDirectionAttributeCallback)(void *, chip::app::Clusters::ColorControl::HueDirection);
typedef void (*NullableColorControlClusterHueDirectionAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::HueDirection> &);
typedef void (*ColorControlClusterHueMoveModeAttributeCallback)(void *, chip::app::Clusters::ColorControl::HueMoveMode);
typedef void (*NullableColorControlClusterHueMoveModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::HueMoveMode> &);
typedef void (*ColorControlClusterHueStepModeAttributeCallback)(void *, chip::app::Clusters::ColorControl::HueStepMode);
typedef void (*NullableColorControlClusterHueStepModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::HueStepMode> &);
typedef void (*ColorControlClusterSaturationMoveModeAttributeCallback)(void *,
                                                                       chip::app::Clusters::ColorControl::SaturationMoveMode);
typedef void (*NullableColorControlClusterSaturationMoveModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::SaturationMoveMode> &);
typedef void (*ColorControlClusterSaturationStepModeAttributeCallback)(void *,
                                                                       chip::app::Clusters::ColorControl::SaturationStepMode);
typedef void (*NullableColorControlClusterSaturationStepModeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::SaturationStepMode> &);
typedef void (*IlluminanceMeasurementClusterLightSensorTypeAttributeCallback)(
    void *, chip::app::Clusters::IlluminanceMeasurement::LightSensorType);
typedef void (*NullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::IlluminanceMeasurement::LightSensorType> &);
typedef void (*OccupancySensingClusterOccupancySensorTypeEnumAttributeCallback)(
    void *, chip::app::Clusters::OccupancySensing::OccupancySensorTypeEnum);
typedef void (*NullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OccupancySensing::OccupancySensorTypeEnum> &);
typedef void (*CarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::CarbonMonoxideMeasurement::LevelValueEnum);
typedef void (*NullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonMonoxideMeasurement::LevelValueEnum> &);
typedef void (*CarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::CarbonMonoxideMeasurement::MeasurementMediumEnum);
typedef void (*NullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonMonoxideMeasurement::MeasurementMediumEnum> &);
typedef void (*CarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::CarbonMonoxideMeasurement::MeasurementUnitEnum);
typedef void (*NullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonMonoxideMeasurement::MeasurementUnitEnum> &);
typedef void (*CarbonDioxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::CarbonDioxideMeasurement::LevelValueEnum);
typedef void (*NullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonDioxideMeasurement::LevelValueEnum> &);
typedef void (*CarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::CarbonDioxideMeasurement::MeasurementMediumEnum);
typedef void (*NullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonDioxideMeasurement::MeasurementMediumEnum> &);
typedef void (*CarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::CarbonDioxideMeasurement::MeasurementUnitEnum);
typedef void (*NullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonDioxideMeasurement::MeasurementUnitEnum> &);
typedef void (*EthyleneMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                          chip::app::Clusters::EthyleneMeasurement::LevelValueEnum);
typedef void (*NullableEthyleneMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneMeasurement::LevelValueEnum> &);
typedef void (*EthyleneMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::EthyleneMeasurement::MeasurementMediumEnum);
typedef void (*NullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneMeasurement::MeasurementMediumEnum> &);
typedef void (*EthyleneMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::EthyleneMeasurement::MeasurementUnitEnum);
typedef void (*NullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneMeasurement::MeasurementUnitEnum> &);
typedef void (*EthyleneOxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::EthyleneOxideMeasurement::LevelValueEnum);
typedef void (*NullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneOxideMeasurement::LevelValueEnum> &);
typedef void (*EthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::EthyleneOxideMeasurement::MeasurementMediumEnum);
typedef void (*NullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneOxideMeasurement::MeasurementMediumEnum> &);
typedef void (*EthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::EthyleneOxideMeasurement::MeasurementUnitEnum);
typedef void (*NullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneOxideMeasurement::MeasurementUnitEnum> &);
typedef void (*HydrogenMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                          chip::app::Clusters::HydrogenMeasurement::LevelValueEnum);
typedef void (*NullableHydrogenMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenMeasurement::LevelValueEnum> &);
typedef void (*HydrogenMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::HydrogenMeasurement::MeasurementMediumEnum);
typedef void (*NullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenMeasurement::MeasurementMediumEnum> &);
typedef void (*HydrogenMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::HydrogenMeasurement::MeasurementUnitEnum);
typedef void (*NullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenMeasurement::MeasurementUnitEnum> &);
typedef void (*HydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::HydrogenSulfideMeasurement::LevelValueEnum);
typedef void (*NullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenSulfideMeasurement::LevelValueEnum> &);
typedef void (*HydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::HydrogenSulfideMeasurement::MeasurementMediumEnum);
typedef void (*NullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenSulfideMeasurement::MeasurementMediumEnum> &);
typedef void (*HydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::HydrogenSulfideMeasurement::MeasurementUnitEnum);
typedef void (*NullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenSulfideMeasurement::MeasurementUnitEnum> &);
typedef void (*NitricOxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::NitricOxideMeasurement::LevelValueEnum);
typedef void (*NullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::NitricOxideMeasurement::LevelValueEnum> &);
typedef void (*NitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::NitricOxideMeasurement::MeasurementMediumEnum);
typedef void (*NullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::NitricOxideMeasurement::MeasurementMediumEnum> &);
typedef void (*NitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::NitricOxideMeasurement::MeasurementUnitEnum);
typedef void (*NullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::NitricOxideMeasurement::MeasurementUnitEnum> &);
typedef void (*NitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::NitrogenDioxideMeasurement::LevelValueEnum);
typedef void (*NullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::NitrogenDioxideMeasurement::LevelValueEnum> &);
typedef void (*NitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::NitrogenDioxideMeasurement::MeasurementMediumEnum);
typedef void (*NullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::NitrogenDioxideMeasurement::MeasurementMediumEnum> &);
typedef void (*NitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::NitrogenDioxideMeasurement::MeasurementUnitEnum);
typedef void (*NullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::NitrogenDioxideMeasurement::MeasurementUnitEnum> &);
typedef void (*OxygenMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                        chip::app::Clusters::OxygenMeasurement::LevelValueEnum);
typedef void (*NullableOxygenMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OxygenMeasurement::LevelValueEnum> &);
typedef void (*OxygenMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::OxygenMeasurement::MeasurementMediumEnum);
typedef void (*NullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OxygenMeasurement::MeasurementMediumEnum> &);
typedef void (*OxygenMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::OxygenMeasurement::MeasurementUnitEnum);
typedef void (*NullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OxygenMeasurement::MeasurementUnitEnum> &);
typedef void (*OzoneMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                       chip::app::Clusters::OzoneMeasurement::LevelValueEnum);
typedef void (*NullableOzoneMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OzoneMeasurement::LevelValueEnum> &);
typedef void (*OzoneMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::OzoneMeasurement::MeasurementMediumEnum);
typedef void (*NullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OzoneMeasurement::MeasurementMediumEnum> &);
typedef void (*OzoneMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::OzoneMeasurement::MeasurementUnitEnum);
typedef void (*NullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::OzoneMeasurement::MeasurementUnitEnum> &);
typedef void (*SulfurDioxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::SulfurDioxideMeasurement::LevelValueEnum);
typedef void (*NullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::SulfurDioxideMeasurement::LevelValueEnum> &);
typedef void (*SulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::SulfurDioxideMeasurement::MeasurementMediumEnum);
typedef void (*NullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::SulfurDioxideMeasurement::MeasurementMediumEnum> &);
typedef void (*SulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::SulfurDioxideMeasurement::MeasurementUnitEnum);
typedef void (*NullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::SulfurDioxideMeasurement::MeasurementUnitEnum> &);
typedef void (*DissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::DissolvedOxygenMeasurement::LevelValueEnum);
typedef void (*NullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DissolvedOxygenMeasurement::LevelValueEnum> &);
typedef void (*DissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::DissolvedOxygenMeasurement::MeasurementMediumEnum);
typedef void (*NullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DissolvedOxygenMeasurement::MeasurementMediumEnum> &);
typedef void (*DissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::DissolvedOxygenMeasurement::MeasurementUnitEnum);
typedef void (*NullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::DissolvedOxygenMeasurement::MeasurementUnitEnum> &);
typedef void (*BromateMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                         chip::app::Clusters::BromateMeasurement::LevelValueEnum);
typedef void (*NullableBromateMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BromateMeasurement::LevelValueEnum> &);
typedef void (*BromateMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::BromateMeasurement::MeasurementMediumEnum);
typedef void (*NullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BromateMeasurement::MeasurementMediumEnum> &);
typedef void (*BromateMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::BromateMeasurement::MeasurementUnitEnum);
typedef void (*NullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BromateMeasurement::MeasurementUnitEnum> &);
typedef void (*ChloraminesMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::ChloraminesMeasurement::LevelValueEnum);
typedef void (*NullableChloraminesMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChloraminesMeasurement::LevelValueEnum> &);
typedef void (*ChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::ChloraminesMeasurement::MeasurementMediumEnum);
typedef void (*NullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChloraminesMeasurement::MeasurementMediumEnum> &);
typedef void (*ChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::ChloraminesMeasurement::MeasurementUnitEnum);
typedef void (*NullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChloraminesMeasurement::MeasurementUnitEnum> &);
typedef void (*ChlorineMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                          chip::app::Clusters::ChlorineMeasurement::LevelValueEnum);
typedef void (*NullableChlorineMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorineMeasurement::LevelValueEnum> &);
typedef void (*ChlorineMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::ChlorineMeasurement::MeasurementMediumEnum);
typedef void (*NullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorineMeasurement::MeasurementMediumEnum> &);
typedef void (*ChlorineMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::ChlorineMeasurement::MeasurementUnitEnum);
typedef void (*NullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorineMeasurement::MeasurementUnitEnum> &);
typedef void (*FecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::FecalColiformEColiMeasurement::LevelValueEnum);
typedef void (*NullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FecalColiformEColiMeasurement::LevelValueEnum> &);
typedef void (*FecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::FecalColiformEColiMeasurement::MeasurementMediumEnum);
typedef void (*NullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FecalColiformEColiMeasurement::MeasurementMediumEnum> &);
typedef void (*FecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::FecalColiformEColiMeasurement::MeasurementUnitEnum);
typedef void (*NullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FecalColiformEColiMeasurement::MeasurementUnitEnum> &);
typedef void (*FluorideMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                          chip::app::Clusters::FluorideMeasurement::LevelValueEnum);
typedef void (*NullableFluorideMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FluorideMeasurement::LevelValueEnum> &);
typedef void (*FluorideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::FluorideMeasurement::MeasurementMediumEnum);
typedef void (*NullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FluorideMeasurement::MeasurementMediumEnum> &);
typedef void (*FluorideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::FluorideMeasurement::MeasurementUnitEnum);
typedef void (*NullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FluorideMeasurement::MeasurementUnitEnum> &);
typedef void (*HaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::HaloaceticAcidsMeasurement::LevelValueEnum);
typedef void (*NullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::HaloaceticAcidsMeasurement::LevelValueEnum> &);
typedef void (*HaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::HaloaceticAcidsMeasurement::MeasurementMediumEnum);
typedef void (*NullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::HaloaceticAcidsMeasurement::MeasurementMediumEnum> &);
typedef void (*HaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::HaloaceticAcidsMeasurement::MeasurementUnitEnum);
typedef void (*NullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::HaloaceticAcidsMeasurement::MeasurementUnitEnum> &);
typedef void (*TotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::TotalTrihalomethanesMeasurement::LevelValueEnum);
typedef void (*NullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TotalTrihalomethanesMeasurement::LevelValueEnum> &);
typedef void (*TotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::TotalTrihalomethanesMeasurement::MeasurementMediumEnum);
typedef void (*NullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TotalTrihalomethanesMeasurement::MeasurementMediumEnum> &);
typedef void (*TotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::TotalTrihalomethanesMeasurement::MeasurementUnitEnum);
typedef void (*NullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TotalTrihalomethanesMeasurement::MeasurementUnitEnum> &);
typedef void (*TotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::TotalColiformBacteriaMeasurement::LevelValueEnum);
typedef void (*NullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TotalColiformBacteriaMeasurement::LevelValueEnum> &);
typedef void (*TotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::TotalColiformBacteriaMeasurement::MeasurementMediumEnum);
typedef void (*NullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TotalColiformBacteriaMeasurement::MeasurementMediumEnum> &);
typedef void (*TotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::TotalColiformBacteriaMeasurement::MeasurementUnitEnum);
typedef void (*NullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TotalColiformBacteriaMeasurement::MeasurementUnitEnum> &);
typedef void (*TurbidityMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::TurbidityMeasurement::LevelValueEnum);
typedef void (*NullableTurbidityMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TurbidityMeasurement::LevelValueEnum> &);
typedef void (*TurbidityMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::TurbidityMeasurement::MeasurementMediumEnum);
typedef void (*NullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TurbidityMeasurement::MeasurementMediumEnum> &);
typedef void (*TurbidityMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::TurbidityMeasurement::MeasurementUnitEnum);
typedef void (*NullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TurbidityMeasurement::MeasurementUnitEnum> &);
typedef void (*CopperMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                        chip::app::Clusters::CopperMeasurement::LevelValueEnum);
typedef void (*NullableCopperMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::CopperMeasurement::LevelValueEnum> &);
typedef void (*CopperMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::CopperMeasurement::MeasurementMediumEnum);
typedef void (*NullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::CopperMeasurement::MeasurementMediumEnum> &);
typedef void (*CopperMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::CopperMeasurement::MeasurementUnitEnum);
typedef void (*NullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::CopperMeasurement::MeasurementUnitEnum> &);
typedef void (*LeadMeasurementClusterLevelValueEnumAttributeCallback)(void *, chip::app::Clusters::LeadMeasurement::LevelValueEnum);
typedef void (*NullableLeadMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::LeadMeasurement::LevelValueEnum> &);
typedef void (*LeadMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::LeadMeasurement::MeasurementMediumEnum);
typedef void (*NullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::LeadMeasurement::MeasurementMediumEnum> &);
typedef void (*LeadMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::LeadMeasurement::MeasurementUnitEnum);
typedef void (*NullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::LeadMeasurement::MeasurementUnitEnum> &);
typedef void (*ManganeseMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::ManganeseMeasurement::LevelValueEnum);
typedef void (*NullableManganeseMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ManganeseMeasurement::LevelValueEnum> &);
typedef void (*ManganeseMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::ManganeseMeasurement::MeasurementMediumEnum);
typedef void (*NullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ManganeseMeasurement::MeasurementMediumEnum> &);
typedef void (*ManganeseMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::ManganeseMeasurement::MeasurementUnitEnum);
typedef void (*NullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ManganeseMeasurement::MeasurementUnitEnum> &);
typedef void (*SulfateMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                         chip::app::Clusters::SulfateMeasurement::LevelValueEnum);
typedef void (*NullableSulfateMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::SulfateMeasurement::LevelValueEnum> &);
typedef void (*SulfateMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::SulfateMeasurement::MeasurementMediumEnum);
typedef void (*NullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::SulfateMeasurement::MeasurementMediumEnum> &);
typedef void (*SulfateMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::SulfateMeasurement::MeasurementUnitEnum);
typedef void (*NullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::SulfateMeasurement::MeasurementUnitEnum> &);
typedef void (*BromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::BromodichloromethaneMeasurement::LevelValueEnum);
typedef void (*NullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BromodichloromethaneMeasurement::LevelValueEnum> &);
typedef void (*BromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::BromodichloromethaneMeasurement::MeasurementMediumEnum);
typedef void (*NullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BromodichloromethaneMeasurement::MeasurementMediumEnum> &);
typedef void (*BromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::BromodichloromethaneMeasurement::MeasurementUnitEnum);
typedef void (*NullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BromodichloromethaneMeasurement::MeasurementUnitEnum> &);
typedef void (*BromoformMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::BromoformMeasurement::LevelValueEnum);
typedef void (*NullableBromoformMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BromoformMeasurement::LevelValueEnum> &);
typedef void (*BromoformMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::BromoformMeasurement::MeasurementMediumEnum);
typedef void (*NullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BromoformMeasurement::MeasurementMediumEnum> &);
typedef void (*BromoformMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::BromoformMeasurement::MeasurementUnitEnum);
typedef void (*NullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::BromoformMeasurement::MeasurementUnitEnum> &);
typedef void (*ChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::ChlorodibromomethaneMeasurement::LevelValueEnum);
typedef void (*NullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorodibromomethaneMeasurement::LevelValueEnum> &);
typedef void (*ChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::ChlorodibromomethaneMeasurement::MeasurementMediumEnum);
typedef void (*NullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorodibromomethaneMeasurement::MeasurementMediumEnum> &);
typedef void (*ChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::ChlorodibromomethaneMeasurement::MeasurementUnitEnum);
typedef void (*NullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorodibromomethaneMeasurement::MeasurementUnitEnum> &);
typedef void (*ChloroformMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::ChloroformMeasurement::LevelValueEnum);
typedef void (*NullableChloroformMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChloroformMeasurement::LevelValueEnum> &);
typedef void (*ChloroformMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::ChloroformMeasurement::MeasurementMediumEnum);
typedef void (*NullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChloroformMeasurement::MeasurementMediumEnum> &);
typedef void (*ChloroformMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::ChloroformMeasurement::MeasurementUnitEnum);
typedef void (*NullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ChloroformMeasurement::MeasurementUnitEnum> &);
typedef void (*SodiumMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                        chip::app::Clusters::SodiumMeasurement::LevelValueEnum);
typedef void (*NullableSodiumMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::SodiumMeasurement::LevelValueEnum> &);
typedef void (*SodiumMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::SodiumMeasurement::MeasurementMediumEnum);
typedef void (*NullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::SodiumMeasurement::MeasurementMediumEnum> &);
typedef void (*SodiumMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::SodiumMeasurement::MeasurementUnitEnum);
typedef void (*NullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::SodiumMeasurement::MeasurementUnitEnum> &);
typedef void (*PM25MeasurementClusterLevelValueEnumAttributeCallback)(void *, chip::app::Clusters::Pm25Measurement::LevelValueEnum);
typedef void (*NullablePM25MeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Pm25Measurement::LevelValueEnum> &);
typedef void (*PM25MeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::Pm25Measurement::MeasurementMediumEnum);
typedef void (*NullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Pm25Measurement::MeasurementMediumEnum> &);
typedef void (*PM25MeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::Pm25Measurement::MeasurementUnitEnum);
typedef void (*NullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Pm25Measurement::MeasurementUnitEnum> &);
typedef void (*FormaldehydeMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::FormaldehydeMeasurement::LevelValueEnum);
typedef void (*NullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FormaldehydeMeasurement::LevelValueEnum> &);
typedef void (*FormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::FormaldehydeMeasurement::MeasurementMediumEnum);
typedef void (*NullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FormaldehydeMeasurement::MeasurementMediumEnum> &);
typedef void (*FormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::FormaldehydeMeasurement::MeasurementUnitEnum);
typedef void (*NullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FormaldehydeMeasurement::MeasurementUnitEnum> &);
typedef void (*PM1MeasurementClusterLevelValueEnumAttributeCallback)(void *, chip::app::Clusters::Pm1Measurement::LevelValueEnum);
typedef void (*NullablePM1MeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Pm1Measurement::LevelValueEnum> &);
typedef void (*PM1MeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::Pm1Measurement::MeasurementMediumEnum);
typedef void (*NullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Pm1Measurement::MeasurementMediumEnum> &);
typedef void (*PM1MeasurementClusterMeasurementUnitEnumAttributeCallback)(void *,
                                                                          chip::app::Clusters::Pm1Measurement::MeasurementUnitEnum);
typedef void (*NullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Pm1Measurement::MeasurementUnitEnum> &);
typedef void (*PM10MeasurementClusterLevelValueEnumAttributeCallback)(void *, chip::app::Clusters::Pm10Measurement::LevelValueEnum);
typedef void (*NullablePM10MeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Pm10Measurement::LevelValueEnum> &);
typedef void (*PM10MeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::Pm10Measurement::MeasurementMediumEnum);
typedef void (*NullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Pm10Measurement::MeasurementMediumEnum> &);
typedef void (*PM10MeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::Pm10Measurement::MeasurementUnitEnum);
typedef void (*NullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Pm10Measurement::MeasurementUnitEnum> &);
typedef void (*TotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::LevelValueEnum);
typedef void (*NullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::LevelValueEnum> &);
typedef void (*TotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::MeasurementMediumEnum);
typedef void (*NullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *,
    const chip::app::DataModel::Nullable<chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::MeasurementMediumEnum> &);
typedef void (*TotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::MeasurementUnitEnum);
typedef void (*NullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *,
    const chip::app::DataModel::Nullable<chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::MeasurementUnitEnum> &);
typedef void (*RadonMeasurementClusterLevelValueEnumAttributeCallback)(void *,
                                                                       chip::app::Clusters::RadonMeasurement::LevelValueEnum);
typedef void (*NullableRadonMeasurementClusterLevelValueEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::RadonMeasurement::LevelValueEnum> &);
typedef void (*RadonMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, chip::app::Clusters::RadonMeasurement::MeasurementMediumEnum);
typedef void (*NullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::RadonMeasurement::MeasurementMediumEnum> &);
typedef void (*RadonMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, chip::app::Clusters::RadonMeasurement::MeasurementUnitEnum);
typedef void (*NullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::RadonMeasurement::MeasurementUnitEnum> &);
typedef void (*ChannelClusterChannelStatusEnumAttributeCallback)(void *, chip::app::Clusters::Channel::ChannelStatusEnum);
typedef void (*NullableChannelClusterChannelStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Channel::ChannelStatusEnum> &);
typedef void (*ChannelClusterLineupInfoTypeEnumAttributeCallback)(void *, chip::app::Clusters::Channel::LineupInfoTypeEnum);
typedef void (*NullableChannelClusterLineupInfoTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Channel::LineupInfoTypeEnum> &);
typedef void (*TargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallback)(
    void *, chip::app::Clusters::TargetNavigator::TargetNavigatorStatusEnum);
typedef void (*NullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::TargetNavigator::TargetNavigatorStatusEnum> &);
typedef void (*MediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallback)(
    void *, chip::app::Clusters::MediaPlayback::MediaPlaybackStatusEnum);
typedef void (*NullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::MediaPlayback::MediaPlaybackStatusEnum> &);
typedef void (*MediaPlaybackClusterPlaybackStateEnumAttributeCallback)(void *,
                                                                       chip::app::Clusters::MediaPlayback::PlaybackStateEnum);
typedef void (*NullableMediaPlaybackClusterPlaybackStateEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::MediaPlayback::PlaybackStateEnum> &);
typedef void (*MediaInputClusterInputTypeEnumAttributeCallback)(void *, chip::app::Clusters::MediaInput::InputTypeEnum);
typedef void (*NullableMediaInputClusterInputTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::MediaInput::InputTypeEnum> &);
typedef void (*KeypadInputClusterCecKeyCodeAttributeCallback)(void *, chip::app::Clusters::KeypadInput::CecKeyCode);
typedef void (*NullableKeypadInputClusterCecKeyCodeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::KeypadInput::CecKeyCode> &);
typedef void (*KeypadInputClusterKeypadInputStatusEnumAttributeCallback)(void *,
                                                                         chip::app::Clusters::KeypadInput::KeypadInputStatusEnum);
typedef void (*NullableKeypadInputClusterKeypadInputStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::KeypadInput::KeypadInputStatusEnum> &);
typedef void (*ContentLauncherClusterContentLaunchStatusEnumAttributeCallback)(
    void *, chip::app::Clusters::ContentLauncher::ContentLaunchStatusEnum);
typedef void (*NullableContentLauncherClusterContentLaunchStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ContentLauncher::ContentLaunchStatusEnum> &);
typedef void (*ContentLauncherClusterMetricTypeEnumAttributeCallback)(void *, chip::app::Clusters::ContentLauncher::MetricTypeEnum);
typedef void (*NullableContentLauncherClusterMetricTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ContentLauncher::MetricTypeEnum> &);
typedef void (*ContentLauncherClusterParameterEnumAttributeCallback)(void *, chip::app::Clusters::ContentLauncher::ParameterEnum);
typedef void (*NullableContentLauncherClusterParameterEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ContentLauncher::ParameterEnum> &);
typedef void (*AudioOutputClusterOutputTypeEnumAttributeCallback)(void *, chip::app::Clusters::AudioOutput::OutputTypeEnum);
typedef void (*NullableAudioOutputClusterOutputTypeEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::AudioOutput::OutputTypeEnum> &);
typedef void (*ApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallback)(
    void *, chip::app::Clusters::ApplicationLauncher::ApplicationLauncherStatusEnum);
typedef void (*NullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ApplicationLauncher::ApplicationLauncherStatusEnum> &);
typedef void (*ApplicationBasicClusterApplicationStatusEnumAttributeCallback)(
    void *, chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum);
typedef void (*NullableApplicationBasicClusterApplicationStatusEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum> &);
typedef void (*UnitTestingClusterSimpleEnumAttributeCallback)(void *, chip::app::Clusters::UnitTesting::SimpleEnum);
typedef void (*NullableUnitTestingClusterSimpleEnumAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::UnitTesting::SimpleEnum> &);
typedef void (*FaultInjectionClusterFaultTypeAttributeCallback)(void *, chip::app::Clusters::FaultInjection::FaultType);
typedef void (*NullableFaultInjectionClusterFaultTypeAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::FaultInjection::FaultType> &);

typedef void (*IdentifyGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*IdentifyAcceptedCommandListListAttributeCallback)(void * context,
                                                                 const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*IdentifyAttributeListListAttributeCallback)(void * context,
                                                           const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*GroupsGeneratedCommandListListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*GroupsAcceptedCommandListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*GroupsAttributeListListAttributeCallback)(void * context,
                                                         const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ScenesGeneratedCommandListListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ScenesAcceptedCommandListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ScenesAttributeListListAttributeCallback)(void * context,
                                                         const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*OnOffGeneratedCommandListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OnOffAcceptedCommandListListAttributeCallback)(void * context,
                                                              const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OnOffAttributeListListAttributeCallback)(void * context,
                                                        const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*OnOffSwitchConfigurationGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OnOffSwitchConfigurationAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OnOffSwitchConfigurationAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*LevelControlOptionsAttributeCallback)(void *, chip::BitMask<chip::app::Clusters::LevelControl::LevelControlOptions>);
typedef void (*LevelControlGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*LevelControlAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*LevelControlAttributeListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BinaryInputBasicGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BinaryInputBasicAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BinaryInputBasicAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*DescriptorDeviceTypeListListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::Descriptor::Structs::DeviceTypeStruct::DecodableType> & data);
typedef void (*DescriptorServerListListAttributeCallback)(void * context,
                                                          const chip::app::DataModel::DecodableList<chip::ClusterId> & data);
typedef void (*DescriptorClientListListAttributeCallback)(void * context,
                                                          const chip::app::DataModel::DecodableList<chip::ClusterId> & data);
typedef void (*DescriptorPartsListListAttributeCallback)(void * context,
                                                         const chip::app::DataModel::DecodableList<chip::EndpointId> & data);
typedef void (*DescriptorGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*DescriptorAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*DescriptorAttributeListListAttributeCallback)(void * context,
                                                             const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BindingBindingListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::Binding::Structs::TargetStruct::DecodableType> & data);
typedef void (*BindingGeneratedCommandListListAttributeCallback)(void * context,
                                                                 const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BindingAcceptedCommandListListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BindingAttributeListListAttributeCallback)(void * context,
                                                          const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*AccessControlACLListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::AccessControl::Structs::AccessControlEntryStruct::DecodableType> & data);
typedef void (*AccessControlExtensionListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::AccessControl::Structs::AccessControlExtensionStruct::DecodableType> & data);
typedef void (*AccessControlGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*AccessControlAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*AccessControlAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ActionsActionListListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::Actions::Structs::ActionStruct::DecodableType> & data);
typedef void (*ActionsEndpointListsListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::Actions::Structs::EndpointListStruct::DecodableType> & data);
typedef void (*ActionsGeneratedCommandListListAttributeCallback)(void * context,
                                                                 const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ActionsAcceptedCommandListListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ActionsAttributeListListAttributeCallback)(void * context,
                                                          const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BasicInformationCapabilityMinimaStructAttributeCallback)(
    void *, const chip::app::Clusters::BasicInformation::Structs::CapabilityMinimaStruct::DecodableType &);
typedef void (*BasicInformationProductAppearanceStructAttributeCallback)(
    void *, const chip::app::Clusters::BasicInformation::Structs::ProductAppearanceStruct::DecodableType &);
typedef void (*BasicInformationGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BasicInformationAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BasicInformationAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*OTASoftwareUpdateProviderGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OTASoftwareUpdateProviderAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OTASoftwareUpdateProviderAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*OTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::DecodableType> & data);
typedef void (*OTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OTASoftwareUpdateRequestorAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*LocalizationConfigurationSupportedLocalesListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CharSpan> & data);
typedef void (*LocalizationConfigurationGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*LocalizationConfigurationAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*LocalizationConfigurationAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*TimeFormatLocalizationSupportedCalendarTypesListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TimeFormatLocalization::CalendarTypeEnum> & data);
typedef void (*TimeFormatLocalizationGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TimeFormatLocalizationAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TimeFormatLocalizationAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*UnitLocalizationGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*UnitLocalizationAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*UnitLocalizationAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*PowerSourceConfigurationSourcesListAttributeCallback)(void * context,
                                                                     const chip::app::DataModel::DecodableList<uint8_t> & data);
typedef void (*PowerSourceConfigurationGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PowerSourceConfigurationAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PowerSourceConfigurationAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*PowerSourceActiveWiredFaultsListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::PowerSource::WiredFaultEnum> & data);
typedef void (*PowerSourceActiveBatFaultsListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::PowerSource::BatFaultEnum> & data);
typedef void (*PowerSourceActiveBatChargeFaultsListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::PowerSource::BatChargeFaultEnum> & data);
typedef void (*PowerSourceGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PowerSourceAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PowerSourceAttributeListListAttributeCallback)(void * context,
                                                              const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*GeneralCommissioningBasicCommissioningInfoStructAttributeCallback)(
    void *, const chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfo::DecodableType &);
typedef void (*GeneralCommissioningGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*GeneralCommissioningAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*GeneralCommissioningAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*NetworkCommissioningNetworksListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::NetworkCommissioning::Structs::NetworkInfo::DecodableType> &
        data);
typedef void (*NetworkCommissioningGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*NetworkCommissioningAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*NetworkCommissioningAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*DiagnosticLogsGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*DiagnosticLogsAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*DiagnosticLogsAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*GeneralDiagnosticsNetworkInterfacesListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterface::DecodableType> &
        data);
typedef void (*GeneralDiagnosticsActiveHardwareFaultsListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::GeneralDiagnostics::HardwareFaultEnum> & data);
typedef void (*GeneralDiagnosticsActiveRadioFaultsListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::GeneralDiagnostics::RadioFaultEnum> & data);
typedef void (*GeneralDiagnosticsActiveNetworkFaultsListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::GeneralDiagnostics::NetworkFaultEnum> & data);
typedef void (*GeneralDiagnosticsGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*GeneralDiagnosticsAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*GeneralDiagnosticsAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*SoftwareDiagnosticsThreadMetricsListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetricsStruct::DecodableType> & data);
typedef void (*SoftwareDiagnosticsGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SoftwareDiagnosticsAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SoftwareDiagnosticsAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ThreadNetworkDiagnosticsNeighborTableListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType> & data);
typedef void (*ThreadNetworkDiagnosticsRouteTableListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType> &
        data);
typedef void (*ThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallback)(
    void *,
    const chip::app::DataModel::Nullable<chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType> &);
typedef void (*ThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallback)(
    void *,
    const chip::app::DataModel::Nullable<
        chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType> &);
typedef void (*ThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> & data);
typedef void (*ThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ThreadNetworkDiagnosticsAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*WiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*WiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*WiFiNetworkDiagnosticsAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*EthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*EthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*EthernetNetworkDiagnosticsAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BridgedDeviceBasicInformationProductAppearanceStructAttributeCallback)(
    void *, const chip::app::Clusters::BridgedDeviceBasicInformation::Structs::ProductAppearanceStruct::DecodableType &);
typedef void (*BridgedDeviceBasicInformationGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BridgedDeviceBasicInformationAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BridgedDeviceBasicInformationAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*SwitchGeneratedCommandListListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SwitchAcceptedCommandListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SwitchAttributeListListAttributeCallback)(void * context,
                                                         const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*AdministratorCommissioningGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*AdministratorCommissioningAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*AdministratorCommissioningAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*OperationalCredentialsNOCsListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::OperationalCredentials::Structs::NOCStruct::DecodableType> &
        data);
typedef void (*OperationalCredentialsFabricsListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptorStruct::DecodableType> & data);
typedef void (*OperationalCredentialsTrustedRootCertificatesListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & data);
typedef void (*OperationalCredentialsGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OperationalCredentialsAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OperationalCredentialsAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*GroupKeyManagementGroupKeyMapListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupKeyMapStruct::DecodableType> &
        data);
typedef void (*GroupKeyManagementGroupTableListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupInfoMapStruct::DecodableType> &
        data);
typedef void (*GroupKeyManagementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*GroupKeyManagementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*GroupKeyManagementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*FixedLabelLabelListListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::FixedLabel::Structs::LabelStruct::DecodableType> & data);
typedef void (*FixedLabelGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FixedLabelAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FixedLabelAttributeListListAttributeCallback)(void * context,
                                                             const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*UserLabelLabelListListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::UserLabel::Structs::LabelStruct::DecodableType> & data);
typedef void (*UserLabelGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*UserLabelAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*UserLabelAttributeListListAttributeCallback)(void * context,
                                                            const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BooleanStateGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BooleanStateAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BooleanStateAttributeListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ModeSelectSupportedModesListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::DecodableType> & data);
typedef void (*ModeSelectGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ModeSelectAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ModeSelectAttributeListListAttributeCallback)(void * context,
                                                             const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*DoorLockCredentialRulesSupportAttributeCallback)(void *,
                                                                chip::BitMask<chip::app::Clusters::DoorLock::DlCredentialRuleMask>);
typedef void (*DoorLockSupportedOperatingModesAttributeCallback)(
    void *, chip::BitMask<chip::app::Clusters::DoorLock::DlSupportedOperatingModes>);
typedef void (*DoorLockDefaultConfigurationRegisterAttributeCallback)(
    void *, chip::BitMask<chip::app::Clusters::DoorLock::DlDefaultConfigurationRegister>);
typedef void (*DoorLockLocalProgrammingFeaturesAttributeCallback)(
    void *, chip::BitMask<chip::app::Clusters::DoorLock::DlLocalProgrammingFeatures>);
typedef void (*DoorLockGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*DoorLockAcceptedCommandListListAttributeCallback)(void * context,
                                                                 const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*DoorLockAttributeListListAttributeCallback)(void * context,
                                                           const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*WindowCoveringConfigStatusAttributeCallback)(void *,
                                                            chip::BitMask<chip::app::Clusters::WindowCovering::ConfigStatus>);
typedef void (*WindowCoveringOperationalStatusAttributeCallback)(
    void *, chip::BitMask<chip::app::Clusters::WindowCovering::OperationalStatus>);
typedef void (*WindowCoveringModeAttributeCallback)(void *, chip::BitMask<chip::app::Clusters::WindowCovering::Mode>);
typedef void (*WindowCoveringSafetyStatusAttributeCallback)(void *,
                                                            chip::BitMask<chip::app::Clusters::WindowCovering::SafetyStatus>);
typedef void (*WindowCoveringGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*WindowCoveringAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*WindowCoveringAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BarrierControlGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BarrierControlAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BarrierControlAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*PumpConfigurationAndControlPumpStatusAttributeCallback)(
    void *, chip::BitMask<chip::app::Clusters::PumpConfigurationAndControl::PumpStatusBitmap>);
typedef void (*PumpConfigurationAndControlGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PumpConfigurationAndControlAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PumpConfigurationAndControlAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ThermostatGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ThermostatAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ThermostatAttributeListListAttributeCallback)(void * context,
                                                             const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*FanControlGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FanControlAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FanControlAttributeListListAttributeCallback)(void * context,
                                                             const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ThermostatUserInterfaceConfigurationAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ColorControlGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ColorControlAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ColorControlAttributeListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BallastConfigurationGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BallastConfigurationAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BallastConfigurationAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*IlluminanceMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*IlluminanceMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*IlluminanceMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*TemperatureMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TemperatureMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TemperatureMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*PressureMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PressureMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PressureMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*FlowMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FlowMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FlowMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*RelativeHumidityMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*RelativeHumidityMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*RelativeHumidityMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*OccupancySensingOccupancyAttributeCallback)(void *,
                                                           chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancyBitmap>);
typedef void (*OccupancySensingOccupancySensorTypeBitmapAttributeCallback)(
    void *, chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancySensorTypeBitmap>);
typedef void (*OccupancySensingGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OccupancySensingAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OccupancySensingAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*CarbonMonoxideMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*CarbonMonoxideMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*CarbonMonoxideMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*CarbonMonoxideMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*CarbonDioxideMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*CarbonDioxideMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*CarbonDioxideMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*CarbonDioxideMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*EthyleneMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*EthyleneMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*EthyleneMeasurementEventListListAttributeCallback)(void * context,
                                                                  const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*EthyleneMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*EthyleneOxideMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*EthyleneOxideMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*EthyleneOxideMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*EthyleneOxideMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*HydrogenMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*HydrogenMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*HydrogenMeasurementEventListListAttributeCallback)(void * context,
                                                                  const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*HydrogenMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*HydrogenSulfideMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*HydrogenSulfideMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*HydrogenSulfideMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*HydrogenSulfideMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*NitricOxideMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*NitricOxideMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*NitricOxideMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*NitricOxideMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*NitrogenDioxideMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*NitrogenDioxideMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*NitrogenDioxideMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*NitrogenDioxideMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*OxygenMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OxygenMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OxygenMeasurementEventListListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*OxygenMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*OzoneMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OzoneMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*OzoneMeasurementEventListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*OzoneMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*SulfurDioxideMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SulfurDioxideMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SulfurDioxideMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*SulfurDioxideMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*DissolvedOxygenMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*DissolvedOxygenMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*DissolvedOxygenMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*DissolvedOxygenMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BromateMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BromateMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BromateMeasurementEventListListAttributeCallback)(void * context,
                                                                 const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*BromateMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ChloraminesMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChloraminesMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChloraminesMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*ChloraminesMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ChlorineMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChlorineMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChlorineMeasurementEventListListAttributeCallback)(void * context,
                                                                  const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*ChlorineMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*FecalColiformEColiMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FecalColiformEColiMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FecalColiformEColiMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*FecalColiformEColiMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*FluorideMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FluorideMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FluorideMeasurementEventListListAttributeCallback)(void * context,
                                                                  const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*FluorideMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*HaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*HaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*HaloaceticAcidsMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*HaloaceticAcidsMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*TotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TotalTrihalomethanesMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*TotalTrihalomethanesMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*TotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TotalColiformBacteriaMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*TotalColiformBacteriaMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*TurbidityMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TurbidityMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TurbidityMeasurementEventListListAttributeCallback)(void * context,
                                                                   const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*TurbidityMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*CopperMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*CopperMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*CopperMeasurementEventListListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*CopperMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*LeadMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*LeadMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*LeadMeasurementEventListListAttributeCallback)(void * context,
                                                              const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*LeadMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ManganeseMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ManganeseMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ManganeseMeasurementEventListListAttributeCallback)(void * context,
                                                                   const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*ManganeseMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*SulfateMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SulfateMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SulfateMeasurementEventListListAttributeCallback)(void * context,
                                                                 const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*SulfateMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BromodichloromethaneMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BromodichloromethaneMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BromodichloromethaneMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*BromodichloromethaneMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*BromoformMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BromoformMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*BromoformMeasurementEventListListAttributeCallback)(void * context,
                                                                   const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*BromoformMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChlorodibromomethaneMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*ChlorodibromomethaneMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ChloroformMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChloroformMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChloroformMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*ChloroformMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*SodiumMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SodiumMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*SodiumMeasurementEventListListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*SodiumMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*PM25MeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PM25MeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PM25MeasurementEventListListAttributeCallback)(void * context,
                                                              const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*PM25MeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*FormaldehydeMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FormaldehydeMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*FormaldehydeMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*FormaldehydeMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*PM1MeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PM1MeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PM1MeasurementEventListListAttributeCallback)(void * context,
                                                             const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*PM1MeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*PM10MeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PM10MeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*PM10MeasurementEventListListAttributeCallback)(void * context,
                                                              const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*PM10MeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*TotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*TotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*RadonMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*RadonMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*RadonMeasurementEventListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::EventId> & data);
typedef void (*RadonMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*WakeOnLANGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*WakeOnLANAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*WakeOnLANAttributeListListAttributeCallback)(void * context,
                                                            const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ChannelChannelListListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::Channel::Structs::ChannelInfoStruct::DecodableType> & data);
typedef void (*ChannelLineupStructAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Channel::Structs::LineupInfoStruct::DecodableType> &);
typedef void (*ChannelCurrentChannelStructAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::Channel::Structs::ChannelInfoStruct::DecodableType> &);
typedef void (*ChannelGeneratedCommandListListAttributeCallback)(void * context,
                                                                 const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChannelAcceptedCommandListListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ChannelAttributeListListAttributeCallback)(void * context,
                                                          const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*TargetNavigatorTargetListListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::TargetNavigator::Structs::TargetInfoStruct::DecodableType> &
        data);
typedef void (*TargetNavigatorGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TargetNavigatorAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*TargetNavigatorAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*MediaPlaybackSampledPositionStructAttributeCallback)(
    void *,
    const chip::app::DataModel::Nullable<chip::app::Clusters::MediaPlayback::Structs::PlaybackPositionStruct::DecodableType> &);
typedef void (*MediaPlaybackGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*MediaPlaybackAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*MediaPlaybackAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*MediaInputInputListListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::MediaInput::Structs::InputInfoStruct::DecodableType> & data);
typedef void (*MediaInputGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*MediaInputAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*MediaInputAttributeListListAttributeCallback)(void * context,
                                                             const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*LowPowerGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*LowPowerAcceptedCommandListListAttributeCallback)(void * context,
                                                                 const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*LowPowerAttributeListListAttributeCallback)(void * context,
                                                           const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*KeypadInputGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*KeypadInputAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*KeypadInputAttributeListListAttributeCallback)(void * context,
                                                              const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ContentLauncherAcceptHeaderListAttributeCallback)(void * context,
                                                                 const chip::app::DataModel::DecodableList<chip::CharSpan> & data);
typedef void (*ContentLauncherGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ContentLauncherAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ContentLauncherAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*AudioOutputOutputListListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::AudioOutput::Structs::OutputInfoStruct::DecodableType> & data);
typedef void (*AudioOutputGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*AudioOutputAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*AudioOutputAttributeListListAttributeCallback)(void * context,
                                                              const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ApplicationLauncherCatalogListListAttributeCallback)(void * context,
                                                                    const chip::app::DataModel::DecodableList<uint16_t> & data);
typedef void (*ApplicationLauncherCurrentAppStructAttributeCallback)(
    void *,
    const chip::app::DataModel::Nullable<chip::app::Clusters::ApplicationLauncher::Structs::ApplicationEPStruct::DecodableType> &);
typedef void (*ApplicationLauncherGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ApplicationLauncherAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ApplicationLauncherAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ApplicationBasicApplicationStructAttributeCallback)(
    void *, const chip::app::Clusters::ApplicationBasic::Structs::ApplicationStruct::DecodableType &);
typedef void (*ApplicationBasicAllowedVendorListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::VendorId> & data);
typedef void (*ApplicationBasicGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ApplicationBasicAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ApplicationBasicAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*AccountLoginGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*AccountLoginAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*AccountLoginAttributeListListAttributeCallback)(void * context,
                                                               const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*ElectricalMeasurementGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ElectricalMeasurementAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*ElectricalMeasurementAttributeListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & data);
typedef void (*UnitTestingBitmap8AttributeCallback)(void *, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap>);
typedef void (*UnitTestingBitmap16AttributeCallback)(void *, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap>);
typedef void (*UnitTestingBitmap32AttributeCallback)(void *, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap>);
typedef void (*UnitTestingBitmap64AttributeCallback)(void *, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap>);
typedef void (*UnitTestingListInt8uListAttributeCallback)(void * context,
                                                          const chip::app::DataModel::DecodableList<uint8_t> & data);
typedef void (*UnitTestingListOctetStringListAttributeCallback)(void * context,
                                                                const chip::app::DataModel::DecodableList<chip::ByteSpan> & data);
typedef void (*UnitTestingListStructOctetStringListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::UnitTesting::Structs::TestListStructOctet::DecodableType> &
        data);
typedef void (*UnitTestingListNullablesAndOptionalsStructListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<
        chip::app::Clusters::UnitTesting::Structs::NullablesAndOptionalsStruct::DecodableType> & data);
typedef void (*UnitTestingStructAttrStructAttributeCallback)(
    void *, const chip::app::Clusters::UnitTesting::Structs::SimpleStruct::DecodableType &);
typedef void (*UnitTestingListLongOctetStringListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & data);
typedef void (*UnitTestingListFabricScopedListAttributeCallback)(
    void * context,
    const chip::app::DataModel::DecodableList<chip::app::Clusters::UnitTesting::Structs::TestFabricScoped::DecodableType> & data);
typedef void (*UnitTestingNullableBitmap8AttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap>> &);
typedef void (*UnitTestingNullableBitmap16AttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap>> &);
typedef void (*UnitTestingNullableBitmap32AttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap>> &);
typedef void (*UnitTestingNullableBitmap64AttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap>> &);
typedef void (*UnitTestingNullableStructStructAttributeCallback)(
    void *, const chip::app::DataModel::Nullable<chip::app::Clusters::UnitTesting::Structs::SimpleStruct::DecodableType> &);
typedef void (*UnitTestingGeneratedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*UnitTestingAcceptedCommandListListAttributeCallback)(
    void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & data);
typedef void (*UnitTestingAttributeListListAttributeCallback)(void * context,
                                                              const chip::app::DataModel::DecodableList<chip::AttributeId> & data);

class MTRDefaultSuccessCallbackBridge : public MTRCallbackBridge<DefaultSuccessCallback>
{
public:
    MTRDefaultSuccessCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DefaultSuccessCallback>(queue, handler, OnSuccessFn){};

    MTRDefaultSuccessCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DefaultSuccessCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context);
};

class MTRCommandSuccessCallbackBridge : public MTRCallbackBridge<CommandSuccessCallback>
{
public:
    MTRCommandSuccessCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CommandSuccessCallback>(queue, handler, OnSuccessFn){};

    MTRCommandSuccessCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<CommandSuccessCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::NullObjectType &);
};

class MTROctetStringAttributeCallbackBridge : public MTRCallbackBridge<OctetStringAttributeCallback>
{
public:
    MTROctetStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OctetStringAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROctetStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<OctetStringAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::ByteSpan value);
};

class MTROctetStringAttributeCallbackSubscriptionBridge : public MTROctetStringAttributeCallbackBridge
{
public:
    MTROctetStringAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROctetStringAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROctetStringAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROctetStringAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOctetStringAttributeCallbackBridge : public MTRCallbackBridge<NullableOctetStringAttributeCallback>
{
public:
    MTRNullableOctetStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableOctetStringAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOctetStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableOctetStringAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<chip::ByteSpan> & value);
};

class MTRNullableOctetStringAttributeCallbackSubscriptionBridge : public MTRNullableOctetStringAttributeCallbackBridge
{
public:
    MTRNullableOctetStringAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action,
                                                              MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOctetStringAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOctetStringAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOctetStringAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCharStringAttributeCallbackBridge : public MTRCallbackBridge<CharStringAttributeCallback>
{
public:
    MTRCharStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CharStringAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCharStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<CharStringAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::CharSpan value);
};

class MTRCharStringAttributeCallbackSubscriptionBridge : public MTRCharStringAttributeCallbackBridge
{
public:
    MTRCharStringAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                     MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCharStringAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCharStringAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCharStringAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCharStringAttributeCallbackBridge : public MTRCallbackBridge<NullableCharStringAttributeCallback>
{
public:
    MTRNullableCharStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableCharStringAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableCharStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableCharStringAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<chip::CharSpan> & value);
};

class MTRNullableCharStringAttributeCallbackSubscriptionBridge : public MTRNullableCharStringAttributeCallbackBridge
{
public:
    MTRNullableCharStringAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCharStringAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCharStringAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCharStringAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBooleanAttributeCallbackBridge : public MTRCallbackBridge<BooleanAttributeCallback>
{
public:
    MTRBooleanAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BooleanAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBooleanAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<BooleanAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, bool value);
};

class MTRBooleanAttributeCallbackSubscriptionBridge : public MTRBooleanAttributeCallbackBridge
{
public:
    MTRBooleanAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                  MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBooleanAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBooleanAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBooleanAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBooleanAttributeCallbackBridge : public MTRCallbackBridge<NullableBooleanAttributeCallback>
{
public:
    MTRNullableBooleanAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableBooleanAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBooleanAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableBooleanAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<bool> & value);
};

class MTRNullableBooleanAttributeCallbackSubscriptionBridge : public MTRNullableBooleanAttributeCallbackBridge
{
public:
    MTRNullableBooleanAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBooleanAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBooleanAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBooleanAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRInt8uAttributeCallbackBridge : public MTRCallbackBridge<Int8uAttributeCallback>
{
public:
    MTRInt8uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<Int8uAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRInt8uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<Int8uAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, uint8_t value);
};

class MTRInt8uAttributeCallbackSubscriptionBridge : public MTRInt8uAttributeCallbackBridge
{
public:
    MTRInt8uAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRInt8uAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRInt8uAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRInt8uAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableInt8uAttributeCallbackBridge : public MTRCallbackBridge<NullableInt8uAttributeCallback>
{
public:
    MTRNullableInt8uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableInt8uAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableInt8uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableInt8uAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<uint8_t> & value);
};

class MTRNullableInt8uAttributeCallbackSubscriptionBridge : public MTRNullableInt8uAttributeCallbackBridge
{
public:
    MTRNullableInt8uAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableInt8uAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableInt8uAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableInt8uAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRInt8sAttributeCallbackBridge : public MTRCallbackBridge<Int8sAttributeCallback>
{
public:
    MTRInt8sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<Int8sAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRInt8sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<Int8sAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, int8_t value);
};

class MTRInt8sAttributeCallbackSubscriptionBridge : public MTRInt8sAttributeCallbackBridge
{
public:
    MTRInt8sAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRInt8sAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRInt8sAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRInt8sAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableInt8sAttributeCallbackBridge : public MTRCallbackBridge<NullableInt8sAttributeCallback>
{
public:
    MTRNullableInt8sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableInt8sAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableInt8sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableInt8sAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<int8_t> & value);
};

class MTRNullableInt8sAttributeCallbackSubscriptionBridge : public MTRNullableInt8sAttributeCallbackBridge
{
public:
    MTRNullableInt8sAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableInt8sAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableInt8sAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableInt8sAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRInt16uAttributeCallbackBridge : public MTRCallbackBridge<Int16uAttributeCallback>
{
public:
    MTRInt16uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<Int16uAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRInt16uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<Int16uAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, uint16_t value);
};

class MTRInt16uAttributeCallbackSubscriptionBridge : public MTRInt16uAttributeCallbackBridge
{
public:
    MTRInt16uAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRInt16uAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRInt16uAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRInt16uAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableInt16uAttributeCallbackBridge : public MTRCallbackBridge<NullableInt16uAttributeCallback>
{
public:
    MTRNullableInt16uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableInt16uAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableInt16uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableInt16uAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<uint16_t> & value);
};

class MTRNullableInt16uAttributeCallbackSubscriptionBridge : public MTRNullableInt16uAttributeCallbackBridge
{
public:
    MTRNullableInt16uAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableInt16uAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableInt16uAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableInt16uAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRInt16sAttributeCallbackBridge : public MTRCallbackBridge<Int16sAttributeCallback>
{
public:
    MTRInt16sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<Int16sAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRInt16sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<Int16sAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, int16_t value);
};

class MTRInt16sAttributeCallbackSubscriptionBridge : public MTRInt16sAttributeCallbackBridge
{
public:
    MTRInt16sAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRInt16sAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRInt16sAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRInt16sAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableInt16sAttributeCallbackBridge : public MTRCallbackBridge<NullableInt16sAttributeCallback>
{
public:
    MTRNullableInt16sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableInt16sAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableInt16sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableInt16sAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<int16_t> & value);
};

class MTRNullableInt16sAttributeCallbackSubscriptionBridge : public MTRNullableInt16sAttributeCallbackBridge
{
public:
    MTRNullableInt16sAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableInt16sAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableInt16sAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableInt16sAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRInt32uAttributeCallbackBridge : public MTRCallbackBridge<Int32uAttributeCallback>
{
public:
    MTRInt32uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<Int32uAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRInt32uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<Int32uAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, uint32_t value);
};

class MTRInt32uAttributeCallbackSubscriptionBridge : public MTRInt32uAttributeCallbackBridge
{
public:
    MTRInt32uAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRInt32uAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRInt32uAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRInt32uAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableInt32uAttributeCallbackBridge : public MTRCallbackBridge<NullableInt32uAttributeCallback>
{
public:
    MTRNullableInt32uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableInt32uAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableInt32uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableInt32uAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<uint32_t> & value);
};

class MTRNullableInt32uAttributeCallbackSubscriptionBridge : public MTRNullableInt32uAttributeCallbackBridge
{
public:
    MTRNullableInt32uAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableInt32uAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableInt32uAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableInt32uAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRInt32sAttributeCallbackBridge : public MTRCallbackBridge<Int32sAttributeCallback>
{
public:
    MTRInt32sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<Int32sAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRInt32sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<Int32sAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, int32_t value);
};

class MTRInt32sAttributeCallbackSubscriptionBridge : public MTRInt32sAttributeCallbackBridge
{
public:
    MTRInt32sAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRInt32sAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRInt32sAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRInt32sAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableInt32sAttributeCallbackBridge : public MTRCallbackBridge<NullableInt32sAttributeCallback>
{
public:
    MTRNullableInt32sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableInt32sAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableInt32sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableInt32sAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<int32_t> & value);
};

class MTRNullableInt32sAttributeCallbackSubscriptionBridge : public MTRNullableInt32sAttributeCallbackBridge
{
public:
    MTRNullableInt32sAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableInt32sAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableInt32sAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableInt32sAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRInt64uAttributeCallbackBridge : public MTRCallbackBridge<Int64uAttributeCallback>
{
public:
    MTRInt64uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<Int64uAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRInt64uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<Int64uAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, uint64_t value);
};

class MTRInt64uAttributeCallbackSubscriptionBridge : public MTRInt64uAttributeCallbackBridge
{
public:
    MTRInt64uAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRInt64uAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRInt64uAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRInt64uAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableInt64uAttributeCallbackBridge : public MTRCallbackBridge<NullableInt64uAttributeCallback>
{
public:
    MTRNullableInt64uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableInt64uAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableInt64uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableInt64uAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<uint64_t> & value);
};

class MTRNullableInt64uAttributeCallbackSubscriptionBridge : public MTRNullableInt64uAttributeCallbackBridge
{
public:
    MTRNullableInt64uAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableInt64uAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableInt64uAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableInt64uAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRInt64sAttributeCallbackBridge : public MTRCallbackBridge<Int64sAttributeCallback>
{
public:
    MTRInt64sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<Int64sAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRInt64sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<Int64sAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, int64_t value);
};

class MTRInt64sAttributeCallbackSubscriptionBridge : public MTRInt64sAttributeCallbackBridge
{
public:
    MTRInt64sAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRInt64sAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRInt64sAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRInt64sAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableInt64sAttributeCallbackBridge : public MTRCallbackBridge<NullableInt64sAttributeCallback>
{
public:
    MTRNullableInt64sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableInt64sAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableInt64sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableInt64sAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<int64_t> & value);
};

class MTRNullableInt64sAttributeCallbackSubscriptionBridge : public MTRNullableInt64sAttributeCallbackBridge
{
public:
    MTRNullableInt64sAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableInt64sAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableInt64sAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableInt64sAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFloatAttributeCallbackBridge : public MTRCallbackBridge<FloatAttributeCallback>
{
public:
    MTRFloatAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FloatAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFloatAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<FloatAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, float value);
};

class MTRFloatAttributeCallbackSubscriptionBridge : public MTRFloatAttributeCallbackBridge
{
public:
    MTRFloatAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFloatAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFloatAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFloatAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFloatAttributeCallbackBridge : public MTRCallbackBridge<NullableFloatAttributeCallback>
{
public:
    MTRNullableFloatAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableFloatAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableFloatAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableFloatAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<float> & value);
};

class MTRNullableFloatAttributeCallbackSubscriptionBridge : public MTRNullableFloatAttributeCallbackBridge
{
public:
    MTRNullableFloatAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFloatAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFloatAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFloatAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoubleAttributeCallbackBridge : public MTRCallbackBridge<DoubleAttributeCallback>
{
public:
    MTRDoubleAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoubleAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoubleAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoubleAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, double value);
};

class MTRDoubleAttributeCallbackSubscriptionBridge : public MTRDoubleAttributeCallbackBridge
{
public:
    MTRDoubleAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoubleAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoubleAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoubleAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoubleAttributeCallbackBridge : public MTRCallbackBridge<NullableDoubleAttributeCallback>
{
public:
    MTRNullableDoubleAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoubleAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoubleAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableDoubleAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<double> & value);
};

class MTRNullableDoubleAttributeCallbackSubscriptionBridge : public MTRNullableDoubleAttributeCallbackBridge
{
public:
    MTRNullableDoubleAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoubleAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoubleAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoubleAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRVendorIdAttributeCallbackBridge : public MTRCallbackBridge<VendorIdAttributeCallback>
{
public:
    MTRVendorIdAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<VendorIdAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRVendorIdAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<VendorIdAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::VendorId value);
};

class MTRVendorIdAttributeCallbackSubscriptionBridge : public MTRVendorIdAttributeCallbackBridge
{
public:
    MTRVendorIdAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                   MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRVendorIdAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRVendorIdAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRVendorIdAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableVendorIdAttributeCallbackBridge : public MTRCallbackBridge<NullableVendorIdAttributeCallback>
{
public:
    MTRNullableVendorIdAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableVendorIdAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableVendorIdAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<NullableVendorIdAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<chip::VendorId> & value);
};

class MTRNullableVendorIdAttributeCallbackSubscriptionBridge : public MTRNullableVendorIdAttributeCallbackBridge
{
public:
    MTRNullableVendorIdAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableVendorIdAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableVendorIdAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableVendorIdAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRIdentifyGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<IdentifyGeneratedCommandListListAttributeCallback>
{
public:
    MTRIdentifyGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IdentifyGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIdentifyGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<IdentifyGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRIdentifyGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRIdentifyGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRIdentifyGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIdentifyGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIdentifyGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIdentifyGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRIdentifyAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<IdentifyAcceptedCommandListListAttributeCallback>
{
public:
    MTRIdentifyAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IdentifyAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIdentifyAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<IdentifyAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRIdentifyAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRIdentifyAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRIdentifyAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIdentifyAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIdentifyAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIdentifyAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRIdentifyAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<IdentifyAttributeListListAttributeCallback>
{
public:
    MTRIdentifyAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IdentifyAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIdentifyAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<IdentifyAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRIdentifyAttributeListListAttributeCallbackSubscriptionBridge : public MTRIdentifyAttributeListListAttributeCallbackBridge
{
public:
    MTRIdentifyAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action,
                                                                    MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIdentifyAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIdentifyAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIdentifyAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupsGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<GroupsGeneratedCommandListListAttributeCallback>
{
public:
    MTRGroupsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupsGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGroupsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<GroupsGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRGroupsGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRGroupsGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRGroupsGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGroupsGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGroupsGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGroupsGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupsAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<GroupsAcceptedCommandListListAttributeCallback>
{
public:
    MTRGroupsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupsAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGroupsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<GroupsAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRGroupsAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRGroupsAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRGroupsAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGroupsAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGroupsAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGroupsAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupsAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<GroupsAttributeListListAttributeCallback>
{
public:
    MTRGroupsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupsAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGroupsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<GroupsAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRGroupsAttributeListListAttributeCallbackSubscriptionBridge : public MTRGroupsAttributeListListAttributeCallbackBridge
{
public:
    MTRGroupsAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action,
                                                                  MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGroupsAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGroupsAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGroupsAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRScenesGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ScenesGeneratedCommandListListAttributeCallback>
{
public:
    MTRScenesGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRScenesGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<ScenesGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRScenesGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRScenesGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRScenesGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRScenesGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRScenesGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRScenesGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRScenesAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ScenesAcceptedCommandListListAttributeCallback>
{
public:
    MTRScenesAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRScenesAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<ScenesAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRScenesAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRScenesAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRScenesAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRScenesAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRScenesAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRScenesAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRScenesAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<ScenesAttributeListListAttributeCallback>
{
public:
    MTRScenesAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRScenesAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ScenesAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRScenesAttributeListListAttributeCallbackSubscriptionBridge : public MTRScenesAttributeListListAttributeCallbackBridge
{
public:
    MTRScenesAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action,
                                                                  MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRScenesAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRScenesAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRScenesAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OnOffGeneratedCommandListListAttributeCallback>
{
public:
    MTROnOffGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<OnOffGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROnOffGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROnOffGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTROnOffGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OnOffAcceptedCommandListListAttributeCallback>
{
public:
    MTROnOffAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<OnOffAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROnOffAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROnOffAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTROnOffAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<OnOffAttributeListListAttributeCallback>
{
public:
    MTROnOffAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<OnOffAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTROnOffAttributeListListAttributeCallbackSubscriptionBridge : public MTROnOffAttributeListListAttributeCallbackBridge
{
public:
    MTROnOffAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action,
                                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffSwitchConfigurationGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OnOffSwitchConfigurationGeneratedCommandListListAttributeCallback>
{
public:
    MTROnOffSwitchConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffSwitchConfigurationGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffSwitchConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<OnOffSwitchConfigurationGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROnOffSwitchConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROnOffSwitchConfigurationGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTROnOffSwitchConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffSwitchConfigurationGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffSwitchConfigurationGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffSwitchConfigurationGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffSwitchConfigurationAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OnOffSwitchConfigurationAcceptedCommandListListAttributeCallback>
{
public:
    MTROnOffSwitchConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffSwitchConfigurationAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffSwitchConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<OnOffSwitchConfigurationAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROnOffSwitchConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROnOffSwitchConfigurationAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTROnOffSwitchConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffSwitchConfigurationAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffSwitchConfigurationAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffSwitchConfigurationAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffSwitchConfigurationAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<OnOffSwitchConfigurationAttributeListListAttributeCallback>
{
public:
    MTROnOffSwitchConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffSwitchConfigurationAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffSwitchConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<OnOffSwitchConfigurationAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTROnOffSwitchConfigurationAttributeListListAttributeCallbackSubscriptionBridge
    : public MTROnOffSwitchConfigurationAttributeListListAttributeCallbackBridge
{
public:
    MTROnOffSwitchConfigurationAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffSwitchConfigurationAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffSwitchConfigurationAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffSwitchConfigurationAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLevelControlOptionsAttributeCallbackBridge : public MTRCallbackBridge<LevelControlOptionsAttributeCallback>
{
public:
    MTRLevelControlOptionsAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LevelControlOptionsAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLevelControlOptionsAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<LevelControlOptionsAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::LevelControl::LevelControlOptions> value);
};

class MTRLevelControlOptionsAttributeCallbackSubscriptionBridge : public MTRLevelControlOptionsAttributeCallbackBridge
{
public:
    MTRLevelControlOptionsAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action,
                                                              MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLevelControlOptionsAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLevelControlOptionsAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLevelControlOptionsAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLevelControlGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<LevelControlGeneratedCommandListListAttributeCallback>
{
public:
    MTRLevelControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LevelControlGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLevelControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<LevelControlGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRLevelControlGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRLevelControlGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRLevelControlGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLevelControlGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLevelControlGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLevelControlGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLevelControlAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<LevelControlAcceptedCommandListListAttributeCallback>
{
public:
    MTRLevelControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LevelControlAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLevelControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<LevelControlAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRLevelControlAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRLevelControlAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRLevelControlAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLevelControlAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLevelControlAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLevelControlAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLevelControlAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<LevelControlAttributeListListAttributeCallback>
{
public:
    MTRLevelControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LevelControlAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLevelControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<LevelControlAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRLevelControlAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRLevelControlAttributeListListAttributeCallbackBridge
{
public:
    MTRLevelControlAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLevelControlAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLevelControlAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLevelControlAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBinaryInputBasicGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BinaryInputBasicGeneratedCommandListListAttributeCallback>
{
public:
    MTRBinaryInputBasicGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BinaryInputBasicGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBinaryInputBasicGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<BinaryInputBasicGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBinaryInputBasicGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBinaryInputBasicGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBinaryInputBasicGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBinaryInputBasicGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBinaryInputBasicGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBinaryInputBasicGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBinaryInputBasicAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BinaryInputBasicAcceptedCommandListListAttributeCallback>
{
public:
    MTRBinaryInputBasicAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BinaryInputBasicAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBinaryInputBasicAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<BinaryInputBasicAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBinaryInputBasicAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBinaryInputBasicAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBinaryInputBasicAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBinaryInputBasicAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBinaryInputBasicAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBinaryInputBasicAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBinaryInputBasicAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<BinaryInputBasicAttributeListListAttributeCallback>
{
public:
    MTRBinaryInputBasicAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BinaryInputBasicAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBinaryInputBasicAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<BinaryInputBasicAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBinaryInputBasicAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRBinaryInputBasicAttributeListListAttributeCallbackBridge
{
public:
    MTRBinaryInputBasicAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBinaryInputBasicAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBinaryInputBasicAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBinaryInputBasicAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDescriptorDeviceTypeListListAttributeCallbackBridge
    : public MTRCallbackBridge<DescriptorDeviceTypeListListAttributeCallback>
{
public:
    MTRDescriptorDeviceTypeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DescriptorDeviceTypeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDescriptorDeviceTypeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DescriptorDeviceTypeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::Descriptor::Structs::DeviceTypeStruct::DecodableType> &
            value);
};

class MTRDescriptorDeviceTypeListListAttributeCallbackSubscriptionBridge
    : public MTRDescriptorDeviceTypeListListAttributeCallbackBridge
{
public:
    MTRDescriptorDeviceTypeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDescriptorDeviceTypeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDescriptorDeviceTypeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDescriptorDeviceTypeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDescriptorServerListListAttributeCallbackBridge : public MTRCallbackBridge<DescriptorServerListListAttributeCallback>
{
public:
    MTRDescriptorServerListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DescriptorServerListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDescriptorServerListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DescriptorServerListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & value);
};

class MTRDescriptorServerListListAttributeCallbackSubscriptionBridge : public MTRDescriptorServerListListAttributeCallbackBridge
{
public:
    MTRDescriptorServerListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action,
                                                                   MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDescriptorServerListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDescriptorServerListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDescriptorServerListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDescriptorClientListListAttributeCallbackBridge : public MTRCallbackBridge<DescriptorClientListListAttributeCallback>
{
public:
    MTRDescriptorClientListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DescriptorClientListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDescriptorClientListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DescriptorClientListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & value);
};

class MTRDescriptorClientListListAttributeCallbackSubscriptionBridge : public MTRDescriptorClientListListAttributeCallbackBridge
{
public:
    MTRDescriptorClientListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action,
                                                                   MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDescriptorClientListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDescriptorClientListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDescriptorClientListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDescriptorPartsListListAttributeCallbackBridge : public MTRCallbackBridge<DescriptorPartsListListAttributeCallback>
{
public:
    MTRDescriptorPartsListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DescriptorPartsListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDescriptorPartsListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DescriptorPartsListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EndpointId> & value);
};

class MTRDescriptorPartsListListAttributeCallbackSubscriptionBridge : public MTRDescriptorPartsListListAttributeCallbackBridge
{
public:
    MTRDescriptorPartsListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action,
                                                                  MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDescriptorPartsListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDescriptorPartsListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDescriptorPartsListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDescriptorGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<DescriptorGeneratedCommandListListAttributeCallback>
{
public:
    MTRDescriptorGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DescriptorGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDescriptorGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<DescriptorGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRDescriptorGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRDescriptorGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRDescriptorGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDescriptorGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDescriptorGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDescriptorGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDescriptorAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<DescriptorAcceptedCommandListListAttributeCallback>
{
public:
    MTRDescriptorAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DescriptorAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDescriptorAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<DescriptorAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRDescriptorAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRDescriptorAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRDescriptorAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDescriptorAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDescriptorAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDescriptorAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDescriptorAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<DescriptorAttributeListListAttributeCallback>
{
public:
    MTRDescriptorAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DescriptorAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDescriptorAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DescriptorAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRDescriptorAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRDescriptorAttributeListListAttributeCallbackBridge
{
public:
    MTRDescriptorAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDescriptorAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDescriptorAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDescriptorAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBindingBindingListAttributeCallbackBridge : public MTRCallbackBridge<BindingBindingListAttributeCallback>
{
public:
    MTRBindingBindingListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BindingBindingListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBindingBindingListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<BindingBindingListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::Binding::Structs::TargetStruct::DecodableType> & value);
};

class MTRBindingBindingListAttributeCallbackSubscriptionBridge : public MTRBindingBindingListAttributeCallbackBridge
{
public:
    MTRBindingBindingListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBindingBindingListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBindingBindingListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBindingBindingListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBindingGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BindingGeneratedCommandListListAttributeCallback>
{
public:
    MTRBindingGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BindingGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBindingGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<BindingGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBindingGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBindingGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBindingGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBindingGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBindingGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBindingGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBindingAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BindingAcceptedCommandListListAttributeCallback>
{
public:
    MTRBindingAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BindingAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBindingAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<BindingAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBindingAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBindingAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBindingAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBindingAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBindingAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBindingAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBindingAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<BindingAttributeListListAttributeCallback>
{
public:
    MTRBindingAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BindingAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBindingAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<BindingAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBindingAttributeListListAttributeCallbackSubscriptionBridge : public MTRBindingAttributeListListAttributeCallbackBridge
{
public:
    MTRBindingAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action,
                                                                   MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBindingAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBindingAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBindingAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccessControlACLListAttributeCallbackBridge : public MTRCallbackBridge<AccessControlACLListAttributeCallback>
{
public:
    MTRAccessControlACLListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccessControlACLListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccessControlACLListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<AccessControlACLListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::AccessControl::Structs::AccessControlEntryStruct::DecodableType> & value);
};

class MTRAccessControlACLListAttributeCallbackSubscriptionBridge : public MTRAccessControlACLListAttributeCallbackBridge
{
public:
    MTRAccessControlACLListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action,
                                                               MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccessControlACLListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccessControlACLListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccessControlACLListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccessControlExtensionListAttributeCallbackBridge : public MTRCallbackBridge<AccessControlExtensionListAttributeCallback>
{
public:
    MTRAccessControlExtensionListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccessControlExtensionListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccessControlExtensionListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<AccessControlExtensionListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::AccessControl::Structs::AccessControlExtensionStruct::DecodableType> & value);
};

class MTRAccessControlExtensionListAttributeCallbackSubscriptionBridge : public MTRAccessControlExtensionListAttributeCallbackBridge
{
public:
    MTRAccessControlExtensionListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action,
                                                                     MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccessControlExtensionListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccessControlExtensionListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccessControlExtensionListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccessControlGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<AccessControlGeneratedCommandListListAttributeCallback>
{
public:
    MTRAccessControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccessControlGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccessControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<AccessControlGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRAccessControlGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRAccessControlGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRAccessControlGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccessControlGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccessControlGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccessControlGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccessControlAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<AccessControlAcceptedCommandListListAttributeCallback>
{
public:
    MTRAccessControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccessControlAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccessControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<AccessControlAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRAccessControlAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRAccessControlAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRAccessControlAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccessControlAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccessControlAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccessControlAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccessControlAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<AccessControlAttributeListListAttributeCallback>
{
public:
    MTRAccessControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccessControlAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccessControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<AccessControlAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRAccessControlAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRAccessControlAttributeListListAttributeCallbackBridge
{
public:
    MTRAccessControlAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccessControlAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccessControlAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccessControlAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRActionsActionListListAttributeCallbackBridge : public MTRCallbackBridge<ActionsActionListListAttributeCallback>
{
public:
    MTRActionsActionListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ActionsActionListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRActionsActionListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ActionsActionListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::Actions::Structs::ActionStruct::DecodableType> & value);
};

class MTRActionsActionListListAttributeCallbackSubscriptionBridge : public MTRActionsActionListListAttributeCallbackBridge
{
public:
    MTRActionsActionListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action,
                                                                MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRActionsActionListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRActionsActionListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRActionsActionListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRActionsEndpointListsListAttributeCallbackBridge : public MTRCallbackBridge<ActionsEndpointListsListAttributeCallback>
{
public:
    MTRActionsEndpointListsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ActionsEndpointListsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRActionsEndpointListsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ActionsEndpointListsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::Actions::Structs::EndpointListStruct::DecodableType> &
            value);
};

class MTRActionsEndpointListsListAttributeCallbackSubscriptionBridge : public MTRActionsEndpointListsListAttributeCallbackBridge
{
public:
    MTRActionsEndpointListsListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action,
                                                                   MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRActionsEndpointListsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRActionsEndpointListsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRActionsEndpointListsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRActionsGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ActionsGeneratedCommandListListAttributeCallback>
{
public:
    MTRActionsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ActionsGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRActionsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<ActionsGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRActionsGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRActionsGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRActionsGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRActionsGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRActionsGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRActionsGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRActionsAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ActionsAcceptedCommandListListAttributeCallback>
{
public:
    MTRActionsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ActionsAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRActionsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<ActionsAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRActionsAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRActionsAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRActionsAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRActionsAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRActionsAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRActionsAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRActionsAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<ActionsAttributeListListAttributeCallback>
{
public:
    MTRActionsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ActionsAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRActionsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ActionsAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRActionsAttributeListListAttributeCallbackSubscriptionBridge : public MTRActionsAttributeListListAttributeCallbackBridge
{
public:
    MTRActionsAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action,
                                                                   MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRActionsAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRActionsAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRActionsAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBasicInformationCapabilityMinimaStructAttributeCallbackBridge
    : public MTRCallbackBridge<BasicInformationCapabilityMinimaStructAttributeCallback>
{
public:
    MTRBasicInformationCapabilityMinimaStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BasicInformationCapabilityMinimaStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBasicInformationCapabilityMinimaStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<BasicInformationCapabilityMinimaStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::BasicInformation::Structs::CapabilityMinimaStruct::DecodableType & value);
};

class MTRBasicInformationCapabilityMinimaStructAttributeCallbackSubscriptionBridge
    : public MTRBasicInformationCapabilityMinimaStructAttributeCallbackBridge
{
public:
    MTRBasicInformationCapabilityMinimaStructAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBasicInformationCapabilityMinimaStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBasicInformationCapabilityMinimaStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBasicInformationCapabilityMinimaStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBasicInformationProductAppearanceStructAttributeCallbackBridge
    : public MTRCallbackBridge<BasicInformationProductAppearanceStructAttributeCallback>
{
public:
    MTRBasicInformationProductAppearanceStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BasicInformationProductAppearanceStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBasicInformationProductAppearanceStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<BasicInformationProductAppearanceStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::BasicInformation::Structs::ProductAppearanceStruct::DecodableType & value);
};

class MTRBasicInformationProductAppearanceStructAttributeCallbackSubscriptionBridge
    : public MTRBasicInformationProductAppearanceStructAttributeCallbackBridge
{
public:
    MTRBasicInformationProductAppearanceStructAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBasicInformationProductAppearanceStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBasicInformationProductAppearanceStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBasicInformationProductAppearanceStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBasicInformationGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BasicInformationGeneratedCommandListListAttributeCallback>
{
public:
    MTRBasicInformationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BasicInformationGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBasicInformationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<BasicInformationGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBasicInformationGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBasicInformationGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBasicInformationGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBasicInformationGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBasicInformationGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBasicInformationGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBasicInformationAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BasicInformationAcceptedCommandListListAttributeCallback>
{
public:
    MTRBasicInformationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BasicInformationAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBasicInformationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<BasicInformationAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBasicInformationAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBasicInformationAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBasicInformationAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBasicInformationAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBasicInformationAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBasicInformationAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBasicInformationAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<BasicInformationAttributeListListAttributeCallback>
{
public:
    MTRBasicInformationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BasicInformationAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBasicInformationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<BasicInformationAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBasicInformationAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRBasicInformationAttributeListListAttributeCallbackBridge
{
public:
    MTRBasicInformationAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBasicInformationAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBasicInformationAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBasicInformationAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateProviderGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateProviderGeneratedCommandListListAttributeCallback>
{
public:
    MTROTASoftwareUpdateProviderGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateProviderGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateProviderGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateProviderGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROTASoftwareUpdateProviderGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateProviderGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateProviderGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateProviderGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateProviderGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateProviderGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateProviderAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateProviderAcceptedCommandListListAttributeCallback>
{
public:
    MTROTASoftwareUpdateProviderAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateProviderAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateProviderAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateProviderAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROTASoftwareUpdateProviderAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateProviderAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateProviderAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateProviderAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateProviderAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateProviderAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateProviderAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateProviderAttributeListListAttributeCallback>
{
public:
    MTROTASoftwareUpdateProviderAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateProviderAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateProviderAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateProviderAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTROTASoftwareUpdateProviderAttributeListListAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateProviderAttributeListListAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateProviderAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateProviderAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateProviderAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateProviderAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallback>
{
public:
    MTROTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::DecodableType> & value);
};

class MTROTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateRequestorDefaultOTAProvidersListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallback>
{
public:
    MTROTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateRequestorGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallback>
{
public:
    MTROTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateRequestorAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateRequestorAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateRequestorAttributeListListAttributeCallback>
{
public:
    MTROTASoftwareUpdateRequestorAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateRequestorAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTROTASoftwareUpdateRequestorAttributeListListAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateRequestorAttributeListListAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateRequestorAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateRequestorAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateRequestorAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateRequestorAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLocalizationConfigurationSupportedLocalesListAttributeCallbackBridge
    : public MTRCallbackBridge<LocalizationConfigurationSupportedLocalesListAttributeCallback>
{
public:
    MTRLocalizationConfigurationSupportedLocalesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LocalizationConfigurationSupportedLocalesListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLocalizationConfigurationSupportedLocalesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<LocalizationConfigurationSupportedLocalesListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CharSpan> & value);
};

class MTRLocalizationConfigurationSupportedLocalesListAttributeCallbackSubscriptionBridge
    : public MTRLocalizationConfigurationSupportedLocalesListAttributeCallbackBridge
{
public:
    MTRLocalizationConfigurationSupportedLocalesListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLocalizationConfigurationSupportedLocalesListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLocalizationConfigurationSupportedLocalesListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLocalizationConfigurationSupportedLocalesListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLocalizationConfigurationGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<LocalizationConfigurationGeneratedCommandListListAttributeCallback>
{
public:
    MTRLocalizationConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LocalizationConfigurationGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLocalizationConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<LocalizationConfigurationGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRLocalizationConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRLocalizationConfigurationGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRLocalizationConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLocalizationConfigurationGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLocalizationConfigurationGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLocalizationConfigurationGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLocalizationConfigurationAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<LocalizationConfigurationAcceptedCommandListListAttributeCallback>
{
public:
    MTRLocalizationConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LocalizationConfigurationAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLocalizationConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<LocalizationConfigurationAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRLocalizationConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRLocalizationConfigurationAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRLocalizationConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLocalizationConfigurationAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLocalizationConfigurationAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLocalizationConfigurationAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLocalizationConfigurationAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<LocalizationConfigurationAttributeListListAttributeCallback>
{
public:
    MTRLocalizationConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LocalizationConfigurationAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLocalizationConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<LocalizationConfigurationAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRLocalizationConfigurationAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRLocalizationConfigurationAttributeListListAttributeCallbackBridge
{
public:
    MTRLocalizationConfigurationAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLocalizationConfigurationAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLocalizationConfigurationAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLocalizationConfigurationAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTimeFormatLocalizationSupportedCalendarTypesListAttributeCallbackBridge
    : public MTRCallbackBridge<TimeFormatLocalizationSupportedCalendarTypesListAttributeCallback>
{
public:
    MTRTimeFormatLocalizationSupportedCalendarTypesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TimeFormatLocalizationSupportedCalendarTypesListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTimeFormatLocalizationSupportedCalendarTypesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<TimeFormatLocalizationSupportedCalendarTypesListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<chip::app::Clusters::TimeFormatLocalization::CalendarTypeEnum> & value);
};

class MTRTimeFormatLocalizationSupportedCalendarTypesListAttributeCallbackSubscriptionBridge
    : public MTRTimeFormatLocalizationSupportedCalendarTypesListAttributeCallbackBridge
{
public:
    MTRTimeFormatLocalizationSupportedCalendarTypesListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTimeFormatLocalizationSupportedCalendarTypesListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTimeFormatLocalizationSupportedCalendarTypesListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTimeFormatLocalizationSupportedCalendarTypesListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTimeFormatLocalizationGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TimeFormatLocalizationGeneratedCommandListListAttributeCallback>
{
public:
    MTRTimeFormatLocalizationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TimeFormatLocalizationGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTimeFormatLocalizationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<TimeFormatLocalizationGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTimeFormatLocalizationGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTimeFormatLocalizationGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRTimeFormatLocalizationGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTimeFormatLocalizationGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTimeFormatLocalizationGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTimeFormatLocalizationGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTimeFormatLocalizationAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TimeFormatLocalizationAcceptedCommandListListAttributeCallback>
{
public:
    MTRTimeFormatLocalizationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TimeFormatLocalizationAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTimeFormatLocalizationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<TimeFormatLocalizationAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTimeFormatLocalizationAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTimeFormatLocalizationAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRTimeFormatLocalizationAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTimeFormatLocalizationAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTimeFormatLocalizationAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTimeFormatLocalizationAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTimeFormatLocalizationAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<TimeFormatLocalizationAttributeListListAttributeCallback>
{
public:
    MTRTimeFormatLocalizationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TimeFormatLocalizationAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTimeFormatLocalizationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<TimeFormatLocalizationAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRTimeFormatLocalizationAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRTimeFormatLocalizationAttributeListListAttributeCallbackBridge
{
public:
    MTRTimeFormatLocalizationAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTimeFormatLocalizationAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTimeFormatLocalizationAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTimeFormatLocalizationAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitLocalizationGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitLocalizationGeneratedCommandListListAttributeCallback>
{
public:
    MTRUnitLocalizationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitLocalizationGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitLocalizationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<UnitLocalizationGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRUnitLocalizationGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRUnitLocalizationGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRUnitLocalizationGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitLocalizationGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitLocalizationGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitLocalizationGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitLocalizationAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitLocalizationAcceptedCommandListListAttributeCallback>
{
public:
    MTRUnitLocalizationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitLocalizationAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitLocalizationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<UnitLocalizationAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRUnitLocalizationAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRUnitLocalizationAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRUnitLocalizationAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitLocalizationAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitLocalizationAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitLocalizationAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitLocalizationAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitLocalizationAttributeListListAttributeCallback>
{
public:
    MTRUnitLocalizationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitLocalizationAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitLocalizationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<UnitLocalizationAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRUnitLocalizationAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRUnitLocalizationAttributeListListAttributeCallbackBridge
{
public:
    MTRUnitLocalizationAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitLocalizationAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitLocalizationAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitLocalizationAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceConfigurationSourcesListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceConfigurationSourcesListAttributeCallback>
{
public:
    MTRPowerSourceConfigurationSourcesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceConfigurationSourcesListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceConfigurationSourcesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceConfigurationSourcesListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<uint8_t> & value);
};

class MTRPowerSourceConfigurationSourcesListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceConfigurationSourcesListAttributeCallbackBridge
{
public:
    MTRPowerSourceConfigurationSourcesListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceConfigurationSourcesListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceConfigurationSourcesListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceConfigurationSourcesListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceConfigurationGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceConfigurationGeneratedCommandListListAttributeCallback>
{
public:
    MTRPowerSourceConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceConfigurationGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceConfigurationGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPowerSourceConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceConfigurationGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRPowerSourceConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceConfigurationGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceConfigurationGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceConfigurationGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceConfigurationAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceConfigurationAcceptedCommandListListAttributeCallback>
{
public:
    MTRPowerSourceConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceConfigurationAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceConfigurationAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPowerSourceConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceConfigurationAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRPowerSourceConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceConfigurationAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceConfigurationAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceConfigurationAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceConfigurationAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceConfigurationAttributeListListAttributeCallback>
{
public:
    MTRPowerSourceConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceConfigurationAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceConfigurationAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRPowerSourceConfigurationAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceConfigurationAttributeListListAttributeCallbackBridge
{
public:
    MTRPowerSourceConfigurationAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceConfigurationAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceConfigurationAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceConfigurationAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceActiveWiredFaultsListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceActiveWiredFaultsListAttributeCallback>
{
public:
    MTRPowerSourceActiveWiredFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceActiveWiredFaultsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceActiveWiredFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceActiveWiredFaultsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<chip::app::Clusters::PowerSource::WiredFaultEnum> & value);
};

class MTRPowerSourceActiveWiredFaultsListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceActiveWiredFaultsListAttributeCallbackBridge
{
public:
    MTRPowerSourceActiveWiredFaultsListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceActiveWiredFaultsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceActiveWiredFaultsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceActiveWiredFaultsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceActiveBatFaultsListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceActiveBatFaultsListAttributeCallback>
{
public:
    MTRPowerSourceActiveBatFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceActiveBatFaultsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceActiveBatFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceActiveBatFaultsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<chip::app::Clusters::PowerSource::BatFaultEnum> & value);
};

class MTRPowerSourceActiveBatFaultsListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceActiveBatFaultsListAttributeCallbackBridge
{
public:
    MTRPowerSourceActiveBatFaultsListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceActiveBatFaultsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceActiveBatFaultsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceActiveBatFaultsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceActiveBatChargeFaultsListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceActiveBatChargeFaultsListAttributeCallback>
{
public:
    MTRPowerSourceActiveBatChargeFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceActiveBatChargeFaultsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceActiveBatChargeFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceActiveBatChargeFaultsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<chip::app::Clusters::PowerSource::BatChargeFaultEnum> & value);
};

class MTRPowerSourceActiveBatChargeFaultsListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceActiveBatChargeFaultsListAttributeCallbackBridge
{
public:
    MTRPowerSourceActiveBatChargeFaultsListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceActiveBatChargeFaultsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceActiveBatChargeFaultsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceActiveBatChargeFaultsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceGeneratedCommandListListAttributeCallback>
{
public:
    MTRPowerSourceGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPowerSourceGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRPowerSourceGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceAcceptedCommandListListAttributeCallback>
{
public:
    MTRPowerSourceAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPowerSourceAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRPowerSourceAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceAttributeListListAttributeCallback>
{
public:
    MTRPowerSourceAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRPowerSourceAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceAttributeListListAttributeCallbackBridge
{
public:
    MTRPowerSourceAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralCommissioningBasicCommissioningInfoStructAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralCommissioningBasicCommissioningInfoStructAttributeCallback>
{
public:
    MTRGeneralCommissioningBasicCommissioningInfoStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralCommissioningBasicCommissioningInfoStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralCommissioningBasicCommissioningInfoStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<GeneralCommissioningBasicCommissioningInfoStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfo::DecodableType & value);
};

class MTRGeneralCommissioningBasicCommissioningInfoStructAttributeCallbackSubscriptionBridge
    : public MTRGeneralCommissioningBasicCommissioningInfoStructAttributeCallbackBridge
{
public:
    MTRGeneralCommissioningBasicCommissioningInfoStructAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralCommissioningBasicCommissioningInfoStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralCommissioningBasicCommissioningInfoStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralCommissioningBasicCommissioningInfoStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralCommissioningGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralCommissioningGeneratedCommandListListAttributeCallback>
{
public:
    MTRGeneralCommissioningGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralCommissioningGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralCommissioningGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<GeneralCommissioningGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRGeneralCommissioningGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRGeneralCommissioningGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRGeneralCommissioningGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralCommissioningGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralCommissioningGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralCommissioningGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralCommissioningAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralCommissioningAcceptedCommandListListAttributeCallback>
{
public:
    MTRGeneralCommissioningAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralCommissioningAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralCommissioningAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<GeneralCommissioningAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRGeneralCommissioningAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRGeneralCommissioningAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRGeneralCommissioningAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralCommissioningAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralCommissioningAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralCommissioningAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralCommissioningAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralCommissioningAttributeListListAttributeCallback>
{
public:
    MTRGeneralCommissioningAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralCommissioningAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralCommissioningAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<GeneralCommissioningAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRGeneralCommissioningAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRGeneralCommissioningAttributeListListAttributeCallbackBridge
{
public:
    MTRGeneralCommissioningAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralCommissioningAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralCommissioningAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralCommissioningAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNetworkCommissioningNetworksListAttributeCallbackBridge
    : public MTRCallbackBridge<NetworkCommissioningNetworksListAttributeCallback>
{
public:
    MTRNetworkCommissioningNetworksListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NetworkCommissioningNetworksListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNetworkCommissioningNetworksListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<NetworkCommissioningNetworksListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::NetworkCommissioning::Structs::NetworkInfo::DecodableType> &
            value);
};

class MTRNetworkCommissioningNetworksListAttributeCallbackSubscriptionBridge
    : public MTRNetworkCommissioningNetworksListAttributeCallbackBridge
{
public:
    MTRNetworkCommissioningNetworksListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNetworkCommissioningNetworksListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNetworkCommissioningNetworksListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNetworkCommissioningNetworksListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNetworkCommissioningGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<NetworkCommissioningGeneratedCommandListListAttributeCallback>
{
public:
    MTRNetworkCommissioningGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NetworkCommissioningGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNetworkCommissioningGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NetworkCommissioningGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRNetworkCommissioningGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRNetworkCommissioningGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRNetworkCommissioningGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNetworkCommissioningGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNetworkCommissioningGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNetworkCommissioningGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNetworkCommissioningAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<NetworkCommissioningAcceptedCommandListListAttributeCallback>
{
public:
    MTRNetworkCommissioningAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NetworkCommissioningAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNetworkCommissioningAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NetworkCommissioningAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRNetworkCommissioningAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRNetworkCommissioningAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRNetworkCommissioningAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNetworkCommissioningAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNetworkCommissioningAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNetworkCommissioningAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNetworkCommissioningAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<NetworkCommissioningAttributeListListAttributeCallback>
{
public:
    MTRNetworkCommissioningAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NetworkCommissioningAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNetworkCommissioningAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NetworkCommissioningAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRNetworkCommissioningAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRNetworkCommissioningAttributeListListAttributeCallbackBridge
{
public:
    MTRNetworkCommissioningAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNetworkCommissioningAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNetworkCommissioningAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNetworkCommissioningAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDiagnosticLogsGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<DiagnosticLogsGeneratedCommandListListAttributeCallback>
{
public:
    MTRDiagnosticLogsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DiagnosticLogsGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDiagnosticLogsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<DiagnosticLogsGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRDiagnosticLogsGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRDiagnosticLogsGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRDiagnosticLogsGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDiagnosticLogsGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDiagnosticLogsGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDiagnosticLogsGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDiagnosticLogsAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<DiagnosticLogsAcceptedCommandListListAttributeCallback>
{
public:
    MTRDiagnosticLogsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DiagnosticLogsAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDiagnosticLogsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<DiagnosticLogsAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRDiagnosticLogsAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRDiagnosticLogsAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRDiagnosticLogsAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDiagnosticLogsAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDiagnosticLogsAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDiagnosticLogsAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDiagnosticLogsAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<DiagnosticLogsAttributeListListAttributeCallback>
{
public:
    MTRDiagnosticLogsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DiagnosticLogsAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDiagnosticLogsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<DiagnosticLogsAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRDiagnosticLogsAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRDiagnosticLogsAttributeListListAttributeCallbackBridge
{
public:
    MTRDiagnosticLogsAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDiagnosticLogsAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDiagnosticLogsAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDiagnosticLogsAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsNetworkInterfacesListAttributeCallback>
{
public:
    MTRGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsNetworkInterfacesListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsNetworkInterfacesListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterface::DecodableType> & value);
};

class MTRGeneralDiagnosticsNetworkInterfacesListAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsNetworkInterfacesListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsActiveHardwareFaultsListAttributeCallback>
{
public:
    MTRGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsActiveHardwareFaultsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsActiveHardwareFaultsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<chip::app::Clusters::GeneralDiagnostics::HardwareFaultEnum> & value);
};

class MTRGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsActiveRadioFaultsListAttributeCallback>
{
public:
    MTRGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsActiveRadioFaultsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsActiveRadioFaultsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<chip::app::Clusters::GeneralDiagnostics::RadioFaultEnum> & value);
};

class MTRGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsActiveNetworkFaultsListAttributeCallback>
{
public:
    MTRGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsActiveNetworkFaultsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsActiveNetworkFaultsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<chip::app::Clusters::GeneralDiagnostics::NetworkFaultEnum> & value);
};

class MTRGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsGeneratedCommandListListAttributeCallback>
{
public:
    MTRGeneralDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRGeneralDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsAcceptedCommandListListAttributeCallback>
{
public:
    MTRGeneralDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRGeneralDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsAttributeListListAttributeCallback>
{
public:
    MTRGeneralDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRGeneralDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsAttributeListListAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge
    : public MTRCallbackBridge<SoftwareDiagnosticsThreadMetricsListAttributeCallback>
{
public:
    MTRSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SoftwareDiagnosticsThreadMetricsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<SoftwareDiagnosticsThreadMetricsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetricsStruct::DecodableType> & value);
};

class MTRSoftwareDiagnosticsThreadMetricsListAttributeCallbackSubscriptionBridge
    : public MTRSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge
{
public:
    MTRSoftwareDiagnosticsThreadMetricsListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSoftwareDiagnosticsGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SoftwareDiagnosticsGeneratedCommandListListAttributeCallback>
{
public:
    MTRSoftwareDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SoftwareDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSoftwareDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<SoftwareDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSoftwareDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSoftwareDiagnosticsGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRSoftwareDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSoftwareDiagnosticsGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSoftwareDiagnosticsGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSoftwareDiagnosticsGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSoftwareDiagnosticsAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SoftwareDiagnosticsAcceptedCommandListListAttributeCallback>
{
public:
    MTRSoftwareDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SoftwareDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSoftwareDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<SoftwareDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSoftwareDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSoftwareDiagnosticsAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRSoftwareDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSoftwareDiagnosticsAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSoftwareDiagnosticsAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSoftwareDiagnosticsAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSoftwareDiagnosticsAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<SoftwareDiagnosticsAttributeListListAttributeCallback>
{
public:
    MTRSoftwareDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SoftwareDiagnosticsAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSoftwareDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<SoftwareDiagnosticsAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRSoftwareDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRSoftwareDiagnosticsAttributeListListAttributeCallbackBridge
{
public:
    MTRSoftwareDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSoftwareDiagnosticsAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSoftwareDiagnosticsAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSoftwareDiagnosticsAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsNeighborTableListAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsNeighborTableListAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsNeighborTableListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsNeighborTableListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsNeighborTableListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsNeighborTableListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType> & value);
};

class MTRThreadNetworkDiagnosticsNeighborTableListAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsNeighborTableListAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsNeighborTableListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsNeighborTableListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsNeighborTableListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsNeighborTableListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsRouteTableListAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsRouteTableListAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsRouteTableListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsRouteTableListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsRouteTableListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsRouteTableListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType> & value);
};

class MTRThreadNetworkDiagnosticsRouteTableListAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsRouteTableListAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsRouteTableListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsRouteTableListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsRouteTableListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsRouteTableListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<
                                chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType> & value);
};

class MTRThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsSecurityPolicyStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTRThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<
                    chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType> & value);
};

class MTRThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsOperationalDatasetComponentsStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> & value);
};

class MTRThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsAttributeListListAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRThreadNetworkDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsAttributeListListAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<WiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallback>
{
public:
    MTRWiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRWiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRWiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRWiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWiFiNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<WiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallback>
{
public:
    MTRWiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRWiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRWiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRWiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWiFiNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWiFiNetworkDiagnosticsAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<WiFiNetworkDiagnosticsAttributeListListAttributeCallback>
{
public:
    MTRWiFiNetworkDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWiFiNetworkDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRWiFiNetworkDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRWiFiNetworkDiagnosticsAttributeListListAttributeCallbackBridge
{
public:
    MTRWiFiNetworkDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWiFiNetworkDiagnosticsAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWiFiNetworkDiagnosticsAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWiFiNetworkDiagnosticsAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallback>
{
public:
    MTREthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<EthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTREthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTREthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTREthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthernetNetworkDiagnosticsGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallback>
{
public:
    MTREthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<EthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTREthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTREthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTREthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthernetNetworkDiagnosticsAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthernetNetworkDiagnosticsAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthernetNetworkDiagnosticsAttributeListListAttributeCallback>
{
public:
    MTREthernetNetworkDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthernetNetworkDiagnosticsAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthernetNetworkDiagnosticsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<EthernetNetworkDiagnosticsAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTREthernetNetworkDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge
    : public MTREthernetNetworkDiagnosticsAttributeListListAttributeCallbackBridge
{
public:
    MTREthernetNetworkDiagnosticsAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthernetNetworkDiagnosticsAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthernetNetworkDiagnosticsAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthernetNetworkDiagnosticsAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBridgedDeviceBasicInformationProductAppearanceStructAttributeCallbackBridge
    : public MTRCallbackBridge<BridgedDeviceBasicInformationProductAppearanceStructAttributeCallback>
{
public:
    MTRBridgedDeviceBasicInformationProductAppearanceStructAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<BridgedDeviceBasicInformationProductAppearanceStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBridgedDeviceBasicInformationProductAppearanceStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<BridgedDeviceBasicInformationProductAppearanceStructAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::BridgedDeviceBasicInformation::Structs::ProductAppearanceStruct::DecodableType & value);
};

class MTRBridgedDeviceBasicInformationProductAppearanceStructAttributeCallbackSubscriptionBridge
    : public MTRBridgedDeviceBasicInformationProductAppearanceStructAttributeCallbackBridge
{
public:
    MTRBridgedDeviceBasicInformationProductAppearanceStructAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBridgedDeviceBasicInformationProductAppearanceStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBridgedDeviceBasicInformationProductAppearanceStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBridgedDeviceBasicInformationProductAppearanceStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBridgedDeviceBasicInformationGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BridgedDeviceBasicInformationGeneratedCommandListListAttributeCallback>
{
public:
    MTRBridgedDeviceBasicInformationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<BridgedDeviceBasicInformationGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBridgedDeviceBasicInformationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<BridgedDeviceBasicInformationGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBridgedDeviceBasicInformationGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBridgedDeviceBasicInformationGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBridgedDeviceBasicInformationGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBridgedDeviceBasicInformationGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBridgedDeviceBasicInformationGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBridgedDeviceBasicInformationGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBridgedDeviceBasicInformationAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BridgedDeviceBasicInformationAcceptedCommandListListAttributeCallback>
{
public:
    MTRBridgedDeviceBasicInformationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<BridgedDeviceBasicInformationAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBridgedDeviceBasicInformationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<BridgedDeviceBasicInformationAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBridgedDeviceBasicInformationAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBridgedDeviceBasicInformationAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBridgedDeviceBasicInformationAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBridgedDeviceBasicInformationAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBridgedDeviceBasicInformationAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBridgedDeviceBasicInformationAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBridgedDeviceBasicInformationAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<BridgedDeviceBasicInformationAttributeListListAttributeCallback>
{
public:
    MTRBridgedDeviceBasicInformationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BridgedDeviceBasicInformationAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBridgedDeviceBasicInformationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<BridgedDeviceBasicInformationAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBridgedDeviceBasicInformationAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRBridgedDeviceBasicInformationAttributeListListAttributeCallbackBridge
{
public:
    MTRBridgedDeviceBasicInformationAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBridgedDeviceBasicInformationAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBridgedDeviceBasicInformationAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBridgedDeviceBasicInformationAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSwitchGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SwitchGeneratedCommandListListAttributeCallback>
{
public:
    MTRSwitchGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SwitchGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSwitchGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<SwitchGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSwitchGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSwitchGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRSwitchGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSwitchGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSwitchGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSwitchGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSwitchAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SwitchAcceptedCommandListListAttributeCallback>
{
public:
    MTRSwitchAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SwitchAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSwitchAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<SwitchAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSwitchAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSwitchAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRSwitchAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSwitchAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSwitchAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSwitchAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSwitchAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<SwitchAttributeListListAttributeCallback>
{
public:
    MTRSwitchAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SwitchAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSwitchAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<SwitchAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRSwitchAttributeListListAttributeCallbackSubscriptionBridge : public MTRSwitchAttributeListListAttributeCallbackBridge
{
public:
    MTRSwitchAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action,
                                                                  MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSwitchAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSwitchAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSwitchAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAdministratorCommissioningGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<AdministratorCommissioningGeneratedCommandListListAttributeCallback>
{
public:
    MTRAdministratorCommissioningGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AdministratorCommissioningGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAdministratorCommissioningGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<AdministratorCommissioningGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRAdministratorCommissioningGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRAdministratorCommissioningGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRAdministratorCommissioningGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAdministratorCommissioningGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAdministratorCommissioningGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAdministratorCommissioningGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAdministratorCommissioningAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<AdministratorCommissioningAcceptedCommandListListAttributeCallback>
{
public:
    MTRAdministratorCommissioningAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AdministratorCommissioningAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAdministratorCommissioningAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<AdministratorCommissioningAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRAdministratorCommissioningAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRAdministratorCommissioningAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRAdministratorCommissioningAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAdministratorCommissioningAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAdministratorCommissioningAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAdministratorCommissioningAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAdministratorCommissioningAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<AdministratorCommissioningAttributeListListAttributeCallback>
{
public:
    MTRAdministratorCommissioningAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AdministratorCommissioningAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAdministratorCommissioningAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<AdministratorCommissioningAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRAdministratorCommissioningAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRAdministratorCommissioningAttributeListListAttributeCallbackBridge
{
public:
    MTRAdministratorCommissioningAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAdministratorCommissioningAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAdministratorCommissioningAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAdministratorCommissioningAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROperationalCredentialsNOCsListAttributeCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsNOCsListAttributeCallback>
{
public:
    MTROperationalCredentialsNOCsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsNOCsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsNOCsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsNOCsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::OperationalCredentials::Structs::NOCStruct::DecodableType> &
            value);
};

class MTROperationalCredentialsNOCsListAttributeCallbackSubscriptionBridge
    : public MTROperationalCredentialsNOCsListAttributeCallbackBridge
{
public:
    MTROperationalCredentialsNOCsListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROperationalCredentialsNOCsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROperationalCredentialsNOCsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROperationalCredentialsNOCsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROperationalCredentialsFabricsListAttributeCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsFabricsListAttributeCallback>
{
public:
    MTROperationalCredentialsFabricsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsFabricsListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsFabricsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsFabricsListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<
                    chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptorStruct::DecodableType> & value);
};

class MTROperationalCredentialsFabricsListAttributeCallbackSubscriptionBridge
    : public MTROperationalCredentialsFabricsListAttributeCallbackBridge
{
public:
    MTROperationalCredentialsFabricsListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROperationalCredentialsFabricsListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROperationalCredentialsFabricsListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROperationalCredentialsFabricsListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsTrustedRootCertificatesListAttributeCallback>
{
public:
    MTROperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsTrustedRootCertificatesListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsTrustedRootCertificatesListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & value);
};

class MTROperationalCredentialsTrustedRootCertificatesListAttributeCallbackSubscriptionBridge
    : public MTROperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge
{
public:
    MTROperationalCredentialsTrustedRootCertificatesListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROperationalCredentialsGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsGeneratedCommandListListAttributeCallback>
{
public:
    MTROperationalCredentialsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROperationalCredentialsGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROperationalCredentialsGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTROperationalCredentialsGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROperationalCredentialsGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROperationalCredentialsGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROperationalCredentialsGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROperationalCredentialsAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsAcceptedCommandListListAttributeCallback>
{
public:
    MTROperationalCredentialsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROperationalCredentialsAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROperationalCredentialsAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTROperationalCredentialsAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROperationalCredentialsAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROperationalCredentialsAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROperationalCredentialsAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROperationalCredentialsAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsAttributeListListAttributeCallback>
{
public:
    MTROperationalCredentialsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTROperationalCredentialsAttributeListListAttributeCallbackSubscriptionBridge
    : public MTROperationalCredentialsAttributeListListAttributeCallbackBridge
{
public:
    MTROperationalCredentialsAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROperationalCredentialsAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROperationalCredentialsAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROperationalCredentialsAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupKeyManagementGroupKeyMapListAttributeCallbackBridge
    : public MTRCallbackBridge<GroupKeyManagementGroupKeyMapListAttributeCallback>
{
public:
    MTRGroupKeyManagementGroupKeyMapListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupKeyManagementGroupKeyMapListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGroupKeyManagementGroupKeyMapListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<GroupKeyManagementGroupKeyMapListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::GroupKeyManagement::Structs::GroupKeyMapStruct::DecodableType> & value);
};

class MTRGroupKeyManagementGroupKeyMapListAttributeCallbackSubscriptionBridge
    : public MTRGroupKeyManagementGroupKeyMapListAttributeCallbackBridge
{
public:
    MTRGroupKeyManagementGroupKeyMapListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGroupKeyManagementGroupKeyMapListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGroupKeyManagementGroupKeyMapListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGroupKeyManagementGroupKeyMapListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupKeyManagementGroupTableListAttributeCallbackBridge
    : public MTRCallbackBridge<GroupKeyManagementGroupTableListAttributeCallback>
{
public:
    MTRGroupKeyManagementGroupTableListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupKeyManagementGroupTableListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGroupKeyManagementGroupTableListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<GroupKeyManagementGroupTableListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::GroupKeyManagement::Structs::GroupInfoMapStruct::DecodableType> & value);
};

class MTRGroupKeyManagementGroupTableListAttributeCallbackSubscriptionBridge
    : public MTRGroupKeyManagementGroupTableListAttributeCallbackBridge
{
public:
    MTRGroupKeyManagementGroupTableListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGroupKeyManagementGroupTableListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGroupKeyManagementGroupTableListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGroupKeyManagementGroupTableListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupKeyManagementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<GroupKeyManagementGeneratedCommandListListAttributeCallback>
{
public:
    MTRGroupKeyManagementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupKeyManagementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGroupKeyManagementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<GroupKeyManagementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRGroupKeyManagementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRGroupKeyManagementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRGroupKeyManagementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGroupKeyManagementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGroupKeyManagementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGroupKeyManagementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupKeyManagementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<GroupKeyManagementAcceptedCommandListListAttributeCallback>
{
public:
    MTRGroupKeyManagementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupKeyManagementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGroupKeyManagementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<GroupKeyManagementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRGroupKeyManagementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRGroupKeyManagementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRGroupKeyManagementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGroupKeyManagementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGroupKeyManagementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGroupKeyManagementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupKeyManagementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<GroupKeyManagementAttributeListListAttributeCallback>
{
public:
    MTRGroupKeyManagementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupKeyManagementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGroupKeyManagementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<GroupKeyManagementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRGroupKeyManagementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRGroupKeyManagementAttributeListListAttributeCallbackBridge
{
public:
    MTRGroupKeyManagementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGroupKeyManagementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGroupKeyManagementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGroupKeyManagementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFixedLabelLabelListListAttributeCallbackBridge : public MTRCallbackBridge<FixedLabelLabelListListAttributeCallback>
{
public:
    MTRFixedLabelLabelListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FixedLabelLabelListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFixedLabelLabelListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<FixedLabelLabelListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::FixedLabel::Structs::LabelStruct::DecodableType> & value);
};

class MTRFixedLabelLabelListListAttributeCallbackSubscriptionBridge : public MTRFixedLabelLabelListListAttributeCallbackBridge
{
public:
    MTRFixedLabelLabelListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action,
                                                                  MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFixedLabelLabelListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFixedLabelLabelListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFixedLabelLabelListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFixedLabelGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FixedLabelGeneratedCommandListListAttributeCallback>
{
public:
    MTRFixedLabelGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FixedLabelGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFixedLabelGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<FixedLabelGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFixedLabelGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFixedLabelGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRFixedLabelGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFixedLabelGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFixedLabelGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFixedLabelGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFixedLabelAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FixedLabelAcceptedCommandListListAttributeCallback>
{
public:
    MTRFixedLabelAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FixedLabelAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFixedLabelAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<FixedLabelAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFixedLabelAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFixedLabelAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRFixedLabelAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFixedLabelAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFixedLabelAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFixedLabelAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFixedLabelAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<FixedLabelAttributeListListAttributeCallback>
{
public:
    MTRFixedLabelAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FixedLabelAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFixedLabelAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<FixedLabelAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRFixedLabelAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRFixedLabelAttributeListListAttributeCallbackBridge
{
public:
    MTRFixedLabelAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFixedLabelAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFixedLabelAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFixedLabelAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUserLabelLabelListListAttributeCallbackBridge : public MTRCallbackBridge<UserLabelLabelListListAttributeCallback>
{
public:
    MTRUserLabelLabelListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UserLabelLabelListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUserLabelLabelListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UserLabelLabelListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::UserLabel::Structs::LabelStruct::DecodableType> & value);
};

class MTRUserLabelLabelListListAttributeCallbackSubscriptionBridge : public MTRUserLabelLabelListListAttributeCallbackBridge
{
public:
    MTRUserLabelLabelListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action,
                                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUserLabelLabelListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUserLabelLabelListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUserLabelLabelListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUserLabelGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<UserLabelGeneratedCommandListListAttributeCallback>
{
public:
    MTRUserLabelGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UserLabelGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUserLabelGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<UserLabelGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRUserLabelGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRUserLabelGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRUserLabelGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUserLabelGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUserLabelGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUserLabelGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUserLabelAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<UserLabelAcceptedCommandListListAttributeCallback>
{
public:
    MTRUserLabelAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UserLabelAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUserLabelAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<UserLabelAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRUserLabelAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRUserLabelAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRUserLabelAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUserLabelAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUserLabelAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUserLabelAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUserLabelAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<UserLabelAttributeListListAttributeCallback>
{
public:
    MTRUserLabelAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UserLabelAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUserLabelAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UserLabelAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRUserLabelAttributeListListAttributeCallbackSubscriptionBridge : public MTRUserLabelAttributeListListAttributeCallbackBridge
{
public:
    MTRUserLabelAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action,
                                                                     MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUserLabelAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUserLabelAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUserLabelAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBooleanStateGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BooleanStateGeneratedCommandListListAttributeCallback>
{
public:
    MTRBooleanStateGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BooleanStateGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBooleanStateGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<BooleanStateGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBooleanStateGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBooleanStateGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBooleanStateGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBooleanStateGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBooleanStateGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBooleanStateGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBooleanStateAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BooleanStateAcceptedCommandListListAttributeCallback>
{
public:
    MTRBooleanStateAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BooleanStateAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBooleanStateAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<BooleanStateAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBooleanStateAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBooleanStateAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBooleanStateAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBooleanStateAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBooleanStateAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBooleanStateAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBooleanStateAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<BooleanStateAttributeListListAttributeCallback>
{
public:
    MTRBooleanStateAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BooleanStateAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBooleanStateAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<BooleanStateAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBooleanStateAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRBooleanStateAttributeListListAttributeCallbackBridge
{
public:
    MTRBooleanStateAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBooleanStateAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBooleanStateAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBooleanStateAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRModeSelectSupportedModesListAttributeCallbackBridge
    : public MTRCallbackBridge<ModeSelectSupportedModesListAttributeCallback>
{
public:
    MTRModeSelectSupportedModesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ModeSelectSupportedModesListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRModeSelectSupportedModesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ModeSelectSupportedModesListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::DecodableType> &
            value);
};

class MTRModeSelectSupportedModesListAttributeCallbackSubscriptionBridge
    : public MTRModeSelectSupportedModesListAttributeCallbackBridge
{
public:
    MTRModeSelectSupportedModesListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRModeSelectSupportedModesListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRModeSelectSupportedModesListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRModeSelectSupportedModesListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRModeSelectGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ModeSelectGeneratedCommandListListAttributeCallback>
{
public:
    MTRModeSelectGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ModeSelectGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRModeSelectGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<ModeSelectGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRModeSelectGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRModeSelectGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRModeSelectGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRModeSelectGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRModeSelectGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRModeSelectGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRModeSelectAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ModeSelectAcceptedCommandListListAttributeCallback>
{
public:
    MTRModeSelectAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ModeSelectAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRModeSelectAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<ModeSelectAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRModeSelectAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRModeSelectAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRModeSelectAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRModeSelectAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRModeSelectAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRModeSelectAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRModeSelectAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<ModeSelectAttributeListListAttributeCallback>
{
public:
    MTRModeSelectAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ModeSelectAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRModeSelectAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ModeSelectAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRModeSelectAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRModeSelectAttributeListListAttributeCallbackBridge
{
public:
    MTRModeSelectAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRModeSelectAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRModeSelectAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRModeSelectAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockCredentialRulesSupportAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockCredentialRulesSupportAttributeCallback>
{
public:
    MTRDoorLockCredentialRulesSupportAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockCredentialRulesSupportAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockCredentialRulesSupportAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<DoorLockCredentialRulesSupportAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::DoorLock::DlCredentialRuleMask> value);
};

class MTRDoorLockCredentialRulesSupportAttributeCallbackSubscriptionBridge
    : public MTRDoorLockCredentialRulesSupportAttributeCallbackBridge
{
public:
    MTRDoorLockCredentialRulesSupportAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockCredentialRulesSupportAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockCredentialRulesSupportAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockCredentialRulesSupportAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockSupportedOperatingModesAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockSupportedOperatingModesAttributeCallback>
{
public:
    MTRDoorLockSupportedOperatingModesAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockSupportedOperatingModesAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockSupportedOperatingModesAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<DoorLockSupportedOperatingModesAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::DoorLock::DlSupportedOperatingModes> value);
};

class MTRDoorLockSupportedOperatingModesAttributeCallbackSubscriptionBridge
    : public MTRDoorLockSupportedOperatingModesAttributeCallbackBridge
{
public:
    MTRDoorLockSupportedOperatingModesAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockSupportedOperatingModesAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockSupportedOperatingModesAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockSupportedOperatingModesAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockDefaultConfigurationRegisterAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockDefaultConfigurationRegisterAttributeCallback>
{
public:
    MTRDoorLockDefaultConfigurationRegisterAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockDefaultConfigurationRegisterAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockDefaultConfigurationRegisterAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<DoorLockDefaultConfigurationRegisterAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::DoorLock::DlDefaultConfigurationRegister> value);
};

class MTRDoorLockDefaultConfigurationRegisterAttributeCallbackSubscriptionBridge
    : public MTRDoorLockDefaultConfigurationRegisterAttributeCallbackBridge
{
public:
    MTRDoorLockDefaultConfigurationRegisterAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockDefaultConfigurationRegisterAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockDefaultConfigurationRegisterAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockDefaultConfigurationRegisterAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockLocalProgrammingFeaturesAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockLocalProgrammingFeaturesAttributeCallback>
{
public:
    MTRDoorLockLocalProgrammingFeaturesAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockLocalProgrammingFeaturesAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockLocalProgrammingFeaturesAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<DoorLockLocalProgrammingFeaturesAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::DoorLock::DlLocalProgrammingFeatures> value);
};

class MTRDoorLockLocalProgrammingFeaturesAttributeCallbackSubscriptionBridge
    : public MTRDoorLockLocalProgrammingFeaturesAttributeCallbackBridge
{
public:
    MTRDoorLockLocalProgrammingFeaturesAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockLocalProgrammingFeaturesAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockLocalProgrammingFeaturesAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockLocalProgrammingFeaturesAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockGeneratedCommandListListAttributeCallback>
{
public:
    MTRDoorLockGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<DoorLockGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRDoorLockGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRDoorLockGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRDoorLockGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockAcceptedCommandListListAttributeCallback>
{
public:
    MTRDoorLockAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<DoorLockAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRDoorLockAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRDoorLockAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRDoorLockAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<DoorLockAttributeListListAttributeCallback>
{
public:
    MTRDoorLockAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoorLockAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRDoorLockAttributeListListAttributeCallbackSubscriptionBridge : public MTRDoorLockAttributeListListAttributeCallbackBridge
{
public:
    MTRDoorLockAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action,
                                                                    MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWindowCoveringConfigStatusAttributeCallbackBridge : public MTRCallbackBridge<WindowCoveringConfigStatusAttributeCallback>
{
public:
    MTRWindowCoveringConfigStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WindowCoveringConfigStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWindowCoveringConfigStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<WindowCoveringConfigStatusAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::WindowCovering::ConfigStatus> value);
};

class MTRWindowCoveringConfigStatusAttributeCallbackSubscriptionBridge : public MTRWindowCoveringConfigStatusAttributeCallbackBridge
{
public:
    MTRWindowCoveringConfigStatusAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action,
                                                                     MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWindowCoveringConfigStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWindowCoveringConfigStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWindowCoveringConfigStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWindowCoveringOperationalStatusAttributeCallbackBridge
    : public MTRCallbackBridge<WindowCoveringOperationalStatusAttributeCallback>
{
public:
    MTRWindowCoveringOperationalStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WindowCoveringOperationalStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWindowCoveringOperationalStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<WindowCoveringOperationalStatusAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::WindowCovering::OperationalStatus> value);
};

class MTRWindowCoveringOperationalStatusAttributeCallbackSubscriptionBridge
    : public MTRWindowCoveringOperationalStatusAttributeCallbackBridge
{
public:
    MTRWindowCoveringOperationalStatusAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWindowCoveringOperationalStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWindowCoveringOperationalStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWindowCoveringOperationalStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWindowCoveringModeAttributeCallbackBridge : public MTRCallbackBridge<WindowCoveringModeAttributeCallback>
{
public:
    MTRWindowCoveringModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WindowCoveringModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWindowCoveringModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<WindowCoveringModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::WindowCovering::Mode> value);
};

class MTRWindowCoveringModeAttributeCallbackSubscriptionBridge : public MTRWindowCoveringModeAttributeCallbackBridge
{
public:
    MTRWindowCoveringModeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWindowCoveringModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWindowCoveringModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWindowCoveringModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWindowCoveringSafetyStatusAttributeCallbackBridge : public MTRCallbackBridge<WindowCoveringSafetyStatusAttributeCallback>
{
public:
    MTRWindowCoveringSafetyStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WindowCoveringSafetyStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWindowCoveringSafetyStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<WindowCoveringSafetyStatusAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::WindowCovering::SafetyStatus> value);
};

class MTRWindowCoveringSafetyStatusAttributeCallbackSubscriptionBridge : public MTRWindowCoveringSafetyStatusAttributeCallbackBridge
{
public:
    MTRWindowCoveringSafetyStatusAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action,
                                                                     MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWindowCoveringSafetyStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWindowCoveringSafetyStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWindowCoveringSafetyStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWindowCoveringGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<WindowCoveringGeneratedCommandListListAttributeCallback>
{
public:
    MTRWindowCoveringGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WindowCoveringGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWindowCoveringGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<WindowCoveringGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRWindowCoveringGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRWindowCoveringGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRWindowCoveringGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWindowCoveringGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWindowCoveringGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWindowCoveringGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWindowCoveringAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<WindowCoveringAcceptedCommandListListAttributeCallback>
{
public:
    MTRWindowCoveringAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WindowCoveringAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWindowCoveringAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<WindowCoveringAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRWindowCoveringAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRWindowCoveringAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRWindowCoveringAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWindowCoveringAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWindowCoveringAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWindowCoveringAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWindowCoveringAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<WindowCoveringAttributeListListAttributeCallback>
{
public:
    MTRWindowCoveringAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WindowCoveringAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWindowCoveringAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<WindowCoveringAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRWindowCoveringAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRWindowCoveringAttributeListListAttributeCallbackBridge
{
public:
    MTRWindowCoveringAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWindowCoveringAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWindowCoveringAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWindowCoveringAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBarrierControlGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BarrierControlGeneratedCommandListListAttributeCallback>
{
public:
    MTRBarrierControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BarrierControlGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBarrierControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<BarrierControlGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBarrierControlGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBarrierControlGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBarrierControlGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBarrierControlGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBarrierControlGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBarrierControlGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBarrierControlAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BarrierControlAcceptedCommandListListAttributeCallback>
{
public:
    MTRBarrierControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BarrierControlAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBarrierControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<BarrierControlAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBarrierControlAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBarrierControlAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBarrierControlAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBarrierControlAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBarrierControlAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBarrierControlAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBarrierControlAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<BarrierControlAttributeListListAttributeCallback>
{
public:
    MTRBarrierControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BarrierControlAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBarrierControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<BarrierControlAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBarrierControlAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRBarrierControlAttributeListListAttributeCallbackBridge
{
public:
    MTRBarrierControlAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBarrierControlAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBarrierControlAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBarrierControlAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPumpConfigurationAndControlPumpStatusAttributeCallbackBridge
    : public MTRCallbackBridge<PumpConfigurationAndControlPumpStatusAttributeCallback>
{
public:
    MTRPumpConfigurationAndControlPumpStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PumpConfigurationAndControlPumpStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPumpConfigurationAndControlPumpStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<PumpConfigurationAndControlPumpStatusAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            chip::BitMask<chip::app::Clusters::PumpConfigurationAndControl::PumpStatusBitmap> value);
};

class MTRPumpConfigurationAndControlPumpStatusAttributeCallbackSubscriptionBridge
    : public MTRPumpConfigurationAndControlPumpStatusAttributeCallbackBridge
{
public:
    MTRPumpConfigurationAndControlPumpStatusAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPumpConfigurationAndControlPumpStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPumpConfigurationAndControlPumpStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPumpConfigurationAndControlPumpStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPumpConfigurationAndControlGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PumpConfigurationAndControlGeneratedCommandListListAttributeCallback>
{
public:
    MTRPumpConfigurationAndControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PumpConfigurationAndControlGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPumpConfigurationAndControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<PumpConfigurationAndControlGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPumpConfigurationAndControlGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPumpConfigurationAndControlGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRPumpConfigurationAndControlGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPumpConfigurationAndControlGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPumpConfigurationAndControlGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPumpConfigurationAndControlGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPumpConfigurationAndControlAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PumpConfigurationAndControlAcceptedCommandListListAttributeCallback>
{
public:
    MTRPumpConfigurationAndControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PumpConfigurationAndControlAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPumpConfigurationAndControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<PumpConfigurationAndControlAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPumpConfigurationAndControlAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPumpConfigurationAndControlAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRPumpConfigurationAndControlAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPumpConfigurationAndControlAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPumpConfigurationAndControlAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPumpConfigurationAndControlAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPumpConfigurationAndControlAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<PumpConfigurationAndControlAttributeListListAttributeCallback>
{
public:
    MTRPumpConfigurationAndControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PumpConfigurationAndControlAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPumpConfigurationAndControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<PumpConfigurationAndControlAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRPumpConfigurationAndControlAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRPumpConfigurationAndControlAttributeListListAttributeCallbackBridge
{
public:
    MTRPumpConfigurationAndControlAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPumpConfigurationAndControlAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPumpConfigurationAndControlAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPumpConfigurationAndControlAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ThermostatGeneratedCommandListListAttributeCallback>
{
public:
    MTRThermostatGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThermostatGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThermostatGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<ThermostatGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRThermostatGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRThermostatGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRThermostatGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ThermostatAcceptedCommandListListAttributeCallback>
{
public:
    MTRThermostatAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThermostatAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThermostatAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<ThermostatAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRThermostatAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRThermostatAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRThermostatAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<ThermostatAttributeListListAttributeCallback>
{
public:
    MTRThermostatAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThermostatAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThermostatAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ThermostatAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRThermostatAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRThermostatAttributeListListAttributeCallbackBridge
{
public:
    MTRThermostatAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFanControlGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FanControlGeneratedCommandListListAttributeCallback>
{
public:
    MTRFanControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FanControlGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFanControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<FanControlGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFanControlGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFanControlGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRFanControlGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFanControlGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFanControlGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFanControlGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFanControlAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FanControlAcceptedCommandListListAttributeCallback>
{
public:
    MTRFanControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FanControlAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFanControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<FanControlAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFanControlAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFanControlAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRFanControlAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFanControlAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFanControlAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFanControlAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFanControlAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<FanControlAttributeListListAttributeCallback>
{
public:
    MTRFanControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FanControlAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFanControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<FanControlAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRFanControlAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRFanControlAttributeListListAttributeCallbackBridge
{
public:
    MTRFanControlAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFanControlAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFanControlAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFanControlAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallback>
{
public:
    MTRThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<ThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<ThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatUserInterfaceConfigurationGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallback>
{
public:
    MTRThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<ThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<ThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatUserInterfaceConfigurationAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatUserInterfaceConfigurationAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ThermostatUserInterfaceConfigurationAttributeListListAttributeCallback>
{
public:
    MTRThermostatUserInterfaceConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<ThermostatUserInterfaceConfigurationAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThermostatUserInterfaceConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<ThermostatUserInterfaceConfigurationAttributeListListAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRThermostatUserInterfaceConfigurationAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRThermostatUserInterfaceConfigurationAttributeListListAttributeCallbackBridge
{
public:
    MTRThermostatUserInterfaceConfigurationAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatUserInterfaceConfigurationAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatUserInterfaceConfigurationAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatUserInterfaceConfigurationAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlGeneratedCommandListListAttributeCallback>
{
public:
    MTRColorControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<ColorControlGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRColorControlGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRColorControlGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRColorControlGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlAcceptedCommandListListAttributeCallback>
{
public:
    MTRColorControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<ColorControlAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRColorControlAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRColorControlAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRColorControlAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlAttributeListListAttributeCallback>
{
public:
    MTRColorControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<ColorControlAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRColorControlAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRColorControlAttributeListListAttributeCallbackBridge
{
public:
    MTRColorControlAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBallastConfigurationGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BallastConfigurationGeneratedCommandListListAttributeCallback>
{
public:
    MTRBallastConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BallastConfigurationGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBallastConfigurationGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<BallastConfigurationGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBallastConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBallastConfigurationGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBallastConfigurationGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBallastConfigurationGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBallastConfigurationGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBallastConfigurationGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBallastConfigurationAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BallastConfigurationAcceptedCommandListListAttributeCallback>
{
public:
    MTRBallastConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BallastConfigurationAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBallastConfigurationAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<BallastConfigurationAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBallastConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBallastConfigurationAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBallastConfigurationAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBallastConfigurationAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBallastConfigurationAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBallastConfigurationAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBallastConfigurationAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<BallastConfigurationAttributeListListAttributeCallback>
{
public:
    MTRBallastConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BallastConfigurationAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBallastConfigurationAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<BallastConfigurationAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBallastConfigurationAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRBallastConfigurationAttributeListListAttributeCallbackBridge
{
public:
    MTRBallastConfigurationAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBallastConfigurationAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBallastConfigurationAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBallastConfigurationAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRIlluminanceMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<IlluminanceMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRIlluminanceMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IlluminanceMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIlluminanceMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<IlluminanceMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRIlluminanceMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRIlluminanceMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRIlluminanceMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIlluminanceMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIlluminanceMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIlluminanceMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRIlluminanceMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<IlluminanceMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRIlluminanceMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IlluminanceMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIlluminanceMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<IlluminanceMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRIlluminanceMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRIlluminanceMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRIlluminanceMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIlluminanceMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIlluminanceMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIlluminanceMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRIlluminanceMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<IlluminanceMeasurementAttributeListListAttributeCallback>
{
public:
    MTRIlluminanceMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IlluminanceMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIlluminanceMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<IlluminanceMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRIlluminanceMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRIlluminanceMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRIlluminanceMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIlluminanceMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIlluminanceMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIlluminanceMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTemperatureMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TemperatureMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRTemperatureMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TemperatureMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTemperatureMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<TemperatureMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTemperatureMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTemperatureMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRTemperatureMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTemperatureMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTemperatureMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTemperatureMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTemperatureMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TemperatureMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRTemperatureMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TemperatureMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTemperatureMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<TemperatureMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTemperatureMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTemperatureMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRTemperatureMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTemperatureMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTemperatureMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTemperatureMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTemperatureMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<TemperatureMeasurementAttributeListListAttributeCallback>
{
public:
    MTRTemperatureMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TemperatureMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTemperatureMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<TemperatureMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRTemperatureMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRTemperatureMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRTemperatureMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTemperatureMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTemperatureMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTemperatureMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPressureMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PressureMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRPressureMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PressureMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPressureMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<PressureMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPressureMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPressureMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRPressureMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPressureMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPressureMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPressureMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPressureMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PressureMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRPressureMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PressureMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPressureMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<PressureMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPressureMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPressureMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRPressureMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPressureMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPressureMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPressureMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPressureMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<PressureMeasurementAttributeListListAttributeCallback>
{
public:
    MTRPressureMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PressureMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPressureMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<PressureMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRPressureMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRPressureMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRPressureMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPressureMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPressureMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPressureMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFlowMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FlowMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRFlowMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FlowMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFlowMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<FlowMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFlowMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFlowMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRFlowMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFlowMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFlowMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFlowMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFlowMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FlowMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRFlowMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FlowMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFlowMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<FlowMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFlowMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFlowMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRFlowMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFlowMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFlowMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFlowMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFlowMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<FlowMeasurementAttributeListListAttributeCallback>
{
public:
    MTRFlowMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FlowMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFlowMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<FlowMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRFlowMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRFlowMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRFlowMeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFlowMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFlowMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFlowMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRelativeHumidityMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<RelativeHumidityMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRRelativeHumidityMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RelativeHumidityMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRelativeHumidityMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<RelativeHumidityMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRRelativeHumidityMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRRelativeHumidityMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRRelativeHumidityMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRelativeHumidityMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRelativeHumidityMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRelativeHumidityMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRelativeHumidityMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<RelativeHumidityMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRRelativeHumidityMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RelativeHumidityMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRelativeHumidityMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<RelativeHumidityMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRRelativeHumidityMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRRelativeHumidityMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRRelativeHumidityMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRelativeHumidityMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRelativeHumidityMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRelativeHumidityMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRelativeHumidityMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<RelativeHumidityMeasurementAttributeListListAttributeCallback>
{
public:
    MTRRelativeHumidityMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RelativeHumidityMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRelativeHumidityMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<RelativeHumidityMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRRelativeHumidityMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRRelativeHumidityMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRRelativeHumidityMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRelativeHumidityMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRelativeHumidityMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRelativeHumidityMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROccupancySensingOccupancyAttributeCallbackBridge : public MTRCallbackBridge<OccupancySensingOccupancyAttributeCallback>
{
public:
    MTROccupancySensingOccupancyAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OccupancySensingOccupancyAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROccupancySensingOccupancyAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<OccupancySensingOccupancyAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancyBitmap> value);
};

class MTROccupancySensingOccupancyAttributeCallbackSubscriptionBridge : public MTROccupancySensingOccupancyAttributeCallbackBridge
{
public:
    MTROccupancySensingOccupancyAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action,
                                                                    MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROccupancySensingOccupancyAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROccupancySensingOccupancyAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROccupancySensingOccupancyAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROccupancySensingOccupancySensorTypeBitmapAttributeCallbackBridge
    : public MTRCallbackBridge<OccupancySensingOccupancySensorTypeBitmapAttributeCallback>
{
public:
    MTROccupancySensingOccupancySensorTypeBitmapAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OccupancySensingOccupancySensorTypeBitmapAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROccupancySensingOccupancySensorTypeBitmapAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<OccupancySensingOccupancySensorTypeBitmapAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::OccupancySensing::OccupancySensorTypeBitmap> value);
};

class MTROccupancySensingOccupancySensorTypeBitmapAttributeCallbackSubscriptionBridge
    : public MTROccupancySensingOccupancySensorTypeBitmapAttributeCallbackBridge
{
public:
    MTROccupancySensingOccupancySensorTypeBitmapAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROccupancySensingOccupancySensorTypeBitmapAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROccupancySensingOccupancySensorTypeBitmapAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROccupancySensingOccupancySensorTypeBitmapAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROccupancySensingGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OccupancySensingGeneratedCommandListListAttributeCallback>
{
public:
    MTROccupancySensingGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OccupancySensingGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROccupancySensingGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<OccupancySensingGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROccupancySensingGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROccupancySensingGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTROccupancySensingGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROccupancySensingGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROccupancySensingGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROccupancySensingGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROccupancySensingAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OccupancySensingAcceptedCommandListListAttributeCallback>
{
public:
    MTROccupancySensingAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OccupancySensingAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROccupancySensingAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<OccupancySensingAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROccupancySensingAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROccupancySensingAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTROccupancySensingAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROccupancySensingAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROccupancySensingAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROccupancySensingAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROccupancySensingAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<OccupancySensingAttributeListListAttributeCallback>
{
public:
    MTROccupancySensingAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OccupancySensingAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROccupancySensingAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<OccupancySensingAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTROccupancySensingAttributeListListAttributeCallbackSubscriptionBridge
    : public MTROccupancySensingAttributeListListAttributeCallbackBridge
{
public:
    MTROccupancySensingAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROccupancySensingAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROccupancySensingAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROccupancySensingAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonMonoxideMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonMonoxideMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRCarbonMonoxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonMonoxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonMonoxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<CarbonMonoxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRCarbonMonoxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRCarbonMonoxideMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRCarbonMonoxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonMonoxideMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonMonoxideMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonMonoxideMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonMonoxideMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonMonoxideMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRCarbonMonoxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonMonoxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonMonoxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<CarbonMonoxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRCarbonMonoxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRCarbonMonoxideMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRCarbonMonoxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonMonoxideMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonMonoxideMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonMonoxideMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonMonoxideMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonMonoxideMeasurementEventListListAttributeCallback>
{
public:
    MTRCarbonMonoxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonMonoxideMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonMonoxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<CarbonMonoxideMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRCarbonMonoxideMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRCarbonMonoxideMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRCarbonMonoxideMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonMonoxideMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonMonoxideMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonMonoxideMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonMonoxideMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonMonoxideMeasurementAttributeListListAttributeCallback>
{
public:
    MTRCarbonMonoxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonMonoxideMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonMonoxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<CarbonMonoxideMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRCarbonMonoxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRCarbonMonoxideMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRCarbonMonoxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonMonoxideMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonMonoxideMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonMonoxideMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonDioxideMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRCarbonDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonDioxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<CarbonDioxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRCarbonDioxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRCarbonDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRCarbonDioxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonDioxideMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRCarbonDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonDioxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<CarbonDioxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRCarbonDioxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRCarbonDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRCarbonDioxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonDioxideMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonDioxideMeasurementEventListListAttributeCallback>
{
public:
    MTRCarbonDioxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonDioxideMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonDioxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<CarbonDioxideMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRCarbonDioxideMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRCarbonDioxideMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRCarbonDioxideMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonDioxideMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonDioxideMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonDioxideMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonDioxideMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonDioxideMeasurementAttributeListListAttributeCallback>
{
public:
    MTRCarbonDioxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonDioxideMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonDioxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<CarbonDioxideMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRCarbonDioxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRCarbonDioxideMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRCarbonDioxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonDioxideMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonDioxideMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonDioxideMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTREthyleneMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<EthyleneMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTREthyleneMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTREthyleneMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTREthyleneMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTREthyleneMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<EthyleneMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTREthyleneMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTREthyleneMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTREthyleneMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneMeasurementEventListListAttributeCallback>
{
public:
    MTREthyleneMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<EthyleneMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTREthyleneMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTREthyleneMeasurementEventListListAttributeCallbackBridge
{
public:
    MTREthyleneMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneMeasurementAttributeListListAttributeCallback>
{
public:
    MTREthyleneMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<EthyleneMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTREthyleneMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTREthyleneMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTREthyleneMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneOxideMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneOxideMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTREthyleneOxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneOxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneOxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<EthyleneOxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTREthyleneOxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTREthyleneOxideMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTREthyleneOxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneOxideMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneOxideMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneOxideMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneOxideMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneOxideMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTREthyleneOxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneOxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneOxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<EthyleneOxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTREthyleneOxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTREthyleneOxideMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTREthyleneOxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneOxideMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneOxideMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneOxideMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneOxideMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneOxideMeasurementEventListListAttributeCallback>
{
public:
    MTREthyleneOxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneOxideMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneOxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<EthyleneOxideMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTREthyleneOxideMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTREthyleneOxideMeasurementEventListListAttributeCallbackBridge
{
public:
    MTREthyleneOxideMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneOxideMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneOxideMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneOxideMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneOxideMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneOxideMeasurementAttributeListListAttributeCallback>
{
public:
    MTREthyleneOxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneOxideMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneOxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<EthyleneOxideMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTREthyleneOxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTREthyleneOxideMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTREthyleneOxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneOxideMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneOxideMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneOxideMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRHydrogenMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<HydrogenMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRHydrogenMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRHydrogenMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRHydrogenMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRHydrogenMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<HydrogenMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRHydrogenMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRHydrogenMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRHydrogenMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenMeasurementEventListListAttributeCallback>
{
public:
    MTRHydrogenMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<HydrogenMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRHydrogenMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRHydrogenMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRHydrogenMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenMeasurementAttributeListListAttributeCallback>
{
public:
    MTRHydrogenMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<HydrogenMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRHydrogenMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRHydrogenMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRHydrogenMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenSulfideMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenSulfideMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRHydrogenSulfideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenSulfideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenSulfideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<HydrogenSulfideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRHydrogenSulfideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRHydrogenSulfideMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRHydrogenSulfideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenSulfideMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenSulfideMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenSulfideMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenSulfideMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenSulfideMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRHydrogenSulfideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenSulfideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenSulfideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<HydrogenSulfideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRHydrogenSulfideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRHydrogenSulfideMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRHydrogenSulfideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenSulfideMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenSulfideMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenSulfideMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenSulfideMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenSulfideMeasurementEventListListAttributeCallback>
{
public:
    MTRHydrogenSulfideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenSulfideMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenSulfideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<HydrogenSulfideMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRHydrogenSulfideMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRHydrogenSulfideMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRHydrogenSulfideMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenSulfideMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenSulfideMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenSulfideMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenSulfideMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenSulfideMeasurementAttributeListListAttributeCallback>
{
public:
    MTRHydrogenSulfideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenSulfideMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenSulfideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<HydrogenSulfideMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRHydrogenSulfideMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRHydrogenSulfideMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRHydrogenSulfideMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenSulfideMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenSulfideMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenSulfideMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitricOxideMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<NitricOxideMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRNitricOxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitricOxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitricOxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NitricOxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRNitricOxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRNitricOxideMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRNitricOxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitricOxideMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitricOxideMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitricOxideMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitricOxideMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<NitricOxideMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRNitricOxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitricOxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitricOxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NitricOxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRNitricOxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRNitricOxideMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRNitricOxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitricOxideMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitricOxideMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitricOxideMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitricOxideMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<NitricOxideMeasurementEventListListAttributeCallback>
{
public:
    MTRNitricOxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitricOxideMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitricOxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NitricOxideMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRNitricOxideMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRNitricOxideMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRNitricOxideMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitricOxideMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitricOxideMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitricOxideMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitricOxideMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<NitricOxideMeasurementAttributeListListAttributeCallback>
{
public:
    MTRNitricOxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitricOxideMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitricOxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NitricOxideMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRNitricOxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRNitricOxideMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRNitricOxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitricOxideMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitricOxideMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitricOxideMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitrogenDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<NitrogenDioxideMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRNitrogenDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitrogenDioxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitrogenDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NitrogenDioxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRNitrogenDioxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRNitrogenDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRNitrogenDioxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitrogenDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitrogenDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitrogenDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitrogenDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<NitrogenDioxideMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRNitrogenDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitrogenDioxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitrogenDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NitrogenDioxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRNitrogenDioxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRNitrogenDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRNitrogenDioxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitrogenDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitrogenDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitrogenDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitrogenDioxideMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<NitrogenDioxideMeasurementEventListListAttributeCallback>
{
public:
    MTRNitrogenDioxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitrogenDioxideMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitrogenDioxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NitrogenDioxideMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRNitrogenDioxideMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRNitrogenDioxideMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRNitrogenDioxideMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitrogenDioxideMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitrogenDioxideMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitrogenDioxideMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitrogenDioxideMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<NitrogenDioxideMeasurementAttributeListListAttributeCallback>
{
public:
    MTRNitrogenDioxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitrogenDioxideMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitrogenDioxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NitrogenDioxideMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRNitrogenDioxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRNitrogenDioxideMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRNitrogenDioxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitrogenDioxideMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitrogenDioxideMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitrogenDioxideMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROxygenMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OxygenMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTROxygenMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OxygenMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROxygenMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<OxygenMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROxygenMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROxygenMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTROxygenMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROxygenMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROxygenMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROxygenMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROxygenMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OxygenMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTROxygenMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OxygenMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROxygenMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<OxygenMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROxygenMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROxygenMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTROxygenMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROxygenMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROxygenMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROxygenMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROxygenMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<OxygenMeasurementEventListListAttributeCallback>
{
public:
    MTROxygenMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OxygenMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROxygenMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<OxygenMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTROxygenMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTROxygenMeasurementEventListListAttributeCallbackBridge
{
public:
    MTROxygenMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROxygenMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROxygenMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROxygenMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROxygenMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<OxygenMeasurementAttributeListListAttributeCallback>
{
public:
    MTROxygenMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OxygenMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROxygenMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<OxygenMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTROxygenMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTROxygenMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTROxygenMeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROxygenMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROxygenMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROxygenMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROzoneMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OzoneMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTROzoneMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OzoneMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROzoneMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<OzoneMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROzoneMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROzoneMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTROzoneMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROzoneMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROzoneMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROzoneMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROzoneMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<OzoneMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTROzoneMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OzoneMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROzoneMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<OzoneMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTROzoneMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTROzoneMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTROzoneMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROzoneMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROzoneMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROzoneMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROzoneMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<OzoneMeasurementEventListListAttributeCallback>
{
public:
    MTROzoneMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OzoneMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROzoneMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<OzoneMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTROzoneMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTROzoneMeasurementEventListListAttributeCallbackBridge
{
public:
    MTROzoneMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROzoneMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROzoneMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROzoneMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROzoneMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<OzoneMeasurementAttributeListListAttributeCallback>
{
public:
    MTROzoneMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OzoneMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROzoneMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<OzoneMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTROzoneMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTROzoneMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTROzoneMeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROzoneMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROzoneMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROzoneMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfurDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SulfurDioxideMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRSulfurDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfurDioxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfurDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<SulfurDioxideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSulfurDioxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSulfurDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRSulfurDioxideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfurDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfurDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfurDioxideMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfurDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SulfurDioxideMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRSulfurDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfurDioxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfurDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<SulfurDioxideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSulfurDioxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSulfurDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRSulfurDioxideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfurDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfurDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfurDioxideMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfurDioxideMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<SulfurDioxideMeasurementEventListListAttributeCallback>
{
public:
    MTRSulfurDioxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfurDioxideMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfurDioxideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<SulfurDioxideMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRSulfurDioxideMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRSulfurDioxideMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRSulfurDioxideMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfurDioxideMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfurDioxideMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfurDioxideMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfurDioxideMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<SulfurDioxideMeasurementAttributeListListAttributeCallback>
{
public:
    MTRSulfurDioxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfurDioxideMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfurDioxideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<SulfurDioxideMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRSulfurDioxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRSulfurDioxideMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRSulfurDioxideMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfurDioxideMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfurDioxideMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfurDioxideMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDissolvedOxygenMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<DissolvedOxygenMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRDissolvedOxygenMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DissolvedOxygenMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDissolvedOxygenMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<DissolvedOxygenMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRDissolvedOxygenMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRDissolvedOxygenMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRDissolvedOxygenMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDissolvedOxygenMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDissolvedOxygenMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDissolvedOxygenMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDissolvedOxygenMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<DissolvedOxygenMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRDissolvedOxygenMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DissolvedOxygenMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDissolvedOxygenMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<DissolvedOxygenMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRDissolvedOxygenMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRDissolvedOxygenMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRDissolvedOxygenMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDissolvedOxygenMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDissolvedOxygenMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDissolvedOxygenMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDissolvedOxygenMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<DissolvedOxygenMeasurementEventListListAttributeCallback>
{
public:
    MTRDissolvedOxygenMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DissolvedOxygenMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDissolvedOxygenMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<DissolvedOxygenMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRDissolvedOxygenMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRDissolvedOxygenMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRDissolvedOxygenMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDissolvedOxygenMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDissolvedOxygenMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDissolvedOxygenMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDissolvedOxygenMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<DissolvedOxygenMeasurementAttributeListListAttributeCallback>
{
public:
    MTRDissolvedOxygenMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DissolvedOxygenMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDissolvedOxygenMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<DissolvedOxygenMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRDissolvedOxygenMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRDissolvedOxygenMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRDissolvedOxygenMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDissolvedOxygenMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDissolvedOxygenMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDissolvedOxygenMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromateMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromateMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRBromateMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromateMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromateMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<BromateMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBromateMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBromateMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBromateMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromateMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromateMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromateMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromateMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromateMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRBromateMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromateMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromateMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<BromateMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBromateMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBromateMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBromateMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromateMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromateMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromateMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromateMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromateMeasurementEventListListAttributeCallback>
{
public:
    MTRBromateMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromateMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromateMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<BromateMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRBromateMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRBromateMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRBromateMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromateMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromateMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromateMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromateMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromateMeasurementAttributeListListAttributeCallback>
{
public:
    MTRBromateMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromateMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromateMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<BromateMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBromateMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRBromateMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRBromateMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromateMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromateMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromateMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloraminesMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChloraminesMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRChloraminesMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloraminesMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloraminesMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<ChloraminesMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChloraminesMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChloraminesMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRChloraminesMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloraminesMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloraminesMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloraminesMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloraminesMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChloraminesMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRChloraminesMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloraminesMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloraminesMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<ChloraminesMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChloraminesMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChloraminesMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRChloraminesMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloraminesMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloraminesMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloraminesMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloraminesMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChloraminesMeasurementEventListListAttributeCallback>
{
public:
    MTRChloraminesMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloraminesMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloraminesMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<ChloraminesMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRChloraminesMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRChloraminesMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRChloraminesMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloraminesMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloraminesMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloraminesMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloraminesMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChloraminesMeasurementAttributeListListAttributeCallback>
{
public:
    MTRChloraminesMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloraminesMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloraminesMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<ChloraminesMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRChloraminesMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRChloraminesMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRChloraminesMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloraminesMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloraminesMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloraminesMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorineMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorineMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRChlorineMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChlorineMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorineMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<ChlorineMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChlorineMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChlorineMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRChlorineMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorineMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorineMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorineMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorineMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorineMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRChlorineMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChlorineMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorineMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<ChlorineMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChlorineMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChlorineMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRChlorineMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorineMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorineMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorineMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorineMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorineMeasurementEventListListAttributeCallback>
{
public:
    MTRChlorineMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChlorineMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorineMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<ChlorineMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRChlorineMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRChlorineMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRChlorineMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorineMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorineMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorineMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorineMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorineMeasurementAttributeListListAttributeCallback>
{
public:
    MTRChlorineMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChlorineMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorineMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<ChlorineMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRChlorineMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRChlorineMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRChlorineMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorineMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorineMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorineMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFecalColiformEColiMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FecalColiformEColiMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRFecalColiformEColiMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<FecalColiformEColiMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFecalColiformEColiMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<FecalColiformEColiMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFecalColiformEColiMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFecalColiformEColiMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRFecalColiformEColiMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFecalColiformEColiMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFecalColiformEColiMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFecalColiformEColiMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFecalColiformEColiMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FecalColiformEColiMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRFecalColiformEColiMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<FecalColiformEColiMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFecalColiformEColiMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<FecalColiformEColiMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFecalColiformEColiMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFecalColiformEColiMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRFecalColiformEColiMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFecalColiformEColiMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFecalColiformEColiMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFecalColiformEColiMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFecalColiformEColiMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<FecalColiformEColiMeasurementEventListListAttributeCallback>
{
public:
    MTRFecalColiformEColiMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FecalColiformEColiMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFecalColiformEColiMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<FecalColiformEColiMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRFecalColiformEColiMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRFecalColiformEColiMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRFecalColiformEColiMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFecalColiformEColiMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFecalColiformEColiMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFecalColiformEColiMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFecalColiformEColiMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<FecalColiformEColiMeasurementAttributeListListAttributeCallback>
{
public:
    MTRFecalColiformEColiMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FecalColiformEColiMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFecalColiformEColiMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<FecalColiformEColiMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRFecalColiformEColiMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRFecalColiformEColiMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRFecalColiformEColiMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFecalColiformEColiMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFecalColiformEColiMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFecalColiformEColiMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFluorideMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FluorideMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRFluorideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FluorideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFluorideMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<FluorideMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFluorideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFluorideMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRFluorideMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFluorideMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFluorideMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFluorideMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFluorideMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FluorideMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRFluorideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FluorideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFluorideMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<FluorideMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFluorideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFluorideMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRFluorideMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFluorideMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFluorideMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFluorideMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFluorideMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<FluorideMeasurementEventListListAttributeCallback>
{
public:
    MTRFluorideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FluorideMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFluorideMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<FluorideMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRFluorideMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRFluorideMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRFluorideMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFluorideMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFluorideMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFluorideMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFluorideMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<FluorideMeasurementAttributeListListAttributeCallback>
{
public:
    MTRFluorideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FluorideMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFluorideMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<FluorideMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRFluorideMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRFluorideMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRFluorideMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFluorideMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFluorideMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFluorideMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<HaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRHaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRHaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRHaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRHaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHaloaceticAcidsMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<HaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRHaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRHaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRHaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRHaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHaloaceticAcidsMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHaloaceticAcidsMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<HaloaceticAcidsMeasurementEventListListAttributeCallback>
{
public:
    MTRHaloaceticAcidsMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHaloaceticAcidsMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRHaloaceticAcidsMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRHaloaceticAcidsMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRHaloaceticAcidsMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHaloaceticAcidsMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHaloaceticAcidsMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHaloaceticAcidsMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHaloaceticAcidsMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<HaloaceticAcidsMeasurementAttributeListListAttributeCallback>
{
public:
    MTRHaloaceticAcidsMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHaloaceticAcidsMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRHaloaceticAcidsMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRHaloaceticAcidsMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRHaloaceticAcidsMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHaloaceticAcidsMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHaloaceticAcidsMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHaloaceticAcidsMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRTotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRTotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalTrihalomethanesMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRTotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRTotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalTrihalomethanesMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalTrihalomethanesMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalTrihalomethanesMeasurementEventListListAttributeCallback>
{
public:
    MTRTotalTrihalomethanesMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalTrihalomethanesMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRTotalTrihalomethanesMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRTotalTrihalomethanesMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRTotalTrihalomethanesMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalTrihalomethanesMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalTrihalomethanesMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalTrihalomethanesMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalTrihalomethanesMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalTrihalomethanesMeasurementAttributeListListAttributeCallback>
{
public:
    MTRTotalTrihalomethanesMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalTrihalomethanesMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRTotalTrihalomethanesMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRTotalTrihalomethanesMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRTotalTrihalomethanesMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalTrihalomethanesMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalTrihalomethanesMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalTrihalomethanesMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRTotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler,
                                                                                       MTRActionBlock action) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                     OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRTotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalColiformBacteriaMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRTotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRTotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalColiformBacteriaMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalColiformBacteriaMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalColiformBacteriaMeasurementEventListListAttributeCallback>
{
public:
    MTRTotalColiformBacteriaMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalColiformBacteriaMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRTotalColiformBacteriaMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRTotalColiformBacteriaMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRTotalColiformBacteriaMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalColiformBacteriaMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalColiformBacteriaMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalColiformBacteriaMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalColiformBacteriaMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalColiformBacteriaMeasurementAttributeListListAttributeCallback>
{
public:
    MTRTotalColiformBacteriaMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalColiformBacteriaMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementAttributeListListAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRTotalColiformBacteriaMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRTotalColiformBacteriaMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRTotalColiformBacteriaMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalColiformBacteriaMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalColiformBacteriaMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalColiformBacteriaMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTurbidityMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TurbidityMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRTurbidityMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TurbidityMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTurbidityMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<TurbidityMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTurbidityMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTurbidityMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRTurbidityMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTurbidityMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTurbidityMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTurbidityMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTurbidityMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TurbidityMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRTurbidityMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TurbidityMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTurbidityMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<TurbidityMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTurbidityMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTurbidityMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRTurbidityMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTurbidityMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTurbidityMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTurbidityMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTurbidityMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<TurbidityMeasurementEventListListAttributeCallback>
{
public:
    MTRTurbidityMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TurbidityMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTurbidityMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<TurbidityMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRTurbidityMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRTurbidityMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRTurbidityMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTurbidityMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTurbidityMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTurbidityMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTurbidityMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<TurbidityMeasurementAttributeListListAttributeCallback>
{
public:
    MTRTurbidityMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TurbidityMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTurbidityMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<TurbidityMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRTurbidityMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRTurbidityMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRTurbidityMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTurbidityMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTurbidityMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTurbidityMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCopperMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<CopperMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRCopperMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CopperMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCopperMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<CopperMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRCopperMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRCopperMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRCopperMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCopperMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCopperMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCopperMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCopperMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<CopperMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRCopperMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CopperMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCopperMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<CopperMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRCopperMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRCopperMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRCopperMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCopperMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCopperMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCopperMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCopperMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<CopperMeasurementEventListListAttributeCallback>
{
public:
    MTRCopperMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CopperMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCopperMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<CopperMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRCopperMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRCopperMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRCopperMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCopperMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCopperMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCopperMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCopperMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<CopperMeasurementAttributeListListAttributeCallback>
{
public:
    MTRCopperMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CopperMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCopperMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<CopperMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRCopperMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRCopperMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRCopperMeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCopperMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCopperMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCopperMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLeadMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<LeadMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRLeadMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LeadMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLeadMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<LeadMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRLeadMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRLeadMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRLeadMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLeadMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLeadMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLeadMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLeadMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<LeadMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRLeadMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LeadMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLeadMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<LeadMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRLeadMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRLeadMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRLeadMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLeadMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLeadMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLeadMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLeadMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<LeadMeasurementEventListListAttributeCallback>
{
public:
    MTRLeadMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LeadMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLeadMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<LeadMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRLeadMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRLeadMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRLeadMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLeadMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLeadMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLeadMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLeadMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<LeadMeasurementAttributeListListAttributeCallback>
{
public:
    MTRLeadMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LeadMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLeadMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<LeadMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRLeadMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRLeadMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRLeadMeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLeadMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLeadMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLeadMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRManganeseMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ManganeseMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRManganeseMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ManganeseMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRManganeseMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<ManganeseMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRManganeseMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRManganeseMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRManganeseMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRManganeseMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRManganeseMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRManganeseMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRManganeseMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ManganeseMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRManganeseMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ManganeseMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRManganeseMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<ManganeseMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRManganeseMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRManganeseMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRManganeseMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRManganeseMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRManganeseMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRManganeseMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRManganeseMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<ManganeseMeasurementEventListListAttributeCallback>
{
public:
    MTRManganeseMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ManganeseMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRManganeseMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<ManganeseMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRManganeseMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRManganeseMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRManganeseMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRManganeseMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRManganeseMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRManganeseMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRManganeseMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ManganeseMeasurementAttributeListListAttributeCallback>
{
public:
    MTRManganeseMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ManganeseMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRManganeseMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<ManganeseMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRManganeseMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRManganeseMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRManganeseMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRManganeseMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRManganeseMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRManganeseMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfateMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SulfateMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRSulfateMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfateMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfateMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<SulfateMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSulfateMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSulfateMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRSulfateMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfateMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfateMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfateMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfateMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SulfateMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRSulfateMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfateMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfateMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<SulfateMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSulfateMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSulfateMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRSulfateMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfateMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfateMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfateMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfateMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<SulfateMeasurementEventListListAttributeCallback>
{
public:
    MTRSulfateMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfateMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfateMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<SulfateMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRSulfateMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRSulfateMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRSulfateMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfateMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfateMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfateMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfateMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<SulfateMeasurementAttributeListListAttributeCallback>
{
public:
    MTRSulfateMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfateMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfateMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<SulfateMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRSulfateMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRSulfateMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRSulfateMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfateMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfateMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfateMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromodichloromethaneMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromodichloromethaneMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRBromodichloromethaneMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<BromodichloromethaneMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromodichloromethaneMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<BromodichloromethaneMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBromodichloromethaneMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBromodichloromethaneMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBromodichloromethaneMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromodichloromethaneMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromodichloromethaneMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromodichloromethaneMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromodichloromethaneMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromodichloromethaneMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRBromodichloromethaneMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<BromodichloromethaneMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromodichloromethaneMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<BromodichloromethaneMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBromodichloromethaneMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBromodichloromethaneMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBromodichloromethaneMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromodichloromethaneMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromodichloromethaneMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromodichloromethaneMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromodichloromethaneMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromodichloromethaneMeasurementEventListListAttributeCallback>
{
public:
    MTRBromodichloromethaneMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromodichloromethaneMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromodichloromethaneMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<BromodichloromethaneMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRBromodichloromethaneMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRBromodichloromethaneMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRBromodichloromethaneMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromodichloromethaneMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromodichloromethaneMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromodichloromethaneMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromodichloromethaneMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromodichloromethaneMeasurementAttributeListListAttributeCallback>
{
public:
    MTRBromodichloromethaneMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromodichloromethaneMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromodichloromethaneMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<BromodichloromethaneMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBromodichloromethaneMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRBromodichloromethaneMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRBromodichloromethaneMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromodichloromethaneMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromodichloromethaneMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromodichloromethaneMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromoformMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromoformMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRBromoformMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromoformMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromoformMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<BromoformMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBromoformMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBromoformMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRBromoformMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromoformMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromoformMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromoformMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromoformMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromoformMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRBromoformMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromoformMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromoformMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<BromoformMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRBromoformMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRBromoformMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRBromoformMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromoformMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromoformMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromoformMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromoformMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromoformMeasurementEventListListAttributeCallback>
{
public:
    MTRBromoformMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromoformMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromoformMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<BromoformMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRBromoformMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRBromoformMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRBromoformMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromoformMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromoformMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromoformMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromoformMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<BromoformMeasurementAttributeListListAttributeCallback>
{
public:
    MTRBromoformMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromoformMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromoformMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<BromoformMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRBromoformMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRBromoformMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRBromoformMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromoformMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromoformMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromoformMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorodibromomethaneMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorodibromomethaneMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorodibromomethaneMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorodibromomethaneMeasurementEventListListAttributeCallback>
{
public:
    MTRChlorodibromomethaneMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorodibromomethaneMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRChlorodibromomethaneMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRChlorodibromomethaneMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRChlorodibromomethaneMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorodibromomethaneMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorodibromomethaneMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorodibromomethaneMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorodibromomethaneMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorodibromomethaneMeasurementAttributeListListAttributeCallback>
{
public:
    MTRChlorodibromomethaneMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorodibromomethaneMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRChlorodibromomethaneMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRChlorodibromomethaneMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRChlorodibromomethaneMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorodibromomethaneMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorodibromomethaneMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorodibromomethaneMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloroformMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChloroformMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRChloroformMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloroformMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloroformMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<ChloroformMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChloroformMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChloroformMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRChloroformMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloroformMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloroformMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloroformMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloroformMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChloroformMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRChloroformMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloroformMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloroformMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<ChloroformMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChloroformMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChloroformMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRChloroformMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloroformMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloroformMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloroformMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloroformMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChloroformMeasurementEventListListAttributeCallback>
{
public:
    MTRChloroformMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloroformMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloroformMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<ChloroformMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRChloroformMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRChloroformMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRChloroformMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloroformMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloroformMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloroformMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloroformMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChloroformMeasurementAttributeListListAttributeCallback>
{
public:
    MTRChloroformMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloroformMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloroformMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<ChloroformMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRChloroformMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRChloroformMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRChloroformMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloroformMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloroformMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloroformMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSodiumMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SodiumMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRSodiumMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SodiumMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSodiumMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<SodiumMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSodiumMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSodiumMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRSodiumMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSodiumMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSodiumMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSodiumMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSodiumMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<SodiumMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRSodiumMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SodiumMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSodiumMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<SodiumMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRSodiumMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRSodiumMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRSodiumMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSodiumMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSodiumMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSodiumMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSodiumMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<SodiumMeasurementEventListListAttributeCallback>
{
public:
    MTRSodiumMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SodiumMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSodiumMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<SodiumMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRSodiumMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRSodiumMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRSodiumMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSodiumMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSodiumMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSodiumMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSodiumMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<SodiumMeasurementAttributeListListAttributeCallback>
{
public:
    MTRSodiumMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SodiumMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSodiumMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<SodiumMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRSodiumMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRSodiumMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRSodiumMeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSodiumMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSodiumMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSodiumMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM25MeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM25MeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRPM25MeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM25MeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM25MeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<PM25MeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPM25MeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPM25MeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRPM25MeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM25MeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM25MeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM25MeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM25MeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM25MeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRPM25MeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM25MeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM25MeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<PM25MeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPM25MeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPM25MeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRPM25MeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM25MeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM25MeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM25MeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM25MeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM25MeasurementEventListListAttributeCallback>
{
public:
    MTRPM25MeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM25MeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM25MeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<PM25MeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRPM25MeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRPM25MeasurementEventListListAttributeCallbackBridge
{
public:
    MTRPM25MeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM25MeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM25MeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM25MeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM25MeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM25MeasurementAttributeListListAttributeCallback>
{
public:
    MTRPM25MeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM25MeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM25MeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<PM25MeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRPM25MeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRPM25MeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRPM25MeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM25MeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM25MeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM25MeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFormaldehydeMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FormaldehydeMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRFormaldehydeMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FormaldehydeMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFormaldehydeMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<FormaldehydeMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFormaldehydeMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFormaldehydeMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRFormaldehydeMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFormaldehydeMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFormaldehydeMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFormaldehydeMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFormaldehydeMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<FormaldehydeMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRFormaldehydeMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FormaldehydeMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFormaldehydeMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<FormaldehydeMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRFormaldehydeMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRFormaldehydeMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRFormaldehydeMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFormaldehydeMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFormaldehydeMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFormaldehydeMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFormaldehydeMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<FormaldehydeMeasurementEventListListAttributeCallback>
{
public:
    MTRFormaldehydeMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FormaldehydeMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFormaldehydeMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<FormaldehydeMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRFormaldehydeMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRFormaldehydeMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRFormaldehydeMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFormaldehydeMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFormaldehydeMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFormaldehydeMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFormaldehydeMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<FormaldehydeMeasurementAttributeListListAttributeCallback>
{
public:
    MTRFormaldehydeMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FormaldehydeMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFormaldehydeMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<FormaldehydeMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRFormaldehydeMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRFormaldehydeMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRFormaldehydeMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFormaldehydeMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFormaldehydeMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFormaldehydeMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM1MeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM1MeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRPM1MeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM1MeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM1MeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<PM1MeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPM1MeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPM1MeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRPM1MeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM1MeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM1MeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM1MeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM1MeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM1MeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRPM1MeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM1MeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM1MeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<PM1MeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPM1MeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPM1MeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRPM1MeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM1MeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM1MeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM1MeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM1MeasurementEventListListAttributeCallbackBridge : public MTRCallbackBridge<PM1MeasurementEventListListAttributeCallback>
{
public:
    MTRPM1MeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM1MeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM1MeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<PM1MeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRPM1MeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRPM1MeasurementEventListListAttributeCallbackBridge
{
public:
    MTRPM1MeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM1MeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM1MeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM1MeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM1MeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM1MeasurementAttributeListListAttributeCallback>
{
public:
    MTRPM1MeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM1MeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM1MeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<PM1MeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRPM1MeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRPM1MeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRPM1MeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM1MeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM1MeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM1MeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM10MeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM10MeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRPM10MeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM10MeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM10MeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<PM10MeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPM10MeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPM10MeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRPM10MeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM10MeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM10MeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM10MeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM10MeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM10MeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRPM10MeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM10MeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM10MeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<PM10MeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRPM10MeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRPM10MeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRPM10MeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM10MeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM10MeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM10MeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM10MeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM10MeasurementEventListListAttributeCallback>
{
public:
    MTRPM10MeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM10MeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM10MeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<PM10MeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRPM10MeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRPM10MeasurementEventListListAttributeCallbackBridge
{
public:
    MTRPM10MeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM10MeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM10MeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM10MeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM10MeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<PM10MeasurementAttributeListListAttributeCallback>
{
public:
    MTRPM10MeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM10MeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM10MeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<PM10MeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRPM10MeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRPM10MeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRPM10MeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM10MeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM10MeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM10MeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                               ResponseHandler handler) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallback>(queue, handler,
                                                                                                             OnSuccessFn){};

    MTRTotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                               ResponseHandler handler,
                                                                                               MTRActionBlock action) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                             OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalVolatileOrganicCompoundsMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                              ResponseHandler handler) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallback>(queue, handler,
                                                                                                            OnSuccessFn){};

    MTRTotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                              ResponseHandler handler,
                                                                                              MTRActionBlock action) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action,
                                                                                                            OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalVolatileOrganicCompoundsMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallback>
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRTotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRTotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalVolatileOrganicCompoundsMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallback>
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRTotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRTotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRTotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalVolatileOrganicCompoundsMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRadonMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<RadonMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRRadonMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RadonMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRadonMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<RadonMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRRadonMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRRadonMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRRadonMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRadonMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRadonMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRadonMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRadonMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<RadonMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRRadonMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RadonMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRadonMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<RadonMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRRadonMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRRadonMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRRadonMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRadonMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRadonMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRadonMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRadonMeasurementEventListListAttributeCallbackBridge
    : public MTRCallbackBridge<RadonMeasurementEventListListAttributeCallback>
{
public:
    MTRRadonMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RadonMeasurementEventListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRadonMeasurementEventListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<RadonMeasurementEventListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EventId> & value);
};

class MTRRadonMeasurementEventListListAttributeCallbackSubscriptionBridge
    : public MTRRadonMeasurementEventListListAttributeCallbackBridge
{
public:
    MTRRadonMeasurementEventListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRadonMeasurementEventListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRadonMeasurementEventListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRadonMeasurementEventListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRadonMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<RadonMeasurementAttributeListListAttributeCallback>
{
public:
    MTRRadonMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RadonMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRadonMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<RadonMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRRadonMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRRadonMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRRadonMeasurementAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRadonMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRadonMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRadonMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWakeOnLANGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<WakeOnLANGeneratedCommandListListAttributeCallback>
{
public:
    MTRWakeOnLANGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WakeOnLANGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWakeOnLANGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<WakeOnLANGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRWakeOnLANGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRWakeOnLANGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRWakeOnLANGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWakeOnLANGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWakeOnLANGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWakeOnLANGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWakeOnLANAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<WakeOnLANAcceptedCommandListListAttributeCallback>
{
public:
    MTRWakeOnLANAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WakeOnLANAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWakeOnLANAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<WakeOnLANAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRWakeOnLANAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRWakeOnLANAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRWakeOnLANAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWakeOnLANAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWakeOnLANAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWakeOnLANAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWakeOnLANAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<WakeOnLANAttributeListListAttributeCallback>
{
public:
    MTRWakeOnLANAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WakeOnLANAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWakeOnLANAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<WakeOnLANAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRWakeOnLANAttributeListListAttributeCallbackSubscriptionBridge : public MTRWakeOnLANAttributeListListAttributeCallbackBridge
{
public:
    MTRWakeOnLANAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action,
                                                                     MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWakeOnLANAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWakeOnLANAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWakeOnLANAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChannelChannelListListAttributeCallbackBridge : public MTRCallbackBridge<ChannelChannelListListAttributeCallback>
{
public:
    MTRChannelChannelListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChannelChannelListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChannelChannelListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ChannelChannelListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::Channel::Structs::ChannelInfoStruct::DecodableType> & value);
};

class MTRChannelChannelListListAttributeCallbackSubscriptionBridge : public MTRChannelChannelListListAttributeCallbackBridge
{
public:
    MTRChannelChannelListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action,
                                                                 MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChannelChannelListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChannelChannelListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChannelChannelListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChannelLineupStructAttributeCallbackBridge : public MTRCallbackBridge<ChannelLineupStructAttributeCallback>
{
public:
    MTRChannelLineupStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChannelLineupStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChannelLineupStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ChannelLineupStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::Channel::Structs::LineupInfoStruct::DecodableType> & value);
};

class MTRChannelLineupStructAttributeCallbackSubscriptionBridge : public MTRChannelLineupStructAttributeCallbackBridge
{
public:
    MTRChannelLineupStructAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action,
                                                              MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChannelLineupStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChannelLineupStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChannelLineupStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChannelCurrentChannelStructAttributeCallbackBridge : public MTRCallbackBridge<ChannelCurrentChannelStructAttributeCallback>
{
public:
    MTRChannelCurrentChannelStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChannelCurrentChannelStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChannelCurrentChannelStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ChannelCurrentChannelStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::Channel::Structs::ChannelInfoStruct::DecodableType> & value);
};

class MTRChannelCurrentChannelStructAttributeCallbackSubscriptionBridge
    : public MTRChannelCurrentChannelStructAttributeCallbackBridge
{
public:
    MTRChannelCurrentChannelStructAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChannelCurrentChannelStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChannelCurrentChannelStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChannelCurrentChannelStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChannelGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChannelGeneratedCommandListListAttributeCallback>
{
public:
    MTRChannelGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChannelGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChannelGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<ChannelGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChannelGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChannelGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRChannelGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChannelGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChannelGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChannelGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChannelAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ChannelAcceptedCommandListListAttributeCallback>
{
public:
    MTRChannelAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChannelAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChannelAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<ChannelAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRChannelAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRChannelAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRChannelAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChannelAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChannelAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChannelAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChannelAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<ChannelAttributeListListAttributeCallback>
{
public:
    MTRChannelAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChannelAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChannelAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ChannelAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRChannelAttributeListListAttributeCallbackSubscriptionBridge : public MTRChannelAttributeListListAttributeCallbackBridge
{
public:
    MTRChannelAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action,
                                                                   MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChannelAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChannelAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChannelAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTargetNavigatorTargetListListAttributeCallbackBridge
    : public MTRCallbackBridge<TargetNavigatorTargetListListAttributeCallback>
{
public:
    MTRTargetNavigatorTargetListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TargetNavigatorTargetListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTargetNavigatorTargetListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<TargetNavigatorTargetListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::TargetNavigator::Structs::TargetInfoStruct::DecodableType> &
            value);
};

class MTRTargetNavigatorTargetListListAttributeCallbackSubscriptionBridge
    : public MTRTargetNavigatorTargetListListAttributeCallbackBridge
{
public:
    MTRTargetNavigatorTargetListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTargetNavigatorTargetListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTargetNavigatorTargetListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTargetNavigatorTargetListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTargetNavigatorGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TargetNavigatorGeneratedCommandListListAttributeCallback>
{
public:
    MTRTargetNavigatorGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TargetNavigatorGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTargetNavigatorGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<TargetNavigatorGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTargetNavigatorGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTargetNavigatorGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRTargetNavigatorGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTargetNavigatorGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTargetNavigatorGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTargetNavigatorGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTargetNavigatorAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<TargetNavigatorAcceptedCommandListListAttributeCallback>
{
public:
    MTRTargetNavigatorAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TargetNavigatorAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTargetNavigatorAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<TargetNavigatorAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRTargetNavigatorAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRTargetNavigatorAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRTargetNavigatorAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTargetNavigatorAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTargetNavigatorAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTargetNavigatorAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTargetNavigatorAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<TargetNavigatorAttributeListListAttributeCallback>
{
public:
    MTRTargetNavigatorAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TargetNavigatorAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTargetNavigatorAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<TargetNavigatorAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRTargetNavigatorAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRTargetNavigatorAttributeListListAttributeCallbackBridge
{
public:
    MTRTargetNavigatorAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTargetNavigatorAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTargetNavigatorAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTargetNavigatorAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaPlaybackSampledPositionStructAttributeCallbackBridge
    : public MTRCallbackBridge<MediaPlaybackSampledPositionStructAttributeCallback>
{
public:
    MTRMediaPlaybackSampledPositionStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaPlaybackSampledPositionStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaPlaybackSampledPositionStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<MediaPlaybackSampledPositionStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::MediaPlayback::Structs::PlaybackPositionStruct::DecodableType> &
            value);
};

class MTRMediaPlaybackSampledPositionStructAttributeCallbackSubscriptionBridge
    : public MTRMediaPlaybackSampledPositionStructAttributeCallbackBridge
{
public:
    MTRMediaPlaybackSampledPositionStructAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaPlaybackSampledPositionStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaPlaybackSampledPositionStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaPlaybackSampledPositionStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaPlaybackGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<MediaPlaybackGeneratedCommandListListAttributeCallback>
{
public:
    MTRMediaPlaybackGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaPlaybackGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaPlaybackGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<MediaPlaybackGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRMediaPlaybackGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRMediaPlaybackGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRMediaPlaybackGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaPlaybackGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaPlaybackGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaPlaybackGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaPlaybackAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<MediaPlaybackAcceptedCommandListListAttributeCallback>
{
public:
    MTRMediaPlaybackAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaPlaybackAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaPlaybackAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<MediaPlaybackAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRMediaPlaybackAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRMediaPlaybackAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRMediaPlaybackAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaPlaybackAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaPlaybackAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaPlaybackAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaPlaybackAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<MediaPlaybackAttributeListListAttributeCallback>
{
public:
    MTRMediaPlaybackAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaPlaybackAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaPlaybackAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<MediaPlaybackAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRMediaPlaybackAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRMediaPlaybackAttributeListListAttributeCallbackBridge
{
public:
    MTRMediaPlaybackAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaPlaybackAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaPlaybackAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaPlaybackAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaInputInputListListAttributeCallbackBridge : public MTRCallbackBridge<MediaInputInputListListAttributeCallback>
{
public:
    MTRMediaInputInputListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaInputInputListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaInputInputListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<MediaInputInputListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::MediaInput::Structs::InputInfoStruct::DecodableType> &
            value);
};

class MTRMediaInputInputListListAttributeCallbackSubscriptionBridge : public MTRMediaInputInputListListAttributeCallbackBridge
{
public:
    MTRMediaInputInputListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action,
                                                                  MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaInputInputListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaInputInputListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaInputInputListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaInputGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<MediaInputGeneratedCommandListListAttributeCallback>
{
public:
    MTRMediaInputGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaInputGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaInputGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<MediaInputGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRMediaInputGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRMediaInputGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRMediaInputGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaInputGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaInputGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaInputGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaInputAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<MediaInputAcceptedCommandListListAttributeCallback>
{
public:
    MTRMediaInputAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaInputAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaInputAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<MediaInputAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRMediaInputAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRMediaInputAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRMediaInputAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaInputAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaInputAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaInputAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaInputAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<MediaInputAttributeListListAttributeCallback>
{
public:
    MTRMediaInputAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaInputAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaInputAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<MediaInputAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRMediaInputAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRMediaInputAttributeListListAttributeCallbackBridge
{
public:
    MTRMediaInputAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaInputAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaInputAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaInputAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLowPowerGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<LowPowerGeneratedCommandListListAttributeCallback>
{
public:
    MTRLowPowerGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LowPowerGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLowPowerGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<LowPowerGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRLowPowerGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRLowPowerGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRLowPowerGeneratedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLowPowerGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLowPowerGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLowPowerGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLowPowerAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<LowPowerAcceptedCommandListListAttributeCallback>
{
public:
    MTRLowPowerAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LowPowerAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLowPowerAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<LowPowerAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRLowPowerAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRLowPowerAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRLowPowerAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLowPowerAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLowPowerAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLowPowerAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLowPowerAttributeListListAttributeCallbackBridge : public MTRCallbackBridge<LowPowerAttributeListListAttributeCallback>
{
public:
    MTRLowPowerAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LowPowerAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLowPowerAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<LowPowerAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRLowPowerAttributeListListAttributeCallbackSubscriptionBridge : public MTRLowPowerAttributeListListAttributeCallbackBridge
{
public:
    MTRLowPowerAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action,
                                                                    MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLowPowerAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLowPowerAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLowPowerAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRKeypadInputGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<KeypadInputGeneratedCommandListListAttributeCallback>
{
public:
    MTRKeypadInputGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<KeypadInputGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRKeypadInputGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<KeypadInputGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRKeypadInputGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRKeypadInputGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRKeypadInputGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRKeypadInputGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRKeypadInputGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRKeypadInputGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRKeypadInputAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<KeypadInputAcceptedCommandListListAttributeCallback>
{
public:
    MTRKeypadInputAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<KeypadInputAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRKeypadInputAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<KeypadInputAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRKeypadInputAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRKeypadInputAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRKeypadInputAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRKeypadInputAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRKeypadInputAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRKeypadInputAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRKeypadInputAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<KeypadInputAttributeListListAttributeCallback>
{
public:
    MTRKeypadInputAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<KeypadInputAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRKeypadInputAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<KeypadInputAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRKeypadInputAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRKeypadInputAttributeListListAttributeCallbackBridge
{
public:
    MTRKeypadInputAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRKeypadInputAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRKeypadInputAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRKeypadInputAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRContentLauncherAcceptHeaderListAttributeCallbackBridge
    : public MTRCallbackBridge<ContentLauncherAcceptHeaderListAttributeCallback>
{
public:
    MTRContentLauncherAcceptHeaderListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ContentLauncherAcceptHeaderListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRContentLauncherAcceptHeaderListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<ContentLauncherAcceptHeaderListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CharSpan> & value);
};

class MTRContentLauncherAcceptHeaderListAttributeCallbackSubscriptionBridge
    : public MTRContentLauncherAcceptHeaderListAttributeCallbackBridge
{
public:
    MTRContentLauncherAcceptHeaderListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRContentLauncherAcceptHeaderListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRContentLauncherAcceptHeaderListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRContentLauncherAcceptHeaderListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRContentLauncherGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ContentLauncherGeneratedCommandListListAttributeCallback>
{
public:
    MTRContentLauncherGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ContentLauncherGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRContentLauncherGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<ContentLauncherGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRContentLauncherGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRContentLauncherGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRContentLauncherGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRContentLauncherGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRContentLauncherGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRContentLauncherGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRContentLauncherAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ContentLauncherAcceptedCommandListListAttributeCallback>
{
public:
    MTRContentLauncherAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ContentLauncherAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRContentLauncherAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<ContentLauncherAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRContentLauncherAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRContentLauncherAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRContentLauncherAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRContentLauncherAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRContentLauncherAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRContentLauncherAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRContentLauncherAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ContentLauncherAttributeListListAttributeCallback>
{
public:
    MTRContentLauncherAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ContentLauncherAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRContentLauncherAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<ContentLauncherAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRContentLauncherAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRContentLauncherAttributeListListAttributeCallbackBridge
{
public:
    MTRContentLauncherAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRContentLauncherAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRContentLauncherAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRContentLauncherAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAudioOutputOutputListListAttributeCallbackBridge : public MTRCallbackBridge<AudioOutputOutputListListAttributeCallback>
{
public:
    MTRAudioOutputOutputListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AudioOutputOutputListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAudioOutputOutputListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<AudioOutputOutputListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::AudioOutput::Structs::OutputInfoStruct::DecodableType> &
            value);
};

class MTRAudioOutputOutputListListAttributeCallbackSubscriptionBridge : public MTRAudioOutputOutputListListAttributeCallbackBridge
{
public:
    MTRAudioOutputOutputListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action,
                                                                    MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAudioOutputOutputListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAudioOutputOutputListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAudioOutputOutputListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAudioOutputGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<AudioOutputGeneratedCommandListListAttributeCallback>
{
public:
    MTRAudioOutputGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AudioOutputGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAudioOutputGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<AudioOutputGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRAudioOutputGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRAudioOutputGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRAudioOutputGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAudioOutputGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAudioOutputGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAudioOutputGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAudioOutputAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<AudioOutputAcceptedCommandListListAttributeCallback>
{
public:
    MTRAudioOutputAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AudioOutputAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAudioOutputAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<AudioOutputAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRAudioOutputAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRAudioOutputAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRAudioOutputAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAudioOutputAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAudioOutputAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAudioOutputAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAudioOutputAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<AudioOutputAttributeListListAttributeCallback>
{
public:
    MTRAudioOutputAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AudioOutputAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAudioOutputAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<AudioOutputAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRAudioOutputAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRAudioOutputAttributeListListAttributeCallbackBridge
{
public:
    MTRAudioOutputAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAudioOutputAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAudioOutputAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAudioOutputAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationLauncherCatalogListListAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationLauncherCatalogListListAttributeCallback>
{
public:
    MTRApplicationLauncherCatalogListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationLauncherCatalogListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationLauncherCatalogListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<ApplicationLauncherCatalogListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<uint16_t> & value);
};

class MTRApplicationLauncherCatalogListListAttributeCallbackSubscriptionBridge
    : public MTRApplicationLauncherCatalogListListAttributeCallbackBridge
{
public:
    MTRApplicationLauncherCatalogListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationLauncherCatalogListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationLauncherCatalogListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationLauncherCatalogListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationLauncherCurrentAppStructAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationLauncherCurrentAppStructAttributeCallback>
{
public:
    MTRApplicationLauncherCurrentAppStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationLauncherCurrentAppStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationLauncherCurrentAppStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<ApplicationLauncherCurrentAppStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<
                                chip::app::Clusters::ApplicationLauncher::Structs::ApplicationEPStruct::DecodableType> & value);
};

class MTRApplicationLauncherCurrentAppStructAttributeCallbackSubscriptionBridge
    : public MTRApplicationLauncherCurrentAppStructAttributeCallbackBridge
{
public:
    MTRApplicationLauncherCurrentAppStructAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationLauncherCurrentAppStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationLauncherCurrentAppStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationLauncherCurrentAppStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationLauncherGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationLauncherGeneratedCommandListListAttributeCallback>
{
public:
    MTRApplicationLauncherGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationLauncherGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationLauncherGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<ApplicationLauncherGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRApplicationLauncherGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRApplicationLauncherGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRApplicationLauncherGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationLauncherGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationLauncherGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationLauncherGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationLauncherAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationLauncherAcceptedCommandListListAttributeCallback>
{
public:
    MTRApplicationLauncherAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationLauncherAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationLauncherAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<ApplicationLauncherAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRApplicationLauncherAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRApplicationLauncherAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRApplicationLauncherAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationLauncherAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationLauncherAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationLauncherAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationLauncherAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationLauncherAttributeListListAttributeCallback>
{
public:
    MTRApplicationLauncherAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationLauncherAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationLauncherAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<ApplicationLauncherAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRApplicationLauncherAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRApplicationLauncherAttributeListListAttributeCallbackBridge
{
public:
    MTRApplicationLauncherAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationLauncherAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationLauncherAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationLauncherAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationBasicApplicationStructAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationBasicApplicationStructAttributeCallback>
{
public:
    MTRApplicationBasicApplicationStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationBasicApplicationStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationBasicApplicationStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<ApplicationBasicApplicationStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::ApplicationBasic::Structs::ApplicationStruct::DecodableType & value);
};

class MTRApplicationBasicApplicationStructAttributeCallbackSubscriptionBridge
    : public MTRApplicationBasicApplicationStructAttributeCallbackBridge
{
public:
    MTRApplicationBasicApplicationStructAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationBasicApplicationStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationBasicApplicationStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationBasicApplicationStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationBasicAllowedVendorListListAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationBasicAllowedVendorListListAttributeCallback>
{
public:
    MTRApplicationBasicAllowedVendorListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationBasicAllowedVendorListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationBasicAllowedVendorListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<ApplicationBasicAllowedVendorListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::VendorId> & value);
};

class MTRApplicationBasicAllowedVendorListListAttributeCallbackSubscriptionBridge
    : public MTRApplicationBasicAllowedVendorListListAttributeCallbackBridge
{
public:
    MTRApplicationBasicAllowedVendorListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationBasicAllowedVendorListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationBasicAllowedVendorListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationBasicAllowedVendorListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationBasicGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationBasicGeneratedCommandListListAttributeCallback>
{
public:
    MTRApplicationBasicGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationBasicGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationBasicGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<ApplicationBasicGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRApplicationBasicGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRApplicationBasicGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRApplicationBasicGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationBasicGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationBasicGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationBasicGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationBasicAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationBasicAcceptedCommandListListAttributeCallback>
{
public:
    MTRApplicationBasicAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationBasicAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationBasicAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<ApplicationBasicAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRApplicationBasicAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRApplicationBasicAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRApplicationBasicAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationBasicAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationBasicAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationBasicAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationBasicAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationBasicAttributeListListAttributeCallback>
{
public:
    MTRApplicationBasicAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationBasicAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationBasicAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<ApplicationBasicAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRApplicationBasicAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRApplicationBasicAttributeListListAttributeCallbackBridge
{
public:
    MTRApplicationBasicAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationBasicAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationBasicAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationBasicAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccountLoginGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<AccountLoginGeneratedCommandListListAttributeCallback>
{
public:
    MTRAccountLoginGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccountLoginGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccountLoginGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<AccountLoginGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRAccountLoginGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRAccountLoginGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRAccountLoginGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccountLoginGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccountLoginGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccountLoginGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccountLoginAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<AccountLoginAcceptedCommandListListAttributeCallback>
{
public:
    MTRAccountLoginAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccountLoginAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccountLoginAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<AccountLoginAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRAccountLoginAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRAccountLoginAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRAccountLoginAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccountLoginAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccountLoginAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccountLoginAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccountLoginAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<AccountLoginAttributeListListAttributeCallback>
{
public:
    MTRAccountLoginAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccountLoginAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccountLoginAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<AccountLoginAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRAccountLoginAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRAccountLoginAttributeListListAttributeCallbackBridge
{
public:
    MTRAccountLoginAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccountLoginAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccountLoginAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccountLoginAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRElectricalMeasurementGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ElectricalMeasurementGeneratedCommandListListAttributeCallback>
{
public:
    MTRElectricalMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ElectricalMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRElectricalMeasurementGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<ElectricalMeasurementGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRElectricalMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRElectricalMeasurementGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRElectricalMeasurementGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRElectricalMeasurementGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRElectricalMeasurementGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRElectricalMeasurementGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRElectricalMeasurementAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<ElectricalMeasurementAcceptedCommandListListAttributeCallback>
{
public:
    MTRElectricalMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ElectricalMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRElectricalMeasurementAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<ElectricalMeasurementAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRElectricalMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRElectricalMeasurementAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRElectricalMeasurementAcceptedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRElectricalMeasurementAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRElectricalMeasurementAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRElectricalMeasurementAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRElectricalMeasurementAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<ElectricalMeasurementAttributeListListAttributeCallback>
{
public:
    MTRElectricalMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ElectricalMeasurementAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRElectricalMeasurementAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<ElectricalMeasurementAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRElectricalMeasurementAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRElectricalMeasurementAttributeListListAttributeCallbackBridge
{
public:
    MTRElectricalMeasurementAttributeListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRElectricalMeasurementAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRElectricalMeasurementAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRElectricalMeasurementAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingBitmap8AttributeCallbackBridge : public MTRCallbackBridge<UnitTestingBitmap8AttributeCallback>
{
public:
    MTRUnitTestingBitmap8AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingBitmap8AttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingBitmap8AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingBitmap8AttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap> value);
};

class MTRUnitTestingBitmap8AttributeCallbackSubscriptionBridge : public MTRUnitTestingBitmap8AttributeCallbackBridge
{
public:
    MTRUnitTestingBitmap8AttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingBitmap8AttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingBitmap8AttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingBitmap8AttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingBitmap16AttributeCallbackBridge : public MTRCallbackBridge<UnitTestingBitmap16AttributeCallback>
{
public:
    MTRUnitTestingBitmap16AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingBitmap16AttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingBitmap16AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingBitmap16AttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap> value);
};

class MTRUnitTestingBitmap16AttributeCallbackSubscriptionBridge : public MTRUnitTestingBitmap16AttributeCallbackBridge
{
public:
    MTRUnitTestingBitmap16AttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action,
                                                              MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingBitmap16AttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingBitmap16AttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingBitmap16AttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingBitmap32AttributeCallbackBridge : public MTRCallbackBridge<UnitTestingBitmap32AttributeCallback>
{
public:
    MTRUnitTestingBitmap32AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingBitmap32AttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingBitmap32AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingBitmap32AttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap> value);
};

class MTRUnitTestingBitmap32AttributeCallbackSubscriptionBridge : public MTRUnitTestingBitmap32AttributeCallbackBridge
{
public:
    MTRUnitTestingBitmap32AttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action,
                                                              MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingBitmap32AttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingBitmap32AttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingBitmap32AttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingBitmap64AttributeCallbackBridge : public MTRCallbackBridge<UnitTestingBitmap64AttributeCallback>
{
public:
    MTRUnitTestingBitmap64AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingBitmap64AttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingBitmap64AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingBitmap64AttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap> value);
};

class MTRUnitTestingBitmap64AttributeCallbackSubscriptionBridge : public MTRUnitTestingBitmap64AttributeCallbackBridge
{
public:
    MTRUnitTestingBitmap64AttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action,
                                                              MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingBitmap64AttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingBitmap64AttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingBitmap64AttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingListInt8uListAttributeCallbackBridge : public MTRCallbackBridge<UnitTestingListInt8uListAttributeCallback>
{
public:
    MTRUnitTestingListInt8uListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingListInt8uListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingListInt8uListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingListInt8uListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<uint8_t> & value);
};

class MTRUnitTestingListInt8uListAttributeCallbackSubscriptionBridge : public MTRUnitTestingListInt8uListAttributeCallbackBridge
{
public:
    MTRUnitTestingListInt8uListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action,
                                                                   MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingListInt8uListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingListInt8uListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingListInt8uListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingListOctetStringListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingListOctetStringListAttributeCallback>
{
public:
    MTRUnitTestingListOctetStringListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingListOctetStringListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingListOctetStringListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingListOctetStringListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & value);
};

class MTRUnitTestingListOctetStringListAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingListOctetStringListAttributeCallbackBridge
{
public:
    MTRUnitTestingListOctetStringListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingListOctetStringListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingListOctetStringListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingListOctetStringListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingListStructOctetStringListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingListStructOctetStringListAttributeCallback>
{
public:
    MTRUnitTestingListStructOctetStringListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingListStructOctetStringListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingListStructOctetStringListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingListStructOctetStringListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::UnitTesting::Structs::TestListStructOctet::DecodableType> &
            value);
};

class MTRUnitTestingListStructOctetStringListAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingListStructOctetStringListAttributeCallbackBridge
{
public:
    MTRUnitTestingListStructOctetStringListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingListStructOctetStringListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingListStructOctetStringListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingListStructOctetStringListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingListNullablesAndOptionalsStructListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingListNullablesAndOptionalsStructListAttributeCallback>
{
public:
    MTRUnitTestingListNullablesAndOptionalsStructListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingListNullablesAndOptionalsStructListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingListNullablesAndOptionalsStructListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingListNullablesAndOptionalsStructListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::UnitTesting::Structs::NullablesAndOptionalsStruct::DecodableType> & value);
};

class MTRUnitTestingListNullablesAndOptionalsStructListAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingListNullablesAndOptionalsStructListAttributeCallbackBridge
{
public:
    MTRUnitTestingListNullablesAndOptionalsStructListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingListNullablesAndOptionalsStructListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingListNullablesAndOptionalsStructListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingListNullablesAndOptionalsStructListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingStructAttrStructAttributeCallbackBridge : public MTRCallbackBridge<UnitTestingStructAttrStructAttributeCallback>
{
public:
    MTRUnitTestingStructAttrStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingStructAttrStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingStructAttrStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingStructAttrStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::UnitTesting::Structs::SimpleStruct::DecodableType & value);
};

class MTRUnitTestingStructAttrStructAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingStructAttrStructAttributeCallbackBridge
{
public:
    MTRUnitTestingStructAttrStructAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingStructAttrStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingStructAttrStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingStructAttrStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingListLongOctetStringListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingListLongOctetStringListAttributeCallback>
{
public:
    MTRUnitTestingListLongOctetStringListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingListLongOctetStringListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingListLongOctetStringListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingListLongOctetStringListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & value);
};

class MTRUnitTestingListLongOctetStringListAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingListLongOctetStringListAttributeCallbackBridge
{
public:
    MTRUnitTestingListLongOctetStringListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingListLongOctetStringListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingListLongOctetStringListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingListLongOctetStringListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingListFabricScopedListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingListFabricScopedListAttributeCallback>
{
public:
    MTRUnitTestingListFabricScopedListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingListFabricScopedListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingListFabricScopedListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingListFabricScopedListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::UnitTesting::Structs::TestFabricScoped::DecodableType> &
            value);
};

class MTRUnitTestingListFabricScopedListAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingListFabricScopedListAttributeCallbackBridge
{
public:
    MTRUnitTestingListFabricScopedListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingListFabricScopedListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingListFabricScopedListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingListFabricScopedListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingNullableBitmap8AttributeCallbackBridge : public MTRCallbackBridge<UnitTestingNullableBitmap8AttributeCallback>
{
public:
    MTRUnitTestingNullableBitmap8AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingNullableBitmap8AttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingNullableBitmap8AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingNullableBitmap8AttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap8MaskMap>> & value);
};

class MTRUnitTestingNullableBitmap8AttributeCallbackSubscriptionBridge : public MTRUnitTestingNullableBitmap8AttributeCallbackBridge
{
public:
    MTRUnitTestingNullableBitmap8AttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action,
                                                                     MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingNullableBitmap8AttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingNullableBitmap8AttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingNullableBitmap8AttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingNullableBitmap16AttributeCallbackBridge : public MTRCallbackBridge<UnitTestingNullableBitmap16AttributeCallback>
{
public:
    MTRUnitTestingNullableBitmap16AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingNullableBitmap16AttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingNullableBitmap16AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingNullableBitmap16AttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap16MaskMap>> & value);
};

class MTRUnitTestingNullableBitmap16AttributeCallbackSubscriptionBridge
    : public MTRUnitTestingNullableBitmap16AttributeCallbackBridge
{
public:
    MTRUnitTestingNullableBitmap16AttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingNullableBitmap16AttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingNullableBitmap16AttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingNullableBitmap16AttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingNullableBitmap32AttributeCallbackBridge : public MTRCallbackBridge<UnitTestingNullableBitmap32AttributeCallback>
{
public:
    MTRUnitTestingNullableBitmap32AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingNullableBitmap32AttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingNullableBitmap32AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingNullableBitmap32AttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap32MaskMap>> & value);
};

class MTRUnitTestingNullableBitmap32AttributeCallbackSubscriptionBridge
    : public MTRUnitTestingNullableBitmap32AttributeCallbackBridge
{
public:
    MTRUnitTestingNullableBitmap32AttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingNullableBitmap32AttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingNullableBitmap32AttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingNullableBitmap32AttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingNullableBitmap64AttributeCallbackBridge : public MTRCallbackBridge<UnitTestingNullableBitmap64AttributeCallback>
{
public:
    MTRUnitTestingNullableBitmap64AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingNullableBitmap64AttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingNullableBitmap64AttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingNullableBitmap64AttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::UnitTesting::Bitmap64MaskMap>> & value);
};

class MTRUnitTestingNullableBitmap64AttributeCallbackSubscriptionBridge
    : public MTRUnitTestingNullableBitmap64AttributeCallbackBridge
{
public:
    MTRUnitTestingNullableBitmap64AttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingNullableBitmap64AttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingNullableBitmap64AttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingNullableBitmap64AttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingNullableStructStructAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingNullableStructStructAttributeCallback>
{
public:
    MTRUnitTestingNullableStructStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingNullableStructStructAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingNullableStructStructAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingNullableStructStructAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::UnitTesting::Structs::SimpleStruct::DecodableType> & value);
};

class MTRUnitTestingNullableStructStructAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingNullableStructStructAttributeCallbackBridge
{
public:
    MTRUnitTestingNullableStructStructAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingNullableStructStructAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingNullableStructStructAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingNullableStructStructAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingGeneratedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingGeneratedCommandListListAttributeCallback>
{
public:
    MTRUnitTestingGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingGeneratedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingGeneratedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingGeneratedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRUnitTestingGeneratedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingGeneratedCommandListListAttributeCallbackBridge
{
public:
    MTRUnitTestingGeneratedCommandListListAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingGeneratedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingGeneratedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingGeneratedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingAcceptedCommandListListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingAcceptedCommandListListAttributeCallback>
{
public:
    MTRUnitTestingAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingAcceptedCommandListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingAcceptedCommandListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingAcceptedCommandListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::CommandId> & value);
};

class MTRUnitTestingAcceptedCommandListListAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingAcceptedCommandListListAttributeCallbackBridge
{
public:
    MTRUnitTestingAcceptedCommandListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingAcceptedCommandListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingAcceptedCommandListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingAcceptedCommandListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingAttributeListListAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingAttributeListListAttributeCallback>
{
public:
    MTRUnitTestingAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingAttributeListListAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingAttributeListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingAttributeListListAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::AttributeId> & value);
};

class MTRUnitTestingAttributeListListAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingAttributeListListAttributeCallbackBridge
{
public:
    MTRUnitTestingAttributeListListAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingAttributeListListAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingAttributeListListAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingAttributeListListAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupsClusterAddGroupResponseCallbackBridge : public MTRCallbackBridge<GroupsClusterAddGroupResponseCallbackType>
{
public:
    MTRGroupsClusterAddGroupResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupsClusterAddGroupResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRGroupsClusterAddGroupResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<GroupsClusterAddGroupResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::Groups::Commands::AddGroupResponse::DecodableType & data);
};

class MTRGroupsClusterViewGroupResponseCallbackBridge : public MTRCallbackBridge<GroupsClusterViewGroupResponseCallbackType>
{
public:
    MTRGroupsClusterViewGroupResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupsClusterViewGroupResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRGroupsClusterViewGroupResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<GroupsClusterViewGroupResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::Groups::Commands::ViewGroupResponse::DecodableType & data);
};

class MTRGroupsClusterGetGroupMembershipResponseCallbackBridge
    : public MTRCallbackBridge<GroupsClusterGetGroupMembershipResponseCallbackType>
{
public:
    MTRGroupsClusterGetGroupMembershipResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupsClusterGetGroupMembershipResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRGroupsClusterGetGroupMembershipResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<GroupsClusterGetGroupMembershipResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::Groups::Commands::GetGroupMembershipResponse::DecodableType & data);
};

class MTRGroupsClusterRemoveGroupResponseCallbackBridge : public MTRCallbackBridge<GroupsClusterRemoveGroupResponseCallbackType>
{
public:
    MTRGroupsClusterRemoveGroupResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupsClusterRemoveGroupResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRGroupsClusterRemoveGroupResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<GroupsClusterRemoveGroupResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::Groups::Commands::RemoveGroupResponse::DecodableType & data);
};

class MTRScenesClusterAddSceneResponseCallbackBridge : public MTRCallbackBridge<ScenesClusterAddSceneResponseCallbackType>
{
public:
    MTRScenesClusterAddSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesClusterAddSceneResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRScenesClusterAddSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ScenesClusterAddSceneResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::Scenes::Commands::AddSceneResponse::DecodableType & data);
};

class MTRScenesClusterViewSceneResponseCallbackBridge : public MTRCallbackBridge<ScenesClusterViewSceneResponseCallbackType>
{
public:
    MTRScenesClusterViewSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesClusterViewSceneResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRScenesClusterViewSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ScenesClusterViewSceneResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::Scenes::Commands::ViewSceneResponse::DecodableType & data);
};

class MTRScenesClusterRemoveSceneResponseCallbackBridge : public MTRCallbackBridge<ScenesClusterRemoveSceneResponseCallbackType>
{
public:
    MTRScenesClusterRemoveSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesClusterRemoveSceneResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRScenesClusterRemoveSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ScenesClusterRemoveSceneResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::Scenes::Commands::RemoveSceneResponse::DecodableType & data);
};

class MTRScenesClusterRemoveAllScenesResponseCallbackBridge
    : public MTRCallbackBridge<ScenesClusterRemoveAllScenesResponseCallbackType>
{
public:
    MTRScenesClusterRemoveAllScenesResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesClusterRemoveAllScenesResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRScenesClusterRemoveAllScenesResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ScenesClusterRemoveAllScenesResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::Scenes::Commands::RemoveAllScenesResponse::DecodableType & data);
};

class MTRScenesClusterStoreSceneResponseCallbackBridge : public MTRCallbackBridge<ScenesClusterStoreSceneResponseCallbackType>
{
public:
    MTRScenesClusterStoreSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesClusterStoreSceneResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRScenesClusterStoreSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ScenesClusterStoreSceneResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::Scenes::Commands::StoreSceneResponse::DecodableType & data);
};

class MTRScenesClusterGetSceneMembershipResponseCallbackBridge
    : public MTRCallbackBridge<ScenesClusterGetSceneMembershipResponseCallbackType>
{
public:
    MTRScenesClusterGetSceneMembershipResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesClusterGetSceneMembershipResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRScenesClusterGetSceneMembershipResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<ScenesClusterGetSceneMembershipResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::Scenes::Commands::GetSceneMembershipResponse::DecodableType & data);
};

class MTRScenesClusterEnhancedAddSceneResponseCallbackBridge
    : public MTRCallbackBridge<ScenesClusterEnhancedAddSceneResponseCallbackType>
{
public:
    MTRScenesClusterEnhancedAddSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesClusterEnhancedAddSceneResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRScenesClusterEnhancedAddSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ScenesClusterEnhancedAddSceneResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::Scenes::Commands::EnhancedAddSceneResponse::DecodableType & data);
};

class MTRScenesClusterEnhancedViewSceneResponseCallbackBridge
    : public MTRCallbackBridge<ScenesClusterEnhancedViewSceneResponseCallbackType>
{
public:
    MTRScenesClusterEnhancedViewSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesClusterEnhancedViewSceneResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRScenesClusterEnhancedViewSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<ScenesClusterEnhancedViewSceneResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::Scenes::Commands::EnhancedViewSceneResponse::DecodableType & data);
};

class MTRScenesClusterCopySceneResponseCallbackBridge : public MTRCallbackBridge<ScenesClusterCopySceneResponseCallbackType>
{
public:
    MTRScenesClusterCopySceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ScenesClusterCopySceneResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRScenesClusterCopySceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ScenesClusterCopySceneResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::Scenes::Commands::CopySceneResponse::DecodableType & data);
};

class MTROTASoftwareUpdateProviderClusterQueryImageResponseCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateProviderClusterQueryImageResponseCallbackType>
{
public:
    MTROTASoftwareUpdateProviderClusterQueryImageResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterQueryImageResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateProviderClusterQueryImageResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterQueryImageResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImageResponse::DecodableType & data);
};

class MTROTASoftwareUpdateProviderClusterApplyUpdateResponseCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateProviderClusterApplyUpdateResponseCallbackType>
{
public:
    MTROTASoftwareUpdateProviderClusterApplyUpdateResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterApplyUpdateResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateProviderClusterApplyUpdateResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterApplyUpdateResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateResponse::DecodableType & data);
};

class MTRGeneralCommissioningClusterArmFailSafeResponseCallbackBridge
    : public MTRCallbackBridge<GeneralCommissioningClusterArmFailSafeResponseCallbackType>
{
public:
    MTRGeneralCommissioningClusterArmFailSafeResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralCommissioningClusterArmFailSafeResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRGeneralCommissioningClusterArmFailSafeResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<GeneralCommissioningClusterArmFailSafeResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafeResponse::DecodableType & data);
};

class MTRGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge
    : public MTRCallbackBridge<GeneralCommissioningClusterSetRegulatoryConfigResponseCallbackType>
{
public:
    MTRGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralCommissioningClusterSetRegulatoryConfigResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<GeneralCommissioningClusterSetRegulatoryConfigResponseCallbackType>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfigResponse::DecodableType & data);
};

class MTRGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge
    : public MTRCallbackBridge<GeneralCommissioningClusterCommissioningCompleteResponseCallbackType>
{
public:
    MTRGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralCommissioningClusterCommissioningCompleteResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<GeneralCommissioningClusterCommissioningCompleteResponseCallbackType>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::GeneralCommissioning::Commands::CommissioningCompleteResponse::DecodableType & data);
};

class MTRNetworkCommissioningClusterScanNetworksResponseCallbackBridge
    : public MTRCallbackBridge<NetworkCommissioningClusterScanNetworksResponseCallbackType>
{
public:
    MTRNetworkCommissioningClusterScanNetworksResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NetworkCommissioningClusterScanNetworksResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRNetworkCommissioningClusterScanNetworksResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NetworkCommissioningClusterScanNetworksResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworksResponse::DecodableType & data);
};

class MTRNetworkCommissioningClusterNetworkConfigResponseCallbackBridge
    : public MTRCallbackBridge<NetworkCommissioningClusterNetworkConfigResponseCallbackType>
{
public:
    MTRNetworkCommissioningClusterNetworkConfigResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NetworkCommissioningClusterNetworkConfigResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRNetworkCommissioningClusterNetworkConfigResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NetworkCommissioningClusterNetworkConfigResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::NetworkCommissioning::Commands::NetworkConfigResponse::DecodableType & data);
};

class MTRNetworkCommissioningClusterConnectNetworkResponseCallbackBridge
    : public MTRCallbackBridge<NetworkCommissioningClusterConnectNetworkResponseCallbackType>
{
public:
    MTRNetworkCommissioningClusterConnectNetworkResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NetworkCommissioningClusterConnectNetworkResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRNetworkCommissioningClusterConnectNetworkResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NetworkCommissioningClusterConnectNetworkResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::NetworkCommissioning::Commands::ConnectNetworkResponse::DecodableType & data);
};

class MTRDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge
    : public MTRCallbackBridge<DiagnosticLogsClusterRetrieveLogsResponseCallbackType>
{
public:
    MTRDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DiagnosticLogsClusterRetrieveLogsResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<DiagnosticLogsClusterRetrieveLogsResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsResponse::DecodableType & data);
};

class MTROperationalCredentialsClusterAttestationResponseCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsClusterAttestationResponseCallbackType>
{
public:
    MTROperationalCredentialsClusterAttestationResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsClusterAttestationResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsClusterAttestationResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsClusterAttestationResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::OperationalCredentials::Commands::AttestationResponse::DecodableType & data);
};

class MTROperationalCredentialsClusterCertificateChainResponseCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsClusterCertificateChainResponseCallbackType>
{
public:
    MTROperationalCredentialsClusterCertificateChainResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsClusterCertificateChainResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsClusterCertificateChainResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsClusterCertificateChainResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::OperationalCredentials::Commands::CertificateChainResponse::DecodableType & data);
};

class MTROperationalCredentialsClusterCSRResponseCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsClusterCSRResponseCallbackType>
{
public:
    MTROperationalCredentialsClusterCSRResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsClusterCSRResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsClusterCSRResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsClusterCSRResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::OperationalCredentials::Commands::CSRResponse::DecodableType & data);
};

class MTROperationalCredentialsClusterNOCResponseCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsClusterNOCResponseCallbackType>
{
public:
    MTROperationalCredentialsClusterNOCResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsClusterNOCResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsClusterNOCResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsClusterNOCResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::OperationalCredentials::Commands::NOCResponse::DecodableType & data);
};

class MTRGroupKeyManagementClusterKeySetReadResponseCallbackBridge
    : public MTRCallbackBridge<GroupKeyManagementClusterKeySetReadResponseCallbackType>
{
public:
    MTRGroupKeyManagementClusterKeySetReadResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupKeyManagementClusterKeySetReadResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRGroupKeyManagementClusterKeySetReadResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<GroupKeyManagementClusterKeySetReadResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::GroupKeyManagement::Commands::KeySetReadResponse::DecodableType & data);
};

class MTRGroupKeyManagementClusterKeySetReadAllIndicesResponseCallbackBridge
    : public MTRCallbackBridge<GroupKeyManagementClusterKeySetReadAllIndicesResponseCallbackType>
{
public:
    MTRGroupKeyManagementClusterKeySetReadAllIndicesResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupKeyManagementClusterKeySetReadAllIndicesResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRGroupKeyManagementClusterKeySetReadAllIndicesResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<GroupKeyManagementClusterKeySetReadAllIndicesResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::GroupKeyManagement::Commands::KeySetReadAllIndicesResponse::DecodableType & data);
};

class MTRDoorLockClusterGetWeekDayScheduleResponseCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterGetWeekDayScheduleResponseCallbackType>
{
public:
    MTRDoorLockClusterGetWeekDayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterGetWeekDayScheduleResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterGetWeekDayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterGetWeekDayScheduleResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::DoorLock::Commands::GetWeekDayScheduleResponse::DecodableType & data);
};

class MTRDoorLockClusterGetYearDayScheduleResponseCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterGetYearDayScheduleResponseCallbackType>
{
public:
    MTRDoorLockClusterGetYearDayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterGetYearDayScheduleResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterGetYearDayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterGetYearDayScheduleResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::DoorLock::Commands::GetYearDayScheduleResponse::DecodableType & data);
};

class MTRDoorLockClusterGetHolidayScheduleResponseCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterGetHolidayScheduleResponseCallbackType>
{
public:
    MTRDoorLockClusterGetHolidayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterGetHolidayScheduleResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterGetHolidayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterGetHolidayScheduleResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::DoorLock::Commands::GetHolidayScheduleResponse::DecodableType & data);
};

class MTRDoorLockClusterGetUserResponseCallbackBridge : public MTRCallbackBridge<DoorLockClusterGetUserResponseCallbackType>
{
public:
    MTRDoorLockClusterGetUserResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterGetUserResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterGetUserResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterGetUserResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::Clusters::DoorLock::Commands::GetUserResponse::DecodableType & data);
};

class MTRDoorLockClusterSetCredentialResponseCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterSetCredentialResponseCallbackType>
{
public:
    MTRDoorLockClusterSetCredentialResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterSetCredentialResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterSetCredentialResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterSetCredentialResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::DoorLock::Commands::SetCredentialResponse::DecodableType & data);
};

class MTRDoorLockClusterGetCredentialStatusResponseCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterGetCredentialStatusResponseCallbackType>
{
public:
    MTRDoorLockClusterGetCredentialStatusResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterGetCredentialStatusResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterGetCredentialStatusResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterGetCredentialStatusResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::DoorLock::Commands::GetCredentialStatusResponse::DecodableType & data);
};

class MTRThermostatClusterGetWeeklyScheduleResponseCallbackBridge
    : public MTRCallbackBridge<ThermostatClusterGetWeeklyScheduleResponseCallbackType>
{
public:
    MTRThermostatClusterGetWeeklyScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThermostatClusterGetWeeklyScheduleResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRThermostatClusterGetWeeklyScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<ThermostatClusterGetWeeklyScheduleResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::Thermostat::Commands::GetWeeklyScheduleResponse::DecodableType & data);
};

class MTRChannelClusterChangeChannelResponseCallbackBridge
    : public MTRCallbackBridge<ChannelClusterChangeChannelResponseCallbackType>
{
public:
    MTRChannelClusterChangeChannelResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChannelClusterChangeChannelResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRChannelClusterChangeChannelResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ChannelClusterChangeChannelResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::Channel::Commands::ChangeChannelResponse::DecodableType & data);
};

class MTRTargetNavigatorClusterNavigateTargetResponseCallbackBridge
    : public MTRCallbackBridge<TargetNavigatorClusterNavigateTargetResponseCallbackType>
{
public:
    MTRTargetNavigatorClusterNavigateTargetResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TargetNavigatorClusterNavigateTargetResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRTargetNavigatorClusterNavigateTargetResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<TargetNavigatorClusterNavigateTargetResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::TargetNavigator::Commands::NavigateTargetResponse::DecodableType & data);
};

class MTRMediaPlaybackClusterPlaybackResponseCallbackBridge
    : public MTRCallbackBridge<MediaPlaybackClusterPlaybackResponseCallbackType>
{
public:
    MTRMediaPlaybackClusterPlaybackResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaPlaybackClusterPlaybackResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRMediaPlaybackClusterPlaybackResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<MediaPlaybackClusterPlaybackResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::MediaPlayback::Commands::PlaybackResponse::DecodableType & data);
};

class MTRKeypadInputClusterSendKeyResponseCallbackBridge : public MTRCallbackBridge<KeypadInputClusterSendKeyResponseCallbackType>
{
public:
    MTRKeypadInputClusterSendKeyResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<KeypadInputClusterSendKeyResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRKeypadInputClusterSendKeyResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<KeypadInputClusterSendKeyResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::KeypadInput::Commands::SendKeyResponse::DecodableType & data);
};

class MTRContentLauncherClusterLauncherResponseCallbackBridge
    : public MTRCallbackBridge<ContentLauncherClusterLauncherResponseCallbackType>
{
public:
    MTRContentLauncherClusterLauncherResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ContentLauncherClusterLauncherResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRContentLauncherClusterLauncherResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<ContentLauncherClusterLauncherResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::ContentLauncher::Commands::LauncherResponse::DecodableType & data);
};

class MTRApplicationLauncherClusterLauncherResponseCallbackBridge
    : public MTRCallbackBridge<ApplicationLauncherClusterLauncherResponseCallbackType>
{
public:
    MTRApplicationLauncherClusterLauncherResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationLauncherClusterLauncherResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRApplicationLauncherClusterLauncherResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<ApplicationLauncherClusterLauncherResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::ApplicationLauncher::Commands::LauncherResponse::DecodableType & data);
};

class MTRAccountLoginClusterGetSetupPINResponseCallbackBridge
    : public MTRCallbackBridge<AccountLoginClusterGetSetupPINResponseCallbackType>
{
public:
    MTRAccountLoginClusterGetSetupPINResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccountLoginClusterGetSetupPINResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRAccountLoginClusterGetSetupPINResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<AccountLoginClusterGetSetupPINResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::AccountLogin::Commands::GetSetupPINResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestSpecificResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestSpecificResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestSpecificResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestSpecificResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestSpecificResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestSpecificResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::UnitTesting::Commands::TestSpecificResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestAddArgumentsResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestAddArgumentsResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestAddArgumentsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestAddArgumentsResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestAddArgumentsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestAddArgumentsResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::UnitTesting::Commands::TestAddArgumentsResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestSimpleArgumentResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestSimpleArgumentResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestSimpleArgumentResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestSimpleArgumentResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestSimpleArgumentResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestSimpleArgumentResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::UnitTesting::Commands::TestSimpleArgumentResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestStructArrayArgumentResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestStructArrayArgumentResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestStructArrayArgumentResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestStructArrayArgumentResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestStructArrayArgumentResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestStructArrayArgumentResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::UnitTesting::Commands::TestStructArrayArgumentResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestListInt8UReverseResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestListInt8UReverseResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestListInt8UReverseResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestListInt8UReverseResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestListInt8UReverseResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestListInt8UReverseResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::UnitTesting::Commands::TestListInt8UReverseResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestEnumsResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestEnumsResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestEnumsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestEnumsResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestEnumsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestEnumsResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::UnitTesting::Commands::TestEnumsResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestNullableOptionalResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestNullableOptionalResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestNullableOptionalResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestNullableOptionalResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestNullableOptionalResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestNullableOptionalResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::UnitTesting::Commands::TestNullableOptionalResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestComplexNullableOptionalResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestComplexNullableOptionalResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestComplexNullableOptionalResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestComplexNullableOptionalResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestComplexNullableOptionalResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestComplexNullableOptionalResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::UnitTesting::Commands::TestComplexNullableOptionalResponse::DecodableType & data);
};

class MTRUnitTestingClusterBooleanResponseCallbackBridge : public MTRCallbackBridge<UnitTestingClusterBooleanResponseCallbackType>
{
public:
    MTRUnitTestingClusterBooleanResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterBooleanResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterBooleanResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterBooleanResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::UnitTesting::Commands::BooleanResponse::DecodableType & data);
};

class MTRUnitTestingClusterSimpleStructResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterSimpleStructResponseCallbackType>
{
public:
    MTRUnitTestingClusterSimpleStructResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterSimpleStructResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterSimpleStructResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterSimpleStructResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::UnitTesting::Commands::SimpleStructResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestEmitTestEventResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestEmitTestEventResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestEmitTestEventResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestEmitTestEventResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestEmitTestEventResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestEmitTestEventResponseCallbackType>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::Clusters::UnitTesting::Commands::TestEmitTestEventResponse::DecodableType & data);
};

class MTRUnitTestingClusterTestEmitTestFabricScopedEventResponseCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterTestEmitTestFabricScopedEventResponseCallbackType>
{
public:
    MTRUnitTestingClusterTestEmitTestFabricScopedEventResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterTestEmitTestFabricScopedEventResponseCallbackType>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterTestEmitTestFabricScopedEventResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterTestEmitTestFabricScopedEventResponseCallbackType>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::Clusters::UnitTesting::Commands::TestEmitTestFabricScopedEventResponse::DecodableType & data);
};

class MTRIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge
    : public MTRCallbackBridge<IdentifyClusterIdentifyEffectIdentifierAttributeCallback>
{
public:
    MTRIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IdentifyClusterIdentifyEffectIdentifierAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<IdentifyClusterIdentifyEffectIdentifierAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Identify::IdentifyEffectIdentifier value);
};

class MTRIdentifyClusterIdentifyEffectIdentifierAttributeCallbackSubscriptionBridge
    : public MTRIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge
{
public:
    MTRIdentifyClusterIdentifyEffectIdentifierAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge
    : public MTRCallbackBridge<NullableIdentifyClusterIdentifyEffectIdentifierAttributeCallback>
{
public:
    MTRNullableIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableIdentifyClusterIdentifyEffectIdentifierAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableIdentifyClusterIdentifyEffectIdentifierAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Identify::IdentifyEffectIdentifier> & value);
};

class MTRNullableIdentifyClusterIdentifyEffectIdentifierAttributeCallbackSubscriptionBridge
    : public MTRNullableIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge
{
public:
    MTRNullableIdentifyClusterIdentifyEffectIdentifierAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableIdentifyClusterIdentifyEffectIdentifierAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge
    : public MTRCallbackBridge<IdentifyClusterIdentifyEffectVariantAttributeCallback>
{
public:
    MTRIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IdentifyClusterIdentifyEffectVariantAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<IdentifyClusterIdentifyEffectVariantAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Identify::IdentifyEffectVariant value);
};

class MTRIdentifyClusterIdentifyEffectVariantAttributeCallbackSubscriptionBridge
    : public MTRIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge
{
public:
    MTRIdentifyClusterIdentifyEffectVariantAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge
    : public MTRCallbackBridge<NullableIdentifyClusterIdentifyEffectVariantAttributeCallback>
{
public:
    MTRNullableIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableIdentifyClusterIdentifyEffectVariantAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableIdentifyClusterIdentifyEffectVariantAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Identify::IdentifyEffectVariant> & value);
};

class MTRNullableIdentifyClusterIdentifyEffectVariantAttributeCallbackSubscriptionBridge
    : public MTRNullableIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge
{
public:
    MTRNullableIdentifyClusterIdentifyEffectVariantAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableIdentifyClusterIdentifyEffectVariantAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge
    : public MTRCallbackBridge<IdentifyClusterIdentifyIdentifyTypeAttributeCallback>
{
public:
    MTRIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IdentifyClusterIdentifyIdentifyTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<IdentifyClusterIdentifyIdentifyTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Identify::IdentifyIdentifyType value);
};

class MTRIdentifyClusterIdentifyIdentifyTypeAttributeCallbackSubscriptionBridge
    : public MTRIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge
{
public:
    MTRIdentifyClusterIdentifyIdentifyTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableIdentifyClusterIdentifyIdentifyTypeAttributeCallback>
{
public:
    MTRNullableIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableIdentifyClusterIdentifyIdentifyTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableIdentifyClusterIdentifyIdentifyTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Identify::IdentifyIdentifyType> & value);
};

class MTRNullableIdentifyClusterIdentifyIdentifyTypeAttributeCallbackSubscriptionBridge
    : public MTRNullableIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge
{
public:
    MTRNullableIdentifyClusterIdentifyIdentifyTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableIdentifyClusterIdentifyIdentifyTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge
    : public MTRCallbackBridge<OnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallback>
{
public:
    MTROnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<OnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OnOff::OnOffDelayedAllOffEffectVariant value);
};

class MTROnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackSubscriptionBridge
    : public MTROnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge
{
public:
    MTROnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallback>
{
public:
    MTRNullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::OnOffDelayedAllOffEffectVariant> & value);
};

class MTRNullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackSubscriptionBridge
    : public MTRNullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge
{
public:
    MTRNullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOnOffClusterOnOffDelayedAllOffEffectVariantAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge
    : public MTRCallbackBridge<OnOffClusterOnOffDyingLightEffectVariantAttributeCallback>
{
public:
    MTROnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffClusterOnOffDyingLightEffectVariantAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<OnOffClusterOnOffDyingLightEffectVariantAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OnOff::OnOffDyingLightEffectVariant value);
};

class MTROnOffClusterOnOffDyingLightEffectVariantAttributeCallbackSubscriptionBridge
    : public MTROnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge
{
public:
    MTROnOffClusterOnOffDyingLightEffectVariantAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallback>
{
public:
    MTRNullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::OnOffDyingLightEffectVariant> & value);
};

class MTRNullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallbackSubscriptionBridge
    : public MTRNullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge
{
public:
    MTRNullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOnOffClusterOnOffDyingLightEffectVariantAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffClusterOnOffEffectIdentifierAttributeCallbackBridge
    : public MTRCallbackBridge<OnOffClusterOnOffEffectIdentifierAttributeCallback>
{
public:
    MTROnOffClusterOnOffEffectIdentifierAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffClusterOnOffEffectIdentifierAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffClusterOnOffEffectIdentifierAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<OnOffClusterOnOffEffectIdentifierAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OnOff::OnOffEffectIdentifier value);
};

class MTROnOffClusterOnOffEffectIdentifierAttributeCallbackSubscriptionBridge
    : public MTROnOffClusterOnOffEffectIdentifierAttributeCallbackBridge
{
public:
    MTROnOffClusterOnOffEffectIdentifierAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffClusterOnOffEffectIdentifierAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffClusterOnOffEffectIdentifierAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffClusterOnOffEffectIdentifierAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOnOffClusterOnOffEffectIdentifierAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOnOffClusterOnOffEffectIdentifierAttributeCallback>
{
public:
    MTRNullableOnOffClusterOnOffEffectIdentifierAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableOnOffClusterOnOffEffectIdentifierAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOnOffClusterOnOffEffectIdentifierAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<NullableOnOffClusterOnOffEffectIdentifierAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::OnOffEffectIdentifier> & value);
};

class MTRNullableOnOffClusterOnOffEffectIdentifierAttributeCallbackSubscriptionBridge
    : public MTRNullableOnOffClusterOnOffEffectIdentifierAttributeCallbackBridge
{
public:
    MTRNullableOnOffClusterOnOffEffectIdentifierAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOnOffClusterOnOffEffectIdentifierAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOnOffClusterOnOffEffectIdentifierAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOnOffClusterOnOffEffectIdentifierAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROnOffClusterOnOffStartUpOnOffAttributeCallbackBridge
    : public MTRCallbackBridge<OnOffClusterOnOffStartUpOnOffAttributeCallback>
{
public:
    MTROnOffClusterOnOffStartUpOnOffAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OnOffClusterOnOffStartUpOnOffAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROnOffClusterOnOffStartUpOnOffAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<OnOffClusterOnOffStartUpOnOffAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OnOff::OnOffStartUpOnOff value);
};

class MTROnOffClusterOnOffStartUpOnOffAttributeCallbackSubscriptionBridge
    : public MTROnOffClusterOnOffStartUpOnOffAttributeCallbackBridge
{
public:
    MTROnOffClusterOnOffStartUpOnOffAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROnOffClusterOnOffStartUpOnOffAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROnOffClusterOnOffStartUpOnOffAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROnOffClusterOnOffStartUpOnOffAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOnOffClusterOnOffStartUpOnOffAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOnOffClusterOnOffStartUpOnOffAttributeCallback>
{
public:
    MTRNullableOnOffClusterOnOffStartUpOnOffAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableOnOffClusterOnOffStartUpOnOffAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOnOffClusterOnOffStartUpOnOffAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableOnOffClusterOnOffStartUpOnOffAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::OnOff::OnOffStartUpOnOff> & value);
};

class MTRNullableOnOffClusterOnOffStartUpOnOffAttributeCallbackSubscriptionBridge
    : public MTRNullableOnOffClusterOnOffStartUpOnOffAttributeCallbackBridge
{
public:
    MTRNullableOnOffClusterOnOffStartUpOnOffAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOnOffClusterOnOffStartUpOnOffAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOnOffClusterOnOffStartUpOnOffAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOnOffClusterOnOffStartUpOnOffAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLevelControlClusterMoveModeAttributeCallbackBridge : public MTRCallbackBridge<LevelControlClusterMoveModeAttributeCallback>
{
public:
    MTRLevelControlClusterMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LevelControlClusterMoveModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLevelControlClusterMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<LevelControlClusterMoveModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::LevelControl::MoveMode value);
};

class MTRLevelControlClusterMoveModeAttributeCallbackSubscriptionBridge
    : public MTRLevelControlClusterMoveModeAttributeCallbackBridge
{
public:
    MTRLevelControlClusterMoveModeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLevelControlClusterMoveModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLevelControlClusterMoveModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLevelControlClusterMoveModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableLevelControlClusterMoveModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableLevelControlClusterMoveModeAttributeCallback>
{
public:
    MTRNullableLevelControlClusterMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableLevelControlClusterMoveModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableLevelControlClusterMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableLevelControlClusterMoveModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::LevelControl::MoveMode> & value);
};

class MTRNullableLevelControlClusterMoveModeAttributeCallbackSubscriptionBridge
    : public MTRNullableLevelControlClusterMoveModeAttributeCallbackBridge
{
public:
    MTRNullableLevelControlClusterMoveModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableLevelControlClusterMoveModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableLevelControlClusterMoveModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableLevelControlClusterMoveModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLevelControlClusterStepModeAttributeCallbackBridge : public MTRCallbackBridge<LevelControlClusterStepModeAttributeCallback>
{
public:
    MTRLevelControlClusterStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LevelControlClusterStepModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLevelControlClusterStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<LevelControlClusterStepModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::LevelControl::StepMode value);
};

class MTRLevelControlClusterStepModeAttributeCallbackSubscriptionBridge
    : public MTRLevelControlClusterStepModeAttributeCallbackBridge
{
public:
    MTRLevelControlClusterStepModeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLevelControlClusterStepModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLevelControlClusterStepModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLevelControlClusterStepModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableLevelControlClusterStepModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableLevelControlClusterStepModeAttributeCallback>
{
public:
    MTRNullableLevelControlClusterStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableLevelControlClusterStepModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableLevelControlClusterStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableLevelControlClusterStepModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::LevelControl::StepMode> & value);
};

class MTRNullableLevelControlClusterStepModeAttributeCallbackSubscriptionBridge
    : public MTRNullableLevelControlClusterStepModeAttributeCallbackBridge
{
public:
    MTRNullableLevelControlClusterStepModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableLevelControlClusterStepModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableLevelControlClusterStepModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableLevelControlClusterStepModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<AccessControlClusterAccessControlEntryAuthModeEnumAttributeCallback>
{
public:
    MTRAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccessControlClusterAccessControlEntryAuthModeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<AccessControlClusterAccessControlEntryAuthModeEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::AccessControl::AccessControlEntryAuthModeEnum value);
};

class MTRAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackSubscriptionBridge
    : public MTRAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge
{
public:
    MTRAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallback>
{
public:
    MTRNullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<NullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTRNullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::AccessControl::AccessControlEntryAuthModeEnum> & value);
};

class MTRNullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge
{
public:
    MTRNullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableAccessControlClusterAccessControlEntryAuthModeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<AccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallback>
{
public:
    MTRAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<AccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::AccessControl::AccessControlEntryPrivilegeEnum value);
};

class MTRAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackSubscriptionBridge
    : public MTRAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge
{
public:
    MTRAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallback>
{
public:
    MTRNullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<NullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRNullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::AccessControl::AccessControlEntryPrivilegeEnum> & value);
};

class MTRNullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge
{
public:
    MTRNullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableAccessControlClusterAccessControlEntryPrivilegeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAccessControlClusterChangeTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<AccessControlClusterChangeTypeEnumAttributeCallback>
{
public:
    MTRAccessControlClusterChangeTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AccessControlClusterChangeTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAccessControlClusterChangeTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<AccessControlClusterChangeTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::AccessControl::ChangeTypeEnum value);
};

class MTRAccessControlClusterChangeTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRAccessControlClusterChangeTypeEnumAttributeCallbackBridge
{
public:
    MTRAccessControlClusterChangeTypeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAccessControlClusterChangeTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAccessControlClusterChangeTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAccessControlClusterChangeTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableAccessControlClusterChangeTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableAccessControlClusterChangeTypeEnumAttributeCallback>
{
public:
    MTRNullableAccessControlClusterChangeTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableAccessControlClusterChangeTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableAccessControlClusterChangeTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableAccessControlClusterChangeTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::AccessControl::ChangeTypeEnum> & value);
};

class MTRNullableAccessControlClusterChangeTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableAccessControlClusterChangeTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableAccessControlClusterChangeTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableAccessControlClusterChangeTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableAccessControlClusterChangeTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableAccessControlClusterChangeTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRActionsClusterActionErrorEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ActionsClusterActionErrorEnumAttributeCallback>
{
public:
    MTRActionsClusterActionErrorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ActionsClusterActionErrorEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRActionsClusterActionErrorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<ActionsClusterActionErrorEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Actions::ActionErrorEnum value);
};

class MTRActionsClusterActionErrorEnumAttributeCallbackSubscriptionBridge
    : public MTRActionsClusterActionErrorEnumAttributeCallbackBridge
{
public:
    MTRActionsClusterActionErrorEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRActionsClusterActionErrorEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRActionsClusterActionErrorEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRActionsClusterActionErrorEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableActionsClusterActionErrorEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableActionsClusterActionErrorEnumAttributeCallback>
{
public:
    MTRNullableActionsClusterActionErrorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableActionsClusterActionErrorEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableActionsClusterActionErrorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableActionsClusterActionErrorEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Actions::ActionErrorEnum> & value);
};

class MTRNullableActionsClusterActionErrorEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableActionsClusterActionErrorEnumAttributeCallbackBridge
{
public:
    MTRNullableActionsClusterActionErrorEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableActionsClusterActionErrorEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableActionsClusterActionErrorEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableActionsClusterActionErrorEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRActionsClusterActionStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ActionsClusterActionStateEnumAttributeCallback>
{
public:
    MTRActionsClusterActionStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ActionsClusterActionStateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRActionsClusterActionStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<ActionsClusterActionStateEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Actions::ActionStateEnum value);
};

class MTRActionsClusterActionStateEnumAttributeCallbackSubscriptionBridge
    : public MTRActionsClusterActionStateEnumAttributeCallbackBridge
{
public:
    MTRActionsClusterActionStateEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRActionsClusterActionStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRActionsClusterActionStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRActionsClusterActionStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableActionsClusterActionStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableActionsClusterActionStateEnumAttributeCallback>
{
public:
    MTRNullableActionsClusterActionStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableActionsClusterActionStateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableActionsClusterActionStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableActionsClusterActionStateEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Actions::ActionStateEnum> & value);
};

class MTRNullableActionsClusterActionStateEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableActionsClusterActionStateEnumAttributeCallbackBridge
{
public:
    MTRNullableActionsClusterActionStateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableActionsClusterActionStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableActionsClusterActionStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableActionsClusterActionStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRActionsClusterActionTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ActionsClusterActionTypeEnumAttributeCallback>
{
public:
    MTRActionsClusterActionTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ActionsClusterActionTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRActionsClusterActionTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ActionsClusterActionTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Actions::ActionTypeEnum value);
};

class MTRActionsClusterActionTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRActionsClusterActionTypeEnumAttributeCallbackBridge
{
public:
    MTRActionsClusterActionTypeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRActionsClusterActionTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRActionsClusterActionTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRActionsClusterActionTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableActionsClusterActionTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableActionsClusterActionTypeEnumAttributeCallback>
{
public:
    MTRNullableActionsClusterActionTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableActionsClusterActionTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableActionsClusterActionTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableActionsClusterActionTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Actions::ActionTypeEnum> & value);
};

class MTRNullableActionsClusterActionTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableActionsClusterActionTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableActionsClusterActionTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableActionsClusterActionTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableActionsClusterActionTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableActionsClusterActionTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRActionsClusterEndpointListTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ActionsClusterEndpointListTypeEnumAttributeCallback>
{
public:
    MTRActionsClusterEndpointListTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ActionsClusterEndpointListTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRActionsClusterEndpointListTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<ActionsClusterEndpointListTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Actions::EndpointListTypeEnum value);
};

class MTRActionsClusterEndpointListTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRActionsClusterEndpointListTypeEnumAttributeCallbackBridge
{
public:
    MTRActionsClusterEndpointListTypeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRActionsClusterEndpointListTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRActionsClusterEndpointListTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRActionsClusterEndpointListTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableActionsClusterEndpointListTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableActionsClusterEndpointListTypeEnumAttributeCallback>
{
public:
    MTRNullableActionsClusterEndpointListTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableActionsClusterEndpointListTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableActionsClusterEndpointListTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableActionsClusterEndpointListTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Actions::EndpointListTypeEnum> & value);
};

class MTRNullableActionsClusterEndpointListTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableActionsClusterEndpointListTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableActionsClusterEndpointListTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableActionsClusterEndpointListTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableActionsClusterEndpointListTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableActionsClusterEndpointListTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBasicInformationClusterColorEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BasicInformationClusterColorEnumAttributeCallback>
{
public:
    MTRBasicInformationClusterColorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BasicInformationClusterColorEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBasicInformationClusterColorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<BasicInformationClusterColorEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BasicInformation::ColorEnum value);
};

class MTRBasicInformationClusterColorEnumAttributeCallbackSubscriptionBridge
    : public MTRBasicInformationClusterColorEnumAttributeCallbackBridge
{
public:
    MTRBasicInformationClusterColorEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBasicInformationClusterColorEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBasicInformationClusterColorEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBasicInformationClusterColorEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBasicInformationClusterColorEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBasicInformationClusterColorEnumAttributeCallback>
{
public:
    MTRNullableBasicInformationClusterColorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableBasicInformationClusterColorEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBasicInformationClusterColorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullableBasicInformationClusterColorEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::BasicInformation::ColorEnum> & value);
};

class MTRNullableBasicInformationClusterColorEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBasicInformationClusterColorEnumAttributeCallbackBridge
{
public:
    MTRNullableBasicInformationClusterColorEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBasicInformationClusterColorEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBasicInformationClusterColorEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBasicInformationClusterColorEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBasicInformationClusterProductFinishEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BasicInformationClusterProductFinishEnumAttributeCallback>
{
public:
    MTRBasicInformationClusterProductFinishEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BasicInformationClusterProductFinishEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBasicInformationClusterProductFinishEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<BasicInformationClusterProductFinishEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BasicInformation::ProductFinishEnum value);
};

class MTRBasicInformationClusterProductFinishEnumAttributeCallbackSubscriptionBridge
    : public MTRBasicInformationClusterProductFinishEnumAttributeCallbackBridge
{
public:
    MTRBasicInformationClusterProductFinishEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBasicInformationClusterProductFinishEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBasicInformationClusterProductFinishEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBasicInformationClusterProductFinishEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBasicInformationClusterProductFinishEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBasicInformationClusterProductFinishEnumAttributeCallback>
{
public:
    MTRNullableBasicInformationClusterProductFinishEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableBasicInformationClusterProductFinishEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBasicInformationClusterProductFinishEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NullableBasicInformationClusterProductFinishEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::BasicInformation::ProductFinishEnum> & value);
};

class MTRNullableBasicInformationClusterProductFinishEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBasicInformationClusterProductFinishEnumAttributeCallbackBridge
{
public:
    MTRNullableBasicInformationClusterProductFinishEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBasicInformationClusterProductFinishEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBasicInformationClusterProductFinishEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBasicInformationClusterProductFinishEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallback>
{
public:
    MTROTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OtaSoftwareUpdateProvider::OTAApplyUpdateAction value);
};

class MTROTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallback>
{
public:
    MTRNullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateProvider::OTAApplyUpdateAction> & value);
};

class MTRNullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackSubscriptionBridge
    : public MTRNullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge
{
public:
    MTRNullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOTASoftwareUpdateProviderClusterOTAApplyUpdateActionAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallback>
{
public:
    MTROTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OtaSoftwareUpdateProvider::OTADownloadProtocol value);
};

class MTROTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallback>
{
public:
    MTRNullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<NullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRNullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateProvider::OTADownloadProtocol> & value);
};

class MTRNullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackSubscriptionBridge
    : public MTRNullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge
{
public:
    MTRNullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOTASoftwareUpdateProviderClusterOTADownloadProtocolAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallback>
{
public:
    MTROTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OtaSoftwareUpdateProvider::OTAQueryStatus value);
};

class MTROTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallback>
{
public:
    MTRNullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateProvider::OTAQueryStatus> & value);
};

class MTRNullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackSubscriptionBridge
    : public MTRNullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge
{
public:
    MTRNullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOTASoftwareUpdateProviderClusterOTAQueryStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallback>
{
public:
    MTROTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAAnnouncementReason value);
};

class MTROTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallback>
{
public:
    MTRNullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler) :
        MTRCallbackBridge<NullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallback>(queue, handler,
                                                                                                           OnSuccessFn){};

    MTRNullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler,
                                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallback>(queue, handler, action,
                                                                                                           OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAAnnouncementReason> & value);
};

class MTRNullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackSubscriptionBridge
    : public MTRNullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge
{
public:
    MTRNullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOTASoftwareUpdateRequestorClusterOTAAnnouncementReasonAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallback>
{
public:
    MTROTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAChangeReasonEnum value);
};

class MTROTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallback>
{
public:
    MTRNullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAChangeReasonEnum> & value);
};

class MTRNullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge
{
public:
    MTRNullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOTASoftwareUpdateRequestorClusterOTAChangeReasonEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallback>
{
public:
    MTROTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<OTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAUpdateStateEnum value);
};

class MTROTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackSubscriptionBridge
    : public MTROTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge
{
public:
    MTROTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallback>
{
public:
    MTRNullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<NullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRNullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAUpdateStateEnum> & value);
};

class MTRNullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge
{
public:
    MTRNullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOTASoftwareUpdateRequestorClusterOTAUpdateStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TimeFormatLocalizationClusterCalendarTypeEnumAttributeCallback>
{
public:
    MTRTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TimeFormatLocalizationClusterCalendarTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<TimeFormatLocalizationClusterCalendarTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TimeFormatLocalization::CalendarTypeEnum value);
};

class MTRTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge
{
public:
    MTRTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallback>
{
public:
    MTRNullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::TimeFormatLocalization::CalendarTypeEnum> & value);
};

class MTRNullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTimeFormatLocalizationClusterCalendarTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TimeFormatLocalizationClusterHourFormatEnumAttributeCallback>
{
public:
    MTRTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TimeFormatLocalizationClusterHourFormatEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<TimeFormatLocalizationClusterHourFormatEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TimeFormatLocalization::HourFormatEnum value);
};

class MTRTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackSubscriptionBridge
    : public MTRTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge
{
public:
    MTRTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallback>
{
public:
    MTRNullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::TimeFormatLocalization::HourFormatEnum> & value);
};

class MTRNullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge
{
public:
    MTRNullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTimeFormatLocalizationClusterHourFormatEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<UnitLocalizationClusterTempUnitEnumAttributeCallback>
{
public:
    MTRUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitLocalizationClusterTempUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<UnitLocalizationClusterTempUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::UnitLocalization::TempUnitEnum value);
};

class MTRUnitLocalizationClusterTempUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge
{
public:
    MTRUnitLocalizationClusterTempUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableUnitLocalizationClusterTempUnitEnumAttributeCallback>
{
public:
    MTRNullableUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableUnitLocalizationClusterTempUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableUnitLocalizationClusterTempUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::UnitLocalization::TempUnitEnum> & value);
};

class MTRNullableUnitLocalizationClusterTempUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableUnitLocalizationClusterTempUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableUnitLocalizationClusterTempUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterBatApprovedChemistryEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterBatApprovedChemistryEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterBatApprovedChemistryEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::BatApprovedChemistryEnum value);
};

class MTRPowerSourceClusterBatApprovedChemistryEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterBatApprovedChemistryEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatApprovedChemistryEnum> & value);
};

class MTRNullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterBatApprovedChemistryEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterBatChargeFaultEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterBatChargeFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterBatChargeFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::BatChargeFaultEnum value);
};

class MTRPowerSourceClusterBatChargeFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterBatChargeFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterBatChargeFaultEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterBatChargeFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterBatChargeFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatChargeFaultEnum> & value);
};

class MTRNullablePowerSourceClusterBatChargeFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterBatChargeFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterBatChargeFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterBatChargeLevelEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterBatChargeLevelEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterBatChargeLevelEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::BatChargeLevelEnum value);
};

class MTRPowerSourceClusterBatChargeLevelEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterBatChargeLevelEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterBatChargeLevelEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterBatChargeLevelEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterBatChargeLevelEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatChargeLevelEnum> & value);
};

class MTRNullablePowerSourceClusterBatChargeLevelEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterBatChargeLevelEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterBatChargeLevelEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterBatChargeStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterBatChargeStateEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterBatChargeStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterBatChargeStateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterBatChargeStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterBatChargeStateEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::BatChargeStateEnum value);
};

class MTRPowerSourceClusterBatChargeStateEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterBatChargeStateEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterBatChargeStateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterBatChargeStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterBatChargeStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterBatChargeStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterBatChargeStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterBatChargeStateEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterBatChargeStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterBatChargeStateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterBatChargeStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterBatChargeStateEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatChargeStateEnum> & value);
};

class MTRNullablePowerSourceClusterBatChargeStateEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterBatChargeStateEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterBatChargeStateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterBatChargeStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterBatChargeStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterBatChargeStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterBatCommonDesignationEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterBatCommonDesignationEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterBatCommonDesignationEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::BatCommonDesignationEnum value);
};

class MTRPowerSourceClusterBatCommonDesignationEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterBatCommonDesignationEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterBatCommonDesignationEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterBatCommonDesignationEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterBatCommonDesignationEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatCommonDesignationEnum> & value);
};

class MTRNullablePowerSourceClusterBatCommonDesignationEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterBatCommonDesignationEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterBatCommonDesignationEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterBatFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterBatFaultEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterBatFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterBatFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterBatFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterBatFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::BatFaultEnum value);
};

class MTRPowerSourceClusterBatFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterBatFaultEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterBatFaultEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterBatFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterBatFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterBatFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterBatFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterBatFaultEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterBatFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterBatFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterBatFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterBatFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatFaultEnum> & value);
};

class MTRNullablePowerSourceClusterBatFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterBatFaultEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterBatFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterBatFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterBatFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterBatFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterBatReplaceabilityEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterBatReplaceabilityEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterBatReplaceabilityEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::BatReplaceabilityEnum value);
};

class MTRPowerSourceClusterBatReplaceabilityEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterBatReplaceabilityEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterBatReplaceabilityEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterBatReplaceabilityEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterBatReplaceabilityEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::BatReplaceabilityEnum> & value);
};

class MTRNullablePowerSourceClusterBatReplaceabilityEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterBatReplaceabilityEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterBatReplaceabilityEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterPowerSourceStatusEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterPowerSourceStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterPowerSourceStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::PowerSourceStatusEnum value);
};

class MTRPowerSourceClusterPowerSourceStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterPowerSourceStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterPowerSourceStatusEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterPowerSourceStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterPowerSourceStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::PowerSourceStatusEnum> & value);
};

class MTRNullablePowerSourceClusterPowerSourceStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterPowerSourceStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterPowerSourceStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterWiredCurrentTypeEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterWiredCurrentTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterWiredCurrentTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::WiredCurrentTypeEnum value);
};

class MTRPowerSourceClusterWiredCurrentTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterWiredCurrentTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::WiredCurrentTypeEnum> & value);
};

class MTRNullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterWiredCurrentTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPowerSourceClusterWiredFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PowerSourceClusterWiredFaultEnumAttributeCallback>
{
public:
    MTRPowerSourceClusterWiredFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PowerSourceClusterWiredFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPowerSourceClusterWiredFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<PowerSourceClusterWiredFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PowerSource::WiredFaultEnum value);
};

class MTRPowerSourceClusterWiredFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRPowerSourceClusterWiredFaultEnumAttributeCallbackBridge
{
public:
    MTRPowerSourceClusterWiredFaultEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPowerSourceClusterWiredFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPowerSourceClusterWiredFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPowerSourceClusterWiredFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePowerSourceClusterWiredFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePowerSourceClusterWiredFaultEnumAttributeCallback>
{
public:
    MTRNullablePowerSourceClusterWiredFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePowerSourceClusterWiredFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePowerSourceClusterWiredFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullablePowerSourceClusterWiredFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::PowerSource::WiredFaultEnum> & value);
};

class MTRNullablePowerSourceClusterWiredFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePowerSourceClusterWiredFaultEnumAttributeCallbackBridge
{
public:
    MTRNullablePowerSourceClusterWiredFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePowerSourceClusterWiredFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePowerSourceClusterWiredFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePowerSourceClusterWiredFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralCommissioningClusterCommissioningErrorAttributeCallback>
{
public:
    MTRGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralCommissioningClusterCommissioningErrorAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<GeneralCommissioningClusterCommissioningErrorAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::GeneralCommissioning::CommissioningError value);
};

class MTRGeneralCommissioningClusterCommissioningErrorAttributeCallbackSubscriptionBridge
    : public MTRGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge
{
public:
    MTRGeneralCommissioningClusterCommissioningErrorAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge
    : public MTRCallbackBridge<NullableGeneralCommissioningClusterCommissioningErrorAttributeCallback>
{
public:
    MTRNullableGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableGeneralCommissioningClusterCommissioningErrorAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableGeneralCommissioningClusterCommissioningErrorAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralCommissioning::CommissioningError> & value);
};

class MTRNullableGeneralCommissioningClusterCommissioningErrorAttributeCallbackSubscriptionBridge
    : public MTRNullableGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge
{
public:
    MTRNullableGeneralCommissioningClusterCommissioningErrorAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableGeneralCommissioningClusterCommissioningErrorAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralCommissioningClusterRegulatoryLocationTypeAttributeCallback>
{
public:
    MTRGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralCommissioningClusterRegulatoryLocationTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<GeneralCommissioningClusterRegulatoryLocationTypeAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::GeneralCommissioning::RegulatoryLocationType value);
};

class MTRGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackSubscriptionBridge
    : public MTRGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge
{
public:
    MTRGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallback>
{
public:
    MTRNullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<NullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRNullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<NullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralCommissioning::RegulatoryLocationType> & value);
};

class MTRNullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackSubscriptionBridge
    : public MTRNullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge
{
public:
    MTRNullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableGeneralCommissioningClusterRegulatoryLocationTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge
    : public MTRCallbackBridge<NetworkCommissioningClusterNetworkCommissioningStatusAttributeCallback>
{
public:
    MTRNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NetworkCommissioningClusterNetworkCommissioningStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NetworkCommissioningClusterNetworkCommissioningStatusAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatus value);
};

class MTRNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackSubscriptionBridge
    : public MTRNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge
{
public:
    MTRNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge
    : public MTRCallbackBridge<NullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallback>
{
public:
    MTRNullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler) :
        MTRCallbackBridge<NullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallback>(queue, handler,
                                                                                                          OnSuccessFn){};

    MTRNullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler,
                                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallback>(queue, handler, action,
                                                                                                          OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatus> & value);
};

class MTRNullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackSubscriptionBridge
    : public MTRNullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge
{
public:
    MTRNullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableNetworkCommissioningClusterNetworkCommissioningStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNetworkCommissioningClusterWiFiBandAttributeCallbackBridge
    : public MTRCallbackBridge<NetworkCommissioningClusterWiFiBandAttributeCallback>
{
public:
    MTRNetworkCommissioningClusterWiFiBandAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NetworkCommissioningClusterWiFiBandAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNetworkCommissioningClusterWiFiBandAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NetworkCommissioningClusterWiFiBandAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::NetworkCommissioning::WiFiBand value);
};

class MTRNetworkCommissioningClusterWiFiBandAttributeCallbackSubscriptionBridge
    : public MTRNetworkCommissioningClusterWiFiBandAttributeCallbackBridge
{
public:
    MTRNetworkCommissioningClusterWiFiBandAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNetworkCommissioningClusterWiFiBandAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNetworkCommissioningClusterWiFiBandAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNetworkCommissioningClusterWiFiBandAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableNetworkCommissioningClusterWiFiBandAttributeCallbackBridge
    : public MTRCallbackBridge<NullableNetworkCommissioningClusterWiFiBandAttributeCallback>
{
public:
    MTRNullableNetworkCommissioningClusterWiFiBandAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableNetworkCommissioningClusterWiFiBandAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableNetworkCommissioningClusterWiFiBandAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableNetworkCommissioningClusterWiFiBandAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::NetworkCommissioning::WiFiBand> & value);
};

class MTRNullableNetworkCommissioningClusterWiFiBandAttributeCallbackSubscriptionBridge
    : public MTRNullableNetworkCommissioningClusterWiFiBandAttributeCallbackBridge
{
public:
    MTRNullableNetworkCommissioningClusterWiFiBandAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableNetworkCommissioningClusterWiFiBandAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableNetworkCommissioningClusterWiFiBandAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableNetworkCommissioningClusterWiFiBandAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDiagnosticLogsClusterIntentEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DiagnosticLogsClusterIntentEnumAttributeCallback>
{
public:
    MTRDiagnosticLogsClusterIntentEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DiagnosticLogsClusterIntentEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDiagnosticLogsClusterIntentEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<DiagnosticLogsClusterIntentEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DiagnosticLogs::IntentEnum value);
};

class MTRDiagnosticLogsClusterIntentEnumAttributeCallbackSubscriptionBridge
    : public MTRDiagnosticLogsClusterIntentEnumAttributeCallbackBridge
{
public:
    MTRDiagnosticLogsClusterIntentEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDiagnosticLogsClusterIntentEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDiagnosticLogsClusterIntentEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDiagnosticLogsClusterIntentEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDiagnosticLogsClusterIntentEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDiagnosticLogsClusterIntentEnumAttributeCallback>
{
public:
    MTRNullableDiagnosticLogsClusterIntentEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDiagnosticLogsClusterIntentEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDiagnosticLogsClusterIntentEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableDiagnosticLogsClusterIntentEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DiagnosticLogs::IntentEnum> & value);
};

class MTRNullableDiagnosticLogsClusterIntentEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDiagnosticLogsClusterIntentEnumAttributeCallbackBridge
{
public:
    MTRNullableDiagnosticLogsClusterIntentEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDiagnosticLogsClusterIntentEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDiagnosticLogsClusterIntentEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDiagnosticLogsClusterIntentEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDiagnosticLogsClusterStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DiagnosticLogsClusterStatusEnumAttributeCallback>
{
public:
    MTRDiagnosticLogsClusterStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DiagnosticLogsClusterStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDiagnosticLogsClusterStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<DiagnosticLogsClusterStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DiagnosticLogs::StatusEnum value);
};

class MTRDiagnosticLogsClusterStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRDiagnosticLogsClusterStatusEnumAttributeCallbackBridge
{
public:
    MTRDiagnosticLogsClusterStatusEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDiagnosticLogsClusterStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDiagnosticLogsClusterStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDiagnosticLogsClusterStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDiagnosticLogsClusterStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDiagnosticLogsClusterStatusEnumAttributeCallback>
{
public:
    MTRNullableDiagnosticLogsClusterStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDiagnosticLogsClusterStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDiagnosticLogsClusterStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableDiagnosticLogsClusterStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DiagnosticLogs::StatusEnum> & value);
};

class MTRNullableDiagnosticLogsClusterStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDiagnosticLogsClusterStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableDiagnosticLogsClusterStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDiagnosticLogsClusterStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDiagnosticLogsClusterStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDiagnosticLogsClusterStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DiagnosticLogsClusterTransferProtocolEnumAttributeCallback>
{
public:
    MTRDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DiagnosticLogsClusterTransferProtocolEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<DiagnosticLogsClusterTransferProtocolEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DiagnosticLogs::TransferProtocolEnum value);
};

class MTRDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackSubscriptionBridge
    : public MTRDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge
{
public:
    MTRDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallback>
{
public:
    MTRNullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::DiagnosticLogs::TransferProtocolEnum> & value);
};

class MTRNullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge
{
public:
    MTRNullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDiagnosticLogsClusterTransferProtocolEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsClusterBootReasonEnumAttributeCallback>
{
public:
    MTRGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsClusterBootReasonEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsClusterBootReasonEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::GeneralDiagnostics::BootReasonEnum value);
};

class MTRGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallback>
{
public:
    MTRNullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::BootReasonEnum> & value);
};

class MTRNullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge
{
public:
    MTRNullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableGeneralDiagnosticsClusterBootReasonEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsClusterHardwareFaultEnumAttributeCallback>
{
public:
    MTRGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsClusterHardwareFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsClusterHardwareFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::GeneralDiagnostics::HardwareFaultEnum value);
};

class MTRGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallback>
{
public:
    MTRNullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::HardwareFaultEnum> & value);
};

class MTRNullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge
{
public:
    MTRNullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableGeneralDiagnosticsClusterHardwareFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallback>
{
public:
    MTRGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::GeneralDiagnostics::InterfaceTypeEnum value);
};

class MTRGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallback>
{
public:
    MTRNullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::InterfaceTypeEnum> & value);
};

class MTRNullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableGeneralDiagnosticsClusterInterfaceTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsClusterNetworkFaultEnumAttributeCallback>
{
public:
    MTRGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsClusterNetworkFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsClusterNetworkFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::GeneralDiagnostics::NetworkFaultEnum value);
};

class MTRGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallback>
{
public:
    MTRNullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::NetworkFaultEnum> & value);
};

class MTRNullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge
{
public:
    MTRNullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableGeneralDiagnosticsClusterNetworkFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<GeneralDiagnosticsClusterRadioFaultEnumAttributeCallback>
{
public:
    MTRGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GeneralDiagnosticsClusterRadioFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<GeneralDiagnosticsClusterRadioFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::GeneralDiagnostics::RadioFaultEnum value);
};

class MTRGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge
{
public:
    MTRGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallback>
{
public:
    MTRNullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::GeneralDiagnostics::RadioFaultEnum> & value);
};

class MTRNullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge
{
public:
    MTRNullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableGeneralDiagnosticsClusterRadioFaultEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ThreadNetworkDiagnostics::ConnectionStatusEnum value);
};

class MTRThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>
{
public:
    MTRNullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<NullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRNullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ThreadNetworkDiagnostics::ConnectionStatusEnum> & value);
};

class MTRNullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableThreadNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault value);
};

class MTRThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge
    : public MTRCallbackBridge<NullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallback>
{
public:
    MTRNullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> & value);
};

class MTRNullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackSubscriptionBridge
    : public MTRNullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge
{
public:
    MTRNullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableThreadNetworkDiagnosticsClusterNetworkFaultAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge
    : public MTRCallbackBridge<ThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallback>
{
public:
    MTRThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<ThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ThreadNetworkDiagnostics::RoutingRole value);
};

class MTRThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackSubscriptionBridge
    : public MTRThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge
{
public:
    MTRThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge
    : public MTRCallbackBridge<NullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallback>
{
public:
    MTRNullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ThreadNetworkDiagnostics::RoutingRole> & value);
};

class MTRNullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackSubscriptionBridge
    : public MTRNullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge
{
public:
    MTRNullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableThreadNetworkDiagnosticsClusterRoutingRoleAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge
    : public MTRCallbackBridge<WiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallback>
{
public:
    MTRWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler,
                                                                                       MTRActionBlock action) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallback>(queue, handler, action,
                                                                                                     OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::WiFiNetworkDiagnostics::AssociationFailureCauseEnum value);
};

class MTRWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackSubscriptionBridge
    : public MTRWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge
{
public:
    MTRWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallback>
{
public:
    MTRNullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                               ResponseHandler handler) :
        MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallback>(queue, handler,
                                                                                                             OnSuccessFn){};

    MTRNullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                               ResponseHandler handler,
                                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallback>(queue, handler, action,
                                                                                                             OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::WiFiNetworkDiagnostics::AssociationFailureCauseEnum> & value);
};

class MTRNullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge
{
public:
    MTRNullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableWiFiNetworkDiagnosticsClusterAssociationFailureCauseEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<WiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>
{
public:
    MTRWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::WiFiNetworkDiagnostics::ConnectionStatusEnum value);
};

class MTRWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge
{
public:
    MTRWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>
{
public:
    MTRNullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRNullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::WiFiNetworkDiagnostics::ConnectionStatusEnum> & value);
};

class MTRNullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableWiFiNetworkDiagnosticsClusterConnectionStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<WiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallback>
{
public:
    MTRWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::WiFiNetworkDiagnostics::SecurityTypeEnum value);
};

class MTRWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge
{
public:
    MTRWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallback>
{
public:
    MTRNullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::WiFiNetworkDiagnostics::SecurityTypeEnum> & value);
};

class MTRNullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableWiFiNetworkDiagnosticsClusterSecurityTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge
    : public MTRCallbackBridge<WiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallback>
{
public:
    MTRWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<WiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::WiFiNetworkDiagnostics::WiFiVersionEnum value);
};

class MTRWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackSubscriptionBridge
    : public MTRWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge
{
public:
    MTRWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallback>
{
public:
    MTRNullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::WiFiNetworkDiagnostics::WiFiVersionEnum> & value);
};

class MTRNullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge
{
public:
    MTRNullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableWiFiNetworkDiagnosticsClusterWiFiVersionEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<EthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallback>
{
public:
    MTREthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<EthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::EthernetNetworkDiagnostics::PHYRateEnum value);
};

class MTREthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackSubscriptionBridge
    : public MTREthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge
{
public:
    MTREthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallback>
{
public:
    MTRNullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::EthernetNetworkDiagnostics::PHYRateEnum> & value);
};

class MTRNullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge
{
public:
    MTRNullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableEthernetNetworkDiagnosticsClusterPHYRateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TimeSynchronizationClusterGranularityEnumAttributeCallback>
{
public:
    MTRTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TimeSynchronizationClusterGranularityEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<TimeSynchronizationClusterGranularityEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TimeSynchronization::GranularityEnum value);
};

class MTRTimeSynchronizationClusterGranularityEnumAttributeCallbackSubscriptionBridge
    : public MTRTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge
{
public:
    MTRTimeSynchronizationClusterGranularityEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTimeSynchronizationClusterGranularityEnumAttributeCallback>
{
public:
    MTRNullableTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableTimeSynchronizationClusterGranularityEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableTimeSynchronizationClusterGranularityEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::TimeSynchronization::GranularityEnum> & value);
};

class MTRNullableTimeSynchronizationClusterGranularityEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge
{
public:
    MTRNullableTimeSynchronizationClusterGranularityEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTimeSynchronizationClusterGranularityEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TimeSynchronizationClusterTimeSourceEnumAttributeCallback>
{
public:
    MTRTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TimeSynchronizationClusterTimeSourceEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<TimeSynchronizationClusterTimeSourceEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TimeSynchronization::TimeSourceEnum value);
};

class MTRTimeSynchronizationClusterTimeSourceEnumAttributeCallbackSubscriptionBridge
    : public MTRTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge
{
public:
    MTRTimeSynchronizationClusterTimeSourceEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTimeSynchronizationClusterTimeSourceEnumAttributeCallback>
{
public:
    MTRNullableTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableTimeSynchronizationClusterTimeSourceEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NullableTimeSynchronizationClusterTimeSourceEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::TimeSynchronization::TimeSourceEnum> & value);
};

class MTRNullableTimeSynchronizationClusterTimeSourceEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge
{
public:
    MTRNullableTimeSynchronizationClusterTimeSourceEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTimeSynchronizationClusterTimeSourceEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BridgedDeviceBasicInformationClusterColorEnumAttributeCallback>
{
public:
    MTRBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BridgedDeviceBasicInformationClusterColorEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<BridgedDeviceBasicInformationClusterColorEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BridgedDeviceBasicInformation::ColorEnum value);
};

class MTRBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackSubscriptionBridge
    : public MTRBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge
{
public:
    MTRBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallback>
{
public:
    MTRNullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::BridgedDeviceBasicInformation::ColorEnum> & value);
};

class MTRNullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge
{
public:
    MTRNullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBridgedDeviceBasicInformationClusterColorEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallback>
{
public:
    MTRBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<BridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<BridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BridgedDeviceBasicInformation::ProductFinishEnum value);
};

class MTRBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackSubscriptionBridge
    : public MTRBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge
{
public:
    MTRBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallback>
{
public:
    MTRNullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler) :
        MTRCallbackBridge<NullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallback>(queue, handler,
                                                                                                          OnSuccessFn){};

    MTRNullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler,
                                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallback>(queue, handler, action,
                                                                                                          OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::BridgedDeviceBasicInformation::ProductFinishEnum> & value);
};

class MTRNullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge
{
public:
    MTRNullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBridgedDeviceBasicInformationClusterProductFinishEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<AdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallback>
{
public:
    MTRAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler) :
        MTRCallbackBridge<AdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallback>(queue, handler,
                                                                                                           OnSuccessFn){};

    MTRAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler,
                                                                                             MTRActionBlock action) :
        MTRCallbackBridge<AdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                           OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::AdministratorCommissioning::CommissioningWindowStatusEnum value);
};

class MTRAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge
{
public:
    MTRAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallback>
{
public:
    MTRNullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallback>(queue, handler,
                                                                                                                   OnSuccessFn){};

    MTRNullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                     ResponseHandler handler,
                                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::AdministratorCommissioning::CommissioningWindowStatusEnum> &
            value);
};

class MTRNullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableAdministratorCommissioningClusterCommissioningWindowStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge
    : public MTRCallbackBridge<AdministratorCommissioningClusterStatusCodeAttributeCallback>
{
public:
    MTRAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AdministratorCommissioningClusterStatusCodeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<AdministratorCommissioningClusterStatusCodeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::AdministratorCommissioning::StatusCode value);
};

class MTRAdministratorCommissioningClusterStatusCodeAttributeCallbackSubscriptionBridge
    : public MTRAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge
{
public:
    MTRAdministratorCommissioningClusterStatusCodeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableAdministratorCommissioningClusterStatusCodeAttributeCallback>
{
public:
    MTRNullableAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableAdministratorCommissioningClusterStatusCodeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableAdministratorCommissioningClusterStatusCodeAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::AdministratorCommissioning::StatusCode> & value);
};

class MTRNullableAdministratorCommissioningClusterStatusCodeAttributeCallbackSubscriptionBridge
    : public MTRNullableAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge
{
public:
    MTRNullableAdministratorCommissioningClusterStatusCodeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableAdministratorCommissioningClusterStatusCodeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsClusterCertificateChainTypeEnumAttributeCallback>
{
public:
    MTROperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsClusterCertificateChainTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsClusterCertificateChainTypeEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OperationalCredentials::CertificateChainTypeEnum value);
};

class MTROperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackSubscriptionBridge
    : public MTROperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge
{
public:
    MTROperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallback>
{
public:
    MTRNullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler) :
        MTRCallbackBridge<NullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallback>(queue, handler,
                                                                                                          OnSuccessFn){};

    MTRNullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler,
                                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallback>(queue, handler, action,
                                                                                                          OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::OperationalCredentials::CertificateChainTypeEnum> & value);
};

class MTRNullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOperationalCredentialsClusterCertificateChainTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallback>
{
public:
    MTROperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<OperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTROperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<OperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OperationalCredentials::NodeOperationalCertStatusEnum value);
};

class MTROperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackSubscriptionBridge
    : public MTROperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge
{
public:
    MTROperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallback>
{
public:
    MTRNullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                 ResponseHandler handler) :
        MTRCallbackBridge<NullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallback>(queue, handler,
                                                                                                               OnSuccessFn){};

    MTRNullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                 ResponseHandler handler,
                                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::OperationalCredentials::NodeOperationalCertStatusEnum> & value);
};

class MTRNullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOperationalCredentialsClusterNodeOperationalCertStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge
    : public MTRCallbackBridge<GroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallback>
{
public:
    MTRGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<GroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<GroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::GroupKeyManagement::GroupKeySecurityPolicyEnum value);
};

class MTRGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackSubscriptionBridge
    : public MTRGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge
{
public:
    MTRGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallback>
{
public:
    MTRNullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<NullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRNullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::GroupKeyManagement::GroupKeySecurityPolicyEnum> & value);
};

class MTRNullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge
{
public:
    MTRNullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableGroupKeyManagementClusterGroupKeySecurityPolicyEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterAlarmCodeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterAlarmCodeEnumAttributeCallback>
{
public:
    MTRDoorLockClusterAlarmCodeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterAlarmCodeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterAlarmCodeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterAlarmCodeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::AlarmCodeEnum value);
};

class MTRDoorLockClusterAlarmCodeEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterAlarmCodeEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterAlarmCodeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterAlarmCodeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterAlarmCodeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterAlarmCodeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterAlarmCodeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterAlarmCodeEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterAlarmCodeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterAlarmCodeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterAlarmCodeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterAlarmCodeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::AlarmCodeEnum> & value);
};

class MTRNullableDoorLockClusterAlarmCodeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterAlarmCodeEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterAlarmCodeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterAlarmCodeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterAlarmCodeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterAlarmCodeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterCredentialRuleEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterCredentialRuleEnumAttributeCallback>
{
public:
    MTRDoorLockClusterCredentialRuleEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterCredentialRuleEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterCredentialRuleEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterCredentialRuleEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::CredentialRuleEnum value);
};

class MTRDoorLockClusterCredentialRuleEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterCredentialRuleEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterCredentialRuleEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterCredentialRuleEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterCredentialRuleEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterCredentialRuleEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterCredentialRuleEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterCredentialRuleEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterCredentialRuleEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterCredentialRuleEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterCredentialRuleEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterCredentialRuleEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::CredentialRuleEnum> & value);
};

class MTRNullableDoorLockClusterCredentialRuleEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterCredentialRuleEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterCredentialRuleEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterCredentialRuleEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterCredentialRuleEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterCredentialRuleEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterCredentialTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterCredentialTypeEnumAttributeCallback>
{
public:
    MTRDoorLockClusterCredentialTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterCredentialTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterCredentialTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterCredentialTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::CredentialTypeEnum value);
};

class MTRDoorLockClusterCredentialTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterCredentialTypeEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterCredentialTypeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterCredentialTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterCredentialTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterCredentialTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterCredentialTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterCredentialTypeEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterCredentialTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterCredentialTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterCredentialTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterCredentialTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::CredentialTypeEnum> & value);
};

class MTRNullableDoorLockClusterCredentialTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterCredentialTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterCredentialTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterCredentialTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterCredentialTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterCredentialTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterDataOperationTypeEnumAttributeCallback>
{
public:
    MTRDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterDataOperationTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterDataOperationTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::DataOperationTypeEnum value);
};

class MTRDoorLockClusterDataOperationTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterDataOperationTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterDataOperationTypeEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterDataOperationTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterDataOperationTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DataOperationTypeEnum> & value);
};

class MTRNullableDoorLockClusterDataOperationTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterDataOperationTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterDataOperationTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterDlLockStateAttributeCallbackBridge : public MTRCallbackBridge<DoorLockClusterDlLockStateAttributeCallback>
{
public:
    MTRDoorLockClusterDlLockStateAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterDlLockStateAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterDlLockStateAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterDlLockStateAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::DlLockState value);
};

class MTRDoorLockClusterDlLockStateAttributeCallbackSubscriptionBridge : public MTRDoorLockClusterDlLockStateAttributeCallbackBridge
{
public:
    MTRDoorLockClusterDlLockStateAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action,
                                                                     MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterDlLockStateAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterDlLockStateAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterDlLockStateAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterDlLockStateAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterDlLockStateAttributeCallback>
{
public:
    MTRNullableDoorLockClusterDlLockStateAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterDlLockStateAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterDlLockStateAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterDlLockStateAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockState> & value);
};

class MTRNullableDoorLockClusterDlLockStateAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterDlLockStateAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterDlLockStateAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterDlLockStateAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterDlLockStateAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterDlLockStateAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterDlLockTypeAttributeCallbackBridge : public MTRCallbackBridge<DoorLockClusterDlLockTypeAttributeCallback>
{
public:
    MTRDoorLockClusterDlLockTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterDlLockTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterDlLockTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterDlLockTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::DlLockType value);
};

class MTRDoorLockClusterDlLockTypeAttributeCallbackSubscriptionBridge : public MTRDoorLockClusterDlLockTypeAttributeCallbackBridge
{
public:
    MTRDoorLockClusterDlLockTypeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action,
                                                                    MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterDlLockTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterDlLockTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterDlLockTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterDlLockTypeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterDlLockTypeAttributeCallback>
{
public:
    MTRNullableDoorLockClusterDlLockTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterDlLockTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterDlLockTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterDlLockTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockType> & value);
};

class MTRNullableDoorLockClusterDlLockTypeAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterDlLockTypeAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterDlLockTypeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterDlLockTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterDlLockTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterDlLockTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterDlStatusAttributeCallbackBridge : public MTRCallbackBridge<DoorLockClusterDlStatusAttributeCallback>
{
public:
    MTRDoorLockClusterDlStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterDlStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterDlStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterDlStatusAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::DlStatus value);
};

class MTRDoorLockClusterDlStatusAttributeCallbackSubscriptionBridge : public MTRDoorLockClusterDlStatusAttributeCallbackBridge
{
public:
    MTRDoorLockClusterDlStatusAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action,
                                                                  MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterDlStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterDlStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterDlStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterDlStatusAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterDlStatusAttributeCallback>
{
public:
    MTRNullableDoorLockClusterDlStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterDlStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterDlStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterDlStatusAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlStatus> & value);
};

class MTRNullableDoorLockClusterDlStatusAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterDlStatusAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterDlStatusAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterDlStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterDlStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterDlStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterDoorLockOperationEventCodeAttributeCallback>
{
public:
    MTRDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterDoorLockOperationEventCodeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterDoorLockOperationEventCodeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::DoorLockOperationEventCode value);
};

class MTRDoorLockClusterDoorLockOperationEventCodeAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge
{
public:
    MTRDoorLockClusterDoorLockOperationEventCodeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterDoorLockOperationEventCodeAttributeCallback>
{
public:
    MTRNullableDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterDoorLockOperationEventCodeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterDoorLockOperationEventCodeAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorLockOperationEventCode> & value);
};

class MTRNullableDoorLockClusterDoorLockOperationEventCodeAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterDoorLockOperationEventCodeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterDoorLockOperationEventCodeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterDoorLockProgrammingEventCodeAttributeCallback>
{
public:
    MTRDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterDoorLockProgrammingEventCodeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterDoorLockProgrammingEventCodeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::DoorLockProgrammingEventCode value);
};

class MTRDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge
{
public:
    MTRDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallback>
{
public:
    MTRNullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorLockProgrammingEventCode> & value);
};

class MTRNullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterDoorLockProgrammingEventCodeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterDoorLockSetPinOrIdStatusAttributeCallback>
{
public:
    MTRDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterDoorLockSetPinOrIdStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterDoorLockSetPinOrIdStatusAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::DoorLockSetPinOrIdStatus value);
};

class MTRDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge
{
public:
    MTRDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallback>
{
public:
    MTRNullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorLockSetPinOrIdStatus> & value);
};

class MTRNullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterDoorLockSetPinOrIdStatusAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterDoorStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterDoorStateEnumAttributeCallback>
{
public:
    MTRDoorLockClusterDoorStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterDoorStateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterDoorStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterDoorStateEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::DoorStateEnum value);
};

class MTRDoorLockClusterDoorStateEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterDoorStateEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterDoorStateEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterDoorStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterDoorStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterDoorStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterDoorStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterDoorStateEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterDoorStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterDoorStateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterDoorStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterDoorStateEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DoorStateEnum> & value);
};

class MTRNullableDoorLockClusterDoorStateEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterDoorStateEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterDoorStateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterDoorStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterDoorStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterDoorStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterLockDataTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterLockDataTypeEnumAttributeCallback>
{
public:
    MTRDoorLockClusterLockDataTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterLockDataTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterLockDataTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterLockDataTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::LockDataTypeEnum value);
};

class MTRDoorLockClusterLockDataTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterLockDataTypeEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterLockDataTypeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterLockDataTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterLockDataTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterLockDataTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterLockDataTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterLockDataTypeEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterLockDataTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterLockDataTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterLockDataTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterLockDataTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::LockDataTypeEnum> & value);
};

class MTRNullableDoorLockClusterLockDataTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterLockDataTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterLockDataTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterLockDataTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterLockDataTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterLockDataTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterLockOperationTypeEnumAttributeCallback>
{
public:
    MTRDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterLockOperationTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterLockOperationTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::LockOperationTypeEnum value);
};

class MTRDoorLockClusterLockOperationTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterLockOperationTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterLockOperationTypeEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterLockOperationTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterLockOperationTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::LockOperationTypeEnum> & value);
};

class MTRNullableDoorLockClusterLockOperationTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterLockOperationTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterLockOperationTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterOperatingModeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterOperatingModeEnumAttributeCallback>
{
public:
    MTRDoorLockClusterOperatingModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterOperatingModeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterOperatingModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterOperatingModeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::OperatingModeEnum value);
};

class MTRDoorLockClusterOperatingModeEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterOperatingModeEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterOperatingModeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterOperatingModeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterOperatingModeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterOperatingModeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterOperatingModeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterOperatingModeEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterOperatingModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterOperatingModeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterOperatingModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterOperatingModeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::OperatingModeEnum> & value);
};

class MTRNullableDoorLockClusterOperatingModeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterOperatingModeEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterOperatingModeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterOperatingModeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterOperatingModeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterOperatingModeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterOperationErrorEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterOperationErrorEnumAttributeCallback>
{
public:
    MTRDoorLockClusterOperationErrorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterOperationErrorEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterOperationErrorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterOperationErrorEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::OperationErrorEnum value);
};

class MTRDoorLockClusterOperationErrorEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterOperationErrorEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterOperationErrorEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterOperationErrorEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterOperationErrorEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterOperationErrorEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterOperationErrorEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterOperationErrorEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterOperationErrorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterOperationErrorEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterOperationErrorEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterOperationErrorEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::OperationErrorEnum> & value);
};

class MTRNullableDoorLockClusterOperationErrorEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterOperationErrorEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterOperationErrorEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterOperationErrorEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterOperationErrorEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterOperationErrorEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterOperationSourceEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterOperationSourceEnumAttributeCallback>
{
public:
    MTRDoorLockClusterOperationSourceEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterOperationSourceEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterOperationSourceEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterOperationSourceEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::OperationSourceEnum value);
};

class MTRDoorLockClusterOperationSourceEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterOperationSourceEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterOperationSourceEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterOperationSourceEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterOperationSourceEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterOperationSourceEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterOperationSourceEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterOperationSourceEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterOperationSourceEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterOperationSourceEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterOperationSourceEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterOperationSourceEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::OperationSourceEnum> & value);
};

class MTRNullableDoorLockClusterOperationSourceEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterOperationSourceEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterOperationSourceEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterOperationSourceEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterOperationSourceEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterOperationSourceEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterUserStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DoorLockClusterUserStatusEnumAttributeCallback>
{
public:
    MTRDoorLockClusterUserStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterUserStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterUserStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                            MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterUserStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::UserStatusEnum value);
};

class MTRDoorLockClusterUserStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterUserStatusEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterUserStatusEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action,
                                                                        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterUserStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterUserStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterUserStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterUserStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterUserStatusEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterUserStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterUserStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterUserStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterUserStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::UserStatusEnum> & value);
};

class MTRNullableDoorLockClusterUserStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterUserStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterUserStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterUserStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterUserStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterUserStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDoorLockClusterUserTypeEnumAttributeCallbackBridge : public MTRCallbackBridge<DoorLockClusterUserTypeEnumAttributeCallback>
{
public:
    MTRDoorLockClusterUserTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DoorLockClusterUserTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDoorLockClusterUserTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<DoorLockClusterUserTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DoorLock::UserTypeEnum value);
};

class MTRDoorLockClusterUserTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRDoorLockClusterUserTypeEnumAttributeCallbackBridge
{
public:
    MTRDoorLockClusterUserTypeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action,
                                                                      MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDoorLockClusterUserTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDoorLockClusterUserTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDoorLockClusterUserTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDoorLockClusterUserTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDoorLockClusterUserTypeEnumAttributeCallback>
{
public:
    MTRNullableDoorLockClusterUserTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableDoorLockClusterUserTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDoorLockClusterUserTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableDoorLockClusterUserTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::UserTypeEnum> & value);
};

class MTRNullableDoorLockClusterUserTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDoorLockClusterUserTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableDoorLockClusterUserTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDoorLockClusterUserTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDoorLockClusterUserTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDoorLockClusterUserTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWindowCoveringClusterEndProductTypeAttributeCallbackBridge
    : public MTRCallbackBridge<WindowCoveringClusterEndProductTypeAttributeCallback>
{
public:
    MTRWindowCoveringClusterEndProductTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WindowCoveringClusterEndProductTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWindowCoveringClusterEndProductTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<WindowCoveringClusterEndProductTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::WindowCovering::EndProductType value);
};

class MTRWindowCoveringClusterEndProductTypeAttributeCallbackSubscriptionBridge
    : public MTRWindowCoveringClusterEndProductTypeAttributeCallbackBridge
{
public:
    MTRWindowCoveringClusterEndProductTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWindowCoveringClusterEndProductTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWindowCoveringClusterEndProductTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWindowCoveringClusterEndProductTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableWindowCoveringClusterEndProductTypeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableWindowCoveringClusterEndProductTypeAttributeCallback>
{
public:
    MTRNullableWindowCoveringClusterEndProductTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableWindowCoveringClusterEndProductTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableWindowCoveringClusterEndProductTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableWindowCoveringClusterEndProductTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::WindowCovering::EndProductType> & value);
};

class MTRNullableWindowCoveringClusterEndProductTypeAttributeCallbackSubscriptionBridge
    : public MTRNullableWindowCoveringClusterEndProductTypeAttributeCallbackBridge
{
public:
    MTRNullableWindowCoveringClusterEndProductTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableWindowCoveringClusterEndProductTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableWindowCoveringClusterEndProductTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableWindowCoveringClusterEndProductTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRWindowCoveringClusterTypeAttributeCallbackBridge : public MTRCallbackBridge<WindowCoveringClusterTypeAttributeCallback>
{
public:
    MTRWindowCoveringClusterTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<WindowCoveringClusterTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRWindowCoveringClusterTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<WindowCoveringClusterTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::WindowCovering::Type value);
};

class MTRWindowCoveringClusterTypeAttributeCallbackSubscriptionBridge : public MTRWindowCoveringClusterTypeAttributeCallbackBridge
{
public:
    MTRWindowCoveringClusterTypeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action,
                                                                    MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRWindowCoveringClusterTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRWindowCoveringClusterTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRWindowCoveringClusterTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableWindowCoveringClusterTypeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableWindowCoveringClusterTypeAttributeCallback>
{
public:
    MTRNullableWindowCoveringClusterTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableWindowCoveringClusterTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableWindowCoveringClusterTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableWindowCoveringClusterTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::WindowCovering::Type> & value);
};

class MTRNullableWindowCoveringClusterTypeAttributeCallbackSubscriptionBridge
    : public MTRNullableWindowCoveringClusterTypeAttributeCallbackBridge
{
public:
    MTRNullableWindowCoveringClusterTypeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action,
                                                                            MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableWindowCoveringClusterTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableWindowCoveringClusterTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableWindowCoveringClusterTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PumpConfigurationAndControlClusterControlModeEnumAttributeCallback>
{
public:
    MTRPumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PumpConfigurationAndControlClusterControlModeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<PumpConfigurationAndControlClusterControlModeEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum value);
};

class MTRPumpConfigurationAndControlClusterControlModeEnumAttributeCallbackSubscriptionBridge
    : public MTRPumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge
{
public:
    MTRPumpConfigurationAndControlClusterControlModeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallback>
{
public:
    MTRNullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<NullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRNullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<NullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::PumpConfigurationAndControl::ControlModeEnum> & value);
};

class MTRNullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge
{
public:
    MTRNullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePumpConfigurationAndControlClusterControlModeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PumpConfigurationAndControlClusterOperationModeEnumAttributeCallback>
{
public:
    MTRPumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PumpConfigurationAndControlClusterOperationModeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<PumpConfigurationAndControlClusterOperationModeEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum value);
};

class MTRPumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackSubscriptionBridge
    : public MTRPumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge
{
public:
    MTRPumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallback>
{
public:
    MTRNullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<NullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRNullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::PumpConfigurationAndControl::OperationModeEnum> & value);
};

class MTRNullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge
{
public:
    MTRNullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePumpConfigurationAndControlClusterOperationModeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatClusterSetpointAdjustModeAttributeCallbackBridge
    : public MTRCallbackBridge<ThermostatClusterSetpointAdjustModeAttributeCallback>
{
public:
    MTRThermostatClusterSetpointAdjustModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThermostatClusterSetpointAdjustModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThermostatClusterSetpointAdjustModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<ThermostatClusterSetpointAdjustModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Thermostat::SetpointAdjustMode value);
};

class MTRThermostatClusterSetpointAdjustModeAttributeCallbackSubscriptionBridge
    : public MTRThermostatClusterSetpointAdjustModeAttributeCallbackBridge
{
public:
    MTRThermostatClusterSetpointAdjustModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatClusterSetpointAdjustModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatClusterSetpointAdjustModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatClusterSetpointAdjustModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableThermostatClusterSetpointAdjustModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableThermostatClusterSetpointAdjustModeAttributeCallback>
{
public:
    MTRNullableThermostatClusterSetpointAdjustModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableThermostatClusterSetpointAdjustModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableThermostatClusterSetpointAdjustModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableThermostatClusterSetpointAdjustModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Thermostat::SetpointAdjustMode> & value);
};

class MTRNullableThermostatClusterSetpointAdjustModeAttributeCallbackSubscriptionBridge
    : public MTRNullableThermostatClusterSetpointAdjustModeAttributeCallbackBridge
{
public:
    MTRNullableThermostatClusterSetpointAdjustModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableThermostatClusterSetpointAdjustModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableThermostatClusterSetpointAdjustModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableThermostatClusterSetpointAdjustModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatClusterThermostatControlSequenceAttributeCallbackBridge
    : public MTRCallbackBridge<ThermostatClusterThermostatControlSequenceAttributeCallback>
{
public:
    MTRThermostatClusterThermostatControlSequenceAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThermostatClusterThermostatControlSequenceAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThermostatClusterThermostatControlSequenceAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<ThermostatClusterThermostatControlSequenceAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Thermostat::ThermostatControlSequence value);
};

class MTRThermostatClusterThermostatControlSequenceAttributeCallbackSubscriptionBridge
    : public MTRThermostatClusterThermostatControlSequenceAttributeCallbackBridge
{
public:
    MTRThermostatClusterThermostatControlSequenceAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatClusterThermostatControlSequenceAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatClusterThermostatControlSequenceAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatClusterThermostatControlSequenceAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableThermostatClusterThermostatControlSequenceAttributeCallbackBridge
    : public MTRCallbackBridge<NullableThermostatClusterThermostatControlSequenceAttributeCallback>
{
public:
    MTRNullableThermostatClusterThermostatControlSequenceAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableThermostatClusterThermostatControlSequenceAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableThermostatClusterThermostatControlSequenceAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableThermostatClusterThermostatControlSequenceAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::Thermostat::ThermostatControlSequence> & value);
};

class MTRNullableThermostatClusterThermostatControlSequenceAttributeCallbackSubscriptionBridge
    : public MTRNullableThermostatClusterThermostatControlSequenceAttributeCallbackBridge
{
public:
    MTRNullableThermostatClusterThermostatControlSequenceAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableThermostatClusterThermostatControlSequenceAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableThermostatClusterThermostatControlSequenceAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableThermostatClusterThermostatControlSequenceAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatClusterThermostatRunningModeAttributeCallbackBridge
    : public MTRCallbackBridge<ThermostatClusterThermostatRunningModeAttributeCallback>
{
public:
    MTRThermostatClusterThermostatRunningModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThermostatClusterThermostatRunningModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThermostatClusterThermostatRunningModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<ThermostatClusterThermostatRunningModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Thermostat::ThermostatRunningMode value);
};

class MTRThermostatClusterThermostatRunningModeAttributeCallbackSubscriptionBridge
    : public MTRThermostatClusterThermostatRunningModeAttributeCallbackBridge
{
public:
    MTRThermostatClusterThermostatRunningModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatClusterThermostatRunningModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatClusterThermostatRunningModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatClusterThermostatRunningModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableThermostatClusterThermostatRunningModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableThermostatClusterThermostatRunningModeAttributeCallback>
{
public:
    MTRNullableThermostatClusterThermostatRunningModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableThermostatClusterThermostatRunningModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableThermostatClusterThermostatRunningModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullableThermostatClusterThermostatRunningModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Thermostat::ThermostatRunningMode> & value);
};

class MTRNullableThermostatClusterThermostatRunningModeAttributeCallbackSubscriptionBridge
    : public MTRNullableThermostatClusterThermostatRunningModeAttributeCallbackBridge
{
public:
    MTRNullableThermostatClusterThermostatRunningModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableThermostatClusterThermostatRunningModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableThermostatClusterThermostatRunningModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableThermostatClusterThermostatRunningModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRThermostatClusterThermostatSystemModeAttributeCallbackBridge
    : public MTRCallbackBridge<ThermostatClusterThermostatSystemModeAttributeCallback>
{
public:
    MTRThermostatClusterThermostatSystemModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ThermostatClusterThermostatSystemModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRThermostatClusterThermostatSystemModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<ThermostatClusterThermostatSystemModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Thermostat::ThermostatSystemMode value);
};

class MTRThermostatClusterThermostatSystemModeAttributeCallbackSubscriptionBridge
    : public MTRThermostatClusterThermostatSystemModeAttributeCallbackBridge
{
public:
    MTRThermostatClusterThermostatSystemModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRThermostatClusterThermostatSystemModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRThermostatClusterThermostatSystemModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRThermostatClusterThermostatSystemModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableThermostatClusterThermostatSystemModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableThermostatClusterThermostatSystemModeAttributeCallback>
{
public:
    MTRNullableThermostatClusterThermostatSystemModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableThermostatClusterThermostatSystemModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableThermostatClusterThermostatSystemModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableThermostatClusterThermostatSystemModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Thermostat::ThermostatSystemMode> & value);
};

class MTRNullableThermostatClusterThermostatSystemModeAttributeCallbackSubscriptionBridge
    : public MTRNullableThermostatClusterThermostatSystemModeAttributeCallbackBridge
{
public:
    MTRNullableThermostatClusterThermostatSystemModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableThermostatClusterThermostatSystemModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableThermostatClusterThermostatSystemModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableThermostatClusterThermostatSystemModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFanControlClusterFanModeSequenceTypeAttributeCallbackBridge
    : public MTRCallbackBridge<FanControlClusterFanModeSequenceTypeAttributeCallback>
{
public:
    MTRFanControlClusterFanModeSequenceTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FanControlClusterFanModeSequenceTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFanControlClusterFanModeSequenceTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<FanControlClusterFanModeSequenceTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FanControl::FanModeSequenceType value);
};

class MTRFanControlClusterFanModeSequenceTypeAttributeCallbackSubscriptionBridge
    : public MTRFanControlClusterFanModeSequenceTypeAttributeCallbackBridge
{
public:
    MTRFanControlClusterFanModeSequenceTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFanControlClusterFanModeSequenceTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFanControlClusterFanModeSequenceTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFanControlClusterFanModeSequenceTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFanControlClusterFanModeSequenceTypeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFanControlClusterFanModeSequenceTypeAttributeCallback>
{
public:
    MTRNullableFanControlClusterFanModeSequenceTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableFanControlClusterFanModeSequenceTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableFanControlClusterFanModeSequenceTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableFanControlClusterFanModeSequenceTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::FanControl::FanModeSequenceType> & value);
};

class MTRNullableFanControlClusterFanModeSequenceTypeAttributeCallbackSubscriptionBridge
    : public MTRNullableFanControlClusterFanModeSequenceTypeAttributeCallbackBridge
{
public:
    MTRNullableFanControlClusterFanModeSequenceTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFanControlClusterFanModeSequenceTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFanControlClusterFanModeSequenceTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFanControlClusterFanModeSequenceTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFanControlClusterFanModeTypeAttributeCallbackBridge
    : public MTRCallbackBridge<FanControlClusterFanModeTypeAttributeCallback>
{
public:
    MTRFanControlClusterFanModeTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FanControlClusterFanModeTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFanControlClusterFanModeTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<FanControlClusterFanModeTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FanControl::FanModeType value);
};

class MTRFanControlClusterFanModeTypeAttributeCallbackSubscriptionBridge
    : public MTRFanControlClusterFanModeTypeAttributeCallbackBridge
{
public:
    MTRFanControlClusterFanModeTypeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFanControlClusterFanModeTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFanControlClusterFanModeTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFanControlClusterFanModeTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFanControlClusterFanModeTypeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFanControlClusterFanModeTypeAttributeCallback>
{
public:
    MTRNullableFanControlClusterFanModeTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableFanControlClusterFanModeTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableFanControlClusterFanModeTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableFanControlClusterFanModeTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::FanControl::FanModeType> & value);
};

class MTRNullableFanControlClusterFanModeTypeAttributeCallbackSubscriptionBridge
    : public MTRNullableFanControlClusterFanModeTypeAttributeCallbackBridge
{
public:
    MTRNullableFanControlClusterFanModeTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFanControlClusterFanModeTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFanControlClusterFanModeTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFanControlClusterFanModeTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlClusterColorLoopActionAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlClusterColorLoopActionAttributeCallback>
{
public:
    MTRColorControlClusterColorLoopActionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlClusterColorLoopActionAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlClusterColorLoopActionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 MTRActionBlock action) :
        MTRCallbackBridge<ColorControlClusterColorLoopActionAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ColorControl::ColorLoopAction value);
};

class MTRColorControlClusterColorLoopActionAttributeCallbackSubscriptionBridge
    : public MTRColorControlClusterColorLoopActionAttributeCallbackBridge
{
public:
    MTRColorControlClusterColorLoopActionAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action,
                                                                             MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlClusterColorLoopActionAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlClusterColorLoopActionAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlClusterColorLoopActionAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableColorControlClusterColorLoopActionAttributeCallbackBridge
    : public MTRCallbackBridge<NullableColorControlClusterColorLoopActionAttributeCallback>
{
public:
    MTRNullableColorControlClusterColorLoopActionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableColorControlClusterColorLoopActionAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableColorControlClusterColorLoopActionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableColorControlClusterColorLoopActionAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::ColorLoopAction> & value);
};

class MTRNullableColorControlClusterColorLoopActionAttributeCallbackSubscriptionBridge
    : public MTRNullableColorControlClusterColorLoopActionAttributeCallbackBridge
{
public:
    MTRNullableColorControlClusterColorLoopActionAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableColorControlClusterColorLoopActionAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableColorControlClusterColorLoopActionAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableColorControlClusterColorLoopActionAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlClusterColorLoopDirectionAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlClusterColorLoopDirectionAttributeCallback>
{
public:
    MTRColorControlClusterColorLoopDirectionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlClusterColorLoopDirectionAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlClusterColorLoopDirectionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<ColorControlClusterColorLoopDirectionAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ColorControl::ColorLoopDirection value);
};

class MTRColorControlClusterColorLoopDirectionAttributeCallbackSubscriptionBridge
    : public MTRColorControlClusterColorLoopDirectionAttributeCallbackBridge
{
public:
    MTRColorControlClusterColorLoopDirectionAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlClusterColorLoopDirectionAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlClusterColorLoopDirectionAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlClusterColorLoopDirectionAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableColorControlClusterColorLoopDirectionAttributeCallbackBridge
    : public MTRCallbackBridge<NullableColorControlClusterColorLoopDirectionAttributeCallback>
{
public:
    MTRNullableColorControlClusterColorLoopDirectionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableColorControlClusterColorLoopDirectionAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableColorControlClusterColorLoopDirectionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableColorControlClusterColorLoopDirectionAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::ColorLoopDirection> & value);
};

class MTRNullableColorControlClusterColorLoopDirectionAttributeCallbackSubscriptionBridge
    : public MTRNullableColorControlClusterColorLoopDirectionAttributeCallbackBridge
{
public:
    MTRNullableColorControlClusterColorLoopDirectionAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableColorControlClusterColorLoopDirectionAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableColorControlClusterColorLoopDirectionAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableColorControlClusterColorLoopDirectionAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlClusterColorModeAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlClusterColorModeAttributeCallback>
{
public:
    MTRColorControlClusterColorModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlClusterColorModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlClusterColorModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<ColorControlClusterColorModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ColorControl::ColorMode value);
};

class MTRColorControlClusterColorModeAttributeCallbackSubscriptionBridge
    : public MTRColorControlClusterColorModeAttributeCallbackBridge
{
public:
    MTRColorControlClusterColorModeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlClusterColorModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlClusterColorModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlClusterColorModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableColorControlClusterColorModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableColorControlClusterColorModeAttributeCallback>
{
public:
    MTRNullableColorControlClusterColorModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableColorControlClusterColorModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableColorControlClusterColorModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableColorControlClusterColorModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::ColorMode> & value);
};

class MTRNullableColorControlClusterColorModeAttributeCallbackSubscriptionBridge
    : public MTRNullableColorControlClusterColorModeAttributeCallbackBridge
{
public:
    MTRNullableColorControlClusterColorModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableColorControlClusterColorModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableColorControlClusterColorModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableColorControlClusterColorModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlClusterHueDirectionAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlClusterHueDirectionAttributeCallback>
{
public:
    MTRColorControlClusterHueDirectionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlClusterHueDirectionAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlClusterHueDirectionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<ColorControlClusterHueDirectionAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ColorControl::HueDirection value);
};

class MTRColorControlClusterHueDirectionAttributeCallbackSubscriptionBridge
    : public MTRColorControlClusterHueDirectionAttributeCallbackBridge
{
public:
    MTRColorControlClusterHueDirectionAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlClusterHueDirectionAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlClusterHueDirectionAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlClusterHueDirectionAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableColorControlClusterHueDirectionAttributeCallbackBridge
    : public MTRCallbackBridge<NullableColorControlClusterHueDirectionAttributeCallback>
{
public:
    MTRNullableColorControlClusterHueDirectionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableColorControlClusterHueDirectionAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableColorControlClusterHueDirectionAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableColorControlClusterHueDirectionAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::HueDirection> & value);
};

class MTRNullableColorControlClusterHueDirectionAttributeCallbackSubscriptionBridge
    : public MTRNullableColorControlClusterHueDirectionAttributeCallbackBridge
{
public:
    MTRNullableColorControlClusterHueDirectionAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableColorControlClusterHueDirectionAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableColorControlClusterHueDirectionAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableColorControlClusterHueDirectionAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlClusterHueMoveModeAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlClusterHueMoveModeAttributeCallback>
{
public:
    MTRColorControlClusterHueMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlClusterHueMoveModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlClusterHueMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<ColorControlClusterHueMoveModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ColorControl::HueMoveMode value);
};

class MTRColorControlClusterHueMoveModeAttributeCallbackSubscriptionBridge
    : public MTRColorControlClusterHueMoveModeAttributeCallbackBridge
{
public:
    MTRColorControlClusterHueMoveModeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlClusterHueMoveModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlClusterHueMoveModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlClusterHueMoveModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableColorControlClusterHueMoveModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableColorControlClusterHueMoveModeAttributeCallback>
{
public:
    MTRNullableColorControlClusterHueMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableColorControlClusterHueMoveModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableColorControlClusterHueMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableColorControlClusterHueMoveModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::HueMoveMode> & value);
};

class MTRNullableColorControlClusterHueMoveModeAttributeCallbackSubscriptionBridge
    : public MTRNullableColorControlClusterHueMoveModeAttributeCallbackBridge
{
public:
    MTRNullableColorControlClusterHueMoveModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableColorControlClusterHueMoveModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableColorControlClusterHueMoveModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableColorControlClusterHueMoveModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlClusterHueStepModeAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlClusterHueStepModeAttributeCallback>
{
public:
    MTRColorControlClusterHueStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlClusterHueStepModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlClusterHueStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<ColorControlClusterHueStepModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ColorControl::HueStepMode value);
};

class MTRColorControlClusterHueStepModeAttributeCallbackSubscriptionBridge
    : public MTRColorControlClusterHueStepModeAttributeCallbackBridge
{
public:
    MTRColorControlClusterHueStepModeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlClusterHueStepModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlClusterHueStepModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlClusterHueStepModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableColorControlClusterHueStepModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableColorControlClusterHueStepModeAttributeCallback>
{
public:
    MTRNullableColorControlClusterHueStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableColorControlClusterHueStepModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableColorControlClusterHueStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableColorControlClusterHueStepModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::HueStepMode> & value);
};

class MTRNullableColorControlClusterHueStepModeAttributeCallbackSubscriptionBridge
    : public MTRNullableColorControlClusterHueStepModeAttributeCallbackBridge
{
public:
    MTRNullableColorControlClusterHueStepModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableColorControlClusterHueStepModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableColorControlClusterHueStepModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableColorControlClusterHueStepModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlClusterSaturationMoveModeAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlClusterSaturationMoveModeAttributeCallback>
{
public:
    MTRColorControlClusterSaturationMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlClusterSaturationMoveModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlClusterSaturationMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<ColorControlClusterSaturationMoveModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ColorControl::SaturationMoveMode value);
};

class MTRColorControlClusterSaturationMoveModeAttributeCallbackSubscriptionBridge
    : public MTRColorControlClusterSaturationMoveModeAttributeCallbackBridge
{
public:
    MTRColorControlClusterSaturationMoveModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlClusterSaturationMoveModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlClusterSaturationMoveModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlClusterSaturationMoveModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableColorControlClusterSaturationMoveModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableColorControlClusterSaturationMoveModeAttributeCallback>
{
public:
    MTRNullableColorControlClusterSaturationMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableColorControlClusterSaturationMoveModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableColorControlClusterSaturationMoveModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableColorControlClusterSaturationMoveModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::SaturationMoveMode> & value);
};

class MTRNullableColorControlClusterSaturationMoveModeAttributeCallbackSubscriptionBridge
    : public MTRNullableColorControlClusterSaturationMoveModeAttributeCallbackBridge
{
public:
    MTRNullableColorControlClusterSaturationMoveModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableColorControlClusterSaturationMoveModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableColorControlClusterSaturationMoveModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableColorControlClusterSaturationMoveModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRColorControlClusterSaturationStepModeAttributeCallbackBridge
    : public MTRCallbackBridge<ColorControlClusterSaturationStepModeAttributeCallback>
{
public:
    MTRColorControlClusterSaturationStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ColorControlClusterSaturationStepModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRColorControlClusterSaturationStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<ColorControlClusterSaturationStepModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ColorControl::SaturationStepMode value);
};

class MTRColorControlClusterSaturationStepModeAttributeCallbackSubscriptionBridge
    : public MTRColorControlClusterSaturationStepModeAttributeCallbackBridge
{
public:
    MTRColorControlClusterSaturationStepModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRColorControlClusterSaturationStepModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRColorControlClusterSaturationStepModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRColorControlClusterSaturationStepModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableColorControlClusterSaturationStepModeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableColorControlClusterSaturationStepModeAttributeCallback>
{
public:
    MTRNullableColorControlClusterSaturationStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableColorControlClusterSaturationStepModeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableColorControlClusterSaturationStepModeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableColorControlClusterSaturationStepModeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ColorControl::SaturationStepMode> & value);
};

class MTRNullableColorControlClusterSaturationStepModeAttributeCallbackSubscriptionBridge
    : public MTRNullableColorControlClusterSaturationStepModeAttributeCallbackBridge
{
public:
    MTRNullableColorControlClusterSaturationStepModeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableColorControlClusterSaturationStepModeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableColorControlClusterSaturationStepModeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableColorControlClusterSaturationStepModeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge
    : public MTRCallbackBridge<IlluminanceMeasurementClusterLightSensorTypeAttributeCallback>
{
public:
    MTRIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<IlluminanceMeasurementClusterLightSensorTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<IlluminanceMeasurementClusterLightSensorTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::IlluminanceMeasurement::LightSensorType value);
};

class MTRIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackSubscriptionBridge
    : public MTRIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge
{
public:
    MTRIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallback>
{
public:
    MTRNullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::IlluminanceMeasurement::LightSensorType> & value);
};

class MTRNullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackSubscriptionBridge
    : public MTRNullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge
{
public:
    MTRNullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableIlluminanceMeasurementClusterLightSensorTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OccupancySensingClusterOccupancySensorTypeEnumAttributeCallback>
{
public:
    MTROccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OccupancySensingClusterOccupancySensorTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<OccupancySensingClusterOccupancySensorTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OccupancySensing::OccupancySensorTypeEnum value);
};

class MTROccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackSubscriptionBridge
    : public MTROccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge
{
public:
    MTROccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallback>
{
public:
    MTRNullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OccupancySensing::OccupancySensorTypeEnum> & value);
};

class MTRNullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOccupancySensingClusterOccupancySensorTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<CarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::CarbonMonoxideMeasurement::LevelValueEnum value);
};

class MTRCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonMonoxideMeasurement::LevelValueEnum> & value);
};

class MTRNullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCarbonMonoxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<CarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<CarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::CarbonMonoxideMeasurement::MeasurementMediumEnum value);
};

class MTRCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler) :
        MTRCallbackBridge<NullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                          OnSuccessFn){};

    MTRNullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler,
                                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                          OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonMonoxideMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCarbonMonoxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<CarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::CarbonMonoxideMeasurement::MeasurementUnitEnum value);
};

class MTRCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<NullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRNullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonMonoxideMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCarbonMonoxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonDioxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<CarbonDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::CarbonDioxideMeasurement::LevelValueEnum value);
};

class MTRCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonDioxideMeasurement::LevelValueEnum> & value);
};

class MTRNullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCarbonDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<CarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<CarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::CarbonDioxideMeasurement::MeasurementMediumEnum value);
};

class MTRCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonDioxideMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCarbonDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<CarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<CarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::CarbonDioxideMeasurement::MeasurementUnitEnum value);
};

class MTRCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<NullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTRNullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::CarbonDioxideMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCarbonDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTREthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<EthyleneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::EthyleneMeasurement::LevelValueEnum value);
};

class MTREthyleneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTREthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTREthyleneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableEthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableEthyleneMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableEthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableEthyleneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableEthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NullableEthyleneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneMeasurement::LevelValueEnum> & value);
};

class MTRNullableEthyleneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableEthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableEthyleneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableEthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableEthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableEthyleneMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTREthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<EthyleneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::EthyleneMeasurement::MeasurementMediumEnum value);
};

class MTREthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTREthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTREthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableEthyleneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTREthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<EthyleneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::EthyleneMeasurement::MeasurementUnitEnum value);
};

class MTREthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTREthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTREthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableEthyleneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneOxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTREthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneOxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<EthyleneOxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::EthyleneOxideMeasurement::LevelValueEnum value);
};

class MTREthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTREthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTREthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneOxideMeasurement::LevelValueEnum> & value);
};

class MTRNullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableEthyleneOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTREthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<EthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<EthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::EthyleneOxideMeasurement::MeasurementMediumEnum value);
};

class MTREthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTREthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTREthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneOxideMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableEthyleneOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTREthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<EthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTREthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<EthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTREthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<EthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::EthyleneOxideMeasurement::MeasurementUnitEnum value);
};

class MTREthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTREthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTREthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTREthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTREthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTREthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<NullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTRNullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::EthyleneOxideMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableEthyleneOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<HydrogenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::HydrogenMeasurement::LevelValueEnum value);
};

class MTRHydrogenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRHydrogenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableHydrogenMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableHydrogenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NullableHydrogenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenMeasurement::LevelValueEnum> & value);
};

class MTRNullableHydrogenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableHydrogenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableHydrogenMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<HydrogenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::HydrogenMeasurement::MeasurementMediumEnum value);
};

class MTRHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableHydrogenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<HydrogenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::HydrogenMeasurement::MeasurementUnitEnum value);
};

class MTRHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableHydrogenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<HydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::HydrogenSulfideMeasurement::LevelValueEnum value);
};

class MTRHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenSulfideMeasurement::LevelValueEnum> & value);
};

class MTRNullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableHydrogenSulfideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<HydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<HydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::HydrogenSulfideMeasurement::MeasurementMediumEnum value);
};

class MTRHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler) :
        MTRCallbackBridge<NullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                           OnSuccessFn){};

    MTRNullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler,
                                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                           OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenSulfideMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableHydrogenSulfideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<HydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<HydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<HydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::HydrogenSulfideMeasurement::MeasurementUnitEnum value);
};

class MTRHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::HydrogenSulfideMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableHydrogenSulfideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NitricOxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitricOxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NitricOxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::NitricOxideMeasurement::LevelValueEnum value);
};

class MTRNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::NitricOxideMeasurement::LevelValueEnum> & value);
};

class MTRNullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableNitricOxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::NitricOxideMeasurement::MeasurementMediumEnum value);
};

class MTRNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<NullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTRNullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::NitricOxideMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableNitricOxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::NitricOxideMeasurement::MeasurementUnitEnum value);
};

class MTRNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler) :
        MTRCallbackBridge<NullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler,
                                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                     OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::NitricOxideMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableNitricOxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::NitrogenDioxideMeasurement::LevelValueEnum value);
};

class MTRNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::NitrogenDioxideMeasurement::LevelValueEnum> & value);
};

class MTRNullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableNitrogenDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::NitrogenDioxideMeasurement::MeasurementMediumEnum value);
};

class MTRNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler) :
        MTRCallbackBridge<NullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                           OnSuccessFn){};

    MTRNullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler,
                                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                           OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::NitrogenDioxideMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableNitrogenDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::NitrogenDioxideMeasurement::MeasurementUnitEnum value);
};

class MTRNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::NitrogenDioxideMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableNitrogenDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OxygenMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTROxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OxygenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<OxygenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OxygenMeasurement::LevelValueEnum value);
};

class MTROxygenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTROxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTROxygenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOxygenMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableOxygenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullableOxygenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::OxygenMeasurement::LevelValueEnum> & value);
};

class MTRNullableOxygenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableOxygenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTROxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<OxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OxygenMeasurement::MeasurementMediumEnum value);
};

class MTROxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTROxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTROxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OxygenMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTROxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<OxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OxygenMeasurement::MeasurementUnitEnum value);
};

class MTROxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTROxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTROxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OxygenMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OzoneMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTROzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OzoneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<OzoneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OzoneMeasurement::LevelValueEnum value);
};

class MTROzoneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTROzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTROzoneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOzoneMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableOzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableOzoneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableOzoneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::OzoneMeasurement::LevelValueEnum> & value);
};

class MTRNullableOzoneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableOzoneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOzoneMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OzoneMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTROzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OzoneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<OzoneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OzoneMeasurement::MeasurementMediumEnum value);
};

class MTROzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTROzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTROzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OzoneMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOzoneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTROzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<OzoneMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTROzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<OzoneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTROzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<OzoneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::OzoneMeasurement::MeasurementUnitEnum value);
};

class MTROzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTROzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTROzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTROzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTROzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTROzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::OzoneMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableOzoneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<SulfurDioxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfurDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<SulfurDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::SulfurDioxideMeasurement::LevelValueEnum value);
};

class MTRSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::SulfurDioxideMeasurement::LevelValueEnum> & value);
};

class MTRNullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableSulfurDioxideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<SulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<SulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<SulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::SulfurDioxideMeasurement::MeasurementMediumEnum value);
};

class MTRSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::SulfurDioxideMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableSulfurDioxideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<SulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<SulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::SulfurDioxideMeasurement::MeasurementUnitEnum value);
};

class MTRSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<NullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTRNullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::SulfurDioxideMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableSulfurDioxideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<DissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<DissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DissolvedOxygenMeasurement::LevelValueEnum value);
};

class MTRDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::DissolvedOxygenMeasurement::LevelValueEnum> & value);
};

class MTRNullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDissolvedOxygenMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<DissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<DissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DissolvedOxygenMeasurement::MeasurementMediumEnum value);
};

class MTRDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler) :
        MTRCallbackBridge<NullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                           OnSuccessFn){};

    MTRNullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler,
                                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                           OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::DissolvedOxygenMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDissolvedOxygenMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<DissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<DissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<DissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::DissolvedOxygenMeasurement::MeasurementUnitEnum value);
};

class MTRDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::DissolvedOxygenMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableDissolvedOxygenMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BromateMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromateMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<BromateMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BromateMeasurement::LevelValueEnum value);
};

class MTRBromateMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRBromateMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBromateMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableBromateMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableBromateMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::BromateMeasurement::LevelValueEnum> & value);
};

class MTRNullableBromateMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableBromateMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBromateMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BromateMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromateMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<BromateMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BromateMeasurement::MeasurementMediumEnum value);
};

class MTRBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::BromateMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBromateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BromateMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromateMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<BromateMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BromateMeasurement::MeasurementUnitEnum value);
};

class MTRBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::BromateMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBromateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChloraminesMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloraminesMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<ChloraminesMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChloraminesMeasurement::LevelValueEnum value);
};

class MTRChloraminesMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRChloraminesMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChloraminesMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableChloraminesMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableChloraminesMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ChloraminesMeasurement::LevelValueEnum> & value);
};

class MTRNullableChloraminesMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableChloraminesMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChloraminesMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<ChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChloraminesMeasurement::MeasurementMediumEnum value);
};

class MTRChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<NullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTRNullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ChloraminesMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChloraminesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<ChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChloraminesMeasurement::MeasurementUnitEnum value);
};

class MTRChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler) :
        MTRCallbackBridge<NullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler,
                                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                     OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ChloraminesMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChloraminesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorineMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChlorineMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<ChlorineMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChlorineMeasurement::LevelValueEnum value);
};

class MTRChlorineMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRChlorineMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChlorineMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableChlorineMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NullableChlorineMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorineMeasurement::LevelValueEnum> & value);
};

class MTRNullableChlorineMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableChlorineMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChlorineMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorineMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChlorineMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<ChlorineMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChlorineMeasurement::MeasurementMediumEnum value);
};

class MTRChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorineMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChlorineMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorineMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChlorineMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<ChlorineMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChlorineMeasurement::MeasurementUnitEnum value);
};

class MTRChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorineMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChlorineMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<FecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<FecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FecalColiformEColiMeasurement::LevelValueEnum value);
};

class MTRFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<NullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTRNullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::FecalColiformEColiMeasurement::LevelValueEnum> & value);
};

class MTRNullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFecalColiformEColiMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<FecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<FecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<FecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FecalColiformEColiMeasurement::MeasurementMediumEnum value);
};

class MTRFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                ResponseHandler handler) :
        MTRCallbackBridge<NullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                              OnSuccessFn){};

    MTRNullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                ResponseHandler handler,
                                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::FecalColiformEColiMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFecalColiformEColiMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<FecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<FecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<FecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FecalColiformEColiMeasurement::MeasurementUnitEnum value);
};

class MTRFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                              ResponseHandler handler) :
        MTRCallbackBridge<NullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                            OnSuccessFn){};

    MTRNullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                              ResponseHandler handler,
                                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                            OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::FecalColiformEColiMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFecalColiformEColiMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<FluorideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FluorideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<FluorideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FluorideMeasurement::LevelValueEnum value);
};

class MTRFluorideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRFluorideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFluorideMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableFluorideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NullableFluorideMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::FluorideMeasurement::LevelValueEnum> & value);
};

class MTRNullableFluorideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableFluorideMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFluorideMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<FluorideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FluorideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<FluorideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FluorideMeasurement::MeasurementMediumEnum value);
};

class MTRFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::FluorideMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFluorideMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<FluorideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FluorideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<FluorideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FluorideMeasurement::MeasurementUnitEnum value);
};

class MTRFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::FluorideMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFluorideMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<HaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::HaloaceticAcidsMeasurement::LevelValueEnum value);
};

class MTRHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::HaloaceticAcidsMeasurement::LevelValueEnum> & value);
};

class MTRNullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableHaloaceticAcidsMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<HaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::HaloaceticAcidsMeasurement::MeasurementMediumEnum value);
};

class MTRHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler) :
        MTRCallbackBridge<NullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                           OnSuccessFn){};

    MTRNullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                             ResponseHandler handler,
                                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                           OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::HaloaceticAcidsMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableHaloaceticAcidsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<HaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<HaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::HaloaceticAcidsMeasurement::MeasurementUnitEnum value);
};

class MTRHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::HaloaceticAcidsMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableHaloaceticAcidsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TotalTrihalomethanesMeasurement::LevelValueEnum value);
};

class MTRTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::TotalTrihalomethanesMeasurement::LevelValueEnum> & value);
};

class MTRNullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTotalTrihalomethanesMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TotalTrihalomethanesMeasurement::MeasurementMediumEnum value);
};

class MTRTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                  ResponseHandler handler) :
        MTRCallbackBridge<NullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                                OnSuccessFn){};

    MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                  ResponseHandler handler,
                                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::TotalTrihalomethanesMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<TotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TotalTrihalomethanesMeasurement::MeasurementUnitEnum value);
};

class MTRTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                ResponseHandler handler) :
        MTRCallbackBridge<NullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                              OnSuccessFn){};

    MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                ResponseHandler handler,
                                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::TotalTrihalomethanesMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTotalTrihalomethanesMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TotalColiformBacteriaMeasurement::LevelValueEnum value);
};

class MTRTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler) :
        MTRCallbackBridge<NullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler,
                                                                                                          OnSuccessFn){};

    MTRNullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler,
                                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                          OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::TotalColiformBacteriaMeasurement::LevelValueEnum> & value);
};

class MTRNullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTotalColiformBacteriaMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TotalColiformBacteriaMeasurement::MeasurementMediumEnum value);
};

class MTRTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                                 OnSuccessFn){};

    MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                   ResponseHandler handler,
                                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::TotalColiformBacteriaMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                       OnSuccessFn){};

    MTRTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                         ResponseHandler handler,
                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<TotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                       OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TotalColiformBacteriaMeasurement::MeasurementUnitEnum value);
};

class MTRTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                 ResponseHandler handler) :
        MTRCallbackBridge<NullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                               OnSuccessFn){};

    MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                 ResponseHandler handler,
                                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::TotalColiformBacteriaMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTotalColiformBacteriaMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TurbidityMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TurbidityMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<TurbidityMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TurbidityMeasurement::LevelValueEnum value);
};

class MTRTurbidityMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRTurbidityMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTurbidityMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableTurbidityMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableTurbidityMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::TurbidityMeasurement::LevelValueEnum> & value);
};

class MTRNullableTurbidityMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableTurbidityMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTurbidityMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TurbidityMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TurbidityMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<TurbidityMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TurbidityMeasurement::MeasurementMediumEnum value);
};

class MTRTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler) :
        MTRCallbackBridge<NullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler,
                                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                     OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::TurbidityMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTurbidityMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TurbidityMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TurbidityMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<TurbidityMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TurbidityMeasurement::MeasurementUnitEnum value);
};

class MTRTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::TurbidityMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTurbidityMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<CopperMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CopperMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<CopperMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::CopperMeasurement::LevelValueEnum value);
};

class MTRCopperMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRCopperMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableCopperMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableCopperMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullableCopperMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::CopperMeasurement::LevelValueEnum> & value);
};

class MTRNullableCopperMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableCopperMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCopperMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<CopperMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CopperMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<CopperMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::CopperMeasurement::MeasurementMediumEnum value);
};

class MTRCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::CopperMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCopperMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<CopperMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<CopperMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<CopperMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::CopperMeasurement::MeasurementUnitEnum value);
};

class MTRCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::CopperMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableCopperMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<LeadMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LeadMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<LeadMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::LeadMeasurement::LevelValueEnum value);
};

class MTRLeadMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRLeadMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableLeadMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableLeadMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableLeadMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::LeadMeasurement::LevelValueEnum> & value);
};

class MTRNullableLeadMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableLeadMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableLeadMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<LeadMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LeadMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<LeadMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::LeadMeasurement::MeasurementMediumEnum value);
};

class MTRLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::LeadMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableLeadMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<LeadMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<LeadMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<LeadMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::LeadMeasurement::MeasurementUnitEnum value);
};

class MTRLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::LeadMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableLeadMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ManganeseMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ManganeseMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<ManganeseMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ManganeseMeasurement::LevelValueEnum value);
};

class MTRManganeseMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRManganeseMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableManganeseMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableManganeseMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableManganeseMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ManganeseMeasurement::LevelValueEnum> & value);
};

class MTRNullableManganeseMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableManganeseMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableManganeseMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ManganeseMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ManganeseMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<ManganeseMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ManganeseMeasurement::MeasurementMediumEnum value);
};

class MTRManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler) :
        MTRCallbackBridge<NullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler,
                                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                     OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ManganeseMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableManganeseMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ManganeseMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ManganeseMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<ManganeseMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ManganeseMeasurement::MeasurementUnitEnum value);
};

class MTRManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ManganeseMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableManganeseMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<SulfateMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfateMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<SulfateMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::SulfateMeasurement::LevelValueEnum value);
};

class MTRSulfateMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRSulfateMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableSulfateMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableSulfateMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableSulfateMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::SulfateMeasurement::LevelValueEnum> & value);
};

class MTRNullableSulfateMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableSulfateMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableSulfateMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<SulfateMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfateMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<SulfateMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::SulfateMeasurement::MeasurementMediumEnum value);
};

class MTRSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::SulfateMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableSulfateMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<SulfateMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SulfateMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<SulfateMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::SulfateMeasurement::MeasurementUnitEnum value);
};

class MTRSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::SulfateMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableSulfateMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<BromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<BromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BromodichloromethaneMeasurement::LevelValueEnum value);
};

class MTRBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::BromodichloromethaneMeasurement::LevelValueEnum> & value);
};

class MTRNullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBromodichloromethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<BromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<BromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BromodichloromethaneMeasurement::MeasurementMediumEnum value);
};

class MTRBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                  ResponseHandler handler) :
        MTRCallbackBridge<NullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                                OnSuccessFn){};

    MTRNullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                  ResponseHandler handler,
                                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::BromodichloromethaneMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBromodichloromethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<BromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<BromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BromodichloromethaneMeasurement::MeasurementUnitEnum value);
};

class MTRBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                ResponseHandler handler) :
        MTRCallbackBridge<NullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                              OnSuccessFn){};

    MTRNullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                ResponseHandler handler,
                                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::BromodichloromethaneMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBromodichloromethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BromoformMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromoformMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<BromoformMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BromoformMeasurement::LevelValueEnum value);
};

class MTRBromoformMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRBromoformMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBromoformMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableBromoformMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableBromoformMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::BromoformMeasurement::LevelValueEnum> & value);
};

class MTRNullableBromoformMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableBromoformMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBromoformMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BromoformMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromoformMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<BromoformMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BromoformMeasurement::MeasurementMediumEnum value);
};

class MTRBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler) :
        MTRCallbackBridge<NullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                       ResponseHandler handler,
                                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                     OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::BromoformMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBromoformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<BromoformMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<BromoformMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<BromoformMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::BromoformMeasurement::MeasurementUnitEnum value);
};

class MTRBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler) :
        MTRCallbackBridge<NullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                     ResponseHandler handler,
                                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                   OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::BromoformMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableBromoformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChlorodibromomethaneMeasurement::LevelValueEnum value);
};

class MTRChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler) :
        MTRCallbackBridge<NullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler,
                                                                                                         OnSuccessFn){};

    MTRNullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                           ResponseHandler handler,
                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                         OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorodibromomethaneMeasurement::LevelValueEnum> & value);
};

class MTRNullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChlorodibromomethaneMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChlorodibromomethaneMeasurement::MeasurementMediumEnum value);
};

class MTRChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                  ResponseHandler handler) :
        MTRCallbackBridge<NullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                                OnSuccessFn){};

    MTRNullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                  ResponseHandler handler,
                                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorodibromomethaneMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChlorodibromomethaneMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<ChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChlorodibromomethaneMeasurement::MeasurementUnitEnum value);
};

class MTRChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                ResponseHandler handler) :
        MTRCallbackBridge<NullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                              OnSuccessFn){};

    MTRNullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                ResponseHandler handler,
                                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::ChlorodibromomethaneMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChlorodibromomethaneMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChloroformMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloroformMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<ChloroformMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChloroformMeasurement::LevelValueEnum value);
};

class MTRChloroformMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRChloroformMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChloroformMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableChloroformMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableChloroformMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ChloroformMeasurement::LevelValueEnum> & value);
};

class MTRNullableChloroformMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableChloroformMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChloroformMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChloroformMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloroformMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<ChloroformMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChloroformMeasurement::MeasurementMediumEnum value);
};

class MTRChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<NullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRNullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<NullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ChloroformMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChloroformMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChloroformMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChloroformMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<ChloroformMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ChloroformMeasurement::MeasurementUnitEnum value);
};

class MTRChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ChloroformMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChloroformMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<SodiumMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SodiumMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<SodiumMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::SodiumMeasurement::LevelValueEnum value);
};

class MTRSodiumMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRSodiumMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableSodiumMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableSodiumMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             MTRActionBlock action) :
        MTRCallbackBridge<NullableSodiumMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::SodiumMeasurement::LevelValueEnum> & value);
};

class MTRNullableSodiumMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableSodiumMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableSodiumMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<SodiumMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SodiumMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<SodiumMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::SodiumMeasurement::MeasurementMediumEnum value);
};

class MTRSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::SodiumMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableSodiumMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<SodiumMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<SodiumMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<SodiumMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::SodiumMeasurement::MeasurementUnitEnum value);
};

class MTRSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::SodiumMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableSodiumMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM25MeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PM25MeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRPM25MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM25MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM25MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<PM25MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Pm25Measurement::LevelValueEnum value);
};

class MTRPM25MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRPM25MeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRPM25MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM25MeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM25MeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM25MeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePM25MeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePM25MeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullablePM25MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePM25MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePM25MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullablePM25MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Pm25Measurement::LevelValueEnum> & value);
};

class MTRNullablePM25MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePM25MeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullablePM25MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePM25MeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePM25MeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePM25MeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PM25MeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRPM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM25MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<PM25MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Pm25Measurement::MeasurementMediumEnum value);
};

class MTRPM25MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRPM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRPM25MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::Pm25Measurement::MeasurementMediumEnum> & value);
};

class MTRNullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePM25MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PM25MeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRPM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM25MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<PM25MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Pm25Measurement::MeasurementUnitEnum value);
};

class MTRPM25MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRPM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRPM25MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::Pm25Measurement::MeasurementUnitEnum> & value);
};

class MTRNullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePM25MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<FormaldehydeMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FormaldehydeMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<FormaldehydeMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FormaldehydeMeasurement::LevelValueEnum value);
};

class MTRFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::FormaldehydeMeasurement::LevelValueEnum> & value);
};

class MTRNullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFormaldehydeMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<FormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<FormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FormaldehydeMeasurement::MeasurementMediumEnum value);
};

class MTRFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler) :
        MTRCallbackBridge<NullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                        OnSuccessFn){};

    MTRNullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                          ResponseHandler handler,
                                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                        OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::FormaldehydeMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFormaldehydeMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<FormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<FormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FormaldehydeMeasurement::MeasurementUnitEnum value);
};

class MTRFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler) :
        MTRCallbackBridge<NullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                      OnSuccessFn){};

    MTRNullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        MTRActionBlock action) :
        MTRCallbackBridge<NullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::FormaldehydeMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFormaldehydeMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM1MeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PM1MeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRPM1MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM1MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM1MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<PM1MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Pm1Measurement::LevelValueEnum value);
};

class MTRPM1MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRPM1MeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRPM1MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM1MeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM1MeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM1MeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePM1MeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePM1MeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullablePM1MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePM1MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePM1MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullablePM1MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Pm1Measurement::LevelValueEnum> & value);
};

class MTRNullablePM1MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePM1MeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullablePM1MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePM1MeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePM1MeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePM1MeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PM1MeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRPM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM1MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<PM1MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Pm1Measurement::MeasurementMediumEnum value);
};

class MTRPM1MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRPM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRPM1MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::Pm1Measurement::MeasurementMediumEnum> & value);
};

class MTRNullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePM1MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PM1MeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRPM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM1MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<PM1MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Pm1Measurement::MeasurementUnitEnum value);
};

class MTRPM1MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRPM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRPM1MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               MTRActionBlock action) :
        MTRCallbackBridge<NullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Pm1Measurement::MeasurementUnitEnum> & value);
};

class MTRNullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePM1MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM10MeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PM10MeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRPM10MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM10MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM10MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<PM10MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Pm10Measurement::LevelValueEnum value);
};

class MTRPM10MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRPM10MeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRPM10MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM10MeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM10MeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM10MeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePM10MeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePM10MeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullablePM10MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePM10MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePM10MeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullablePM10MeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Pm10Measurement::LevelValueEnum> & value);
};

class MTRNullablePM10MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePM10MeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullablePM10MeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePM10MeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePM10MeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePM10MeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PM10MeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRPM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM10MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<PM10MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Pm10Measurement::MeasurementMediumEnum value);
};

class MTRPM10MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRPM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRPM10MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::Pm10Measurement::MeasurementMediumEnum> & value);
};

class MTRNullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePM10MeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRPM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<PM10MeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRPM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<PM10MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRPM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        MTRActionBlock action) :
        MTRCallbackBridge<PM10MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Pm10Measurement::MeasurementUnitEnum value);
};

class MTRPM10MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRPM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRPM10MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRPM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRPM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRPM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                MTRActionBlock action) :
        MTRCallbackBridge<NullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                              OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::Pm10Measurement::MeasurementUnitEnum> & value);
};

class MTRNullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullablePM10MeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler,
                                                                                                          OnSuccessFn){};

    MTRTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                            ResponseHandler handler,
                                                                                            MTRActionBlock action) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action,
                                                                                                          OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::LevelValueEnum value);
};

class MTRTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler,
                                                                                                                  OnSuccessFn){};

    MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                    ResponseHandler handler,
                                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::LevelValueEnum> &
            value);
};

class MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler,
                                                                                                                 OnSuccessFn){};

    MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                   ResponseHandler handler,
                                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::MeasurementMediumEnum value);
};

class MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(
        dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallback>(
            queue, handler, OnSuccessFn){};

    MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                           ResponseHandler handler,
                                                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::MeasurementMediumEnum> &
            value);
};

class MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler,
                                                                                                               action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::
        KeepAliveOnCallback;
    using MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                 ResponseHandler handler) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler,
                                                                                                               OnSuccessFn){};

    MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                 ResponseHandler handler,
                                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<TotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::MeasurementUnitEnum value);
};

class MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                         ResponseHandler handler) :
        MTRCallbackBridge<NullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallback>(
            queue, handler, OnSuccessFn){};

    MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                                         ResponseHandler handler,
                                                                                                         MTRActionBlock action) :
        MTRCallbackBridge<NullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallback>(
            queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::TotalVolatileOrganicCompoundsMeasurement::MeasurementUnitEnum> &
            value);
};

class MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler,
                                                                                                             action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTotalVolatileOrganicCompoundsMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<RadonMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RadonMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<RadonMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::RadonMeasurement::LevelValueEnum value);
};

class MTRRadonMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRRadonMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableRadonMeasurementClusterLevelValueEnumAttributeCallback>
{
public:
    MTRNullableRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableRadonMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableRadonMeasurementClusterLevelValueEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::RadonMeasurement::LevelValueEnum> & value);
};

class MTRNullableRadonMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge
{
public:
    MTRNullableRadonMeasurementClusterLevelValueEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableRadonMeasurementClusterLevelValueEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<RadonMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RadonMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<RadonMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::RadonMeasurement::MeasurementMediumEnum value);
};

class MTRRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallback>
{
public:
    MTRNullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::RadonMeasurement::MeasurementMediumEnum> & value);
};

class MTRNullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge
{
public:
    MTRNullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableRadonMeasurementClusterMeasurementMediumEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<RadonMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<RadonMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action) :
        MTRCallbackBridge<RadonMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::RadonMeasurement::MeasurementUnitEnum value);
};

class MTRRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallback>
{
public:
    MTRNullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 MTRActionBlock action) :
        MTRCallbackBridge<NullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallback>(queue, handler, action,
                                                                                               OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::RadonMeasurement::MeasurementUnitEnum> & value);
};

class MTRNullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge
{
public:
    MTRNullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableRadonMeasurementClusterMeasurementUnitEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChannelClusterChannelStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChannelClusterChannelStatusEnumAttributeCallback>
{
public:
    MTRChannelClusterChannelStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChannelClusterChannelStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChannelClusterChannelStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              MTRActionBlock action) :
        MTRCallbackBridge<ChannelClusterChannelStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Channel::ChannelStatusEnum value);
};

class MTRChannelClusterChannelStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRChannelClusterChannelStatusEnumAttributeCallbackBridge
{
public:
    MTRChannelClusterChannelStatusEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action,
                                                                          MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChannelClusterChannelStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChannelClusterChannelStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChannelClusterChannelStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChannelClusterChannelStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChannelClusterChannelStatusEnumAttributeCallback>
{
public:
    MTRNullableChannelClusterChannelStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableChannelClusterChannelStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableChannelClusterChannelStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableChannelClusterChannelStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Channel::ChannelStatusEnum> & value);
};

class MTRNullableChannelClusterChannelStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChannelClusterChannelStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableChannelClusterChannelStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChannelClusterChannelStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChannelClusterChannelStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChannelClusterChannelStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRChannelClusterLineupInfoTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ChannelClusterLineupInfoTypeEnumAttributeCallback>
{
public:
    MTRChannelClusterLineupInfoTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ChannelClusterLineupInfoTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRChannelClusterLineupInfoTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<ChannelClusterLineupInfoTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::Channel::LineupInfoTypeEnum value);
};

class MTRChannelClusterLineupInfoTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRChannelClusterLineupInfoTypeEnumAttributeCallbackBridge
{
public:
    MTRChannelClusterLineupInfoTypeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRChannelClusterLineupInfoTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRChannelClusterLineupInfoTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRChannelClusterLineupInfoTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableChannelClusterLineupInfoTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableChannelClusterLineupInfoTypeEnumAttributeCallback>
{
public:
    MTRNullableChannelClusterLineupInfoTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableChannelClusterLineupInfoTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableChannelClusterLineupInfoTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullableChannelClusterLineupInfoTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::Channel::LineupInfoTypeEnum> & value);
};

class MTRNullableChannelClusterLineupInfoTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableChannelClusterLineupInfoTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableChannelClusterLineupInfoTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableChannelClusterLineupInfoTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableChannelClusterLineupInfoTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableChannelClusterLineupInfoTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<TargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallback>
{
public:
    MTRTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<TargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<TargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::TargetNavigator::TargetNavigatorStatusEnum value);
};

class MTRTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge
{
public:
    MTRTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallback>
{
public:
    MTRNullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<NullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<NullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::TargetNavigator::TargetNavigatorStatusEnum> & value);
};

class MTRNullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableTargetNavigatorClusterTargetNavigatorStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<MediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallback>
{
public:
    MTRMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<MediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::MediaPlayback::MediaPlaybackStatusEnum value);
};

class MTRMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge
{
public:
    MTRMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallback>
{
public:
    MTRNullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  MTRActionBlock action) :
        MTRCallbackBridge<NullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::MediaPlayback::MediaPlaybackStatusEnum> & value);
};

class MTRNullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableMediaPlaybackClusterMediaPlaybackStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<MediaPlaybackClusterPlaybackStateEnumAttributeCallback>
{
public:
    MTRMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaPlaybackClusterPlaybackStateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    MTRActionBlock action) :
        MTRCallbackBridge<MediaPlaybackClusterPlaybackStateEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::MediaPlayback::PlaybackStateEnum value);
};

class MTRMediaPlaybackClusterPlaybackStateEnumAttributeCallbackSubscriptionBridge
    : public MTRMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge
{
public:
    MTRMediaPlaybackClusterPlaybackStateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableMediaPlaybackClusterPlaybackStateEnumAttributeCallback>
{
public:
    MTRNullableMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableMediaPlaybackClusterPlaybackStateEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<NullableMediaPlaybackClusterPlaybackStateEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::MediaPlayback::PlaybackStateEnum> & value);
};

class MTRNullableMediaPlaybackClusterPlaybackStateEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge
{
public:
    MTRNullableMediaPlaybackClusterPlaybackStateEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableMediaPlaybackClusterPlaybackStateEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRMediaInputClusterInputTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<MediaInputClusterInputTypeEnumAttributeCallback>
{
public:
    MTRMediaInputClusterInputTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<MediaInputClusterInputTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRMediaInputClusterInputTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<MediaInputClusterInputTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::MediaInput::InputTypeEnum value);
};

class MTRMediaInputClusterInputTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRMediaInputClusterInputTypeEnumAttributeCallbackBridge
{
public:
    MTRMediaInputClusterInputTypeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRMediaInputClusterInputTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRMediaInputClusterInputTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRMediaInputClusterInputTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableMediaInputClusterInputTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableMediaInputClusterInputTypeEnumAttributeCallback>
{
public:
    MTRNullableMediaInputClusterInputTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableMediaInputClusterInputTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableMediaInputClusterInputTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableMediaInputClusterInputTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::MediaInput::InputTypeEnum> & value);
};

class MTRNullableMediaInputClusterInputTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableMediaInputClusterInputTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableMediaInputClusterInputTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableMediaInputClusterInputTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableMediaInputClusterInputTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableMediaInputClusterInputTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRKeypadInputClusterCecKeyCodeAttributeCallbackBridge
    : public MTRCallbackBridge<KeypadInputClusterCecKeyCodeAttributeCallback>
{
public:
    MTRKeypadInputClusterCecKeyCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<KeypadInputClusterCecKeyCodeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRKeypadInputClusterCecKeyCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<KeypadInputClusterCecKeyCodeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::KeypadInput::CecKeyCode value);
};

class MTRKeypadInputClusterCecKeyCodeAttributeCallbackSubscriptionBridge
    : public MTRKeypadInputClusterCecKeyCodeAttributeCallbackBridge
{
public:
    MTRKeypadInputClusterCecKeyCodeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRKeypadInputClusterCecKeyCodeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRKeypadInputClusterCecKeyCodeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRKeypadInputClusterCecKeyCodeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableKeypadInputClusterCecKeyCodeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableKeypadInputClusterCecKeyCodeAttributeCallback>
{
public:
    MTRNullableKeypadInputClusterCecKeyCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableKeypadInputClusterCecKeyCodeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableKeypadInputClusterCecKeyCodeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableKeypadInputClusterCecKeyCodeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::KeypadInput::CecKeyCode> & value);
};

class MTRNullableKeypadInputClusterCecKeyCodeAttributeCallbackSubscriptionBridge
    : public MTRNullableKeypadInputClusterCecKeyCodeAttributeCallbackBridge
{
public:
    MTRNullableKeypadInputClusterCecKeyCodeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableKeypadInputClusterCecKeyCodeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableKeypadInputClusterCecKeyCodeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableKeypadInputClusterCecKeyCodeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<KeypadInputClusterKeypadInputStatusEnumAttributeCallback>
{
public:
    MTRKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<KeypadInputClusterKeypadInputStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      MTRActionBlock action) :
        MTRCallbackBridge<KeypadInputClusterKeypadInputStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::KeypadInput::KeypadInputStatusEnum value);
};

class MTRKeypadInputClusterKeypadInputStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge
{
public:
    MTRKeypadInputClusterKeypadInputStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableKeypadInputClusterKeypadInputStatusEnumAttributeCallback>
{
public:
    MTRNullableKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableKeypadInputClusterKeypadInputStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableKeypadInputClusterKeypadInputStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::KeypadInput::KeypadInputStatusEnum> & value);
};

class MTRNullableKeypadInputClusterKeypadInputStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableKeypadInputClusterKeypadInputStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableKeypadInputClusterKeypadInputStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ContentLauncherClusterContentLaunchStatusEnumAttributeCallback>
{
public:
    MTRContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ContentLauncherClusterContentLaunchStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            MTRActionBlock action) :
        MTRCallbackBridge<ContentLauncherClusterContentLaunchStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ContentLauncher::ContentLaunchStatusEnum value);
};

class MTRContentLauncherClusterContentLaunchStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge
{
public:
    MTRContentLauncherClusterContentLaunchStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableContentLauncherClusterContentLaunchStatusEnumAttributeCallback>
{
public:
    MTRNullableContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                    ResponseHandler handler) :
        MTRCallbackBridge<NullableContentLauncherClusterContentLaunchStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                    MTRActionBlock action) :
        MTRCallbackBridge<NullableContentLauncherClusterContentLaunchStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                  OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ContentLauncher::ContentLaunchStatusEnum> & value);
};

class MTRNullableContentLauncherClusterContentLaunchStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableContentLauncherClusterContentLaunchStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableContentLauncherClusterContentLaunchStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRContentLauncherClusterMetricTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ContentLauncherClusterMetricTypeEnumAttributeCallback>
{
public:
    MTRContentLauncherClusterMetricTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ContentLauncherClusterMetricTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRContentLauncherClusterMetricTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<ContentLauncherClusterMetricTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ContentLauncher::MetricTypeEnum value);
};

class MTRContentLauncherClusterMetricTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRContentLauncherClusterMetricTypeEnumAttributeCallbackBridge
{
public:
    MTRContentLauncherClusterMetricTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRContentLauncherClusterMetricTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRContentLauncherClusterMetricTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRContentLauncherClusterMetricTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableContentLauncherClusterMetricTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableContentLauncherClusterMetricTypeEnumAttributeCallback>
{
public:
    MTRNullableContentLauncherClusterMetricTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableContentLauncherClusterMetricTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableContentLauncherClusterMetricTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<NullableContentLauncherClusterMetricTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ContentLauncher::MetricTypeEnum> & value);
};

class MTRNullableContentLauncherClusterMetricTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableContentLauncherClusterMetricTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableContentLauncherClusterMetricTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableContentLauncherClusterMetricTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableContentLauncherClusterMetricTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableContentLauncherClusterMetricTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRContentLauncherClusterParameterEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ContentLauncherClusterParameterEnumAttributeCallback>
{
public:
    MTRContentLauncherClusterParameterEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ContentLauncherClusterParameterEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRContentLauncherClusterParameterEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  MTRActionBlock action) :
        MTRCallbackBridge<ContentLauncherClusterParameterEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ContentLauncher::ParameterEnum value);
};

class MTRContentLauncherClusterParameterEnumAttributeCallbackSubscriptionBridge
    : public MTRContentLauncherClusterParameterEnumAttributeCallbackBridge
{
public:
    MTRContentLauncherClusterParameterEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRContentLauncherClusterParameterEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRContentLauncherClusterParameterEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRContentLauncherClusterParameterEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableContentLauncherClusterParameterEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableContentLauncherClusterParameterEnumAttributeCallback>
{
public:
    MTRNullableContentLauncherClusterParameterEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableContentLauncherClusterParameterEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableContentLauncherClusterParameterEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          MTRActionBlock action) :
        MTRCallbackBridge<NullableContentLauncherClusterParameterEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::ContentLauncher::ParameterEnum> & value);
};

class MTRNullableContentLauncherClusterParameterEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableContentLauncherClusterParameterEnumAttributeCallbackBridge
{
public:
    MTRNullableContentLauncherClusterParameterEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableContentLauncherClusterParameterEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableContentLauncherClusterParameterEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableContentLauncherClusterParameterEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRAudioOutputClusterOutputTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<AudioOutputClusterOutputTypeEnumAttributeCallback>
{
public:
    MTRAudioOutputClusterOutputTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<AudioOutputClusterOutputTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRAudioOutputClusterOutputTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               MTRActionBlock action) :
        MTRCallbackBridge<AudioOutputClusterOutputTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::AudioOutput::OutputTypeEnum value);
};

class MTRAudioOutputClusterOutputTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRAudioOutputClusterOutputTypeEnumAttributeCallbackBridge
{
public:
    MTRAudioOutputClusterOutputTypeEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action,
                                                                           MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRAudioOutputClusterOutputTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRAudioOutputClusterOutputTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRAudioOutputClusterOutputTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableAudioOutputClusterOutputTypeEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableAudioOutputClusterOutputTypeEnumAttributeCallback>
{
public:
    MTRNullableAudioOutputClusterOutputTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableAudioOutputClusterOutputTypeEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableAudioOutputClusterOutputTypeEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action) :
        MTRCallbackBridge<NullableAudioOutputClusterOutputTypeEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::AudioOutput::OutputTypeEnum> & value);
};

class MTRNullableAudioOutputClusterOutputTypeEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableAudioOutputClusterOutputTypeEnumAttributeCallbackBridge
{
public:
    MTRNullableAudioOutputClusterOutputTypeEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableAudioOutputClusterOutputTypeEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableAudioOutputClusterOutputTypeEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableAudioOutputClusterOutputTypeEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallback>
{
public:
    MTRApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler) :
        MTRCallbackBridge<ApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                      ResponseHandler handler,
                                                                                      MTRActionBlock action) :
        MTRCallbackBridge<ApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                    OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ApplicationLauncher::ApplicationLauncherStatusEnum value);
};

class MTRApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge
{
public:
    MTRApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallback>
{
public:
    MTRNullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                              ResponseHandler handler) :
        MTRCallbackBridge<NullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallback>(queue, handler,
                                                                                                            OnSuccessFn){};

    MTRNullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                              ResponseHandler handler,
                                                                                              MTRActionBlock action) :
        MTRCallbackBridge<NullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                            OnSuccessFn){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::Nullable<chip::app::Clusters::ApplicationLauncher::ApplicationLauncherStatusEnum> & value);
};

class MTRNullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableApplicationLauncherClusterApplicationLauncherStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<ApplicationBasicClusterApplicationStatusEnumAttributeCallback>
{
public:
    MTRApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<ApplicationBasicClusterApplicationStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           MTRActionBlock action) :
        MTRCallbackBridge<ApplicationBasicClusterApplicationStatusEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum value);
};

class MTRApplicationBasicClusterApplicationStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge
{
public:
    MTRApplicationBasicClusterApplicationStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableApplicationBasicClusterApplicationStatusEnumAttributeCallback>
{
public:
    MTRNullableApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                   ResponseHandler handler) :
        MTRCallbackBridge<NullableApplicationBasicClusterApplicationStatusEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableApplicationBasicClusterApplicationStatusEnumAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::Nullable<chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum> & value);
};

class MTRNullableApplicationBasicClusterApplicationStatusEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge
{
public:
    MTRNullableApplicationBasicClusterApplicationStatusEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableApplicationBasicClusterApplicationStatusEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRUnitTestingClusterSimpleEnumAttributeCallbackBridge
    : public MTRCallbackBridge<UnitTestingClusterSimpleEnumAttributeCallback>
{
public:
    MTRUnitTestingClusterSimpleEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<UnitTestingClusterSimpleEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRUnitTestingClusterSimpleEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action) :
        MTRCallbackBridge<UnitTestingClusterSimpleEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::UnitTesting::SimpleEnum value);
};

class MTRUnitTestingClusterSimpleEnumAttributeCallbackSubscriptionBridge
    : public MTRUnitTestingClusterSimpleEnumAttributeCallbackBridge
{
public:
    MTRUnitTestingClusterSimpleEnumAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       MTRActionBlock action,
                                                                       MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRUnitTestingClusterSimpleEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRUnitTestingClusterSimpleEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRUnitTestingClusterSimpleEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableUnitTestingClusterSimpleEnumAttributeCallbackBridge
    : public MTRCallbackBridge<NullableUnitTestingClusterSimpleEnumAttributeCallback>
{
public:
    MTRNullableUnitTestingClusterSimpleEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableUnitTestingClusterSimpleEnumAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableUnitTestingClusterSimpleEnumAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   MTRActionBlock action) :
        MTRCallbackBridge<NullableUnitTestingClusterSimpleEnumAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::UnitTesting::SimpleEnum> & value);
};

class MTRNullableUnitTestingClusterSimpleEnumAttributeCallbackSubscriptionBridge
    : public MTRNullableUnitTestingClusterSimpleEnumAttributeCallbackBridge
{
public:
    MTRNullableUnitTestingClusterSimpleEnumAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableUnitTestingClusterSimpleEnumAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableUnitTestingClusterSimpleEnumAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableUnitTestingClusterSimpleEnumAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRFaultInjectionClusterFaultTypeAttributeCallbackBridge
    : public MTRCallbackBridge<FaultInjectionClusterFaultTypeAttributeCallback>
{
public:
    MTRFaultInjectionClusterFaultTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<FaultInjectionClusterFaultTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRFaultInjectionClusterFaultTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             MTRActionBlock action) :
        MTRCallbackBridge<FaultInjectionClusterFaultTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context, chip::app::Clusters::FaultInjection::FaultType value);
};

class MTRFaultInjectionClusterFaultTypeAttributeCallbackSubscriptionBridge
    : public MTRFaultInjectionClusterFaultTypeAttributeCallbackBridge
{
public:
    MTRFaultInjectionClusterFaultTypeAttributeCallbackSubscriptionBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         MTRActionBlock action,
                                                                         MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRFaultInjectionClusterFaultTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRFaultInjectionClusterFaultTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRFaultInjectionClusterFaultTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};

class MTRNullableFaultInjectionClusterFaultTypeAttributeCallbackBridge
    : public MTRCallbackBridge<NullableFaultInjectionClusterFaultTypeAttributeCallback>
{
public:
    MTRNullableFaultInjectionClusterFaultTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler) :
        MTRCallbackBridge<NullableFaultInjectionClusterFaultTypeAttributeCallback>(queue, handler, OnSuccessFn){};

    MTRNullableFaultInjectionClusterFaultTypeAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     MTRActionBlock action) :
        MTRCallbackBridge<NullableFaultInjectionClusterFaultTypeAttributeCallback>(queue, handler, action, OnSuccessFn){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::Nullable<chip::app::Clusters::FaultInjection::FaultType> & value);
};

class MTRNullableFaultInjectionClusterFaultTypeAttributeCallbackSubscriptionBridge
    : public MTRNullableFaultInjectionClusterFaultTypeAttributeCallbackBridge
{
public:
    MTRNullableFaultInjectionClusterFaultTypeAttributeCallbackSubscriptionBridge(
        dispatch_queue_t queue, ResponseHandler handler, MTRActionBlock action,
        MTRSubscriptionEstablishedHandler establishedHandler) :
        MTRNullableFaultInjectionClusterFaultTypeAttributeCallbackBridge(queue, handler, action),
        mEstablishedHandler(establishedHandler)
    {}

    void OnSubscriptionEstablished();
    using MTRNullableFaultInjectionClusterFaultTypeAttributeCallbackBridge::KeepAliveOnCallback;
    using MTRNullableFaultInjectionClusterFaultTypeAttributeCallbackBridge::OnDone;

private:
    MTRSubscriptionEstablishedHandler mEstablishedHandler;
};
