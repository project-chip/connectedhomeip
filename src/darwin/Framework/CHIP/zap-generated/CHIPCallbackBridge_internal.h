/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import "CHIPCallbackBridgeBase_internal.h"
#import <Foundation/Foundation.h>

#include <app-common/zap-generated/cluster-objects.h>
#include <app/data-model/DecodableList.h>

class CHIPDefaultSuccessCallbackBridge : public CHIPCallbackBridge<DefaultSuccessCallback>
{
public:
    CHIPDefaultSuccessCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                     bool keepAlive = false) :
        CHIPCallbackBridge<DefaultSuccessCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context);
};

class CHIPOctetStringAttributeCallbackBridge : public CHIPCallbackBridge<OctetStringAttributeCallback>
{
public:
    CHIPOctetStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                           bool keepAlive = false) :
        CHIPCallbackBridge<OctetStringAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, chip::ByteSpan value);
};

class CHIPCharStringAttributeCallbackBridge : public CHIPCallbackBridge<CharStringAttributeCallback>
{
public:
    CHIPCharStringAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                          bool keepAlive = false) :
        CHIPCallbackBridge<CharStringAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, chip::CharSpan value);
};

class CHIPBooleanAttributeCallbackBridge : public CHIPCallbackBridge<BooleanAttributeCallback>
{
public:
    CHIPBooleanAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                       bool keepAlive = false) :
        CHIPCallbackBridge<BooleanAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, bool value);
};

class CHIPInt8uAttributeCallbackBridge : public CHIPCallbackBridge<Int8uAttributeCallback>
{
public:
    CHIPInt8uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                     bool keepAlive = false) :
        CHIPCallbackBridge<Int8uAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t value);
};

class CHIPInt8sAttributeCallbackBridge : public CHIPCallbackBridge<Int8sAttributeCallback>
{
public:
    CHIPInt8sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                     bool keepAlive = false) :
        CHIPCallbackBridge<Int8sAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, int8_t value);
};

class CHIPInt16uAttributeCallbackBridge : public CHIPCallbackBridge<Int16uAttributeCallback>
{
public:
    CHIPInt16uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                      bool keepAlive = false) :
        CHIPCallbackBridge<Int16uAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint16_t value);
};

class CHIPInt16sAttributeCallbackBridge : public CHIPCallbackBridge<Int16sAttributeCallback>
{
public:
    CHIPInt16sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                      bool keepAlive = false) :
        CHIPCallbackBridge<Int16sAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, int16_t value);
};

class CHIPInt32uAttributeCallbackBridge : public CHIPCallbackBridge<Int32uAttributeCallback>
{
public:
    CHIPInt32uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                      bool keepAlive = false) :
        CHIPCallbackBridge<Int32uAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint32_t value);
};

class CHIPInt32sAttributeCallbackBridge : public CHIPCallbackBridge<Int32sAttributeCallback>
{
public:
    CHIPInt32sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                      bool keepAlive = false) :
        CHIPCallbackBridge<Int32sAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, int32_t value);
};

class CHIPInt64uAttributeCallbackBridge : public CHIPCallbackBridge<Int64uAttributeCallback>
{
public:
    CHIPInt64uAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                      bool keepAlive = false) :
        CHIPCallbackBridge<Int64uAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint64_t value);
};

class CHIPInt64sAttributeCallbackBridge : public CHIPCallbackBridge<Int64sAttributeCallback>
{
public:
    CHIPInt64sAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                      bool keepAlive = false) :
        CHIPCallbackBridge<Int64sAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, int64_t value);
};

class CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge
    : public CHIPCallbackBridge<ApplicationLauncherApplicationLauncherListListAttributeCallback>
{
public:
    CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                              CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ApplicationLauncherApplicationLauncherListListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                            keepAlive){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<uint16_t> & list);
};

class CHIPAudioOutputAudioOutputListListAttributeCallbackBridge
    : public CHIPCallbackBridge<AudioOutputAudioOutputListListAttributeCallback>
{
public:
    CHIPAudioOutputAudioOutputListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<AudioOutputAudioOutputListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::AudioOutput::Structs::AudioOutputInfo::DecodableType> &
            list);
};

class CHIPBridgedActionsActionListListAttributeCallbackBridge
    : public CHIPCallbackBridge<BridgedActionsActionListListAttributeCallback>
{
public:
    CHIPBridgedActionsActionListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                            bool keepAlive = false) :
        CHIPCallbackBridge<BridgedActionsActionListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::ActionStruct::DecodableType> &
            list);
};

class CHIPBridgedActionsEndpointListListAttributeCallbackBridge
    : public CHIPCallbackBridge<BridgedActionsEndpointListListAttributeCallback>
{
public:
    CHIPBridgedActionsEndpointListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<BridgedActionsEndpointListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::DecodableType> &
            list);
};

class CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge
    : public CHIPCallbackBridge<ContentLauncherAcceptsHeaderListListAttributeCallback>
{
public:
    CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ContentLauncherAcceptsHeaderListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list);
};

class CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge
    : public CHIPCallbackBridge<ContentLauncherSupportedStreamingTypesListAttributeCallback>
{
public:
    CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ContentLauncherSupportedStreamingTypesListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                        keepAlive){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<chip::app::Clusters::ContentLauncher::ContentLaunchStreamingType> & list);
};

class CHIPDescriptorDeviceListListAttributeCallbackBridge : public CHIPCallbackBridge<DescriptorDeviceListListAttributeCallback>
{
public:
    CHIPDescriptorDeviceListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                        bool keepAlive = false) :
        CHIPCallbackBridge<DescriptorDeviceListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::Descriptor::Structs::DeviceType::DecodableType> & list);
};

class CHIPDescriptorServerListListAttributeCallbackBridge : public CHIPCallbackBridge<DescriptorServerListListAttributeCallback>
{
public:
    CHIPDescriptorServerListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                        bool keepAlive = false) :
        CHIPCallbackBridge<DescriptorServerListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & list);
};

class CHIPDescriptorClientListListAttributeCallbackBridge : public CHIPCallbackBridge<DescriptorClientListListAttributeCallback>
{
public:
    CHIPDescriptorClientListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                        bool keepAlive = false) :
        CHIPCallbackBridge<DescriptorClientListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ClusterId> & list);
};

class CHIPDescriptorPartsListListAttributeCallbackBridge : public CHIPCallbackBridge<DescriptorPartsListListAttributeCallback>
{
public:
    CHIPDescriptorPartsListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                       bool keepAlive = false) :
        CHIPCallbackBridge<DescriptorPartsListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::EndpointId> & list);
};

class CHIPFixedLabelLabelListListAttributeCallbackBridge : public CHIPCallbackBridge<FixedLabelLabelListListAttributeCallback>
{
public:
    CHIPFixedLabelLabelListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                       bool keepAlive = false) :
        CHIPCallbackBridge<FixedLabelLabelListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::FixedLabel::Structs::LabelStruct::DecodableType> & list);
};

class CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge
    : public CHIPCallbackBridge<GeneralCommissioningBasicCommissioningInfoListListAttributeCallback>
{
public:
    CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                  CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<GeneralCommissioningBasicCommissioningInfoListListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                                keepAlive){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<
                    chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::DecodableType> & list);
};

class CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge
    : public CHIPCallbackBridge<GeneralDiagnosticsNetworkInterfacesListAttributeCallback>
{
public:
    CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<GeneralDiagnosticsNetworkInterfacesListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                     keepAlive){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::DecodableType> & list);
};

class CHIPGroupKeyManagementGroupsListAttributeCallbackBridge
    : public CHIPCallbackBridge<GroupKeyManagementGroupsListAttributeCallback>
{
public:
    CHIPGroupKeyManagementGroupsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                            bool keepAlive = false) :
        CHIPCallbackBridge<GroupKeyManagementGroupsListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupState::DecodableType> &
            list);
};

class CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge
    : public CHIPCallbackBridge<GroupKeyManagementGroupKeysListAttributeCallback>
{
public:
    CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<GroupKeyManagementGroupKeysListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::DecodableType> &
            list);
};

class CHIPMediaInputMediaInputListListAttributeCallbackBridge
    : public CHIPCallbackBridge<MediaInputMediaInputListListAttributeCallback>
{
public:
    CHIPMediaInputMediaInputListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                            bool keepAlive = false) :
        CHIPCallbackBridge<MediaInputMediaInputListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::MediaInput::Structs::MediaInputInfo::DecodableType> & list);
};

class CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge
    : public CHIPCallbackBridge<OperationalCredentialsFabricsListListAttributeCallback>
{
public:
    CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<OperationalCredentialsFabricsListListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                   keepAlive){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::DecodableType> & list);
};

class CHIPOperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge
    : public CHIPCallbackBridge<OperationalCredentialsTrustedRootCertificatesListAttributeCallback>
{
public:
    CHIPOperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<OperationalCredentialsTrustedRootCertificatesListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                               keepAlive){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list);
};

class CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge
    : public CHIPCallbackBridge<PowerSourceActiveBatteryFaultsListAttributeCallback>
{
public:
    CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<PowerSourceActiveBatteryFaultsListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<uint8_t> & list);
};

class CHIPTvChannelTvChannelListListAttributeCallbackBridge : public CHIPCallbackBridge<TvChannelTvChannelListListAttributeCallback>
{
public:
    CHIPTvChannelTvChannelListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                          bool keepAlive = false) :
        CHIPCallbackBridge<TvChannelTvChannelListListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::TvChannel::Structs::TvChannelInfo::DecodableType> & list);
};

class CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge
    : public CHIPCallbackBridge<TargetNavigatorTargetNavigatorListListAttributeCallback>
{
public:
    CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<TargetNavigatorTargetNavigatorListListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                    keepAlive){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::TargetNavigator::Structs::NavigateTargetTargetInfo::DecodableType> & list);
};

class CHIPTestClusterListInt8uListAttributeCallbackBridge : public CHIPCallbackBridge<TestClusterListInt8uListAttributeCallback>
{
public:
    CHIPTestClusterListInt8uListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                        bool keepAlive = false) :
        CHIPCallbackBridge<TestClusterListInt8uListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<uint8_t> & list);
};

class CHIPTestClusterListOctetStringListAttributeCallbackBridge
    : public CHIPCallbackBridge<TestClusterListOctetStringListAttributeCallback>
{
public:
    CHIPTestClusterListOctetStringListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<TestClusterListOctetStringListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, const chip::app::DataModel::DecodableList<chip::ByteSpan> & list);
};

class CHIPTestClusterListStructOctetStringListAttributeCallbackBridge
    : public CHIPCallbackBridge<TestClusterListStructOctetStringListAttributeCallback>
{
public:
    CHIPTestClusterListStructOctetStringListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<TestClusterListStructOctetStringListAttributeCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(
        void * context,
        const chip::app::DataModel::DecodableList<chip::app::Clusters::TestCluster::Structs::TestListStructOctet::DecodableType> &
            list);
};

class CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge
    : public CHIPCallbackBridge<ThreadNetworkDiagnosticsNeighborTableListListAttributeCallback>
{
public:
    CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ThreadNetworkDiagnosticsNeighborTableListListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                           keepAlive){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType> & list);
};

class CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge
    : public CHIPCallbackBridge<ThreadNetworkDiagnosticsRouteTableListListAttributeCallback>
{
public:
    CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ThreadNetworkDiagnosticsRouteTableListListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                        keepAlive){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType> & list);
};

class CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge
    : public CHIPCallbackBridge<ThreadNetworkDiagnosticsSecurityPolicyListAttributeCallback>
{
public:
    CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ThreadNetworkDiagnosticsSecurityPolicyListAttributeCallback>(queue, handler, action, OnSuccessFn,
                                                                                        keepAlive){};

    static void OnSuccessFn(void * context,
                            const chip::app::DataModel::DecodableList<
                                chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType> & list);
};

class CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge
    : public CHIPCallbackBridge<ThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallback>
{
public:
    CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge(dispatch_queue_t queue,
                                                                                        ResponseHandler handler,
                                                                                        CHIPActionBlock action,
                                                                                        bool keepAlive = false) :
        CHIPCallbackBridge<ThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallback>(queue, handler, action,
                                                                                                      OnSuccessFn, keepAlive){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<
                    chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType> & list);
};

class CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge
    : public CHIPCallbackBridge<ThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallback>
{
public:
    CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                   CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallback>(queue, handler, action,
                                                                                                 OnSuccessFn, keepAlive){};

    static void
    OnSuccessFn(void * context,
                const chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> & list);
};

class CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge
    : public CHIPCallbackBridge<AccountLoginClusterGetSetupPINResponseCallback>
{
public:
    CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<AccountLoginClusterGetSetupPINResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, chip::CharSpan setupPIN);
};

class CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge
    : public CHIPCallbackBridge<ApplicationLauncherClusterLaunchAppResponseCallback>
{
public:
    CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ApplicationLauncherClusterLaunchAppResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, chip::CharSpan data);
};

class CHIPContentLauncherClusterLaunchContentResponseCallbackBridge
    : public CHIPCallbackBridge<ContentLauncherClusterLaunchContentResponseCallback>
{
public:
    CHIPContentLauncherClusterLaunchContentResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ContentLauncherClusterLaunchContentResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, chip::CharSpan data, uint8_t contentLaunchStatus);
};

class CHIPContentLauncherClusterLaunchURLResponseCallbackBridge
    : public CHIPCallbackBridge<ContentLauncherClusterLaunchURLResponseCallback>
{
public:
    CHIPContentLauncherClusterLaunchURLResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ContentLauncherClusterLaunchURLResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, chip::CharSpan data, uint8_t contentLaunchStatus);
};

class CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge
    : public CHIPCallbackBridge<DiagnosticLogsClusterRetrieveLogsResponseCallback>
{
public:
    CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DiagnosticLogsClusterRetrieveLogsResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, chip::ByteSpan content, uint32_t timeStamp, uint32_t timeSinceBoot);
};

class CHIPDoorLockClusterClearAllPinsResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterClearAllPinsResponseCallback>
{
public:
    CHIPDoorLockClusterClearAllPinsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                          bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterClearAllPinsResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterClearAllRfidsResponseCallback>
{
public:
    CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                           bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterClearAllRfidsResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterClearHolidayScheduleResponseCallback>
{
public:
    CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterClearHolidayScheduleResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterClearPinResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterClearPinResponseCallback>
{
public:
    CHIPDoorLockClusterClearPinResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                      bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterClearPinResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterClearRfidResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterClearRfidResponseCallback>
{
public:
    CHIPDoorLockClusterClearRfidResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                       bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterClearRfidResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterClearWeekdayScheduleResponseCallback>
{
public:
    CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterClearWeekdayScheduleResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterClearYeardayScheduleResponseCallback>
{
public:
    CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                  CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterClearYeardayScheduleResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterGetHolidayScheduleResponseCallback>
{
public:
    CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterGetHolidayScheduleResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t scheduleId, uint8_t status, uint32_t localStartTime, uint32_t localEndTime,
                            uint8_t operatingModeDuringHoliday);
};

class CHIPDoorLockClusterGetLogRecordResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterGetLogRecordResponseCallback>
{
public:
    CHIPDoorLockClusterGetLogRecordResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                          bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterGetLogRecordResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint16_t logEntryId, uint32_t timestamp, uint8_t eventType, uint8_t source,
                            uint8_t eventIdOrAlarmCode, uint16_t userId, chip::ByteSpan pin);
};

class CHIPDoorLockClusterGetPinResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterGetPinResponseCallback>
{
public:
    CHIPDoorLockClusterGetPinResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                    bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterGetPinResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint16_t userId, uint8_t userStatus, uint8_t userType, chip::ByteSpan pin);
};

class CHIPDoorLockClusterGetRfidResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterGetRfidResponseCallback>
{
public:
    CHIPDoorLockClusterGetRfidResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                     bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterGetRfidResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint16_t userId, uint8_t userStatus, uint8_t userType, chip::ByteSpan rfid);
};

class CHIPDoorLockClusterGetUserTypeResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterGetUserTypeResponseCallback>
{
public:
    CHIPDoorLockClusterGetUserTypeResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                         bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterGetUserTypeResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint16_t userId, uint8_t userType);
};

class CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterGetWeekdayScheduleResponseCallback>
{
public:
    CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterGetWeekdayScheduleResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t scheduleId, uint16_t userId, uint8_t status, uint8_t daysMask,
                            uint8_t startHour, uint8_t startMinute, uint8_t endHour, uint8_t endMinute);
};

class CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterGetYeardayScheduleResponseCallback>
{
public:
    CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterGetYeardayScheduleResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t scheduleId, uint16_t userId, uint8_t status, uint32_t localStartTime,
                            uint32_t localEndTime);
};

class CHIPDoorLockClusterLockDoorResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterLockDoorResponseCallback>
{
public:
    CHIPDoorLockClusterLockDoorResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                      bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterLockDoorResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterSetHolidayScheduleResponseCallback>
{
public:
    CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterSetHolidayScheduleResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterSetPinResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterSetPinResponseCallback>
{
public:
    CHIPDoorLockClusterSetPinResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                    bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterSetPinResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterSetRfidResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterSetRfidResponseCallback>
{
public:
    CHIPDoorLockClusterSetRfidResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                     bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterSetRfidResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterSetUserTypeResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterSetUserTypeResponseCallback>
{
public:
    CHIPDoorLockClusterSetUserTypeResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                         bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterSetUserTypeResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterSetWeekdayScheduleResponseCallback>
{
public:
    CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterSetWeekdayScheduleResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterSetYeardayScheduleResponseCallback>
{
public:
    CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterSetYeardayScheduleResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterUnlockDoorResponseCallbackBridge : public CHIPCallbackBridge<DoorLockClusterUnlockDoorResponseCallback>
{
public:
    CHIPDoorLockClusterUnlockDoorResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                        bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterUnlockDoorResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge
    : public CHIPCallbackBridge<DoorLockClusterUnlockWithTimeoutResponseCallback>
{
public:
    CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<DoorLockClusterUnlockWithTimeoutResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge
    : public CHIPCallbackBridge<GeneralCommissioningClusterArmFailSafeResponseCallback>
{
public:
    CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<GeneralCommissioningClusterArmFailSafeResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                   keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge
    : public CHIPCallbackBridge<GeneralCommissioningClusterCommissioningCompleteResponseCallback>
{
public:
    CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                               CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<GeneralCommissioningClusterCommissioningCompleteResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                             keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge
    : public CHIPCallbackBridge<GeneralCommissioningClusterSetRegulatoryConfigResponseCallback>
{
public:
    CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<GeneralCommissioningClusterSetRegulatoryConfigResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                           keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPGroupsClusterAddGroupResponseCallbackBridge : public CHIPCallbackBridge<GroupsClusterAddGroupResponseCallback>
{
public:
    CHIPGroupsClusterAddGroupResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                    bool keepAlive = false) :
        CHIPCallbackBridge<GroupsClusterAddGroupResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint16_t groupId);
};

class CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge
    : public CHIPCallbackBridge<GroupsClusterGetGroupMembershipResponseCallback>
{
public:
    CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<GroupsClusterGetGroupMembershipResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t capacity, uint8_t groupCount,
                            /* TYPE WARNING: array array defaults to */ uint8_t * groupList);
};

class CHIPGroupsClusterRemoveGroupResponseCallbackBridge : public CHIPCallbackBridge<GroupsClusterRemoveGroupResponseCallback>
{
public:
    CHIPGroupsClusterRemoveGroupResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                       bool keepAlive = false) :
        CHIPCallbackBridge<GroupsClusterRemoveGroupResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint16_t groupId);
};

class CHIPGroupsClusterViewGroupResponseCallbackBridge : public CHIPCallbackBridge<GroupsClusterViewGroupResponseCallback>
{
public:
    CHIPGroupsClusterViewGroupResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                     bool keepAlive = false) :
        CHIPCallbackBridge<GroupsClusterViewGroupResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint16_t groupId, chip::CharSpan groupName);
};

class CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge
    : public CHIPCallbackBridge<IdentifyClusterIdentifyQueryResponseCallback>
{
public:
    CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                           bool keepAlive = false) :
        CHIPCallbackBridge<IdentifyClusterIdentifyQueryResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint16_t timeout);
};

class CHIPKeypadInputClusterSendKeyResponseCallbackBridge : public CHIPCallbackBridge<KeypadInputClusterSendKeyResponseCallback>
{
public:
    CHIPKeypadInputClusterSendKeyResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                        bool keepAlive = false) :
        CHIPCallbackBridge<KeypadInputClusterSendKeyResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status);
};

class CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaFastForwardResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaFastForwardResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaNextResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                            bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaNextResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaPauseResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaPauseResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaPlayResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                            bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaPlayResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaPreviousResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaPreviousResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaRewindResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaRewindResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaSeekResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                            bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaSeekResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaSkipBackwardResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                    CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaSkipBackwardResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaSkipForwardResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaSkipForwardResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaStartOverResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaStartOverResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge
    : public CHIPCallbackBridge<MediaPlaybackClusterMediaStopResponseCallback>
{
public:
    CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                            bool keepAlive = false) :
        CHIPCallbackBridge<MediaPlaybackClusterMediaStopResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t mediaPlaybackStatus);
};

class CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge
    : public CHIPCallbackBridge<NetworkCommissioningClusterAddThreadNetworkResponseCallback>
{
public:
    CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                          CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<NetworkCommissioningClusterAddThreadNetworkResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                        keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge
    : public CHIPCallbackBridge<NetworkCommissioningClusterAddWiFiNetworkResponseCallback>
{
public:
    CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<NetworkCommissioningClusterAddWiFiNetworkResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                      keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge
    : public CHIPCallbackBridge<NetworkCommissioningClusterDisableNetworkResponseCallback>
{
public:
    CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                        CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<NetworkCommissioningClusterDisableNetworkResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                      keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge
    : public CHIPCallbackBridge<NetworkCommissioningClusterEnableNetworkResponseCallback>
{
public:
    CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<NetworkCommissioningClusterEnableNetworkResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                     keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge
    : public CHIPCallbackBridge<NetworkCommissioningClusterRemoveNetworkResponseCallback>
{
public:
    CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<NetworkCommissioningClusterRemoveNetworkResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                     keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge
    : public CHIPCallbackBridge<NetworkCommissioningClusterScanNetworksResponseCallback>
{
public:
    CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                      CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<NetworkCommissioningClusterScanNetworksResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                    keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText,
                            /* TYPE WARNING: array array defaults to */ uint8_t * wifiScanResults,
                            /* TYPE WARNING: array array defaults to */ uint8_t * threadScanResults);
};

class CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge
    : public CHIPCallbackBridge<NetworkCommissioningClusterUpdateThreadNetworkResponseCallback>
{
public:
    CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                             CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<NetworkCommissioningClusterUpdateThreadNetworkResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                           keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge
    : public CHIPCallbackBridge<NetworkCommissioningClusterUpdateWiFiNetworkResponseCallback>
{
public:
    CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                           CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<NetworkCommissioningClusterUpdateWiFiNetworkResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                         keepAlive){};

    static void OnSuccessFn(void * context, uint8_t errorCode, chip::CharSpan debugText);
};

class CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallbackBridge
    : public CHIPCallbackBridge<OtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallback>
{
public:
    CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                                 CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<OtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                               keepAlive){};

    static void OnSuccessFn(void * context, uint8_t action, uint32_t delayedActionTime);
};

class CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge
    : public CHIPCallbackBridge<OtaSoftwareUpdateProviderClusterQueryImageResponseCallback>
{
public:
    CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                         CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<OtaSoftwareUpdateProviderClusterQueryImageResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                       keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint32_t delayedActionTime, chip::CharSpan imageURI,
                            uint32_t softwareVersion, chip::CharSpan softwareVersionString, chip::ByteSpan updateToken,
                            bool userConsentNeeded, chip::ByteSpan metadataForRequestor);
};

class CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge
    : public CHIPCallbackBridge<OperationalCredentialsClusterAttestationResponseCallback>
{
public:
    CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                       CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<OperationalCredentialsClusterAttestationResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                     keepAlive){};

    static void OnSuccessFn(void * context, chip::ByteSpan AttestationElements, chip::ByteSpan Signature);
};

class CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge
    : public CHIPCallbackBridge<OperationalCredentialsClusterCertificateChainResponseCallback>
{
public:
    CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                            CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<OperationalCredentialsClusterCertificateChainResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                          keepAlive){};

    static void OnSuccessFn(void * context, chip::ByteSpan Certificate);
};

class CHIPOperationalCredentialsClusterNOCResponseCallbackBridge
    : public CHIPCallbackBridge<OperationalCredentialsClusterNOCResponseCallback>
{
public:
    CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                               CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<OperationalCredentialsClusterNOCResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t StatusCode, uint8_t FabricIndex, chip::CharSpan DebugText);
};

class CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge
    : public CHIPCallbackBridge<OperationalCredentialsClusterOpCSRResponseCallback>
{
public:
    CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<OperationalCredentialsClusterOpCSRResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, chip::ByteSpan NOCSRElements, chip::ByteSpan AttestationSignature);
};

class CHIPScenesClusterAddSceneResponseCallbackBridge : public CHIPCallbackBridge<ScenesClusterAddSceneResponseCallback>
{
public:
    CHIPScenesClusterAddSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                    bool keepAlive = false) :
        CHIPCallbackBridge<ScenesClusterAddSceneResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint16_t groupId, uint8_t sceneId);
};

class CHIPScenesClusterGetSceneMembershipResponseCallbackBridge
    : public CHIPCallbackBridge<ScenesClusterGetSceneMembershipResponseCallback>
{
public:
    CHIPScenesClusterGetSceneMembershipResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                              CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<ScenesClusterGetSceneMembershipResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint8_t capacity, uint16_t groupId, uint8_t sceneCount,
                            /* TYPE WARNING: array array defaults to */ uint8_t * sceneList);
};

class CHIPScenesClusterRemoveAllScenesResponseCallbackBridge
    : public CHIPCallbackBridge<ScenesClusterRemoveAllScenesResponseCallback>
{
public:
    CHIPScenesClusterRemoveAllScenesResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                           bool keepAlive = false) :
        CHIPCallbackBridge<ScenesClusterRemoveAllScenesResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint16_t groupId);
};

class CHIPScenesClusterRemoveSceneResponseCallbackBridge : public CHIPCallbackBridge<ScenesClusterRemoveSceneResponseCallback>
{
public:
    CHIPScenesClusterRemoveSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                       bool keepAlive = false) :
        CHIPCallbackBridge<ScenesClusterRemoveSceneResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint16_t groupId, uint8_t sceneId);
};

class CHIPScenesClusterStoreSceneResponseCallbackBridge : public CHIPCallbackBridge<ScenesClusterStoreSceneResponseCallback>
{
public:
    CHIPScenesClusterStoreSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                      bool keepAlive = false) :
        CHIPCallbackBridge<ScenesClusterStoreSceneResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint16_t groupId, uint8_t sceneId);
};

class CHIPScenesClusterViewSceneResponseCallbackBridge : public CHIPCallbackBridge<ScenesClusterViewSceneResponseCallback>
{
public:
    CHIPScenesClusterViewSceneResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                     bool keepAlive = false) :
        CHIPCallbackBridge<ScenesClusterViewSceneResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, uint16_t groupId, uint8_t sceneId, uint16_t transitionTime,
                            chip::CharSpan sceneName, /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets);
};

class CHIPTvChannelClusterChangeChannelResponseCallbackBridge
    : public CHIPCallbackBridge<TvChannelClusterChangeChannelResponseCallback>
{
public:
    CHIPTvChannelClusterChangeChannelResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                            bool keepAlive = false) :
        CHIPCallbackBridge<TvChannelClusterChangeChannelResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, /* TYPE WARNING: array array defaults to */ uint8_t * ChannelMatch, uint8_t ErrorType);
};

class CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge
    : public CHIPCallbackBridge<TargetNavigatorClusterNavigateTargetResponseCallback>
{
public:
    CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                   CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<TargetNavigatorClusterNavigateTargetResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t status, chip::CharSpan data);
};

class CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge
    : public CHIPCallbackBridge<TestClusterClusterTestAddArgumentsResponseCallback>
{
public:
    CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                 CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<TestClusterClusterTestAddArgumentsResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t returnValue);
};

class CHIPTestClusterClusterTestEnumsResponseCallbackBridge : public CHIPCallbackBridge<TestClusterClusterTestEnumsResponseCallback>
{
public:
    CHIPTestClusterClusterTestEnumsResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action,
                                                          bool keepAlive = false) :
        CHIPCallbackBridge<TestClusterClusterTestEnumsResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, chip::VendorId arg1, uint8_t arg2);
};

class CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge
    : public CHIPCallbackBridge<TestClusterClusterTestListInt8UReverseResponseCallback>
{
public:
    CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<TestClusterClusterTestListInt8UReverseResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                   keepAlive){};

    static void OnSuccessFn(void * context, /* TYPE WARNING: array array defaults to */ uint8_t * arg1);
};

class CHIPTestClusterClusterTestNullableOptionalResponseCallbackBridge
    : public CHIPCallbackBridge<TestClusterClusterTestNullableOptionalResponseCallback>
{
public:
    CHIPTestClusterClusterTestNullableOptionalResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                                     CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<TestClusterClusterTestNullableOptionalResponseCallback>(queue, handler, action, OnSuccessFn,
                                                                                   keepAlive){};

    static void OnSuccessFn(void * context, bool wasPresent, bool wasNull, uint8_t value, uint8_t originalValue);
};

class CHIPTestClusterClusterTestSpecificResponseCallbackBridge
    : public CHIPCallbackBridge<TestClusterClusterTestSpecificResponseCallback>
{
public:
    CHIPTestClusterClusterTestSpecificResponseCallbackBridge(dispatch_queue_t queue, ResponseHandler handler,
                                                             CHIPActionBlock action, bool keepAlive = false) :
        CHIPCallbackBridge<TestClusterClusterTestSpecificResponseCallback>(queue, handler, action, OnSuccessFn, keepAlive){};

    static void OnSuccessFn(void * context, uint8_t returnValue);
};
