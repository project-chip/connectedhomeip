/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import <Foundation/Foundation.h>

#import "CHIPCallbackBridge_internal.h"
#import "CHIPCluster_internal.h"
#import "CHIPClustersObjc_internal.h"
#import "CHIPCommandPayloadsObjc.h"
#import "CHIPDevice.h"
#import "CHIPDevice_Internal.h"
#import "CHIPListUtils_internal.h"
#import "CHIPStructsObjc.h"

#include <type_traits>

using chip::Callback::Callback;
using chip::Callback::Cancelable;
using namespace chip::app::Clusters;

@implementation CHIPAccountLogin

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)getSetupPIN:(CHIPAccountLoginClusterGetSetupPINPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AccountLogin::Commands::GetSetupPIN::Type request;
    request.tempAccountIdentifier = [self asCharSpan:payload.tempAccountIdentifier];

    new CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPAccountLoginClusterGetSetupPINResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)login:(CHIPAccountLoginClusterLoginPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AccountLogin::Commands::Login::Type request;
    request.tempAccountIdentifier = [self asCharSpan:payload.tempAccountIdentifier];
    request.setupPIN = [self asCharSpan:payload.setupPIN];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPAdministratorCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)openBasicCommissioningWindow:(CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowPayload * _Nonnull)payload
                     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AdministratorCommissioning::Commands::OpenBasicCommissioningWindow::Type request;
    request.commissioningTimeout = payload.commissioningTimeout.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)openCommissioningWindow:(CHIPAdministratorCommissioningClusterOpenCommissioningWindowPayload * _Nonnull)payload
                responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AdministratorCommissioning::Commands::OpenCommissioningWindow::Type request;
    request.commissioningTimeout = payload.commissioningTimeout.unsignedShortValue;
    request.PAKEVerifier = [self asByteSpan:payload.pakeVerifier];
    request.discriminator = payload.discriminator.unsignedShortValue;
    request.iterations = payload.iterations.unsignedIntValue;
    request.salt = [self asByteSpan:payload.salt];
    request.passcodeID = payload.passcodeID.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)revokeCommissioning:(CHIPAdministratorCommissioningClusterRevokeCommissioningPayload * _Nonnull)payload
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AdministratorCommissioning::Commands::RevokeCommissioning::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPApplicationBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeStatus:(CHIPApplicationBasicClusterChangeStatusPayload * _Nonnull)payload
     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ApplicationBasic::Commands::ChangeStatus::Type request;
    request.status = static_cast<std::remove_reference_t<decltype(request.status)>>(payload.status.unsignedCharValue);

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)readAttributeVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorId(success, failure);
    });
}

- (void)readAttributeApplicationNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationName(success, failure);
    });
}

- (void)readAttributeProductIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductId(success, failure);
    });
}

- (void)readAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationId(success, failure);
    });
}

- (void)readAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCatalogVendorId(success, failure);
    });
}

- (void)readAttributeApplicationStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationStatus(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPApplicationLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)launchApp:(CHIPApplicationLauncherClusterLaunchAppPayload * _Nonnull)payload
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ApplicationLauncher::Commands::LaunchApp::Type request;
    request.data = [self asCharSpan:payload.data];
    request.catalogVendorId = payload.catalogVendorId.unsignedShortValue;
    request.applicationId = [self asCharSpan:payload.applicationId];

    new CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPApplicationLauncherClusterLaunchAppResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeApplicationLauncherListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeApplicationLauncherList(success, failure);
        });
}

- (void)readAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCatalogVendorId(success, failure);
    });
}

- (void)readAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationId(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPAudioOutput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)renameOutput:(CHIPAudioOutputClusterRenameOutputPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AudioOutput::Commands::RenameOutput::Type request;
    request.index = payload.index.unsignedCharValue;
    request.name = [self asCharSpan:payload.name];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)selectOutput:(CHIPAudioOutputClusterSelectOutputPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AudioOutput::Commands::SelectOutput::Type request;
    request.index = payload.index.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeAudioOutputListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPAudioOutputAudioOutputListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeAudioOutputList(success, failure);
        });
}

- (void)readAttributeCurrentAudioOutputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentAudioOutput(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBarrierControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)barrierControlGoToPercent:(CHIPBarrierControlClusterBarrierControlGoToPercentPayload * _Nonnull)payload
                  responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BarrierControl::Commands::BarrierControlGoToPercent::Type request;
    request.percentOpen = payload.percentOpen.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)barrierControlStop:(CHIPBarrierControlClusterBarrierControlStopPayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BarrierControl::Commands::BarrierControlStop::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBarrierMovingStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierMovingState(success, failure);
    });
}

- (void)readAttributeBarrierSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierSafetyStatus(success, failure);
    });
}

- (void)readAttributeBarrierCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierCapabilities(success, failure);
    });
}

- (void)readAttributeBarrierPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierPosition(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)mfgSpecificPing:(CHIPBasicClusterMfgSpecificPingPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Basic::Commands::MfgSpecificPing::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInteractionModelVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInteractionModelVersion(success, failure);
    });
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)readAttributeVendorIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorID(success, failure);
    });
}

- (void)readAttributeProductNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductName(success, failure);
    });
}

- (void)readAttributeProductIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductID(success, failure);
    });
}

- (void)readAttributeUserLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUserLabel(success, failure);
    });
}

- (void)writeAttributeUserLabelWithValue:(NSString * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Basic::Attributes::UserLabel::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asCharSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeLocationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocation(success, failure);
    });
}

- (void)writeAttributeLocationWithValue:(NSString * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Basic::Attributes::Location::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asCharSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeHardwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersion(success, failure);
    });
}

- (void)readAttributeHardwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersionString(success, failure);
    });
}

- (void)readAttributeSoftwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersion(success, failure);
    });
}

- (void)readAttributeSoftwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersionString(success, failure);
    });
}

- (void)readAttributeManufacturingDateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeManufacturingDate(success, failure);
    });
}

- (void)readAttributePartNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartNumber(success, failure);
    });
}

- (void)readAttributeProductURLWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductURL(success, failure);
    });
}

- (void)readAttributeProductLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductLabel(success, failure);
    });
}

- (void)readAttributeSerialNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSerialNumber(success, failure);
    });
}

- (void)readAttributeLocalConfigDisabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocalConfigDisabled(success, failure);
    });
}

- (void)writeAttributeLocalConfigDisabledWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Basic::Attributes::LocalConfigDisabled::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeReachableWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeReachable(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBinaryInputBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeOutOfServiceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOutOfService(success, failure);
    });
}

- (void)writeAttributeOutOfServiceWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = BinaryInputBasic::Attributes::OutOfService::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributePresentValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePresentValue(success, failure);
    });
}

- (void)writeAttributePresentValueWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = BinaryInputBasic::Attributes::PresentValue::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributePresentValueWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePresentValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePresentValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePresentValue(success);
        },
        true);
}

- (void)readAttributeStatusFlagsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStatusFlags(success, failure);
    });
}

- (void)subscribeAttributeStatusFlagsWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStatusFlags(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStatusFlagsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStatusFlags(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBinding

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)bind:(CHIPBindingClusterBindPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Binding::Commands::Bind::Type request;
    request.nodeId = payload.nodeId.unsignedLongLongValue;
    request.groupId = payload.groupId.unsignedShortValue;
    request.endpointId = payload.endpointId.unsignedShortValue;
    request.clusterId = payload.clusterId.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)unbind:(CHIPBindingClusterUnbindPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Binding::Commands::Unbind::Type request;
    request.nodeId = payload.nodeId.unsignedLongLongValue;
    request.groupId = payload.groupId.unsignedShortValue;
    request.endpointId = payload.endpointId.unsignedShortValue;
    request.clusterId = payload.clusterId.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBooleanState

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeStateValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStateValue(success, failure);
    });
}

- (void)subscribeAttributeStateValueWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStateValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStateValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStateValue(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBridgedActions

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)disableAction:(CHIPBridgedActionsClusterDisableActionPayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::DisableAction::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)disableActionWithDuration:(CHIPBridgedActionsClusterDisableActionWithDurationPayload * _Nonnull)payload
                  responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::DisableActionWithDuration::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }
    request.duration = payload.duration.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enableAction:(CHIPBridgedActionsClusterEnableActionPayload * _Nonnull)payload
     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::EnableAction::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enableActionWithDuration:(CHIPBridgedActionsClusterEnableActionWithDurationPayload * _Nonnull)payload
                 responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::EnableActionWithDuration::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }
    request.duration = payload.duration.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)instantAction:(CHIPBridgedActionsClusterInstantActionPayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::InstantAction::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)instantActionWithTransition:(CHIPBridgedActionsClusterInstantActionWithTransitionPayload * _Nonnull)payload
                    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::InstantActionWithTransition::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }
    request.transitionTime = payload.transitionTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)pauseAction:(CHIPBridgedActionsClusterPauseActionPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::PauseAction::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)pauseActionWithDuration:(CHIPBridgedActionsClusterPauseActionWithDurationPayload * _Nonnull)payload
                responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::PauseActionWithDuration::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }
    request.duration = payload.duration.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)resumeAction:(CHIPBridgedActionsClusterResumeActionPayload * _Nonnull)payload
     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::ResumeAction::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)startAction:(CHIPBridgedActionsClusterStartActionPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::StartAction::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)startActionWithDuration:(CHIPBridgedActionsClusterStartActionWithDurationPayload * _Nonnull)payload
                responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::StartActionWithDuration::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }
    request.duration = payload.duration.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopAction:(CHIPBridgedActionsClusterStopActionPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::StopAction::Type request;
    request.actionID = payload.actionID.unsignedShortValue;
    if (payload.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = payload.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeActionListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBridgedActionsActionListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActionList(success, failure);
        });
}

- (void)readAttributeEndpointListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBridgedActionsEndpointListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeEndpointList(success, failure);
        });
}

- (void)readAttributeSetupUrlWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSetupUrl(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBridgedDeviceBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)readAttributeVendorIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorID(success, failure);
    });
}

- (void)readAttributeProductNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductName(success, failure);
    });
}

- (void)readAttributeUserLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUserLabel(success, failure);
    });
}

- (void)writeAttributeUserLabelWithValue:(NSString * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = BridgedDeviceBasic::Attributes::UserLabel::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asCharSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeHardwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersion(success, failure);
    });
}

- (void)readAttributeHardwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersionString(success, failure);
    });
}

- (void)readAttributeSoftwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersion(success, failure);
    });
}

- (void)readAttributeSoftwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersionString(success, failure);
    });
}

- (void)readAttributeManufacturingDateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeManufacturingDate(success, failure);
    });
}

- (void)readAttributePartNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartNumber(success, failure);
    });
}

- (void)readAttributeProductURLWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductURL(success, failure);
    });
}

- (void)readAttributeProductLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductLabel(success, failure);
    });
}

- (void)readAttributeSerialNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSerialNumber(success, failure);
    });
}

- (void)readAttributeReachableWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeReachable(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPColorControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)colorLoopSet:(CHIPColorControlClusterColorLoopSetPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::ColorLoopSet::Type request;
    request.updateFlags
        = static_cast<std::remove_reference_t<decltype(request.updateFlags)>>(payload.updateFlags.unsignedCharValue);
    request.action = static_cast<std::remove_reference_t<decltype(request.action)>>(payload.action.unsignedCharValue);
    request.direction = static_cast<std::remove_reference_t<decltype(request.direction)>>(payload.direction.unsignedCharValue);
    request.time = payload.time.unsignedShortValue;
    request.startHue = payload.startHue.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedMoveHue:(CHIPColorControlClusterEnhancedMoveHuePayload * _Nonnull)payload
        responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedMoveHue::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(payload.moveMode.unsignedCharValue);
    request.rate = payload.rate.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedMoveToHue:(CHIPColorControlClusterEnhancedMoveToHuePayload * _Nonnull)payload
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedMoveToHue::Type request;
    request.enhancedHue = payload.enhancedHue.unsignedShortValue;
    request.direction = static_cast<std::remove_reference_t<decltype(request.direction)>>(payload.direction.unsignedCharValue);
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedMoveToHueAndSaturation:(CHIPColorControlClusterEnhancedMoveToHueAndSaturationPayload * _Nonnull)payload
                       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedMoveToHueAndSaturation::Type request;
    request.enhancedHue = payload.enhancedHue.unsignedShortValue;
    request.saturation = payload.saturation.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedStepHue:(CHIPColorControlClusterEnhancedStepHuePayload * _Nonnull)payload
        responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedStepHue::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(payload.stepMode.unsignedCharValue);
    request.stepSize = payload.stepSize.unsignedShortValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveColor:(CHIPColorControlClusterMoveColorPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveColor::Type request;
    request.rateX = payload.rateX.shortValue;
    request.rateY = payload.rateY.shortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveColorTemperature:(CHIPColorControlClusterMoveColorTemperaturePayload * _Nonnull)payload
             responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveColorTemperature::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(payload.moveMode.unsignedCharValue);
    request.rate = payload.rate.unsignedShortValue;
    request.colorTemperatureMinimum = payload.colorTemperatureMinimum.unsignedShortValue;
    request.colorTemperatureMaximum = payload.colorTemperatureMaximum.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveHue:(CHIPColorControlClusterMoveHuePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveHue::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(payload.moveMode.unsignedCharValue);
    request.rate = payload.rate.unsignedCharValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveSaturation:(CHIPColorControlClusterMoveSaturationPayload * _Nonnull)payload
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveSaturation::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(payload.moveMode.unsignedCharValue);
    request.rate = payload.rate.unsignedCharValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToColor:(CHIPColorControlClusterMoveToColorPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToColor::Type request;
    request.colorX = payload.colorX.unsignedShortValue;
    request.colorY = payload.colorY.unsignedShortValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToColorTemperature:(CHIPColorControlClusterMoveToColorTemperaturePayload * _Nonnull)payload
               responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToColorTemperature::Type request;
    request.colorTemperature = payload.colorTemperature.unsignedShortValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToHue:(CHIPColorControlClusterMoveToHuePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToHue::Type request;
    request.hue = payload.hue.unsignedCharValue;
    request.direction = static_cast<std::remove_reference_t<decltype(request.direction)>>(payload.direction.unsignedCharValue);
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToHueAndSaturation:(CHIPColorControlClusterMoveToHueAndSaturationPayload * _Nonnull)payload
               responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToHueAndSaturation::Type request;
    request.hue = payload.hue.unsignedCharValue;
    request.saturation = payload.saturation.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToSaturation:(CHIPColorControlClusterMoveToSaturationPayload * _Nonnull)payload
         responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToSaturation::Type request;
    request.saturation = payload.saturation.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepColor:(CHIPColorControlClusterStepColorPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepColor::Type request;
    request.stepX = payload.stepX.shortValue;
    request.stepY = payload.stepY.shortValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepColorTemperature:(CHIPColorControlClusterStepColorTemperaturePayload * _Nonnull)payload
             responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepColorTemperature::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(payload.stepMode.unsignedCharValue);
    request.stepSize = payload.stepSize.unsignedShortValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.colorTemperatureMinimum = payload.colorTemperatureMinimum.unsignedShortValue;
    request.colorTemperatureMaximum = payload.colorTemperatureMaximum.unsignedShortValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepHue:(CHIPColorControlClusterStepHuePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepHue::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(payload.stepMode.unsignedCharValue);
    request.stepSize = payload.stepSize.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedCharValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepSaturation:(CHIPColorControlClusterStepSaturationPayload * _Nonnull)payload
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepSaturation::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(payload.stepMode.unsignedCharValue);
    request.stepSize = payload.stepSize.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedCharValue;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopMoveStep:(CHIPColorControlClusterStopMoveStepPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StopMoveStep::Type request;
    request.optionsMask = payload.optionsMask.unsignedCharValue;
    request.optionsOverride = payload.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHue(success, failure);
    });
}

- (void)subscribeAttributeCurrentHueWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentHue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentHue(success);
        },
        true);
}

- (void)readAttributeCurrentSaturationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentSaturation(success, failure);
    });
}

- (void)subscribeAttributeCurrentSaturationWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentSaturation(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentSaturationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentSaturation(success);
        },
        true);
}

- (void)readAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRemainingTime(success, failure);
    });
}

- (void)readAttributeCurrentXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentX(success, failure);
    });
}

- (void)subscribeAttributeCurrentXWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentX(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentX(success);
        },
        true);
}

- (void)readAttributeCurrentYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentY(success, failure);
    });
}

- (void)subscribeAttributeCurrentYWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentY(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentY(success);
        },
        true);
}

- (void)readAttributeDriftCompensationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDriftCompensation(success, failure);
    });
}

- (void)readAttributeCompensationTextWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCompensationText(success, failure);
    });
}

- (void)readAttributeColorTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTemperature(success, failure);
    });
}

- (void)subscribeAttributeColorTemperatureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorTemperature(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorTemperature(success);
        },
        true);
}

- (void)readAttributeColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorMode(success, failure);
    });
}

- (void)readAttributeColorControlOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorControlOptions(success, failure);
    });
}

- (void)writeAttributeColorControlOptionsWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorControlOptions::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNumberOfPrimariesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfPrimaries(success, failure);
    });
}

- (void)readAttributePrimary1XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1X(success, failure);
    });
}

- (void)readAttributePrimary1YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1Y(success, failure);
    });
}

- (void)readAttributePrimary1IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1Intensity(success, failure);
    });
}

- (void)readAttributePrimary2XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2X(success, failure);
    });
}

- (void)readAttributePrimary2YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2Y(success, failure);
    });
}

- (void)readAttributePrimary2IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2Intensity(success, failure);
    });
}

- (void)readAttributePrimary3XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3X(success, failure);
    });
}

- (void)readAttributePrimary3YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3Y(success, failure);
    });
}

- (void)readAttributePrimary3IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3Intensity(success, failure);
    });
}

- (void)readAttributePrimary4XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4X(success, failure);
    });
}

- (void)readAttributePrimary4YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4Y(success, failure);
    });
}

- (void)readAttributePrimary4IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4Intensity(success, failure);
    });
}

- (void)readAttributePrimary5XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5X(success, failure);
    });
}

- (void)readAttributePrimary5YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5Y(success, failure);
    });
}

- (void)readAttributePrimary5IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5Intensity(success, failure);
    });
}

- (void)readAttributePrimary6XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6X(success, failure);
    });
}

- (void)readAttributePrimary6YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6Y(success, failure);
    });
}

- (void)readAttributePrimary6IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6Intensity(success, failure);
    });
}

- (void)readAttributeWhitePointXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWhitePointX(success, failure);
    });
}

- (void)writeAttributeWhitePointXWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::WhitePointX::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeWhitePointYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWhitePointY(success, failure);
    });
}

- (void)writeAttributeWhitePointYWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::WhitePointY::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeColorPointRXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRX(success, failure);
    });
}

- (void)writeAttributeColorPointRXWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointRX::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeColorPointRYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRY(success, failure);
    });
}

- (void)writeAttributeColorPointRYWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointRY::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeColorPointRIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointRIntensityWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointRIntensity::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeColorPointGXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGX(success, failure);
    });
}

- (void)writeAttributeColorPointGXWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointGX::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeColorPointGYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGY(success, failure);
    });
}

- (void)writeAttributeColorPointGYWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointGY::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeColorPointGIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointGIntensityWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointGIntensity::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeColorPointBXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBX(success, failure);
    });
}

- (void)writeAttributeColorPointBXWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointBX::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeColorPointBYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBY(success, failure);
    });
}

- (void)writeAttributeColorPointBYWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointBY::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeColorPointBIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointBIntensityWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointBIntensity::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeEnhancedCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnhancedCurrentHue(success, failure);
    });
}

- (void)readAttributeEnhancedColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnhancedColorMode(success, failure);
    });
}

- (void)readAttributeColorLoopActiveWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopActive(success, failure);
    });
}

- (void)readAttributeColorLoopDirectionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopDirection(success, failure);
    });
}

- (void)readAttributeColorLoopTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopTime(success, failure);
    });
}

- (void)readAttributeColorLoopStartEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopStartEnhancedHue(success, failure);
    });
}

- (void)readAttributeColorLoopStoredEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopStoredEnhancedHue(success, failure);
    });
}

- (void)readAttributeColorCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorCapabilities(success, failure);
    });
}

- (void)readAttributeColorTempPhysicalMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTempPhysicalMin(success, failure);
    });
}

- (void)readAttributeColorTempPhysicalMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTempPhysicalMax(success, failure);
    });
}

- (void)readAttributeCoupleColorTempToLevelMinMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCoupleColorTempToLevelMinMireds(success, failure);
    });
}

- (void)readAttributeStartUpColorTemperatureMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpColorTemperatureMireds(success, failure);
    });
}

- (void)writeAttributeStartUpColorTemperatureMiredsWithValue:(NSNumber * _Nonnull)value
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::StartUpColorTemperatureMireds::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPContentLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)launchContent:(CHIPContentLauncherClusterLaunchContentPayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ContentLauncher::Commands::LaunchContent::Type request;
    request.autoPlay = payload.autoPlay.boolValue;
    request.data = [self asCharSpan:payload.data];

    new CHIPContentLauncherClusterLaunchContentResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPContentLauncherClusterLaunchContentResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)launchURL:(CHIPContentLauncherClusterLaunchURLPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ContentLauncher::Commands::LaunchURL::Type request;
    request.contentURL = [self asCharSpan:payload.contentURL];
    request.displayString = [self asCharSpan:payload.displayString];

    new CHIPContentLauncherClusterLaunchURLResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPContentLauncherClusterLaunchURLResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeAcceptsHeaderListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeAcceptsHeaderList(success, failure);
        });
}

- (void)readAttributeSupportedStreamingTypesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSupportedStreamingTypes(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPDescriptor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeDeviceListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorDeviceListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeDeviceList(success, failure);
        });
}

- (void)readAttributeServerListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorServerListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeServerList(success, failure);
        });
}

- (void)readAttributeClientListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorClientListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeClientList(success, failure);
        });
}

- (void)readAttributePartsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorPartsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributePartsList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPDiagnosticLogs

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)retrieveLogsRequest:(CHIPDiagnosticLogsClusterRetrieveLogsRequestPayload * _Nonnull)payload
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DiagnosticLogs::Commands::RetrieveLogsRequest::Type request;
    request.intent = static_cast<std::remove_reference_t<decltype(request.intent)>>(payload.intent.unsignedCharValue);
    request.requestedProtocol
        = static_cast<std::remove_reference_t<decltype(request.requestedProtocol)>>(payload.requestedProtocol.unsignedCharValue);
    request.transferFileDesignator = [self asByteSpan:payload.transferFileDesignator];

    new CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

@end

@implementation CHIPDoorLock

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)clearAllPins:(CHIPDoorLockClusterClearAllPinsPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearAllPins::Type request;

    new CHIPDoorLockClusterClearAllPinsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearAllPinsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearAllRfids:(CHIPDoorLockClusterClearAllRfidsPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearAllRfids::Type request;

    new CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearAllRfidsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearHolidaySchedule:(CHIPDoorLockClusterClearHolidaySchedulePayload * _Nonnull)payload
             responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearHolidaySchedule::Type request;
    request.scheduleId = payload.scheduleId.unsignedCharValue;

    new CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearHolidayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearPin:(CHIPDoorLockClusterClearPinPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearPin::Type request;
    request.userId = payload.userId.unsignedShortValue;

    new CHIPDoorLockClusterClearPinResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearPinResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearRfid:(CHIPDoorLockClusterClearRfidPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearRfid::Type request;
    request.userId = payload.userId.unsignedShortValue;

    new CHIPDoorLockClusterClearRfidResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearRfidResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearWeekdaySchedule:(CHIPDoorLockClusterClearWeekdaySchedulePayload * _Nonnull)payload
             responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearWeekdaySchedule::Type request;
    request.scheduleId = payload.scheduleId.unsignedCharValue;
    request.userId = payload.userId.unsignedShortValue;

    new CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearYeardaySchedule:(CHIPDoorLockClusterClearYeardaySchedulePayload * _Nonnull)payload
             responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearYeardaySchedule::Type request;
    request.scheduleId = payload.scheduleId.unsignedCharValue;
    request.userId = payload.userId.unsignedShortValue;

    new CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearYeardayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getHolidaySchedule:(CHIPDoorLockClusterGetHolidaySchedulePayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetHolidaySchedule::Type request;
    request.scheduleId = payload.scheduleId.unsignedCharValue;

    new CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetHolidayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getLogRecord:(CHIPDoorLockClusterGetLogRecordPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetLogRecord::Type request;
    request.logIndex = payload.logIndex.unsignedShortValue;

    new CHIPDoorLockClusterGetLogRecordResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetLogRecordResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getPin:(CHIPDoorLockClusterGetPinPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetPin::Type request;
    request.userId = payload.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetPinResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetPinResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getRfid:(CHIPDoorLockClusterGetRfidPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetRfid::Type request;
    request.userId = payload.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetRfidResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetRfidResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getUserType:(CHIPDoorLockClusterGetUserTypePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetUserType::Type request;
    request.userId = payload.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetUserTypeResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetUserTypeResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getWeekdaySchedule:(CHIPDoorLockClusterGetWeekdaySchedulePayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetWeekdaySchedule::Type request;
    request.scheduleId = payload.scheduleId.unsignedCharValue;
    request.userId = payload.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getYeardaySchedule:(CHIPDoorLockClusterGetYeardaySchedulePayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetYeardaySchedule::Type request;
    request.scheduleId = payload.scheduleId.unsignedCharValue;
    request.userId = payload.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetYeardayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)lockDoor:(CHIPDoorLockClusterLockDoorPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::LockDoor::Type request;
    request.pin = [self asByteSpan:payload.pin];

    new CHIPDoorLockClusterLockDoorResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterLockDoorResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setHolidaySchedule:(CHIPDoorLockClusterSetHolidaySchedulePayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetHolidaySchedule::Type request;
    request.scheduleId = payload.scheduleId.unsignedCharValue;
    request.localStartTime = payload.localStartTime.unsignedIntValue;
    request.localEndTime = payload.localEndTime.unsignedIntValue;
    request.operatingModeDuringHoliday = payload.operatingModeDuringHoliday.unsignedCharValue;

    new CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetHolidayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setPin:(CHIPDoorLockClusterSetPinPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetPin::Type request;
    request.userId = payload.userId.unsignedShortValue;
    request.userStatus = static_cast<std::remove_reference_t<decltype(request.userStatus)>>(payload.userStatus.unsignedCharValue);
    request.userType = static_cast<std::remove_reference_t<decltype(request.userType)>>(payload.userType.unsignedCharValue);
    request.pin = [self asByteSpan:payload.pin];

    new CHIPDoorLockClusterSetPinResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetPinResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setRfid:(CHIPDoorLockClusterSetRfidPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetRfid::Type request;
    request.userId = payload.userId.unsignedShortValue;
    request.userStatus = static_cast<std::remove_reference_t<decltype(request.userStatus)>>(payload.userStatus.unsignedCharValue);
    request.userType = static_cast<std::remove_reference_t<decltype(request.userType)>>(payload.userType.unsignedCharValue);
    request.id = [self asByteSpan:payload.id];

    new CHIPDoorLockClusterSetRfidResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetRfidResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setUserType:(CHIPDoorLockClusterSetUserTypePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetUserType::Type request;
    request.userId = payload.userId.unsignedShortValue;
    request.userType = static_cast<std::remove_reference_t<decltype(request.userType)>>(payload.userType.unsignedCharValue);

    new CHIPDoorLockClusterSetUserTypeResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetUserTypeResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setWeekdaySchedule:(CHIPDoorLockClusterSetWeekdaySchedulePayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetWeekdaySchedule::Type request;
    request.scheduleId = payload.scheduleId.unsignedCharValue;
    request.userId = payload.userId.unsignedShortValue;
    request.daysMask = static_cast<std::remove_reference_t<decltype(request.daysMask)>>(payload.daysMask.unsignedCharValue);
    request.startHour = payload.startHour.unsignedCharValue;
    request.startMinute = payload.startMinute.unsignedCharValue;
    request.endHour = payload.endHour.unsignedCharValue;
    request.endMinute = payload.endMinute.unsignedCharValue;

    new CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setYeardaySchedule:(CHIPDoorLockClusterSetYeardaySchedulePayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetYeardaySchedule::Type request;
    request.scheduleId = payload.scheduleId.unsignedCharValue;
    request.userId = payload.userId.unsignedShortValue;
    request.localStartTime = payload.localStartTime.unsignedIntValue;
    request.localEndTime = payload.localEndTime.unsignedIntValue;

    new CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetYeardayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)unlockDoor:(CHIPDoorLockClusterUnlockDoorPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::UnlockDoor::Type request;
    request.pin = [self asByteSpan:payload.pin];

    new CHIPDoorLockClusterUnlockDoorResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterUnlockDoorResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)unlockWithTimeout:(CHIPDoorLockClusterUnlockWithTimeoutPayload * _Nonnull)payload
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::UnlockWithTimeout::Type request;
    request.timeoutInSeconds = payload.timeoutInSeconds.unsignedShortValue;
    request.pin = [self asByteSpan:payload.pin];

    new CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeLockStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLockState(success, failure);
    });
}

- (void)subscribeAttributeLockStateWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLockState(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLockStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLockState(success);
        },
        true);
}

- (void)readAttributeLockTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLockType(success, failure);
    });
}

- (void)readAttributeActuatorEnabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActuatorEnabled(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPElectricalMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasurementTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasurementType(success, failure);
    });
}

- (void)readAttributeTotalActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTotalActivePower(success, failure);
    });
}

- (void)readAttributeRmsVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltage(success, failure);
    });
}

- (void)readAttributeRmsVoltageMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltageMin(success, failure);
    });
}

- (void)readAttributeRmsVoltageMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltageMax(success, failure);
    });
}

- (void)readAttributeRmsCurrentWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrent(success, failure);
    });
}

- (void)readAttributeRmsCurrentMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrentMin(success, failure);
    });
}

- (void)readAttributeRmsCurrentMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrentMax(success, failure);
    });
}

- (void)readAttributeActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePower(success, failure);
    });
}

- (void)readAttributeActivePowerMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePowerMin(success, failure);
    });
}

- (void)readAttributeActivePowerMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePowerMax(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPEthernetNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCounts:(CHIPEthernetNetworkDiagnosticsClusterResetCountsPayload * _Nonnull)payload
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    EthernetNetworkDiagnostics::Commands::ResetCounts::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributePHYRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePHYRate(success, failure);
    });
}

- (void)readAttributeFullDuplexWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFullDuplex(success, failure);
    });
}

- (void)readAttributePacketRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketRxCount(success, failure);
    });
}

- (void)readAttributePacketTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketTxCount(success, failure);
    });
}

- (void)readAttributeTxErrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrCount(success, failure);
    });
}

- (void)readAttributeCollisionCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCollisionCount(success, failure);
    });
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)readAttributeCarrierDetectWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCarrierDetect(success, failure);
    });
}

- (void)readAttributeTimeSinceResetWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTimeSinceReset(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPFixedLabel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeLabelListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPFixedLabelLabelListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeLabelList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPFlowMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGeneralCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)armFailSafe:(CHIPGeneralCommissioningClusterArmFailSafePayload * _Nonnull)payload
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    GeneralCommissioning::Commands::ArmFailSafe::Type request;
    request.expiryLengthSeconds = payload.expiryLengthSeconds.unsignedShortValue;
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)commissioningComplete:(CHIPGeneralCommissioningClusterCommissioningCompletePayload * _Nonnull)payload
              responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    GeneralCommissioning::Commands::CommissioningComplete::Type request;

    new CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setRegulatoryConfig:(CHIPGeneralCommissioningClusterSetRegulatoryConfigPayload * _Nonnull)payload
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    GeneralCommissioning::Commands::SetRegulatoryConfig::Type request;
    request.location = static_cast<std::remove_reference_t<decltype(request.location)>>(payload.location.unsignedCharValue);
    request.countryCode = [self asCharSpan:payload.countryCode];
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeBreadcrumbWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBreadcrumb(success, failure);
    });
}

- (void)writeAttributeBreadcrumbWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = GeneralCommissioning::Attributes::Breadcrumb::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedLongLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBasicCommissioningInfoListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeBasicCommissioningInfoList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGeneralDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeNetworkInterfacesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeNetworkInterfaces(success, failure);
        });
}

- (void)readAttributeRebootCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRebootCount(success, failure);
    });
}

- (void)readAttributeUpTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUpTime(success, failure);
    });
}

- (void)readAttributeTotalOperationalHoursWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTotalOperationalHours(success, failure);
    });
}

- (void)readAttributeBootReasonsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBootReasons(success, failure);
    });
}

- (void)readAttributeActiveHardwareFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveHardwareFaults(success, failure);
        });
}

- (void)readAttributeActiveRadioFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveRadioFaults(success, failure);
        });
}

- (void)readAttributeActiveNetworkFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveNetworkFaults(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGroupKeyManagement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeGroupsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupKeyManagementGroupsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeGroups(success, failure);
        });
}

- (void)readAttributeGroupKeysWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeGroupKeys(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGroups

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addGroup:(CHIPGroupsClusterAddGroupPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::AddGroup::Type request;
    request.groupId = payload.groupId.unsignedShortValue;
    request.groupName = [self asCharSpan:payload.groupName];

    new CHIPGroupsClusterAddGroupResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterAddGroupResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)addGroupIfIdentifying:(CHIPGroupsClusterAddGroupIfIdentifyingPayload * _Nonnull)payload
              responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::AddGroupIfIdentifying::Type request;
    request.groupId = payload.groupId.unsignedShortValue;
    request.groupName = [self asCharSpan:payload.groupName];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)getGroupMembership:(CHIPGroupsClusterGetGroupMembershipPayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::GetGroupMembership::Type request;
    request.groupCount = payload.groupCount.unsignedCharValue;
    {
        using ListType = std::remove_reference_t<decltype(request.groupList)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (payload.groupList.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(payload.groupList.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < payload.groupList.count; ++i) {
                if (![payload.groupList[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) payload.groupList[i];
                listHolder_0->mList[i] = element_0.unsignedShortValue;
            }
            request.groupList = ListType(listHolder_0->mList, payload.groupList.count);
        } else {
            request.groupList = ListType();
        }
    }

    new CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterGetGroupMembershipResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeAllGroups:(CHIPGroupsClusterRemoveAllGroupsPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::RemoveAllGroups::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)removeGroup:(CHIPGroupsClusterRemoveGroupPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::RemoveGroup::Type request;
    request.groupId = payload.groupId.unsignedShortValue;

    new CHIPGroupsClusterRemoveGroupResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterRemoveGroupResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)viewGroup:(CHIPGroupsClusterViewGroupPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::ViewGroup::Type request;
    request.groupId = payload.groupId.unsignedShortValue;

    new CHIPGroupsClusterViewGroupResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterViewGroupResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNameSupport(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPIdentify

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)identify:(CHIPIdentifyClusterIdentifyPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Identify::Commands::Identify::Type request;
    request.identifyTime = payload.identifyTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)identifyQuery:(CHIPIdentifyClusterIdentifyQueryPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Identify::Commands::IdentifyQuery::Type request;

    new CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPIdentifyClusterIdentifyQueryResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)triggerEffect:(CHIPIdentifyClusterTriggerEffectPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Identify::Commands::TriggerEffect::Type request;
    request.effectIdentifier
        = static_cast<std::remove_reference_t<decltype(request.effectIdentifier)>>(payload.effectIdentifier.unsignedCharValue);
    request.effectVariant
        = static_cast<std::remove_reference_t<decltype(request.effectVariant)>>(payload.effectVariant.unsignedCharValue);

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeIdentifyTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeIdentifyTime(success, failure);
    });
}

- (void)writeAttributeIdentifyTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Identify::Attributes::IdentifyTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeIdentifyTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeIdentifyType(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPIlluminanceMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)readAttributeLightSensorTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLightSensorType(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPKeypadInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)sendKey:(CHIPKeypadInputClusterSendKeyPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    KeypadInput::Commands::SendKey::Type request;
    request.keyCode = static_cast<std::remove_reference_t<decltype(request.keyCode)>>(payload.keyCode.unsignedCharValue);

    new CHIPKeypadInputClusterSendKeyResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPKeypadInputClusterSendKeyResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPLevelControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)move:(CHIPLevelControlClusterMovePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::Move::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(payload.moveMode.unsignedCharValue);
    request.rate = payload.rate.unsignedCharValue;
    request.optionMask = payload.optionMask.unsignedCharValue;
    request.optionOverride = payload.optionOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToLevel:(CHIPLevelControlClusterMoveToLevelPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::MoveToLevel::Type request;
    request.level = payload.level.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionMask = payload.optionMask.unsignedCharValue;
    request.optionOverride = payload.optionOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToLevelWithOnOff:(CHIPLevelControlClusterMoveToLevelWithOnOffPayload * _Nonnull)payload
             responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::MoveToLevelWithOnOff::Type request;
    request.level = payload.level.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveWithOnOff:(CHIPLevelControlClusterMoveWithOnOffPayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::MoveWithOnOff::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(payload.moveMode.unsignedCharValue);
    request.rate = payload.rate.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)step:(CHIPLevelControlClusterStepPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::Step::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(payload.stepMode.unsignedCharValue);
    request.stepSize = payload.stepSize.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.optionMask = payload.optionMask.unsignedCharValue;
    request.optionOverride = payload.optionOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepWithOnOff:(CHIPLevelControlClusterStepWithOnOffPayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::StepWithOnOff::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(payload.stepMode.unsignedCharValue);
    request.stepSize = payload.stepSize.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stop:(CHIPLevelControlClusterStopPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::Stop::Type request;
    request.optionMask = payload.optionMask.unsignedCharValue;
    request.optionOverride = payload.optionOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopWithOnOff:(CHIPLevelControlClusterStopWithOnOffPayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::StopWithOnOff::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentLevel(success, failure);
    });
}

- (void)subscribeAttributeCurrentLevelWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentLevel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentLevel(success);
        },
        true);
}

- (void)readAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRemainingTime(success, failure);
    });
}

- (void)readAttributeMinLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinLevel(success, failure);
    });
}

- (void)readAttributeMaxLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxLevel(success, failure);
    });
}

- (void)readAttributeCurrentFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentFrequency(success, failure);
    });
}

- (void)readAttributeMinFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinFrequency(success, failure);
    });
}

- (void)readAttributeMaxFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxFrequency(success, failure);
    });
}

- (void)readAttributeOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOptions(success, failure);
    });
}

- (void)writeAttributeOptionsWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::Options::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOnOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnOffTransitionTime(success, failure);
    });
}

- (void)writeAttributeOnOffTransitionTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::OnOffTransitionTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOnLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnLevel(success, failure);
    });
}

- (void)writeAttributeOnLevelWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::OnLevel::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOnTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnTransitionTime(success, failure);
    });
}

- (void)writeAttributeOnTransitionTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::OnTransitionTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOffTransitionTime(success, failure);
    });
}

- (void)writeAttributeOffTransitionTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::OffTransitionTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeDefaultMoveRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDefaultMoveRate(success, failure);
    });
}

- (void)writeAttributeDefaultMoveRateWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::DefaultMoveRate::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeStartUpCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpCurrentLevel(success, failure);
    });
}

- (void)writeAttributeStartUpCurrentLevelWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::StartUpCurrentLevel::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPLowPower

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)sleep:(CHIPLowPowerClusterSleepPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LowPower::Commands::Sleep::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPMediaInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)hideInputStatus:(CHIPMediaInputClusterHideInputStatusPayload * _Nonnull)payload
        responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaInput::Commands::HideInputStatus::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)renameInput:(CHIPMediaInputClusterRenameInputPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaInput::Commands::RenameInput::Type request;
    request.index = payload.index.unsignedCharValue;
    request.name = [self asCharSpan:payload.name];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)selectInput:(CHIPMediaInputClusterSelectInputPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaInput::Commands::SelectInput::Type request;
    request.index = payload.index.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)showInputStatus:(CHIPMediaInputClusterShowInputStatusPayload * _Nonnull)payload
        responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaInput::Commands::ShowInputStatus::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeMediaInputListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPMediaInputMediaInputListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeMediaInputList(success, failure);
        });
}

- (void)readAttributeCurrentMediaInputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMediaInput(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPMediaPlayback

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)mediaFastForward:(CHIPMediaPlaybackClusterMediaFastForwardPayload * _Nonnull)payload
         responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaFastForward::Type request;

    new CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaNext:(CHIPMediaPlaybackClusterMediaNextPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaNext::Type request;

    new CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaNextResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaPause:(CHIPMediaPlaybackClusterMediaPausePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaPause::Type request;

    new CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaPauseResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaPlay:(CHIPMediaPlaybackClusterMediaPlayPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaPlay::Type request;

    new CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaPlayResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaPrevious:(CHIPMediaPlaybackClusterMediaPreviousPayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaPrevious::Type request;

    new CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaPreviousResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaRewind:(CHIPMediaPlaybackClusterMediaRewindPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaRewind::Type request;

    new CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaRewindResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaSeek:(CHIPMediaPlaybackClusterMediaSeekPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaSeek::Type request;
    request.position = payload.position.unsignedLongLongValue;

    new CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaSeekResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaSkipBackward:(CHIPMediaPlaybackClusterMediaSkipBackwardPayload * _Nonnull)payload
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaSkipBackward::Type request;
    request.deltaPositionMilliseconds = payload.deltaPositionMilliseconds.unsignedLongLongValue;

    new CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaSkipForward:(CHIPMediaPlaybackClusterMediaSkipForwardPayload * _Nonnull)payload
         responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaSkipForward::Type request;
    request.deltaPositionMilliseconds = payload.deltaPositionMilliseconds.unsignedLongLongValue;

    new CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaStartOver:(CHIPMediaPlaybackClusterMediaStartOverPayload * _Nonnull)payload
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaStartOver::Type request;

    new CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaStartOverResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaStop:(CHIPMediaPlaybackClusterMediaStopPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaStop::Type request;

    new CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaStopResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributePlaybackStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePlaybackState(success, failure);
    });
}

- (void)readAttributeStartTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartTime(success, failure);
    });
}

- (void)readAttributeDurationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDuration(success, failure);
    });
}

- (void)readAttributePositionUpdatedAtWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePositionUpdatedAt(success, failure);
    });
}

- (void)readAttributePositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePosition(success, failure);
    });
}

- (void)readAttributePlaybackSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePlaybackSpeed(success, failure);
    });
}

- (void)readAttributeSeekRangeEndWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSeekRangeEnd(success, failure);
    });
}

- (void)readAttributeSeekRangeStartWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSeekRangeStart(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPModeSelect

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeToMode:(CHIPModeSelectClusterChangeToModePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ModeSelect::Commands::ChangeToMode::Type request;
    request.newMode = payload.newMode.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCurrentModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMode(success, failure);
    });
}

- (void)subscribeAttributeCurrentModeWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentMode(success);
        },
        true);
}

- (void)readAttributeSupportedModesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPModeSelectSupportedModesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSupportedModes(success, failure);
        });
}

- (void)readAttributeOnModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnMode(success, failure);
    });
}

- (void)writeAttributeOnModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ModeSelect::Attributes::OnMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeStartUpModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpMode(success, failure);
    });
}

- (void)readAttributeDescriptionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDescription(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPNetworkCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addThreadNetwork:(CHIPNetworkCommissioningClusterAddThreadNetworkPayload * _Nonnull)payload
         responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::AddThreadNetwork::Type request;
    request.operationalDataset = [self asByteSpan:payload.operationalDataset];
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)addWiFiNetwork:(CHIPNetworkCommissioningClusterAddWiFiNetworkPayload * _Nonnull)payload
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::AddWiFiNetwork::Type request;
    request.ssid = [self asByteSpan:payload.ssid];
    request.credentials = [self asByteSpan:payload.credentials];
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)disableNetwork:(CHIPNetworkCommissioningClusterDisableNetworkPayload * _Nonnull)payload
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::DisableNetwork::Type request;
    request.networkID = [self asByteSpan:payload.networkID];
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)enableNetwork:(CHIPNetworkCommissioningClusterEnableNetworkPayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::EnableNetwork::Type request;
    request.networkID = [self asByteSpan:payload.networkID];
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeNetwork:(CHIPNetworkCommissioningClusterRemoveNetworkPayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::RemoveNetwork::Type request;
    request.networkID = [self asByteSpan:payload.networkID];
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)scanNetworks:(CHIPNetworkCommissioningClusterScanNetworksPayload * _Nonnull)payload
     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::ScanNetworks::Type request;
    request.ssid = [self asByteSpan:payload.ssid];
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterScanNetworksResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)updateThreadNetwork:(CHIPNetworkCommissioningClusterUpdateThreadNetworkPayload * _Nonnull)payload
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::UpdateThreadNetwork::Type request;
    request.operationalDataset = [self asByteSpan:payload.operationalDataset];
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)updateWiFiNetwork:(CHIPNetworkCommissioningClusterUpdateWiFiNetworkPayload * _Nonnull)payload
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::UpdateWiFiNetwork::Type request;
    request.ssid = [self asByteSpan:payload.ssid];
    request.credentials = [self asByteSpan:payload.credentials];
    request.breadcrumb = payload.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = payload.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOtaSoftwareUpdateProvider

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)applyUpdateRequest:(CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestPayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateProvider::Commands::ApplyUpdateRequest::Type request;
    request.updateToken = [self asByteSpan:payload.updateToken];
    request.newVersion = payload.newVersion.unsignedIntValue;

    new CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)notifyUpdateApplied:(CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedPayload * _Nonnull)payload
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateProvider::Commands::NotifyUpdateApplied::Type request;
    request.updateToken = [self asByteSpan:payload.updateToken];
    request.softwareVersion = payload.softwareVersion.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)queryImage:(CHIPOtaSoftwareUpdateProviderClusterQueryImagePayload * _Nonnull)payload
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateProvider::Commands::QueryImage::Type request;
    request.vendorId = static_cast<std::remove_reference_t<decltype(request.vendorId)>>(payload.vendorId.unsignedShortValue);
    request.productId = payload.productId.unsignedShortValue;
    request.softwareVersion = payload.softwareVersion.unsignedIntValue;
    {
        using ListType = std::remove_reference_t<decltype(request.protocolsSupported)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (payload.protocolsSupported.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(payload.protocolsSupported.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < payload.protocolsSupported.count; ++i) {
                if (![payload.protocolsSupported[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) payload.protocolsSupported[i];
                listHolder_0->mList[i]
                    = static_cast<std::remove_reference_t<decltype(listHolder_0->mList[i])>>(element_0.unsignedCharValue);
            }
            request.protocolsSupported = ListType(listHolder_0->mList, payload.protocolsSupported.count);
        } else {
            request.protocolsSupported = ListType();
        }
    }
    if (payload.hardwareVersion != nil) {
        auto & definedValue_0 = request.hardwareVersion.Emplace();
        definedValue_0 = payload.hardwareVersion.unsignedShortValue;
    }
    if (payload.location != nil) {
        auto & definedValue_0 = request.location.Emplace();
        definedValue_0 = [self asCharSpan:payload.location];
    }
    if (payload.requestorCanConsent != nil) {
        auto & definedValue_0 = request.requestorCanConsent.Emplace();
        definedValue_0 = payload.requestorCanConsent.boolValue;
    }
    if (payload.metadataForProvider != nil) {
        auto & definedValue_0 = request.metadataForProvider.Emplace();
        definedValue_0 = [self asByteSpan:payload.metadataForProvider];
    }

    new CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOtaSoftwareUpdateRequestor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)announceOtaProvider:(CHIPOtaSoftwareUpdateRequestorClusterAnnounceOtaProviderPayload * _Nonnull)payload
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateRequestor::Commands::AnnounceOtaProvider::Type request;
    request.providerLocation = payload.providerLocation.unsignedLongLongValue;
    request.vendorId = static_cast<std::remove_reference_t<decltype(request.vendorId)>>(payload.vendorId.unsignedShortValue);
    request.announcementReason
        = static_cast<std::remove_reference_t<decltype(request.announcementReason)>>(payload.announcementReason.unsignedCharValue);
    if (payload.metadataForNode != nil) {
        auto & definedValue_0 = request.metadataForNode.Emplace();
        definedValue_0 = [self asByteSpan:payload.metadataForNode];
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeDefaultOtaProviderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDefaultOtaProvider(success, failure);
    });
}

- (void)writeAttributeDefaultOtaProviderWithValue:(NSData * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OtaSoftwareUpdateRequestor::Attributes::DefaultOtaProvider::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asByteSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeUpdatePossibleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUpdatePossible(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOccupancySensing

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeOccupancyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancy(success, failure);
    });
}

- (void)subscribeAttributeOccupancyWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOccupancy(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOccupancyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOccupancy(success);
        },
        true);
}

- (void)readAttributeOccupancySensorTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancySensorType(success, failure);
    });
}

- (void)readAttributeOccupancySensorTypeBitmapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancySensorTypeBitmap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOnOff

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)off:(CHIPOnOffClusterOffPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::Off::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)offWithEffect:(CHIPOnOffClusterOffWithEffectPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::OffWithEffect::Type request;
    request.effectId = static_cast<std::remove_reference_t<decltype(request.effectId)>>(payload.effectId.unsignedCharValue);
    request.effectVariant
        = static_cast<std::remove_reference_t<decltype(request.effectVariant)>>(payload.effectVariant.unsignedCharValue);

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)on:(CHIPOnOffClusterOnPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::On::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)onWithRecallGlobalScene:(CHIPOnOffClusterOnWithRecallGlobalScenePayload * _Nonnull)payload
                responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::OnWithRecallGlobalScene::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)onWithTimedOff:(CHIPOnOffClusterOnWithTimedOffPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::OnWithTimedOff::Type request;
    request.onOffControl
        = static_cast<std::remove_reference_t<decltype(request.onOffControl)>>(payload.onOffControl.unsignedCharValue);
    request.onTime = payload.onTime.unsignedShortValue;
    request.offWaitTime = payload.offWaitTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)toggle:(CHIPOnOffClusterTogglePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::Toggle::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnOff(success, failure);
    });
}

- (void)subscribeAttributeOnOffWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOnOff(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOnOff(success);
        },
        true);
}

- (void)readAttributeGlobalSceneControlWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeGlobalSceneControl(success, failure);
    });
}

- (void)readAttributeOnTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnTime(success, failure);
    });
}

- (void)writeAttributeOnTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OnOff::Attributes::OnTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOffWaitTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOffWaitTime(success, failure);
    });
}

- (void)writeAttributeOffWaitTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OnOff::Attributes::OffWaitTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeStartUpOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpOnOff(success, failure);
    });
}

- (void)writeAttributeStartUpOnOffWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OnOff::Attributes::StartUpOnOff::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOnOffSwitchConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeSwitchTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSwitchType(success, failure);
    });
}

- (void)readAttributeSwitchActionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSwitchActions(success, failure);
    });
}

- (void)writeAttributeSwitchActionsWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OnOffSwitchConfiguration::Attributes::SwitchActions::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOperationalCredentials

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addNOC:(CHIPOperationalCredentialsClusterAddNOCPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::AddNOC::Type request;
    request.NOCValue = [self asByteSpan:payload.nocValue];
    if (payload.icacValue != nil) {
        auto & definedValue_0 = request.ICACValue.Emplace();
        definedValue_0 = [self asByteSpan:payload.icacValue];
    }
    request.IPKValue = [self asByteSpan:payload.ipkValue];
    request.caseAdminNode = payload.caseAdminNode.unsignedLongLongValue;
    request.adminVendorId = payload.adminVendorId.unsignedShortValue;

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)addTrustedRootCertificate:(CHIPOperationalCredentialsClusterAddTrustedRootCertificatePayload * _Nonnull)payload
                  responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::AddTrustedRootCertificate::Type request;
    request.rootCertificate = [self asByteSpan:payload.rootCertificate];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)attestationRequest:(CHIPOperationalCredentialsClusterAttestationRequestPayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::AttestationRequest::Type request;
    request.attestationNonce = [self asByteSpan:payload.attestationNonce];

    new CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterAttestationResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)certificateChainRequest:(CHIPOperationalCredentialsClusterCertificateChainRequestPayload * _Nonnull)payload
                responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::CertificateChainRequest::Type request;
    request.certificateType = payload.certificateType.unsignedCharValue;

    new CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPOperationalCredentialsClusterCertificateChainResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)opCSRRequest:(CHIPOperationalCredentialsClusterOpCSRRequestPayload * _Nonnull)payload
     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::OpCSRRequest::Type request;
    request.CSRNonce = [self asByteSpan:payload.csrNonce];

    new CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterOpCSRResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeFabric:(CHIPOperationalCredentialsClusterRemoveFabricPayload * _Nonnull)payload
     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::RemoveFabric::Type request;
    request.fabricIndex = payload.fabricIndex.unsignedCharValue;

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeTrustedRootCertificate:(CHIPOperationalCredentialsClusterRemoveTrustedRootCertificatePayload * _Nonnull)payload
                     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::RemoveTrustedRootCertificate::Type request;
    request.trustedRootIdentifier = [self asByteSpan:payload.trustedRootIdentifier];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)updateFabricLabel:(CHIPOperationalCredentialsClusterUpdateFabricLabelPayload * _Nonnull)payload
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::UpdateFabricLabel::Type request;
    request.label = [self asCharSpan:payload.label];

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)updateNOC:(CHIPOperationalCredentialsClusterUpdateNOCPayload * _Nonnull)payload
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::UpdateNOC::Type request;
    request.NOCValue = [self asByteSpan:payload.nocValue];
    if (payload.icacValue != nil) {
        auto & definedValue_0 = request.ICACValue.Emplace();
        definedValue_0 = [self asByteSpan:payload.icacValue];
    }

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeFabricsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeFabricsList(success, failure);
        });
}

- (void)readAttributeSupportedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSupportedFabrics(success, failure);
    });
}

- (void)readAttributeCommissionedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCommissionedFabrics(success, failure);
    });
}

- (void)readAttributeTrustedRootCertificatesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTrustedRootCertificates(success, failure);
        });
}

- (void)readAttributeCurrentFabricIndexWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentFabricIndex(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPPowerSource

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStatus(success, failure);
    });
}

- (void)readAttributeOrderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOrder(success, failure);
    });
}

- (void)readAttributeDescriptionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDescription(success, failure);
    });
}

- (void)readAttributeBatteryVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryVoltage(success, failure);
    });
}

- (void)readAttributeBatteryPercentRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryPercentRemaining(success, failure);
    });
}

- (void)readAttributeBatteryTimeRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryTimeRemaining(success, failure);
    });
}

- (void)readAttributeBatteryChargeLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryChargeLevel(success, failure);
    });
}

- (void)readAttributeActiveBatteryFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveBatteryFaults(success, failure);
        });
}

- (void)readAttributeBatteryChargeStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryChargeState(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPPressureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPPumpConfigurationAndControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMaxPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxPressure(success, failure);
    });
}

- (void)readAttributeMaxSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxSpeed(success, failure);
    });
}

- (void)readAttributeMaxFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxFlow(success, failure);
    });
}

- (void)readAttributeMinConstPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstPressure(success, failure);
    });
}

- (void)readAttributeMaxConstPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstPressure(success, failure);
    });
}

- (void)readAttributeMinCompPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinCompPressure(success, failure);
    });
}

- (void)readAttributeMaxCompPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxCompPressure(success, failure);
    });
}

- (void)readAttributeMinConstSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstSpeed(success, failure);
    });
}

- (void)readAttributeMaxConstSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstSpeed(success, failure);
    });
}

- (void)readAttributeMinConstFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstFlow(success, failure);
    });
}

- (void)readAttributeMaxConstFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstFlow(success, failure);
    });
}

- (void)readAttributeMinConstTempWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstTemp(success, failure);
    });
}

- (void)readAttributeMaxConstTempWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstTemp(success, failure);
    });
}

- (void)readAttributePumpStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePumpStatus(success, failure);
    });
}

- (void)subscribeAttributePumpStatusWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePumpStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePumpStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePumpStatus(success);
        },
        true);
}

- (void)readAttributeEffectiveOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEffectiveOperationMode(success, failure);
    });
}

- (void)readAttributeEffectiveControlModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEffectiveControlMode(success, failure);
    });
}

- (void)readAttributeCapacityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCapacity(success, failure);
    });
}

- (void)subscribeAttributeCapacityWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCapacity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCapacityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCapacity(success);
        },
        true);
}

- (void)readAttributeSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSpeed(success, failure);
    });
}

- (void)readAttributeLifetimeEnergyConsumedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLifetimeEnergyConsumed(success, failure);
    });
}

- (void)readAttributeOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOperationMode(success, failure);
    });
}

- (void)writeAttributeOperationModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = PumpConfigurationAndControl::Attributes::OperationMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeControlModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeControlMode(success, failure);
    });
}

- (void)writeAttributeControlModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = PumpConfigurationAndControl::Attributes::ControlMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeAlarmMaskWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAlarmMask(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPRelativeHumidityMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)subscribeAttributeToleranceWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTolerance(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTolerance(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPScenes

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addScene:(CHIPScenesClusterAddScenePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::AddScene::Type request;
    request.groupId = payload.groupId.unsignedShortValue;
    request.sceneId = payload.sceneId.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;
    request.sceneName = [self asCharSpan:payload.sceneName];
    {
        using ListType = std::remove_reference_t<decltype(request.extensionFieldSets)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (payload.extensionFieldSets.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(payload.extensionFieldSets.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < payload.extensionFieldSets.count; ++i) {
                if (![payload.extensionFieldSets[i] isKindOfClass:[CHIPScenesClusterSceneExtensionFieldSet class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (CHIPScenesClusterSceneExtensionFieldSet *) payload.extensionFieldSets[i];
                listHolder_0->mList[i].clusterId = element_0.clusterId.unsignedIntValue;
                listHolder_0->mList[i].length = element_0.length.unsignedCharValue;
                listHolder_0->mList[i].value = element_0.value.unsignedCharValue;
            }
            request.extensionFieldSets = ListType(listHolder_0->mList, payload.extensionFieldSets.count);
        } else {
            request.extensionFieldSets = ListType();
        }
    }

    new CHIPScenesClusterAddSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterAddSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getSceneMembership:(CHIPScenesClusterGetSceneMembershipPayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::GetSceneMembership::Type request;
    request.groupId = payload.groupId.unsignedShortValue;

    new CHIPScenesClusterGetSceneMembershipResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterGetSceneMembershipResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)recallScene:(CHIPScenesClusterRecallScenePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::RecallScene::Type request;
    request.groupId = payload.groupId.unsignedShortValue;
    request.sceneId = payload.sceneId.unsignedCharValue;
    request.transitionTime = payload.transitionTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)removeAllScenes:(CHIPScenesClusterRemoveAllScenesPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::RemoveAllScenes::Type request;
    request.groupId = payload.groupId.unsignedShortValue;

    new CHIPScenesClusterRemoveAllScenesResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterRemoveAllScenesResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeScene:(CHIPScenesClusterRemoveScenePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::RemoveScene::Type request;
    request.groupId = payload.groupId.unsignedShortValue;
    request.sceneId = payload.sceneId.unsignedCharValue;

    new CHIPScenesClusterRemoveSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterRemoveSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)storeScene:(CHIPScenesClusterStoreScenePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::StoreScene::Type request;
    request.groupId = payload.groupId.unsignedShortValue;
    request.sceneId = payload.sceneId.unsignedCharValue;

    new CHIPScenesClusterStoreSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterStoreSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)viewScene:(CHIPScenesClusterViewScenePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::ViewScene::Type request;
    request.groupId = payload.groupId.unsignedShortValue;
    request.sceneId = payload.sceneId.unsignedCharValue;

    new CHIPScenesClusterViewSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterViewSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeSceneCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSceneCount(success, failure);
    });
}

- (void)readAttributeCurrentSceneWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentScene(success, failure);
    });
}

- (void)readAttributeCurrentGroupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentGroup(success, failure);
    });
}

- (void)readAttributeSceneValidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSceneValid(success, failure);
    });
}

- (void)readAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNameSupport(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPSoftwareDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetWatermarks:(CHIPSoftwareDiagnosticsClusterResetWatermarksPayload * _Nonnull)payload
        responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    SoftwareDiagnostics::Commands::ResetWatermarks::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeThreadMetricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeThreadMetrics(success, failure);
        });
}

- (void)readAttributeCurrentHeapFreeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapFree(success, failure);
    });
}

- (void)readAttributeCurrentHeapUsedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapUsed(success, failure);
    });
}

- (void)readAttributeCurrentHeapHighWatermarkWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapHighWatermark(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPSwitch

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeNumberOfPositionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfPositions(success, failure);
    });
}

- (void)readAttributeCurrentPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPosition(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPosition(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPosition(success);
        },
        true);
}

- (void)readAttributeMultiPressMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMultiPressMax(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTvChannel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeChannel:(CHIPTvChannelClusterChangeChannelPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TvChannel::Commands::ChangeChannel::Type request;
    request.match = [self asCharSpan:payload.match];

    new CHIPTvChannelClusterChangeChannelResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTvChannelClusterChangeChannelResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)changeChannelByNumber:(CHIPTvChannelClusterChangeChannelByNumberPayload * _Nonnull)payload
              responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TvChannel::Commands::ChangeChannelByNumber::Type request;
    request.majorNumber = payload.majorNumber.unsignedShortValue;
    request.minorNumber = payload.minorNumber.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)skipChannel:(CHIPTvChannelClusterSkipChannelPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TvChannel::Commands::SkipChannel::Type request;
    request.count = payload.count.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeTvChannelListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTvChannelTvChannelListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTvChannelList(success, failure);
        });
}

- (void)readAttributeTvChannelLineupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTvChannelLineup(success, failure);
    });
}

- (void)readAttributeCurrentTvChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentTvChannel(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTargetNavigator

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)navigateTarget:(CHIPTargetNavigatorClusterNavigateTargetPayload * _Nonnull)payload
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TargetNavigator::Commands::NavigateTarget::Type request;
    request.target = payload.target.unsignedCharValue;
    request.data = [self asCharSpan:payload.data];

    new CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTargetNavigatorClusterNavigateTargetResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeTargetNavigatorListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTargetNavigatorList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTemperatureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)subscribeAttributeToleranceWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTolerance(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTolerance(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTestCluster

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)test:(CHIPTestClusterClusterTestPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::Test::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)testAddArguments:(CHIPTestClusterClusterTestAddArgumentsPayload * _Nonnull)payload
         responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestAddArguments::Type request;
    request.arg1 = payload.arg1.unsignedCharValue;
    request.arg2 = payload.arg2.unsignedCharValue;

    new CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestAddArgumentsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testEnumsRequest:(CHIPTestClusterClusterTestEnumsRequestPayload * _Nonnull)payload
         responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestEnumsRequest::Type request;
    request.arg1 = static_cast<std::remove_reference_t<decltype(request.arg1)>>(payload.arg1.unsignedShortValue);
    request.arg2 = static_cast<std::remove_reference_t<decltype(request.arg2)>>(payload.arg2.unsignedCharValue);

    new CHIPTestClusterClusterTestEnumsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestEnumsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testListInt8UArgumentRequest:(CHIPTestClusterClusterTestListInt8UArgumentRequestPayload * _Nonnull)payload
                     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestListInt8UArgumentRequest::Type request;
    {
        using ListType = std::remove_reference_t<decltype(request.arg1)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (payload.arg1.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(payload.arg1.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < payload.arg1.count; ++i) {
                if (![payload.arg1[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) payload.arg1[i];
                listHolder_0->mList[i] = element_0.unsignedCharValue;
            }
            request.arg1 = ListType(listHolder_0->mList, payload.arg1.count);
        } else {
            request.arg1 = ListType();
        }
    }

    new CHIPTestClusterClusterBooleanResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterBooleanResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testListInt8UReverseRequest:(CHIPTestClusterClusterTestListInt8UReverseRequestPayload * _Nonnull)payload
                    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestListInt8UReverseRequest::Type request;
    {
        using ListType = std::remove_reference_t<decltype(request.arg1)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (payload.arg1.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(payload.arg1.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < payload.arg1.count; ++i) {
                if (![payload.arg1[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) payload.arg1[i];
                listHolder_0->mList[i] = element_0.unsignedCharValue;
            }
            request.arg1 = ListType(listHolder_0->mList, payload.arg1.count);
        } else {
            request.arg1 = ListType();
        }
    }

    new CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestListInt8UReverseResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testListStructArgumentRequest:(CHIPTestClusterClusterTestListStructArgumentRequestPayload * _Nonnull)payload
                      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestListStructArgumentRequest::Type request;
    {
        using ListType = std::remove_reference_t<decltype(request.arg1)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (payload.arg1.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(payload.arg1.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < payload.arg1.count; ++i) {
                if (![payload.arg1[i] isKindOfClass:[CHIPTestClusterClusterSimpleStruct class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (CHIPTestClusterClusterSimpleStruct *) payload.arg1[i];
                listHolder_0->mList[i].a = element_0.a.unsignedCharValue;
                listHolder_0->mList[i].b = element_0.b.boolValue;
                listHolder_0->mList[i].c
                    = static_cast<std::remove_reference_t<decltype(listHolder_0->mList[i].c)>>(element_0.c.unsignedCharValue);
                listHolder_0->mList[i].d = [self asByteSpan:element_0.d];
                listHolder_0->mList[i].e = [self asCharSpan:element_0.e];
                listHolder_0->mList[i].f
                    = static_cast<std::remove_reference_t<decltype(listHolder_0->mList[i].f)>>(element_0.f.unsignedCharValue);
            }
            request.arg1 = ListType(listHolder_0->mList, payload.arg1.count);
        } else {
            request.arg1 = ListType();
        }
    }

    new CHIPTestClusterClusterBooleanResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterBooleanResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testNotHandled:(CHIPTestClusterClusterTestNotHandledPayload * _Nonnull)payload
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestNotHandled::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)testNullableOptionalRequest:(CHIPTestClusterClusterTestNullableOptionalRequestPayload * _Nonnull)payload
                    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestNullableOptionalRequest::Type request;
    if (payload.arg1 != nil) {
        auto & definedValue_0 = request.arg1.Emplace();
        if (payload.arg1 == nil) {
            definedValue_0.SetNull();
        } else {
            auto & nonNullValue_1 = definedValue_0.SetNonNull();
            nonNullValue_1 = payload.arg1.unsignedCharValue;
        }
    }

    new CHIPTestClusterClusterTestNullableOptionalResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestNullableOptionalResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testSpecific:(CHIPTestClusterClusterTestSpecificPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestSpecific::Type request;

    new CHIPTestClusterClusterTestSpecificResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestSpecificResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testStructArgumentRequest:(CHIPTestClusterClusterTestStructArgumentRequestPayload * _Nonnull)payload
                  responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestStructArgumentRequest::Type request;
    request.arg1.a = payload.arg1.a.unsignedCharValue;
    request.arg1.b = payload.arg1.b.boolValue;
    request.arg1.c = static_cast<std::remove_reference_t<decltype(request.arg1.c)>>(payload.arg1.c.unsignedCharValue);
    request.arg1.d = [self asByteSpan:payload.arg1.d];
    request.arg1.e = [self asCharSpan:payload.arg1.e];
    request.arg1.f = static_cast<std::remove_reference_t<decltype(request.arg1.f)>>(payload.arg1.f.unsignedCharValue);

    new CHIPTestClusterClusterBooleanResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterBooleanResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testUnknownCommand:(CHIPTestClusterClusterTestUnknownCommandPayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestUnknownCommand::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBooleanWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBoolean(success, failure);
    });
}

- (void)writeAttributeBooleanWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Boolean::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBitmap8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap8(success, failure);
    });
}

- (void)writeAttributeBitmap8WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Bitmap8::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBitmap16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap16(success, failure);
    });
}

- (void)writeAttributeBitmap16WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Bitmap16::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBitmap32WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap32(success, failure);
    });
}

- (void)writeAttributeBitmap32WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Bitmap32::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedIntValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBitmap64WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap64(success, failure);
    });
}

- (void)writeAttributeBitmap64WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Bitmap64::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedLongLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt8u(success, failure);
    });
}

- (void)writeAttributeInt8uWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int8u::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInt16uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt16u(success, failure);
    });
}

- (void)writeAttributeInt16uWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int16u::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInt32uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt32u(success, failure);
    });
}

- (void)writeAttributeInt32uWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int32u::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedIntValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInt64uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt64u(success, failure);
    });
}

- (void)writeAttributeInt64uWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int64u::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedLongLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInt8sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt8s(success, failure);
    });
}

- (void)writeAttributeInt8sWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int8s::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.charValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInt16sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt16s(success, failure);
    });
}

- (void)writeAttributeInt16sWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int16s::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInt32sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt32s(success, failure);
    });
}

- (void)writeAttributeInt32sWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int32s::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.intValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInt64sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt64s(success, failure);
    });
}

- (void)writeAttributeInt64sWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int64s::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.longLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeEnum8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnum8(success, failure);
    });
}

- (void)writeAttributeEnum8WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Enum8::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeEnum16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnum16(success, failure);
    });
}

- (void)writeAttributeEnum16WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Enum16::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedShortValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOctetString(success, failure);
    });
}

- (void)writeAttributeOctetStringWithValue:(NSData * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::OctetString::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asByteSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeListInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListInt8uListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListInt8u(success, failure);
        });
}

- (void)readAttributeListOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListOctetStringListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListOctetString(success, failure);
        });
}

- (void)readAttributeListStructOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListStructOctetStringListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListStructOctetString(success, failure);
        });
}

- (void)readAttributeLongOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLongOctetString(success, failure);
    });
}

- (void)writeAttributeLongOctetStringWithValue:(NSData * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::LongOctetString::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asByteSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCharString(success, failure);
    });
}

- (void)writeAttributeCharStringWithValue:(NSString * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::CharString::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asCharSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeLongCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLongCharString(success, failure);
    });
}

- (void)writeAttributeLongCharStringWithValue:(NSString * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::LongCharString::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asCharSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeEpochUsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEpochUs(success, failure);
    });
}

- (void)writeAttributeEpochUsWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::EpochUs::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedLongLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeEpochSWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEpochS(success, failure);
    });
}

- (void)writeAttributeEpochSWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::EpochS::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedIntValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorId(success, failure);
    });
}

- (void)writeAttributeVendorIdWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::VendorId::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedShortValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeListNullablesAndOptionalsStructWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListNullablesAndOptionalsStructListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListNullablesAndOptionalsStruct(success, failure);
        });
}

- (void)readAttributeUnsupportedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUnsupported(success, failure);
    });
}

- (void)writeAttributeUnsupportedWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Unsupported::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableBooleanWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBoolean(success, failure);
    });
}

- (void)writeAttributeNullableBooleanWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBoolean::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.boolValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableBitmap8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap8(success, failure);
    });
}

- (void)writeAttributeNullableBitmap8WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBitmap8::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedCharValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableBitmap16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap16(success, failure);
    });
}

- (void)writeAttributeNullableBitmap16WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBitmap16::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedShortValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableBitmap32WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap32(success, failure);
    });
}

- (void)writeAttributeNullableBitmap32WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBitmap32::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedIntValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableBitmap64WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap64(success, failure);
    });
}

- (void)writeAttributeNullableBitmap64WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBitmap64::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedLongLongValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt8u(success, failure);
    });
}

- (void)writeAttributeNullableInt8uWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt8u::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedCharValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableInt16uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt16u(success, failure);
    });
}

- (void)writeAttributeNullableInt16uWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt16u::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedShortValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableInt32uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt32u(success, failure);
    });
}

- (void)writeAttributeNullableInt32uWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt32u::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedIntValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableInt64uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt64u(success, failure);
    });
}

- (void)writeAttributeNullableInt64uWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt64u::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedLongLongValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableInt8sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt8s(success, failure);
    });
}

- (void)writeAttributeNullableInt8sWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt8s::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.charValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableInt16sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt16s(success, failure);
    });
}

- (void)writeAttributeNullableInt16sWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt16s::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.shortValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableInt32sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt32s(success, failure);
    });
}

- (void)writeAttributeNullableInt32sWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt32s::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.intValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableInt64sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt64s(success, failure);
    });
}

- (void)writeAttributeNullableInt64sWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt64s::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.longLongValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableEnum8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableEnum8(success, failure);
    });
}

- (void)writeAttributeNullableEnum8WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableEnum8::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = static_cast<std::remove_reference_t<decltype(nonNullValue_0)>>(value.unsignedCharValue);
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableEnum16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableEnum16(success, failure);
    });
}

- (void)writeAttributeNullableEnum16WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableEnum16::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = static_cast<std::remove_reference_t<decltype(nonNullValue_0)>>(value.unsignedShortValue);
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableOctetString(success, failure);
    });
}

- (void)writeAttributeNullableOctetStringWithValue:(NSData * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableOctetString::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = [self asByteSpan:value];
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeNullableCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableCharString(success, failure);
    });
}

- (void)writeAttributeNullableCharStringWithValue:(NSString * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableCharString::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = [self asCharSpan:value];
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPThermostat

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)clearWeeklySchedule:(CHIPThermostatClusterClearWeeklySchedulePayload * _Nonnull)payload
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::ClearWeeklySchedule::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)getRelayStatusLog:(CHIPThermostatClusterGetRelayStatusLogPayload * _Nonnull)payload
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::GetRelayStatusLog::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)getWeeklySchedule:(CHIPThermostatClusterGetWeeklySchedulePayload * _Nonnull)payload
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::GetWeeklySchedule::Type request;
    request.daysToReturn
        = static_cast<std::remove_reference_t<decltype(request.daysToReturn)>>(payload.daysToReturn.unsignedCharValue);
    request.modeToReturn
        = static_cast<std::remove_reference_t<decltype(request.modeToReturn)>>(payload.modeToReturn.unsignedCharValue);

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)setWeeklySchedule:(CHIPThermostatClusterSetWeeklySchedulePayload * _Nonnull)payload
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::SetWeeklySchedule::Type request;
    request.numberOfTransitionsForSequence = payload.numberOfTransitionsForSequence.unsignedCharValue;
    request.dayOfWeekForSequence = static_cast<std::remove_reference_t<decltype(request.dayOfWeekForSequence)>>(
        payload.dayOfWeekForSequence.unsignedCharValue);
    request.modeForSequence
        = static_cast<std::remove_reference_t<decltype(request.modeForSequence)>>(payload.modeForSequence.unsignedCharValue);
    {
        using ListType = std::remove_reference_t<decltype(request.payload)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (payload.payload.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(payload.payload.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < payload.payload.count; ++i) {
                if (![payload.payload[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) payload.payload[i];
                listHolder_0->mList[i] = element_0.unsignedCharValue;
            }
            request.payload = ListType(listHolder_0->mList, payload.payload.count);
        } else {
            request.payload = ListType();
        }
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)setpointRaiseLower:(CHIPThermostatClusterSetpointRaiseLowerPayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::SetpointRaiseLower::Type request;
    request.mode = static_cast<std::remove_reference_t<decltype(request.mode)>>(payload.mode.unsignedCharValue);
    request.amount = payload.amount.charValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeLocalTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocalTemperature(success, failure);
    });
}

- (void)subscribeAttributeLocalTemperatureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLocalTemperature(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLocalTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLocalTemperature(success);
        },
        true);
}

- (void)readAttributeAbsMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMinHeatSetpointLimit(success, failure);
    });
}

- (void)readAttributeAbsMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMaxHeatSetpointLimit(success, failure);
    });
}

- (void)readAttributeAbsMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMinCoolSetpointLimit(success, failure);
    });
}

- (void)readAttributeAbsMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMaxCoolSetpointLimit(success, failure);
    });
}

- (void)readAttributeOccupiedCoolingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupiedCoolingSetpoint(success, failure);
    });
}

- (void)writeAttributeOccupiedCoolingSetpointWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::OccupiedCoolingSetpoint::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOccupiedHeatingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupiedHeatingSetpoint(success, failure);
    });
}

- (void)writeAttributeOccupiedHeatingSetpointWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::OccupiedHeatingSetpoint::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinHeatSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMinHeatSetpointLimitWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MinHeatSetpointLimit::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxHeatSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMaxHeatSetpointLimitWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MaxHeatSetpointLimit::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinCoolSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMinCoolSetpointLimitWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MinCoolSetpointLimit::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxCoolSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMaxCoolSetpointLimitWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MaxCoolSetpointLimit::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeMinSetpointDeadBandWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinSetpointDeadBand(success, failure);
    });
}

- (void)writeAttributeMinSetpointDeadBandWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MinSetpointDeadBand::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.charValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeControlSequenceOfOperationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeControlSequenceOfOperation(success, failure);
    });
}

- (void)writeAttributeControlSequenceOfOperationWithValue:(NSNumber * _Nonnull)value
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::ControlSequenceOfOperation::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeSystemModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSystemMode(success, failure);
    });
}

- (void)writeAttributeSystemModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::SystemMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeStartOfWeekWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartOfWeek(success, failure);
    });
}

- (void)readAttributeNumberOfWeeklyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfWeeklyTransitions(success, failure);
    });
}

- (void)readAttributeNumberOfDailyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfDailyTransitions(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPThermostatUserInterfaceConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeTemperatureDisplayModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTemperatureDisplayMode(success, failure);
    });
}

- (void)writeAttributeTemperatureDisplayModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ThermostatUserInterfaceConfiguration::Attributes::TemperatureDisplayMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeKeypadLockoutWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeKeypadLockout(success, failure);
    });
}

- (void)writeAttributeKeypadLockoutWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ThermostatUserInterfaceConfiguration::Attributes::KeypadLockout::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeScheduleProgrammingVisibilityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeScheduleProgrammingVisibility(success, failure);
    });
}

- (void)writeAttributeScheduleProgrammingVisibilityWithValue:(NSNumber * _Nonnull)value
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ThermostatUserInterfaceConfiguration::Attributes::ScheduleProgrammingVisibility::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPThreadNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCounts:(CHIPThreadNetworkDiagnosticsClusterResetCountsPayload * _Nonnull)payload
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ThreadNetworkDiagnostics::Commands::ResetCounts::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannel(success, failure);
    });
}

- (void)readAttributeRoutingRoleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRoutingRole(success, failure);
    });
}

- (void)readAttributeNetworkNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNetworkName(success, failure);
    });
}

- (void)readAttributePanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePanId(success, failure);
    });
}

- (void)readAttributeExtendedPanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeExtendedPanId(success, failure);
    });
}

- (void)readAttributeMeshLocalPrefixWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeshLocalPrefix(success, failure);
    });
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)readAttributeNeighborTableListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeNeighborTableList(success, failure);
        });
}

- (void)readAttributeRouteTableListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeRouteTableList(success, failure);
        });
}

- (void)readAttributePartitionIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartitionId(success, failure);
    });
}

- (void)readAttributeWeightingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWeighting(success, failure);
    });
}

- (void)readAttributeDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDataVersion(success, failure);
    });
}

- (void)readAttributeStableDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStableDataVersion(success, failure);
    });
}

- (void)readAttributeLeaderRouterIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLeaderRouterId(success, failure);
    });
}

- (void)readAttributeDetachedRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDetachedRoleCount(success, failure);
    });
}

- (void)readAttributeChildRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChildRoleCount(success, failure);
    });
}

- (void)readAttributeRouterRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRouterRoleCount(success, failure);
    });
}

- (void)readAttributeLeaderRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLeaderRoleCount(success, failure);
    });
}

- (void)readAttributeAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAttachAttemptCount(success, failure);
    });
}

- (void)readAttributePartitionIdChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartitionIdChangeCount(success, failure);
    });
}

- (void)readAttributeBetterPartitionAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBetterPartitionAttachAttemptCount(success, failure);
    });
}

- (void)readAttributeParentChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeParentChangeCount(success, failure);
    });
}

- (void)readAttributeTxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxTotalCount(success, failure);
    });
}

- (void)readAttributeTxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxUnicastCount(success, failure);
    });
}

- (void)readAttributeTxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBroadcastCount(success, failure);
    });
}

- (void)readAttributeTxAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxAckRequestedCount(success, failure);
    });
}

- (void)readAttributeTxAckedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxAckedCount(success, failure);
    });
}

- (void)readAttributeTxNoAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxNoAckRequestedCount(success, failure);
    });
}

- (void)readAttributeTxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDataCount(success, failure);
    });
}

- (void)readAttributeTxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDataPollCount(success, failure);
    });
}

- (void)readAttributeTxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBeaconCount(success, failure);
    });
}

- (void)readAttributeTxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBeaconRequestCount(success, failure);
    });
}

- (void)readAttributeTxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxOtherCount(success, failure);
    });
}

- (void)readAttributeTxRetryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxRetryCount(success, failure);
    });
}

- (void)readAttributeTxDirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDirectMaxRetryExpiryCount(success, failure);
    });
}

- (void)readAttributeTxIndirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxIndirectMaxRetryExpiryCount(success, failure);
    });
}

- (void)readAttributeTxErrCcaCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrCcaCount(success, failure);
    });
}

- (void)readAttributeTxErrAbortCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrAbortCount(success, failure);
    });
}

- (void)readAttributeTxErrBusyChannelCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrBusyChannelCount(success, failure);
    });
}

- (void)readAttributeRxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxTotalCount(success, failure);
    });
}

- (void)readAttributeRxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxUnicastCount(success, failure);
    });
}

- (void)readAttributeRxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBroadcastCount(success, failure);
    });
}

- (void)readAttributeRxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDataCount(success, failure);
    });
}

- (void)readAttributeRxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDataPollCount(success, failure);
    });
}

- (void)readAttributeRxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBeaconCount(success, failure);
    });
}

- (void)readAttributeRxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBeaconRequestCount(success, failure);
    });
}

- (void)readAttributeRxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxOtherCount(success, failure);
    });
}

- (void)readAttributeRxAddressFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxAddressFilteredCount(success, failure);
    });
}

- (void)readAttributeRxDestAddrFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDestAddrFilteredCount(success, failure);
    });
}

- (void)readAttributeRxDuplicatedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDuplicatedCount(success, failure);
    });
}

- (void)readAttributeRxErrNoFrameCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrNoFrameCount(success, failure);
    });
}

- (void)readAttributeRxErrUnknownNeighborCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrUnknownNeighborCount(success, failure);
    });
}

- (void)readAttributeRxErrInvalidSrcAddrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrInvalidSrcAddrCount(success, failure);
    });
}

- (void)readAttributeRxErrSecCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrSecCount(success, failure);
    });
}

- (void)readAttributeRxErrFcsCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrFcsCount(success, failure);
    });
}

- (void)readAttributeRxErrOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrOtherCount(success, failure);
    });
}

- (void)readAttributeActiveTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActiveTimestamp(success, failure);
    });
}

- (void)readAttributePendingTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePendingTimestamp(success, failure);
    });
}

- (void)readAttributeDelayWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDelay(success, failure);
    });
}

- (void)readAttributeSecurityPolicyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSecurityPolicy(success, failure);
        });
}

- (void)readAttributeChannelMaskWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannelMask(success, failure);
    });
}

- (void)readAttributeOperationalDatasetComponentsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeOperationalDatasetComponents(success, failure);
        });
}

- (void)readAttributeActiveNetworkFaultsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveNetworkFaultsList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPWakeOnLan

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeWakeOnLanMacAddressWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWakeOnLanMacAddress(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPWiFiNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCounts:(CHIPWiFiNetworkDiagnosticsClusterResetCountsPayload * _Nonnull)payload
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WiFiNetworkDiagnostics::Commands::ResetCounts::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBssidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBssid(success, failure);
    });
}

- (void)readAttributeSecurityTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSecurityType(success, failure);
    });
}

- (void)readAttributeWiFiVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWiFiVersion(success, failure);
    });
}

- (void)readAttributeChannelNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannelNumber(success, failure);
    });
}

- (void)readAttributeRssiWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRssi(success, failure);
    });
}

- (void)readAttributeBeaconLostCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBeaconLostCount(success, failure);
    });
}

- (void)readAttributeBeaconRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBeaconRxCount(success, failure);
    });
}

- (void)readAttributePacketMulticastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketMulticastRxCount(success, failure);
    });
}

- (void)readAttributePacketMulticastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketMulticastTxCount(success, failure);
    });
}

- (void)readAttributePacketUnicastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketUnicastRxCount(success, failure);
    });
}

- (void)readAttributePacketUnicastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketUnicastTxCount(success, failure);
    });
}

- (void)readAttributeCurrentMaxRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMaxRate(success, failure);
    });
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPWindowCovering

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)downOrClose:(CHIPWindowCoveringClusterDownOrClosePayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::DownOrClose::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToLiftPercentage:(CHIPWindowCoveringClusterGoToLiftPercentagePayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToLiftPercentage::Type request;
    request.liftPercentageValue = payload.liftPercentageValue.unsignedCharValue;
    request.liftPercent100thsValue = payload.liftPercent100thsValue.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToLiftValue:(CHIPWindowCoveringClusterGoToLiftValuePayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToLiftValue::Type request;
    request.liftValue = payload.liftValue.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToTiltPercentage:(CHIPWindowCoveringClusterGoToTiltPercentagePayload * _Nonnull)payload
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToTiltPercentage::Type request;
    request.tiltPercentageValue = payload.tiltPercentageValue.unsignedCharValue;
    request.tiltPercent100thsValue = payload.tiltPercent100thsValue.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToTiltValue:(CHIPWindowCoveringClusterGoToTiltValuePayload * _Nonnull)payload
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToTiltValue::Type request;
    request.tiltValue = payload.tiltValue.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopMotion:(CHIPWindowCoveringClusterStopMotionPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::StopMotion::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)upOrOpen:(CHIPWindowCoveringClusterUpOrOpenPayload * _Nonnull)payload responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::UpOrOpen::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeType(success, failure);
    });
}

- (void)readAttributeCurrentPositionLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLift(success, failure);
    });
}

- (void)readAttributeCurrentPositionTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTilt(success, failure);
    });
}

- (void)readAttributeConfigStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeConfigStatus(success, failure);
    });
}

- (void)readAttributeCurrentPositionLiftPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLiftPercentage(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionLiftPercentageWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionLiftPercentage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionLiftPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionLiftPercentage(success);
        },
        true);
}

- (void)readAttributeCurrentPositionTiltPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTiltPercentage(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionTiltPercentageWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionTiltPercentage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionTiltPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionTiltPercentage(success);
        },
        true);
}

- (void)readAttributeOperationalStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOperationalStatus(success, failure);
    });
}

- (void)subscribeAttributeOperationalStatusWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOperationalStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOperationalStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOperationalStatus(success);
        },
        true);
}

- (void)readAttributeTargetPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTargetPositionLiftPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeTargetPositionLiftPercent100thsWithMinInterval:(uint16_t)minInterval
                                                             maxInterval:(uint16_t)maxInterval
                                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTargetPositionLiftPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTargetPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTargetPositionLiftPercent100ths(success);
        },
        true);
}

- (void)readAttributeTargetPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTargetPositionTiltPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeTargetPositionTiltPercent100thsWithMinInterval:(uint16_t)minInterval
                                                             maxInterval:(uint16_t)maxInterval
                                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTargetPositionTiltPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTargetPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTargetPositionTiltPercent100ths(success);
        },
        true);
}

- (void)readAttributeEndProductTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEndProductType(success, failure);
    });
}

- (void)readAttributeCurrentPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLiftPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionLiftPercent100thsWithMinInterval:(uint16_t)minInterval
                                                              maxInterval:(uint16_t)maxInterval
                                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionLiftPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionLiftPercent100ths(success);
        },
        true);
}

- (void)readAttributeCurrentPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTiltPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionTiltPercent100thsWithMinInterval:(uint16_t)minInterval
                                                              maxInterval:(uint16_t)maxInterval
                                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionTiltPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionTiltPercent100ths(success);
        },
        true);
}

- (void)readAttributeInstalledOpenLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledOpenLimitLift(success, failure);
    });
}

- (void)readAttributeInstalledClosedLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledClosedLimitLift(success, failure);
    });
}

- (void)readAttributeInstalledOpenLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledOpenLimitTilt(success, failure);
    });
}

- (void)readAttributeInstalledClosedLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledClosedLimitTilt(success, failure);
    });
}

- (void)readAttributeModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMode(success, failure);
    });
}

- (void)writeAttributeModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = WindowCovering::Attributes::Mode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSafetyStatus(success, failure);
    });
}

- (void)subscribeAttributeSafetyStatusWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSafetyStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSafetyStatus(success);
        },
        true);
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end
