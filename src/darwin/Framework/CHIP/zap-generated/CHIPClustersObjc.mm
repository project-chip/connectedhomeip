/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import <Foundation/Foundation.h>

#import "CHIPCallbackBridge_internal.h"
#import "CHIPCluster_internal.h"
#import "CHIPClustersObjc_internal.h"
#import "CHIPDevice.h"
#import "CHIPDevice_Internal.h"

#include <set>
#include <type_traits>

using chip::Callback::Callback;
using chip::Callback::Cancelable;
using namespace chip::app::Clusters;

template <typename T> struct ListMemberTypeGetter {
};
template <typename T> struct ListMemberTypeGetter<chip::app::DataModel::List<T>> {
    // We use List<const ...> in data model data structures, so consumers can
    // use const data.  Just grab the type with the const stripped off.
    using Type = std::remove_const_t<T>;
};

struct ListHolderBase {
    // Just here so we can delete an instance to trigger the subclass destructor.
    virtual ~ListHolderBase() {}
};

template <typename T> struct ListHolder : ListHolderBase {
    ListHolder(size_t N) { mList = new T[N]; }
    ~ListHolder() { delete[] mList; }
    T * mList;
};

struct ListFreer {
    ~ListFreer()
    {
        for (auto listHolder : mListHolders) {
            delete listHolder;
        }
    }

    void add(ListHolderBase * listHolder) { mListHolders.insert(listHolder); }

    std::set<ListHolderBase *> mListHolders;
};

@implementation CHIPAccountLogin

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)getSetupPIN:(NSString *)tempAccountIdentifier responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AccountLogin::Commands::GetSetupPIN::Type request;
    request.tempAccountIdentifier = [self asCharSpan:tempAccountIdentifier];

    new CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPAccountLoginClusterGetSetupPINResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)login:(NSString *)tempAccountIdentifier setupPIN:(NSString *)setupPIN responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AccountLogin::Commands::Login::Type request;
    request.tempAccountIdentifier = [self asCharSpan:tempAccountIdentifier];
    request.setupPIN = [self asCharSpan:setupPIN];

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPAdministratorCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)openBasicCommissioningWindow:(uint16_t)commissioningTimeout responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AdministratorCommissioning::Commands::OpenBasicCommissioningWindow::Type request;
    request.commissioningTimeout = commissioningTimeout.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)openCommissioningWindow:(uint16_t)commissioningTimeout
                   PAKEVerifier:(NSData *)PAKEVerifier
                  discriminator:(uint16_t)discriminator
                     iterations:(uint32_t)iterations
                           salt:(NSData *)salt
                     passcodeID:(uint16_t)passcodeID
                responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AdministratorCommissioning::Commands::OpenCommissioningWindow::Type request;
    request.commissioningTimeout = commissioningTimeout.unsignedShortValue;
    request.PAKEVerifier = [self asByteSpan:PAKEVerifier];
    request.discriminator = discriminator.unsignedShortValue;
    request.iterations = iterations.unsignedIntValue;
    request.salt = [self asByteSpan:salt];
    request.passcodeID = passcodeID.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)revokeCommissioning:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AdministratorCommissioning::Commands::RevokeCommissioning::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPApplicationBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeStatus:(uint8_t)status responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ApplicationBasic::Commands::ChangeStatus::Type request;
    request.status = static_cast<std::remove_reference_t<decltype(request.status)>>(status.unsignedCharValue);

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)readAttributeVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorId(success, failure);
    });
}

- (void)readAttributeApplicationNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationName(success, failure);
    });
}

- (void)readAttributeProductIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductId(success, failure);
    });
}

- (void)readAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationId(success, failure);
    });
}

- (void)readAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCatalogVendorId(success, failure);
    });
}

- (void)readAttributeApplicationStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationStatus(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPApplicationLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)launchApp:(NSString *)data
    catalogVendorId:(uint16_t)catalogVendorId
      applicationId:(NSString *)applicationId
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ApplicationLauncher::Commands::LaunchApp::Type request;
    request.data = [self asCharSpan:data];
    request.catalogVendorId = catalogVendorId.unsignedShortValue;
    request.applicationId = [self asCharSpan:applicationId];

    new CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPApplicationLauncherClusterLaunchAppResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeApplicationLauncherListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeApplicationLauncherList(success, failure);
        });
}

- (void)readAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCatalogVendorId(success, failure);
    });
}

- (void)readAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationId(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPAudioOutput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)renameOutput:(uint8_t)index name:(NSString *)name responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AudioOutput::Commands::RenameOutput::Type request;
    request.index = index.unsignedCharValue;
    request.name = [self asCharSpan:name];

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)selectOutput:(uint8_t)index responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    AudioOutput::Commands::SelectOutput::Type request;
    request.index = index.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeAudioOutputListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPAudioOutputAudioOutputListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeAudioOutputList(success, failure);
        });
}

- (void)readAttributeCurrentAudioOutputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentAudioOutput(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBarrierControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)barrierControlGoToPercent:(uint8_t)percentOpen responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BarrierControl::Commands::BarrierControlGoToPercent::Type request;
    request.percentOpen = percentOpen.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)barrierControlStop:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BarrierControl::Commands::BarrierControlStop::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBarrierMovingStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierMovingState(success, failure);
    });
}

- (void)readAttributeBarrierSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierSafetyStatus(success, failure);
    });
}

- (void)readAttributeBarrierCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierCapabilities(success, failure);
    });
}

- (void)readAttributeBarrierPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierPosition(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)mfgSpecificPing:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Basic::Commands::MfgSpecificPing::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInteractionModelVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInteractionModelVersion(success, failure);
    });
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)readAttributeVendorIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorID(success, failure);
    });
}

- (void)readAttributeProductNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductName(success, failure);
    });
}

- (void)readAttributeProductIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductID(success, failure);
    });
}

- (void)readAttributeUserLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUserLabel(success, failure);
    });
}

- (void)writeAttributeUserLabelWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeUserLabel(success, failure, [self asCharSpan:value]);
    });
}

- (void)readAttributeLocationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocation(success, failure);
    });
}

- (void)writeAttributeLocationWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLocation(success, failure, [self asCharSpan:value]);
    });
}

- (void)readAttributeHardwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersion(success, failure);
    });
}

- (void)readAttributeHardwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersionString(success, failure);
    });
}

- (void)readAttributeSoftwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersion(success, failure);
    });
}

- (void)readAttributeSoftwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersionString(success, failure);
    });
}

- (void)readAttributeManufacturingDateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeManufacturingDate(success, failure);
    });
}

- (void)readAttributePartNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartNumber(success, failure);
    });
}

- (void)readAttributeProductURLWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductURL(success, failure);
    });
}

- (void)readAttributeProductLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductLabel(success, failure);
    });
}

- (void)readAttributeSerialNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSerialNumber(success, failure);
    });
}

- (void)readAttributeLocalConfigDisabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocalConfigDisabled(success, failure);
    });
}

- (void)writeAttributeLocalConfigDisabledWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLocalConfigDisabled(success, failure, value);
    });
}

- (void)readAttributeReachableWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeReachable(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBinaryInputBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeOutOfServiceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOutOfService(success, failure);
    });
}

- (void)writeAttributeOutOfServiceWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOutOfService(success, failure, value);
    });
}

- (void)readAttributePresentValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePresentValue(success, failure);
    });
}

- (void)writeAttributePresentValueWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePresentValue(success, failure, value);
    });
}

- (void)subscribeAttributePresentValueWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePresentValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePresentValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePresentValue(success);
        },
        true);
}

- (void)readAttributeStatusFlagsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStatusFlags(success, failure);
    });
}

- (void)subscribeAttributeStatusFlagsWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStatusFlags(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStatusFlagsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStatusFlags(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBinding

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)bind:(uint64_t)nodeId
            groupId:(uint16_t)groupId
         endpointId:(uint16_t)endpointId
          clusterId:(uint32_t)clusterId
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Binding::Commands::Bind::Type request;
    request.nodeId = nodeId.unsignedLongLongValue;
    request.groupId = groupId.unsignedShortValue;
    request.endpointId = endpointId.unsignedShortValue;
    request.clusterId = clusterId.unsignedIntValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)unbind:(uint64_t)nodeId
            groupId:(uint16_t)groupId
         endpointId:(uint16_t)endpointId
          clusterId:(uint32_t)clusterId
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Binding::Commands::Unbind::Type request;
    request.nodeId = nodeId.unsignedLongLongValue;
    request.groupId = groupId.unsignedShortValue;
    request.endpointId = endpointId.unsignedShortValue;
    request.clusterId = clusterId.unsignedIntValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBooleanState

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeStateValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStateValue(success, failure);
    });
}

- (void)subscribeAttributeStateValueWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStateValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStateValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStateValue(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBridgedActions

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)disableAction:(uint16_t)actionID invokeID:(uint32_t)invokeID responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::DisableAction::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)disableActionWithDuration:(uint16_t)actionID
                         invokeID:(uint32_t)invokeID
                         duration:(uint32_t)duration
                  responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::DisableActionWithDuration::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }
    request.duration = duration.unsignedIntValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enableAction:(uint16_t)actionID invokeID:(uint32_t)invokeID responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::EnableAction::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enableActionWithDuration:(uint16_t)actionID
                        invokeID:(uint32_t)invokeID
                        duration:(uint32_t)duration
                 responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::EnableActionWithDuration::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }
    request.duration = duration.unsignedIntValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)instantAction:(uint16_t)actionID invokeID:(uint32_t)invokeID responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::InstantAction::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)instantActionWithTransition:(uint16_t)actionID
                           invokeID:(uint32_t)invokeID
                     transitionTime:(uint16_t)transitionTime
                    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::InstantActionWithTransition::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }
    request.transitionTime = transitionTime.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)pauseAction:(uint16_t)actionID invokeID:(uint32_t)invokeID responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::PauseAction::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)pauseActionWithDuration:(uint16_t)actionID
                       invokeID:(uint32_t)invokeID
                       duration:(uint32_t)duration
                responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::PauseActionWithDuration::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }
    request.duration = duration.unsignedIntValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)resumeAction:(uint16_t)actionID invokeID:(uint32_t)invokeID responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::ResumeAction::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)startAction:(uint16_t)actionID invokeID:(uint32_t)invokeID responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::StartAction::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)startActionWithDuration:(uint16_t)actionID
                       invokeID:(uint32_t)invokeID
                       duration:(uint32_t)duration
                responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::StartActionWithDuration::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }
    request.duration = duration.unsignedIntValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopAction:(uint16_t)actionID invokeID:(uint32_t)invokeID responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::StopAction::Type request;
    request.actionID = actionID.unsignedShortValue;
    if (invokeID != nil) {
        auto & definedValue = request.invokeID.Emplace();
        definedValue = invokeID.unsignedIntValue;
    }

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeActionListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBridgedActionsActionListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActionList(success, failure);
        });
}

- (void)readAttributeEndpointListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBridgedActionsEndpointListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeEndpointList(success, failure);
        });
}

- (void)readAttributeSetupUrlWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSetupUrl(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBridgedDeviceBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)readAttributeVendorIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorID(success, failure);
    });
}

- (void)readAttributeProductNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductName(success, failure);
    });
}

- (void)readAttributeUserLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUserLabel(success, failure);
    });
}

- (void)writeAttributeUserLabelWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeUserLabel(success, failure, [self asCharSpan:value]);
    });
}

- (void)readAttributeHardwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersion(success, failure);
    });
}

- (void)readAttributeHardwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersionString(success, failure);
    });
}

- (void)readAttributeSoftwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersion(success, failure);
    });
}

- (void)readAttributeSoftwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersionString(success, failure);
    });
}

- (void)readAttributeManufacturingDateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeManufacturingDate(success, failure);
    });
}

- (void)readAttributePartNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartNumber(success, failure);
    });
}

- (void)readAttributeProductURLWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductURL(success, failure);
    });
}

- (void)readAttributeProductLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductLabel(success, failure);
    });
}

- (void)readAttributeSerialNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSerialNumber(success, failure);
    });
}

- (void)readAttributeReachableWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeReachable(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPColorControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)colorLoopSet:(uint8_t)updateFlags
              action:(uint8_t)action
           direction:(uint8_t)direction
                time:(uint16_t)time
            startHue:(uint16_t)startHue
         optionsMask:(uint8_t)optionsMask
     optionsOverride:(uint8_t)optionsOverride
     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::ColorLoopSet::Type request;
    request.updateFlags = static_cast<std::remove_reference_t<decltype(request.updateFlags)>>(updateFlags.unsignedCharValue);
    request.action = static_cast<std::remove_reference_t<decltype(request.action)>>(action.unsignedCharValue);
    request.direction = static_cast<std::remove_reference_t<decltype(request.direction)>>(direction.unsignedCharValue);
    request.time = time.unsignedShortValue;
    request.startHue = startHue.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedMoveHue:(uint8_t)moveMode
                   rate:(uint16_t)rate
            optionsMask:(uint8_t)optionsMask
        optionsOverride:(uint8_t)optionsOverride
        responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedMoveHue::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(moveMode.unsignedCharValue);
    request.rate = rate.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedMoveToHue:(uint16_t)enhancedHue
                direction:(uint8_t)direction
           transitionTime:(uint16_t)transitionTime
              optionsMask:(uint8_t)optionsMask
          optionsOverride:(uint8_t)optionsOverride
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedMoveToHue::Type request;
    request.enhancedHue = enhancedHue.unsignedShortValue;
    request.direction = static_cast<std::remove_reference_t<decltype(request.direction)>>(direction.unsignedCharValue);
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedMoveToHueAndSaturation:(uint16_t)enhancedHue
                            saturation:(uint8_t)saturation
                        transitionTime:(uint16_t)transitionTime
                           optionsMask:(uint8_t)optionsMask
                       optionsOverride:(uint8_t)optionsOverride
                       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedMoveToHueAndSaturation::Type request;
    request.enhancedHue = enhancedHue.unsignedShortValue;
    request.saturation = saturation.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedStepHue:(uint8_t)stepMode
               stepSize:(uint16_t)stepSize
         transitionTime:(uint16_t)transitionTime
            optionsMask:(uint8_t)optionsMask
        optionsOverride:(uint8_t)optionsOverride
        responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedStepHue::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(stepMode.unsignedCharValue);
    request.stepSize = stepSize.unsignedShortValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveColor:(int16_t)rateX
              rateY:(int16_t)rateY
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveColor::Type request;
    request.rateX = rateX.shortValue;
    request.rateY = rateY.shortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveColorTemperature:(uint8_t)moveMode
                        rate:(uint16_t)rate
     colorTemperatureMinimum:(uint16_t)colorTemperatureMinimum
     colorTemperatureMaximum:(uint16_t)colorTemperatureMaximum
                 optionsMask:(uint8_t)optionsMask
             optionsOverride:(uint8_t)optionsOverride
             responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveColorTemperature::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(moveMode.unsignedCharValue);
    request.rate = rate.unsignedShortValue;
    request.colorTemperatureMinimum = colorTemperatureMinimum.unsignedShortValue;
    request.colorTemperatureMaximum = colorTemperatureMaximum.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveHue:(uint8_t)moveMode
               rate:(uint8_t)rate
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveHue::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(moveMode.unsignedCharValue);
    request.rate = rate.unsignedCharValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveSaturation:(uint8_t)moveMode
                  rate:(uint8_t)rate
           optionsMask:(uint8_t)optionsMask
       optionsOverride:(uint8_t)optionsOverride
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveSaturation::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(moveMode.unsignedCharValue);
    request.rate = rate.unsignedCharValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToColor:(uint16_t)colorX
             colorY:(uint16_t)colorY
     transitionTime:(uint16_t)transitionTime
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToColor::Type request;
    request.colorX = colorX.unsignedShortValue;
    request.colorY = colorY.unsignedShortValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToColorTemperature:(uint16_t)colorTemperature
                transitionTime:(uint16_t)transitionTime
                   optionsMask:(uint8_t)optionsMask
               optionsOverride:(uint8_t)optionsOverride
               responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToColorTemperature::Type request;
    request.colorTemperature = colorTemperature.unsignedShortValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToHue:(uint8_t)hue
          direction:(uint8_t)direction
     transitionTime:(uint16_t)transitionTime
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToHue::Type request;
    request.hue = hue.unsignedCharValue;
    request.direction = static_cast<std::remove_reference_t<decltype(request.direction)>>(direction.unsignedCharValue);
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToHueAndSaturation:(uint8_t)hue
                    saturation:(uint8_t)saturation
                transitionTime:(uint16_t)transitionTime
                   optionsMask:(uint8_t)optionsMask
               optionsOverride:(uint8_t)optionsOverride
               responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToHueAndSaturation::Type request;
    request.hue = hue.unsignedCharValue;
    request.saturation = saturation.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToSaturation:(uint8_t)saturation
          transitionTime:(uint16_t)transitionTime
             optionsMask:(uint8_t)optionsMask
         optionsOverride:(uint8_t)optionsOverride
         responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToSaturation::Type request;
    request.saturation = saturation.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepColor:(int16_t)stepX
              stepY:(int16_t)stepY
     transitionTime:(uint16_t)transitionTime
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepColor::Type request;
    request.stepX = stepX.shortValue;
    request.stepY = stepY.shortValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepColorTemperature:(uint8_t)stepMode
                    stepSize:(uint16_t)stepSize
              transitionTime:(uint16_t)transitionTime
     colorTemperatureMinimum:(uint16_t)colorTemperatureMinimum
     colorTemperatureMaximum:(uint16_t)colorTemperatureMaximum
                 optionsMask:(uint8_t)optionsMask
             optionsOverride:(uint8_t)optionsOverride
             responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepColorTemperature::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(stepMode.unsignedCharValue);
    request.stepSize = stepSize.unsignedShortValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.colorTemperatureMinimum = colorTemperatureMinimum.unsignedShortValue;
    request.colorTemperatureMaximum = colorTemperatureMaximum.unsignedShortValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepHue:(uint8_t)stepMode
           stepSize:(uint8_t)stepSize
     transitionTime:(uint8_t)transitionTime
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepHue::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(stepMode.unsignedCharValue);
    request.stepSize = stepSize.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedCharValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepSaturation:(uint8_t)stepMode
              stepSize:(uint8_t)stepSize
        transitionTime:(uint8_t)transitionTime
           optionsMask:(uint8_t)optionsMask
       optionsOverride:(uint8_t)optionsOverride
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepSaturation::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(stepMode.unsignedCharValue);
    request.stepSize = stepSize.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedCharValue;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopMoveStep:(uint8_t)optionsMask optionsOverride:(uint8_t)optionsOverride responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StopMoveStep::Type request;
    request.optionsMask = optionsMask.unsignedCharValue;
    request.optionsOverride = optionsOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHue(success, failure);
    });
}

- (void)subscribeAttributeCurrentHueWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentHue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentHue(success);
        },
        true);
}

- (void)readAttributeCurrentSaturationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentSaturation(success, failure);
    });
}

- (void)subscribeAttributeCurrentSaturationWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentSaturation(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentSaturationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentSaturation(success);
        },
        true);
}

- (void)readAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRemainingTime(success, failure);
    });
}

- (void)readAttributeCurrentXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentX(success, failure);
    });
}

- (void)subscribeAttributeCurrentXWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentX(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentX(success);
        },
        true);
}

- (void)readAttributeCurrentYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentY(success, failure);
    });
}

- (void)subscribeAttributeCurrentYWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentY(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentY(success);
        },
        true);
}

- (void)readAttributeDriftCompensationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDriftCompensation(success, failure);
    });
}

- (void)readAttributeCompensationTextWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCompensationText(success, failure);
    });
}

- (void)readAttributeColorTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTemperature(success, failure);
    });
}

- (void)subscribeAttributeColorTemperatureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorTemperature(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorTemperature(success);
        },
        true);
}

- (void)readAttributeColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorMode(success, failure);
    });
}

- (void)readAttributeColorControlOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorControlOptions(success, failure);
    });
}

- (void)writeAttributeColorControlOptionsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorControlOptions(success, failure, value);
    });
}

- (void)readAttributeNumberOfPrimariesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfPrimaries(success, failure);
    });
}

- (void)readAttributePrimary1XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1X(success, failure);
    });
}

- (void)readAttributePrimary1YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1Y(success, failure);
    });
}

- (void)readAttributePrimary1IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1Intensity(success, failure);
    });
}

- (void)readAttributePrimary2XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2X(success, failure);
    });
}

- (void)readAttributePrimary2YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2Y(success, failure);
    });
}

- (void)readAttributePrimary2IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2Intensity(success, failure);
    });
}

- (void)readAttributePrimary3XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3X(success, failure);
    });
}

- (void)readAttributePrimary3YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3Y(success, failure);
    });
}

- (void)readAttributePrimary3IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3Intensity(success, failure);
    });
}

- (void)readAttributePrimary4XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4X(success, failure);
    });
}

- (void)readAttributePrimary4YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4Y(success, failure);
    });
}

- (void)readAttributePrimary4IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4Intensity(success, failure);
    });
}

- (void)readAttributePrimary5XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5X(success, failure);
    });
}

- (void)readAttributePrimary5YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5Y(success, failure);
    });
}

- (void)readAttributePrimary5IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5Intensity(success, failure);
    });
}

- (void)readAttributePrimary6XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6X(success, failure);
    });
}

- (void)readAttributePrimary6YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6Y(success, failure);
    });
}

- (void)readAttributePrimary6IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6Intensity(success, failure);
    });
}

- (void)readAttributeWhitePointXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWhitePointX(success, failure);
    });
}

- (void)writeAttributeWhitePointXWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeWhitePointX(success, failure, value);
    });
}

- (void)readAttributeWhitePointYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWhitePointY(success, failure);
    });
}

- (void)writeAttributeWhitePointYWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeWhitePointY(success, failure, value);
    });
}

- (void)readAttributeColorPointRXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRX(success, failure);
    });
}

- (void)writeAttributeColorPointRXWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointRX(success, failure, value);
    });
}

- (void)readAttributeColorPointRYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRY(success, failure);
    });
}

- (void)writeAttributeColorPointRYWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointRY(success, failure, value);
    });
}

- (void)readAttributeColorPointRIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointRIntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointRIntensity(success, failure, value);
    });
}

- (void)readAttributeColorPointGXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGX(success, failure);
    });
}

- (void)writeAttributeColorPointGXWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointGX(success, failure, value);
    });
}

- (void)readAttributeColorPointGYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGY(success, failure);
    });
}

- (void)writeAttributeColorPointGYWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointGY(success, failure, value);
    });
}

- (void)readAttributeColorPointGIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointGIntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointGIntensity(success, failure, value);
    });
}

- (void)readAttributeColorPointBXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBX(success, failure);
    });
}

- (void)writeAttributeColorPointBXWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointBX(success, failure, value);
    });
}

- (void)readAttributeColorPointBYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBY(success, failure);
    });
}

- (void)writeAttributeColorPointBYWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointBY(success, failure, value);
    });
}

- (void)readAttributeColorPointBIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointBIntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointBIntensity(success, failure, value);
    });
}

- (void)readAttributeEnhancedCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnhancedCurrentHue(success, failure);
    });
}

- (void)readAttributeEnhancedColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnhancedColorMode(success, failure);
    });
}

- (void)readAttributeColorLoopActiveWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopActive(success, failure);
    });
}

- (void)readAttributeColorLoopDirectionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopDirection(success, failure);
    });
}

- (void)readAttributeColorLoopTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopTime(success, failure);
    });
}

- (void)readAttributeColorLoopStartEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopStartEnhancedHue(success, failure);
    });
}

- (void)readAttributeColorLoopStoredEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopStoredEnhancedHue(success, failure);
    });
}

- (void)readAttributeColorCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorCapabilities(success, failure);
    });
}

- (void)readAttributeColorTempPhysicalMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTempPhysicalMin(success, failure);
    });
}

- (void)readAttributeColorTempPhysicalMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTempPhysicalMax(success, failure);
    });
}

- (void)readAttributeCoupleColorTempToLevelMinMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCoupleColorTempToLevelMinMireds(success, failure);
    });
}

- (void)readAttributeStartUpColorTemperatureMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpColorTemperatureMireds(success, failure);
    });
}

- (void)writeAttributeStartUpColorTemperatureMiredsWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStartUpColorTemperatureMireds(success, failure, value);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPContentLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)launchContent:(bool)autoPlay data:(NSString *)data responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ContentLauncher::Commands::LaunchContent::Type request;
    request.autoPlay = autoPlay.boolValue;
    request.data = [self asCharSpan:data];

    new CHIPContentLauncherClusterLaunchContentResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPContentLauncherClusterLaunchContentResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)launchURL:(NSString *)contentURL displayString:(NSString *)displayString responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ContentLauncher::Commands::LaunchURL::Type request;
    request.contentURL = [self asCharSpan:contentURL];
    request.displayString = [self asCharSpan:displayString];

    new CHIPContentLauncherClusterLaunchURLResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPContentLauncherClusterLaunchURLResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeAcceptsHeaderListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeAcceptsHeaderList(success, failure);
        });
}

- (void)readAttributeSupportedStreamingTypesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSupportedStreamingTypes(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPDescriptor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeDeviceListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorDeviceListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeDeviceList(success, failure);
        });
}

- (void)readAttributeServerListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorServerListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeServerList(success, failure);
        });
}

- (void)readAttributeClientListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorClientListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeClientList(success, failure);
        });
}

- (void)readAttributePartsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorPartsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributePartsList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPDiagnosticLogs

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)retrieveLogsRequest:(uint8_t)intent
          requestedProtocol:(uint8_t)requestedProtocol
     transferFileDesignator:(NSData *)transferFileDesignator
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DiagnosticLogs::Commands::RetrieveLogsRequest::Type request;
    request.intent = static_cast<std::remove_reference_t<decltype(request.intent)>>(intent.unsignedCharValue);
    request.requestedProtocol
        = static_cast<std::remove_reference_t<decltype(request.requestedProtocol)>>(requestedProtocol.unsignedCharValue);
    request.transferFileDesignator = [self asByteSpan:transferFileDesignator];

    new CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

@end

@implementation CHIPDoorLock

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)clearAllPins:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearAllPins::Type request;

    new CHIPDoorLockClusterClearAllPinsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearAllPinsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearAllRfids:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearAllRfids::Type request;

    new CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearAllRfidsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearHolidaySchedule:(uint8_t)scheduleId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearHolidaySchedule::Type request;
    request.scheduleId = scheduleId.unsignedCharValue;

    new CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearHolidayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearPin:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearPin::Type request;
    request.userId = userId.unsignedShortValue;

    new CHIPDoorLockClusterClearPinResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearPinResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearRfid:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearRfid::Type request;
    request.userId = userId.unsignedShortValue;

    new CHIPDoorLockClusterClearRfidResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearRfidResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearWeekdaySchedule:(uint8_t)scheduleId userId:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearWeekdaySchedule::Type request;
    request.scheduleId = scheduleId.unsignedCharValue;
    request.userId = userId.unsignedShortValue;

    new CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearYeardaySchedule:(uint8_t)scheduleId userId:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearYeardaySchedule::Type request;
    request.scheduleId = scheduleId.unsignedCharValue;
    request.userId = userId.unsignedShortValue;

    new CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearYeardayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getHolidaySchedule:(uint8_t)scheduleId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetHolidaySchedule::Type request;
    request.scheduleId = scheduleId.unsignedCharValue;

    new CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetHolidayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getLogRecord:(uint16_t)logIndex responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetLogRecord::Type request;
    request.logIndex = logIndex.unsignedShortValue;

    new CHIPDoorLockClusterGetLogRecordResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetLogRecordResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getPin:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetPin::Type request;
    request.userId = userId.unsignedShortValue;

    new CHIPDoorLockClusterGetPinResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetPinResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getRfid:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetRfid::Type request;
    request.userId = userId.unsignedShortValue;

    new CHIPDoorLockClusterGetRfidResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetRfidResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getUserType:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetUserType::Type request;
    request.userId = userId.unsignedShortValue;

    new CHIPDoorLockClusterGetUserTypeResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetUserTypeResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getWeekdaySchedule:(uint8_t)scheduleId userId:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetWeekdaySchedule::Type request;
    request.scheduleId = scheduleId.unsignedCharValue;
    request.userId = userId.unsignedShortValue;

    new CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getYeardaySchedule:(uint8_t)scheduleId userId:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetYeardaySchedule::Type request;
    request.scheduleId = scheduleId.unsignedCharValue;
    request.userId = userId.unsignedShortValue;

    new CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetYeardayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)lockDoor:(NSData *)pin responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::LockDoor::Type request;
    request.pin = [self asByteSpan:pin];

    new CHIPDoorLockClusterLockDoorResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterLockDoorResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setHolidaySchedule:(uint8_t)scheduleId
                localStartTime:(uint32_t)localStartTime
                  localEndTime:(uint32_t)localEndTime
    operatingModeDuringHoliday:(uint8_t)operatingModeDuringHoliday
               responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetHolidaySchedule::Type request;
    request.scheduleId = scheduleId.unsignedCharValue;
    request.localStartTime = localStartTime.unsignedIntValue;
    request.localEndTime = localEndTime.unsignedIntValue;
    request.operatingModeDuringHoliday = operatingModeDuringHoliday.unsignedCharValue;

    new CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetHolidayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setPin:(uint16_t)userId
         userStatus:(uint8_t)userStatus
           userType:(uint8_t)userType
                pin:(NSData *)pin
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetPin::Type request;
    request.userId = userId.unsignedShortValue;
    request.userStatus = static_cast<std::remove_reference_t<decltype(request.userStatus)>>(userStatus.unsignedCharValue);
    request.userType = static_cast<std::remove_reference_t<decltype(request.userType)>>(userType.unsignedCharValue);
    request.pin = [self asByteSpan:pin];

    new CHIPDoorLockClusterSetPinResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetPinResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setRfid:(uint16_t)userId
         userStatus:(uint8_t)userStatus
           userType:(uint8_t)userType
                 id:(NSData *)id
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetRfid::Type request;
    request.userId = userId.unsignedShortValue;
    request.userStatus = static_cast<std::remove_reference_t<decltype(request.userStatus)>>(userStatus.unsignedCharValue);
    request.userType = static_cast<std::remove_reference_t<decltype(request.userType)>>(userType.unsignedCharValue);
    request.id = [self asByteSpan:id];

    new CHIPDoorLockClusterSetRfidResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetRfidResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setUserType:(uint16_t)userId userType:(uint8_t)userType responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetUserType::Type request;
    request.userId = userId.unsignedShortValue;
    request.userType = static_cast<std::remove_reference_t<decltype(request.userType)>>(userType.unsignedCharValue);

    new CHIPDoorLockClusterSetUserTypeResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetUserTypeResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setWeekdaySchedule:(uint8_t)scheduleId
                    userId:(uint16_t)userId
                  daysMask:(uint8_t)daysMask
                 startHour:(uint8_t)startHour
               startMinute:(uint8_t)startMinute
                   endHour:(uint8_t)endHour
                 endMinute:(uint8_t)endMinute
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetWeekdaySchedule::Type request;
    request.scheduleId = scheduleId.unsignedCharValue;
    request.userId = userId.unsignedShortValue;
    request.daysMask = static_cast<std::remove_reference_t<decltype(request.daysMask)>>(daysMask.unsignedCharValue);
    request.startHour = startHour.unsignedCharValue;
    request.startMinute = startMinute.unsignedCharValue;
    request.endHour = endHour.unsignedCharValue;
    request.endMinute = endMinute.unsignedCharValue;

    new CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setYeardaySchedule:(uint8_t)scheduleId
                    userId:(uint16_t)userId
            localStartTime:(uint32_t)localStartTime
              localEndTime:(uint32_t)localEndTime
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetYeardaySchedule::Type request;
    request.scheduleId = scheduleId.unsignedCharValue;
    request.userId = userId.unsignedShortValue;
    request.localStartTime = localStartTime.unsignedIntValue;
    request.localEndTime = localEndTime.unsignedIntValue;

    new CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetYeardayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)unlockDoor:(NSData *)pin responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::UnlockDoor::Type request;
    request.pin = [self asByteSpan:pin];

    new CHIPDoorLockClusterUnlockDoorResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterUnlockDoorResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)unlockWithTimeout:(uint16_t)timeoutInSeconds pin:(NSData *)pin responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    DoorLock::Commands::UnlockWithTimeout::Type request;
    request.timeoutInSeconds = timeoutInSeconds.unsignedShortValue;
    request.pin = [self asByteSpan:pin];

    new CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeLockStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLockState(success, failure);
    });
}

- (void)subscribeAttributeLockStateWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLockState(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLockStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLockState(success);
        },
        true);
}

- (void)readAttributeLockTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLockType(success, failure);
    });
}

- (void)readAttributeActuatorEnabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActuatorEnabled(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPElectricalMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasurementTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasurementType(success, failure);
    });
}

- (void)readAttributeTotalActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTotalActivePower(success, failure);
    });
}

- (void)readAttributeRmsVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltage(success, failure);
    });
}

- (void)readAttributeRmsVoltageMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltageMin(success, failure);
    });
}

- (void)readAttributeRmsVoltageMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltageMax(success, failure);
    });
}

- (void)readAttributeRmsCurrentWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrent(success, failure);
    });
}

- (void)readAttributeRmsCurrentMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrentMin(success, failure);
    });
}

- (void)readAttributeRmsCurrentMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrentMax(success, failure);
    });
}

- (void)readAttributeActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePower(success, failure);
    });
}

- (void)readAttributeActivePowerMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePowerMin(success, failure);
    });
}

- (void)readAttributeActivePowerMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePowerMax(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPEthernetNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCounts:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    EthernetNetworkDiagnostics::Commands::ResetCounts::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributePHYRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePHYRate(success, failure);
    });
}

- (void)readAttributeFullDuplexWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFullDuplex(success, failure);
    });
}

- (void)readAttributePacketRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketRxCount(success, failure);
    });
}

- (void)readAttributePacketTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketTxCount(success, failure);
    });
}

- (void)readAttributeTxErrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrCount(success, failure);
    });
}

- (void)readAttributeCollisionCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCollisionCount(success, failure);
    });
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)readAttributeCarrierDetectWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCarrierDetect(success, failure);
    });
}

- (void)readAttributeTimeSinceResetWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTimeSinceReset(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPFixedLabel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeLabelListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPFixedLabelLabelListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeLabelList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPFlowMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGeneralCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)armFailSafe:(uint16_t)expiryLengthSeconds
         breadcrumb:(uint64_t)breadcrumb
          timeoutMs:(uint32_t)timeoutMs
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    GeneralCommissioning::Commands::ArmFailSafe::Type request;
    request.expiryLengthSeconds = expiryLengthSeconds.unsignedShortValue;
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)commissioningComplete:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    GeneralCommissioning::Commands::CommissioningComplete::Type request;

    new CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setRegulatoryConfig:(uint8_t)location
                countryCode:(NSString *)countryCode
                 breadcrumb:(uint64_t)breadcrumb
                  timeoutMs:(uint32_t)timeoutMs
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    GeneralCommissioning::Commands::SetRegulatoryConfig::Type request;
    request.location = static_cast<std::remove_reference_t<decltype(request.location)>>(location.unsignedCharValue);
    request.countryCode = [self asCharSpan:countryCode];
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeBreadcrumbWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBreadcrumb(success, failure);
    });
}

- (void)writeAttributeBreadcrumbWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBreadcrumb(success, failure, value);
    });
}

- (void)readAttributeBasicCommissioningInfoListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeBasicCommissioningInfoList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGeneralDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeNetworkInterfacesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeNetworkInterfaces(success, failure);
        });
}

- (void)readAttributeRebootCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRebootCount(success, failure);
    });
}

- (void)readAttributeUpTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUpTime(success, failure);
    });
}

- (void)readAttributeTotalOperationalHoursWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTotalOperationalHours(success, failure);
    });
}

- (void)readAttributeBootReasonsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBootReasons(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGroupKeyManagement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeGroupsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupKeyManagementGroupsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeGroups(success, failure);
        });
}

- (void)readAttributeGroupKeysWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeGroupKeys(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGroups

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addGroup:(uint16_t)groupId groupName:(NSString *)groupName responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::AddGroup::Type request;
    request.groupId = groupId.unsignedShortValue;
    request.groupName = [self asCharSpan:groupName];

    new CHIPGroupsClusterAddGroupResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterAddGroupResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)addGroupIfIdentifying:(uint16_t)groupId groupName:(NSString *)groupName responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::AddGroupIfIdentifying::Type request;
    request.groupId = groupId.unsignedShortValue;
    request.groupName = [self asCharSpan:groupName];

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)getGroupMembership:(uint8_t)groupCount groupList:(uint16_t)groupList responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::GetGroupMembership::Type request;
    request.groupCount = groupCount.unsignedCharValue;
    {
        using ListType = decltype(request.groupList);
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (groupList.count != 0) {
            auto * listHolder = new ListHolder<ListMemberType>(groupList.count);
            if (listHolder == nullptr || listHolder->mList == nullptr) {
                // Now what?
                return;
            }
            listFreer.add(listHolder);
            for (size_t i = 0; i < groupList.count; ++i) {
                if (![groupList[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value, now what?
                    return;
                }
                auto element = (NSNumber *) groupList[i];
                listHolder->mList[i] = element.unsignedShortValue;
            }
            request.groupList = ListType(listHolder->mList, groupList.count);
        } else {
            request.groupList = ListType();
        }
    }

    new CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterGetGroupMembershipResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeAllGroups:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::RemoveAllGroups::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)removeGroup:(uint16_t)groupId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::RemoveGroup::Type request;
    request.groupId = groupId.unsignedShortValue;

    new CHIPGroupsClusterRemoveGroupResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterRemoveGroupResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)viewGroup:(uint16_t)groupId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Groups::Commands::ViewGroup::Type request;
    request.groupId = groupId.unsignedShortValue;

    new CHIPGroupsClusterViewGroupResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterViewGroupResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNameSupport(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPIdentify

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)identify:(uint16_t)identifyTime responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Identify::Commands::Identify::Type request;
    request.identifyTime = identifyTime.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)identifyQuery:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Identify::Commands::IdentifyQuery::Type request;

    new CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPIdentifyClusterIdentifyQueryResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)triggerEffect:(uint8_t)effectIdentifier
        effectVariant:(uint8_t)effectVariant
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Identify::Commands::TriggerEffect::Type request;
    request.effectIdentifier
        = static_cast<std::remove_reference_t<decltype(request.effectIdentifier)>>(effectIdentifier.unsignedCharValue);
    request.effectVariant = static_cast<std::remove_reference_t<decltype(request.effectVariant)>>(effectVariant.unsignedCharValue);

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeIdentifyTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeIdentifyTime(success, failure);
    });
}

- (void)writeAttributeIdentifyTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeIdentifyTime(success, failure, value);
    });
}

- (void)readAttributeIdentifyTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeIdentifyType(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPIlluminanceMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)readAttributeLightSensorTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLightSensorType(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPKeypadInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)sendKey:(uint8_t)keyCode responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    KeypadInput::Commands::SendKey::Type request;
    request.keyCode = static_cast<std::remove_reference_t<decltype(request.keyCode)>>(keyCode.unsignedCharValue);

    new CHIPKeypadInputClusterSendKeyResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPKeypadInputClusterSendKeyResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPLevelControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)move:(uint8_t)moveMode
               rate:(uint8_t)rate
         optionMask:(uint8_t)optionMask
     optionOverride:(uint8_t)optionOverride
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::Move::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(moveMode.unsignedCharValue);
    request.rate = rate.unsignedCharValue;
    request.optionMask = optionMask.unsignedCharValue;
    request.optionOverride = optionOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToLevel:(uint8_t)level
     transitionTime:(uint16_t)transitionTime
         optionMask:(uint8_t)optionMask
     optionOverride:(uint8_t)optionOverride
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::MoveToLevel::Type request;
    request.level = level.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionMask = optionMask.unsignedCharValue;
    request.optionOverride = optionOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToLevelWithOnOff:(uint8_t)level transitionTime:(uint16_t)transitionTime responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::MoveToLevelWithOnOff::Type request;
    request.level = level.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveWithOnOff:(uint8_t)moveMode rate:(uint8_t)rate responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::MoveWithOnOff::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(moveMode.unsignedCharValue);
    request.rate = rate.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)step:(uint8_t)stepMode
           stepSize:(uint8_t)stepSize
     transitionTime:(uint16_t)transitionTime
         optionMask:(uint8_t)optionMask
     optionOverride:(uint8_t)optionOverride
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::Step::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(stepMode.unsignedCharValue);
    request.stepSize = stepSize.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.optionMask = optionMask.unsignedCharValue;
    request.optionOverride = optionOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepWithOnOff:(uint8_t)stepMode
             stepSize:(uint8_t)stepSize
       transitionTime:(uint16_t)transitionTime
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::StepWithOnOff::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(stepMode.unsignedCharValue);
    request.stepSize = stepSize.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stop:(uint8_t)optionMask optionOverride:(uint8_t)optionOverride responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::Stop::Type request;
    request.optionMask = optionMask.unsignedCharValue;
    request.optionOverride = optionOverride.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopWithOnOff:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LevelControl::Commands::StopWithOnOff::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentLevel(success, failure);
    });
}

- (void)subscribeAttributeCurrentLevelWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentLevel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentLevel(success);
        },
        true);
}

- (void)readAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRemainingTime(success, failure);
    });
}

- (void)readAttributeMinLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinLevel(success, failure);
    });
}

- (void)readAttributeMaxLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxLevel(success, failure);
    });
}

- (void)readAttributeCurrentFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentFrequency(success, failure);
    });
}

- (void)readAttributeMinFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinFrequency(success, failure);
    });
}

- (void)readAttributeMaxFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxFrequency(success, failure);
    });
}

- (void)readAttributeOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOptions(success, failure);
    });
}

- (void)writeAttributeOptionsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOptions(success, failure, value);
    });
}

- (void)readAttributeOnOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnOffTransitionTime(success, failure);
    });
}

- (void)writeAttributeOnOffTransitionTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnOffTransitionTime(success, failure, value);
    });
}

- (void)readAttributeOnLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnLevel(success, failure);
    });
}

- (void)writeAttributeOnLevelWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnLevel(success, failure, value);
    });
}

- (void)readAttributeOnTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnTransitionTime(success, failure);
    });
}

- (void)writeAttributeOnTransitionTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnTransitionTime(success, failure, value);
    });
}

- (void)readAttributeOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOffTransitionTime(success, failure);
    });
}

- (void)writeAttributeOffTransitionTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOffTransitionTime(success, failure, value);
    });
}

- (void)readAttributeDefaultMoveRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDefaultMoveRate(success, failure);
    });
}

- (void)writeAttributeDefaultMoveRateWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeDefaultMoveRate(success, failure, value);
    });
}

- (void)readAttributeStartUpCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpCurrentLevel(success, failure);
    });
}

- (void)writeAttributeStartUpCurrentLevelWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStartUpCurrentLevel(success, failure, value);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPLowPower

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)sleep:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    LowPower::Commands::Sleep::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPMediaInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)hideInputStatus:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaInput::Commands::HideInputStatus::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)renameInput:(uint8_t)index name:(NSString *)name responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaInput::Commands::RenameInput::Type request;
    request.index = index.unsignedCharValue;
    request.name = [self asCharSpan:name];

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)selectInput:(uint8_t)index responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaInput::Commands::SelectInput::Type request;
    request.index = index.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)showInputStatus:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaInput::Commands::ShowInputStatus::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeMediaInputListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPMediaInputMediaInputListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeMediaInputList(success, failure);
        });
}

- (void)readAttributeCurrentMediaInputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMediaInput(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPMediaPlayback

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)mediaFastForward:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaFastForward::Type request;

    new CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaNext:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaNext::Type request;

    new CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaNextResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaPause:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaPause::Type request;

    new CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaPauseResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaPlay:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaPlay::Type request;

    new CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaPlayResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaPrevious:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaPrevious::Type request;

    new CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaPreviousResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaRewind:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaRewind::Type request;

    new CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaRewindResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaSeek:(uint64_t)position responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaSeek::Type request;
    request.position = position.unsignedLongLongValue;

    new CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaSeekResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaSkipBackward:(uint64_t)deltaPositionMilliseconds responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaSkipBackward::Type request;
    request.deltaPositionMilliseconds = deltaPositionMilliseconds.unsignedLongLongValue;

    new CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaSkipForward:(uint64_t)deltaPositionMilliseconds responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaSkipForward::Type request;
    request.deltaPositionMilliseconds = deltaPositionMilliseconds.unsignedLongLongValue;

    new CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaStartOver:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaStartOver::Type request;

    new CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaStartOverResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaStop:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaStop::Type request;

    new CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaStopResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributePlaybackStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePlaybackState(success, failure);
    });
}

- (void)readAttributeStartTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartTime(success, failure);
    });
}

- (void)readAttributeDurationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDuration(success, failure);
    });
}

- (void)readAttributePositionUpdatedAtWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePositionUpdatedAt(success, failure);
    });
}

- (void)readAttributePositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePosition(success, failure);
    });
}

- (void)readAttributePlaybackSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePlaybackSpeed(success, failure);
    });
}

- (void)readAttributeSeekRangeEndWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSeekRangeEnd(success, failure);
    });
}

- (void)readAttributeSeekRangeStartWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSeekRangeStart(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPModeSelect

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeToMode:(uint8_t)newMode responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ModeSelect::Commands::ChangeToMode::Type request;
    request.newMode = newMode.unsignedCharValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCurrentModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMode(success, failure);
    });
}

- (void)subscribeAttributeCurrentModeWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentMode(success);
        },
        true);
}

- (void)readAttributeSupportedModesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPModeSelectSupportedModesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSupportedModes(success, failure);
        });
}

- (void)readAttributeOnModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnMode(success, failure);
    });
}

- (void)writeAttributeOnModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnMode(success, failure, value);
    });
}

- (void)readAttributeStartUpModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpMode(success, failure);
    });
}

- (void)readAttributeDescriptionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDescription(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPNetworkCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addThreadNetwork:(NSData *)operationalDataset
              breadcrumb:(uint64_t)breadcrumb
               timeoutMs:(uint32_t)timeoutMs
         responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::AddThreadNetwork::Type request;
    request.operationalDataset = [self asByteSpan:operationalDataset];
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)addWiFiNetwork:(NSData *)ssid
           credentials:(NSData *)credentials
            breadcrumb:(uint64_t)breadcrumb
             timeoutMs:(uint32_t)timeoutMs
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::AddWiFiNetwork::Type request;
    request.ssid = [self asByteSpan:ssid];
    request.credentials = [self asByteSpan:credentials];
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)disableNetwork:(NSData *)networkID
            breadcrumb:(uint64_t)breadcrumb
             timeoutMs:(uint32_t)timeoutMs
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::DisableNetwork::Type request;
    request.networkID = [self asByteSpan:networkID];
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)enableNetwork:(NSData *)networkID
           breadcrumb:(uint64_t)breadcrumb
            timeoutMs:(uint32_t)timeoutMs
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::EnableNetwork::Type request;
    request.networkID = [self asByteSpan:networkID];
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeNetwork:(NSData *)networkID
           breadcrumb:(uint64_t)breadcrumb
            timeoutMs:(uint32_t)timeoutMs
      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::RemoveNetwork::Type request;
    request.networkID = [self asByteSpan:networkID];
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)scanNetworks:(NSData *)ssid
          breadcrumb:(uint64_t)breadcrumb
           timeoutMs:(uint32_t)timeoutMs
     responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::ScanNetworks::Type request;
    request.ssid = [self asByteSpan:ssid];
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterScanNetworksResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)updateThreadNetwork:(NSData *)operationalDataset
                 breadcrumb:(uint64_t)breadcrumb
                  timeoutMs:(uint32_t)timeoutMs
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::UpdateThreadNetwork::Type request;
    request.operationalDataset = [self asByteSpan:operationalDataset];
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)updateWiFiNetwork:(NSData *)ssid
              credentials:(NSData *)credentials
               breadcrumb:(uint64_t)breadcrumb
                timeoutMs:(uint32_t)timeoutMs
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::UpdateWiFiNetwork::Type request;
    request.ssid = [self asByteSpan:ssid];
    request.credentials = [self asByteSpan:credentials];
    request.breadcrumb = breadcrumb.unsignedLongLongValue;
    request.timeoutMs = timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOtaSoftwareUpdateProvider

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)applyUpdateRequest:(NSData *)updateToken newVersion:(uint32_t)newVersion responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateProvider::Commands::ApplyUpdateRequest::Type request;
    request.updateToken = [self asByteSpan:updateToken];
    request.newVersion = newVersion.unsignedIntValue;

    new CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)notifyUpdateApplied:(NSData *)updateToken
            softwareVersion:(uint32_t)softwareVersion
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateProvider::Commands::NotifyUpdateApplied::Type request;
    request.updateToken = [self asByteSpan:updateToken];
    request.softwareVersion = softwareVersion.unsignedIntValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)queryImage:(uint16_t)vendorId
              productId:(uint16_t)productId
        softwareVersion:(uint32_t)softwareVersion
     protocolsSupported:(uint8_t)protocolsSupported
        hardwareVersion:(uint16_t)hardwareVersion
               location:(NSString *)location
    requestorCanConsent:(bool)requestorCanConsent
    metadataForProvider:(NSData *)metadataForProvider
        responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateProvider::Commands::QueryImage::Type request;
    request.vendorId = static_cast<std::remove_reference_t<decltype(request.vendorId)>>(vendorId.unsignedShortValue);
    request.productId = productId.unsignedShortValue;
    request.softwareVersion = softwareVersion.unsignedIntValue;
    {
        using ListType = decltype(request.protocolsSupported);
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (protocolsSupported.count != 0) {
            auto * listHolder = new ListHolder<ListMemberType>(protocolsSupported.count);
            if (listHolder == nullptr || listHolder->mList == nullptr) {
                // Now what?
                return;
            }
            listFreer.add(listHolder);
            for (size_t i = 0; i < protocolsSupported.count; ++i) {
                if (![protocolsSupported[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value, now what?
                    return;
                }
                auto element = (NSNumber *) protocolsSupported[i];
                listHolder->mList[i]
                    = static_cast<std::remove_reference_t<decltype(listHolder->mList[i])>>(element.unsignedCharValue);
            }
            request.protocolsSupported = ListType(listHolder->mList, protocolsSupported.count);
        } else {
            request.protocolsSupported = ListType();
        }
    }
    if (hardwareVersion != nil) {
        auto & definedValue = request.hardwareVersion.Emplace();
        definedValue = hardwareVersion.unsignedShortValue;
    }
    if (location != nil) {
        auto & definedValue = request.location.Emplace();
        definedValue = [self asCharSpan:location];
    }
    if (requestorCanConsent != nil) {
        auto & definedValue = request.requestorCanConsent.Emplace();
        definedValue = requestorCanConsent.boolValue;
    }
    if (metadataForProvider != nil) {
        auto & definedValue = request.metadataForProvider.Emplace();
        definedValue = [self asByteSpan:metadataForProvider];
    }

    new CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOtaSoftwareUpdateRequestor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)announceOtaProvider:(uint64_t)providerLocation
                   vendorId:(uint16_t)vendorId
         announcementReason:(uint8_t)announcementReason
            metadataForNode:(NSData *)metadataForNode
            responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateRequestor::Commands::AnnounceOtaProvider::Type request;
    request.providerLocation = providerLocation.unsignedLongLongValue;
    request.vendorId = static_cast<std::remove_reference_t<decltype(request.vendorId)>>(vendorId.unsignedShortValue);
    request.announcementReason
        = static_cast<std::remove_reference_t<decltype(request.announcementReason)>>(announcementReason.unsignedCharValue);
    if (metadataForNode != nil) {
        auto & definedValue = request.metadataForNode.Emplace();
        definedValue = [self asByteSpan:metadataForNode];
    }

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeDefaultOtaProviderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDefaultOtaProvider(success, failure);
    });
}

- (void)writeAttributeDefaultOtaProviderWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeDefaultOtaProvider(success, failure, [self asByteSpan:value]);
    });
}

- (void)readAttributeUpdatePossibleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUpdatePossible(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOccupancySensing

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeOccupancyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancy(success, failure);
    });
}

- (void)subscribeAttributeOccupancyWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOccupancy(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOccupancyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOccupancy(success);
        },
        true);
}

- (void)readAttributeOccupancySensorTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancySensorType(success, failure);
    });
}

- (void)readAttributeOccupancySensorTypeBitmapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancySensorTypeBitmap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOnOff

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)off:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::Off::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)offWithEffect:(uint8_t)effectId effectVariant:(uint8_t)effectVariant responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::OffWithEffect::Type request;
    request.effectId = static_cast<std::remove_reference_t<decltype(request.effectId)>>(effectId.unsignedCharValue);
    request.effectVariant = static_cast<std::remove_reference_t<decltype(request.effectVariant)>>(effectVariant.unsignedCharValue);

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)on:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::On::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)onWithRecallGlobalScene:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::OnWithRecallGlobalScene::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)onWithTimedOff:(uint8_t)onOffControl
                onTime:(uint16_t)onTime
           offWaitTime:(uint16_t)offWaitTime
       responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::OnWithTimedOff::Type request;
    request.onOffControl = static_cast<std::remove_reference_t<decltype(request.onOffControl)>>(onOffControl.unsignedCharValue);
    request.onTime = onTime.unsignedShortValue;
    request.offWaitTime = offWaitTime.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)toggle:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OnOff::Commands::Toggle::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnOff(success, failure);
    });
}

- (void)subscribeAttributeOnOffWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOnOff(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOnOff(success);
        },
        true);
}

- (void)readAttributeGlobalSceneControlWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeGlobalSceneControl(success, failure);
    });
}

- (void)readAttributeOnTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnTime(success, failure);
    });
}

- (void)writeAttributeOnTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnTime(success, failure, value);
    });
}

- (void)readAttributeOffWaitTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOffWaitTime(success, failure);
    });
}

- (void)writeAttributeOffWaitTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOffWaitTime(success, failure, value);
    });
}

- (void)readAttributeStartUpOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpOnOff(success, failure);
    });
}

- (void)writeAttributeStartUpOnOffWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStartUpOnOff(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOnOffSwitchConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeSwitchTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSwitchType(success, failure);
    });
}

- (void)readAttributeSwitchActionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSwitchActions(success, failure);
    });
}

- (void)writeAttributeSwitchActionsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSwitchActions(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOperationalCredentials

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addNOC:(NSData *)NOCValue
          ICACValue:(NSData *)ICACValue
           IPKValue:(NSData *)IPKValue
      caseAdminNode:(uint64_t)caseAdminNode
      adminVendorId:(uint16_t)adminVendorId
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::AddNOC::Type request;
    request.NOCValue = [self asByteSpan:NOCValue];
    if (ICACValue != nil) {
        auto & definedValue = request.ICACValue.Emplace();
        definedValue = [self asByteSpan:ICACValue];
    }
    request.IPKValue = [self asByteSpan:IPKValue];
    request.caseAdminNode = caseAdminNode.unsignedLongLongValue;
    request.adminVendorId = adminVendorId.unsignedShortValue;

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)addTrustedRootCertificate:(NSData *)rootCertificate responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::AddTrustedRootCertificate::Type request;
    request.rootCertificate = [self asByteSpan:rootCertificate];

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)attestationRequest:(NSData *)attestationNonce responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::AttestationRequest::Type request;
    request.attestationNonce = [self asByteSpan:attestationNonce];

    new CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterAttestationResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)certificateChainRequest:(uint8_t)certificateType responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::CertificateChainRequest::Type request;
    request.certificateType = certificateType.unsignedCharValue;

    new CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPOperationalCredentialsClusterCertificateChainResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)opCSRRequest:(NSData *)CSRNonce responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::OpCSRRequest::Type request;
    request.CSRNonce = [self asByteSpan:CSRNonce];

    new CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterOpCSRResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeFabric:(uint8_t)fabricIndex responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::RemoveFabric::Type request;
    request.fabricIndex = fabricIndex.unsignedCharValue;

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeTrustedRootCertificate:(NSData *)trustedRootIdentifier responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::RemoveTrustedRootCertificate::Type request;
    request.trustedRootIdentifier = [self asByteSpan:trustedRootIdentifier];

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)updateFabricLabel:(NSString *)label responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::UpdateFabricLabel::Type request;
    request.label = [self asCharSpan:label];

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)updateNOC:(NSData *)NOCValue ICACValue:(NSData *)ICACValue responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::UpdateNOC::Type request;
    request.NOCValue = [self asByteSpan:NOCValue];
    if (ICACValue != nil) {
        auto & definedValue = request.ICACValue.Emplace();
        definedValue = [self asByteSpan:ICACValue];
    }

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeFabricsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeFabricsList(success, failure);
        });
}

- (void)readAttributeSupportedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSupportedFabrics(success, failure);
    });
}

- (void)readAttributeCommissionedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCommissionedFabrics(success, failure);
    });
}

- (void)readAttributeTrustedRootCertificatesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTrustedRootCertificates(success, failure);
        });
}

- (void)readAttributeCurrentFabricIndexWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentFabricIndex(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPPowerSource

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStatus(success, failure);
    });
}

- (void)readAttributeOrderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOrder(success, failure);
    });
}

- (void)readAttributeDescriptionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDescription(success, failure);
    });
}

- (void)readAttributeBatteryVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryVoltage(success, failure);
    });
}

- (void)readAttributeBatteryPercentRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryPercentRemaining(success, failure);
    });
}

- (void)readAttributeBatteryTimeRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryTimeRemaining(success, failure);
    });
}

- (void)readAttributeBatteryChargeLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryChargeLevel(success, failure);
    });
}

- (void)readAttributeActiveBatteryFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveBatteryFaults(success, failure);
        });
}

- (void)readAttributeBatteryChargeStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryChargeState(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPPressureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPPumpConfigurationAndControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMaxPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxPressure(success, failure);
    });
}

- (void)readAttributeMaxSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxSpeed(success, failure);
    });
}

- (void)readAttributeMaxFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxFlow(success, failure);
    });
}

- (void)readAttributeMinConstPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstPressure(success, failure);
    });
}

- (void)readAttributeMaxConstPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstPressure(success, failure);
    });
}

- (void)readAttributeMinCompPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinCompPressure(success, failure);
    });
}

- (void)readAttributeMaxCompPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxCompPressure(success, failure);
    });
}

- (void)readAttributeMinConstSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstSpeed(success, failure);
    });
}

- (void)readAttributeMaxConstSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstSpeed(success, failure);
    });
}

- (void)readAttributeMinConstFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstFlow(success, failure);
    });
}

- (void)readAttributeMaxConstFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstFlow(success, failure);
    });
}

- (void)readAttributeMinConstTempWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstTemp(success, failure);
    });
}

- (void)readAttributeMaxConstTempWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstTemp(success, failure);
    });
}

- (void)readAttributePumpStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePumpStatus(success, failure);
    });
}

- (void)subscribeAttributePumpStatusWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePumpStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePumpStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePumpStatus(success);
        },
        true);
}

- (void)readAttributeEffectiveOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEffectiveOperationMode(success, failure);
    });
}

- (void)readAttributeEffectiveControlModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEffectiveControlMode(success, failure);
    });
}

- (void)readAttributeCapacityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCapacity(success, failure);
    });
}

- (void)subscribeAttributeCapacityWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCapacity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCapacityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCapacity(success);
        },
        true);
}

- (void)readAttributeSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSpeed(success, failure);
    });
}

- (void)readAttributeLifetimeEnergyConsumedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLifetimeEnergyConsumed(success, failure);
    });
}

- (void)readAttributeOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOperationMode(success, failure);
    });
}

- (void)writeAttributeOperationModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOperationMode(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeControlModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeControlMode(success, failure);
    });
}

- (void)writeAttributeControlModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeControlMode(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeAlarmMaskWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAlarmMask(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPRelativeHumidityMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)subscribeAttributeToleranceWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTolerance(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTolerance(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPScenes

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addScene:(uint16_t)groupId
            sceneId:(uint8_t)sceneId
     transitionTime:(uint16_t)transitionTime
          sceneName:(NSString *)sceneName
          clusterId:(uint32_t)clusterId
             length:(uint8_t)length
              value:(uint8_t)value
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::AddScene::Type request;
    request.groupId = groupId.unsignedShortValue;
    request.sceneId = sceneId.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedShortValue;
    request.sceneName = [self asCharSpan:sceneName];
    {
        using ListType = decltype(request.extensionFieldSets);
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (extensionFieldSets.count != 0) {
            auto * listHolder = new ListHolder<ListMemberType>(extensionFieldSets.count);
            if (listHolder == nullptr || listHolder->mList == nullptr) {
                // Now what?
                return;
            }
            listFreer.add(listHolder);
            for (size_t i = 0; i < extensionFieldSets.count; ++i) {
                if (![extensionFieldSets[i] isKindOfClass:[CHIPScenesClusterSceneExtensionFieldSet class]]) {
                    // Wrong kind of value, now what?
                    return;
                }
                auto element = (CHIPScenesClusterSceneExtensionFieldSet *) extensionFieldSets[i];
                listHolder->mList[i].clusterId = element.ClusterId.unsignedIntValue;
                listHolder->mList[i].length = element.Length.unsignedCharValue;
                listHolder->mList[i].value = element.Value.unsignedCharValue;
            }
            request.extensionFieldSets = ListType(listHolder->mList, extensionFieldSets.count);
        } else {
            request.extensionFieldSets = ListType();
        }
    }

    new CHIPScenesClusterAddSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterAddSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getSceneMembership:(uint16_t)groupId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::GetSceneMembership::Type request;
    request.groupId = groupId.unsignedShortValue;

    new CHIPScenesClusterGetSceneMembershipResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterGetSceneMembershipResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)recallScene:(uint16_t)groupId
            sceneId:(uint8_t)sceneId
     transitionTime:(uint16_t)transitionTime
    responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::RecallScene::Type request;
    request.groupId = groupId.unsignedShortValue;
    request.sceneId = sceneId.unsignedCharValue;
    request.transitionTime = transitionTime.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)removeAllScenes:(uint16_t)groupId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::RemoveAllScenes::Type request;
    request.groupId = groupId.unsignedShortValue;

    new CHIPScenesClusterRemoveAllScenesResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterRemoveAllScenesResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeScene:(uint16_t)groupId sceneId:(uint8_t)sceneId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::RemoveScene::Type request;
    request.groupId = groupId.unsignedShortValue;
    request.sceneId = sceneId.unsignedCharValue;

    new CHIPScenesClusterRemoveSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterRemoveSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)storeScene:(uint16_t)groupId sceneId:(uint8_t)sceneId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::StoreScene::Type request;
    request.groupId = groupId.unsignedShortValue;
    request.sceneId = sceneId.unsignedCharValue;

    new CHIPScenesClusterStoreSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterStoreSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)viewScene:(uint16_t)groupId sceneId:(uint8_t)sceneId responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Scenes::Commands::ViewScene::Type request;
    request.groupId = groupId.unsignedShortValue;
    request.sceneId = sceneId.unsignedCharValue;

    new CHIPScenesClusterViewSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterViewSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeSceneCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSceneCount(success, failure);
    });
}

- (void)readAttributeCurrentSceneWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentScene(success, failure);
    });
}

- (void)readAttributeCurrentGroupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentGroup(success, failure);
    });
}

- (void)readAttributeSceneValidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSceneValid(success, failure);
    });
}

- (void)readAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNameSupport(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPSoftwareDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetWatermarks:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    SoftwareDiagnostics::Commands::ResetWatermarks::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeThreadMetricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeThreadMetrics(success, failure);
        });
}

- (void)readAttributeCurrentHeapFreeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapFree(success, failure);
    });
}

- (void)readAttributeCurrentHeapUsedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapUsed(success, failure);
    });
}

- (void)readAttributeCurrentHeapHighWatermarkWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapHighWatermark(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPSwitch

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeNumberOfPositionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfPositions(success, failure);
    });
}

- (void)readAttributeCurrentPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPosition(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPosition(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPosition(success);
        },
        true);
}

- (void)readAttributeMultiPressMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMultiPressMax(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTvChannel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeChannel:(NSString *)match responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TvChannel::Commands::ChangeChannel::Type request;
    request.match = [self asCharSpan:match];

    new CHIPTvChannelClusterChangeChannelResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTvChannelClusterChangeChannelResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)changeChannelByNumber:(uint16_t)majorNumber
                  minorNumber:(uint16_t)minorNumber
              responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TvChannel::Commands::ChangeChannelByNumber::Type request;
    request.majorNumber = majorNumber.unsignedShortValue;
    request.minorNumber = minorNumber.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)skipChannel:(uint16_t)count responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TvChannel::Commands::SkipChannel::Type request;
    request.count = count.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeTvChannelListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTvChannelTvChannelListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTvChannelList(success, failure);
        });
}

- (void)readAttributeTvChannelLineupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTvChannelLineup(success, failure);
    });
}

- (void)readAttributeCurrentTvChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentTvChannel(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTargetNavigator

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)navigateTarget:(uint8_t)target data:(NSString *)data responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TargetNavigator::Commands::NavigateTarget::Type request;
    request.target = target.unsignedCharValue;
    request.data = [self asCharSpan:data];

    new CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTargetNavigatorClusterNavigateTargetResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeTargetNavigatorListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTargetNavigatorList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTemperatureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)subscribeAttributeToleranceWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTolerance(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTolerance(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTestCluster

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)test:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::Test::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)testAddArguments:(uint8_t)arg1 arg2:(uint8_t)arg2 responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestAddArguments::Type request;
    request.arg1 = arg1.unsignedCharValue;
    request.arg2 = arg2.unsignedCharValue;

    new CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestAddArgumentsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testEnumsRequest:(uint16_t)arg1 arg2:(uint8_t)arg2 responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestEnumsRequest::Type request;
    request.arg1 = static_cast<std::remove_reference_t<decltype(request.arg1)>>(arg1.unsignedShortValue);
    request.arg2 = static_cast<std::remove_reference_t<decltype(request.arg2)>>(arg2.unsignedCharValue);

    new CHIPTestClusterClusterTestEnumsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestEnumsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testListInt8UArgumentRequest:(uint8_t)arg1 responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestListInt8UArgumentRequest::Type request;
    {
        using ListType = decltype(request.arg1);
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (arg1.count != 0) {
            auto * listHolder = new ListHolder<ListMemberType>(arg1.count);
            if (listHolder == nullptr || listHolder->mList == nullptr) {
                // Now what?
                return;
            }
            listFreer.add(listHolder);
            for (size_t i = 0; i < arg1.count; ++i) {
                if (![arg1[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value, now what?
                    return;
                }
                auto element = (NSNumber *) arg1[i];
                listHolder->mList[i] = element.unsignedCharValue;
            }
            request.arg1 = ListType(listHolder->mList, arg1.count);
        } else {
            request.arg1 = ListType();
        }
    }

    new CHIPTestClusterClusterBooleanResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterBooleanResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testListInt8UReverseRequest:(uint8_t)arg1 responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestListInt8UReverseRequest::Type request;
    {
        using ListType = decltype(request.arg1);
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (arg1.count != 0) {
            auto * listHolder = new ListHolder<ListMemberType>(arg1.count);
            if (listHolder == nullptr || listHolder->mList == nullptr) {
                // Now what?
                return;
            }
            listFreer.add(listHolder);
            for (size_t i = 0; i < arg1.count; ++i) {
                if (![arg1[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value, now what?
                    return;
                }
                auto element = (NSNumber *) arg1[i];
                listHolder->mList[i] = element.unsignedCharValue;
            }
            request.arg1 = ListType(listHolder->mList, arg1.count);
        } else {
            request.arg1 = ListType();
        }
    }

    new CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestListInt8UReverseResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testListStructArgumentRequest:(uint8_t)a
                                    b:(bool)b
                                    c:(uint8_t)c
                                    d:(NSData *)d
                                    e:(NSString *)e
                                    f:(uint8_t)f
                      responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestListStructArgumentRequest::Type request;
    {
        using ListType = decltype(request.arg1);
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (arg1.count != 0) {
            auto * listHolder = new ListHolder<ListMemberType>(arg1.count);
            if (listHolder == nullptr || listHolder->mList == nullptr) {
                // Now what?
                return;
            }
            listFreer.add(listHolder);
            for (size_t i = 0; i < arg1.count; ++i) {
                if (![arg1[i] isKindOfClass:[CHIPTestClusterClusterSimpleStruct class]]) {
                    // Wrong kind of value, now what?
                    return;
                }
                auto element = (CHIPTestClusterClusterSimpleStruct *) arg1[i];
                listHolder->mList[i].a = element.A.unsignedCharValue;
                listHolder->mList[i].b = element.B.boolValue;
                listHolder->mList[i].c
                    = static_cast<std::remove_reference_t<decltype(listHolder->mList[i].c)>>(element.C.unsignedCharValue);
                listHolder->mList[i].d = [self asByteSpan:element.D];
                listHolder->mList[i].e = [self asCharSpan:element.E];
                listHolder->mList[i].f
                    = static_cast<std::remove_reference_t<decltype(listHolder->mList[i].f)>>(element.F.unsignedCharValue);
            }
            request.arg1 = ListType(listHolder->mList, arg1.count);
        } else {
            request.arg1 = ListType();
        }
    }

    new CHIPTestClusterClusterBooleanResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterBooleanResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testNotHandled:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestNotHandled::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)testNullableOptionalRequest:(uint8_t)arg1 responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestNullableOptionalRequest::Type request;
    if (arg1 != nil) {
        auto & definedValue = request.arg1.Emplace();
        if (arg1 == nil) {
            definedValue.SetNull();
        } else {
            auto & nonNullValue = definedValue.SetNonNull();
            nonNullValue = arg1.unsignedCharValue;
        }
    }

    new CHIPTestClusterClusterTestNullableOptionalResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestNullableOptionalResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testSpecific:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestSpecific::Type request;

    new CHIPTestClusterClusterTestSpecificResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestSpecificResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testStructArgumentRequest:(uint8_t)a
                                b:(bool)b
                                c:(uint8_t)c
                                d:(NSData *)d
                                e:(NSString *)e
                                f:(uint8_t)f
                  responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestStructArgumentRequest::Type request;
    request.arg1.a = arg1.A.unsignedCharValue;
    request.arg1.b = arg1.B.boolValue;
    request.arg1.c = static_cast<std::remove_reference_t<decltype(request.arg1.c)>>(arg1.C.unsignedCharValue);
    request.arg1.d = [self asByteSpan:arg1.D];
    request.arg1.e = [self asCharSpan:arg1.E];
    request.arg1.f = static_cast<std::remove_reference_t<decltype(request.arg1.f)>>(arg1.F.unsignedCharValue);

    new CHIPTestClusterClusterBooleanResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterBooleanResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testUnknownCommand:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestUnknownCommand::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBooleanWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBoolean(success, failure);
    });
}

- (void)writeAttributeBooleanWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBoolean(success, failure, value);
    });
}

- (void)readAttributeBitmap8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap8(success, failure);
    });
}

- (void)writeAttributeBitmap8WithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBitmap8(success, failure, value);
    });
}

- (void)readAttributeBitmap16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap16(success, failure);
    });
}

- (void)writeAttributeBitmap16WithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBitmap16(success, failure, value);
    });
}

- (void)readAttributeBitmap32WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap32(success, failure);
    });
}

- (void)writeAttributeBitmap32WithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBitmap32(success, failure, value);
    });
}

- (void)readAttributeBitmap64WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap64(success, failure);
    });
}

- (void)writeAttributeBitmap64WithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBitmap64(success, failure, value);
    });
}

- (void)readAttributeInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt8u(success, failure);
    });
}

- (void)writeAttributeInt8uWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt8u(success, failure, value);
    });
}

- (void)readAttributeInt16uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt16u(success, failure);
    });
}

- (void)writeAttributeInt16uWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt16u(success, failure, value);
    });
}

- (void)readAttributeInt32uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt32u(success, failure);
    });
}

- (void)writeAttributeInt32uWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt32u(success, failure, value);
    });
}

- (void)readAttributeInt64uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt64u(success, failure);
    });
}

- (void)writeAttributeInt64uWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt64u(success, failure, value);
    });
}

- (void)readAttributeInt8sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt8s(success, failure);
    });
}

- (void)writeAttributeInt8sWithValue:(int8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt8s(success, failure, value);
    });
}

- (void)readAttributeInt16sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt16s(success, failure);
    });
}

- (void)writeAttributeInt16sWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt16s(success, failure, value);
    });
}

- (void)readAttributeInt32sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt32s(success, failure);
    });
}

- (void)writeAttributeInt32sWithValue:(int32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt32s(success, failure, value);
    });
}

- (void)readAttributeInt64sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt64s(success, failure);
    });
}

- (void)writeAttributeInt64sWithValue:(int64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt64s(success, failure, value);
    });
}

- (void)readAttributeEnum8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnum8(success, failure);
    });
}

- (void)writeAttributeEnum8WithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEnum8(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeEnum16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnum16(success, failure);
    });
}

- (void)writeAttributeEnum16WithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEnum16(success, failure, static_cast<uint16_t>(value));
    });
}

- (void)readAttributeOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOctetString(success, failure);
    });
}

- (void)writeAttributeOctetStringWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOctetString(success, failure, [self asByteSpan:value]);
    });
}

- (void)readAttributeListInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListInt8uListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListInt8u(success, failure);
        });
}

- (void)readAttributeListOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListOctetStringListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListOctetString(success, failure);
        });
}

- (void)readAttributeListStructOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListStructOctetStringListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListStructOctetString(success, failure);
        });
}

- (void)readAttributeLongOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLongOctetString(success, failure);
    });
}

- (void)writeAttributeLongOctetStringWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLongOctetString(success, failure, [self asByteSpan:value]);
    });
}

- (void)readAttributeCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCharString(success, failure);
    });
}

- (void)writeAttributeCharStringWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCharString(success, failure, [self asCharSpan:value]);
    });
}

- (void)readAttributeLongCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLongCharString(success, failure);
    });
}

- (void)writeAttributeLongCharStringWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLongCharString(success, failure, [self asCharSpan:value]);
    });
}

- (void)readAttributeEpochUsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEpochUs(success, failure);
    });
}

- (void)writeAttributeEpochUsWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEpochUs(success, failure, value);
    });
}

- (void)readAttributeEpochSWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEpochS(success, failure);
    });
}

- (void)writeAttributeEpochSWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEpochS(success, failure, value);
    });
}

- (void)readAttributeVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorId(success, failure);
    });
}

- (void)writeAttributeVendorIdWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeVendorId(success, failure, static_cast<chip::VendorId>(value));
    });
}

- (void)readAttributeListNullablesAndOptionalsStructWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListNullablesAndOptionalsStructListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListNullablesAndOptionalsStruct(success, failure);
        });
}

- (void)readAttributeUnsupportedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUnsupported(success, failure);
    });
}

- (void)writeAttributeUnsupportedWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeUnsupported(success, failure, value);
    });
}

- (void)readAttributeNullableBooleanWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBoolean(success, failure);
    });
}

- (void)writeAttributeNullableBooleanWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableBoolean(success, failure, value);
    });
}

- (void)readAttributeNullableBitmap8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap8(success, failure);
    });
}

- (void)writeAttributeNullableBitmap8WithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableBitmap8(success, failure, value);
    });
}

- (void)readAttributeNullableBitmap16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap16(success, failure);
    });
}

- (void)writeAttributeNullableBitmap16WithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableBitmap16(success, failure, value);
    });
}

- (void)readAttributeNullableBitmap32WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap32(success, failure);
    });
}

- (void)writeAttributeNullableBitmap32WithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableBitmap32(success, failure, value);
    });
}

- (void)readAttributeNullableBitmap64WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap64(success, failure);
    });
}

- (void)writeAttributeNullableBitmap64WithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableBitmap64(success, failure, value);
    });
}

- (void)readAttributeNullableInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt8u(success, failure);
    });
}

- (void)writeAttributeNullableInt8uWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableInt8u(success, failure, value);
    });
}

- (void)readAttributeNullableInt16uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt16u(success, failure);
    });
}

- (void)writeAttributeNullableInt16uWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableInt16u(success, failure, value);
    });
}

- (void)readAttributeNullableInt32uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt32u(success, failure);
    });
}

- (void)writeAttributeNullableInt32uWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableInt32u(success, failure, value);
    });
}

- (void)readAttributeNullableInt64uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt64u(success, failure);
    });
}

- (void)writeAttributeNullableInt64uWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableInt64u(success, failure, value);
    });
}

- (void)readAttributeNullableInt8sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt8s(success, failure);
    });
}

- (void)writeAttributeNullableInt8sWithValue:(int8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableInt8s(success, failure, value);
    });
}

- (void)readAttributeNullableInt16sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt16s(success, failure);
    });
}

- (void)writeAttributeNullableInt16sWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableInt16s(success, failure, value);
    });
}

- (void)readAttributeNullableInt32sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt32s(success, failure);
    });
}

- (void)writeAttributeNullableInt32sWithValue:(int32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableInt32s(success, failure, value);
    });
}

- (void)readAttributeNullableInt64sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt64s(success, failure);
    });
}

- (void)writeAttributeNullableInt64sWithValue:(int64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableInt64s(success, failure, value);
    });
}

- (void)readAttributeNullableEnum8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableEnum8(success, failure);
    });
}

- (void)writeAttributeNullableEnum8WithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableEnum8(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeNullableEnum16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableEnum16(success, failure);
    });
}

- (void)writeAttributeNullableEnum16WithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableEnum16(success, failure, static_cast<uint16_t>(value));
    });
}

- (void)readAttributeNullableOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableOctetString(success, failure);
    });
}

- (void)writeAttributeNullableOctetStringWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableOctetString(success, failure, [self asByteSpan:value]);
    });
}

- (void)readAttributeNullableCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableCharString(success, failure);
    });
}

- (void)writeAttributeNullableCharStringWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNullableCharString(success, failure, [self asCharSpan:value]);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPThermostat

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)clearWeeklySchedule:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::ClearWeeklySchedule::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)getRelayStatusLog:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::GetRelayStatusLog::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)getWeeklySchedule:(uint8_t)daysToReturn modeToReturn:(uint8_t)modeToReturn responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::GetWeeklySchedule::Type request;
    request.daysToReturn = static_cast<std::remove_reference_t<decltype(request.daysToReturn)>>(daysToReturn.unsignedCharValue);
    request.modeToReturn = static_cast<std::remove_reference_t<decltype(request.modeToReturn)>>(modeToReturn.unsignedCharValue);

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)setWeeklySchedule:(uint8_t)numberOfTransitionsForSequence
     dayOfWeekForSequence:(uint8_t)dayOfWeekForSequence
          modeForSequence:(uint8_t)modeForSequence
                  payload:(uint8_t)payload
          responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::SetWeeklySchedule::Type request;
    request.numberOfTransitionsForSequence = numberOfTransitionsForSequence.unsignedCharValue;
    request.dayOfWeekForSequence
        = static_cast<std::remove_reference_t<decltype(request.dayOfWeekForSequence)>>(dayOfWeekForSequence.unsignedCharValue);
    request.modeForSequence
        = static_cast<std::remove_reference_t<decltype(request.modeForSequence)>>(modeForSequence.unsignedCharValue);
    {
        using ListType = decltype(request.payload);
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (payload.count != 0) {
            auto * listHolder = new ListHolder<ListMemberType>(payload.count);
            if (listHolder == nullptr || listHolder->mList == nullptr) {
                // Now what?
                return;
            }
            listFreer.add(listHolder);
            for (size_t i = 0; i < payload.count; ++i) {
                if (![payload[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value, now what?
                    return;
                }
                auto element = (NSNumber *) payload[i];
                listHolder->mList[i] = element.unsignedCharValue;
            }
            request.payload = ListType(listHolder->mList, payload.count);
        } else {
            request.payload = ListType();
        }
    }

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)setpointRaiseLower:(uint8_t)mode amount:(int8_t)amount responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    Thermostat::Commands::SetpointRaiseLower::Type request;
    request.mode = static_cast<std::remove_reference_t<decltype(request.mode)>>(mode.unsignedCharValue);
    request.amount = amount.charValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeLocalTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocalTemperature(success, failure);
    });
}

- (void)subscribeAttributeLocalTemperatureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLocalTemperature(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLocalTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLocalTemperature(success);
        },
        true);
}

- (void)readAttributeAbsMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMinHeatSetpointLimit(success, failure);
    });
}

- (void)readAttributeAbsMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMaxHeatSetpointLimit(success, failure);
    });
}

- (void)readAttributeAbsMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMinCoolSetpointLimit(success, failure);
    });
}

- (void)readAttributeAbsMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMaxCoolSetpointLimit(success, failure);
    });
}

- (void)readAttributeOccupiedCoolingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupiedCoolingSetpoint(success, failure);
    });
}

- (void)writeAttributeOccupiedCoolingSetpointWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOccupiedCoolingSetpoint(success, failure, value);
    });
}

- (void)readAttributeOccupiedHeatingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupiedHeatingSetpoint(success, failure);
    });
}

- (void)writeAttributeOccupiedHeatingSetpointWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOccupiedHeatingSetpoint(success, failure, value);
    });
}

- (void)readAttributeMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinHeatSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMinHeatSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMinHeatSetpointLimit(success, failure, value);
    });
}

- (void)readAttributeMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxHeatSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMaxHeatSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxHeatSetpointLimit(success, failure, value);
    });
}

- (void)readAttributeMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinCoolSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMinCoolSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMinCoolSetpointLimit(success, failure, value);
    });
}

- (void)readAttributeMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxCoolSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMaxCoolSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxCoolSetpointLimit(success, failure, value);
    });
}

- (void)readAttributeMinSetpointDeadBandWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinSetpointDeadBand(success, failure);
    });
}

- (void)writeAttributeMinSetpointDeadBandWithValue:(int8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMinSetpointDeadBand(success, failure, value);
    });
}

- (void)readAttributeControlSequenceOfOperationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeControlSequenceOfOperation(success, failure);
    });
}

- (void)writeAttributeControlSequenceOfOperationWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeControlSequenceOfOperation(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeSystemModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSystemMode(success, failure);
    });
}

- (void)writeAttributeSystemModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSystemMode(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeStartOfWeekWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartOfWeek(success, failure);
    });
}

- (void)readAttributeNumberOfWeeklyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfWeeklyTransitions(success, failure);
    });
}

- (void)readAttributeNumberOfDailyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfDailyTransitions(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPThermostatUserInterfaceConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeTemperatureDisplayModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTemperatureDisplayMode(success, failure);
    });
}

- (void)writeAttributeTemperatureDisplayModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTemperatureDisplayMode(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeKeypadLockoutWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeKeypadLockout(success, failure);
    });
}

- (void)writeAttributeKeypadLockoutWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeKeypadLockout(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeScheduleProgrammingVisibilityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeScheduleProgrammingVisibility(success, failure);
    });
}

- (void)writeAttributeScheduleProgrammingVisibilityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeScheduleProgrammingVisibility(success, failure, static_cast<uint8_t>(value));
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPThreadNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCounts:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    ThreadNetworkDiagnostics::Commands::ResetCounts::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannel(success, failure);
    });
}

- (void)readAttributeRoutingRoleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRoutingRole(success, failure);
    });
}

- (void)readAttributeNetworkNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNetworkName(success, failure);
    });
}

- (void)readAttributePanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePanId(success, failure);
    });
}

- (void)readAttributeExtendedPanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeExtendedPanId(success, failure);
    });
}

- (void)readAttributeMeshLocalPrefixWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeshLocalPrefix(success, failure);
    });
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)readAttributeNeighborTableListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeNeighborTableList(success, failure);
        });
}

- (void)readAttributeRouteTableListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeRouteTableList(success, failure);
        });
}

- (void)readAttributePartitionIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartitionId(success, failure);
    });
}

- (void)readAttributeWeightingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWeighting(success, failure);
    });
}

- (void)readAttributeDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDataVersion(success, failure);
    });
}

- (void)readAttributeStableDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStableDataVersion(success, failure);
    });
}

- (void)readAttributeLeaderRouterIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLeaderRouterId(success, failure);
    });
}

- (void)readAttributeDetachedRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDetachedRoleCount(success, failure);
    });
}

- (void)readAttributeChildRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChildRoleCount(success, failure);
    });
}

- (void)readAttributeRouterRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRouterRoleCount(success, failure);
    });
}

- (void)readAttributeLeaderRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLeaderRoleCount(success, failure);
    });
}

- (void)readAttributeAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAttachAttemptCount(success, failure);
    });
}

- (void)readAttributePartitionIdChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartitionIdChangeCount(success, failure);
    });
}

- (void)readAttributeBetterPartitionAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBetterPartitionAttachAttemptCount(success, failure);
    });
}

- (void)readAttributeParentChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeParentChangeCount(success, failure);
    });
}

- (void)readAttributeTxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxTotalCount(success, failure);
    });
}

- (void)readAttributeTxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxUnicastCount(success, failure);
    });
}

- (void)readAttributeTxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBroadcastCount(success, failure);
    });
}

- (void)readAttributeTxAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxAckRequestedCount(success, failure);
    });
}

- (void)readAttributeTxAckedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxAckedCount(success, failure);
    });
}

- (void)readAttributeTxNoAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxNoAckRequestedCount(success, failure);
    });
}

- (void)readAttributeTxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDataCount(success, failure);
    });
}

- (void)readAttributeTxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDataPollCount(success, failure);
    });
}

- (void)readAttributeTxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBeaconCount(success, failure);
    });
}

- (void)readAttributeTxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBeaconRequestCount(success, failure);
    });
}

- (void)readAttributeTxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxOtherCount(success, failure);
    });
}

- (void)readAttributeTxRetryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxRetryCount(success, failure);
    });
}

- (void)readAttributeTxDirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDirectMaxRetryExpiryCount(success, failure);
    });
}

- (void)readAttributeTxIndirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxIndirectMaxRetryExpiryCount(success, failure);
    });
}

- (void)readAttributeTxErrCcaCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrCcaCount(success, failure);
    });
}

- (void)readAttributeTxErrAbortCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrAbortCount(success, failure);
    });
}

- (void)readAttributeTxErrBusyChannelCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrBusyChannelCount(success, failure);
    });
}

- (void)readAttributeRxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxTotalCount(success, failure);
    });
}

- (void)readAttributeRxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxUnicastCount(success, failure);
    });
}

- (void)readAttributeRxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBroadcastCount(success, failure);
    });
}

- (void)readAttributeRxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDataCount(success, failure);
    });
}

- (void)readAttributeRxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDataPollCount(success, failure);
    });
}

- (void)readAttributeRxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBeaconCount(success, failure);
    });
}

- (void)readAttributeRxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBeaconRequestCount(success, failure);
    });
}

- (void)readAttributeRxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxOtherCount(success, failure);
    });
}

- (void)readAttributeRxAddressFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxAddressFilteredCount(success, failure);
    });
}

- (void)readAttributeRxDestAddrFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDestAddrFilteredCount(success, failure);
    });
}

- (void)readAttributeRxDuplicatedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDuplicatedCount(success, failure);
    });
}

- (void)readAttributeRxErrNoFrameCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrNoFrameCount(success, failure);
    });
}

- (void)readAttributeRxErrUnknownNeighborCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrUnknownNeighborCount(success, failure);
    });
}

- (void)readAttributeRxErrInvalidSrcAddrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrInvalidSrcAddrCount(success, failure);
    });
}

- (void)readAttributeRxErrSecCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrSecCount(success, failure);
    });
}

- (void)readAttributeRxErrFcsCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrFcsCount(success, failure);
    });
}

- (void)readAttributeRxErrOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrOtherCount(success, failure);
    });
}

- (void)readAttributeActiveTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActiveTimestamp(success, failure);
    });
}

- (void)readAttributePendingTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePendingTimestamp(success, failure);
    });
}

- (void)readAttributeDelayWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDelay(success, failure);
    });
}

- (void)readAttributeSecurityPolicyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSecurityPolicy(success, failure);
        });
}

- (void)readAttributeChannelMaskWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannelMask(success, failure);
    });
}

- (void)readAttributeOperationalDatasetComponentsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeOperationalDatasetComponents(success, failure);
        });
}

- (void)readAttributeActiveNetworkFaultsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveNetworkFaultsList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPWakeOnLan

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeWakeOnLanMacAddressWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWakeOnLanMacAddress(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPWiFiNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCounts:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WiFiNetworkDiagnostics::Commands::ResetCounts::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBssidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBssid(success, failure);
    });
}

- (void)readAttributeSecurityTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSecurityType(success, failure);
    });
}

- (void)readAttributeWiFiVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWiFiVersion(success, failure);
    });
}

- (void)readAttributeChannelNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannelNumber(success, failure);
    });
}

- (void)readAttributeRssiWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRssi(success, failure);
    });
}

- (void)readAttributeBeaconLostCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBeaconLostCount(success, failure);
    });
}

- (void)readAttributeBeaconRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBeaconRxCount(success, failure);
    });
}

- (void)readAttributePacketMulticastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketMulticastRxCount(success, failure);
    });
}

- (void)readAttributePacketMulticastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketMulticastTxCount(success, failure);
    });
}

- (void)readAttributePacketUnicastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketUnicastRxCount(success, failure);
    });
}

- (void)readAttributePacketUnicastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketUnicastTxCount(success, failure);
    });
}

- (void)readAttributeCurrentMaxRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMaxRate(success, failure);
    });
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPWindowCovering

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)downOrClose:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::DownOrClose::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToLiftPercentage:(uint8_t)liftPercentageValue
    liftPercent100thsValue:(uint16_t)liftPercent100thsValue
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToLiftPercentage::Type request;
    request.liftPercentageValue = liftPercentageValue.unsignedCharValue;
    request.liftPercent100thsValue = liftPercent100thsValue.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToLiftValue:(uint16_t)liftValue responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToLiftValue::Type request;
    request.liftValue = liftValue.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToTiltPercentage:(uint8_t)tiltPercentageValue
    tiltPercent100thsValue:(uint16_t)tiltPercent100thsValue
           responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToTiltPercentage::Type request;
    request.tiltPercentageValue = tiltPercentageValue.unsignedCharValue;
    request.tiltPercent100thsValue = tiltPercent100thsValue.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToTiltValue:(uint16_t)tiltValue responseHandler:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToTiltValue::Type request;
    request.tiltValue = tiltValue.unsignedShortValue;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopMotion:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::StopMotion::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)upOrOpen:(ResponseHandler)responseHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::UpOrOpen::Type request;

    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeType(success, failure);
    });
}

- (void)readAttributeCurrentPositionLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLift(success, failure);
    });
}

- (void)readAttributeCurrentPositionTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTilt(success, failure);
    });
}

- (void)readAttributeConfigStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeConfigStatus(success, failure);
    });
}

- (void)readAttributeCurrentPositionLiftPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLiftPercentage(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionLiftPercentageWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionLiftPercentage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionLiftPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionLiftPercentage(success);
        },
        true);
}

- (void)readAttributeCurrentPositionTiltPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTiltPercentage(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionTiltPercentageWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionTiltPercentage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionTiltPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionTiltPercentage(success);
        },
        true);
}

- (void)readAttributeOperationalStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOperationalStatus(success, failure);
    });
}

- (void)subscribeAttributeOperationalStatusWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOperationalStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOperationalStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOperationalStatus(success);
        },
        true);
}

- (void)readAttributeTargetPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTargetPositionLiftPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeTargetPositionLiftPercent100thsWithMinInterval:(uint16_t)minInterval
                                                             maxInterval:(uint16_t)maxInterval
                                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTargetPositionLiftPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTargetPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTargetPositionLiftPercent100ths(success);
        },
        true);
}

- (void)readAttributeTargetPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTargetPositionTiltPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeTargetPositionTiltPercent100thsWithMinInterval:(uint16_t)minInterval
                                                             maxInterval:(uint16_t)maxInterval
                                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTargetPositionTiltPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTargetPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTargetPositionTiltPercent100ths(success);
        },
        true);
}

- (void)readAttributeEndProductTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEndProductType(success, failure);
    });
}

- (void)readAttributeCurrentPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLiftPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionLiftPercent100thsWithMinInterval:(uint16_t)minInterval
                                                              maxInterval:(uint16_t)maxInterval
                                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionLiftPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionLiftPercent100ths(success);
        },
        true);
}

- (void)readAttributeCurrentPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTiltPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionTiltPercent100thsWithMinInterval:(uint16_t)minInterval
                                                              maxInterval:(uint16_t)maxInterval
                                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionTiltPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionTiltPercent100ths(success);
        },
        true);
}

- (void)readAttributeInstalledOpenLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledOpenLimitLift(success, failure);
    });
}

- (void)readAttributeInstalledClosedLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledClosedLimitLift(success, failure);
    });
}

- (void)readAttributeInstalledOpenLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledOpenLimitTilt(success, failure);
    });
}

- (void)readAttributeInstalledClosedLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledClosedLimitTilt(success, failure);
    });
}

- (void)readAttributeModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMode(success, failure);
    });
}

- (void)writeAttributeModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMode(success, failure, value);
    });
}

- (void)readAttributeSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSafetyStatus(success, failure);
    });
}

- (void)subscribeAttributeSafetyStatusWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSafetyStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSafetyStatus(success);
        },
        true);
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end
