/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import <Foundation/Foundation.h>

#import "CHIPCallbackBridge_internal.h"
#import "CHIPCluster_internal.h"
#import "CHIPClustersObjc_internal.h"
#import "CHIPCommandPayloadsObjc.h"
#import "CHIPDevice.h"
#import "CHIPDevice_Internal.h"
#import "CHIPListUtils_internal.h"
#import "CHIPStructsObjc.h"

#include <type_traits>

using chip::Callback::Callback;
using chip::Callback::Cancelable;
using namespace chip::app::Clusters;

@implementation CHIPAccountLogin

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)getSetupPINWithParams:(CHIPAccountLoginClusterGetSetupPINParams *)params
            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    AccountLogin::Commands::GetSetupPIN::Type request;
    request.tempAccountIdentifier = [self asCharSpan:params.tempAccountIdentifier];

    new CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPAccountLoginClusterGetSetupPINResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)loginWithParams:(CHIPAccountLoginClusterLoginParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    AccountLogin::Commands::Login::Type request;
    request.tempAccountIdentifier = [self asCharSpan:params.tempAccountIdentifier];
    request.setupPIN = [self asCharSpan:params.setupPIN];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPAdministratorCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)openBasicCommissioningWindowWithParams:(CHIPAdministratorCommissioningClusterOpenBasicCommissioningWindowParams *)params
                             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    AdministratorCommissioning::Commands::OpenBasicCommissioningWindow::Type request;
    request.commissioningTimeout = params.commissioningTimeout.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)openCommissioningWindowWithParams:(CHIPAdministratorCommissioningClusterOpenCommissioningWindowParams *)params
                        completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    AdministratorCommissioning::Commands::OpenCommissioningWindow::Type request;
    request.commissioningTimeout = params.commissioningTimeout.unsignedShortValue;
    request.PAKEVerifier = [self asByteSpan:params.pakeVerifier];
    request.discriminator = params.discriminator.unsignedShortValue;
    request.iterations = params.iterations.unsignedIntValue;
    request.salt = [self asByteSpan:params.salt];
    request.passcodeID = params.passcodeID.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)revokeCommissioningWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    AdministratorCommissioning::Commands::RevokeCommissioning::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPApplicationBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeStatusWithParams:(CHIPApplicationBasicClusterChangeStatusParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ApplicationBasic::Commands::ChangeStatus::Type request;
    request.status = static_cast<std::remove_reference_t<decltype(request.status)>>(params.status.unsignedCharValue);

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)subscribeAttributeVendorNameWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeVendorName(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeVendorName(success);
        },
        true);
}

- (void)readAttributeVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorId(success, failure);
    });
}

- (void)subscribeAttributeVendorIdWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeVendorId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeVendorId(success);
        },
        true);
}

- (void)readAttributeApplicationNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationName(success, failure);
    });
}

- (void)subscribeAttributeApplicationNameWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeApplicationName(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeApplicationNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeApplicationName(success);
        },
        true);
}

- (void)readAttributeProductIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductId(success, failure);
    });
}

- (void)subscribeAttributeProductIdWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeProductId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeProductIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeProductId(success);
        },
        true);
}

- (void)readAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationId(success, failure);
    });
}

- (void)subscribeAttributeApplicationIdWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeApplicationId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeApplicationId(success);
        },
        true);
}

- (void)readAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCatalogVendorId(success, failure);
    });
}

- (void)subscribeAttributeCatalogVendorIdWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCatalogVendorId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCatalogVendorId(success);
        },
        true);
}

- (void)readAttributeApplicationStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationStatus(success, failure);
    });
}

- (void)subscribeAttributeApplicationStatusWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeApplicationStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeApplicationStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeApplicationStatus(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPApplicationLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)launchAppWithParams:(CHIPApplicationLauncherClusterLaunchAppParams *)params
          completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ApplicationLauncher::Commands::LaunchApp::Type request;
    request.data = [self asCharSpan:params.data];
    request.catalogVendorId = params.catalogVendorId.unsignedShortValue;
    request.applicationId = [self asCharSpan:params.applicationId];

    new CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPApplicationLauncherClusterLaunchAppResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeApplicationLauncherListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeApplicationLauncherList(success, failure);
        });
}

- (void)readAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCatalogVendorId(success, failure);
    });
}

- (void)subscribeAttributeCatalogVendorIdWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCatalogVendorId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCatalogVendorId(success);
        },
        true);
}

- (void)readAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationId(success, failure);
    });
}

- (void)subscribeAttributeApplicationIdWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeApplicationId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeApplicationId(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPAudioOutput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)renameOutputWithParams:(CHIPAudioOutputClusterRenameOutputParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    AudioOutput::Commands::RenameOutput::Type request;
    request.index = params.index.unsignedCharValue;
    request.name = [self asCharSpan:params.name];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)selectOutputWithParams:(CHIPAudioOutputClusterSelectOutputParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    AudioOutput::Commands::SelectOutput::Type request;
    request.index = params.index.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeAudioOutputListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPAudioOutputAudioOutputListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeAudioOutputList(success, failure);
        });
}

- (void)readAttributeCurrentAudioOutputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentAudioOutput(success, failure);
    });
}

- (void)subscribeAttributeCurrentAudioOutputWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentAudioOutput(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentAudioOutputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentAudioOutput(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPBarrierControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)barrierControlGoToPercentWithParams:(CHIPBarrierControlClusterBarrierControlGoToPercentParams *)params
                          completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BarrierControl::Commands::BarrierControlGoToPercent::Type request;
    request.percentOpen = params.percentOpen.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)barrierControlStopWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BarrierControl::Commands::BarrierControlStop::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBarrierMovingStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierMovingState(success, failure);
    });
}

- (void)subscribeAttributeBarrierMovingStateWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBarrierMovingState(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBarrierMovingStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBarrierMovingState(success);
        },
        true);
}

- (void)readAttributeBarrierSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierSafetyStatus(success, failure);
    });
}

- (void)subscribeAttributeBarrierSafetyStatusWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBarrierSafetyStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBarrierSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBarrierSafetyStatus(success);
        },
        true);
}

- (void)readAttributeBarrierCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierCapabilities(success, failure);
    });
}

- (void)subscribeAttributeBarrierCapabilitiesWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBarrierCapabilities(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBarrierCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBarrierCapabilities(success);
        },
        true);
}

- (void)readAttributeBarrierPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierPosition(success, failure);
    });
}

- (void)subscribeAttributeBarrierPositionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBarrierPosition(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBarrierPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBarrierPosition(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)mfgSpecificPingWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Basic::Commands::MfgSpecificPing::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeInteractionModelVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInteractionModelVersion(success, failure);
    });
}

- (void)subscribeAttributeInteractionModelVersionWithMinInterval:(uint16_t)minInterval
                                                     maxInterval:(uint16_t)maxInterval
                                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInteractionModelVersion(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInteractionModelVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInteractionModelVersion(success);
        },
        true);
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)subscribeAttributeVendorNameWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeVendorName(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeVendorName(success);
        },
        true);
}

- (void)readAttributeVendorIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorID(success, failure);
    });
}

- (void)subscribeAttributeVendorIDWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeVendorID(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeVendorIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeVendorID(success);
        },
        true);
}

- (void)readAttributeProductNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductName(success, failure);
    });
}

- (void)subscribeAttributeProductNameWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeProductName(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeProductNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeProductName(success);
        },
        true);
}

- (void)readAttributeProductIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductID(success, failure);
    });
}

- (void)subscribeAttributeProductIDWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeProductID(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeProductIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeProductID(success);
        },
        true);
}

- (void)readAttributeNodeLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNodeLabel(success, failure);
    });
}

- (void)writeAttributeNodeLabelWithValue:(NSString * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Basic::Attributes::NodeLabel::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asCharSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNodeLabelWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNodeLabel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNodeLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNodeLabel(success);
        },
        true);
}

- (void)readAttributeLocationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocation(success, failure);
    });
}

- (void)writeAttributeLocationWithValue:(NSString * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Basic::Attributes::Location::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asCharSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeLocationWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLocation(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLocationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLocation(success);
        },
        true);
}

- (void)readAttributeHardwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersion(success, failure);
    });
}

- (void)subscribeAttributeHardwareVersionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeHardwareVersion(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeHardwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeHardwareVersion(success);
        },
        true);
}

- (void)readAttributeHardwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersionString(success, failure);
    });
}

- (void)subscribeAttributeHardwareVersionStringWithMinInterval:(uint16_t)minInterval
                                                   maxInterval:(uint16_t)maxInterval
                                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeHardwareVersionString(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeHardwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeHardwareVersionString(success);
        },
        true);
}

- (void)readAttributeSoftwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersion(success, failure);
    });
}

- (void)subscribeAttributeSoftwareVersionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSoftwareVersion(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSoftwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSoftwareVersion(success);
        },
        true);
}

- (void)readAttributeSoftwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersionString(success, failure);
    });
}

- (void)subscribeAttributeSoftwareVersionStringWithMinInterval:(uint16_t)minInterval
                                                   maxInterval:(uint16_t)maxInterval
                                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSoftwareVersionString(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSoftwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSoftwareVersionString(success);
        },
        true);
}

- (void)readAttributeManufacturingDateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeManufacturingDate(success, failure);
    });
}

- (void)subscribeAttributeManufacturingDateWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeManufacturingDate(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeManufacturingDateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeManufacturingDate(success);
        },
        true);
}

- (void)readAttributePartNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartNumber(success, failure);
    });
}

- (void)subscribeAttributePartNumberWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePartNumber(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePartNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePartNumber(success);
        },
        true);
}

- (void)readAttributeProductURLWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductURL(success, failure);
    });
}

- (void)subscribeAttributeProductURLWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeProductURL(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeProductURLWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeProductURL(success);
        },
        true);
}

- (void)readAttributeProductLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductLabel(success, failure);
    });
}

- (void)subscribeAttributeProductLabelWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeProductLabel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeProductLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeProductLabel(success);
        },
        true);
}

- (void)readAttributeSerialNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSerialNumber(success, failure);
    });
}

- (void)subscribeAttributeSerialNumberWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSerialNumber(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSerialNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSerialNumber(success);
        },
        true);
}

- (void)readAttributeLocalConfigDisabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocalConfigDisabled(success, failure);
    });
}

- (void)writeAttributeLocalConfigDisabledWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Basic::Attributes::LocalConfigDisabled::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeLocalConfigDisabledWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLocalConfigDisabled(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLocalConfigDisabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLocalConfigDisabled(success);
        },
        true);
}

- (void)readAttributeReachableWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeReachable(success, failure);
    });
}

- (void)subscribeAttributeReachableWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeReachable(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeReachableWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeReachable(success);
        },
        true);
}

- (void)readAttributeUniqueIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUniqueID(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPBinaryInputBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeOutOfServiceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOutOfService(success, failure);
    });
}

- (void)writeAttributeOutOfServiceWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = BinaryInputBasic::Attributes::OutOfService::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOutOfServiceWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOutOfService(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOutOfServiceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOutOfService(success);
        },
        true);
}

- (void)readAttributePresentValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePresentValue(success, failure);
    });
}

- (void)writeAttributePresentValueWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = BinaryInputBasic::Attributes::PresentValue::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributePresentValueWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePresentValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePresentValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePresentValue(success);
        },
        true);
}

- (void)readAttributeStatusFlagsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStatusFlags(success, failure);
    });
}

- (void)subscribeAttributeStatusFlagsWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStatusFlags(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStatusFlagsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStatusFlags(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPBinding

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)bindWithParams:(CHIPBindingClusterBindParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Binding::Commands::Bind::Type request;
    request.nodeId = params.nodeId.unsignedLongLongValue;
    request.groupId = params.groupId.unsignedShortValue;
    request.endpointId = params.endpointId.unsignedShortValue;
    request.clusterId = params.clusterId.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)unbindWithParams:(CHIPBindingClusterUnbindParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Binding::Commands::Unbind::Type request;
    request.nodeId = params.nodeId.unsignedLongLongValue;
    request.groupId = params.groupId.unsignedShortValue;
    request.endpointId = params.endpointId.unsignedShortValue;
    request.clusterId = params.clusterId.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPBooleanState

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeStateValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStateValue(success, failure);
    });
}

- (void)subscribeAttributeStateValueWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStateValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStateValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStateValue(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPBridgedActions

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)disableActionWithParams:(CHIPBridgedActionsClusterDisableActionParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::DisableAction::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)disableActionWithDurationWithParams:(CHIPBridgedActionsClusterDisableActionWithDurationParams *)params
                          completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::DisableActionWithDuration::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }
    request.duration = params.duration.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enableActionWithParams:(CHIPBridgedActionsClusterEnableActionParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::EnableAction::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enableActionWithDurationWithParams:(CHIPBridgedActionsClusterEnableActionWithDurationParams *)params
                         completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::EnableActionWithDuration::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }
    request.duration = params.duration.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)instantActionWithParams:(CHIPBridgedActionsClusterInstantActionParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::InstantAction::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)instantActionWithTransitionWithParams:(CHIPBridgedActionsClusterInstantActionWithTransitionParams *)params
                            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::InstantActionWithTransition::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }
    request.transitionTime = params.transitionTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)pauseActionWithParams:(CHIPBridgedActionsClusterPauseActionParams *)params
            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::PauseAction::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)pauseActionWithDurationWithParams:(CHIPBridgedActionsClusterPauseActionWithDurationParams *)params
                        completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::PauseActionWithDuration::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }
    request.duration = params.duration.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)resumeActionWithParams:(CHIPBridgedActionsClusterResumeActionParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::ResumeAction::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)startActionWithParams:(CHIPBridgedActionsClusterStartActionParams *)params
            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::StartAction::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)startActionWithDurationWithParams:(CHIPBridgedActionsClusterStartActionWithDurationParams *)params
                        completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::StartActionWithDuration::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }
    request.duration = params.duration.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopActionWithParams:(CHIPBridgedActionsClusterStopActionParams *)params
           completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    BridgedActions::Commands::StopAction::Type request;
    request.actionID = params.actionID.unsignedShortValue;
    if (params.invokeID != nil) {
        auto & definedValue_0 = request.invokeID.Emplace();
        definedValue_0 = params.invokeID.unsignedIntValue;
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeActionListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBridgedActionsActionListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActionList(success, failure);
        });
}

- (void)readAttributeEndpointListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBridgedActionsEndpointListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeEndpointList(success, failure);
        });
}

- (void)readAttributeSetupUrlWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSetupUrl(success, failure);
    });
}

- (void)subscribeAttributeSetupUrlWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSetupUrl(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSetupUrlWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSetupUrl(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPBridgedDeviceBasicInformation

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPColorControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)colorLoopSetWithParams:(CHIPColorControlClusterColorLoopSetParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::ColorLoopSet::Type request;
    request.updateFlags = static_cast<std::remove_reference_t<decltype(request.updateFlags)>>(params.updateFlags.unsignedCharValue);
    request.action = static_cast<std::remove_reference_t<decltype(request.action)>>(params.action.unsignedCharValue);
    request.direction = static_cast<std::remove_reference_t<decltype(request.direction)>>(params.direction.unsignedCharValue);
    request.time = params.time.unsignedShortValue;
    request.startHue = params.startHue.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedMoveHueWithParams:(CHIPColorControlClusterEnhancedMoveHueParams *)params
                completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedMoveHue::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(params.moveMode.unsignedCharValue);
    request.rate = params.rate.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedMoveToHueWithParams:(CHIPColorControlClusterEnhancedMoveToHueParams *)params
                  completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedMoveToHue::Type request;
    request.enhancedHue = params.enhancedHue.unsignedShortValue;
    request.direction = static_cast<std::remove_reference_t<decltype(request.direction)>>(params.direction.unsignedCharValue);
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedMoveToHueAndSaturationWithParams:(CHIPColorControlClusterEnhancedMoveToHueAndSaturationParams *)params
                               completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedMoveToHueAndSaturation::Type request;
    request.enhancedHue = params.enhancedHue.unsignedShortValue;
    request.saturation = params.saturation.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)enhancedStepHueWithParams:(CHIPColorControlClusterEnhancedStepHueParams *)params
                completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::EnhancedStepHue::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(params.stepMode.unsignedCharValue);
    request.stepSize = params.stepSize.unsignedShortValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveColorWithParams:(CHIPColorControlClusterMoveColorParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveColor::Type request;
    request.rateX = params.rateX.shortValue;
    request.rateY = params.rateY.shortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveColorTemperatureWithParams:(CHIPColorControlClusterMoveColorTemperatureParams *)params
                     completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveColorTemperature::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(params.moveMode.unsignedCharValue);
    request.rate = params.rate.unsignedShortValue;
    request.colorTemperatureMinimum = params.colorTemperatureMinimum.unsignedShortValue;
    request.colorTemperatureMaximum = params.colorTemperatureMaximum.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveHueWithParams:(CHIPColorControlClusterMoveHueParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveHue::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(params.moveMode.unsignedCharValue);
    request.rate = params.rate.unsignedCharValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveSaturationWithParams:(CHIPColorControlClusterMoveSaturationParams *)params
               completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveSaturation::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(params.moveMode.unsignedCharValue);
    request.rate = params.rate.unsignedCharValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToColorWithParams:(CHIPColorControlClusterMoveToColorParams *)params
            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToColor::Type request;
    request.colorX = params.colorX.unsignedShortValue;
    request.colorY = params.colorY.unsignedShortValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToColorTemperatureWithParams:(CHIPColorControlClusterMoveToColorTemperatureParams *)params
                       completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToColorTemperature::Type request;
    request.colorTemperature = params.colorTemperature.unsignedShortValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToHueWithParams:(CHIPColorControlClusterMoveToHueParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToHue::Type request;
    request.hue = params.hue.unsignedCharValue;
    request.direction = static_cast<std::remove_reference_t<decltype(request.direction)>>(params.direction.unsignedCharValue);
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToHueAndSaturationWithParams:(CHIPColorControlClusterMoveToHueAndSaturationParams *)params
                       completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToHueAndSaturation::Type request;
    request.hue = params.hue.unsignedCharValue;
    request.saturation = params.saturation.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToSaturationWithParams:(CHIPColorControlClusterMoveToSaturationParams *)params
                 completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::MoveToSaturation::Type request;
    request.saturation = params.saturation.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepColorWithParams:(CHIPColorControlClusterStepColorParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepColor::Type request;
    request.stepX = params.stepX.shortValue;
    request.stepY = params.stepY.shortValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepColorTemperatureWithParams:(CHIPColorControlClusterStepColorTemperatureParams *)params
                     completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepColorTemperature::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(params.stepMode.unsignedCharValue);
    request.stepSize = params.stepSize.unsignedShortValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.colorTemperatureMinimum = params.colorTemperatureMinimum.unsignedShortValue;
    request.colorTemperatureMaximum = params.colorTemperatureMaximum.unsignedShortValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepHueWithParams:(CHIPColorControlClusterStepHueParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepHue::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(params.stepMode.unsignedCharValue);
    request.stepSize = params.stepSize.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedCharValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepSaturationWithParams:(CHIPColorControlClusterStepSaturationParams *)params
               completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StepSaturation::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(params.stepMode.unsignedCharValue);
    request.stepSize = params.stepSize.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedCharValue;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopMoveStepWithParams:(CHIPColorControlClusterStopMoveStepParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ColorControl::Commands::StopMoveStep::Type request;
    request.optionsMask = params.optionsMask.unsignedCharValue;
    request.optionsOverride = params.optionsOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHue(success, failure);
    });
}

- (void)subscribeAttributeCurrentHueWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentHue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentHue(success);
        },
        true);
}

- (void)readAttributeCurrentSaturationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentSaturation(success, failure);
    });
}

- (void)subscribeAttributeCurrentSaturationWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentSaturation(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentSaturationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentSaturation(success);
        },
        true);
}

- (void)readAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRemainingTime(success, failure);
    });
}

- (void)subscribeAttributeRemainingTimeWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRemainingTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRemainingTime(success);
        },
        true);
}

- (void)readAttributeCurrentXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentX(success, failure);
    });
}

- (void)subscribeAttributeCurrentXWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentX(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentX(success);
        },
        true);
}

- (void)readAttributeCurrentYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentY(success, failure);
    });
}

- (void)subscribeAttributeCurrentYWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentY(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentY(success);
        },
        true);
}

- (void)readAttributeDriftCompensationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDriftCompensation(success, failure);
    });
}

- (void)subscribeAttributeDriftCompensationWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeDriftCompensation(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeDriftCompensationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeDriftCompensation(success);
        },
        true);
}

- (void)readAttributeCompensationTextWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCompensationText(success, failure);
    });
}

- (void)subscribeAttributeCompensationTextWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCompensationText(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCompensationTextWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCompensationText(success);
        },
        true);
}

- (void)readAttributeColorTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTemperature(success, failure);
    });
}

- (void)subscribeAttributeColorTemperatureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorTemperature(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorTemperature(success);
        },
        true);
}

- (void)readAttributeColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorMode(success, failure);
    });
}

- (void)subscribeAttributeColorModeWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorMode(success);
        },
        true);
}

- (void)readAttributeColorControlOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorControlOptions(success, failure);
    });
}

- (void)writeAttributeColorControlOptionsWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorControlOptions::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorControlOptionsWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorControlOptions(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorControlOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorControlOptions(success);
        },
        true);
}

- (void)readAttributeNumberOfPrimariesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfPrimaries(success, failure);
    });
}

- (void)subscribeAttributeNumberOfPrimariesWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNumberOfPrimaries(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNumberOfPrimariesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNumberOfPrimaries(success);
        },
        true);
}

- (void)readAttributePrimary1XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1X(success, failure);
    });
}

- (void)subscribeAttributePrimary1XWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary1X(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary1XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary1X(success);
        },
        true);
}

- (void)readAttributePrimary1YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1Y(success, failure);
    });
}

- (void)subscribeAttributePrimary1YWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary1Y(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary1YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary1Y(success);
        },
        true);
}

- (void)readAttributePrimary1IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1Intensity(success, failure);
    });
}

- (void)subscribeAttributePrimary1IntensityWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary1Intensity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary1IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary1Intensity(success);
        },
        true);
}

- (void)readAttributePrimary2XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2X(success, failure);
    });
}

- (void)subscribeAttributePrimary2XWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary2X(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary2XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary2X(success);
        },
        true);
}

- (void)readAttributePrimary2YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2Y(success, failure);
    });
}

- (void)subscribeAttributePrimary2YWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary2Y(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary2YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary2Y(success);
        },
        true);
}

- (void)readAttributePrimary2IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2Intensity(success, failure);
    });
}

- (void)subscribeAttributePrimary2IntensityWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary2Intensity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary2IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary2Intensity(success);
        },
        true);
}

- (void)readAttributePrimary3XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3X(success, failure);
    });
}

- (void)subscribeAttributePrimary3XWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary3X(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary3XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary3X(success);
        },
        true);
}

- (void)readAttributePrimary3YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3Y(success, failure);
    });
}

- (void)subscribeAttributePrimary3YWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary3Y(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary3YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary3Y(success);
        },
        true);
}

- (void)readAttributePrimary3IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3Intensity(success, failure);
    });
}

- (void)subscribeAttributePrimary3IntensityWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary3Intensity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary3IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary3Intensity(success);
        },
        true);
}

- (void)readAttributePrimary4XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4X(success, failure);
    });
}

- (void)subscribeAttributePrimary4XWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary4X(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary4XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary4X(success);
        },
        true);
}

- (void)readAttributePrimary4YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4Y(success, failure);
    });
}

- (void)subscribeAttributePrimary4YWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary4Y(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary4YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary4Y(success);
        },
        true);
}

- (void)readAttributePrimary4IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4Intensity(success, failure);
    });
}

- (void)subscribeAttributePrimary4IntensityWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary4Intensity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary4IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary4Intensity(success);
        },
        true);
}

- (void)readAttributePrimary5XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5X(success, failure);
    });
}

- (void)subscribeAttributePrimary5XWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary5X(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary5XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary5X(success);
        },
        true);
}

- (void)readAttributePrimary5YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5Y(success, failure);
    });
}

- (void)subscribeAttributePrimary5YWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary5Y(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary5YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary5Y(success);
        },
        true);
}

- (void)readAttributePrimary5IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5Intensity(success, failure);
    });
}

- (void)subscribeAttributePrimary5IntensityWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary5Intensity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary5IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary5Intensity(success);
        },
        true);
}

- (void)readAttributePrimary6XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6X(success, failure);
    });
}

- (void)subscribeAttributePrimary6XWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary6X(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary6XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary6X(success);
        },
        true);
}

- (void)readAttributePrimary6YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6Y(success, failure);
    });
}

- (void)subscribeAttributePrimary6YWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary6Y(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary6YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary6Y(success);
        },
        true);
}

- (void)readAttributePrimary6IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6Intensity(success, failure);
    });
}

- (void)subscribeAttributePrimary6IntensityWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePrimary6Intensity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePrimary6IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePrimary6Intensity(success);
        },
        true);
}

- (void)readAttributeWhitePointXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWhitePointX(success, failure);
    });
}

- (void)writeAttributeWhitePointXWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::WhitePointX::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeWhitePointXWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeWhitePointX(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeWhitePointXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeWhitePointX(success);
        },
        true);
}

- (void)readAttributeWhitePointYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWhitePointY(success, failure);
    });
}

- (void)writeAttributeWhitePointYWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::WhitePointY::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeWhitePointYWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeWhitePointY(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeWhitePointYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeWhitePointY(success);
        },
        true);
}

- (void)readAttributeColorPointRXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRX(success, failure);
    });
}

- (void)writeAttributeColorPointRXWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointRX::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorPointRXWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorPointRX(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorPointRXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorPointRX(success);
        },
        true);
}

- (void)readAttributeColorPointRYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRY(success, failure);
    });
}

- (void)writeAttributeColorPointRYWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointRY::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorPointRYWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorPointRY(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorPointRYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorPointRY(success);
        },
        true);
}

- (void)readAttributeColorPointRIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointRIntensityWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointRIntensity::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorPointRIntensityWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorPointRIntensity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorPointRIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorPointRIntensity(success);
        },
        true);
}

- (void)readAttributeColorPointGXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGX(success, failure);
    });
}

- (void)writeAttributeColorPointGXWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointGX::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorPointGXWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorPointGX(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorPointGXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorPointGX(success);
        },
        true);
}

- (void)readAttributeColorPointGYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGY(success, failure);
    });
}

- (void)writeAttributeColorPointGYWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointGY::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorPointGYWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorPointGY(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorPointGYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorPointGY(success);
        },
        true);
}

- (void)readAttributeColorPointGIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointGIntensityWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointGIntensity::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorPointGIntensityWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorPointGIntensity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorPointGIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorPointGIntensity(success);
        },
        true);
}

- (void)readAttributeColorPointBXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBX(success, failure);
    });
}

- (void)writeAttributeColorPointBXWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointBX::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorPointBXWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorPointBX(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorPointBXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorPointBX(success);
        },
        true);
}

- (void)readAttributeColorPointBYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBY(success, failure);
    });
}

- (void)writeAttributeColorPointBYWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointBY::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorPointBYWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorPointBY(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorPointBYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorPointBY(success);
        },
        true);
}

- (void)readAttributeColorPointBIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointBIntensityWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::ColorPointBIntensity::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeColorPointBIntensityWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorPointBIntensity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorPointBIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorPointBIntensity(success);
        },
        true);
}

- (void)readAttributeEnhancedCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnhancedCurrentHue(success, failure);
    });
}

- (void)subscribeAttributeEnhancedCurrentHueWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeEnhancedCurrentHue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeEnhancedCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeEnhancedCurrentHue(success);
        },
        true);
}

- (void)readAttributeEnhancedColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnhancedColorMode(success, failure);
    });
}

- (void)subscribeAttributeEnhancedColorModeWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeEnhancedColorMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeEnhancedColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeEnhancedColorMode(success);
        },
        true);
}

- (void)readAttributeColorLoopActiveWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopActive(success, failure);
    });
}

- (void)subscribeAttributeColorLoopActiveWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorLoopActive(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorLoopActiveWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorLoopActive(success);
        },
        true);
}

- (void)readAttributeColorLoopDirectionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopDirection(success, failure);
    });
}

- (void)subscribeAttributeColorLoopDirectionWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorLoopDirection(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorLoopDirectionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorLoopDirection(success);
        },
        true);
}

- (void)readAttributeColorLoopTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopTime(success, failure);
    });
}

- (void)subscribeAttributeColorLoopTimeWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorLoopTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorLoopTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorLoopTime(success);
        },
        true);
}

- (void)readAttributeColorLoopStartEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopStartEnhancedHue(success, failure);
    });
}

- (void)subscribeAttributeColorLoopStartEnhancedHueWithMinInterval:(uint16_t)minInterval
                                                       maxInterval:(uint16_t)maxInterval
                                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorLoopStartEnhancedHue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorLoopStartEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorLoopStartEnhancedHue(success);
        },
        true);
}

- (void)readAttributeColorLoopStoredEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopStoredEnhancedHue(success, failure);
    });
}

- (void)subscribeAttributeColorLoopStoredEnhancedHueWithMinInterval:(uint16_t)minInterval
                                                        maxInterval:(uint16_t)maxInterval
                                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorLoopStoredEnhancedHue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorLoopStoredEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorLoopStoredEnhancedHue(success);
        },
        true);
}

- (void)readAttributeColorCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorCapabilities(success, failure);
    });
}

- (void)subscribeAttributeColorCapabilitiesWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorCapabilities(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorCapabilities(success);
        },
        true);
}

- (void)readAttributeColorTempPhysicalMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTempPhysicalMin(success, failure);
    });
}

- (void)subscribeAttributeColorTempPhysicalMinWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorTempPhysicalMin(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorTempPhysicalMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorTempPhysicalMin(success);
        },
        true);
}

- (void)readAttributeColorTempPhysicalMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTempPhysicalMax(success, failure);
    });
}

- (void)subscribeAttributeColorTempPhysicalMaxWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorTempPhysicalMax(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorTempPhysicalMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorTempPhysicalMax(success);
        },
        true);
}

- (void)readAttributeCoupleColorTempToLevelMinMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCoupleColorTempToLevelMinMireds(success, failure);
    });
}

- (void)subscribeAttributeCoupleColorTempToLevelMinMiredsWithMinInterval:(uint16_t)minInterval
                                                             maxInterval:(uint16_t)maxInterval
                                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCoupleColorTempToLevelMinMireds(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCoupleColorTempToLevelMinMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCoupleColorTempToLevelMinMireds(success);
        },
        true);
}

- (void)readAttributeStartUpColorTemperatureMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpColorTemperatureMireds(success, failure);
    });
}

- (void)writeAttributeStartUpColorTemperatureMiredsWithValue:(NSNumber * _Nonnull)value
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ColorControl::Attributes::StartUpColorTemperatureMireds::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeStartUpColorTemperatureMiredsWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStartUpColorTemperatureMireds(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStartUpColorTemperatureMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStartUpColorTemperatureMireds(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPContentLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)launchContentWithParams:(CHIPContentLauncherClusterLaunchContentParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ContentLauncher::Commands::LaunchContent::Type request;
    request.autoPlay = params.autoPlay.boolValue;
    request.data = [self asCharSpan:params.data];

    new CHIPContentLauncherClusterLaunchContentResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPContentLauncherClusterLaunchContentResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)launchURLWithParams:(CHIPContentLauncherClusterLaunchURLParams *)params
          completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ContentLauncher::Commands::LaunchURL::Type request;
    request.contentURL = [self asCharSpan:params.contentURL];
    request.displayString = [self asCharSpan:params.displayString];

    new CHIPContentLauncherClusterLaunchURLResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPContentLauncherClusterLaunchURLResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeAcceptsHeaderListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeAcceptsHeaderList(success, failure);
        });
}

- (void)readAttributeSupportedStreamingTypesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSupportedStreamingTypes(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPDescriptor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeDeviceListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorDeviceListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeDeviceList(success, failure);
        });
}

- (void)readAttributeServerListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorServerListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeServerList(success, failure);
        });
}

- (void)readAttributeClientListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorClientListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeClientList(success, failure);
        });
}

- (void)readAttributePartsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorPartsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributePartsList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPDiagnosticLogs

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)retrieveLogsRequestWithParams:(CHIPDiagnosticLogsClusterRetrieveLogsRequestParams *)params
                    completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DiagnosticLogs::Commands::RetrieveLogsRequest::Type request;
    request.intent = static_cast<std::remove_reference_t<decltype(request.intent)>>(params.intent.unsignedCharValue);
    request.requestedProtocol
        = static_cast<std::remove_reference_t<decltype(request.requestedProtocol)>>(params.requestedProtocol.unsignedCharValue);
    request.transferFileDesignator = [self asByteSpan:params.transferFileDesignator];

    new CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDiagnosticLogsClusterRetrieveLogsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

@end

@implementation CHIPDoorLock

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)clearAllPinsWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearAllPins::Type request;

    new CHIPDoorLockClusterClearAllPinsResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearAllPinsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearAllRfidsWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearAllRfids::Type request;

    new CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearAllRfidsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearHolidayScheduleWithParams:(CHIPDoorLockClusterClearHolidayScheduleParams *)params
                     completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearHolidaySchedule::Type request;
    request.scheduleId = params.scheduleId.unsignedCharValue;

    new CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearHolidayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearPinWithParams:(CHIPDoorLockClusterClearPinParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearPin::Type request;
    request.userId = params.userId.unsignedShortValue;

    new CHIPDoorLockClusterClearPinResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearPinResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearRfidWithParams:(CHIPDoorLockClusterClearRfidParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearRfid::Type request;
    request.userId = params.userId.unsignedShortValue;

    new CHIPDoorLockClusterClearRfidResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearRfidResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearWeekdayScheduleWithParams:(CHIPDoorLockClusterClearWeekdayScheduleParams *)params
                     completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearWeekdaySchedule::Type request;
    request.scheduleId = params.scheduleId.unsignedCharValue;
    request.userId = params.userId.unsignedShortValue;

    new CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)clearYeardayScheduleWithParams:(CHIPDoorLockClusterClearYeardayScheduleParams *)params
                     completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::ClearYeardaySchedule::Type request;
    request.scheduleId = params.scheduleId.unsignedCharValue;
    request.userId = params.userId.unsignedShortValue;

    new CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterClearYeardayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getHolidayScheduleWithParams:(CHIPDoorLockClusterGetHolidayScheduleParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetHolidaySchedule::Type request;
    request.scheduleId = params.scheduleId.unsignedCharValue;

    new CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetHolidayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getLogRecordWithParams:(CHIPDoorLockClusterGetLogRecordParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetLogRecord::Type request;
    request.logIndex = params.logIndex.unsignedShortValue;

    new CHIPDoorLockClusterGetLogRecordResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetLogRecordResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getPinWithParams:(CHIPDoorLockClusterGetPinParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetPin::Type request;
    request.userId = params.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetPinResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetPinResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getRfidWithParams:(CHIPDoorLockClusterGetRfidParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetRfid::Type request;
    request.userId = params.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetRfidResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetRfidResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getUserTypeWithParams:(CHIPDoorLockClusterGetUserTypeParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetUserType::Type request;
    request.userId = params.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetUserTypeResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetUserTypeResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getWeekdayScheduleWithParams:(CHIPDoorLockClusterGetWeekdayScheduleParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetWeekdaySchedule::Type request;
    request.scheduleId = params.scheduleId.unsignedCharValue;
    request.userId = params.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getYeardayScheduleWithParams:(CHIPDoorLockClusterGetYeardayScheduleParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::GetYeardaySchedule::Type request;
    request.scheduleId = params.scheduleId.unsignedCharValue;
    request.userId = params.userId.unsignedShortValue;

    new CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterGetYeardayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)lockDoorWithParams:(CHIPDoorLockClusterLockDoorParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::LockDoor::Type request;
    request.pin = [self asByteSpan:params.pin];

    new CHIPDoorLockClusterLockDoorResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterLockDoorResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setHolidayScheduleWithParams:(CHIPDoorLockClusterSetHolidayScheduleParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetHolidaySchedule::Type request;
    request.scheduleId = params.scheduleId.unsignedCharValue;
    request.localStartTime = params.localStartTime.unsignedIntValue;
    request.localEndTime = params.localEndTime.unsignedIntValue;
    request.operatingModeDuringHoliday = params.operatingModeDuringHoliday.unsignedCharValue;

    new CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetHolidayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setPinWithParams:(CHIPDoorLockClusterSetPinParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetPin::Type request;
    request.userId = params.userId.unsignedShortValue;
    request.userStatus = static_cast<std::remove_reference_t<decltype(request.userStatus)>>(params.userStatus.unsignedCharValue);
    request.userType = static_cast<std::remove_reference_t<decltype(request.userType)>>(params.userType.unsignedCharValue);
    request.pin = [self asByteSpan:params.pin];

    new CHIPDoorLockClusterSetPinResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetPinResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setRfidWithParams:(CHIPDoorLockClusterSetRfidParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetRfid::Type request;
    request.userId = params.userId.unsignedShortValue;
    request.userStatus = static_cast<std::remove_reference_t<decltype(request.userStatus)>>(params.userStatus.unsignedCharValue);
    request.userType = static_cast<std::remove_reference_t<decltype(request.userType)>>(params.userType.unsignedCharValue);
    request.id = [self asByteSpan:params.id];

    new CHIPDoorLockClusterSetRfidResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetRfidResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setUserTypeWithParams:(CHIPDoorLockClusterSetUserTypeParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetUserType::Type request;
    request.userId = params.userId.unsignedShortValue;
    request.userType = static_cast<std::remove_reference_t<decltype(request.userType)>>(params.userType.unsignedCharValue);

    new CHIPDoorLockClusterSetUserTypeResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetUserTypeResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setWeekdayScheduleWithParams:(CHIPDoorLockClusterSetWeekdayScheduleParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetWeekdaySchedule::Type request;
    request.scheduleId = params.scheduleId.unsignedCharValue;
    request.userId = params.userId.unsignedShortValue;
    request.daysMask = static_cast<std::remove_reference_t<decltype(request.daysMask)>>(params.daysMask.unsignedCharValue);
    request.startHour = params.startHour.unsignedCharValue;
    request.startMinute = params.startMinute.unsignedCharValue;
    request.endHour = params.endHour.unsignedCharValue;
    request.endMinute = params.endMinute.unsignedCharValue;

    new CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setYeardayScheduleWithParams:(CHIPDoorLockClusterSetYeardayScheduleParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::SetYeardaySchedule::Type request;
    request.scheduleId = params.scheduleId.unsignedCharValue;
    request.userId = params.userId.unsignedShortValue;
    request.localStartTime = params.localStartTime.unsignedIntValue;
    request.localEndTime = params.localEndTime.unsignedIntValue;

    new CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterSetYeardayScheduleResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)unlockDoorWithParams:(CHIPDoorLockClusterUnlockDoorParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::UnlockDoor::Type request;
    request.pin = [self asByteSpan:params.pin];

    new CHIPDoorLockClusterUnlockDoorResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterUnlockDoorResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)unlockWithTimeoutWithParams:(CHIPDoorLockClusterUnlockWithTimeoutParams *)params
                  completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    DoorLock::Commands::UnlockWithTimeout::Type request;
    request.timeoutInSeconds = params.timeoutInSeconds.unsignedShortValue;
    request.pin = [self asByteSpan:params.pin];

    new CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeLockStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLockState(success, failure);
    });
}

- (void)subscribeAttributeLockStateWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLockState(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLockStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLockState(success);
        },
        true);
}

- (void)readAttributeLockTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLockType(success, failure);
    });
}

- (void)subscribeAttributeLockTypeWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLockType(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLockTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLockType(success);
        },
        true);
}

- (void)readAttributeActuatorEnabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActuatorEnabled(success, failure);
    });
}

- (void)subscribeAttributeActuatorEnabledWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeActuatorEnabled(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeActuatorEnabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeActuatorEnabled(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPElectricalMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasurementTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasurementType(success, failure);
    });
}

- (void)subscribeAttributeMeasurementTypeWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasurementType(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasurementTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasurementType(success);
        },
        true);
}

- (void)readAttributeTotalActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTotalActivePower(success, failure);
    });
}

- (void)subscribeAttributeTotalActivePowerWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTotalActivePower(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTotalActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTotalActivePower(success);
        },
        true);
}

- (void)readAttributeRmsVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltage(success, failure);
    });
}

- (void)subscribeAttributeRmsVoltageWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRmsVoltage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRmsVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRmsVoltage(success);
        },
        true);
}

- (void)readAttributeRmsVoltageMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltageMin(success, failure);
    });
}

- (void)subscribeAttributeRmsVoltageMinWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRmsVoltageMin(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRmsVoltageMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRmsVoltageMin(success);
        },
        true);
}

- (void)readAttributeRmsVoltageMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltageMax(success, failure);
    });
}

- (void)subscribeAttributeRmsVoltageMaxWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRmsVoltageMax(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRmsVoltageMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRmsVoltageMax(success);
        },
        true);
}

- (void)readAttributeRmsCurrentWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrent(success, failure);
    });
}

- (void)subscribeAttributeRmsCurrentWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRmsCurrent(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRmsCurrentWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRmsCurrent(success);
        },
        true);
}

- (void)readAttributeRmsCurrentMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrentMin(success, failure);
    });
}

- (void)subscribeAttributeRmsCurrentMinWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRmsCurrentMin(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRmsCurrentMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRmsCurrentMin(success);
        },
        true);
}

- (void)readAttributeRmsCurrentMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrentMax(success, failure);
    });
}

- (void)subscribeAttributeRmsCurrentMaxWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRmsCurrentMax(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRmsCurrentMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRmsCurrentMax(success);
        },
        true);
}

- (void)readAttributeActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePower(success, failure);
    });
}

- (void)subscribeAttributeActivePowerWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeActivePower(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeActivePower(success);
        },
        true);
}

- (void)readAttributeActivePowerMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePowerMin(success, failure);
    });
}

- (void)subscribeAttributeActivePowerMinWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeActivePowerMin(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeActivePowerMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeActivePowerMin(success);
        },
        true);
}

- (void)readAttributeActivePowerMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePowerMax(success, failure);
    });
}

- (void)subscribeAttributeActivePowerMaxWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeActivePowerMax(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeActivePowerMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeActivePowerMax(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPEthernetNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCountsWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    EthernetNetworkDiagnostics::Commands::ResetCounts::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributePHYRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePHYRate(success, failure);
    });
}

- (void)subscribeAttributePHYRateWithMinInterval:(uint16_t)minInterval
                                     maxInterval:(uint16_t)maxInterval
                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePHYRate(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePHYRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePHYRate(success);
        },
        true);
}

- (void)readAttributeFullDuplexWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFullDuplex(success, failure);
    });
}

- (void)subscribeAttributeFullDuplexWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeFullDuplex(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeFullDuplexWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeFullDuplex(success);
        },
        true);
}

- (void)readAttributePacketRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketRxCount(success, failure);
    });
}

- (void)subscribeAttributePacketRxCountWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePacketRxCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePacketRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePacketRxCount(success);
        },
        true);
}

- (void)readAttributePacketTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketTxCount(success, failure);
    });
}

- (void)subscribeAttributePacketTxCountWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePacketTxCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePacketTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePacketTxCount(success);
        },
        true);
}

- (void)readAttributeTxErrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrCount(success, failure);
    });
}

- (void)subscribeAttributeTxErrCountWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxErrCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxErrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxErrCount(success);
        },
        true);
}

- (void)readAttributeCollisionCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCollisionCount(success, failure);
    });
}

- (void)subscribeAttributeCollisionCountWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCollisionCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCollisionCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCollisionCount(success);
        },
        true);
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)subscribeAttributeOverrunCountWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOverrunCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOverrunCount(success);
        },
        true);
}

- (void)readAttributeCarrierDetectWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCarrierDetect(success, failure);
    });
}

- (void)subscribeAttributeCarrierDetectWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCarrierDetect(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCarrierDetectWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCarrierDetect(success);
        },
        true);
}

- (void)readAttributeTimeSinceResetWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTimeSinceReset(success, failure);
    });
}

- (void)subscribeAttributeTimeSinceResetWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTimeSinceReset(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTimeSinceResetWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTimeSinceReset(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPFixedLabel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeLabelListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPFixedLabelLabelListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeLabelList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPFlowMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMinMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMaxMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxMeasuredValue(success);
        },
        true);
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)subscribeAttributeToleranceWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTolerance(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTolerance(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPGeneralCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)armFailSafeWithParams:(CHIPGeneralCommissioningClusterArmFailSafeParams *)params
            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    GeneralCommissioning::Commands::ArmFailSafe::Type request;
    request.expiryLengthSeconds = params.expiryLengthSeconds.unsignedShortValue;
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)commissioningCompleteWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    GeneralCommissioning::Commands::CommissioningComplete::Type request;

    new CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)setRegulatoryConfigWithParams:(CHIPGeneralCommissioningClusterSetRegulatoryConfigParams *)params
                    completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    GeneralCommissioning::Commands::SetRegulatoryConfig::Type request;
    request.location = static_cast<std::remove_reference_t<decltype(request.location)>>(params.location.unsignedCharValue);
    request.countryCode = [self asCharSpan:params.countryCode];
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeBreadcrumbWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBreadcrumb(success, failure);
    });
}

- (void)writeAttributeBreadcrumbWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = GeneralCommissioning::Attributes::Breadcrumb::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedLongLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeBreadcrumbWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBreadcrumb(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBreadcrumbWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBreadcrumb(success);
        },
        true);
}

- (void)readAttributeBasicCommissioningInfoListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeBasicCommissioningInfoList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPGeneralDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeNetworkInterfacesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeNetworkInterfaces(success, failure);
        });
}

- (void)readAttributeRebootCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRebootCount(success, failure);
    });
}

- (void)subscribeAttributeRebootCountWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRebootCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRebootCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRebootCount(success);
        },
        true);
}

- (void)readAttributeUpTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUpTime(success, failure);
    });
}

- (void)subscribeAttributeUpTimeWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeUpTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeUpTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeUpTime(success);
        },
        true);
}

- (void)readAttributeTotalOperationalHoursWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTotalOperationalHours(success, failure);
    });
}

- (void)subscribeAttributeTotalOperationalHoursWithMinInterval:(uint16_t)minInterval
                                                   maxInterval:(uint16_t)maxInterval
                                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTotalOperationalHours(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTotalOperationalHoursWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTotalOperationalHours(success);
        },
        true);
}

- (void)readAttributeBootReasonsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBootReasons(success, failure);
    });
}

- (void)subscribeAttributeBootReasonsWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBootReasons(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBootReasonsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBootReasons(success);
        },
        true);
}

- (void)readAttributeActiveHardwareFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsActiveHardwareFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveHardwareFaults(success, failure);
        });
}

- (void)readAttributeActiveRadioFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsActiveRadioFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveRadioFaults(success, failure);
        });
}

- (void)readAttributeActiveNetworkFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsActiveNetworkFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveNetworkFaults(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPGroupKeyManagement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeGroupsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupKeyManagementGroupsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeGroups(success, failure);
        });
}

- (void)readAttributeGroupKeysWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeGroupKeys(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPGroups

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addGroupWithParams:(CHIPGroupsClusterAddGroupParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Groups::Commands::AddGroup::Type request;
    request.groupId = params.groupId.unsignedShortValue;
    request.groupName = [self asCharSpan:params.groupName];

    new CHIPGroupsClusterAddGroupResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterAddGroupResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)addGroupIfIdentifyingWithParams:(CHIPGroupsClusterAddGroupIfIdentifyingParams *)params
                      completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Groups::Commands::AddGroupIfIdentifying::Type request;
    request.groupId = params.groupId.unsignedShortValue;
    request.groupName = [self asCharSpan:params.groupName];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)getGroupMembershipWithParams:(CHIPGroupsClusterGetGroupMembershipParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Groups::Commands::GetGroupMembership::Type request;
    {
        using ListType = std::remove_reference_t<decltype(request.groupList)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (params.groupList.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(params.groupList.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < params.groupList.count; ++i) {
                if (![params.groupList[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) params.groupList[i];
                listHolder_0->mList[i] = element_0.unsignedShortValue;
            }
            request.groupList = ListType(listHolder_0->mList, params.groupList.count);
        } else {
            request.groupList = ListType();
        }
    }

    new CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterGetGroupMembershipResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeAllGroupsWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Groups::Commands::RemoveAllGroups::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)removeGroupWithParams:(CHIPGroupsClusterRemoveGroupParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Groups::Commands::RemoveGroup::Type request;
    request.groupId = params.groupId.unsignedShortValue;

    new CHIPGroupsClusterRemoveGroupResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterRemoveGroupResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)viewGroupWithParams:(CHIPGroupsClusterViewGroupParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Groups::Commands::ViewGroup::Type request;
    request.groupId = params.groupId.unsignedShortValue;

    new CHIPGroupsClusterViewGroupResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPGroupsClusterViewGroupResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNameSupport(success, failure);
    });
}

- (void)subscribeAttributeNameSupportWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNameSupport(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNameSupport(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPIdentify

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)identifyWithParams:(CHIPIdentifyClusterIdentifyParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Identify::Commands::Identify::Type request;
    request.identifyTime = params.identifyTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)identifyQueryWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Identify::Commands::IdentifyQuery::Type request;

    new CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPIdentifyClusterIdentifyQueryResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)triggerEffectWithParams:(CHIPIdentifyClusterTriggerEffectParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Identify::Commands::TriggerEffect::Type request;
    request.effectIdentifier
        = static_cast<std::remove_reference_t<decltype(request.effectIdentifier)>>(params.effectIdentifier.unsignedCharValue);
    request.effectVariant
        = static_cast<std::remove_reference_t<decltype(request.effectVariant)>>(params.effectVariant.unsignedCharValue);

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeIdentifyTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeIdentifyTime(success, failure);
    });
}

- (void)writeAttributeIdentifyTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Identify::Attributes::IdentifyTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeIdentifyTimeWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeIdentifyTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeIdentifyTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeIdentifyTime(success);
        },
        true);
}

- (void)readAttributeIdentifyTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeIdentifyType(success, failure);
    });
}

- (void)subscribeAttributeIdentifyTypeWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeIdentifyType(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeIdentifyTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeIdentifyType(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPIlluminanceMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMinMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMaxMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxMeasuredValue(success);
        },
        true);
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)subscribeAttributeToleranceWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTolerance(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTolerance(success);
        },
        true);
}

- (void)readAttributeLightSensorTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLightSensorType(success, failure);
    });
}

- (void)subscribeAttributeLightSensorTypeWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLightSensorType(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLightSensorTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLightSensorType(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPKeypadInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)sendKeyWithParams:(CHIPKeypadInputClusterSendKeyParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    KeypadInput::Commands::SendKey::Type request;
    request.keyCode = static_cast<std::remove_reference_t<decltype(request.keyCode)>>(params.keyCode.unsignedCharValue);

    new CHIPKeypadInputClusterSendKeyResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPKeypadInputClusterSendKeyResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPLevelControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)moveWithParams:(CHIPLevelControlClusterMoveParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    LevelControl::Commands::Move::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(params.moveMode.unsignedCharValue);
    request.rate = params.rate.unsignedCharValue;
    request.optionMask = params.optionMask.unsignedCharValue;
    request.optionOverride = params.optionOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToLevelWithParams:(CHIPLevelControlClusterMoveToLevelParams *)params
            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    LevelControl::Commands::MoveToLevel::Type request;
    request.level = params.level.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionMask = params.optionMask.unsignedCharValue;
    request.optionOverride = params.optionOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveToLevelWithOnOffWithParams:(CHIPLevelControlClusterMoveToLevelWithOnOffParams *)params
                     completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    LevelControl::Commands::MoveToLevelWithOnOff::Type request;
    request.level = params.level.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)moveWithOnOffWithParams:(CHIPLevelControlClusterMoveWithOnOffParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    LevelControl::Commands::MoveWithOnOff::Type request;
    request.moveMode = static_cast<std::remove_reference_t<decltype(request.moveMode)>>(params.moveMode.unsignedCharValue);
    request.rate = params.rate.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepWithParams:(CHIPLevelControlClusterStepParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    LevelControl::Commands::Step::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(params.stepMode.unsignedCharValue);
    request.stepSize = params.stepSize.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.optionMask = params.optionMask.unsignedCharValue;
    request.optionOverride = params.optionOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stepWithOnOffWithParams:(CHIPLevelControlClusterStepWithOnOffParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    LevelControl::Commands::StepWithOnOff::Type request;
    request.stepMode = static_cast<std::remove_reference_t<decltype(request.stepMode)>>(params.stepMode.unsignedCharValue);
    request.stepSize = params.stepSize.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopWithParams:(CHIPLevelControlClusterStopParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    LevelControl::Commands::Stop::Type request;
    request.optionMask = params.optionMask.unsignedCharValue;
    request.optionOverride = params.optionOverride.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopWithOnOffWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    LevelControl::Commands::StopWithOnOff::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentLevel(success, failure);
    });
}

- (void)subscribeAttributeCurrentLevelWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentLevel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentLevel(success);
        },
        true);
}

- (void)readAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRemainingTime(success, failure);
    });
}

- (void)subscribeAttributeRemainingTimeWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRemainingTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRemainingTime(success);
        },
        true);
}

- (void)readAttributeMinLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinLevel(success, failure);
    });
}

- (void)subscribeAttributeMinLevelWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinLevel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinLevel(success);
        },
        true);
}

- (void)readAttributeMaxLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxLevel(success, failure);
    });
}

- (void)subscribeAttributeMaxLevelWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxLevel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxLevel(success);
        },
        true);
}

- (void)readAttributeCurrentFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentFrequency(success, failure);
    });
}

- (void)subscribeAttributeCurrentFrequencyWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentFrequency(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentFrequency(success);
        },
        true);
}

- (void)readAttributeMinFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinFrequency(success, failure);
    });
}

- (void)subscribeAttributeMinFrequencyWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinFrequency(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinFrequency(success);
        },
        true);
}

- (void)readAttributeMaxFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxFrequency(success, failure);
    });
}

- (void)subscribeAttributeMaxFrequencyWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxFrequency(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxFrequency(success);
        },
        true);
}

- (void)readAttributeOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOptions(success, failure);
    });
}

- (void)writeAttributeOptionsWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::Options::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOptionsWithMinInterval:(uint16_t)minInterval
                                     maxInterval:(uint16_t)maxInterval
                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOptions(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOptions(success);
        },
        true);
}

- (void)readAttributeOnOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnOffTransitionTime(success, failure);
    });
}

- (void)writeAttributeOnOffTransitionTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::OnOffTransitionTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOnOffTransitionTimeWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOnOffTransitionTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOnOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOnOffTransitionTime(success);
        },
        true);
}

- (void)readAttributeOnLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnLevel(success, failure);
    });
}

- (void)writeAttributeOnLevelWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::OnLevel::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOnLevelWithMinInterval:(uint16_t)minInterval
                                     maxInterval:(uint16_t)maxInterval
                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOnLevel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOnLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOnLevel(success);
        },
        true);
}

- (void)readAttributeOnTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnTransitionTime(success, failure);
    });
}

- (void)writeAttributeOnTransitionTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::OnTransitionTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOnTransitionTimeWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOnTransitionTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOnTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOnTransitionTime(success);
        },
        true);
}

- (void)readAttributeOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOffTransitionTime(success, failure);
    });
}

- (void)writeAttributeOffTransitionTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::OffTransitionTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOffTransitionTimeWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOffTransitionTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOffTransitionTime(success);
        },
        true);
}

- (void)readAttributeDefaultMoveRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDefaultMoveRate(success, failure);
    });
}

- (void)writeAttributeDefaultMoveRateWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::DefaultMoveRate::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeDefaultMoveRateWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeDefaultMoveRate(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeDefaultMoveRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeDefaultMoveRate(success);
        },
        true);
}

- (void)readAttributeStartUpCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpCurrentLevel(success, failure);
    });
}

- (void)writeAttributeStartUpCurrentLevelWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = LevelControl::Attributes::StartUpCurrentLevel::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeStartUpCurrentLevelWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStartUpCurrentLevel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStartUpCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStartUpCurrentLevel(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPLowPower

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)sleepWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    LowPower::Commands::Sleep::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPMediaInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)hideInputStatusWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaInput::Commands::HideInputStatus::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)renameInputWithParams:(CHIPMediaInputClusterRenameInputParams *)params
            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaInput::Commands::RenameInput::Type request;
    request.index = params.index.unsignedCharValue;
    request.name = [self asCharSpan:params.name];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)selectInputWithParams:(CHIPMediaInputClusterSelectInputParams *)params
            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaInput::Commands::SelectInput::Type request;
    request.index = params.index.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)showInputStatusWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaInput::Commands::ShowInputStatus::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeMediaInputListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPMediaInputMediaInputListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeMediaInputList(success, failure);
        });
}

- (void)readAttributeCurrentMediaInputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMediaInput(success, failure);
    });
}

- (void)subscribeAttributeCurrentMediaInputWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentMediaInput(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentMediaInputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentMediaInput(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPMediaPlayback

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)mediaFastForwardWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaFastForward::Type request;

    new CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaNextWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaNext::Type request;

    new CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaNextResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaPauseWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaPause::Type request;

    new CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaPauseResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaPlayWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaPlay::Type request;

    new CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaPlayResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaPreviousWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaPrevious::Type request;

    new CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaPreviousResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaRewindWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaRewind::Type request;

    new CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaRewindResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaSeekWithParams:(CHIPMediaPlaybackClusterMediaSeekParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaSeek::Type request;
    request.position = params.position.unsignedLongLongValue;

    new CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaSeekResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaSkipBackwardWithParams:(CHIPMediaPlaybackClusterMediaSkipBackwardParams *)params
                  completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaSkipBackward::Type request;
    request.deltaPositionMilliseconds = params.deltaPositionMilliseconds.unsignedLongLongValue;

    new CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaSkipForwardWithParams:(CHIPMediaPlaybackClusterMediaSkipForwardParams *)params
                 completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaSkipForward::Type request;
    request.deltaPositionMilliseconds = params.deltaPositionMilliseconds.unsignedLongLongValue;

    new CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaStartOverWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaStartOver::Type request;

    new CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaStartOverResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)mediaStopWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    MediaPlayback::Commands::MediaStop::Type request;

    new CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPMediaPlaybackClusterMediaStopResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributePlaybackStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePlaybackState(success, failure);
    });
}

- (void)subscribeAttributePlaybackStateWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePlaybackState(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePlaybackStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePlaybackState(success);
        },
        true);
}

- (void)readAttributeStartTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartTime(success, failure);
    });
}

- (void)subscribeAttributeStartTimeWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStartTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStartTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStartTime(success);
        },
        true);
}

- (void)readAttributeDurationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDuration(success, failure);
    });
}

- (void)subscribeAttributeDurationWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeDuration(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeDurationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeDuration(success);
        },
        true);
}

- (void)readAttributePositionUpdatedAtWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePositionUpdatedAt(success, failure);
    });
}

- (void)subscribeAttributePositionUpdatedAtWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePositionUpdatedAt(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePositionUpdatedAtWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePositionUpdatedAt(success);
        },
        true);
}

- (void)readAttributePositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePosition(success, failure);
    });
}

- (void)subscribeAttributePositionWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePosition(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePosition(success);
        },
        true);
}

- (void)readAttributePlaybackSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePlaybackSpeed(success, failure);
    });
}

- (void)subscribeAttributePlaybackSpeedWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePlaybackSpeed(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePlaybackSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePlaybackSpeed(success);
        },
        true);
}

- (void)readAttributeSeekRangeEndWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSeekRangeEnd(success, failure);
    });
}

- (void)subscribeAttributeSeekRangeEndWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSeekRangeEnd(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSeekRangeEndWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSeekRangeEnd(success);
        },
        true);
}

- (void)readAttributeSeekRangeStartWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSeekRangeStart(success, failure);
    });
}

- (void)subscribeAttributeSeekRangeStartWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSeekRangeStart(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSeekRangeStartWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSeekRangeStart(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPModeSelect

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeToModeWithParams:(CHIPModeSelectClusterChangeToModeParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ModeSelect::Commands::ChangeToMode::Type request;
    request.newMode = params.newMode.unsignedCharValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeCurrentModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMode(success, failure);
    });
}

- (void)subscribeAttributeCurrentModeWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentMode(success);
        },
        true);
}

- (void)readAttributeSupportedModesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPModeSelectSupportedModesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSupportedModes(success, failure);
        });
}

- (void)readAttributeOnModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnMode(success, failure);
    });
}

- (void)writeAttributeOnModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ModeSelect::Attributes::OnMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOnModeWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOnMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOnModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOnMode(success);
        },
        true);
}

- (void)readAttributeStartUpModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpMode(success, failure);
    });
}

- (void)subscribeAttributeStartUpModeWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStartUpMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStartUpModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStartUpMode(success);
        },
        true);
}

- (void)readAttributeDescriptionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDescription(success, failure);
    });
}

- (void)subscribeAttributeDescriptionWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeDescription(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeDescriptionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeDescription(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPNetworkCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addThreadNetworkWithParams:(CHIPNetworkCommissioningClusterAddThreadNetworkParams *)params
                 completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::AddThreadNetwork::Type request;
    request.operationalDataset = [self asByteSpan:params.operationalDataset];
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)addWiFiNetworkWithParams:(CHIPNetworkCommissioningClusterAddWiFiNetworkParams *)params
               completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::AddWiFiNetwork::Type request;
    request.ssid = [self asByteSpan:params.ssid];
    request.credentials = [self asByteSpan:params.credentials];
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)disableNetworkWithParams:(CHIPNetworkCommissioningClusterDisableNetworkParams *)params
               completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::DisableNetwork::Type request;
    request.networkID = [self asByteSpan:params.networkID];
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)enableNetworkWithParams:(CHIPNetworkCommissioningClusterEnableNetworkParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::EnableNetwork::Type request;
    request.networkID = [self asByteSpan:params.networkID];
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeNetworkWithParams:(CHIPNetworkCommissioningClusterRemoveNetworkParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::RemoveNetwork::Type request;
    request.networkID = [self asByteSpan:params.networkID];
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)scanNetworksWithParams:(CHIPNetworkCommissioningClusterScanNetworksParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::ScanNetworks::Type request;
    request.ssid = [self asByteSpan:params.ssid];
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPNetworkCommissioningClusterScanNetworksResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)updateThreadNetworkWithParams:(CHIPNetworkCommissioningClusterUpdateThreadNetworkParams *)params
                    completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::UpdateThreadNetwork::Type request;
    request.operationalDataset = [self asByteSpan:params.operationalDataset];
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)updateWiFiNetworkWithParams:(CHIPNetworkCommissioningClusterUpdateWiFiNetworkParams *)params
                  completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    NetworkCommissioning::Commands::UpdateWiFiNetwork::Type request;
    request.ssid = [self asByteSpan:params.ssid];
    request.credentials = [self asByteSpan:params.credentials];
    request.breadcrumb = params.breadcrumb.unsignedLongLongValue;
    request.timeoutMs = params.timeoutMs.unsignedIntValue;

    new CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)subscribeAttributeFeatureMapWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeFeatureMap(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeFeatureMap(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPOtaSoftwareUpdateProvider

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)applyUpdateRequestWithParams:(CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateProvider::Commands::ApplyUpdateRequest::Type request;
    request.updateToken = [self asByteSpan:params.updateToken];
    request.newVersion = params.newVersion.unsignedIntValue;

    new CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOtaSoftwareUpdateProviderClusterApplyUpdateResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)notifyUpdateAppliedWithParams:(CHIPOtaSoftwareUpdateProviderClusterNotifyUpdateAppliedParams *)params
                    completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateProvider::Commands::NotifyUpdateApplied::Type request;
    request.updateToken = [self asByteSpan:params.updateToken];
    request.softwareVersion = params.softwareVersion.unsignedIntValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)queryImageWithParams:(CHIPOtaSoftwareUpdateProviderClusterQueryImageParams *)params
           completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateProvider::Commands::QueryImage::Type request;
    request.vendorId = static_cast<std::remove_reference_t<decltype(request.vendorId)>>(params.vendorId.unsignedShortValue);
    request.productId = params.productId.unsignedShortValue;
    request.softwareVersion = params.softwareVersion.unsignedIntValue;
    {
        using ListType = std::remove_reference_t<decltype(request.protocolsSupported)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (params.protocolsSupported.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(params.protocolsSupported.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < params.protocolsSupported.count; ++i) {
                if (![params.protocolsSupported[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) params.protocolsSupported[i];
                listHolder_0->mList[i]
                    = static_cast<std::remove_reference_t<decltype(listHolder_0->mList[i])>>(element_0.unsignedCharValue);
            }
            request.protocolsSupported = ListType(listHolder_0->mList, params.protocolsSupported.count);
        } else {
            request.protocolsSupported = ListType();
        }
    }
    if (params.hardwareVersion != nil) {
        auto & definedValue_0 = request.hardwareVersion.Emplace();
        definedValue_0 = params.hardwareVersion.unsignedShortValue;
    }
    if (params.location != nil) {
        auto & definedValue_0 = request.location.Emplace();
        definedValue_0 = [self asCharSpan:params.location];
    }
    if (params.requestorCanConsent != nil) {
        auto & definedValue_0 = request.requestorCanConsent.Emplace();
        definedValue_0 = params.requestorCanConsent.boolValue;
    }
    if (params.metadataForProvider != nil) {
        auto & definedValue_0 = request.metadataForProvider.Emplace();
        definedValue_0 = [self asByteSpan:params.metadataForProvider];
    }

    new CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPOtaSoftwareUpdateRequestor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)announceOtaProviderWithParams:(CHIPOtaSoftwareUpdateRequestorClusterAnnounceOtaProviderParams *)params
                    completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OtaSoftwareUpdateRequestor::Commands::AnnounceOtaProvider::Type request;
    request.providerLocation = params.providerLocation.unsignedLongLongValue;
    request.vendorId = static_cast<std::remove_reference_t<decltype(request.vendorId)>>(params.vendorId.unsignedShortValue);
    request.announcementReason
        = static_cast<std::remove_reference_t<decltype(request.announcementReason)>>(params.announcementReason.unsignedCharValue);
    if (params.metadataForNode != nil) {
        auto & definedValue_0 = request.metadataForNode.Emplace();
        definedValue_0 = [self asByteSpan:params.metadataForNode];
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeDefaultOtaProviderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDefaultOtaProvider(success, failure);
    });
}

- (void)writeAttributeDefaultOtaProviderWithValue:(NSData * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OtaSoftwareUpdateRequestor::Attributes::DefaultOtaProvider::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asByteSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeDefaultOtaProviderWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeDefaultOtaProvider(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeDefaultOtaProviderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeDefaultOtaProvider(success);
        },
        true);
}

- (void)readAttributeUpdatePossibleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUpdatePossible(success, failure);
    });
}

- (void)subscribeAttributeUpdatePossibleWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeUpdatePossible(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeUpdatePossibleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeUpdatePossible(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPOccupancySensing

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeOccupancyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancy(success, failure);
    });
}

- (void)subscribeAttributeOccupancyWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOccupancy(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOccupancyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOccupancy(success);
        },
        true);
}

- (void)readAttributeOccupancySensorTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancySensorType(success, failure);
    });
}

- (void)subscribeAttributeOccupancySensorTypeWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOccupancySensorType(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOccupancySensorTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOccupancySensorType(success);
        },
        true);
}

- (void)readAttributeOccupancySensorTypeBitmapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancySensorTypeBitmap(success, failure);
    });
}

- (void)subscribeAttributeOccupancySensorTypeBitmapWithMinInterval:(uint16_t)minInterval
                                                       maxInterval:(uint16_t)maxInterval
                                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOccupancySensorTypeBitmap(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOccupancySensorTypeBitmapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOccupancySensorTypeBitmap(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPOnOff

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)offWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OnOff::Commands::Off::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)offWithEffectWithParams:(CHIPOnOffClusterOffWithEffectParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OnOff::Commands::OffWithEffect::Type request;
    request.effectId = static_cast<std::remove_reference_t<decltype(request.effectId)>>(params.effectId.unsignedCharValue);
    request.effectVariant
        = static_cast<std::remove_reference_t<decltype(request.effectVariant)>>(params.effectVariant.unsignedCharValue);

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)onWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OnOff::Commands::On::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)onWithRecallGlobalSceneWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OnOff::Commands::OnWithRecallGlobalScene::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)onWithTimedOffWithParams:(CHIPOnOffClusterOnWithTimedOffParams *)params
               completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OnOff::Commands::OnWithTimedOff::Type request;
    request.onOffControl
        = static_cast<std::remove_reference_t<decltype(request.onOffControl)>>(params.onOffControl.unsignedCharValue);
    request.onTime = params.onTime.unsignedShortValue;
    request.offWaitTime = params.offWaitTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)toggleWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OnOff::Commands::Toggle::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnOff(success, failure);
    });
}

- (void)subscribeAttributeOnOffWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOnOff(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOnOff(success);
        },
        true);
}

- (void)readAttributeGlobalSceneControlWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeGlobalSceneControl(success, failure);
    });
}

- (void)subscribeAttributeGlobalSceneControlWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeGlobalSceneControl(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeGlobalSceneControlWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeGlobalSceneControl(success);
        },
        true);
}

- (void)readAttributeOnTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnTime(success, failure);
    });
}

- (void)writeAttributeOnTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OnOff::Attributes::OnTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOnTimeWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOnTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOnTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOnTime(success);
        },
        true);
}

- (void)readAttributeOffWaitTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOffWaitTime(success, failure);
    });
}

- (void)writeAttributeOffWaitTimeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OnOff::Attributes::OffWaitTime::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOffWaitTimeWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOffWaitTime(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOffWaitTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOffWaitTime(success);
        },
        true);
}

- (void)readAttributeStartUpOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpOnOff(success, failure);
    });
}

- (void)writeAttributeStartUpOnOffWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OnOff::Attributes::StartUpOnOff::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeStartUpOnOffWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStartUpOnOff(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStartUpOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStartUpOnOff(success);
        },
        true);
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)subscribeAttributeFeatureMapWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeFeatureMap(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeFeatureMap(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPOnOffSwitchConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeSwitchTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSwitchType(success, failure);
    });
}

- (void)subscribeAttributeSwitchTypeWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSwitchType(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSwitchTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSwitchType(success);
        },
        true);
}

- (void)readAttributeSwitchActionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSwitchActions(success, failure);
    });
}

- (void)writeAttributeSwitchActionsWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = OnOffSwitchConfiguration::Attributes::SwitchActions::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeSwitchActionsWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSwitchActions(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSwitchActionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSwitchActions(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPOperationalCredentials

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addNOCWithParams:(CHIPOperationalCredentialsClusterAddNOCParams *)params
       completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::AddNOC::Type request;
    request.NOCValue = [self asByteSpan:params.nocValue];
    if (params.icacValue != nil) {
        auto & definedValue_0 = request.ICACValue.Emplace();
        definedValue_0 = [self asByteSpan:params.icacValue];
    }
    request.IPKValue = [self asByteSpan:params.ipkValue];
    request.caseAdminNode = params.caseAdminNode.unsignedLongLongValue;
    request.adminVendorId = params.adminVendorId.unsignedShortValue;

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)addTrustedRootCertificateWithParams:(CHIPOperationalCredentialsClusterAddTrustedRootCertificateParams *)params
                          completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::AddTrustedRootCertificate::Type request;
    request.rootCertificate = [self asByteSpan:params.rootCertificate];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)attestationRequestWithParams:(CHIPOperationalCredentialsClusterAttestationRequestParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::AttestationRequest::Type request;
    request.attestationNonce = [self asByteSpan:params.attestationNonce];

    new CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterAttestationResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)certificateChainRequestWithParams:(CHIPOperationalCredentialsClusterCertificateChainRequestParams *)params
                        completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::CertificateChainRequest::Type request;
    request.certificateType = params.certificateType.unsignedCharValue;

    new CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn
                = Callback<CHIPOperationalCredentialsClusterCertificateChainResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)opCSRRequestWithParams:(CHIPOperationalCredentialsClusterOpCSRRequestParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::OpCSRRequest::Type request;
    request.CSRNonce = [self asByteSpan:params.csrNonce];

    new CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterOpCSRResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeFabricWithParams:(CHIPOperationalCredentialsClusterRemoveFabricParams *)params
             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::RemoveFabric::Type request;
    request.fabricIndex = params.fabricIndex.unsignedCharValue;

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeTrustedRootCertificateWithParams:(CHIPOperationalCredentialsClusterRemoveTrustedRootCertificateParams *)params
                             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::RemoveTrustedRootCertificate::Type request;
    request.trustedRootIdentifier = [self asByteSpan:params.trustedRootIdentifier];

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)updateFabricLabelWithParams:(CHIPOperationalCredentialsClusterUpdateFabricLabelParams *)params
                  completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::UpdateFabricLabel::Type request;
    request.label = [self asCharSpan:params.label];

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)updateNOCWithParams:(CHIPOperationalCredentialsClusterUpdateNOCParams *)params
          completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    OperationalCredentials::Commands::UpdateNOC::Type request;
    request.NOCValue = [self asByteSpan:params.nocValue];
    if (params.icacValue != nil) {
        auto & definedValue_0 = request.ICACValue.Emplace();
        definedValue_0 = [self asByteSpan:params.icacValue];
    }

    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPOperationalCredentialsClusterNOCResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeFabricsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeFabricsList(success, failure);
        });
}

- (void)readAttributeSupportedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSupportedFabrics(success, failure);
    });
}

- (void)subscribeAttributeSupportedFabricsWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSupportedFabrics(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSupportedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSupportedFabrics(success);
        },
        true);
}

- (void)readAttributeCommissionedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCommissionedFabrics(success, failure);
    });
}

- (void)subscribeAttributeCommissionedFabricsWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCommissionedFabrics(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCommissionedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCommissionedFabrics(success);
        },
        true);
}

- (void)readAttributeTrustedRootCertificatesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsTrustedRootCertificatesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTrustedRootCertificates(success, failure);
        });
}

- (void)readAttributeCurrentFabricIndexWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentFabricIndex(success, failure);
    });
}

- (void)subscribeAttributeCurrentFabricIndexWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentFabricIndex(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentFabricIndexWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentFabricIndex(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPPowerSource

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStatus(success, failure);
    });
}

- (void)subscribeAttributeStatusWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStatus(success);
        },
        true);
}

- (void)readAttributeOrderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOrder(success, failure);
    });
}

- (void)subscribeAttributeOrderWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOrder(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOrderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOrder(success);
        },
        true);
}

- (void)readAttributeDescriptionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDescription(success, failure);
    });
}

- (void)subscribeAttributeDescriptionWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeDescription(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeDescriptionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeDescription(success);
        },
        true);
}

- (void)readAttributeBatteryVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryVoltage(success, failure);
    });
}

- (void)subscribeAttributeBatteryVoltageWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBatteryVoltage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBatteryVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBatteryVoltage(success);
        },
        true);
}

- (void)readAttributeBatteryPercentRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryPercentRemaining(success, failure);
    });
}

- (void)subscribeAttributeBatteryPercentRemainingWithMinInterval:(uint16_t)minInterval
                                                     maxInterval:(uint16_t)maxInterval
                                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBatteryPercentRemaining(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBatteryPercentRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBatteryPercentRemaining(success);
        },
        true);
}

- (void)readAttributeBatteryTimeRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryTimeRemaining(success, failure);
    });
}

- (void)subscribeAttributeBatteryTimeRemainingWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBatteryTimeRemaining(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBatteryTimeRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBatteryTimeRemaining(success);
        },
        true);
}

- (void)readAttributeBatteryChargeLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryChargeLevel(success, failure);
    });
}

- (void)subscribeAttributeBatteryChargeLevelWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBatteryChargeLevel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBatteryChargeLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBatteryChargeLevel(success);
        },
        true);
}

- (void)readAttributeActiveBatteryFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveBatteryFaults(success, failure);
        });
}

- (void)readAttributeBatteryChargeStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryChargeState(success, failure);
    });
}

- (void)subscribeAttributeBatteryChargeStateWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBatteryChargeState(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBatteryChargeStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBatteryChargeState(success);
        },
        true);
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)subscribeAttributeFeatureMapWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeFeatureMap(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeFeatureMap(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPPressureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMinMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMaxMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxMeasuredValue(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPPumpConfigurationAndControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMaxPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxPressure(success, failure);
    });
}

- (void)subscribeAttributeMaxPressureWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxPressure(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxPressure(success);
        },
        true);
}

- (void)readAttributeMaxSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxSpeed(success, failure);
    });
}

- (void)subscribeAttributeMaxSpeedWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxSpeed(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxSpeed(success);
        },
        true);
}

- (void)readAttributeMaxFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxFlow(success, failure);
    });
}

- (void)subscribeAttributeMaxFlowWithMinInterval:(uint16_t)minInterval
                                     maxInterval:(uint16_t)maxInterval
                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxFlow(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxFlow(success);
        },
        true);
}

- (void)readAttributeMinConstPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstPressure(success, failure);
    });
}

- (void)subscribeAttributeMinConstPressureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinConstPressure(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinConstPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinConstPressure(success);
        },
        true);
}

- (void)readAttributeMaxConstPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstPressure(success, failure);
    });
}

- (void)subscribeAttributeMaxConstPressureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxConstPressure(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxConstPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxConstPressure(success);
        },
        true);
}

- (void)readAttributeMinCompPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinCompPressure(success, failure);
    });
}

- (void)subscribeAttributeMinCompPressureWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinCompPressure(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinCompPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinCompPressure(success);
        },
        true);
}

- (void)readAttributeMaxCompPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxCompPressure(success, failure);
    });
}

- (void)subscribeAttributeMaxCompPressureWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxCompPressure(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxCompPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxCompPressure(success);
        },
        true);
}

- (void)readAttributeMinConstSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstSpeed(success, failure);
    });
}

- (void)subscribeAttributeMinConstSpeedWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinConstSpeed(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinConstSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinConstSpeed(success);
        },
        true);
}

- (void)readAttributeMaxConstSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstSpeed(success, failure);
    });
}

- (void)subscribeAttributeMaxConstSpeedWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxConstSpeed(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxConstSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxConstSpeed(success);
        },
        true);
}

- (void)readAttributeMinConstFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstFlow(success, failure);
    });
}

- (void)subscribeAttributeMinConstFlowWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinConstFlow(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinConstFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinConstFlow(success);
        },
        true);
}

- (void)readAttributeMaxConstFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstFlow(success, failure);
    });
}

- (void)subscribeAttributeMaxConstFlowWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxConstFlow(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxConstFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxConstFlow(success);
        },
        true);
}

- (void)readAttributeMinConstTempWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinConstTemp(success, failure);
    });
}

- (void)subscribeAttributeMinConstTempWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinConstTemp(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinConstTempWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinConstTemp(success);
        },
        true);
}

- (void)readAttributeMaxConstTempWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxConstTemp(success, failure);
    });
}

- (void)subscribeAttributeMaxConstTempWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxConstTemp(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxConstTempWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxConstTemp(success);
        },
        true);
}

- (void)readAttributePumpStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePumpStatus(success, failure);
    });
}

- (void)subscribeAttributePumpStatusWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePumpStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePumpStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePumpStatus(success);
        },
        true);
}

- (void)readAttributeEffectiveOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEffectiveOperationMode(success, failure);
    });
}

- (void)subscribeAttributeEffectiveOperationModeWithMinInterval:(uint16_t)minInterval
                                                    maxInterval:(uint16_t)maxInterval
                                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeEffectiveOperationMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeEffectiveOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeEffectiveOperationMode(success);
        },
        true);
}

- (void)readAttributeEffectiveControlModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEffectiveControlMode(success, failure);
    });
}

- (void)subscribeAttributeEffectiveControlModeWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeEffectiveControlMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeEffectiveControlModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeEffectiveControlMode(success);
        },
        true);
}

- (void)readAttributeCapacityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCapacity(success, failure);
    });
}

- (void)subscribeAttributeCapacityWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCapacity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCapacityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCapacity(success);
        },
        true);
}

- (void)readAttributeSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSpeed(success, failure);
    });
}

- (void)subscribeAttributeSpeedWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSpeed(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSpeed(success);
        },
        true);
}

- (void)readAttributeLifetimeEnergyConsumedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLifetimeEnergyConsumed(success, failure);
    });
}

- (void)subscribeAttributeLifetimeEnergyConsumedWithMinInterval:(uint16_t)minInterval
                                                    maxInterval:(uint16_t)maxInterval
                                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLifetimeEnergyConsumed(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLifetimeEnergyConsumedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLifetimeEnergyConsumed(success);
        },
        true);
}

- (void)readAttributeOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOperationMode(success, failure);
    });
}

- (void)writeAttributeOperationModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = PumpConfigurationAndControl::Attributes::OperationMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOperationModeWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOperationMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOperationMode(success);
        },
        true);
}

- (void)readAttributeControlModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeControlMode(success, failure);
    });
}

- (void)writeAttributeControlModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = PumpConfigurationAndControl::Attributes::ControlMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeControlModeWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeControlMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeControlModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeControlMode(success);
        },
        true);
}

- (void)readAttributeAlarmMaskWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAlarmMask(success, failure);
    });
}

- (void)subscribeAttributeAlarmMaskWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeAlarmMask(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeAlarmMaskWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeAlarmMask(success);
        },
        true);
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)subscribeAttributeFeatureMapWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeFeatureMap(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeFeatureMap(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPRelativeHumidityMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMinMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMaxMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxMeasuredValue(success);
        },
        true);
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)subscribeAttributeToleranceWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTolerance(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTolerance(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPScenes

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addSceneWithParams:(CHIPScenesClusterAddSceneParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Scenes::Commands::AddScene::Type request;
    request.groupId = params.groupId.unsignedShortValue;
    request.sceneId = params.sceneId.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;
    request.sceneName = [self asCharSpan:params.sceneName];
    {
        using ListType = std::remove_reference_t<decltype(request.extensionFieldSets)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (params.extensionFieldSets.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(params.extensionFieldSets.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < params.extensionFieldSets.count; ++i) {
                if (![params.extensionFieldSets[i] isKindOfClass:[CHIPScenesClusterSceneExtensionFieldSet class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (CHIPScenesClusterSceneExtensionFieldSet *) params.extensionFieldSets[i];
                listHolder_0->mList[i].clusterId = element_0.clusterId.unsignedIntValue;
                listHolder_0->mList[i].length = element_0.length.unsignedCharValue;
                listHolder_0->mList[i].value = element_0.value.unsignedCharValue;
            }
            request.extensionFieldSets = ListType(listHolder_0->mList, params.extensionFieldSets.count);
        } else {
            request.extensionFieldSets = ListType();
        }
    }

    new CHIPScenesClusterAddSceneResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterAddSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)getSceneMembershipWithParams:(CHIPScenesClusterGetSceneMembershipParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Scenes::Commands::GetSceneMembership::Type request;
    request.groupId = params.groupId.unsignedShortValue;

    new CHIPScenesClusterGetSceneMembershipResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterGetSceneMembershipResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)recallSceneWithParams:(CHIPScenesClusterRecallSceneParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Scenes::Commands::RecallScene::Type request;
    request.groupId = params.groupId.unsignedShortValue;
    request.sceneId = params.sceneId.unsignedCharValue;
    request.transitionTime = params.transitionTime.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)removeAllScenesWithParams:(CHIPScenesClusterRemoveAllScenesParams *)params
                completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Scenes::Commands::RemoveAllScenes::Type request;
    request.groupId = params.groupId.unsignedShortValue;

    new CHIPScenesClusterRemoveAllScenesResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterRemoveAllScenesResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)removeSceneWithParams:(CHIPScenesClusterRemoveSceneParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Scenes::Commands::RemoveScene::Type request;
    request.groupId = params.groupId.unsignedShortValue;
    request.sceneId = params.sceneId.unsignedCharValue;

    new CHIPScenesClusterRemoveSceneResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterRemoveSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)storeSceneWithParams:(CHIPScenesClusterStoreSceneParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Scenes::Commands::StoreScene::Type request;
    request.groupId = params.groupId.unsignedShortValue;
    request.sceneId = params.sceneId.unsignedCharValue;

    new CHIPScenesClusterStoreSceneResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterStoreSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)viewSceneWithParams:(CHIPScenesClusterViewSceneParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Scenes::Commands::ViewScene::Type request;
    request.groupId = params.groupId.unsignedShortValue;
    request.sceneId = params.sceneId.unsignedCharValue;

    new CHIPScenesClusterViewSceneResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPScenesClusterViewSceneResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeSceneCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSceneCount(success, failure);
    });
}

- (void)subscribeAttributeSceneCountWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSceneCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSceneCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSceneCount(success);
        },
        true);
}

- (void)readAttributeCurrentSceneWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentScene(success, failure);
    });
}

- (void)subscribeAttributeCurrentSceneWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentScene(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentSceneWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentScene(success);
        },
        true);
}

- (void)readAttributeCurrentGroupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentGroup(success, failure);
    });
}

- (void)subscribeAttributeCurrentGroupWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentGroup(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentGroupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentGroup(success);
        },
        true);
}

- (void)readAttributeSceneValidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSceneValid(success, failure);
    });
}

- (void)subscribeAttributeSceneValidWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSceneValid(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSceneValidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSceneValid(success);
        },
        true);
}

- (void)readAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNameSupport(success, failure);
    });
}

- (void)subscribeAttributeNameSupportWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNameSupport(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNameSupport(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPSoftwareDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetWatermarksWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    SoftwareDiagnostics::Commands::ResetWatermarks::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeThreadMetricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPSoftwareDiagnosticsThreadMetricsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeThreadMetrics(success, failure);
        });
}

- (void)readAttributeCurrentHeapFreeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapFree(success, failure);
    });
}

- (void)subscribeAttributeCurrentHeapFreeWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentHeapFree(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentHeapFreeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentHeapFree(success);
        },
        true);
}

- (void)readAttributeCurrentHeapUsedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapUsed(success, failure);
    });
}

- (void)subscribeAttributeCurrentHeapUsedWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentHeapUsed(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentHeapUsedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentHeapUsed(success);
        },
        true);
}

- (void)readAttributeCurrentHeapHighWatermarkWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapHighWatermark(success, failure);
    });
}

- (void)subscribeAttributeCurrentHeapHighWatermarkWithMinInterval:(uint16_t)minInterval
                                                      maxInterval:(uint16_t)maxInterval
                                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentHeapHighWatermark(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentHeapHighWatermarkWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentHeapHighWatermark(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPSwitch

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeNumberOfPositionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfPositions(success, failure);
    });
}

- (void)subscribeAttributeNumberOfPositionsWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNumberOfPositions(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNumberOfPositionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNumberOfPositions(success);
        },
        true);
}

- (void)readAttributeCurrentPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPosition(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPosition(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPosition(success);
        },
        true);
}

- (void)readAttributeMultiPressMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMultiPressMax(success, failure);
    });
}

- (void)subscribeAttributeMultiPressMaxWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMultiPressMax(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMultiPressMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMultiPressMax(success);
        },
        true);
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)subscribeAttributeFeatureMapWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeFeatureMap(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeFeatureMap(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPTvChannel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeChannelWithParams:(CHIPTvChannelClusterChangeChannelParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TvChannel::Commands::ChangeChannel::Type request;
    request.match = [self asCharSpan:params.match];

    new CHIPTvChannelClusterChangeChannelResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTvChannelClusterChangeChannelResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)changeChannelByNumberWithParams:(CHIPTvChannelClusterChangeChannelByNumberParams *)params
                      completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TvChannel::Commands::ChangeChannelByNumber::Type request;
    request.majorNumber = params.majorNumber.unsignedShortValue;
    request.minorNumber = params.minorNumber.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)skipChannelWithParams:(CHIPTvChannelClusterSkipChannelParams *)params completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TvChannel::Commands::SkipChannel::Type request;
    request.count = params.count.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeTvChannelListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTvChannelTvChannelListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTvChannelList(success, failure);
        });
}

- (void)readAttributeTvChannelLineupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTvChannelLineup(success, failure);
    });
}

- (void)subscribeAttributeTvChannelLineupWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTvChannelLineup(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTvChannelLineupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTvChannelLineup(success);
        },
        true);
}

- (void)readAttributeCurrentTvChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentTvChannel(success, failure);
    });
}

- (void)subscribeAttributeCurrentTvChannelWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentTvChannel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentTvChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentTvChannel(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPTargetNavigator

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)navigateTargetWithParams:(CHIPTargetNavigatorClusterNavigateTargetParams *)params
               completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TargetNavigator::Commands::NavigateTarget::Type request;
    request.target = params.target.unsignedCharValue;
    request.data = [self asCharSpan:params.data];

    new CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTargetNavigatorClusterNavigateTargetResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)readAttributeTargetNavigatorListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTargetNavigatorList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPTemperatureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMinMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMaxMeasuredValueWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxMeasuredValue(success);
        },
        true);
}

- (void)readAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTolerance(success, failure);
    });
}

- (void)subscribeAttributeToleranceWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTolerance(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeToleranceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTolerance(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPTestCluster

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)testWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::Test::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)testAddArgumentsWithParams:(CHIPTestClusterClusterTestAddArgumentsParams *)params
                 completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestAddArguments::Type request;
    request.arg1 = params.arg1.unsignedCharValue;
    request.arg2 = params.arg2.unsignedCharValue;

    new CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestAddArgumentsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testEnumsRequestWithParams:(CHIPTestClusterClusterTestEnumsRequestParams *)params
                 completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestEnumsRequest::Type request;
    request.arg1 = static_cast<std::remove_reference_t<decltype(request.arg1)>>(params.arg1.unsignedShortValue);
    request.arg2 = static_cast<std::remove_reference_t<decltype(request.arg2)>>(params.arg2.unsignedCharValue);

    new CHIPTestClusterClusterTestEnumsResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestEnumsResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testListInt8UArgumentRequestWithParams:(CHIPTestClusterClusterTestListInt8UArgumentRequestParams *)params
                             completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestListInt8UArgumentRequest::Type request;
    {
        using ListType = std::remove_reference_t<decltype(request.arg1)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (params.arg1.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(params.arg1.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < params.arg1.count; ++i) {
                if (![params.arg1[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) params.arg1[i];
                listHolder_0->mList[i] = element_0.unsignedCharValue;
            }
            request.arg1 = ListType(listHolder_0->mList, params.arg1.count);
        } else {
            request.arg1 = ListType();
        }
    }

    new CHIPTestClusterClusterBooleanResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterBooleanResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testListInt8UReverseRequestWithParams:(CHIPTestClusterClusterTestListInt8UReverseRequestParams *)params
                            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestListInt8UReverseRequest::Type request;
    {
        using ListType = std::remove_reference_t<decltype(request.arg1)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (params.arg1.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(params.arg1.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < params.arg1.count; ++i) {
                if (![params.arg1[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) params.arg1[i];
                listHolder_0->mList[i] = element_0.unsignedCharValue;
            }
            request.arg1 = ListType(listHolder_0->mList, params.arg1.count);
        } else {
            request.arg1 = ListType();
        }
    }

    new CHIPTestClusterClusterTestListInt8UReverseResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestListInt8UReverseResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testListStructArgumentRequestWithParams:(CHIPTestClusterClusterTestListStructArgumentRequestParams *)params
                              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestListStructArgumentRequest::Type request;
    {
        using ListType = std::remove_reference_t<decltype(request.arg1)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (params.arg1.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(params.arg1.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < params.arg1.count; ++i) {
                if (![params.arg1[i] isKindOfClass:[CHIPTestClusterClusterSimpleStruct class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (CHIPTestClusterClusterSimpleStruct *) params.arg1[i];
                listHolder_0->mList[i].a = element_0.a.unsignedCharValue;
                listHolder_0->mList[i].b = element_0.b.boolValue;
                listHolder_0->mList[i].c
                    = static_cast<std::remove_reference_t<decltype(listHolder_0->mList[i].c)>>(element_0.c.unsignedCharValue);
                listHolder_0->mList[i].d = [self asByteSpan:element_0.d];
                listHolder_0->mList[i].e = [self asCharSpan:element_0.e];
                listHolder_0->mList[i].f
                    = static_cast<std::remove_reference_t<decltype(listHolder_0->mList[i].f)>>(element_0.f.unsignedCharValue);
            }
            request.arg1 = ListType(listHolder_0->mList, params.arg1.count);
        } else {
            request.arg1 = ListType();
        }
    }

    new CHIPTestClusterClusterBooleanResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterBooleanResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testNotHandledWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestNotHandled::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)testNullableOptionalRequestWithParams:(CHIPTestClusterClusterTestNullableOptionalRequestParams * _Nullable)params
                            completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestNullableOptionalRequest::Type request;
    if (params != nil) {
        if (params.arg1 != nil) {
            auto & definedValue_0 = request.arg1.Emplace();
            if (params.arg1 == nil) {
                definedValue_0.SetNull();
            } else {
                auto & nonNullValue_1 = definedValue_0.SetNonNull();
                nonNullValue_1 = params.arg1.unsignedCharValue;
            }
        }
    }

    new CHIPTestClusterClusterTestNullableOptionalResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestNullableOptionalResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testSpecificWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestSpecific::Type request;

    new CHIPTestClusterClusterTestSpecificResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterTestSpecificResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testStructArgumentRequestWithParams:(CHIPTestClusterClusterTestStructArgumentRequestParams *)params
                          completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestStructArgumentRequest::Type request;
    request.arg1.a = params.arg1.a.unsignedCharValue;
    request.arg1.b = params.arg1.b.boolValue;
    request.arg1.c = static_cast<std::remove_reference_t<decltype(request.arg1.c)>>(params.arg1.c.unsignedCharValue);
    request.arg1.d = [self asByteSpan:params.arg1.d];
    request.arg1.e = [self asCharSpan:params.arg1.e];
    request.arg1.f = static_cast<std::remove_reference_t<decltype(request.arg1.f)>>(params.arg1.f.unsignedCharValue);

    new CHIPTestClusterClusterBooleanResponseCallbackBridge(
        self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
            auto successFn = Callback<CHIPTestClusterClusterBooleanResponseCallbackType>::FromCancelable(success);
            auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
            return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
        });
}

- (void)testUnknownCommandWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    TestCluster::Commands::TestUnknownCommand::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBooleanWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBoolean(success, failure);
    });
}

- (void)writeAttributeBooleanWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Boolean::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeBooleanWithMinInterval:(uint16_t)minInterval
                                     maxInterval:(uint16_t)maxInterval
                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBoolean(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBooleanWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBoolean(success);
        },
        true);
}

- (void)readAttributeBitmap8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap8(success, failure);
    });
}

- (void)writeAttributeBitmap8WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Bitmap8::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeBitmap8WithMinInterval:(uint16_t)minInterval
                                     maxInterval:(uint16_t)maxInterval
                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBitmap8(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBitmap8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBitmap8(success);
        },
        true);
}

- (void)readAttributeBitmap16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap16(success, failure);
    });
}

- (void)writeAttributeBitmap16WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Bitmap16::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeBitmap16WithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBitmap16(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBitmap16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBitmap16(success);
        },
        true);
}

- (void)readAttributeBitmap32WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap32(success, failure);
    });
}

- (void)writeAttributeBitmap32WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Bitmap32::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedIntValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeBitmap32WithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBitmap32(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBitmap32WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBitmap32(success);
        },
        true);
}

- (void)readAttributeBitmap64WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap64(success, failure);
    });
}

- (void)writeAttributeBitmap64WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Bitmap64::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedLongLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeBitmap64WithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBitmap64(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBitmap64WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBitmap64(success);
        },
        true);
}

- (void)readAttributeInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt8u(success, failure);
    });
}

- (void)writeAttributeInt8uWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int8u::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeInt8uWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInt8u(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInt8u(success);
        },
        true);
}

- (void)readAttributeInt16uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt16u(success, failure);
    });
}

- (void)writeAttributeInt16uWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int16u::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedShortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeInt16uWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInt16u(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInt16uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInt16u(success);
        },
        true);
}

- (void)readAttributeInt32uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt32u(success, failure);
    });
}

- (void)writeAttributeInt32uWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int32u::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedIntValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeInt32uWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInt32u(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInt32uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInt32u(success);
        },
        true);
}

- (void)readAttributeInt64uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt64u(success, failure);
    });
}

- (void)writeAttributeInt64uWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int64u::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedLongLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeInt64uWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInt64u(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInt64uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInt64u(success);
        },
        true);
}

- (void)readAttributeInt8sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt8s(success, failure);
    });
}

- (void)writeAttributeInt8sWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int8s::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.charValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeInt8sWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInt8s(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInt8sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInt8s(success);
        },
        true);
}

- (void)readAttributeInt16sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt16s(success, failure);
    });
}

- (void)writeAttributeInt16sWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int16s::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeInt16sWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInt16s(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInt16sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInt16s(success);
        },
        true);
}

- (void)readAttributeInt32sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt32s(success, failure);
    });
}

- (void)writeAttributeInt32sWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int32s::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.intValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeInt32sWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInt32s(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInt32sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInt32s(success);
        },
        true);
}

- (void)readAttributeInt64sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt64s(success, failure);
    });
}

- (void)writeAttributeInt64sWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Int64s::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.longLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeInt64sWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInt64s(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInt64sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInt64s(success);
        },
        true);
}

- (void)readAttributeEnum8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnum8(success, failure);
    });
}

- (void)writeAttributeEnum8WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Enum8::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeEnum8WithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeEnum8(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeEnum8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeEnum8(success);
        },
        true);
}

- (void)readAttributeEnum16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnum16(success, failure);
    });
}

- (void)writeAttributeEnum16WithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Enum16::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedShortValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeEnum16WithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeEnum16(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeEnum16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeEnum16(success);
        },
        true);
}

- (void)readAttributeOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOctetString(success, failure);
    });
}

- (void)writeAttributeOctetStringWithValue:(NSData * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::OctetString::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asByteSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOctetStringWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOctetString(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOctetString(success);
        },
        true);
}

- (void)readAttributeListInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListInt8uListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListInt8u(success, failure);
        });
}

- (void)writeAttributeListInt8uWithValue:(NSArray * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::ListInt8u::TypeInfo;
        TypeInfo::Type cppValue;
        {
            using ListType = std::remove_reference_t<decltype(cppValue)>;
            using ListMemberType = ListMemberTypeGetter<ListType>::Type;
            if (value.count != 0) {
                auto * listHolder_0 = new ListHolder<ListMemberType>(value.count);
                if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                    return CHIP_ERROR_INVALID_ARGUMENT;
                }
                listFreer.add(listHolder_0);
                for (size_t i = 0; i < value.count; ++i) {
                    if (![value[i] isKindOfClass:[NSNumber class]]) {
                        // Wrong kind of value.
                        return CHIP_ERROR_INVALID_ARGUMENT;
                    }
                    auto element_0 = (NSNumber *) value[i];
                    listHolder_0->mList[i] = element_0.unsignedCharValue;
                }
                cppValue = ListType(listHolder_0->mList, value.count);
            } else {
                cppValue = ListType();
            }
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeListOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListOctetStringListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListOctetString(success, failure);
        });
}

- (void)writeAttributeListOctetStringWithValue:(NSArray * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::ListOctetString::TypeInfo;
        TypeInfo::Type cppValue;
        {
            using ListType = std::remove_reference_t<decltype(cppValue)>;
            using ListMemberType = ListMemberTypeGetter<ListType>::Type;
            if (value.count != 0) {
                auto * listHolder_0 = new ListHolder<ListMemberType>(value.count);
                if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                    return CHIP_ERROR_INVALID_ARGUMENT;
                }
                listFreer.add(listHolder_0);
                for (size_t i = 0; i < value.count; ++i) {
                    if (![value[i] isKindOfClass:[NSData class]]) {
                        // Wrong kind of value.
                        return CHIP_ERROR_INVALID_ARGUMENT;
                    }
                    auto element_0 = (NSData *) value[i];
                    listHolder_0->mList[i] = [self asByteSpan:element_0];
                }
                cppValue = ListType(listHolder_0->mList, value.count);
            } else {
                cppValue = ListType();
            }
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeListStructOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListStructOctetStringListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListStructOctetString(success, failure);
        });
}

- (void)writeAttributeListStructOctetStringWithValue:(NSArray * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::ListStructOctetString::TypeInfo;
        TypeInfo::Type cppValue;
        {
            using ListType = std::remove_reference_t<decltype(cppValue)>;
            using ListMemberType = ListMemberTypeGetter<ListType>::Type;
            if (value.count != 0) {
                auto * listHolder_0 = new ListHolder<ListMemberType>(value.count);
                if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                    return CHIP_ERROR_INVALID_ARGUMENT;
                }
                listFreer.add(listHolder_0);
                for (size_t i = 0; i < value.count; ++i) {
                    if (![value[i] isKindOfClass:[CHIPTestClusterClusterTestListStructOctet class]]) {
                        // Wrong kind of value.
                        return CHIP_ERROR_INVALID_ARGUMENT;
                    }
                    auto element_0 = (CHIPTestClusterClusterTestListStructOctet *) value[i];
                    listHolder_0->mList[i].fabricIndex = element_0.fabricIndex.unsignedLongLongValue;
                    listHolder_0->mList[i].operationalCert = [self asByteSpan:element_0.operationalCert];
                }
                cppValue = ListType(listHolder_0->mList, value.count);
            } else {
                cppValue = ListType();
            }
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeLongOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLongOctetString(success, failure);
    });
}

- (void)writeAttributeLongOctetStringWithValue:(NSData * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::LongOctetString::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asByteSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeLongOctetStringWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLongOctetString(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLongOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLongOctetString(success);
        },
        true);
}

- (void)readAttributeCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCharString(success, failure);
    });
}

- (void)writeAttributeCharStringWithValue:(NSString * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::CharString::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asCharSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeCharStringWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCharString(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCharString(success);
        },
        true);
}

- (void)readAttributeLongCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLongCharString(success, failure);
    });
}

- (void)writeAttributeLongCharStringWithValue:(NSString * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::LongCharString::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = [self asCharSpan:value];
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeLongCharStringWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLongCharString(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLongCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLongCharString(success);
        },
        true);
}

- (void)readAttributeEpochUsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEpochUs(success, failure);
    });
}

- (void)writeAttributeEpochUsWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::EpochUs::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedLongLongValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeEpochUsWithMinInterval:(uint16_t)minInterval
                                     maxInterval:(uint16_t)maxInterval
                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeEpochUs(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeEpochUsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeEpochUs(success);
        },
        true);
}

- (void)readAttributeEpochSWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEpochS(success, failure);
    });
}

- (void)writeAttributeEpochSWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::EpochS::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedIntValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeEpochSWithMinInterval:(uint16_t)minInterval
                                    maxInterval:(uint16_t)maxInterval
                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeEpochS(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeEpochSWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeEpochS(success);
        },
        true);
}

- (void)readAttributeVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorId(success, failure);
    });
}

- (void)writeAttributeVendorIdWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::VendorId::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedShortValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeVendorIdWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeVendorId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeVendorId(success);
        },
        true);
}

- (void)readAttributeListNullablesAndOptionalsStructWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListNullablesAndOptionalsStructListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListNullablesAndOptionalsStruct(success, failure);
        });
}

- (void)readAttributeUnsupportedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUnsupported(success, failure);
    });
}

- (void)writeAttributeUnsupportedWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::Unsupported::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.boolValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeUnsupportedWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeUnsupported(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeUnsupportedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeUnsupported(success);
        },
        true);
}

- (void)readAttributeNullableBooleanWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBoolean(success, failure);
    });
}

- (void)writeAttributeNullableBooleanWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBoolean::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.boolValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableBooleanWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableBoolean(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableBooleanWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableBoolean(success);
        },
        true);
}

- (void)readAttributeNullableBitmap8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap8(success, failure);
    });
}

- (void)writeAttributeNullableBitmap8WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBitmap8::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedCharValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableBitmap8WithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableBitmap8(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableBitmap8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableBitmap8(success);
        },
        true);
}

- (void)readAttributeNullableBitmap16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap16(success, failure);
    });
}

- (void)writeAttributeNullableBitmap16WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBitmap16::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedShortValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableBitmap16WithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableBitmap16(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableBitmap16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableBitmap16(success);
        },
        true);
}

- (void)readAttributeNullableBitmap32WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap32(success, failure);
    });
}

- (void)writeAttributeNullableBitmap32WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBitmap32::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedIntValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableBitmap32WithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableBitmap32(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableBitmap32WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableBitmap32(success);
        },
        true);
}

- (void)readAttributeNullableBitmap64WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableBitmap64(success, failure);
    });
}

- (void)writeAttributeNullableBitmap64WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableBitmap64::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedLongLongValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableBitmap64WithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableBitmap64(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableBitmap64WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableBitmap64(success);
        },
        true);
}

- (void)readAttributeNullableInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt8u(success, failure);
    });
}

- (void)writeAttributeNullableInt8uWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt8u::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedCharValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableInt8uWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableInt8u(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableInt8u(success);
        },
        true);
}

- (void)readAttributeNullableInt16uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt16u(success, failure);
    });
}

- (void)writeAttributeNullableInt16uWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt16u::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedShortValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableInt16uWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableInt16u(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableInt16uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableInt16u(success);
        },
        true);
}

- (void)readAttributeNullableInt32uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt32u(success, failure);
    });
}

- (void)writeAttributeNullableInt32uWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt32u::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedIntValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableInt32uWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableInt32u(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableInt32uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableInt32u(success);
        },
        true);
}

- (void)readAttributeNullableInt64uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt64u(success, failure);
    });
}

- (void)writeAttributeNullableInt64uWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt64u::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.unsignedLongLongValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableInt64uWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableInt64u(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableInt64uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableInt64u(success);
        },
        true);
}

- (void)readAttributeNullableInt8sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt8s(success, failure);
    });
}

- (void)writeAttributeNullableInt8sWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt8s::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.charValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableInt8sWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableInt8s(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableInt8sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableInt8s(success);
        },
        true);
}

- (void)readAttributeNullableInt16sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt16s(success, failure);
    });
}

- (void)writeAttributeNullableInt16sWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt16s::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.shortValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableInt16sWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableInt16s(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableInt16sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableInt16s(success);
        },
        true);
}

- (void)readAttributeNullableInt32sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt32s(success, failure);
    });
}

- (void)writeAttributeNullableInt32sWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt32s::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.intValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableInt32sWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableInt32s(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableInt32sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableInt32s(success);
        },
        true);
}

- (void)readAttributeNullableInt64sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableInt64s(success, failure);
    });
}

- (void)writeAttributeNullableInt64sWithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableInt64s::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = value.longLongValue;
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableInt64sWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableInt64s(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableInt64sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableInt64s(success);
        },
        true);
}

- (void)readAttributeNullableEnum8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableEnum8(success, failure);
    });
}

- (void)writeAttributeNullableEnum8WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableEnum8::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = static_cast<std::remove_reference_t<decltype(nonNullValue_0)>>(value.unsignedCharValue);
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableEnum8WithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableEnum8(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableEnum8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableEnum8(success);
        },
        true);
}

- (void)readAttributeNullableEnum16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableEnum16(success, failure);
    });
}

- (void)writeAttributeNullableEnum16WithValue:(NSNumber * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableEnum16::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = static_cast<std::remove_reference_t<decltype(nonNullValue_0)>>(value.unsignedShortValue);
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableEnum16WithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableEnum16(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableEnum16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableEnum16(success);
        },
        true);
}

- (void)readAttributeNullableOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableOctetString(success, failure);
    });
}

- (void)writeAttributeNullableOctetStringWithValue:(NSData * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableOctetString::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = [self asByteSpan:value];
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableOctetStringWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableOctetString(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableOctetString(success);
        },
        true);
}

- (void)readAttributeNullableCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNullableCharString(success, failure);
    });
}

- (void)writeAttributeNullableCharStringWithValue:(NSString * _Nullable)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = TestCluster::Attributes::NullableCharString::TypeInfo;
        TypeInfo::Type cppValue;
        if (value == nil) {
            cppValue.SetNull();
        } else {
            auto & nonNullValue_0 = cppValue.SetNonNull();
            nonNullValue_0 = [self asCharSpan:value];
        }
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeNullableCharStringWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNullableCharString(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNullableCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNullableCharString(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPThermostat

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)clearWeeklyScheduleWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Thermostat::Commands::ClearWeeklySchedule::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)getRelayStatusLogWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Thermostat::Commands::GetRelayStatusLog::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)getWeeklyScheduleWithParams:(CHIPThermostatClusterGetWeeklyScheduleParams *)params
                  completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Thermostat::Commands::GetWeeklySchedule::Type request;
    request.daysToReturn
        = static_cast<std::remove_reference_t<decltype(request.daysToReturn)>>(params.daysToReturn.unsignedCharValue);
    request.modeToReturn
        = static_cast<std::remove_reference_t<decltype(request.modeToReturn)>>(params.modeToReturn.unsignedCharValue);

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)setWeeklyScheduleWithParams:(CHIPThermostatClusterSetWeeklyScheduleParams *)params
                  completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Thermostat::Commands::SetWeeklySchedule::Type request;
    request.numberOfTransitionsForSequence = params.numberOfTransitionsForSequence.unsignedCharValue;
    request.dayOfWeekForSequence = static_cast<std::remove_reference_t<decltype(request.dayOfWeekForSequence)>>(
        params.dayOfWeekForSequence.unsignedCharValue);
    request.modeForSequence
        = static_cast<std::remove_reference_t<decltype(request.modeForSequence)>>(params.modeForSequence.unsignedCharValue);
    {
        using ListType = std::remove_reference_t<decltype(request.payload)>;
        using ListMemberType = ListMemberTypeGetter<ListType>::Type;
        if (params.payload.count != 0) {
            auto * listHolder_0 = new ListHolder<ListMemberType>(params.payload.count);
            if (listHolder_0 == nullptr || listHolder_0->mList == nullptr) {
                return;
            }
            listFreer.add(listHolder_0);
            for (size_t i = 0; i < params.payload.count; ++i) {
                if (![params.payload[i] isKindOfClass:[NSNumber class]]) {
                    // Wrong kind of value.
                    return;
                }
                auto element_0 = (NSNumber *) params.payload[i];
                listHolder_0->mList[i] = element_0.unsignedCharValue;
            }
            request.payload = ListType(listHolder_0->mList, params.payload.count);
        } else {
            request.payload = ListType();
        }
    }

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)setpointRaiseLowerWithParams:(CHIPThermostatClusterSetpointRaiseLowerParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    Thermostat::Commands::SetpointRaiseLower::Type request;
    request.mode = static_cast<std::remove_reference_t<decltype(request.mode)>>(params.mode.unsignedCharValue);
    request.amount = params.amount.charValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeLocalTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocalTemperature(success, failure);
    });
}

- (void)subscribeAttributeLocalTemperatureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLocalTemperature(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLocalTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLocalTemperature(success);
        },
        true);
}

- (void)readAttributeAbsMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMinHeatSetpointLimit(success, failure);
    });
}

- (void)subscribeAttributeAbsMinHeatSetpointLimitWithMinInterval:(uint16_t)minInterval
                                                     maxInterval:(uint16_t)maxInterval
                                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeAbsMinHeatSetpointLimit(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeAbsMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeAbsMinHeatSetpointLimit(success);
        },
        true);
}

- (void)readAttributeAbsMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMaxHeatSetpointLimit(success, failure);
    });
}

- (void)subscribeAttributeAbsMaxHeatSetpointLimitWithMinInterval:(uint16_t)minInterval
                                                     maxInterval:(uint16_t)maxInterval
                                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeAbsMaxHeatSetpointLimit(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeAbsMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeAbsMaxHeatSetpointLimit(success);
        },
        true);
}

- (void)readAttributeAbsMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMinCoolSetpointLimit(success, failure);
    });
}

- (void)subscribeAttributeAbsMinCoolSetpointLimitWithMinInterval:(uint16_t)minInterval
                                                     maxInterval:(uint16_t)maxInterval
                                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeAbsMinCoolSetpointLimit(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeAbsMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeAbsMinCoolSetpointLimit(success);
        },
        true);
}

- (void)readAttributeAbsMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMaxCoolSetpointLimit(success, failure);
    });
}

- (void)subscribeAttributeAbsMaxCoolSetpointLimitWithMinInterval:(uint16_t)minInterval
                                                     maxInterval:(uint16_t)maxInterval
                                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeAbsMaxCoolSetpointLimit(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeAbsMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeAbsMaxCoolSetpointLimit(success);
        },
        true);
}

- (void)readAttributeOccupiedCoolingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupiedCoolingSetpoint(success, failure);
    });
}

- (void)writeAttributeOccupiedCoolingSetpointWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::OccupiedCoolingSetpoint::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOccupiedCoolingSetpointWithMinInterval:(uint16_t)minInterval
                                                     maxInterval:(uint16_t)maxInterval
                                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOccupiedCoolingSetpoint(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOccupiedCoolingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOccupiedCoolingSetpoint(success);
        },
        true);
}

- (void)readAttributeOccupiedHeatingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupiedHeatingSetpoint(success, failure);
    });
}

- (void)writeAttributeOccupiedHeatingSetpointWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::OccupiedHeatingSetpoint::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeOccupiedHeatingSetpointWithMinInterval:(uint16_t)minInterval
                                                     maxInterval:(uint16_t)maxInterval
                                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOccupiedHeatingSetpoint(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOccupiedHeatingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOccupiedHeatingSetpoint(success);
        },
        true);
}

- (void)readAttributeMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinHeatSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMinHeatSetpointLimitWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MinHeatSetpointLimit::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeMinHeatSetpointLimitWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinHeatSetpointLimit(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinHeatSetpointLimit(success);
        },
        true);
}

- (void)readAttributeMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxHeatSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMaxHeatSetpointLimitWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MaxHeatSetpointLimit::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeMaxHeatSetpointLimitWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxHeatSetpointLimit(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxHeatSetpointLimit(success);
        },
        true);
}

- (void)readAttributeMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinCoolSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMinCoolSetpointLimitWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MinCoolSetpointLimit::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeMinCoolSetpointLimitWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinCoolSetpointLimit(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinCoolSetpointLimit(success);
        },
        true);
}

- (void)readAttributeMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxCoolSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMaxCoolSetpointLimitWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MaxCoolSetpointLimit::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.shortValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeMaxCoolSetpointLimitWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMaxCoolSetpointLimit(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMaxCoolSetpointLimit(success);
        },
        true);
}

- (void)readAttributeMinSetpointDeadBandWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinSetpointDeadBand(success, failure);
    });
}

- (void)writeAttributeMinSetpointDeadBandWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::MinSetpointDeadBand::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.charValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeMinSetpointDeadBandWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMinSetpointDeadBand(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMinSetpointDeadBandWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMinSetpointDeadBand(success);
        },
        true);
}

- (void)readAttributeControlSequenceOfOperationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeControlSequenceOfOperation(success, failure);
    });
}

- (void)writeAttributeControlSequenceOfOperationWithValue:(NSNumber * _Nonnull)value
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::ControlSequenceOfOperation::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeControlSequenceOfOperationWithMinInterval:(uint16_t)minInterval
                                                        maxInterval:(uint16_t)maxInterval
                                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeControlSequenceOfOperation(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeControlSequenceOfOperationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeControlSequenceOfOperation(success);
        },
        true);
}

- (void)readAttributeSystemModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSystemMode(success, failure);
    });
}

- (void)writeAttributeSystemModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = Thermostat::Attributes::SystemMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeSystemModeWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSystemMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSystemModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSystemMode(success);
        },
        true);
}

- (void)readAttributeStartOfWeekWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartOfWeek(success, failure);
    });
}

- (void)subscribeAttributeStartOfWeekWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStartOfWeek(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStartOfWeekWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStartOfWeek(success);
        },
        true);
}

- (void)readAttributeNumberOfWeeklyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfWeeklyTransitions(success, failure);
    });
}

- (void)subscribeAttributeNumberOfWeeklyTransitionsWithMinInterval:(uint16_t)minInterval
                                                       maxInterval:(uint16_t)maxInterval
                                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNumberOfWeeklyTransitions(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNumberOfWeeklyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNumberOfWeeklyTransitions(success);
        },
        true);
}

- (void)readAttributeNumberOfDailyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfDailyTransitions(success, failure);
    });
}

- (void)subscribeAttributeNumberOfDailyTransitionsWithMinInterval:(uint16_t)minInterval
                                                      maxInterval:(uint16_t)maxInterval
                                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNumberOfDailyTransitions(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNumberOfDailyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNumberOfDailyTransitions(success);
        },
        true);
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)subscribeAttributeFeatureMapWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeFeatureMap(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeFeatureMap(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPThermostatUserInterfaceConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeTemperatureDisplayModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTemperatureDisplayMode(success, failure);
    });
}

- (void)writeAttributeTemperatureDisplayModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ThermostatUserInterfaceConfiguration::Attributes::TemperatureDisplayMode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeTemperatureDisplayModeWithMinInterval:(uint16_t)minInterval
                                                    maxInterval:(uint16_t)maxInterval
                                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTemperatureDisplayMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTemperatureDisplayModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTemperatureDisplayMode(success);
        },
        true);
}

- (void)readAttributeKeypadLockoutWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeKeypadLockout(success, failure);
    });
}

- (void)writeAttributeKeypadLockoutWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ThermostatUserInterfaceConfiguration::Attributes::KeypadLockout::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeKeypadLockoutWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeKeypadLockout(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeKeypadLockoutWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeKeypadLockout(success);
        },
        true);
}

- (void)readAttributeScheduleProgrammingVisibilityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeScheduleProgrammingVisibility(success, failure);
    });
}

- (void)writeAttributeScheduleProgrammingVisibilityWithValue:(NSNumber * _Nonnull)value
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = ThermostatUserInterfaceConfiguration::Attributes::ScheduleProgrammingVisibility::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = static_cast<std::remove_reference_t<decltype(cppValue)>>(value.unsignedCharValue);
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeScheduleProgrammingVisibilityWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeScheduleProgrammingVisibility(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeScheduleProgrammingVisibilityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeScheduleProgrammingVisibility(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPThreadNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCountsWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    ThreadNetworkDiagnostics::Commands::ResetCounts::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannel(success, failure);
    });
}

- (void)subscribeAttributeChannelWithMinInterval:(uint16_t)minInterval
                                     maxInterval:(uint16_t)maxInterval
                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeChannel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeChannel(success);
        },
        true);
}

- (void)readAttributeRoutingRoleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRoutingRole(success, failure);
    });
}

- (void)subscribeAttributeRoutingRoleWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRoutingRole(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRoutingRoleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRoutingRole(success);
        },
        true);
}

- (void)readAttributeNetworkNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNetworkName(success, failure);
    });
}

- (void)subscribeAttributeNetworkNameWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeNetworkName(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeNetworkNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeNetworkName(success);
        },
        true);
}

- (void)readAttributePanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePanId(success, failure);
    });
}

- (void)subscribeAttributePanIdWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePanId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePanId(success);
        },
        true);
}

- (void)readAttributeExtendedPanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeExtendedPanId(success, failure);
    });
}

- (void)subscribeAttributeExtendedPanIdWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeExtendedPanId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeExtendedPanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeExtendedPanId(success);
        },
        true);
}

- (void)readAttributeMeshLocalPrefixWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeshLocalPrefix(success, failure);
    });
}

- (void)subscribeAttributeMeshLocalPrefixWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeshLocalPrefix(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeshLocalPrefixWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeshLocalPrefix(success);
        },
        true);
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)subscribeAttributeOverrunCountWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOverrunCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOverrunCount(success);
        },
        true);
}

- (void)readAttributeNeighborTableListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeNeighborTableList(success, failure);
        });
}

- (void)readAttributeRouteTableListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeRouteTableList(success, failure);
        });
}

- (void)readAttributePartitionIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartitionId(success, failure);
    });
}

- (void)subscribeAttributePartitionIdWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePartitionId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePartitionIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePartitionId(success);
        },
        true);
}

- (void)readAttributeWeightingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWeighting(success, failure);
    });
}

- (void)subscribeAttributeWeightingWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeWeighting(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeWeightingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeWeighting(success);
        },
        true);
}

- (void)readAttributeDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDataVersion(success, failure);
    });
}

- (void)subscribeAttributeDataVersionWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeDataVersion(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeDataVersion(success);
        },
        true);
}

- (void)readAttributeStableDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStableDataVersion(success, failure);
    });
}

- (void)subscribeAttributeStableDataVersionWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStableDataVersion(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStableDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStableDataVersion(success);
        },
        true);
}

- (void)readAttributeLeaderRouterIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLeaderRouterId(success, failure);
    });
}

- (void)subscribeAttributeLeaderRouterIdWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLeaderRouterId(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLeaderRouterIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLeaderRouterId(success);
        },
        true);
}

- (void)readAttributeDetachedRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDetachedRoleCount(success, failure);
    });
}

- (void)subscribeAttributeDetachedRoleCountWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeDetachedRoleCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeDetachedRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeDetachedRoleCount(success);
        },
        true);
}

- (void)readAttributeChildRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChildRoleCount(success, failure);
    });
}

- (void)subscribeAttributeChildRoleCountWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeChildRoleCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeChildRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeChildRoleCount(success);
        },
        true);
}

- (void)readAttributeRouterRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRouterRoleCount(success, failure);
    });
}

- (void)subscribeAttributeRouterRoleCountWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRouterRoleCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRouterRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRouterRoleCount(success);
        },
        true);
}

- (void)readAttributeLeaderRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLeaderRoleCount(success, failure);
    });
}

- (void)subscribeAttributeLeaderRoleCountWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLeaderRoleCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLeaderRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLeaderRoleCount(success);
        },
        true);
}

- (void)readAttributeAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAttachAttemptCount(success, failure);
    });
}

- (void)subscribeAttributeAttachAttemptCountWithMinInterval:(uint16_t)minInterval
                                                maxInterval:(uint16_t)maxInterval
                                            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeAttachAttemptCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeAttachAttemptCount(success);
        },
        true);
}

- (void)readAttributePartitionIdChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartitionIdChangeCount(success, failure);
    });
}

- (void)subscribeAttributePartitionIdChangeCountWithMinInterval:(uint16_t)minInterval
                                                    maxInterval:(uint16_t)maxInterval
                                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePartitionIdChangeCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePartitionIdChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePartitionIdChangeCount(success);
        },
        true);
}

- (void)readAttributeBetterPartitionAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBetterPartitionAttachAttemptCount(success, failure);
    });
}

- (void)subscribeAttributeBetterPartitionAttachAttemptCountWithMinInterval:(uint16_t)minInterval
                                                               maxInterval:(uint16_t)maxInterval
                                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBetterPartitionAttachAttemptCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBetterPartitionAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBetterPartitionAttachAttemptCount(success);
        },
        true);
}

- (void)readAttributeParentChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeParentChangeCount(success, failure);
    });
}

- (void)subscribeAttributeParentChangeCountWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeParentChangeCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeParentChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeParentChangeCount(success);
        },
        true);
}

- (void)readAttributeTxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxTotalCount(success, failure);
    });
}

- (void)subscribeAttributeTxTotalCountWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxTotalCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxTotalCount(success);
        },
        true);
}

- (void)readAttributeTxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxUnicastCount(success, failure);
    });
}

- (void)subscribeAttributeTxUnicastCountWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxUnicastCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxUnicastCount(success);
        },
        true);
}

- (void)readAttributeTxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBroadcastCount(success, failure);
    });
}

- (void)subscribeAttributeTxBroadcastCountWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxBroadcastCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxBroadcastCount(success);
        },
        true);
}

- (void)readAttributeTxAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxAckRequestedCount(success, failure);
    });
}

- (void)subscribeAttributeTxAckRequestedCountWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxAckRequestedCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxAckRequestedCount(success);
        },
        true);
}

- (void)readAttributeTxAckedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxAckedCount(success, failure);
    });
}

- (void)subscribeAttributeTxAckedCountWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxAckedCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxAckedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxAckedCount(success);
        },
        true);
}

- (void)readAttributeTxNoAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxNoAckRequestedCount(success, failure);
    });
}

- (void)subscribeAttributeTxNoAckRequestedCountWithMinInterval:(uint16_t)minInterval
                                                   maxInterval:(uint16_t)maxInterval
                                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxNoAckRequestedCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxNoAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxNoAckRequestedCount(success);
        },
        true);
}

- (void)readAttributeTxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDataCount(success, failure);
    });
}

- (void)subscribeAttributeTxDataCountWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxDataCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxDataCount(success);
        },
        true);
}

- (void)readAttributeTxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDataPollCount(success, failure);
    });
}

- (void)subscribeAttributeTxDataPollCountWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxDataPollCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxDataPollCount(success);
        },
        true);
}

- (void)readAttributeTxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBeaconCount(success, failure);
    });
}

- (void)subscribeAttributeTxBeaconCountWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxBeaconCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxBeaconCount(success);
        },
        true);
}

- (void)readAttributeTxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBeaconRequestCount(success, failure);
    });
}

- (void)subscribeAttributeTxBeaconRequestCountWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxBeaconRequestCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxBeaconRequestCount(success);
        },
        true);
}

- (void)readAttributeTxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxOtherCount(success, failure);
    });
}

- (void)subscribeAttributeTxOtherCountWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxOtherCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxOtherCount(success);
        },
        true);
}

- (void)readAttributeTxRetryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxRetryCount(success, failure);
    });
}

- (void)subscribeAttributeTxRetryCountWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxRetryCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxRetryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxRetryCount(success);
        },
        true);
}

- (void)readAttributeTxDirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDirectMaxRetryExpiryCount(success, failure);
    });
}

- (void)subscribeAttributeTxDirectMaxRetryExpiryCountWithMinInterval:(uint16_t)minInterval
                                                         maxInterval:(uint16_t)maxInterval
                                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxDirectMaxRetryExpiryCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxDirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxDirectMaxRetryExpiryCount(success);
        },
        true);
}

- (void)readAttributeTxIndirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxIndirectMaxRetryExpiryCount(success, failure);
    });
}

- (void)subscribeAttributeTxIndirectMaxRetryExpiryCountWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxIndirectMaxRetryExpiryCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxIndirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxIndirectMaxRetryExpiryCount(success);
        },
        true);
}

- (void)readAttributeTxErrCcaCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrCcaCount(success, failure);
    });
}

- (void)subscribeAttributeTxErrCcaCountWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxErrCcaCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxErrCcaCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxErrCcaCount(success);
        },
        true);
}

- (void)readAttributeTxErrAbortCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrAbortCount(success, failure);
    });
}

- (void)subscribeAttributeTxErrAbortCountWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxErrAbortCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxErrAbortCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxErrAbortCount(success);
        },
        true);
}

- (void)readAttributeTxErrBusyChannelCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrBusyChannelCount(success, failure);
    });
}

- (void)subscribeAttributeTxErrBusyChannelCountWithMinInterval:(uint16_t)minInterval
                                                   maxInterval:(uint16_t)maxInterval
                                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTxErrBusyChannelCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTxErrBusyChannelCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTxErrBusyChannelCount(success);
        },
        true);
}

- (void)readAttributeRxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxTotalCount(success, failure);
    });
}

- (void)subscribeAttributeRxTotalCountWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxTotalCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxTotalCount(success);
        },
        true);
}

- (void)readAttributeRxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxUnicastCount(success, failure);
    });
}

- (void)subscribeAttributeRxUnicastCountWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxUnicastCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxUnicastCount(success);
        },
        true);
}

- (void)readAttributeRxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBroadcastCount(success, failure);
    });
}

- (void)subscribeAttributeRxBroadcastCountWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxBroadcastCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxBroadcastCount(success);
        },
        true);
}

- (void)readAttributeRxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDataCount(success, failure);
    });
}

- (void)subscribeAttributeRxDataCountWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxDataCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxDataCount(success);
        },
        true);
}

- (void)readAttributeRxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDataPollCount(success, failure);
    });
}

- (void)subscribeAttributeRxDataPollCountWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxDataPollCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxDataPollCount(success);
        },
        true);
}

- (void)readAttributeRxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBeaconCount(success, failure);
    });
}

- (void)subscribeAttributeRxBeaconCountWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxBeaconCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxBeaconCount(success);
        },
        true);
}

- (void)readAttributeRxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBeaconRequestCount(success, failure);
    });
}

- (void)subscribeAttributeRxBeaconRequestCountWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxBeaconRequestCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxBeaconRequestCount(success);
        },
        true);
}

- (void)readAttributeRxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxOtherCount(success, failure);
    });
}

- (void)subscribeAttributeRxOtherCountWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxOtherCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxOtherCount(success);
        },
        true);
}

- (void)readAttributeRxAddressFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxAddressFilteredCount(success, failure);
    });
}

- (void)subscribeAttributeRxAddressFilteredCountWithMinInterval:(uint16_t)minInterval
                                                    maxInterval:(uint16_t)maxInterval
                                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxAddressFilteredCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxAddressFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxAddressFilteredCount(success);
        },
        true);
}

- (void)readAttributeRxDestAddrFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDestAddrFilteredCount(success, failure);
    });
}

- (void)subscribeAttributeRxDestAddrFilteredCountWithMinInterval:(uint16_t)minInterval
                                                     maxInterval:(uint16_t)maxInterval
                                                 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxDestAddrFilteredCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxDestAddrFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxDestAddrFilteredCount(success);
        },
        true);
}

- (void)readAttributeRxDuplicatedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDuplicatedCount(success, failure);
    });
}

- (void)subscribeAttributeRxDuplicatedCountWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxDuplicatedCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxDuplicatedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxDuplicatedCount(success);
        },
        true);
}

- (void)readAttributeRxErrNoFrameCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrNoFrameCount(success, failure);
    });
}

- (void)subscribeAttributeRxErrNoFrameCountWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxErrNoFrameCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxErrNoFrameCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxErrNoFrameCount(success);
        },
        true);
}

- (void)readAttributeRxErrUnknownNeighborCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrUnknownNeighborCount(success, failure);
    });
}

- (void)subscribeAttributeRxErrUnknownNeighborCountWithMinInterval:(uint16_t)minInterval
                                                       maxInterval:(uint16_t)maxInterval
                                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxErrUnknownNeighborCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxErrUnknownNeighborCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxErrUnknownNeighborCount(success);
        },
        true);
}

- (void)readAttributeRxErrInvalidSrcAddrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrInvalidSrcAddrCount(success, failure);
    });
}

- (void)subscribeAttributeRxErrInvalidSrcAddrCountWithMinInterval:(uint16_t)minInterval
                                                      maxInterval:(uint16_t)maxInterval
                                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxErrInvalidSrcAddrCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxErrInvalidSrcAddrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxErrInvalidSrcAddrCount(success);
        },
        true);
}

- (void)readAttributeRxErrSecCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrSecCount(success, failure);
    });
}

- (void)subscribeAttributeRxErrSecCountWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxErrSecCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxErrSecCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxErrSecCount(success);
        },
        true);
}

- (void)readAttributeRxErrFcsCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrFcsCount(success, failure);
    });
}

- (void)subscribeAttributeRxErrFcsCountWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxErrFcsCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxErrFcsCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxErrFcsCount(success);
        },
        true);
}

- (void)readAttributeRxErrOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrOtherCount(success, failure);
    });
}

- (void)subscribeAttributeRxErrOtherCountWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRxErrOtherCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRxErrOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRxErrOtherCount(success);
        },
        true);
}

- (void)readAttributeActiveTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActiveTimestamp(success, failure);
    });
}

- (void)subscribeAttributeActiveTimestampWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeActiveTimestamp(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeActiveTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeActiveTimestamp(success);
        },
        true);
}

- (void)readAttributePendingTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePendingTimestamp(success, failure);
    });
}

- (void)subscribeAttributePendingTimestampWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePendingTimestamp(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePendingTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePendingTimestamp(success);
        },
        true);
}

- (void)readAttributeDelayWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDelay(success, failure);
    });
}

- (void)subscribeAttributeDelayWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeDelay(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeDelayWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeDelay(success);
        },
        true);
}

- (void)readAttributeSecurityPolicyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSecurityPolicy(success, failure);
        });
}

- (void)readAttributeChannelMaskWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannelMask(success, failure);
    });
}

- (void)subscribeAttributeChannelMaskWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeChannelMask(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeChannelMaskWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeChannelMask(success);
        },
        true);
}

- (void)readAttributeOperationalDatasetComponentsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeOperationalDatasetComponents(success, failure);
        });
}

- (void)readAttributeActiveNetworkFaultsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveNetworkFaultsList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPWakeOnLan

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeWakeOnLanMacAddressWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWakeOnLanMacAddress(success, failure);
    });
}

- (void)subscribeAttributeWakeOnLanMacAddressWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeWakeOnLanMacAddress(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeWakeOnLanMacAddressWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeWakeOnLanMacAddress(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPWiFiNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCountsWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    WiFiNetworkDiagnostics::Commands::ResetCounts::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeBssidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBssid(success, failure);
    });
}

- (void)subscribeAttributeBssidWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBssid(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBssidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBssid(success);
        },
        true);
}

- (void)readAttributeSecurityTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSecurityType(success, failure);
    });
}

- (void)subscribeAttributeSecurityTypeWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSecurityType(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSecurityTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSecurityType(success);
        },
        true);
}

- (void)readAttributeWiFiVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWiFiVersion(success, failure);
    });
}

- (void)subscribeAttributeWiFiVersionWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeWiFiVersion(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeWiFiVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeWiFiVersion(success);
        },
        true);
}

- (void)readAttributeChannelNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannelNumber(success, failure);
    });
}

- (void)subscribeAttributeChannelNumberWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeChannelNumber(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeChannelNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeChannelNumber(success);
        },
        true);
}

- (void)readAttributeRssiWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRssi(success, failure);
    });
}

- (void)subscribeAttributeRssiWithMinInterval:(uint16_t)minInterval
                                  maxInterval:(uint16_t)maxInterval
                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeRssi(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeRssiWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeRssi(success);
        },
        true);
}

- (void)readAttributeBeaconLostCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBeaconLostCount(success, failure);
    });
}

- (void)subscribeAttributeBeaconLostCountWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBeaconLostCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBeaconLostCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBeaconLostCount(success);
        },
        true);
}

- (void)readAttributeBeaconRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBeaconRxCount(success, failure);
    });
}

- (void)subscribeAttributeBeaconRxCountWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeBeaconRxCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeBeaconRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeBeaconRxCount(success);
        },
        true);
}

- (void)readAttributePacketMulticastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketMulticastRxCount(success, failure);
    });
}

- (void)subscribeAttributePacketMulticastRxCountWithMinInterval:(uint16_t)minInterval
                                                    maxInterval:(uint16_t)maxInterval
                                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePacketMulticastRxCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePacketMulticastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePacketMulticastRxCount(success);
        },
        true);
}

- (void)readAttributePacketMulticastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketMulticastTxCount(success, failure);
    });
}

- (void)subscribeAttributePacketMulticastTxCountWithMinInterval:(uint16_t)minInterval
                                                    maxInterval:(uint16_t)maxInterval
                                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePacketMulticastTxCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePacketMulticastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePacketMulticastTxCount(success);
        },
        true);
}

- (void)readAttributePacketUnicastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketUnicastRxCount(success, failure);
    });
}

- (void)subscribeAttributePacketUnicastRxCountWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePacketUnicastRxCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePacketUnicastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePacketUnicastRxCount(success);
        },
        true);
}

- (void)readAttributePacketUnicastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketUnicastTxCount(success, failure);
    });
}

- (void)subscribeAttributePacketUnicastTxCountWithMinInterval:(uint16_t)minInterval
                                                  maxInterval:(uint16_t)maxInterval
                                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePacketUnicastTxCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePacketUnicastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePacketUnicastTxCount(success);
        },
        true);
}

- (void)readAttributeCurrentMaxRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMaxRate(success, failure);
    });
}

- (void)subscribeAttributeCurrentMaxRateWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentMaxRate(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentMaxRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentMaxRate(success);
        },
        true);
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)subscribeAttributeOverrunCountWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOverrunCount(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOverrunCount(success);
        },
        true);
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end

@implementation CHIPWindowCovering

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)downOrCloseWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::DownOrClose::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToLiftPercentageWithParams:(CHIPWindowCoveringClusterGoToLiftPercentageParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToLiftPercentage::Type request;
    request.liftPercentageValue = params.liftPercentageValue.unsignedCharValue;
    request.liftPercent100thsValue = params.liftPercent100thsValue.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToLiftValueWithParams:(CHIPWindowCoveringClusterGoToLiftValueParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToLiftValue::Type request;
    request.liftValue = params.liftValue.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToTiltPercentageWithParams:(CHIPWindowCoveringClusterGoToTiltPercentageParams *)params
                   completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToTiltPercentage::Type request;
    request.tiltPercentageValue = params.tiltPercentageValue.unsignedCharValue;
    request.tiltPercent100thsValue = params.tiltPercent100thsValue.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)goToTiltValueWithParams:(CHIPWindowCoveringClusterGoToTiltValueParams *)params
              completionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::GoToTiltValue::Type request;
    request.tiltValue = params.tiltValue.unsignedShortValue;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)stopMotionWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::StopMotion::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)upOrOpenWithCompletionHandler:(CompletionHandler)completionHandler
{
    ListFreer listFreer;
    WindowCovering::Commands::UpOrOpen::Type request;

    new CHIPCommandSuccessCallbackBridge(self.callbackQueue, completionHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIPCommandSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)readAttributeTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeType(success, failure);
    });
}

- (void)subscribeAttributeTypeWithMinInterval:(uint16_t)minInterval
                                  maxInterval:(uint16_t)maxInterval
                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeType(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeType(success);
        },
        true);
}

- (void)readAttributeCurrentPositionLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLift(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionLiftWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionLift(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionLift(success);
        },
        true);
}

- (void)readAttributeCurrentPositionTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTilt(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionTiltWithMinInterval:(uint16_t)minInterval
                                                 maxInterval:(uint16_t)maxInterval
                                             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionTilt(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionTilt(success);
        },
        true);
}

- (void)readAttributeConfigStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeConfigStatus(success, failure);
    });
}

- (void)subscribeAttributeConfigStatusWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeConfigStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeConfigStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeConfigStatus(success);
        },
        true);
}

- (void)readAttributeCurrentPositionLiftPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLiftPercentage(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionLiftPercentageWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionLiftPercentage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionLiftPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionLiftPercentage(success);
        },
        true);
}

- (void)readAttributeCurrentPositionTiltPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTiltPercentage(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionTiltPercentageWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionTiltPercentage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionTiltPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionTiltPercentage(success);
        },
        true);
}

- (void)readAttributeOperationalStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOperationalStatus(success, failure);
    });
}

- (void)subscribeAttributeOperationalStatusWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOperationalStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOperationalStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOperationalStatus(success);
        },
        true);
}

- (void)readAttributeTargetPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTargetPositionLiftPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeTargetPositionLiftPercent100thsWithMinInterval:(uint16_t)minInterval
                                                             maxInterval:(uint16_t)maxInterval
                                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTargetPositionLiftPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTargetPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTargetPositionLiftPercent100ths(success);
        },
        true);
}

- (void)readAttributeTargetPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTargetPositionTiltPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeTargetPositionTiltPercent100thsWithMinInterval:(uint16_t)minInterval
                                                             maxInterval:(uint16_t)maxInterval
                                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTargetPositionTiltPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTargetPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTargetPositionTiltPercent100ths(success);
        },
        true);
}

- (void)readAttributeEndProductTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEndProductType(success, failure);
    });
}

- (void)subscribeAttributeEndProductTypeWithMinInterval:(uint16_t)minInterval
                                            maxInterval:(uint16_t)maxInterval
                                        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeEndProductType(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeEndProductTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeEndProductType(success);
        },
        true);
}

- (void)readAttributeCurrentPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLiftPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionLiftPercent100thsWithMinInterval:(uint16_t)minInterval
                                                              maxInterval:(uint16_t)maxInterval
                                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionLiftPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionLiftPercent100ths(success);
        },
        true);
}

- (void)readAttributeCurrentPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTiltPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionTiltPercent100thsWithMinInterval:(uint16_t)minInterval
                                                              maxInterval:(uint16_t)maxInterval
                                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionTiltPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionTiltPercent100ths(success);
        },
        true);
}

- (void)readAttributeInstalledOpenLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledOpenLimitLift(success, failure);
    });
}

- (void)subscribeAttributeInstalledOpenLimitLiftWithMinInterval:(uint16_t)minInterval
                                                    maxInterval:(uint16_t)maxInterval
                                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInstalledOpenLimitLift(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInstalledOpenLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInstalledOpenLimitLift(success);
        },
        true);
}

- (void)readAttributeInstalledClosedLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledClosedLimitLift(success, failure);
    });
}

- (void)subscribeAttributeInstalledClosedLimitLiftWithMinInterval:(uint16_t)minInterval
                                                      maxInterval:(uint16_t)maxInterval
                                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInstalledClosedLimitLift(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInstalledClosedLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInstalledClosedLimitLift(success);
        },
        true);
}

- (void)readAttributeInstalledOpenLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledOpenLimitTilt(success, failure);
    });
}

- (void)subscribeAttributeInstalledOpenLimitTiltWithMinInterval:(uint16_t)minInterval
                                                    maxInterval:(uint16_t)maxInterval
                                                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInstalledOpenLimitTilt(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInstalledOpenLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInstalledOpenLimitTilt(success);
        },
        true);
}

- (void)readAttributeInstalledClosedLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledClosedLimitTilt(success, failure);
    });
}

- (void)subscribeAttributeInstalledClosedLimitTiltWithMinInterval:(uint16_t)minInterval
                                                      maxInterval:(uint16_t)maxInterval
                                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeInstalledClosedLimitTilt(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeInstalledClosedLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeInstalledClosedLimitTilt(success);
        },
        true);
}

- (void)readAttributeModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMode(success, failure);
    });
}

- (void)writeAttributeModeWithValue:(NSNumber * _Nonnull)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        ListFreer listFreer;
        using TypeInfo = WindowCovering::Attributes::Mode::TypeInfo;
        TypeInfo::Type cppValue;
        cppValue = value.unsignedCharValue;
        auto successFn = Callback<CHIPDefaultSuccessCallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.WriteAttribute<TypeInfo>(cppValue, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}

- (void)subscribeAttributeModeWithMinInterval:(uint16_t)minInterval
                                  maxInterval:(uint16_t)maxInterval
                              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMode(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMode(success);
        },
        true);
}

- (void)readAttributeSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSafetyStatus(success, failure);
    });
}

- (void)subscribeAttributeSafetyStatusWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSafetyStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSafetyStatus(success);
        },
        true);
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)subscribeAttributeFeatureMapWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeFeatureMap(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeFeatureMap(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

- (void)subscribeAttributeClusterRevisionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeClusterRevision(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeClusterRevision(success);
        },
        true);
}

@end
