/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#import <Foundation/Foundation.h>

#import "CHIPCallbackBridge_internal.h"
#import "CHIPCluster_internal.h"
#import "CHIPClustersObjc_internal.h"
#import "CHIPDevice.h"
#import "CHIPDevice_Internal.h"

using chip::Callback::Cancelable;

@implementation CHIPAccountLogin

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)getSetupPIN:(NSString *)tempAccountIdentifier responseHandler:(ResponseHandler)responseHandler
{
    new CHIPAccountLoginClusterGetSetupPINResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetSetupPIN(success, failure, [self asSpan:tempAccountIdentifier]);
        });
}

- (void)login:(NSString *)tempAccountIdentifier setupPIN:(NSString *)setupPIN responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Login(success, failure, [self asSpan:tempAccountIdentifier], [self asSpan:setupPIN]);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPAdministratorCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)openBasicCommissioningWindow:(uint16_t)commissioningTimeout responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.OpenBasicCommissioningWindow(success, failure, commissioningTimeout);
    });
}

- (void)openCommissioningWindow:(uint16_t)commissioningTimeout
                   PAKEVerifier:(NSData *)PAKEVerifier
                  discriminator:(uint16_t)discriminator
                     iterations:(uint32_t)iterations
                           salt:(NSData *)salt
                     passcodeID:(uint16_t)passcodeID
                responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.OpenCommissioningWindow(success, failure, commissioningTimeout, [self asSpan:PAKEVerifier],
            discriminator, iterations, [self asSpan:salt], passcodeID);
    });
}

- (void)revokeCommissioning:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.RevokeCommissioning(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPApplicationBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeStatus:(uint8_t)status responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ChangeStatus(success, failure, status);
    });
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)readAttributeVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorId(success, failure);
    });
}

- (void)readAttributeApplicationNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationName(success, failure);
    });
}

- (void)readAttributeProductIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductId(success, failure);
    });
}

- (void)readAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationId(success, failure);
    });
}

- (void)readAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCatalogVendorId(success, failure);
    });
}

- (void)readAttributeApplicationStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationStatus(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPApplicationLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)launchApp:(NSString *)data
    catalogVendorId:(uint16_t)catalogVendorId
      applicationId:(NSString *)applicationId
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPApplicationLauncherClusterLaunchAppResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.LaunchApp(success, failure, [self asSpan:data], catalogVendorId, [self asSpan:applicationId]);
        });
}

- (void)readAttributeApplicationLauncherListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPApplicationLauncherApplicationLauncherListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeApplicationLauncherList(success, failure);
        });
}

- (void)readAttributeCatalogVendorIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCatalogVendorId(success, failure);
    });
}

- (void)readAttributeApplicationIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeApplicationId(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPAudioOutput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)renameOutput:(uint8_t)index name:(NSString *)name responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.RenameOutput(success, failure, index, [self asSpan:name]);
    });
}

- (void)selectOutput:(uint8_t)index responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SelectOutput(success, failure, index);
    });
}

- (void)readAttributeAudioOutputListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPAudioOutputAudioOutputListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeAudioOutputList(success, failure);
        });
}

- (void)readAttributeCurrentAudioOutputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentAudioOutput(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBarrierControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)barrierControlGoToPercent:(uint8_t)percentOpen responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.BarrierControlGoToPercent(success, failure, percentOpen);
    });
}

- (void)barrierControlStop:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.BarrierControlStop(success, failure);
    });
}

- (void)readAttributeBarrierMovingStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierMovingState(success, failure);
    });
}

- (void)readAttributeBarrierSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierSafetyStatus(success, failure);
    });
}

- (void)readAttributeBarrierCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierCapabilities(success, failure);
    });
}

- (void)readAttributeBarrierPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBarrierPosition(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)mfgSpecificPing:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MfgSpecificPing(success, failure);
    });
}

- (void)readAttributeInteractionModelVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInteractionModelVersion(success, failure);
    });
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)readAttributeVendorIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorID(success, failure);
    });
}

- (void)readAttributeProductNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductName(success, failure);
    });
}

- (void)readAttributeProductIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductID(success, failure);
    });
}

- (void)readAttributeUserLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUserLabel(success, failure);
    });
}

- (void)writeAttributeUserLabelWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeUserLabel(success, failure, [self asSpan:value]);
    });
}

- (void)readAttributeLocationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocation(success, failure);
    });
}

- (void)writeAttributeLocationWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLocation(success, failure, [self asSpan:value]);
    });
}

- (void)readAttributeHardwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersion(success, failure);
    });
}

- (void)readAttributeHardwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersionString(success, failure);
    });
}

- (void)readAttributeSoftwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersion(success, failure);
    });
}

- (void)readAttributeSoftwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersionString(success, failure);
    });
}

- (void)readAttributeManufacturingDateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeManufacturingDate(success, failure);
    });
}

- (void)readAttributePartNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartNumber(success, failure);
    });
}

- (void)readAttributeProductURLWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductURL(success, failure);
    });
}

- (void)readAttributeProductLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductLabel(success, failure);
    });
}

- (void)readAttributeSerialNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSerialNumber(success, failure);
    });
}

- (void)readAttributeLocalConfigDisabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocalConfigDisabled(success, failure);
    });
}

- (void)writeAttributeLocalConfigDisabledWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLocalConfigDisabled(success, failure, value);
    });
}

- (void)readAttributeReachableWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeReachable(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBinaryInputBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeOutOfServiceWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOutOfService(success, failure);
    });
}

- (void)writeAttributeOutOfServiceWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOutOfService(success, failure, value);
    });
}

- (void)readAttributePresentValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePresentValue(success, failure);
    });
}

- (void)writeAttributePresentValueWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePresentValue(success, failure, value);
    });
}

- (void)subscribeAttributePresentValueWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributePresentValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributePresentValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributePresentValue(success);
        },
        true);
}

- (void)readAttributeStatusFlagsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStatusFlags(success, failure);
    });
}

- (void)subscribeAttributeStatusFlagsWithMinInterval:(uint16_t)minInterval
                                         maxInterval:(uint16_t)maxInterval
                                     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeStatusFlags(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeStatusFlagsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeStatusFlags(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBinding

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)bind:(uint64_t)nodeId
            groupId:(uint16_t)groupId
         endpointId:(uint16_t)endpointId
          clusterId:(uint32_t)clusterId
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Bind(success, failure, nodeId, groupId, endpointId, clusterId);
    });
}

- (void)unbind:(uint64_t)nodeId
            groupId:(uint16_t)groupId
         endpointId:(uint16_t)endpointId
          clusterId:(uint32_t)clusterId
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Unbind(success, failure, nodeId, groupId, endpointId, clusterId);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPBridgedDeviceBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeVendorNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorName(success, failure);
    });
}

- (void)readAttributeVendorIDWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeVendorID(success, failure);
    });
}

- (void)readAttributeProductNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductName(success, failure);
    });
}

- (void)readAttributeUserLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUserLabel(success, failure);
    });
}

- (void)writeAttributeUserLabelWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeUserLabel(success, failure, [self asSpan:value]);
    });
}

- (void)readAttributeHardwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersion(success, failure);
    });
}

- (void)readAttributeHardwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeHardwareVersionString(success, failure);
    });
}

- (void)readAttributeSoftwareVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersion(success, failure);
    });
}

- (void)readAttributeSoftwareVersionStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSoftwareVersionString(success, failure);
    });
}

- (void)readAttributeManufacturingDateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeManufacturingDate(success, failure);
    });
}

- (void)readAttributePartNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartNumber(success, failure);
    });
}

- (void)readAttributeProductURLWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductURL(success, failure);
    });
}

- (void)readAttributeProductLabelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeProductLabel(success, failure);
    });
}

- (void)readAttributeSerialNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSerialNumber(success, failure);
    });
}

- (void)readAttributeReachableWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeReachable(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPColorControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)colorLoopSet:(uint8_t)updateFlags
              action:(uint8_t)action
           direction:(uint8_t)direction
                time:(uint16_t)time
            startHue:(uint16_t)startHue
         optionsMask:(uint8_t)optionsMask
     optionsOverride:(uint8_t)optionsOverride
     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ColorLoopSet(
            success, failure, updateFlags, action, direction, time, startHue, optionsMask, optionsOverride);
    });
}

- (void)enhancedMoveHue:(uint8_t)moveMode
                   rate:(uint16_t)rate
            optionsMask:(uint8_t)optionsMask
        optionsOverride:(uint8_t)optionsOverride
        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.EnhancedMoveHue(success, failure, moveMode, rate, optionsMask, optionsOverride);
    });
}

- (void)enhancedMoveToHue:(uint16_t)enhancedHue
                direction:(uint8_t)direction
           transitionTime:(uint16_t)transitionTime
              optionsMask:(uint8_t)optionsMask
          optionsOverride:(uint8_t)optionsOverride
          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.EnhancedMoveToHue(
            success, failure, enhancedHue, direction, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)enhancedMoveToHueAndSaturation:(uint16_t)enhancedHue
                            saturation:(uint8_t)saturation
                        transitionTime:(uint16_t)transitionTime
                           optionsMask:(uint8_t)optionsMask
                       optionsOverride:(uint8_t)optionsOverride
                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.EnhancedMoveToHueAndSaturation(
            success, failure, enhancedHue, saturation, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)enhancedStepHue:(uint8_t)stepMode
               stepSize:(uint16_t)stepSize
         transitionTime:(uint16_t)transitionTime
            optionsMask:(uint8_t)optionsMask
        optionsOverride:(uint8_t)optionsOverride
        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.EnhancedStepHue(success, failure, stepMode, stepSize, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)moveColor:(int16_t)rateX
              rateY:(int16_t)rateY
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveColor(success, failure, rateX, rateY, optionsMask, optionsOverride);
    });
}

- (void)moveColorTemperature:(uint8_t)moveMode
                        rate:(uint16_t)rate
     colorTemperatureMinimum:(uint16_t)colorTemperatureMinimum
     colorTemperatureMaximum:(uint16_t)colorTemperatureMaximum
                 optionsMask:(uint8_t)optionsMask
             optionsOverride:(uint8_t)optionsOverride
             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveColorTemperature(
            success, failure, moveMode, rate, colorTemperatureMinimum, colorTemperatureMaximum, optionsMask, optionsOverride);
    });
}

- (void)moveHue:(uint8_t)moveMode
               rate:(uint8_t)rate
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveHue(success, failure, moveMode, rate, optionsMask, optionsOverride);
    });
}

- (void)moveSaturation:(uint8_t)moveMode
                  rate:(uint8_t)rate
           optionsMask:(uint8_t)optionsMask
       optionsOverride:(uint8_t)optionsOverride
       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveSaturation(success, failure, moveMode, rate, optionsMask, optionsOverride);
    });
}

- (void)moveToColor:(uint16_t)colorX
             colorY:(uint16_t)colorY
     transitionTime:(uint16_t)transitionTime
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveToColor(success, failure, colorX, colorY, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)moveToColorTemperature:(uint16_t)colorTemperature
                transitionTime:(uint16_t)transitionTime
                   optionsMask:(uint8_t)optionsMask
               optionsOverride:(uint8_t)optionsOverride
               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveToColorTemperature(
            success, failure, colorTemperature, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)moveToHue:(uint8_t)hue
          direction:(uint8_t)direction
     transitionTime:(uint16_t)transitionTime
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveToHue(success, failure, hue, direction, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)moveToHueAndSaturation:(uint8_t)hue
                    saturation:(uint8_t)saturation
                transitionTime:(uint16_t)transitionTime
                   optionsMask:(uint8_t)optionsMask
               optionsOverride:(uint8_t)optionsOverride
               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveToHueAndSaturation(
            success, failure, hue, saturation, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)moveToSaturation:(uint8_t)saturation
          transitionTime:(uint16_t)transitionTime
             optionsMask:(uint8_t)optionsMask
         optionsOverride:(uint8_t)optionsOverride
         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveToSaturation(success, failure, saturation, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)stepColor:(int16_t)stepX
              stepY:(int16_t)stepY
     transitionTime:(uint16_t)transitionTime
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.StepColor(success, failure, stepX, stepY, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)stepColorTemperature:(uint8_t)stepMode
                    stepSize:(uint16_t)stepSize
              transitionTime:(uint16_t)transitionTime
     colorTemperatureMinimum:(uint16_t)colorTemperatureMinimum
     colorTemperatureMaximum:(uint16_t)colorTemperatureMaximum
                 optionsMask:(uint8_t)optionsMask
             optionsOverride:(uint8_t)optionsOverride
             responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.StepColorTemperature(success, failure, stepMode, stepSize, transitionTime, colorTemperatureMinimum,
            colorTemperatureMaximum, optionsMask, optionsOverride);
    });
}

- (void)stepHue:(uint8_t)stepMode
           stepSize:(uint8_t)stepSize
     transitionTime:(uint8_t)transitionTime
        optionsMask:(uint8_t)optionsMask
    optionsOverride:(uint8_t)optionsOverride
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.StepHue(success, failure, stepMode, stepSize, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)stepSaturation:(uint8_t)stepMode
              stepSize:(uint8_t)stepSize
        transitionTime:(uint8_t)transitionTime
           optionsMask:(uint8_t)optionsMask
       optionsOverride:(uint8_t)optionsOverride
       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.StepSaturation(success, failure, stepMode, stepSize, transitionTime, optionsMask, optionsOverride);
    });
}

- (void)stopMoveStep:(uint8_t)optionsMask optionsOverride:(uint8_t)optionsOverride responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.StopMoveStep(success, failure, optionsMask, optionsOverride);
    });
}

- (void)readAttributeCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHue(success, failure);
    });
}

- (void)subscribeAttributeCurrentHueWithMinInterval:(uint16_t)minInterval
                                        maxInterval:(uint16_t)maxInterval
                                    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentHue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentHue(success);
        },
        true);
}

- (void)readAttributeCurrentSaturationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentSaturation(success, failure);
    });
}

- (void)subscribeAttributeCurrentSaturationWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentSaturation(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentSaturationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentSaturation(success);
        },
        true);
}

- (void)readAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRemainingTime(success, failure);
    });
}

- (void)readAttributeCurrentXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentX(success, failure);
    });
}

- (void)subscribeAttributeCurrentXWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentX(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentX(success);
        },
        true);
}

- (void)readAttributeCurrentYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentY(success, failure);
    });
}

- (void)subscribeAttributeCurrentYWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentY(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentY(success);
        },
        true);
}

- (void)readAttributeDriftCompensationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDriftCompensation(success, failure);
    });
}

- (void)readAttributeCompensationTextWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCompensationText(success, failure);
    });
}

- (void)readAttributeColorTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTemperature(success, failure);
    });
}

- (void)subscribeAttributeColorTemperatureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeColorTemperature(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeColorTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeColorTemperature(success);
        },
        true);
}

- (void)readAttributeColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorMode(success, failure);
    });
}

- (void)readAttributeColorControlOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorControlOptions(success, failure);
    });
}

- (void)writeAttributeColorControlOptionsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorControlOptions(success, failure, value);
    });
}

- (void)readAttributeNumberOfPrimariesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfPrimaries(success, failure);
    });
}

- (void)readAttributePrimary1XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1X(success, failure);
    });
}

- (void)readAttributePrimary1YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1Y(success, failure);
    });
}

- (void)readAttributePrimary1IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary1Intensity(success, failure);
    });
}

- (void)readAttributePrimary2XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2X(success, failure);
    });
}

- (void)readAttributePrimary2YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2Y(success, failure);
    });
}

- (void)readAttributePrimary2IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary2Intensity(success, failure);
    });
}

- (void)readAttributePrimary3XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3X(success, failure);
    });
}

- (void)readAttributePrimary3YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3Y(success, failure);
    });
}

- (void)readAttributePrimary3IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary3Intensity(success, failure);
    });
}

- (void)readAttributePrimary4XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4X(success, failure);
    });
}

- (void)readAttributePrimary4YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4Y(success, failure);
    });
}

- (void)readAttributePrimary4IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary4Intensity(success, failure);
    });
}

- (void)readAttributePrimary5XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5X(success, failure);
    });
}

- (void)readAttributePrimary5YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5Y(success, failure);
    });
}

- (void)readAttributePrimary5IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary5Intensity(success, failure);
    });
}

- (void)readAttributePrimary6XWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6X(success, failure);
    });
}

- (void)readAttributePrimary6YWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6Y(success, failure);
    });
}

- (void)readAttributePrimary6IntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePrimary6Intensity(success, failure);
    });
}

- (void)readAttributeWhitePointXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWhitePointX(success, failure);
    });
}

- (void)writeAttributeWhitePointXWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeWhitePointX(success, failure, value);
    });
}

- (void)readAttributeWhitePointYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWhitePointY(success, failure);
    });
}

- (void)writeAttributeWhitePointYWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeWhitePointY(success, failure, value);
    });
}

- (void)readAttributeColorPointRXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRX(success, failure);
    });
}

- (void)writeAttributeColorPointRXWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointRX(success, failure, value);
    });
}

- (void)readAttributeColorPointRYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRY(success, failure);
    });
}

- (void)writeAttributeColorPointRYWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointRY(success, failure, value);
    });
}

- (void)readAttributeColorPointRIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointRIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointRIntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointRIntensity(success, failure, value);
    });
}

- (void)readAttributeColorPointGXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGX(success, failure);
    });
}

- (void)writeAttributeColorPointGXWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointGX(success, failure, value);
    });
}

- (void)readAttributeColorPointGYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGY(success, failure);
    });
}

- (void)writeAttributeColorPointGYWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointGY(success, failure, value);
    });
}

- (void)readAttributeColorPointGIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointGIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointGIntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointGIntensity(success, failure, value);
    });
}

- (void)readAttributeColorPointBXWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBX(success, failure);
    });
}

- (void)writeAttributeColorPointBXWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointBX(success, failure, value);
    });
}

- (void)readAttributeColorPointBYWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBY(success, failure);
    });
}

- (void)writeAttributeColorPointBYWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointBY(success, failure, value);
    });
}

- (void)readAttributeColorPointBIntensityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorPointBIntensity(success, failure);
    });
}

- (void)writeAttributeColorPointBIntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorPointBIntensity(success, failure, value);
    });
}

- (void)readAttributeEnhancedCurrentHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnhancedCurrentHue(success, failure);
    });
}

- (void)readAttributeEnhancedColorModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnhancedColorMode(success, failure);
    });
}

- (void)readAttributeColorLoopActiveWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopActive(success, failure);
    });
}

- (void)readAttributeColorLoopDirectionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopDirection(success, failure);
    });
}

- (void)readAttributeColorLoopTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopTime(success, failure);
    });
}

- (void)readAttributeColorLoopStartEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopStartEnhancedHue(success, failure);
    });
}

- (void)readAttributeColorLoopStoredEnhancedHueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorLoopStoredEnhancedHue(success, failure);
    });
}

- (void)readAttributeColorCapabilitiesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorCapabilities(success, failure);
    });
}

- (void)readAttributeColorTempPhysicalMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTempPhysicalMin(success, failure);
    });
}

- (void)readAttributeColorTempPhysicalMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeColorTempPhysicalMax(success, failure);
    });
}

- (void)readAttributeCoupleColorTempToLevelMinMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCoupleColorTempToLevelMinMireds(success, failure);
    });
}

- (void)readAttributeStartUpColorTemperatureMiredsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpColorTemperatureMireds(success, failure);
    });
}

- (void)writeAttributeStartUpColorTemperatureMiredsWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStartUpColorTemperatureMireds(success, failure, value);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPContentLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)launchContent:(bool)autoPlay data:(NSString *)data responseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherClusterLaunchContentResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.LaunchContent(success, failure, autoPlay, [self asSpan:data]);
        });
}

- (void)launchURL:(NSString *)contentURL displayString:(NSString *)displayString responseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherClusterLaunchURLResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.LaunchURL(success, failure, [self asSpan:contentURL], [self asSpan:displayString]);
        });
}

- (void)readAttributeAcceptsHeaderListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherAcceptsHeaderListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeAcceptsHeaderList(success, failure);
        });
}

- (void)readAttributeSupportedStreamingTypesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPContentLauncherSupportedStreamingTypesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSupportedStreamingTypes(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPDescriptor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeDeviceListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorDeviceListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeDeviceList(success, failure);
        });
}

- (void)readAttributeServerListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorServerListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeServerList(success, failure);
        });
}

- (void)readAttributeClientListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorClientListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeClientList(success, failure);
        });
}

- (void)readAttributePartsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPDescriptorPartsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributePartsList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPDiagnosticLogs

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)retrieveLogsRequest:(uint8_t)intent
          requestedProtocol:(uint8_t)requestedProtocol
     transferFileDesignator:(NSData *)transferFileDesignator
            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.RetrieveLogsRequest(
            success, failure, intent, requestedProtocol, [self asSpan:transferFileDesignator]);
    });
}

@end

@implementation CHIPDoorLock

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)clearAllPins:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterClearAllPinsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ClearAllPins(success, failure);
        });
}

- (void)clearAllRfids:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterClearAllRfidsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ClearAllRfids(success, failure);
        });
}

- (void)clearHolidaySchedule:(uint8_t)scheduleId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterClearHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ClearHolidaySchedule(success, failure, scheduleId);
        });
}

- (void)clearPin:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterClearPinResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ClearPin(success, failure, userId);
        });
}

- (void)clearRfid:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterClearRfidResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ClearRfid(success, failure, userId);
        });
}

- (void)clearWeekdaySchedule:(uint8_t)scheduleId userId:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterClearWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ClearWeekdaySchedule(success, failure, scheduleId, userId);
        });
}

- (void)clearYeardaySchedule:(uint8_t)scheduleId userId:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterClearYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ClearYeardaySchedule(success, failure, scheduleId, userId);
        });
}

- (void)getHolidaySchedule:(uint8_t)scheduleId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterGetHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetHolidaySchedule(success, failure, scheduleId);
        });
}

- (void)getLogRecord:(uint16_t)logIndex responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterGetLogRecordResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetLogRecord(success, failure, logIndex);
        });
}

- (void)getPin:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterGetPinResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetPin(success, failure, userId);
        });
}

- (void)getRfid:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterGetRfidResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetRfid(success, failure, userId);
        });
}

- (void)getUserType:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterGetUserTypeResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetUserType(success, failure, userId);
        });
}

- (void)getWeekdaySchedule:(uint8_t)scheduleId userId:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterGetWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetWeekdaySchedule(success, failure, scheduleId, userId);
        });
}

- (void)getYeardaySchedule:(uint8_t)scheduleId userId:(uint16_t)userId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterGetYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetYeardaySchedule(success, failure, scheduleId, userId);
        });
}

- (void)lockDoor:(NSData *)pin responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterLockDoorResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.LockDoor(success, failure, [self asSpan:pin]);
        });
}

- (void)setHolidaySchedule:(uint8_t)scheduleId
                localStartTime:(uint32_t)localStartTime
                  localEndTime:(uint32_t)localEndTime
    operatingModeDuringHoliday:(uint8_t)operatingModeDuringHoliday
               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterSetHolidayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.SetHolidaySchedule(
                success, failure, scheduleId, localStartTime, localEndTime, operatingModeDuringHoliday);
        });
}

- (void)setPin:(uint16_t)userId
         userStatus:(uint8_t)userStatus
           userType:(uint8_t)userType
                pin:(NSData *)pin
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterSetPinResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.SetPin(success, failure, userId, userStatus, userType, [self asSpan:pin]);
        });
}

- (void)setRfid:(uint16_t)userId
         userStatus:(uint8_t)userStatus
           userType:(uint8_t)userType
                 id:(NSData *)id
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterSetRfidResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.SetRfid(success, failure, userId, userStatus, userType, [self asSpan:id]);
        });
}

- (void)setUserType:(uint16_t)userId userType:(uint8_t)userType responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterSetUserTypeResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.SetUserType(success, failure, userId, userType);
        });
}

- (void)setWeekdaySchedule:(uint8_t)scheduleId
                    userId:(uint16_t)userId
                  daysMask:(uint8_t)daysMask
                 startHour:(uint8_t)startHour
               startMinute:(uint8_t)startMinute
                   endHour:(uint8_t)endHour
                 endMinute:(uint8_t)endMinute
           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterSetWeekdayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.SetWeekdaySchedule(
                success, failure, scheduleId, userId, daysMask, startHour, startMinute, endHour, endMinute);
        });
}

- (void)setYeardaySchedule:(uint8_t)scheduleId
                    userId:(uint16_t)userId
            localStartTime:(uint32_t)localStartTime
              localEndTime:(uint32_t)localEndTime
           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterSetYeardayScheduleResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.SetYeardaySchedule(success, failure, scheduleId, userId, localStartTime, localEndTime);
        });
}

- (void)unlockDoor:(NSData *)pin responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterUnlockDoorResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.UnlockDoor(success, failure, [self asSpan:pin]);
        });
}

- (void)unlockWithTimeout:(uint16_t)timeoutInSeconds pin:(NSData *)pin responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDoorLockClusterUnlockWithTimeoutResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.UnlockWithTimeout(success, failure, timeoutInSeconds, [self asSpan:pin]);
        });
}

- (void)readAttributeLockStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLockState(success, failure);
    });
}

- (void)subscribeAttributeLockStateWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLockState(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLockStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLockState(success);
        },
        true);
}

- (void)readAttributeLockTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLockType(success, failure);
    });
}

- (void)readAttributeActuatorEnabledWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActuatorEnabled(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPElectricalMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasurementTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasurementType(success, failure);
    });
}

- (void)readAttributeTotalActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTotalActivePower(success, failure);
    });
}

- (void)readAttributeRmsVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltage(success, failure);
    });
}

- (void)readAttributeRmsVoltageMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltageMin(success, failure);
    });
}

- (void)readAttributeRmsVoltageMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsVoltageMax(success, failure);
    });
}

- (void)readAttributeRmsCurrentWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrent(success, failure);
    });
}

- (void)readAttributeRmsCurrentMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrentMin(success, failure);
    });
}

- (void)readAttributeRmsCurrentMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRmsCurrentMax(success, failure);
    });
}

- (void)readAttributeActivePowerWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePower(success, failure);
    });
}

- (void)readAttributeActivePowerMinWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePowerMin(success, failure);
    });
}

- (void)readAttributeActivePowerMaxWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActivePowerMax(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPEthernetNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCounts:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ResetCounts(success, failure);
    });
}

- (void)readAttributePHYRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePHYRate(success, failure);
    });
}

- (void)readAttributeFullDuplexWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFullDuplex(success, failure);
    });
}

- (void)readAttributePacketRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketRxCount(success, failure);
    });
}

- (void)readAttributePacketTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketTxCount(success, failure);
    });
}

- (void)readAttributeTxErrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrCount(success, failure);
    });
}

- (void)readAttributeCollisionCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCollisionCount(success, failure);
    });
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)readAttributeCarrierDetectWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCarrierDetect(success, failure);
    });
}

- (void)readAttributeTimeSinceResetWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTimeSinceReset(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPFixedLabel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeLabelListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPFixedLabelLabelListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeLabelList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPFlowMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGeneralCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)armFailSafe:(uint16_t)expiryLengthSeconds
         breadcrumb:(uint64_t)breadcrumb
          timeoutMs:(uint32_t)timeoutMs
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralCommissioningClusterArmFailSafeResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ArmFailSafe(success, failure, expiryLengthSeconds, breadcrumb, timeoutMs);
        });
}

- (void)commissioningComplete:(ResponseHandler)responseHandler
{
    new CHIPGeneralCommissioningClusterCommissioningCompleteResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.CommissioningComplete(success, failure);
        });
}

- (void)setRegulatoryConfig:(uint8_t)location
                countryCode:(NSString *)countryCode
                 breadcrumb:(uint64_t)breadcrumb
                  timeoutMs:(uint32_t)timeoutMs
            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralCommissioningClusterSetRegulatoryConfigResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.SetRegulatoryConfig(
                success, failure, location, [self asSpan:countryCode], breadcrumb, timeoutMs);
        });
}

- (void)readAttributeBreadcrumbWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBreadcrumb(success, failure);
    });
}

- (void)writeAttributeBreadcrumbWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBreadcrumb(success, failure, value);
    });
}

- (void)readAttributeBasicCommissioningInfoListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralCommissioningBasicCommissioningInfoListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeBasicCommissioningInfoList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGeneralDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeNetworkInterfacesWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGeneralDiagnosticsNetworkInterfacesListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeNetworkInterfaces(success, failure);
        });
}

- (void)readAttributeRebootCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRebootCount(success, failure);
    });
}

- (void)readAttributeUpTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUpTime(success, failure);
    });
}

- (void)readAttributeTotalOperationalHoursWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTotalOperationalHours(success, failure);
    });
}

- (void)readAttributeBootReasonsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBootReasons(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGroupKeyManagement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeGroupsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupKeyManagementGroupsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeGroups(success, failure);
        });
}

- (void)readAttributeGroupKeysWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupKeyManagementGroupKeysListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeGroupKeys(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPGroups

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addGroup:(uint16_t)groupId groupName:(NSString *)groupName responseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupsClusterAddGroupResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.AddGroup(success, failure, groupId, [self asSpan:groupName]);
        });
}

- (void)addGroupIfIdentifying:(uint16_t)groupId groupName:(NSString *)groupName responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.AddGroupIfIdentifying(success, failure, groupId, [self asSpan:groupName]);
    });
}

- (void)getGroupMembership:(uint8_t)groupCount groupList:(uint16_t)groupList responseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupsClusterGetGroupMembershipResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetGroupMembership(success, failure, groupCount, groupList);
        });
}

- (void)removeAllGroups:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.RemoveAllGroups(success, failure);
    });
}

- (void)removeGroup:(uint16_t)groupId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupsClusterRemoveGroupResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.RemoveGroup(success, failure, groupId);
        });
}

- (void)viewGroup:(uint16_t)groupId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPGroupsClusterViewGroupResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ViewGroup(success, failure, groupId);
        });
}

- (void)readAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNameSupport(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPIdentify

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)identify:(uint16_t)identifyTime responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Identify(success, failure, identifyTime);
    });
}

- (void)identifyQuery:(ResponseHandler)responseHandler
{
    new CHIPIdentifyClusterIdentifyQueryResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.IdentifyQuery(success, failure);
        });
}

- (void)triggerEffect:(uint8_t)effectIdentifier
        effectVariant:(uint8_t)effectVariant
      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.TriggerEffect(success, failure, effectIdentifier, effectVariant);
    });
}

- (void)readAttributeIdentifyTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeIdentifyTime(success, failure);
    });
}

- (void)writeAttributeIdentifyTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeIdentifyTime(success, failure, value);
    });
}

- (void)readAttributeIdentifyTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeIdentifyType(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPKeypadInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)sendKey:(uint8_t)keyCode responseHandler:(ResponseHandler)responseHandler
{
    new CHIPKeypadInputClusterSendKeyResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.SendKey(success, failure, keyCode);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPLevelControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)move:(uint8_t)moveMode
               rate:(uint8_t)rate
         optionMask:(uint8_t)optionMask
     optionOverride:(uint8_t)optionOverride
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Move(success, failure, moveMode, rate, optionMask, optionOverride);
    });
}

- (void)moveToLevel:(uint8_t)level
     transitionTime:(uint16_t)transitionTime
         optionMask:(uint8_t)optionMask
     optionOverride:(uint8_t)optionOverride
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveToLevel(success, failure, level, transitionTime, optionMask, optionOverride);
    });
}

- (void)moveToLevelWithOnOff:(uint8_t)level transitionTime:(uint16_t)transitionTime responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveToLevelWithOnOff(success, failure, level, transitionTime);
    });
}

- (void)moveWithOnOff:(uint8_t)moveMode rate:(uint8_t)rate responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.MoveWithOnOff(success, failure, moveMode, rate);
    });
}

- (void)step:(uint8_t)stepMode
           stepSize:(uint8_t)stepSize
     transitionTime:(uint16_t)transitionTime
         optionMask:(uint8_t)optionMask
     optionOverride:(uint8_t)optionOverride
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Step(success, failure, stepMode, stepSize, transitionTime, optionMask, optionOverride);
    });
}

- (void)stepWithOnOff:(uint8_t)stepMode
             stepSize:(uint8_t)stepSize
       transitionTime:(uint16_t)transitionTime
      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.StepWithOnOff(success, failure, stepMode, stepSize, transitionTime);
    });
}

- (void)stop:(uint8_t)optionMask optionOverride:(uint8_t)optionOverride responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Stop(success, failure, optionMask, optionOverride);
    });
}

- (void)stopWithOnOff:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.StopWithOnOff(success, failure);
    });
}

- (void)readAttributeCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentLevel(success, failure);
    });
}

- (void)subscribeAttributeCurrentLevelWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentLevel(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentLevel(success);
        },
        true);
}

- (void)readAttributeRemainingTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRemainingTime(success, failure);
    });
}

- (void)readAttributeMinLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinLevel(success, failure);
    });
}

- (void)readAttributeMaxLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxLevel(success, failure);
    });
}

- (void)readAttributeCurrentFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentFrequency(success, failure);
    });
}

- (void)readAttributeMinFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinFrequency(success, failure);
    });
}

- (void)readAttributeMaxFrequencyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxFrequency(success, failure);
    });
}

- (void)readAttributeOptionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOptions(success, failure);
    });
}

- (void)writeAttributeOptionsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOptions(success, failure, value);
    });
}

- (void)readAttributeOnOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnOffTransitionTime(success, failure);
    });
}

- (void)writeAttributeOnOffTransitionTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnOffTransitionTime(success, failure, value);
    });
}

- (void)readAttributeOnLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnLevel(success, failure);
    });
}

- (void)writeAttributeOnLevelWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnLevel(success, failure, value);
    });
}

- (void)readAttributeOnTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnTransitionTime(success, failure);
    });
}

- (void)writeAttributeOnTransitionTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnTransitionTime(success, failure, value);
    });
}

- (void)readAttributeOffTransitionTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOffTransitionTime(success, failure);
    });
}

- (void)writeAttributeOffTransitionTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOffTransitionTime(success, failure, value);
    });
}

- (void)readAttributeDefaultMoveRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDefaultMoveRate(success, failure);
    });
}

- (void)writeAttributeDefaultMoveRateWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeDefaultMoveRate(success, failure, value);
    });
}

- (void)readAttributeStartUpCurrentLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpCurrentLevel(success, failure);
    });
}

- (void)writeAttributeStartUpCurrentLevelWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStartUpCurrentLevel(success, failure, value);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPLowPower

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)sleep:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Sleep(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPMediaInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)hideInputStatus:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.HideInputStatus(success, failure);
    });
}

- (void)renameInput:(uint8_t)index name:(NSString *)name responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.RenameInput(success, failure, index, [self asSpan:name]);
    });
}

- (void)selectInput:(uint8_t)index responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SelectInput(success, failure, index);
    });
}

- (void)showInputStatus:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ShowInputStatus(success, failure);
    });
}

- (void)readAttributeMediaInputListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPMediaInputMediaInputListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeMediaInputList(success, failure);
        });
}

- (void)readAttributeCurrentMediaInputWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMediaInput(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPMediaPlayback

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)mediaFastForward:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaFastForwardResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaFastForward(success, failure);
        });
}

- (void)mediaNext:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaNextResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaNext(success, failure);
        });
}

- (void)mediaPause:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaPauseResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaPause(success, failure);
        });
}

- (void)mediaPlay:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaPlayResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaPlay(success, failure);
        });
}

- (void)mediaPrevious:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaPreviousResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaPrevious(success, failure);
        });
}

- (void)mediaRewind:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaRewindResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaRewind(success, failure);
        });
}

- (void)mediaSeek:(uint64_t)position responseHandler:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaSeekResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaSeek(success, failure, position);
        });
}

- (void)mediaSkipBackward:(uint64_t)deltaPositionMilliseconds responseHandler:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaSkipBackwardResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaSkipBackward(success, failure, deltaPositionMilliseconds);
        });
}

- (void)mediaSkipForward:(uint64_t)deltaPositionMilliseconds responseHandler:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaSkipForwardResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaSkipForward(success, failure, deltaPositionMilliseconds);
        });
}

- (void)mediaStartOver:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaStartOverResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaStartOver(success, failure);
        });
}

- (void)mediaStop:(ResponseHandler)responseHandler
{
    new CHIPMediaPlaybackClusterMediaStopResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.MediaStop(success, failure);
        });
}

- (void)readAttributePlaybackStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePlaybackState(success, failure);
    });
}

- (void)readAttributeStartTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartTime(success, failure);
    });
}

- (void)readAttributeDurationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDuration(success, failure);
    });
}

- (void)readAttributePositionUpdatedAtWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePositionUpdatedAt(success, failure);
    });
}

- (void)readAttributePositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePosition(success, failure);
    });
}

- (void)readAttributePlaybackSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePlaybackSpeed(success, failure);
    });
}

- (void)readAttributeSeekRangeEndWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSeekRangeEnd(success, failure);
    });
}

- (void)readAttributeSeekRangeStartWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSeekRangeStart(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPNetworkCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addThreadNetwork:(NSData *)operationalDataset
              breadcrumb:(uint64_t)breadcrumb
               timeoutMs:(uint32_t)timeoutMs
         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPNetworkCommissioningClusterAddThreadNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.AddThreadNetwork(success, failure, [self asSpan:operationalDataset], breadcrumb, timeoutMs);
        });
}

- (void)addWiFiNetwork:(NSData *)ssid
           credentials:(NSData *)credentials
            breadcrumb:(uint64_t)breadcrumb
             timeoutMs:(uint32_t)timeoutMs
       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPNetworkCommissioningClusterAddWiFiNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.AddWiFiNetwork(
                success, failure, [self asSpan:ssid], [self asSpan:credentials], breadcrumb, timeoutMs);
        });
}

- (void)disableNetwork:(NSData *)networkID
            breadcrumb:(uint64_t)breadcrumb
             timeoutMs:(uint32_t)timeoutMs
       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPNetworkCommissioningClusterDisableNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.DisableNetwork(success, failure, [self asSpan:networkID], breadcrumb, timeoutMs);
        });
}

- (void)enableNetwork:(NSData *)networkID
           breadcrumb:(uint64_t)breadcrumb
            timeoutMs:(uint32_t)timeoutMs
      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPNetworkCommissioningClusterEnableNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.EnableNetwork(success, failure, [self asSpan:networkID], breadcrumb, timeoutMs);
        });
}

- (void)getLastNetworkCommissioningResult:(uint32_t)timeoutMs responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.GetLastNetworkCommissioningResult(success, failure, timeoutMs);
    });
}

- (void)removeNetwork:(NSData *)networkID
           breadcrumb:(uint64_t)breadcrumb
            timeoutMs:(uint32_t)timeoutMs
      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPNetworkCommissioningClusterRemoveNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.RemoveNetwork(success, failure, [self asSpan:networkID], breadcrumb, timeoutMs);
        });
}

- (void)scanNetworks:(NSData *)ssid
          breadcrumb:(uint64_t)breadcrumb
           timeoutMs:(uint32_t)timeoutMs
     responseHandler:(ResponseHandler)responseHandler
{
    new CHIPNetworkCommissioningClusterScanNetworksResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ScanNetworks(success, failure, [self asSpan:ssid], breadcrumb, timeoutMs);
        });
}

- (void)updateThreadNetwork:(NSData *)operationalDataset
                 breadcrumb:(uint64_t)breadcrumb
                  timeoutMs:(uint32_t)timeoutMs
            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPNetworkCommissioningClusterUpdateThreadNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.UpdateThreadNetwork(success, failure, [self asSpan:operationalDataset], breadcrumb, timeoutMs);
        });
}

- (void)updateWiFiNetwork:(NSData *)ssid
              credentials:(NSData *)credentials
               breadcrumb:(uint64_t)breadcrumb
                timeoutMs:(uint32_t)timeoutMs
          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPNetworkCommissioningClusterUpdateWiFiNetworkResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.UpdateWiFiNetwork(
                success, failure, [self asSpan:ssid], [self asSpan:credentials], breadcrumb, timeoutMs);
        });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOtaSoftwareUpdateProvider

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)applyUpdateRequest:(NSData *)updateToken newVersion:(uint32_t)newVersion responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ApplyUpdateRequest(success, failure, [self asSpan:updateToken], newVersion);
        });
}

- (void)notifyUpdateApplied:(NSData *)updateToken
            softwareVersion:(uint32_t)softwareVersion
            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.NotifyUpdateApplied(success, failure, [self asSpan:updateToken], softwareVersion);
    });
}

- (void)queryImage:(uint16_t)vendorId
              productId:(uint16_t)productId
        hardwareVersion:(uint16_t)hardwareVersion
        softwareVersion:(uint32_t)softwareVersion
     protocolsSupported:(uint8_t)protocolsSupported
               location:(NSString *)location
    requestorCanConsent:(bool)requestorCanConsent
    metadataForProvider:(NSData *)metadataForProvider
        responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOtaSoftwareUpdateProviderClusterQueryImageResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.QueryImage(success, failure, vendorId, productId, hardwareVersion, softwareVersion,
                protocolsSupported, [self asSpan:location], requestorCanConsent, [self asSpan:metadataForProvider]);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOtaSoftwareUpdateRequestor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)announceOtaProvider:(NSData *)providerLocation
                   vendorId:(uint16_t)vendorId
         announcementReason:(uint8_t)announcementReason
            metadataForNode:(NSData *)metadataForNode
            responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.AnnounceOtaProvider(
            success, failure, [self asSpan:providerLocation], vendorId, announcementReason, [self asSpan:metadataForNode]);
    });
}

- (void)readAttributeDefaultOtaProviderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDefaultOtaProvider(success, failure);
    });
}

- (void)writeAttributeDefaultOtaProviderWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeDefaultOtaProvider(success, failure, [self asSpan:value]);
    });
}

- (void)readAttributeUpdatePossibleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUpdatePossible(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOccupancySensing

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeOccupancyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancy(success, failure);
    });
}

- (void)subscribeAttributeOccupancyWithMinInterval:(uint16_t)minInterval
                                       maxInterval:(uint16_t)maxInterval
                                   responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOccupancy(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOccupancyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOccupancy(success);
        },
        true);
}

- (void)readAttributeOccupancySensorTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancySensorType(success, failure);
    });
}

- (void)readAttributeOccupancySensorTypeBitmapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupancySensorTypeBitmap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOnOff

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)off:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Off(success, failure);
    });
}

- (void)offWithEffect:(uint8_t)effectId effectVariant:(uint8_t)effectVariant responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.OffWithEffect(success, failure, effectId, effectVariant);
    });
}

- (void)on:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.On(success, failure);
    });
}

- (void)onWithRecallGlobalScene:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.OnWithRecallGlobalScene(success, failure);
    });
}

- (void)onWithTimedOff:(uint8_t)onOffControl
                onTime:(uint16_t)onTime
           offWaitTime:(uint16_t)offWaitTime
       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.OnWithTimedOff(success, failure, onOffControl, onTime, offWaitTime);
    });
}

- (void)toggle:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Toggle(success, failure);
    });
}

- (void)readAttributeOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnOff(success, failure);
    });
}

- (void)subscribeAttributeOnOffWithMinInterval:(uint16_t)minInterval
                                   maxInterval:(uint16_t)maxInterval
                               responseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOnOff(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOnOff(success);
        },
        true);
}

- (void)readAttributeGlobalSceneControlWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeGlobalSceneControl(success, failure);
    });
}

- (void)readAttributeOnTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOnTime(success, failure);
    });
}

- (void)writeAttributeOnTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnTime(success, failure, value);
    });
}

- (void)readAttributeOffWaitTimeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOffWaitTime(success, failure);
    });
}

- (void)writeAttributeOffWaitTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOffWaitTime(success, failure, value);
    });
}

- (void)readAttributeStartUpOnOffWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartUpOnOff(success, failure);
    });
}

- (void)writeAttributeStartUpOnOffWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStartUpOnOff(success, failure, value);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOnOffSwitchConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeSwitchTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSwitchType(success, failure);
    });
}

- (void)readAttributeSwitchActionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSwitchActions(success, failure);
    });
}

- (void)writeAttributeSwitchActionsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSwitchActions(success, failure, value);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPOperationalCredentials

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addNOC:(NSData *)NOCValue
          ICACValue:(NSData *)ICACValue
           IPKValue:(NSData *)IPKValue
      caseAdminNode:(uint64_t)caseAdminNode
      adminVendorId:(uint16_t)adminVendorId
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.AddNOC(success, failure, [self asSpan:NOCValue], [self asSpan:ICACValue], [self asSpan:IPKValue],
                caseAdminNode, adminVendorId);
        });
}

- (void)addTrustedRootCertificate:(NSData *)rootCertificate responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.AddTrustedRootCertificate(success, failure, [self asSpan:rootCertificate]);
    });
}

- (void)attestationRequest:(NSData *)attestationNonce responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsClusterAttestationResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.AttestationRequest(success, failure, [self asSpan:attestationNonce]);
        });
}

- (void)certificateChainRequest:(uint8_t)certificateType responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsClusterCertificateChainResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.CertificateChainRequest(success, failure, certificateType);
        });
}

- (void)opCSRRequest:(NSData *)CSRNonce responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsClusterOpCSRResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.OpCSRRequest(success, failure, [self asSpan:CSRNonce]);
        });
}

- (void)removeFabric:(uint8_t)fabricIndex responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.RemoveFabric(success, failure, fabricIndex);
        });
}

- (void)removeTrustedRootCertificate:(NSData *)trustedRootIdentifier responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.RemoveTrustedRootCertificate(success, failure, [self asSpan:trustedRootIdentifier]);
    });
}

- (void)updateFabricLabel:(NSString *)label responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.UpdateFabricLabel(success, failure, [self asSpan:label]);
        });
}

- (void)updateNOC:(NSData *)NOCValue ICACValue:(NSData *)ICACValue responseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsClusterNOCResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.UpdateNOC(success, failure, [self asSpan:NOCValue], [self asSpan:ICACValue]);
        });
}

- (void)readAttributeFabricsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOperationalCredentialsFabricsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeFabricsList(success, failure);
        });
}

- (void)readAttributeSupportedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSupportedFabrics(success, failure);
    });
}

- (void)readAttributeCommissionedFabricsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCommissionedFabrics(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPPowerSource

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStatus(success, failure);
    });
}

- (void)readAttributeOrderWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOrder(success, failure);
    });
}

- (void)readAttributeDescriptionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDescription(success, failure);
    });
}

- (void)readAttributeBatteryVoltageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryVoltage(success, failure);
    });
}

- (void)readAttributeBatteryPercentRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryPercentRemaining(success, failure);
    });
}

- (void)readAttributeBatteryTimeRemainingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryTimeRemaining(success, failure);
    });
}

- (void)readAttributeBatteryChargeLevelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryChargeLevel(success, failure);
    });
}

- (void)readAttributeActiveBatteryFaultsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPPowerSourceActiveBatteryFaultsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveBatteryFaults(success, failure);
        });
}

- (void)readAttributeBatteryChargeStateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBatteryChargeState(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPPressureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPPumpConfigurationAndControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMaxPressureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxPressure(success, failure);
    });
}

- (void)readAttributeMaxSpeedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxSpeed(success, failure);
    });
}

- (void)readAttributeMaxFlowWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxFlow(success, failure);
    });
}

- (void)readAttributeEffectiveOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEffectiveOperationMode(success, failure);
    });
}

- (void)readAttributeEffectiveControlModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEffectiveControlMode(success, failure);
    });
}

- (void)readAttributeCapacityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCapacity(success, failure);
    });
}

- (void)subscribeAttributeCapacityWithMinInterval:(uint16_t)minInterval
                                      maxInterval:(uint16_t)maxInterval
                                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCapacity(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCapacityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCapacity(success);
        },
        true);
}

- (void)readAttributeOperationModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOperationMode(success, failure);
    });
}

- (void)writeAttributeOperationModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOperationMode(success, failure, value);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPRelativeHumidityMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPScenes

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)addScene:(uint16_t)groupId
            sceneId:(uint8_t)sceneId
     transitionTime:(uint16_t)transitionTime
          sceneName:(NSString *)sceneName
          clusterId:(uint32_t)clusterId
             length:(uint8_t)length
              value:(uint8_t)value
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPScenesClusterAddSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.AddScene(
                success, failure, groupId, sceneId, transitionTime, [self asSpan:sceneName], clusterId, length, value);
        });
}

- (void)getSceneMembership:(uint16_t)groupId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPScenesClusterGetSceneMembershipResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.GetSceneMembership(success, failure, groupId);
        });
}

- (void)recallScene:(uint16_t)groupId
            sceneId:(uint8_t)sceneId
     transitionTime:(uint16_t)transitionTime
    responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.RecallScene(success, failure, groupId, sceneId, transitionTime);
    });
}

- (void)removeAllScenes:(uint16_t)groupId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPScenesClusterRemoveAllScenesResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.RemoveAllScenes(success, failure, groupId);
        });
}

- (void)removeScene:(uint16_t)groupId sceneId:(uint8_t)sceneId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPScenesClusterRemoveSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.RemoveScene(success, failure, groupId, sceneId);
        });
}

- (void)storeScene:(uint16_t)groupId sceneId:(uint8_t)sceneId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPScenesClusterStoreSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.StoreScene(success, failure, groupId, sceneId);
        });
}

- (void)viewScene:(uint16_t)groupId sceneId:(uint8_t)sceneId responseHandler:(ResponseHandler)responseHandler
{
    new CHIPScenesClusterViewSceneResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ViewScene(success, failure, groupId, sceneId);
        });
}

- (void)readAttributeSceneCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSceneCount(success, failure);
    });
}

- (void)readAttributeCurrentSceneWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentScene(success, failure);
    });
}

- (void)readAttributeCurrentGroupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentGroup(success, failure);
    });
}

- (void)readAttributeSceneValidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSceneValid(success, failure);
    });
}

- (void)readAttributeNameSupportWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNameSupport(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPSoftwareDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetWatermarks:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ResetWatermarks(success, failure);
    });
}

- (void)readAttributeCurrentHeapFreeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapFree(success, failure);
    });
}

- (void)readAttributeCurrentHeapUsedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapUsed(success, failure);
    });
}

- (void)readAttributeCurrentHeapHighWatermarkWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentHeapHighWatermark(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPSwitch

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeNumberOfPositionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfPositions(success, failure);
    });
}

- (void)readAttributeCurrentPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPosition(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionWithMinInterval:(uint16_t)minInterval
                                             maxInterval:(uint16_t)maxInterval
                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPosition(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPosition(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTvChannel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)changeChannel:(NSString *)match responseHandler:(ResponseHandler)responseHandler
{
    new CHIPTvChannelClusterChangeChannelResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ChangeChannel(success, failure, [self asSpan:match]);
        });
}

- (void)changeChannelByNumber:(uint16_t)majorNumber
                  minorNumber:(uint16_t)minorNumber
              responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ChangeChannelByNumber(success, failure, majorNumber, minorNumber);
    });
}

- (void)skipChannel:(uint16_t)count responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SkipChannel(success, failure, count);
    });
}

- (void)readAttributeTvChannelListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTvChannelTvChannelListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTvChannelList(success, failure);
        });
}

- (void)readAttributeTvChannelLineupWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTvChannelLineup(success, failure);
    });
}

- (void)readAttributeCurrentTvChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentTvChannel(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTargetNavigator

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)navigateTarget:(uint8_t)target data:(NSString *)data responseHandler:(ResponseHandler)responseHandler
{
    new CHIPTargetNavigatorClusterNavigateTargetResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.NavigateTarget(success, failure, target, [self asSpan:data]);
        });
}

- (void)readAttributeTargetNavigatorListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTargetNavigatorTargetNavigatorListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeTargetNavigatorList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTemperatureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeasuredValue(success, failure);
    });
}

- (void)subscribeAttributeMeasuredValueWithMinInterval:(uint16_t)minInterval
                                           maxInterval:(uint16_t)maxInterval
                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeMeasuredValue(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeMeasuredValue(success);
        },
        true);
}

- (void)readAttributeMinMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinMeasuredValue(success, failure);
    });
}

- (void)readAttributeMaxMeasuredValueWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxMeasuredValue(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPTestCluster

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)test:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Test(success, failure);
    });
}

- (void)testAddArguments:(uint8_t)arg1 arg2:(uint8_t)arg2 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterClusterTestAddArgumentsResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.TestAddArguments(success, failure, arg1, arg2);
        });
}

- (void)testListInt8UArgumentRequest:(uint8_t)arg1 responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.TestListInt8UArgumentRequest(success, failure, arg1);
    });
}

- (void)testListStructArgumentRequest:(uint8_t)a
                                    b:(bool)b
                                    c:(uint8_t)c
                                    d:(NSData *)d
                                    e:(NSString *)e
                                    f:(uint8_t)f
                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.TestListStructArgumentRequest(success, failure, a, b, c, [self asSpan:d], [self asSpan:e], f);
    });
}

- (void)testNotHandled:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.TestNotHandled(success, failure);
    });
}

- (void)testSpecific:(ResponseHandler)responseHandler
{
    new CHIPTestClusterClusterTestSpecificResponseCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.TestSpecific(success, failure);
        });
}

- (void)testStructArgumentRequest:(uint8_t)a
                                b:(bool)b
                                c:(uint8_t)c
                                d:(NSData *)d
                                e:(NSString *)e
                                f:(uint8_t)f
                  responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.TestStructArgumentRequest(success, failure, a, b, c, [self asSpan:d], [self asSpan:e], f);
    });
}

- (void)testUnknownCommand:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.TestUnknownCommand(success, failure);
    });
}

- (void)readAttributeBooleanWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBoolean(success, failure);
    });
}

- (void)writeAttributeBooleanWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBoolean(success, failure, value);
    });
}

- (void)readAttributeBitmap8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap8(success, failure);
    });
}

- (void)writeAttributeBitmap8WithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBitmap8(success, failure, value);
    });
}

- (void)readAttributeBitmap16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap16(success, failure);
    });
}

- (void)writeAttributeBitmap16WithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBitmap16(success, failure, value);
    });
}

- (void)readAttributeBitmap32WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap32(success, failure);
    });
}

- (void)writeAttributeBitmap32WithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBitmap32(success, failure, value);
    });
}

- (void)readAttributeBitmap64WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBitmap64(success, failure);
    });
}

- (void)writeAttributeBitmap64WithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBitmap64(success, failure, value);
    });
}

- (void)readAttributeInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt8u(success, failure);
    });
}

- (void)writeAttributeInt8uWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt8u(success, failure, value);
    });
}

- (void)readAttributeInt16uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt16u(success, failure);
    });
}

- (void)writeAttributeInt16uWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt16u(success, failure, value);
    });
}

- (void)readAttributeInt32uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt32u(success, failure);
    });
}

- (void)writeAttributeInt32uWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt32u(success, failure, value);
    });
}

- (void)readAttributeInt64uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt64u(success, failure);
    });
}

- (void)writeAttributeInt64uWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt64u(success, failure, value);
    });
}

- (void)readAttributeInt8sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt8s(success, failure);
    });
}

- (void)writeAttributeInt8sWithValue:(int8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt8s(success, failure, value);
    });
}

- (void)readAttributeInt16sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt16s(success, failure);
    });
}

- (void)writeAttributeInt16sWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt16s(success, failure, value);
    });
}

- (void)readAttributeInt32sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt32s(success, failure);
    });
}

- (void)writeAttributeInt32sWithValue:(int32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt32s(success, failure, value);
    });
}

- (void)readAttributeInt64sWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInt64s(success, failure);
    });
}

- (void)writeAttributeInt64sWithValue:(int64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInt64s(success, failure, value);
    });
}

- (void)readAttributeEnum8WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnum8(success, failure);
    });
}

- (void)writeAttributeEnum8WithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEnum8(success, failure, value);
    });
}

- (void)readAttributeEnum16WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEnum16(success, failure);
    });
}

- (void)writeAttributeEnum16WithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEnum16(success, failure, value);
    });
}

- (void)readAttributeOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOctetString(success, failure);
    });
}

- (void)writeAttributeOctetStringWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOctetString(success, failure, [self asSpan:value]);
    });
}

- (void)readAttributeListInt8uWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListInt8uListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListInt8u(success, failure);
        });
}

- (void)readAttributeListOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListOctetStringListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListOctetString(success, failure);
        });
}

- (void)readAttributeListStructOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPTestClusterListStructOctetStringListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeListStructOctetString(success, failure);
        });
}

- (void)readAttributeLongOctetStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLongOctetString(success, failure);
    });
}

- (void)writeAttributeLongOctetStringWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLongOctetString(success, failure, [self asSpan:value]);
    });
}

- (void)readAttributeCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCharString(success, failure);
    });
}

- (void)writeAttributeCharStringWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCharString(success, failure, [self asSpan:value]);
    });
}

- (void)readAttributeLongCharStringWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLongCharString(success, failure);
    });
}

- (void)writeAttributeLongCharStringWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLongCharString(success, failure, [self asSpan:value]);
    });
}

- (void)readAttributeEpochUsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEpochUs(success, failure);
    });
}

- (void)writeAttributeEpochUsWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEpochUs(success, failure, value);
    });
}

- (void)readAttributeEpochSWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEpochS(success, failure);
    });
}

- (void)writeAttributeEpochSWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEpochS(success, failure, value);
    });
}

- (void)readAttributeUnsupportedWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPBooleanAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeUnsupported(success, failure);
    });
}

- (void)writeAttributeUnsupportedWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeUnsupported(success, failure, value);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPThermostat

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)clearWeeklySchedule:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ClearWeeklySchedule(success, failure);
    });
}

- (void)getRelayStatusLog:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.GetRelayStatusLog(success, failure);
    });
}

- (void)getWeeklySchedule:(uint8_t)daysToReturn modeToReturn:(uint8_t)modeToReturn responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.GetWeeklySchedule(success, failure, daysToReturn, modeToReturn);
    });
}

- (void)setWeeklySchedule:(uint8_t)numberOfTransitionsForSequence
     dayOfWeekForSequence:(uint8_t)dayOfWeekForSequence
          modeForSequence:(uint8_t)modeForSequence
                  payload:(uint8_t)payload
          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SetWeeklySchedule(
            success, failure, numberOfTransitionsForSequence, dayOfWeekForSequence, modeForSequence, payload);
    });
}

- (void)setpointRaiseLower:(uint8_t)mode amount:(int8_t)amount responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SetpointRaiseLower(success, failure, mode, amount);
    });
}

- (void)readAttributeLocalTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLocalTemperature(success, failure);
    });
}

- (void)subscribeAttributeLocalTemperatureWithMinInterval:(uint16_t)minInterval
                                              maxInterval:(uint16_t)maxInterval
                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeLocalTemperature(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeLocalTemperatureWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeLocalTemperature(success);
        },
        true);
}

- (void)readAttributeAbsMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMinHeatSetpointLimit(success, failure);
    });
}

- (void)readAttributeAbsMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMaxHeatSetpointLimit(success, failure);
    });
}

- (void)readAttributeAbsMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMinCoolSetpointLimit(success, failure);
    });
}

- (void)readAttributeAbsMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAbsMaxCoolSetpointLimit(success, failure);
    });
}

- (void)readAttributeOccupiedCoolingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupiedCoolingSetpoint(success, failure);
    });
}

- (void)writeAttributeOccupiedCoolingSetpointWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOccupiedCoolingSetpoint(success, failure, value);
    });
}

- (void)readAttributeOccupiedHeatingSetpointWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOccupiedHeatingSetpoint(success, failure);
    });
}

- (void)writeAttributeOccupiedHeatingSetpointWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOccupiedHeatingSetpoint(success, failure, value);
    });
}

- (void)readAttributeMinHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinHeatSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMinHeatSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMinHeatSetpointLimit(success, failure, value);
    });
}

- (void)readAttributeMaxHeatSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxHeatSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMaxHeatSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxHeatSetpointLimit(success, failure, value);
    });
}

- (void)readAttributeMinCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMinCoolSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMinCoolSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMinCoolSetpointLimit(success, failure, value);
    });
}

- (void)readAttributeMaxCoolSetpointLimitWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMaxCoolSetpointLimit(success, failure);
    });
}

- (void)writeAttributeMaxCoolSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxCoolSetpointLimit(success, failure, value);
    });
}

- (void)readAttributeControlSequenceOfOperationWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeControlSequenceOfOperation(success, failure);
    });
}

- (void)writeAttributeControlSequenceOfOperationWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeControlSequenceOfOperation(success, failure, value);
    });
}

- (void)readAttributeSystemModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSystemMode(success, failure);
    });
}

- (void)writeAttributeSystemModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSystemMode(success, failure, value);
    });
}

- (void)readAttributeStartOfWeekWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStartOfWeek(success, failure);
    });
}

- (void)readAttributeNumberOfWeeklyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfWeeklyTransitions(success, failure);
    });
}

- (void)readAttributeNumberOfDailyTransitionsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNumberOfDailyTransitions(success, failure);
    });
}

- (void)readAttributeFeatureMapWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeFeatureMap(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPThermostatUserInterfaceConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeTemperatureDisplayModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTemperatureDisplayMode(success, failure);
    });
}

- (void)writeAttributeTemperatureDisplayModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTemperatureDisplayMode(success, failure, value);
    });
}

- (void)readAttributeKeypadLockoutWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeKeypadLockout(success, failure);
    });
}

- (void)writeAttributeKeypadLockoutWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeKeypadLockout(success, failure, value);
    });
}

- (void)readAttributeScheduleProgrammingVisibilityWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeScheduleProgrammingVisibility(success, failure);
    });
}

- (void)writeAttributeScheduleProgrammingVisibilityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeScheduleProgrammingVisibility(success, failure, value);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPThreadNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCounts:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ResetCounts(success, failure);
    });
}

- (void)readAttributeChannelWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannel(success, failure);
    });
}

- (void)readAttributeRoutingRoleWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRoutingRole(success, failure);
    });
}

- (void)readAttributeNetworkNameWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeNetworkName(success, failure);
    });
}

- (void)readAttributePanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePanId(success, failure);
    });
}

- (void)readAttributeExtendedPanIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeExtendedPanId(success, failure);
    });
}

- (void)readAttributeMeshLocalPrefixWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMeshLocalPrefix(success, failure);
    });
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)readAttributeNeighborTableListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsNeighborTableListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeNeighborTableList(success, failure);
        });
}

- (void)readAttributeRouteTableListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsRouteTableListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeRouteTableList(success, failure);
        });
}

- (void)readAttributePartitionIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartitionId(success, failure);
    });
}

- (void)readAttributeWeightingWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWeighting(success, failure);
    });
}

- (void)readAttributeDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDataVersion(success, failure);
    });
}

- (void)readAttributeStableDataVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeStableDataVersion(success, failure);
    });
}

- (void)readAttributeLeaderRouterIdWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLeaderRouterId(success, failure);
    });
}

- (void)readAttributeDetachedRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDetachedRoleCount(success, failure);
    });
}

- (void)readAttributeChildRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChildRoleCount(success, failure);
    });
}

- (void)readAttributeRouterRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRouterRoleCount(success, failure);
    });
}

- (void)readAttributeLeaderRoleCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeLeaderRoleCount(success, failure);
    });
}

- (void)readAttributeAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeAttachAttemptCount(success, failure);
    });
}

- (void)readAttributePartitionIdChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePartitionIdChangeCount(success, failure);
    });
}

- (void)readAttributeBetterPartitionAttachAttemptCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBetterPartitionAttachAttemptCount(success, failure);
    });
}

- (void)readAttributeParentChangeCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeParentChangeCount(success, failure);
    });
}

- (void)readAttributeTxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxTotalCount(success, failure);
    });
}

- (void)readAttributeTxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxUnicastCount(success, failure);
    });
}

- (void)readAttributeTxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBroadcastCount(success, failure);
    });
}

- (void)readAttributeTxAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxAckRequestedCount(success, failure);
    });
}

- (void)readAttributeTxAckedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxAckedCount(success, failure);
    });
}

- (void)readAttributeTxNoAckRequestedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxNoAckRequestedCount(success, failure);
    });
}

- (void)readAttributeTxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDataCount(success, failure);
    });
}

- (void)readAttributeTxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDataPollCount(success, failure);
    });
}

- (void)readAttributeTxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBeaconCount(success, failure);
    });
}

- (void)readAttributeTxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxBeaconRequestCount(success, failure);
    });
}

- (void)readAttributeTxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxOtherCount(success, failure);
    });
}

- (void)readAttributeTxRetryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxRetryCount(success, failure);
    });
}

- (void)readAttributeTxDirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxDirectMaxRetryExpiryCount(success, failure);
    });
}

- (void)readAttributeTxIndirectMaxRetryExpiryCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxIndirectMaxRetryExpiryCount(success, failure);
    });
}

- (void)readAttributeTxErrCcaCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrCcaCount(success, failure);
    });
}

- (void)readAttributeTxErrAbortCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrAbortCount(success, failure);
    });
}

- (void)readAttributeTxErrBusyChannelCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTxErrBusyChannelCount(success, failure);
    });
}

- (void)readAttributeRxTotalCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxTotalCount(success, failure);
    });
}

- (void)readAttributeRxUnicastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxUnicastCount(success, failure);
    });
}

- (void)readAttributeRxBroadcastCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBroadcastCount(success, failure);
    });
}

- (void)readAttributeRxDataCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDataCount(success, failure);
    });
}

- (void)readAttributeRxDataPollCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDataPollCount(success, failure);
    });
}

- (void)readAttributeRxBeaconCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBeaconCount(success, failure);
    });
}

- (void)readAttributeRxBeaconRequestCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxBeaconRequestCount(success, failure);
    });
}

- (void)readAttributeRxOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxOtherCount(success, failure);
    });
}

- (void)readAttributeRxAddressFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxAddressFilteredCount(success, failure);
    });
}

- (void)readAttributeRxDestAddrFilteredCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDestAddrFilteredCount(success, failure);
    });
}

- (void)readAttributeRxDuplicatedCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxDuplicatedCount(success, failure);
    });
}

- (void)readAttributeRxErrNoFrameCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrNoFrameCount(success, failure);
    });
}

- (void)readAttributeRxErrUnknownNeighborCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrUnknownNeighborCount(success, failure);
    });
}

- (void)readAttributeRxErrInvalidSrcAddrCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrInvalidSrcAddrCount(success, failure);
    });
}

- (void)readAttributeRxErrSecCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrSecCount(success, failure);
    });
}

- (void)readAttributeRxErrFcsCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrFcsCount(success, failure);
    });
}

- (void)readAttributeRxErrOtherCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRxErrOtherCount(success, failure);
    });
}

- (void)readAttributeActiveTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeActiveTimestamp(success, failure);
    });
}

- (void)readAttributePendingTimestampWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePendingTimestamp(success, failure);
    });
}

- (void)readAttributeDelayWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeDelay(success, failure);
    });
}

- (void)readAttributeSecurityPolicyWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsSecurityPolicyListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeSecurityPolicy(success, failure);
        });
}

- (void)readAttributeChannelMaskWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannelMask(success, failure);
    });
}

- (void)readAttributeOperationalDatasetComponentsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeOperationalDatasetComponents(success, failure);
        });
}

- (void)readAttributeActiveNetworkFaultsListWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallbackBridge(
        self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReadAttributeActiveNetworkFaultsList(success, failure);
        });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPWakeOnLan

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)readAttributeWakeOnLanMacAddressWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPCharStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWakeOnLanMacAddress(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPWiFiNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)resetCounts:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ResetCounts(success, failure);
    });
}

- (void)readAttributeBssidWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPOctetStringAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBssid(success, failure);
    });
}

- (void)readAttributeSecurityTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSecurityType(success, failure);
    });
}

- (void)readAttributeWiFiVersionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeWiFiVersion(success, failure);
    });
}

- (void)readAttributeChannelNumberWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeChannelNumber(success, failure);
    });
}

- (void)readAttributeRssiWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8sAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeRssi(success, failure);
    });
}

- (void)readAttributeBeaconLostCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBeaconLostCount(success, failure);
    });
}

- (void)readAttributeBeaconRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeBeaconRxCount(success, failure);
    });
}

- (void)readAttributePacketMulticastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketMulticastRxCount(success, failure);
    });
}

- (void)readAttributePacketMulticastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketMulticastTxCount(success, failure);
    });
}

- (void)readAttributePacketUnicastRxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketUnicastRxCount(success, failure);
    });
}

- (void)readAttributePacketUnicastTxCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt32uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributePacketUnicastTxCount(success, failure);
    });
}

- (void)readAttributeCurrentMaxRateWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentMaxRate(success, failure);
    });
}

- (void)readAttributeOverrunCountWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt64uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOverrunCount(success, failure);
    });
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end

@implementation CHIPWindowCovering

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)downOrClose:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.DownOrClose(success, failure);
    });
}

- (void)goToLiftPercentage:(uint8_t)liftPercentageValue
    liftPercent100thsValue:(uint16_t)liftPercent100thsValue
           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.GoToLiftPercentage(success, failure, liftPercentageValue, liftPercent100thsValue);
    });
}

- (void)goToLiftValue:(uint16_t)liftValue responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.GoToLiftValue(success, failure, liftValue);
    });
}

- (void)goToTiltPercentage:(uint8_t)tiltPercentageValue
    tiltPercent100thsValue:(uint16_t)tiltPercent100thsValue
           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.GoToTiltPercentage(success, failure, tiltPercentageValue, tiltPercent100thsValue);
    });
}

- (void)goToTiltValue:(uint16_t)tiltValue responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.GoToTiltValue(success, failure, tiltValue);
    });
}

- (void)stopMotion:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.StopMotion(success, failure);
    });
}

- (void)upOrOpen:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.UpOrOpen(success, failure);
    });
}

- (void)readAttributeTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeType(success, failure);
    });
}

- (void)readAttributeCurrentPositionLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLift(success, failure);
    });
}

- (void)readAttributeCurrentPositionTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTilt(success, failure);
    });
}

- (void)readAttributeConfigStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeConfigStatus(success, failure);
    });
}

- (void)readAttributeCurrentPositionLiftPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLiftPercentage(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionLiftPercentageWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionLiftPercentage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionLiftPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionLiftPercentage(success);
        },
        true);
}

- (void)readAttributeCurrentPositionTiltPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTiltPercentage(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionTiltPercentageWithMinInterval:(uint16_t)minInterval
                                                           maxInterval:(uint16_t)maxInterval
                                                       responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionTiltPercentage(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionTiltPercentageWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionTiltPercentage(success);
        },
        true);
}

- (void)readAttributeOperationalStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeOperationalStatus(success, failure);
    });
}

- (void)subscribeAttributeOperationalStatusWithMinInterval:(uint16_t)minInterval
                                               maxInterval:(uint16_t)maxInterval
                                           responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeOperationalStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeOperationalStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeOperationalStatus(success);
        },
        true);
}

- (void)readAttributeTargetPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTargetPositionLiftPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeTargetPositionLiftPercent100thsWithMinInterval:(uint16_t)minInterval
                                                             maxInterval:(uint16_t)maxInterval
                                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTargetPositionLiftPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTargetPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTargetPositionLiftPercent100ths(success);
        },
        true);
}

- (void)readAttributeTargetPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeTargetPositionTiltPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeTargetPositionTiltPercent100thsWithMinInterval:(uint16_t)minInterval
                                                             maxInterval:(uint16_t)maxInterval
                                                         responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeTargetPositionTiltPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeTargetPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeTargetPositionTiltPercent100ths(success);
        },
        true);
}

- (void)readAttributeEndProductTypeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeEndProductType(success, failure);
    });
}

- (void)readAttributeCurrentPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionLiftPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionLiftPercent100thsWithMinInterval:(uint16_t)minInterval
                                                              maxInterval:(uint16_t)maxInterval
                                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionLiftPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionLiftPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionLiftPercent100ths(success);
        },
        true);
}

- (void)readAttributeCurrentPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeCurrentPositionTiltPercent100ths(success, failure);
    });
}

- (void)subscribeAttributeCurrentPositionTiltPercent100thsWithMinInterval:(uint16_t)minInterval
                                                              maxInterval:(uint16_t)maxInterval
                                                          responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeCurrentPositionTiltPercent100ths(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeCurrentPositionTiltPercent100thsWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeCurrentPositionTiltPercent100ths(success);
        },
        true);
}

- (void)readAttributeInstalledOpenLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledOpenLimitLift(success, failure);
    });
}

- (void)readAttributeInstalledClosedLimitLiftWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledClosedLimitLift(success, failure);
    });
}

- (void)readAttributeInstalledOpenLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledOpenLimitTilt(success, failure);
    });
}

- (void)readAttributeInstalledClosedLimitTiltWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeInstalledClosedLimitTilt(success, failure);
    });
}

- (void)readAttributeModeWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt8uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeMode(success, failure);
    });
}

- (void)writeAttributeModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMode(success, failure, value);
    });
}

- (void)readAttributeSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeSafetyStatus(success, failure);
    });
}

- (void)subscribeAttributeSafetyStatusWithMinInterval:(uint16_t)minInterval
                                          maxInterval:(uint16_t)maxInterval
                                      responseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.SubscribeAttributeSafetyStatus(success, failure, minInterval, maxInterval);
    });
}

- (void)reportAttributeSafetyStatusWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(
        self.callbackQueue, responseHandler,
        ^(Cancelable * success, Cancelable * failure) {
            return self.cppCluster.ReportAttributeSafetyStatus(success);
        },
        true);
}

- (void)readAttributeClusterRevisionWithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIPInt16uAttributeCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.ReadAttributeClusterRevision(success, failure);
    });
}

@end
