/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#import <Foundation/Foundation.h>

#import "CHIPCallbackBridge_internal.h"
#import "CHIPCluster_internal.h"
#import "CHIPDevice.h"
#import "CHIPDevice_Internal.h"

#import "zap-generated/CHIPTestClustersObjc.h"
#import "zap-generated/tests/CHIPClusters.h"

using chip::Callback::Cancelable;

@interface CHIPTestAccountLogin ()
@property (readonly) chip::Controller::AccountLoginClusterTest cppCluster;
@end

@implementation CHIPTestAccountLogin

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestAdministratorCommissioning ()
@property (readonly) chip::Controller::AdministratorCommissioningClusterTest cppCluster;
@end

@implementation CHIPTestAdministratorCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestApplicationBasic ()
@property (readonly) chip::Controller::ApplicationBasicClusterTest cppCluster;
@end

@implementation CHIPTestApplicationBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeVendorNameWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeVendorName(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeVendorIdWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeVendorId(success, failure, value);
    });
}

- (void)writeAttributeApplicationNameWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeApplicationName(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeProductIdWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeProductId(success, failure, value);
    });
}

- (void)writeAttributeApplicationIdWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeApplicationId(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeCatalogVendorIdWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCatalogVendorId(success, failure, value);
    });
}

- (void)writeAttributeApplicationStatusWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeApplicationStatus(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestApplicationLauncher ()
@property (readonly) chip::Controller::ApplicationLauncherClusterTest cppCluster;
@end

@implementation CHIPTestApplicationLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeCatalogVendorIdWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCatalogVendorId(success, failure, value);
    });
}

- (void)writeAttributeApplicationIdWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeApplicationId(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestAudioOutput ()
@property (readonly) chip::Controller::AudioOutputClusterTest cppCluster;
@end

@implementation CHIPTestAudioOutput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeCurrentAudioOutputWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentAudioOutput(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestBarrierControl ()
@property (readonly) chip::Controller::BarrierControlClusterTest cppCluster;
@end

@implementation CHIPTestBarrierControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeBarrierMovingStateWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBarrierMovingState(success, failure, value);
    });
}

- (void)writeAttributeBarrierSafetyStatusWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBarrierSafetyStatus(success, failure, value);
    });
}

- (void)writeAttributeBarrierCapabilitiesWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBarrierCapabilities(success, failure, value);
    });
}

- (void)writeAttributeBarrierPositionWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBarrierPosition(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestBasic ()
@property (readonly) chip::Controller::BasicClusterTest cppCluster;
@end

@implementation CHIPTestBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeInteractionModelVersionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInteractionModelVersion(success, failure, value);
    });
}

- (void)writeAttributeVendorNameWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeVendorName(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeVendorIDWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeVendorID(success, failure, value);
    });
}

- (void)writeAttributeProductNameWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeProductName(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeProductIDWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeProductID(success, failure, value);
    });
}

- (void)writeAttributeHardwareVersionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeHardwareVersion(success, failure, value);
    });
}

- (void)writeAttributeHardwareVersionStringWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeHardwareVersionString(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeSoftwareVersionWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSoftwareVersion(success, failure, value);
    });
}

- (void)writeAttributeSoftwareVersionStringWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSoftwareVersionString(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeManufacturingDateWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeManufacturingDate(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributePartNumberWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePartNumber(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeProductURLWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeProductURL(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeProductLabelWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeProductLabel(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeSerialNumberWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSerialNumber(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeReachableWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeReachable(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestBinaryInputBasic ()
@property (readonly) chip::Controller::BinaryInputBasicClusterTest cppCluster;
@end

@implementation CHIPTestBinaryInputBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeStatusFlagsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStatusFlags(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestBinding ()
@property (readonly) chip::Controller::BindingClusterTest cppCluster;
@end

@implementation CHIPTestBinding

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestBridgedDeviceBasic ()
@property (readonly) chip::Controller::BridgedDeviceBasicClusterTest cppCluster;
@end

@implementation CHIPTestBridgedDeviceBasic

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeVendorNameWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeVendorName(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeVendorIDWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeVendorID(success, failure, value);
    });
}

- (void)writeAttributeProductNameWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeProductName(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeHardwareVersionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeHardwareVersion(success, failure, value);
    });
}

- (void)writeAttributeHardwareVersionStringWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeHardwareVersionString(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeSoftwareVersionWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSoftwareVersion(success, failure, value);
    });
}

- (void)writeAttributeSoftwareVersionStringWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSoftwareVersionString(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeManufacturingDateWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeManufacturingDate(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributePartNumberWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePartNumber(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeProductURLWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeProductURL(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeProductLabelWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeProductLabel(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeSerialNumberWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSerialNumber(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeReachableWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeReachable(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestColorControl ()
@property (readonly) chip::Controller::ColorControlClusterTest cppCluster;
@end

@implementation CHIPTestColorControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeCurrentHueWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentHue(success, failure, value);
    });
}

- (void)writeAttributeCurrentSaturationWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentSaturation(success, failure, value);
    });
}

- (void)writeAttributeRemainingTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRemainingTime(success, failure, value);
    });
}

- (void)writeAttributeCurrentXWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentX(success, failure, value);
    });
}

- (void)writeAttributeCurrentYWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentY(success, failure, value);
    });
}

- (void)writeAttributeDriftCompensationWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeDriftCompensation(success, failure, value);
    });
}

- (void)writeAttributeCompensationTextWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCompensationText(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeColorTemperatureWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorTemperature(success, failure, value);
    });
}

- (void)writeAttributeColorModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorMode(success, failure, value);
    });
}

- (void)writeAttributeNumberOfPrimariesWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNumberOfPrimaries(success, failure, value);
    });
}

- (void)writeAttributePrimary1XWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary1X(success, failure, value);
    });
}

- (void)writeAttributePrimary1YWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary1Y(success, failure, value);
    });
}

- (void)writeAttributePrimary1IntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary1Intensity(success, failure, value);
    });
}

- (void)writeAttributePrimary2XWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary2X(success, failure, value);
    });
}

- (void)writeAttributePrimary2YWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary2Y(success, failure, value);
    });
}

- (void)writeAttributePrimary2IntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary2Intensity(success, failure, value);
    });
}

- (void)writeAttributePrimary3XWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary3X(success, failure, value);
    });
}

- (void)writeAttributePrimary3YWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary3Y(success, failure, value);
    });
}

- (void)writeAttributePrimary3IntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary3Intensity(success, failure, value);
    });
}

- (void)writeAttributePrimary4XWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary4X(success, failure, value);
    });
}

- (void)writeAttributePrimary4YWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary4Y(success, failure, value);
    });
}

- (void)writeAttributePrimary4IntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary4Intensity(success, failure, value);
    });
}

- (void)writeAttributePrimary5XWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary5X(success, failure, value);
    });
}

- (void)writeAttributePrimary5YWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary5Y(success, failure, value);
    });
}

- (void)writeAttributePrimary5IntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary5Intensity(success, failure, value);
    });
}

- (void)writeAttributePrimary6XWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary6X(success, failure, value);
    });
}

- (void)writeAttributePrimary6YWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary6Y(success, failure, value);
    });
}

- (void)writeAttributePrimary6IntensityWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePrimary6Intensity(success, failure, value);
    });
}

- (void)writeAttributeEnhancedCurrentHueWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEnhancedCurrentHue(success, failure, value);
    });
}

- (void)writeAttributeEnhancedColorModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEnhancedColorMode(success, failure, value);
    });
}

- (void)writeAttributeColorLoopActiveWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorLoopActive(success, failure, value);
    });
}

- (void)writeAttributeColorLoopDirectionWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorLoopDirection(success, failure, value);
    });
}

- (void)writeAttributeColorLoopTimeWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorLoopTime(success, failure, value);
    });
}

- (void)writeAttributeColorLoopStartEnhancedHueWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorLoopStartEnhancedHue(success, failure, value);
    });
}

- (void)writeAttributeColorLoopStoredEnhancedHueWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorLoopStoredEnhancedHue(success, failure, value);
    });
}

- (void)writeAttributeColorCapabilitiesWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorCapabilities(success, failure, value);
    });
}

- (void)writeAttributeColorTempPhysicalMinWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorTempPhysicalMin(success, failure, value);
    });
}

- (void)writeAttributeColorTempPhysicalMaxWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeColorTempPhysicalMax(success, failure, value);
    });
}

- (void)writeAttributeCoupleColorTempToLevelMinMiredsWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCoupleColorTempToLevelMinMireds(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestContentLauncher ()
@property (readonly) chip::Controller::ContentLauncherClusterTest cppCluster;
@end

@implementation CHIPTestContentLauncher

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestDescriptor ()
@property (readonly) chip::Controller::DescriptorClusterTest cppCluster;
@end

@implementation CHIPTestDescriptor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestDiagnosticLogs ()
@property (readonly) chip::Controller::DiagnosticLogsClusterTest cppCluster;
@end

@implementation CHIPTestDiagnosticLogs

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

@end

@interface CHIPTestDoorLock ()
@property (readonly) chip::Controller::DoorLockClusterTest cppCluster;
@end

@implementation CHIPTestDoorLock

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeLockStateWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLockState(success, failure, value);
    });
}

- (void)writeAttributeLockTypeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLockType(success, failure, value);
    });
}

- (void)writeAttributeActuatorEnabledWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeActuatorEnabled(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestElectricalMeasurement ()
@property (readonly) chip::Controller::ElectricalMeasurementClusterTest cppCluster;
@end

@implementation CHIPTestElectricalMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeMeasurementTypeWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMeasurementType(success, failure, value);
    });
}

- (void)writeAttributeTotalActivePowerWithValue:(int32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTotalActivePower(success, failure, value);
    });
}

- (void)writeAttributeRmsVoltageWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRmsVoltage(success, failure, value);
    });
}

- (void)writeAttributeRmsVoltageMinWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRmsVoltageMin(success, failure, value);
    });
}

- (void)writeAttributeRmsVoltageMaxWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRmsVoltageMax(success, failure, value);
    });
}

- (void)writeAttributeRmsCurrentWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRmsCurrent(success, failure, value);
    });
}

- (void)writeAttributeRmsCurrentMinWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRmsCurrentMin(success, failure, value);
    });
}

- (void)writeAttributeRmsCurrentMaxWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRmsCurrentMax(success, failure, value);
    });
}

- (void)writeAttributeActivePowerWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeActivePower(success, failure, value);
    });
}

- (void)writeAttributeActivePowerMinWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeActivePowerMin(success, failure, value);
    });
}

- (void)writeAttributeActivePowerMaxWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeActivePowerMax(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestEthernetNetworkDiagnostics ()
@property (readonly) chip::Controller::EthernetNetworkDiagnosticsClusterTest cppCluster;
@end

@implementation CHIPTestEthernetNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributePacketRxCountWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePacketRxCount(success, failure, value);
    });
}

- (void)writeAttributePacketTxCountWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePacketTxCount(success, failure, value);
    });
}

- (void)writeAttributeTxErrCountWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxErrCount(success, failure, value);
    });
}

- (void)writeAttributeCollisionCountWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCollisionCount(success, failure, value);
    });
}

- (void)writeAttributeOverrunCountWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOverrunCount(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestFixedLabel ()
@property (readonly) chip::Controller::FixedLabelClusterTest cppCluster;
@end

@implementation CHIPTestFixedLabel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestFlowMeasurement ()
@property (readonly) chip::Controller::FlowMeasurementClusterTest cppCluster;
@end

@implementation CHIPTestFlowMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeMeasuredValueWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeMinMeasuredValueWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMinMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeMaxMeasuredValueWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestGeneralCommissioning ()
@property (readonly) chip::Controller::GeneralCommissioningClusterTest cppCluster;
@end

@implementation CHIPTestGeneralCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestGeneralDiagnostics ()
@property (readonly) chip::Controller::GeneralDiagnosticsClusterTest cppCluster;
@end

@implementation CHIPTestGeneralDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeRebootCountWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRebootCount(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestGroupKeyManagement ()
@property (readonly) chip::Controller::GroupKeyManagementClusterTest cppCluster;
@end

@implementation CHIPTestGroupKeyManagement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestGroups ()
@property (readonly) chip::Controller::GroupsClusterTest cppCluster;
@end

@implementation CHIPTestGroups

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeNameSupportWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNameSupport(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestIdentify ()
@property (readonly) chip::Controller::IdentifyClusterTest cppCluster;
@end

@implementation CHIPTestIdentify

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestKeypadInput ()
@property (readonly) chip::Controller::KeypadInputClusterTest cppCluster;
@end

@implementation CHIPTestKeypadInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestLevelControl ()
@property (readonly) chip::Controller::LevelControlClusterTest cppCluster;
@end

@implementation CHIPTestLevelControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeCurrentLevelWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentLevel(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestLowPower ()
@property (readonly) chip::Controller::LowPowerClusterTest cppCluster;
@end

@implementation CHIPTestLowPower

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestMediaInput ()
@property (readonly) chip::Controller::MediaInputClusterTest cppCluster;
@end

@implementation CHIPTestMediaInput

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeCurrentMediaInputWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentMediaInput(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestMediaPlayback ()
@property (readonly) chip::Controller::MediaPlaybackClusterTest cppCluster;
@end

@implementation CHIPTestMediaPlayback

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributePlaybackStateWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePlaybackState(success, failure, value);
    });
}

- (void)writeAttributeStartTimeWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStartTime(success, failure, value);
    });
}

- (void)writeAttributeDurationWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeDuration(success, failure, value);
    });
}

- (void)writeAttributePositionUpdatedAtWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePositionUpdatedAt(success, failure, value);
    });
}

- (void)writeAttributePositionWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePosition(success, failure, value);
    });
}

- (void)writeAttributePlaybackSpeedWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePlaybackSpeed(success, failure, value);
    });
}

- (void)writeAttributeSeekRangeEndWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSeekRangeEnd(success, failure, value);
    });
}

- (void)writeAttributeSeekRangeStartWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSeekRangeStart(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestNetworkCommissioning ()
@property (readonly) chip::Controller::NetworkCommissioningClusterTest cppCluster;
@end

@implementation CHIPTestNetworkCommissioning

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeFeatureMapWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeFeatureMap(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestOtaSoftwareUpdateProvider ()
@property (readonly) chip::Controller::OtaSoftwareUpdateProviderClusterTest cppCluster;
@end

@implementation CHIPTestOtaSoftwareUpdateProvider

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestOtaSoftwareUpdateRequestor ()
@property (readonly) chip::Controller::OtaSoftwareUpdateRequestorClusterTest cppCluster;
@end

@implementation CHIPTestOtaSoftwareUpdateRequestor

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeUpdatePossibleWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeUpdatePossible(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestOccupancySensing ()
@property (readonly) chip::Controller::OccupancySensingClusterTest cppCluster;
@end

@implementation CHIPTestOccupancySensing

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeOccupancyWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOccupancy(success, failure, value);
    });
}

- (void)writeAttributeOccupancySensorTypeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOccupancySensorType(success, failure, value);
    });
}

- (void)writeAttributeOccupancySensorTypeBitmapWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOccupancySensorTypeBitmap(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestOnOff ()
@property (readonly) chip::Controller::OnOffClusterTest cppCluster;
@end

@implementation CHIPTestOnOff

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeOnOffWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOnOff(success, failure, value);
    });
}

- (void)writeAttributeGlobalSceneControlWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeGlobalSceneControl(success, failure, value);
    });
}

- (void)writeAttributeFeatureMapWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeFeatureMap(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestOnOffSwitchConfiguration ()
@property (readonly) chip::Controller::OnOffSwitchConfigurationClusterTest cppCluster;
@end

@implementation CHIPTestOnOffSwitchConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeSwitchTypeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSwitchType(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestOperationalCredentials ()
@property (readonly) chip::Controller::OperationalCredentialsClusterTest cppCluster;
@end

@implementation CHIPTestOperationalCredentials

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeSupportedFabricsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSupportedFabrics(success, failure, value);
    });
}

- (void)writeAttributeCommissionedFabricsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCommissionedFabrics(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestPowerSource ()
@property (readonly) chip::Controller::PowerSourceClusterTest cppCluster;
@end

@implementation CHIPTestPowerSource

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeStatusWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStatus(success, failure, value);
    });
}

- (void)writeAttributeOrderWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOrder(success, failure, value);
    });
}

- (void)writeAttributeDescriptionWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeDescription(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeBatteryVoltageWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBatteryVoltage(success, failure, value);
    });
}

- (void)writeAttributeBatteryPercentRemainingWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBatteryPercentRemaining(success, failure, value);
    });
}

- (void)writeAttributeBatteryTimeRemainingWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBatteryTimeRemaining(success, failure, value);
    });
}

- (void)writeAttributeBatteryChargeLevelWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBatteryChargeLevel(success, failure, value);
    });
}

- (void)writeAttributeBatteryChargeStateWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBatteryChargeState(success, failure, value);
    });
}

- (void)writeAttributeFeatureMapWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeFeatureMap(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestPressureMeasurement ()
@property (readonly) chip::Controller::PressureMeasurementClusterTest cppCluster;
@end

@implementation CHIPTestPressureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeMeasuredValueWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeMinMeasuredValueWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMinMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeMaxMeasuredValueWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestPumpConfigurationAndControl ()
@property (readonly) chip::Controller::PumpConfigurationAndControlClusterTest cppCluster;
@end

@implementation CHIPTestPumpConfigurationAndControl

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeMaxPressureWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxPressure(success, failure, value);
    });
}

- (void)writeAttributeMaxSpeedWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxSpeed(success, failure, value);
    });
}

- (void)writeAttributeMaxFlowWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxFlow(success, failure, value);
    });
}

- (void)writeAttributeEffectiveOperationModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEffectiveOperationMode(success, failure, value);
    });
}

- (void)writeAttributeEffectiveControlModeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEffectiveControlMode(success, failure, value);
    });
}

- (void)writeAttributeCapacityWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCapacity(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestRelativeHumidityMeasurement ()
@property (readonly) chip::Controller::RelativeHumidityMeasurementClusterTest cppCluster;
@end

@implementation CHIPTestRelativeHumidityMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeMeasuredValueWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeMinMeasuredValueWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMinMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeMaxMeasuredValueWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestScenes ()
@property (readonly) chip::Controller::ScenesClusterTest cppCluster;
@end

@implementation CHIPTestScenes

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeSceneCountWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSceneCount(success, failure, value);
    });
}

- (void)writeAttributeCurrentSceneWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentScene(success, failure, value);
    });
}

- (void)writeAttributeCurrentGroupWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentGroup(success, failure, value);
    });
}

- (void)writeAttributeSceneValidWithValue:(bool)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSceneValid(success, failure, value);
    });
}

- (void)writeAttributeNameSupportWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNameSupport(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestSoftwareDiagnostics ()
@property (readonly) chip::Controller::SoftwareDiagnosticsClusterTest cppCluster;
@end

@implementation CHIPTestSoftwareDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeCurrentHeapHighWatermarkWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentHeapHighWatermark(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestSwitch ()
@property (readonly) chip::Controller::SwitchClusterTest cppCluster;
@end

@implementation CHIPTestSwitch

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeNumberOfPositionsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNumberOfPositions(success, failure, value);
    });
}

- (void)writeAttributeCurrentPositionWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentPosition(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestTvChannel ()
@property (readonly) chip::Controller::TvChannelClusterTest cppCluster;
@end

@implementation CHIPTestTvChannel

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeTvChannelLineupWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTvChannelLineup(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeCurrentTvChannelWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentTvChannel(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestTargetNavigator ()
@property (readonly) chip::Controller::TargetNavigatorClusterTest cppCluster;
@end

@implementation CHIPTestTargetNavigator

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestTemperatureMeasurement ()
@property (readonly) chip::Controller::TemperatureMeasurementClusterTest cppCluster;
@end

@implementation CHIPTestTemperatureMeasurement

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeMeasuredValueWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeMinMeasuredValueWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMinMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeMaxMeasuredValueWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMaxMeasuredValue(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestTestCluster ()
@property (readonly) chip::Controller::TestClusterClusterTest cppCluster;
@end

@implementation CHIPTestTestCluster

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestThermostat ()
@property (readonly) chip::Controller::ThermostatClusterTest cppCluster;
@end

@implementation CHIPTestThermostat

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeLocalTemperatureWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLocalTemperature(success, failure, value);
    });
}

- (void)writeAttributeAbsMinHeatSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeAbsMinHeatSetpointLimit(success, failure, value);
    });
}

- (void)writeAttributeAbsMaxHeatSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeAbsMaxHeatSetpointLimit(success, failure, value);
    });
}

- (void)writeAttributeAbsMinCoolSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeAbsMinCoolSetpointLimit(success, failure, value);
    });
}

- (void)writeAttributeAbsMaxCoolSetpointLimitWithValue:(int16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeAbsMaxCoolSetpointLimit(success, failure, value);
    });
}

- (void)writeAttributeStartOfWeekWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStartOfWeek(success, failure, value);
    });
}

- (void)writeAttributeNumberOfWeeklyTransitionsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNumberOfWeeklyTransitions(success, failure, value);
    });
}

- (void)writeAttributeNumberOfDailyTransitionsWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNumberOfDailyTransitions(success, failure, value);
    });
}

- (void)writeAttributeFeatureMapWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeFeatureMap(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestThermostatUserInterfaceConfiguration ()
@property (readonly) chip::Controller::ThermostatUserInterfaceConfigurationClusterTest cppCluster;
@end

@implementation CHIPTestThermostatUserInterfaceConfiguration

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestThreadNetworkDiagnostics ()
@property (readonly) chip::Controller::ThreadNetworkDiagnosticsClusterTest cppCluster;
@end

@implementation CHIPTestThreadNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeChannelWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeChannel(success, failure, value);
    });
}

- (void)writeAttributeRoutingRoleWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRoutingRole(success, failure, value);
    });
}

- (void)writeAttributeNetworkNameWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeNetworkName(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributePanIdWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePanId(success, failure, value);
    });
}

- (void)writeAttributeExtendedPanIdWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeExtendedPanId(success, failure, value);
    });
}

- (void)writeAttributeMeshLocalPrefixWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeMeshLocalPrefix(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeOverrunCountWithValue:(uint64_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOverrunCount(success, failure, value);
    });
}

- (void)writeAttributePartitionIdWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePartitionId(success, failure, value);
    });
}

- (void)writeAttributeWeightingWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeWeighting(success, failure, value);
    });
}

- (void)writeAttributeDataVersionWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeDataVersion(success, failure, value);
    });
}

- (void)writeAttributeStableDataVersionWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeStableDataVersion(success, failure, value);
    });
}

- (void)writeAttributeLeaderRouterIdWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLeaderRouterId(success, failure, value);
    });
}

- (void)writeAttributeDetachedRoleCountWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeDetachedRoleCount(success, failure, value);
    });
}

- (void)writeAttributeChildRoleCountWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeChildRoleCount(success, failure, value);
    });
}

- (void)writeAttributeRouterRoleCountWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRouterRoleCount(success, failure, value);
    });
}

- (void)writeAttributeLeaderRoleCountWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeLeaderRoleCount(success, failure, value);
    });
}

- (void)writeAttributeAttachAttemptCountWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeAttachAttemptCount(success, failure, value);
    });
}

- (void)writeAttributePartitionIdChangeCountWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributePartitionIdChangeCount(success, failure, value);
    });
}

- (void)writeAttributeBetterPartitionAttachAttemptCountWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBetterPartitionAttachAttemptCount(success, failure, value);
    });
}

- (void)writeAttributeParentChangeCountWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeParentChangeCount(success, failure, value);
    });
}

- (void)writeAttributeTxTotalCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxTotalCount(success, failure, value);
    });
}

- (void)writeAttributeTxUnicastCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxUnicastCount(success, failure, value);
    });
}

- (void)writeAttributeTxBroadcastCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxBroadcastCount(success, failure, value);
    });
}

- (void)writeAttributeTxAckRequestedCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxAckRequestedCount(success, failure, value);
    });
}

- (void)writeAttributeTxAckedCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxAckedCount(success, failure, value);
    });
}

- (void)writeAttributeTxNoAckRequestedCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxNoAckRequestedCount(success, failure, value);
    });
}

- (void)writeAttributeTxDataCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxDataCount(success, failure, value);
    });
}

- (void)writeAttributeTxDataPollCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxDataPollCount(success, failure, value);
    });
}

- (void)writeAttributeTxBeaconCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxBeaconCount(success, failure, value);
    });
}

- (void)writeAttributeTxBeaconRequestCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxBeaconRequestCount(success, failure, value);
    });
}

- (void)writeAttributeTxOtherCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxOtherCount(success, failure, value);
    });
}

- (void)writeAttributeTxRetryCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxRetryCount(success, failure, value);
    });
}

- (void)writeAttributeTxDirectMaxRetryExpiryCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxDirectMaxRetryExpiryCount(success, failure, value);
    });
}

- (void)writeAttributeTxIndirectMaxRetryExpiryCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxIndirectMaxRetryExpiryCount(success, failure, value);
    });
}

- (void)writeAttributeTxErrCcaCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxErrCcaCount(success, failure, value);
    });
}

- (void)writeAttributeTxErrAbortCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxErrAbortCount(success, failure, value);
    });
}

- (void)writeAttributeTxErrBusyChannelCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTxErrBusyChannelCount(success, failure, value);
    });
}

- (void)writeAttributeRxTotalCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxTotalCount(success, failure, value);
    });
}

- (void)writeAttributeRxUnicastCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxUnicastCount(success, failure, value);
    });
}

- (void)writeAttributeRxBroadcastCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxBroadcastCount(success, failure, value);
    });
}

- (void)writeAttributeRxDataCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxDataCount(success, failure, value);
    });
}

- (void)writeAttributeRxDataPollCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxDataPollCount(success, failure, value);
    });
}

- (void)writeAttributeRxBeaconCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxBeaconCount(success, failure, value);
    });
}

- (void)writeAttributeRxBeaconRequestCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxBeaconRequestCount(success, failure, value);
    });
}

- (void)writeAttributeRxOtherCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxOtherCount(success, failure, value);
    });
}

- (void)writeAttributeRxAddressFilteredCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxAddressFilteredCount(success, failure, value);
    });
}

- (void)writeAttributeRxDestAddrFilteredCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxDestAddrFilteredCount(success, failure, value);
    });
}

- (void)writeAttributeRxDuplicatedCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxDuplicatedCount(success, failure, value);
    });
}

- (void)writeAttributeRxErrNoFrameCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxErrNoFrameCount(success, failure, value);
    });
}

- (void)writeAttributeRxErrUnknownNeighborCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxErrUnknownNeighborCount(success, failure, value);
    });
}

- (void)writeAttributeRxErrInvalidSrcAddrCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxErrInvalidSrcAddrCount(success, failure, value);
    });
}

- (void)writeAttributeRxErrSecCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxErrSecCount(success, failure, value);
    });
}

- (void)writeAttributeRxErrFcsCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxErrFcsCount(success, failure, value);
    });
}

- (void)writeAttributeRxErrOtherCountWithValue:(uint32_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRxErrOtherCount(success, failure, value);
    });
}

- (void)writeAttributeChannelMaskWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeChannelMask(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestWakeOnLan ()
@property (readonly) chip::Controller::WakeOnLanClusterTest cppCluster;
@end

@implementation CHIPTestWakeOnLan

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeWakeOnLanMacAddressWithValue:(NSString *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeWakeOnLanMacAddress(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestWiFiNetworkDiagnostics ()
@property (readonly) chip::Controller::WiFiNetworkDiagnosticsClusterTest cppCluster;
@end

@implementation CHIPTestWiFiNetworkDiagnostics

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeBssidWithValue:(NSData *)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeBssid(success, failure, [self asSpan:value]);
    });
}

- (void)writeAttributeSecurityTypeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSecurityType(success, failure, value);
    });
}

- (void)writeAttributeWiFiVersionWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeWiFiVersion(success, failure, value);
    });
}

- (void)writeAttributeChannelNumberWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeChannelNumber(success, failure, value);
    });
}

- (void)writeAttributeRssiWithValue:(int8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeRssi(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end

@interface CHIPTestWindowCovering ()
@property (readonly) chip::Controller::WindowCoveringClusterTest cppCluster;
@end

@implementation CHIPTestWindowCovering

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

- (void)writeAttributeTypeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeType(success, failure, value);
    });
}

- (void)writeAttributeCurrentPositionLiftWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentPositionLift(success, failure, value);
    });
}

- (void)writeAttributeCurrentPositionTiltWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentPositionTilt(success, failure, value);
    });
}

- (void)writeAttributeConfigStatusWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeConfigStatus(success, failure, value);
    });
}

- (void)writeAttributeCurrentPositionLiftPercentageWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentPositionLiftPercentage(success, failure, value);
    });
}

- (void)writeAttributeCurrentPositionTiltPercentageWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentPositionTiltPercentage(success, failure, value);
    });
}

- (void)writeAttributeOperationalStatusWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeOperationalStatus(success, failure, value);
    });
}

- (void)writeAttributeTargetPositionLiftPercent100thsWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTargetPositionLiftPercent100ths(success, failure, value);
    });
}

- (void)writeAttributeTargetPositionTiltPercent100thsWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeTargetPositionTiltPercent100ths(success, failure, value);
    });
}

- (void)writeAttributeEndProductTypeWithValue:(uint8_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeEndProductType(success, failure, value);
    });
}

- (void)writeAttributeCurrentPositionLiftPercent100thsWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentPositionLiftPercent100ths(success, failure, value);
    });
}

- (void)writeAttributeCurrentPositionTiltPercent100thsWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeCurrentPositionTiltPercent100ths(success, failure, value);
    });
}

- (void)writeAttributeInstalledOpenLimitLiftWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInstalledOpenLimitLift(success, failure, value);
    });
}

- (void)writeAttributeInstalledClosedLimitLiftWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInstalledClosedLimitLift(success, failure, value);
    });
}

- (void)writeAttributeInstalledOpenLimitTiltWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInstalledOpenLimitTilt(success, failure, value);
    });
}

- (void)writeAttributeInstalledClosedLimitTiltWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeInstalledClosedLimitTilt(success, failure, value);
    });
}

- (void)writeAttributeSafetyStatusWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeSafetyStatus(success, failure, value);
    });
}

- (void)writeAttributeClusterRevisionWithValue:(uint16_t)value responseHandler:(ResponseHandler)responseHandler
{
    new CHIPDefaultSuccessCallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.WriteAttributeClusterRevision(success, failure, value);
    });
}

@end
