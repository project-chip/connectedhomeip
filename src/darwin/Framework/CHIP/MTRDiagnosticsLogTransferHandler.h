/**
 *
 *    Copyright (c) 2023 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

#import <Foundation/Foundation.h>

#include <protocols/bdx/TransferFacilitator.h>

/**
 * This class is a subclass of the TransferFacilitator (Responder) class and handles the BDX messages for a BDX transfer session.
 * It overrides the HandleTransferSessionOutput virtual method and provides an implementation for it to handle
 * the OutputEvents that are generated by the BDX transfer session state machine.
 *
 * An MTRDiagnosticsLogTransferHandler object will be associated with a specific BDX transfer session.
 *
 */
class MTRDiagnosticsLogTransferHandler : public chip::bdx::Responder {
public:
    MTRDiagnosticsLogTransferHandler()
        : mFileURL(nil)
    {
    }

    MTRDiagnosticsLogTransferHandler(NSURL * _Nonnull url, void (^_Nonnull callback)(bool))
    {
        mFileURL = url;
        mCallback = callback;
    }

    ~MTRDiagnosticsLogTransferHandler() {};

    /**
     * This method handles BDX messages and other TransferSession events.
     *
     * @param[in] event An OutputEvent that contains output from the TransferSession object.
     */
    void HandleTransferSessionOutput(chip::bdx::TransferSession::OutputEvent & event) override;

    /**
     * This is called to abort an ongoing BDX transfer session
     *
     * @param[in] reason The reason to abort the transfer
     */
    void AbortTransfer(chip::bdx::StatusCode reason);

protected:
    /**
     * Called when a BDX message is received over the exchange context
     *
     * @param[in] ec The exchange context
     *
     * @param[in] payloadHeader The payload header of the message
     *
     * @param[in] payload The payload of the message
     */
    CHIP_ERROR OnMessageReceived(chip::Messaging::ExchangeContext * _Nonnull ec, const chip::PayloadHeader & payloadHeader,
        chip::System::PacketBufferHandle && payload) override;

private:
    /**
     * Initializes the TransferSession state machine to be ready for an incoming transfer request, and start the polling timer.
     *
     * @param[in] layer A System::Layer pointer to use to start the polling timer
     *
     * @param[in] fabricIndex The fabric index of the peer node
     *
     * @param[in] peerNodeId The node id of the peer node
     */
    CHIP_ERROR PrepareForTransfer(chip::System::Layer * _Nonnull layer, chip::FabricIndex fabricIndex, chip::NodeId peerNodeId);

    /**
     * Called to send a BDX MsgToSend message over the exchange
     *
     *
     * @param[in] event The output event to be send
     */
    CHIP_ERROR OnMessageToSend(chip::bdx::TransferSession::OutputEvent & event);

    /**
     * Called to begin the transfer session when an init message has been received
     *
     * @param[in] event The output event received
     */
    CHIP_ERROR OnTransferSessionBegin(chip::bdx::TransferSession::OutputEvent & event);

    /**
     * Called to end the transfer session when a BlockAckEOF message has been sent over the exchange
     * or an error has occurred during the BDX session
     *
     * @param[in] event The output event received
     */
    CHIP_ERROR OnTransferSessionEnd(chip::bdx::TransferSession::OutputEvent & event);

    /**
     * Called when a block has been received from the Sender. The block is processed
     * and written to a file and a block ack is sent back to the sender.
     *
     * @param[in] event The output event received
     */
    CHIP_ERROR OnBlockReceived(chip::bdx::TransferSession::OutputEvent & event);

    /**
     * This method is called to reset state. It resets the transfer and cleans up the
     * exchange and the fabric index and peer node id.
     */
    void Reset();

    // The fabric index of the node with which the BDX session is established.
    chip::Optional<chip::FabricIndex> mFabricIndex;

    // The node id of the node with which the BDX session is established.
    chip::Optional<chip::NodeId> mPeerNodeId;

    chip::Messaging::ExchangeContext * _Nullable mExchangeCtx;

    NSURL * _Nullable mFileURL;

    NSFileHandle * _Nullable mFileHandle;
    std::function<void(bool)> mCallback;
};
