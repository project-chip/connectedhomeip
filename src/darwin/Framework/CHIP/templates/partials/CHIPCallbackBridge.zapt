{{#if header}}
{{#*inline "callbackType"}}{{#if (isStrEqual partial-type "Command")}}CHIP{{> @partial-block}}Type{{else}}{{> @partial-block}}{{/if}}{{/inline}}
class CHIP{{> @partial-block}}Bridge : public CHIPCallbackBridge<{{>callbackType}}>
{
public:
    CHIP{{> @partial-block}}Bridge(dispatch_queue_t queue, ResponseHandler handler, CHIPActionBlock action, bool keepAlive = false)
      : CHIPCallbackBridge<{{>callbackType}}>(queue, handler, action, OnSuccessFn, keepAlive)
      {};
    
    static void OnSuccessFn(void * context
      {{#if (isStrEqual partial-type "Command")}}
      , const chip::app::Clusters::{{asUpperCamelCase parent.name}}::Commands::{{asUpperCamelCase name}}::DecodableType & data
      {{else if (isStrEqual partial-type "CommandStatus")}}
      , const chip::app::DataModel::NullObjectType &
      {{else if (isStrEqual partial-type "List")}}
      , {{zapTypeToDecodableClusterObjectType type ns=parent.name isArgument=true}} list
      {{else if partial-type}}
      , {{asUnderlyingZclType partial-type}} value
      {{else}}
      {{/if}}
    );
};
{{else}}
void CHIP{{> @partial-block}}Bridge::OnSuccessFn(void * context
  {{#if (isStrEqual partial-type "Command")}}
  , const chip::app::Clusters::{{asUpperCamelCase parent.name}}::Commands::{{asUpperCamelCase name}}::DecodableType & data
  {{else if (isStrEqual partial-type "CommandStatus")}}
  , const chip::app::DataModel::NullObjectType &
  {{else if (isStrEqual partial-type "List")}}
  , {{zapTypeToDecodableClusterObjectType type ns=parent.name isArgument=true}} list
  {{else if partial-type}}
  , {{asUnderlyingZclType partial-type}} value
  {{else}}
  {{/if}}
)
{
    {{#if (isStrEqual partial-type "Command")}}
    NSMutableDictionary * response = [[NSMutableDictionary alloc] init];
    {{#chip_cluster_response_arguments}}
    {
      id value;
      {{>decode_value target="value" source=(concat "data." (asLowerCamelCase label)) cluster=parent.parent.name errorCode="OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE); return;"}}
      response[@"{{asStructPropertyName label}}"] = value;
    }
    {{/chip_cluster_response_arguments}}
    DispatchSuccess(context, response);
    {{else if (isStrEqual partial-type "List")}}
    id array = [[NSMutableArray alloc] init];
    auto iter = list.begin();
    while (iter.Next())
    {
        auto & entry = iter.GetValue();
        (void)entry; // All our types below might be unsupported
        {{#if isStruct}}
        [array addObject:@{
          {{#chip_attribute_list_entryTypes}}
          {{#if isOptional}}
          {{! TODO: Add support for optional types, probably by having a templated ToObjectiveCType function }}
          {{else if isNullable}}
          {{! TODO: Add support for nullable types, probably by having a templated ToObjectiveCType function }}
          {{else if isArray}}
          {{! TODO: Add support for list members of structs in list attributes }}
          @"{{asStructPropertyName name}}": [[NSMutableArray alloc] init],
          {{else if (isOctetString type)}}
          @"{{asStructPropertyName name}}" : [NSData dataWithBytes:entry.{{asLowerCamelCase name}}.data() length:entry.{{asLowerCamelCase name}}.size()],
          {{else if (isCharString type)}}
          @"{{asStructPropertyName name}}" : [[NSString alloc] initWithBytes:entry.{{asLowerCamelCase name}}.data() length:entry.{{asLowerCamelCase name}}.size() encoding:NSUTF8StringEncoding],
          {{else if isStruct}}
          {{! TODO: Add support for struct members of structs in list attributes }}
          @"{{asStructPropertyName name}}": @{}
          {{else}}
          @"{{asStructPropertyName name}}" : [NSNumber numberWith{{asObjectiveCNumberType label type false}}:entry.{{asLowerCamelCase name}}],
          {{/if}}
          {{/chip_attribute_list_entryTypes}}
        }];
        {{else if (isOctetString type)}}
        [array addObject:[NSData dataWithBytes:entry.data() length:entry.size()]];
        {{else if (isCharString type)}}
        [array addObject:[[NSString alloc] initWithBytes:entry.data() length:entry.size() encoding:NSUTF8StringEncoding]];
        {{else}}
        [array addObject:[NSNumber numberWith{{asObjectiveCNumberType label type false}}:entry]];
        {{/if}}
    }
    if (iter.GetStatus() != CHIP_NO_ERROR)
    {
        OnFailureFn(context, EMBER_ZCL_STATUS_INVALID_VALUE);
        return;
    }

    DispatchSuccess(context, @{ @"value": array });
    {{else if (isOctetString partial-type)}}
    DispatchSuccess(context, @{ @"value": [NSData dataWithBytes: value.data() length: value.size()] });
    {{else if (isCharString partial-type)}}
    DispatchSuccess(context, @{ @"value": [[NSString alloc] initWithBytes:value.data() length:value.size() encoding:NSUTF8StringEncoding] });
    {{else if (isStrEqual partial-type "CommandStatus")}}
    DispatchSuccess(context, nil);
    {{else if partial-type}}
    DispatchSuccess(context, @{ @"value": [NSNumber numberWith{{asObjectiveCNumberType name partial-type false}}:value] });
    {{else}}
    DispatchSuccess(context, nil);
    {{/if}}
};
{{/if}}
