class CHIP{{name}}CallbackBridge : public Callback::Callback<{{name}}Callback> {
public:
    CHIP{{name}}CallbackBridge(ResponseHandler handler, dispatch_queue_t queue, bool keepAlive = false)
        : Callback::Callback<{{name}}Callback>(CallbackFn, this)
        , mHandler(handler)
        , mQueue(queue)
        , mKeepAlive(keepAlive)
        {}

    ~CHIP{{name}}CallbackBridge() {};

    static void CallbackFn(void * context{{#if type}}, {{#if (isCharString type)}}chip::ByteSpan{{else}}{{asUnderlyingZclType type}}{{/if}} value{{/if}})
    {
        {{#if (isString type)}}
        NSData * data = [NSData dataWithBytes: value.data() length: value.size()];
        {{/if}}
        CHIP{{name}}CallbackBridge * callback = reinterpret_cast<CHIP{{name}}CallbackBridge *>(context);
        if (callback && callback->mQueue)
        {
            dispatch_async(callback->mQueue, ^{
                {{#if (isStrEqual name "DefaultFailure")}}
                NSError * error = [CHIPError errorForZCLErrorCode:value];
                callback->mHandler(error, nil);
                {{else if (isOctetString type)}}
                callback->mHandler(nil, @{ @"value": data });
                {{else if (isCharString type)}}
                NSString * str = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
                callback->mHandler(nil, @{ @"value": str });
                {{else if type}}
                callback->mHandler(nil, @{ @"value": [NSNumber numberWith{{asObjectiveCNumberType name type false}}:value] });
                {{else}}
                callback->mHandler(nil, nil);
                {{/if}}
                if (!callback->mKeepAlive) {
                    callback->Cancel();
                    delete callback;
                }
            });
        }
    };

private:
    ResponseHandler mHandler;
    dispatch_queue_t mQueue;
    bool mKeepAlive;
};

