{{#if isOptional}}
  {{! This just means we expect a non-nil value.  Go ahead and check the value,
      stripping the optionality off. }}
  {{>check_test_value actual=actual expected=expected cluster=cluster isOptional=false}}
{{else if isNullable}}
  {{#if (isLiteralNull expected)}}
    XCTAssertTrue({{actual}} == nil);
  {{else}}
    {{#if (chip_tests_variables_has expected)}}
      {{! Expected value is also a nullable. }}
      if ({{expected}} == nil) {
        XCTAssertTrue({{actual}} == nil);
      } else {
    {{/if}}
    XCTAssertFalse({{actual}} == nil);
    {{>check_test_value actual=actual expected=expected cluster=cluster isNullable=false}}
    {{#if (chip_tests_variables_has expected)}}
    }
    {{/if}}
  {{/if}}
{{else if isArray}}
    {{ensureIsArray expected~}}
    XCTAssertEqual([{{actual}} count], {{expected.length}});
    {{#each expected}}
      {{>check_test_value actual=(concat ../actual "[" @index "]") expected=this cluster=../cluster isArray=false type=../type parent=../parent}}
    {{/each}}
{{else}}
  {{#if_is_struct type}}
    {{! Iterate over the actual types in the struct, so we pick up the right
        type/optionality/nullability information for them for our recursive
        call. }}
    {{#zcl_struct_items_by_struct_name type}}
      {{#if (hasProperty ../expected label)}}
        {{>check_test_value actual=(concat "((CHIP" (asUpperCamelCase ../cluster) "Cluster" (asUpperCamelCase ../type) " *)" ../actual ")." (asStructPropertyName label)) expected=(lookup ../expected label) cluster=../cluster}}
      {{/if}}
    {{/zcl_struct_items_by_struct_name}}
    {{! Maybe we should add a check for properties in the expected object (other
        than "global") that are not present in the struct ? }}
  {{else}}
    {{#if (chip_tests_variables_has expected)}}
      XCTAssertEqualObjects({{actual}}, {{expected}});
    {{else if (isOctetString type)}}
      XCTAssertTrue([{{actual}} isEqualToData:[[NSData alloc] initWithBytes:"{{octetStringEscapedForCLiteral expected}}" length:{{expected.length}}]]);
    {{else if (isCharString type)}}
      XCTAssertTrue([{{actual}} isEqualToString:@"{{expected}}"]);
    {{else}}
      XCTAssertEqual([{{actual}} {{asObjectiveCNumberType "" type true}}Value], {{asTypedLiteral expected type}});
    {{/if}}
  {{/if_is_struct}}
{{/if}}
