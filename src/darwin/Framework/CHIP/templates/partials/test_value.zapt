{{#if (chip_tests_config_has definedValue)}}
  {{! Just replace the value's name with the actual value in the rest of the processing~}}
  {{>test_value target=target definedValue=(chip_tests_config_get_default_value definedValue) cluster=cluster depth=depth}}
{{else if isOptional}}
  {{! Just go ahead and assign to the value, stripping the optionality bit off.  }}
  {{>test_value target=target definedValue=definedValue cluster=cluster isOptional=false depth=(incrementDepth depth)}}
{{else if isNullable}}
  {{#if (isLiteralNull definedValue)}}
    {{target}} = nil;
  {{else}}
    {{>test_value target=target definedValue=definedValue cluster=cluster isNullable=false depth=(incrementDepth depth)}}
  {{/if}}
{{else if isArray}}
  {
    NSMutableArray * temp_{{depth}} = [[NSMutableArray alloc] init];
    {{#each definedValue}}
      {{>test_value target=(concat "temp_" ../depth "[" @index "]") definedValue=this cluster=../cluster depth=(incrementDepth ../depth) type=../type isArray=false parent=../parent}}
    {{/each}}
    {{target}} = temp_{{depth}};
  }
{{else}}
  {{#if_is_struct type}}
    {{target}} = [[CHIP{{asUpperCamelCase cluster}}Cluster{{asUpperCamelCase type}} alloc] init];
    {{#zcl_struct_items_by_struct_name type}}
      {{#if_include_struct_item_value ../definedValue name}}
        {{! target may be some place where we lost type information (e.g. an
            id), so add explicit cast when trying to assign to our
            properties. }}
        {{>test_value target=(concat "((CHIP" (asUpperCamelCase ../cluster) "Cluster" (asUpperCamelCase ../type) " *)" ../target ")." (asStructPropertyName label)) definedValue=(lookup ../definedValue name) cluster=../cluster depth=(incrementDepth ../depth)}}
      {{/if_include_struct_item_value}}
    {{/zcl_struct_items_by_struct_name}}

  {{else if (chip_tests_variables_has definedValue)}}
    {{target}} = [{{definedValue}} copy];
  {{else if (isCharString type)}}
    {{target}} = @"{{definedValue}}";
  {{else if (isOctetString type)}}
    {{target}} = [[NSData alloc] initWithBytes:"{{octetStringEscapedForCLiteral definedValue}}" length:{{definedValue.length}}];
  {{else}}
    {{target}} = [NSNumber numberWith{{asObjectiveCNumberType definedValue type false}}:{{asTypedLiteral definedValue type}}];
  {{/if_is_struct}}
{{/if}}
