{{#chip_tests tests}}
{{#chip_tests_items}}
- (void)testSendCluster{{parent.filename}}_{{asTestIndex index}}_{{asUpperCamelCase command}}
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"{{label}}"];
{{#if (isTestOnlyCluster cluster)}}
    dispatch_queue_t queue = dispatch_get_main_queue();
    {{command}}(expectation, queue{{#chip_tests_item_parameters}}, {{definedValue}}{{/chip_tests_item_parameters}});
{{else}}
    CHIPDevice * device = GetPairedDevice(kDeviceId);
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIP{{asUpperCamelCase cluster}} * cluster = [[CHIP{{asUpperCamelCase cluster}} alloc] initWithDevice:device endpoint:{{endpoint}} queue:queue];
    XCTAssertNotNil(cluster);

    {{#if isReadAttribute}}
    {{else}}
    {{#chip_tests_item_parameters}}
    {{#if (isString type)}}
    {{#if (isOctetString type)}}
    NSString * {{asLowerCamelCase name}}ArgumentString= @"{{definedValue}}";
    NSData * {{asLowerCamelCase name}}Argument = [{{asLowerCamelCase name}}ArgumentString dataUsingEncoding:NSUTF8StringEncoding];
    {{else}}
    NSString * {{asLowerCamelCase name}}Argument= @"{{definedValue}}";
    {{/if}}
    {{else}}
    {{chipType}} {{asLowerCamelCase name}}Argument = {{definedValue}}{{asTypeLiteralSuffix chipType}};
    {{/if}}
    {{/chip_tests_item_parameters}}
    {{/if}}
    {{#if isCommand}}
    [cluster {{asLowerCamelCase command}}:{{#chip_tests_item_parameters}}{{#not_first}}{{asLowerCamelCase name}}:{{/not_first}}{{asLowerCamelCase name}}Argument {{#last}}responseHandler:{{/last}}{{/chip_tests_item_parameters}}^(NSError * err, NSDictionary * values) {
    {{else if isSubscribeAttribute}}
    __block bool initialReportReceived = false;
    [cluster reportAttribute{{asUpperCamelCase attribute}}WithResponseHandler:^(NSError * err, NSDictionary * values) {
        NSLog(@"Reporting Test Report: %@", err);
        XCTAssertEqual(err.code, 0);
        {{> process_response_value}}
        initialReportReceived = true;
    }];

    [cluster configureAttribute{{asUpperCamelCase attribute}}WithMinInterval:{{minInterval}}
                                                                 maxInterval:{{maxInterval}}
                                                             responseHandler:^(NSError * err, NSDictionary * values) {
    {{else if isReadAttribute}}
    [cluster readAttribute{{asUpperCamelCase attribute}}WithResponseHandler:^(NSError * err, NSDictionary * values) {
    {{else if isWriteAttribute}}
    [cluster writeAttribute{{asUpperCamelCase attribute}}WithValue:{{#chip_tests_item_parameters}}{{asLowerCamelCase name}}Argument{{/chip_tests_item_parameters}} responseHandler:^(NSError * err, NSDictionary * values) {
    {{/if}}
        NSLog(@"{{label}} Error: %@", err);

        {{#if optional}}
        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }
        {{/if}}

        XCTAssertEqual(err.code, {{response.error}});
        {{#unless (isStrEqual "0" response.error)}}
        [expectation fulfill];
        {{else}}
        {{#unless isSubscribeAttribute}}
        {{> process_response_value}}
        {{else}}
        XCTAssertEqual(initialReportReceived, true);
        {{/unless}}
        [expectation fulfill];
        {{/unless}}
    }];

{{/if}}
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
{{/chip_tests_items}}

{{/chip_tests}}
