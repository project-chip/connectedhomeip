{{#chip_tests tests}}
{{#chip_tests_items}}
{{#if async}}
bool testSendCluster{{parent.filename}}_{{asTestIndex index}}_{{asUpperCamelCase command}}_Fulfilled = false;
{{/if}}
- (void)testSendCluster{{parent.filename}}_{{asTestIndex index}}_{{asUpperCamelCase command}}
{
    {{#unless async}}
    XCTestExpectation * expectation = [self expectationWithDescription:@"{{label}}"];
    {{/unless}}

{{#if (isTestOnlyCluster cluster)}}
    dispatch_queue_t queue = dispatch_get_main_queue();
    {{command}}(expectation, queue{{#chip_tests_item_parameters}}, {{definedValue}}{{/chip_tests_item_parameters}});
{{else}}
    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTest{{asUpperCamelCase cluster}} * cluster = [[CHIPTest{{asUpperCamelCase cluster}} alloc] initWithDevice:device endpoint:{{endpoint}} queue:queue];
    XCTAssertNotNil(cluster);

    {{#if isCommand}}
      {{! We need a way to easily do something based on whether the command has
          fields. There are cases when chip_tests_item_parameters has nothing
          in it even when the command does have fields (e.g. if they are all
          optional and we are not sending any of them) but the name of our
          command depends on whether it _could_ have fields. }}
      {{#*inline "checkForFields"}}
        {{~#chip_client_clusters}}
          {{~#if (isStrEqual (asUpperCamelCase name) (asUpperCamelCase ../clusterName))}}
            {{~#chip_cluster_commands}}
              {{~#if (isStrEqual (asUpperCamelCase name) (asUpperCamelCase ../../commandName))}}
                {{~#chip_cluster_command_arguments}}
                {{~#first}}
                  {{~../../../textIfFields}}
                {{/first}}
                {{else}}
                  {{~../../../textIfNoFields}}
                {{/chip_cluster_command_arguments}}
              {{/if}}
            {{/chip_cluster_commands}}
          {{/if}}
        {{/chip_client_clusters}}
      {{/inline}}
      {{> checkForFields clusterName=cluster commandName=command
          textIfFields=(concat "__auto_type * params = [[CHIP" (asUpperCamelCase cluster) "Cluster" (asUpperCamelCase command) "Params alloc] init];")
          textIfNoFields=""}}
      {{#chip_tests_item_parameters}}
        {{>test_value target=(concat "params." (asStructPropertyName label)) definedValue=definedValue cluster=parent.cluster}}
      {{/chip_tests_item_parameters}}
      [cluster {{asLowerCamelCase command}}With
      {{~> checkForFields clusterName=cluster commandName=command
           textIfFields="Params:params completionHandler"
           textIfNoFields="CompletionHandler"}}:^(NSError * err, NSDictionary * values) {
    {{else if isSubscribeAttribute}}
    {{#chip_tests_item_parameters}}
    {{#if (isString type)}}
    {{#if (isOctetString type)}}
    NSData * {{asLowerCamelCase name}}Argument = [[NSData alloc] initWithBytes:"{{octetStringEscapedForCLiteral definedValue}}" length:{{definedValue.length}}];
    {{else}}
    NSString * {{asLowerCamelCase name}}Argument= @"{{definedValue}}";
    {{/if}}
    {{else}}
    {{asObjectiveCBasicType type}} {{asLowerCamelCase name}}Argument = {{definedValue}}{{asTypeLiteralSuffix type}};
    {{/if}}
    {{/chip_tests_item_parameters}}
    [cluster subscribeAttribute{{asUpperCamelCase attribute}}WithMinInterval:minIntervalArgument
                                                                 maxInterval:maxIntervalArgument
                                                             responseHandler:^(NSError * err, NSDictionary * values) {
    {{else if isWaitForReport}}
    [cluster reportAttribute{{asUpperCamelCase attribute}}WithResponseHandler:^(NSError * err, NSDictionary * values) {
    {{else if isReadAttribute}}
    [cluster readAttribute{{asUpperCamelCase attribute}}WithResponseHandler:^(NSError * err, NSDictionary * values) {
    {{else if isWriteAttribute}}
    {{#chip_tests_item_parameters}}
    id {{asLowerCamelCase name}}Argument;
    {{>test_value target=(concat (asLowerCamelCase name) "Argument") definedValue=definedValue cluster=parent.cluster}}
    {{/chip_tests_item_parameters}}
    [cluster writeAttribute{{asUpperCamelCase attribute}}WithValue:{{#chip_tests_item_parameters}}{{asLowerCamelCase name}}Argument{{/chip_tests_item_parameters}} responseHandler:^(NSError * err, NSDictionary * values) {
    {{/if}}
        NSLog(@"{{label}} Error: %@", err);

        {{#if optional}}
        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }
        {{/if}}

        XCTAssertEqual(err.code, {{response.error}});
        {{#unless (isStrEqual "0" response.error)}}
        [expectation fulfill];
        {{else}}
        {{#unless isSubscribeAttribute}}

        {{#chip_tests_item_response_parameters}}
        {{#if hasExpectedValue}}
        {
          id actualValue = values[@"{{#if parent.isAttribute}}value{{else}}{{asStructPropertyName name}}{{/if}}"];
          {{>check_test_value actual="actualValue" expected=expectedValue cluster=../cluster}}
        }
        {{/if}}
        {{#if hasExpectedConstraints}}
        {{#if expectedConstraints.minLength}}
        XCTAssertGreaterThanOrEqual([values[@"{{#if parent.isAttribute}}value{{else}}{{name}}{{/if}}"] length], {{expectedConstraints.minLength}});
        {{/if}}
        {{#if expectedConstraints.maxLength}}
        XCTAssertLessThanOrEqual([values[@"{{#if parent.isAttribute}}value{{else}}{{name}}{{/if}}"] length], {{expectedConstraints.maxLength}});
        {{/if}}
        {{#if expectedConstraints.minValue}}
        XCTAssertGreaterThanOrEqual([values[@"{{#if parent.isAttribute}}value{{else}}{{name}}{{/if}}"] {{asObjectiveCNumberType "" type true}}Value], {{expectedConstraints.minValue}});
        {{/if}}
        {{#if expectedConstraints.maxValue}}
        XCTAssertLessThanOrEqual([values[@"{{#if parent.isAttribute}}value{{else}}{{name}}{{/if}}"] {{asObjectiveCNumberType "" type true}}Value], {{expectedConstraints.maxValue}});
        {{/if}}
        {{#if expectedConstraints.notValue}}
        XCTAssertNotEqual([values[@"{{#if parent.isAttribute}}value{{else}}{{name}}{{/if}}"] {{asObjectiveCNumberType "" type true}}Value], {{expectedConstraints.notValue}});
        {{/if}}
        {{/if}}
        {{/chip_tests_item_response_parameters}}

        {{else}}
        XCTAssertEqual(testSendCluster{{parent.filename}}_{{asTestIndex waitForReport.index}}_{{asUpperCamelCase waitForReport.command}}_Fulfilled, true);
        {{/unless}}
        {{#unless async}}
        [expectation fulfill];
        {{else}}
        testSendCluster{{parent.filename}}_{{asTestIndex index}}_{{asUpperCamelCase command}}_Fulfilled = true;
        {{/unless}}
        {{/unless}}
    }];

{{/if}}
    {{#unless async}}
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
    {{/unless}}
}
{{/chip_tests_items}}

{{/chip_tests}}
