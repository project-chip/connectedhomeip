{{#chip_tests tests}}
{{#chip_tests_items}}
- (void)testSendCluster{{parent.filename}}_{{asTestIndex index}}_{{asCamelCased command false}}
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"{{label}}"];
    CHIPDevice * device = GetPairedDevice(kDeviceId);
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIP{{asCamelCased cluster false}} * cluster = [[CHIP{{asCamelCased cluster false}} alloc] initWithDevice:device endpoint:{{endpoint}} queue:queue];
    XCTAssertNotNil(cluster);

    {{#if isCommand}}
    [cluster {{command}}:^(NSError * err, NSDictionary * values) {
    {{else if isReadAttribute}}
    [cluster readAttribute{{asCamelCased attribute false}}WithResponseHandler:^(NSError * err, NSDictionary * values) {
    {{else if isWriteAttribute}}
    {{#chip_tests_item_parameters}}
    {{#if (isString type)}}
    {{#if (isOctetString type)}}
    NSString * {{asCamelCased name true}}ArgumentString= @"{{definedValue}}";
    NSData * {{asCamelCased name true}}Argument = [{{asCamelCased name true}}ArgumentString dataUsingEncoding:NSUTF8StringEncoding];
    {{else}}
    NSString * {{asCamelCased name true}}Argument= @"{{definedValue}}";
    {{/if}}
    {{else}}
    {{chipType}} {{asCamelCased name true}}Argument = {{definedValue}}{{asTypeLiteralSuffix chipType}};
    {{/if}}
    {{/chip_tests_item_parameters}}
    [cluster writeAttribute{{asCamelCased attribute false}}WithValue:{{#chip_tests_item_parameters}}{{asCamelCased name true}}Argument{{/chip_tests_item_parameters}} responseHandler:^(NSError * err, NSDictionary * values) {
    {{/if}}
        NSLog(@"{{label}} Error: %@", err);

        {{#if optional}}
        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }
        {{/if}}

        XCTAssertEqual(err.code, {{response.error}});
        {{#unless (isStrEqual "0" response.error)}}
        [expectation fulfill];
        {{else}}
        {{#chip_tests_item_response_parameters}}
        {{#if hasExpectedValue}}
        {{#if isList}}
        XCTAssertEqual([values[@"{{#if parent.isReadAttribute}}value{{else}}{{name}}{{/if}}"] count], {{expectedValue.length}});
        {{else}}
        {{#if (isString type)}}
        {{#if (isOctetString type)}}
        NSString * {{asCamelCased name true}}ArgumentString= @"{{expectedValue}}";
        NSData * {{asCamelCased name true}}Argument = [{{asCamelCased name true}}ArgumentString dataUsingEncoding:NSUTF8StringEncoding];
        XCTAssertTrue([values[@"{{#if parent.isReadAttribute}}value{{else}}{{name}}{{/if}}"] isEqualToData:{{asCamelCased name true}}Argument]);
        {{else}}
        NSString * {{asCamelCased name true}}Argument= @"{{expectedValue}}";
        XCTAssertTrue([values[@"{{#if parent.isReadAttribute}}value{{else}}{{name}}{{/if}}"] isEqualToString:{{asCamelCased name true}}Argument]);
        {{/if}}
        {{else}}
        XCTAssertEqual([values[@"{{#if parent.isReadAttribute}}value{{else}}{{name}}{{/if}}"] {{asObjectiveCNumberType "" type true}}Value], {{expectedValue}}{{asTypeLiteralSuffix}});
        {{/if}}
        {{/if}}
        {{/if}}
        {{#if hasExpectedConstraints}}
        {{#if expectedConstraints.minLength}}
        XCTAssertGreaterThanOrEqual([values[@"{{#if parent.isReadAttribute}}value{{else}}{{name}}{{/if}}"] length], {{expectedConstraints.minLength}});
        {{/if}}
        {{#if expectedConstraints.maxLength}}
        XCTAssertLessThanOrEqual([values[@"{{#if parent.isReadAttribute}}value{{else}}{{name}}{{/if}}"] length], {{expectedConstraints.maxLength}});
        {{/if}}
        {{/if}}
        {{/chip_tests_item_response_parameters}}
        [expectation fulfill];

        {{/unless}}
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
{{/chip_tests_items}}

{{/chip_tests}}
