{{#chip_tests tests}}
{{#chip_tests_items}}
{{#if async}}
bool testSendCluster{{parent.filename}}_{{asTestIndex index}}_{{asUpperCamelCase command}}_Fulfilled = false;
{{/if}}
{{#chip_tests_item_response_parameters}}
{{#if saveAs}}
{{asObjectiveCType type ../cluster}} {{saveAs}};
{{/if}}
{{/chip_tests_item_response_parameters}}

{{~#*inline "subscribeDataCallback"}}
test_{{parent.filename}}_{{attribute}}_Reported
{{/inline}}
{{#if allocateSubscribeDataCallback}}
ResponseHandler {{> subscribeDataCallback}} = nil;
{{/if~}}

- (void)testSendCluster{{parent.filename}}_{{asTestIndex index}}_{{asUpperCamelCase command}}
{
    {{#unless async}}
    XCTestExpectation * expectation = [self expectationWithDescription:@"{{label}}"];
    {{/unless}}

{{#if (isTestOnlyCluster cluster)}}
    dispatch_queue_t queue = dispatch_get_main_queue();
    {{command}}(expectation, queue{{#chip_tests_item_parameters}}, {{#if (isString type)}}@"{{/if}}{{> defined_value}}{{#if (isString type)}}"{{/if}}{{/chip_tests_item_parameters}});
{{else}}
    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTest{{asUpperCamelCase cluster}} * cluster = [[CHIPTest{{asUpperCamelCase cluster}} alloc] initWithDevice:device endpoint:{{endpoint}} queue:queue];
    XCTAssertNotNil(cluster);

    {{#if isCommand}}
      {{#if commandObject.arguments.length}}
        __auto_type * params = [[CHIP{{asUpperCamelCase cluster}}Cluster{{asUpperCamelCase command}}Params alloc] init];
      {{/if}}
      {{#chip_tests_item_parameters}}
        {{>test_value target=(concat "params." (asStructPropertyName label)) definedValue=definedValue cluster=parent.cluster depth=0}}
      {{/chip_tests_item_parameters}}
      [cluster {{asLowerCamelCase command}}With
      {{~#if commandObject.arguments.length~}}
        Params:params completionHandler:
      {{else~}}
        CompletionHandler:
      {{/if}}
      {{#if commandObject.hasSpecificResponse}}
        ^(CHIP{{asUpperCamelCase cluster}}Cluster{{asUpperCamelCase commandObject.responseName}}Params * _Nullable values, NSError * _Nullable err) {
      {{else}}
        ^(NSError * _Nullable err) {
      {{/if}}
    {{else if isSubscribeAttribute}}
    {{#chip_tests_item_parameters}}
    {{asObjectiveCBasicType type}} {{asLowerCamelCase name}}Argument = {{asTypedLiteral definedValue type}};
    {{/chip_tests_item_parameters}}
    {{#if_is_fabric_scoped_struct attributeObject.type}}
    CHIPReadParams * params = [[CHIPReadParams alloc] init];
    params.fabricFiltered = [NSNumber numberWithBool:{{fabricFiltered}}];
    {{/if_is_fabric_scoped_struct}}
    [cluster subscribeAttribute{{asUpperCamelCase attribute}}WithMinInterval:@(minIntervalArgument)
                                                                 maxInterval:@(maxIntervalArgument)
          {{#if_is_fabric_scoped_struct attributeObject.type}}
                                                                      params:params
          {{/if_is_fabric_scoped_struct}}
                                                     subscriptionEstablished:^{
        XCTAssertEqual(testSendCluster{{parent.filename}}_{{asTestIndex waitForReport.index}}_{{asUpperCamelCase waitForReport.command}}_Fulfilled, true);
        [expectation fulfill];
      }
                                                               reportHandler:^({{asObjectiveCClass attributeObject.type cluster forceList=attributeObject.isArray}} * _Nullable value, NSError * _Nullable err) {
    {{else if isWaitForReport}}
    {{> subscribeDataCallback }} = ^({{asObjectiveCClass attributeObject.type cluster forceList=attributeObject.isArray}} * _Nullable value, NSError * _Nullable err) {
    {{else if isReadAttribute}}
    {{#if_is_fabric_scoped_struct attributeObject.type}}
    CHIPReadParams * params = [[CHIPReadParams alloc] init];
    params.fabricFiltered = [NSNumber numberWithBool:{{fabricFiltered}}];
    [cluster readAttribute{{asUpperCamelCase attribute}}WithParams:params completionHandler:
    {{else}}
    [cluster readAttribute{{asUpperCamelCase attribute}}WithCompletionHandler:
    {{/if_is_fabric_scoped_struct}}
    ^({{asObjectiveCClass attributeObject.type cluster forceList=attributeObject.isArray}} * _Nullable value, NSError * _Nullable err) {
    {{else if isWriteAttribute}}
    {{#chip_tests_item_parameters}}
    id {{asLowerCamelCase name}}Argument;
    {{>test_value target=(concat (asLowerCamelCase name) "Argument") definedValue=definedValue cluster=parent.cluster depth=0}}
    {{/chip_tests_item_parameters}}
    [cluster writeAttribute{{asUpperCamelCase attribute}}WithValue:{{#chip_tests_item_parameters}}{{asLowerCamelCase name}}Argument{{/chip_tests_item_parameters}} completionHandler:^(NSError * _Nullable err) {
    {{/if}}
        NSLog(@"{{label}} Error: %@", err);

        {{#if optional}}
        if (err.domain == MatterInteractionErrorDomain && err.code == MatterInteractionErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }
        {{/if}}

        {{#if response.error}}
          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], {{response.error}});
          [expectation fulfill];
        {{else}}
        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);
        {{#unless isSubscribeAttribute}}

        {{#chip_tests_item_response_parameters}}
        {{#*inline "actualValue"}}
          {{#if parent.isAttribute}}
          id actualValue = value;
          {{else}}
          id actualValue = values.{{asStructPropertyName name}};
          {{/if}}
        {{/inline}}
        {{#if hasExpectedValue}}
        {
          {{> actualValue}}
          {{>check_test_value actual="actualValue" expected=expectedValue cluster=../cluster}}
        }
        {{/if}}
        {{#if hasExpectedConstraints}}
        {{#if (hasProperty expectedConstraints "minLength")}}
        {
          {{> actualValue}}
          XCTAssertGreaterThanOrEqual([actualValue length], {{expectedConstraints.minLength}});
        }
        {{/if}}
        {{#if (hasProperty expectedConstraints "startsWith")}}
        {
          {{> actualValue}}
          XCTAssertTrue([actualValue hasPrefix:@"{{expectedConstraints.startsWith}}"]);
        }
        {{/if}}
        {{#if (hasProperty expectedConstraints "endsWith")}}
        {
          {{> actualValue}}
          XCTAssertTrue([actualValue hasSuffix:@"{{expectedConstraints.endsWith}}"]);
        }
        {{/if}}
        {{#if (hasProperty expectedConstraints "isLowerCase")}}
        {
          {{> actualValue}}
          BOOL isLowerCase = [actualValue isEqualToString:[actualValue lowercaseString]];
          XCTAssert{{#if (isStrEqual "true" expectedConstraints.isLowerCase)}}True{{else}}False{{/if}}(isLowerCase);
        }
        {{/if}}
        {{#if (hasProperty expectedConstraints "isUpperCase")}}
        {
          {{> actualValue}}
          BOOL isUpperCase = [actualValue isEqualToString:[actualValue uppercaseString]];
          XCTAssert{{#if (isStrEqual "true" expectedConstraints.isUpperCase)}}True{{else}}False{{/if}}(isUpperCase);
        }
        {{/if}}
        {{#if (hasProperty expectedConstraints "isHexString")}}
        {
          {{> actualValue}}
          NSCharacterSet *chars = [[NSCharacterSet characterSetWithCharactersInString:@"0123456789ABCDEF"] invertedSet];
          BOOL isHexString = (NSNotFound == [actualValue rangeOfCharacterFromSet:chars].location);
          XCTAssert{{#if (isStrEqual "true" expectedConstraints.isHexString)}}True{{else}}False{{/if}}(isHexString);
        }
        {{/if}}
        {{#if (hasProperty expectedConstraints "maxLength")}}
        {
          {{> actualValue}}
          XCTAssertLessThanOrEqual([actualValue length], {{expectedConstraints.maxLength}});
        }
        {{/if}}
        {{#if (hasProperty expectedConstraints "minValue")}}
        {
          {{> actualValue}}
          if (actualValue != nil) {
            XCTAssertGreaterThanOrEqual([actualValue {{asObjectiveCNumberType "" type true}}Value], {{asTypedLiteral expectedConstraints.minValue type}});
          }
        }
        {{/if}}
        {{#if (hasProperty expectedConstraints "maxValue")}}
        {
          {{> actualValue}}
          if (actualValue != nil) {
            XCTAssertLessThanOrEqual([actualValue  {{asObjectiveCNumberType "" type true}}Value], {{asTypedLiteral expectedConstraints.maxValue type}});
          }
        }
        {{/if}}
        {{#if (hasProperty expectedConstraints "notValue")}}
        {
          {{> actualValue}}
        {{#if (isLiteralNull expectedConstraints.notValue)}}
          XCTAssertFalse(actualValue == nil);
        {{else}}
          {{#if (chip_tests_variables_has expectedConstraints.notValue)}}
            XCTAssertNotEqualObjects(actualValue, {{expectedConstraints.notValue}});
          {{else}}
            if (actualValue != nil) {
              {{#if (isString type)}}
              XCTAssertNotEqualObjects(actualValue, {{expectedConstraints.notValue}});
              {{else}}
              XCTAssertNotEqual([actualValue {{asObjectiveCNumberType "" type true}}Value], {{asTypedLiteral expectedConstraints.notValue type}});
             {{/if}}
            }
          {{/if}}
        {{/if}}
        }
        {{/if}}
        {{/if}}
        {{#if saveAs}}
        {
          {{> actualValue}}
          {{saveAs}} = actualValue;
        }
        {{/if}}
        {{/chip_tests_item_response_parameters}}

        {{#unless async}}
        [expectation fulfill];
        {{else}}
        testSendCluster{{parent.filename}}_{{asTestIndex index}}_{{asUpperCamelCase command}}_Fulfilled = true;
        {{/unless}}
        {{else}}
          {{! We're a subscription }}
          if ({{> subscribeDataCallback}} != nil) {
            ResponseHandler callback = {{> subscribeDataCallback}};
            {{> subscribeDataCallback}} = nil;
            callback(value, err);
          }
        {{/unless}}
        {{/if}}
    }{{#unless isWaitForReport}}]{{/unless}};

{{/if}}
    {{#unless async}}
    {{#*inline "minCommandTimeout"~}}
      {{#if (isTestOnlyCluster cluster)~}}
        {{#if (isStrEqual command "WaitForMs")~}}
          {{#chip_tests_item_parameters}}{{#if (isStrEqual name "ms")}}({{> defined_value}} / 1000) + {{/if}}{{/chip_tests_item_parameters}}
        {{~/if}}
      {{~/if}}
    {{~/inline}}
    [self waitForExpectationsWithTimeout:{{#if stepTimeoutSecs}}{{stepTimeoutSecs}}{{else}}{{> minCommandTimeout}}kTimeoutInSeconds{{/if}} handler:nil];
    {{/unless}}
}
{{/chip_tests_items}}

{{/chip_tests}}

