{{> header}}

{{#if (chip_has_client_clusters)}}
#import <Foundation/Foundation.h>

#import "CHIPCallbackBridge_internal.h"
#import "CHIPCluster_internal.h"
#import "CHIPClustersObjc_internal.h"
#import "CHIPDevice.h"
#import "CHIPDevice_Internal.h"

using chip::Callback::Cancelable;

{{#chip_client_clusters}}

@implementation CHIP{{asUpperCamelCase name}}

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

{{#chip_cluster_commands}}
{{#*inline "callbackName"}}{{#if hasSpecificResponse}}{{asUpperCamelCase parent.name}}Cluster{{asUpperCamelCase responseName}}{{else}}DefaultSuccess{{/if}}{{/inline}}
{{#*inline "callbackParams"}}{{#chip_cluster_command_arguments}}, {{#if (isString type)}}[self asSpan:{{/if}}{{asLowerCamelCase label}}{{#if (isString type)}}]{{/if}}{{/chip_cluster_command_arguments}}{{/inline}}
{{#if (zcl_command_arguments_count this.id)}}
- (void){{asLowerCamelCase name}}:{{#chip_cluster_command_arguments}}{{#not_first}}{{asLowerCamelCase label}}:{{/not_first}}({{asObjectiveCBasicType type}}){{asLowerCamelCase label}} {{/chip_cluster_command_arguments}}responseHandler:(ResponseHandler)responseHandler
{{else}}
- (void){{asLowerCamelCase name}}:(ResponseHandler)responseHandler
{{/if}}
{
    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.{{asUpperCamelCase name}}(success, failure{{>callbackParams}});
    });
}
{{/chip_cluster_commands}}

{{#chip_server_cluster_attributes}}
{{#*inline "attribute"}}Attribute{{asUpperCamelCase name}}{{/inline}}
{{#*inline "callbackName"}}{{#if isList}}{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}List{{else}}{{chipCallback.name}}{{/if}}Attribute{{/inline}}
- (void)read{{>attribute}}WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Read{{>attribute}}(success, failure);
    });
}

{{#if isWritableAttribute}}
{{#*inline "callbackName"}}DefaultSuccess{{/inline}}
{{#*inline "callbackParams"}}, {{#if (isString type)}}[self asSpan:{{/if}}value{{#if (isString type)}}]{{/if}}{{/inline}}
- (void)write{{>attribute}}WithValue:({{asObjectiveCBasicType type}})value responseHandler:(ResponseHandler)responseHandler
{
    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Write{{>attribute}}(success, failure{{>callbackParams}});
    });
}

{{/if}}
{{#if isReportableAttribute}}
{{#*inline "callbackName"}}DefaultSuccess{{/inline}}
{{#*inline "callbackParams"}}, minInterval, maxInterval{{#if isAnalog}}, change{{/if}}{{/inline}}
- (void) subscribe{{>attribute}}WithMinInterval:(uint16_t)minInterval  maxInterval:(uint16_t)maxInterval responseHandler:(ResponseHandler)responseHandler
{
    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Subscribe{{>attribute}}(success, failure{{>callbackParams}});
    });
}

{{#*inline "callbackName"}}{{chipCallback.name}}Attribute{{/inline}}
- (void) report{{>attribute}}WithResponseHandler:(ResponseHandler)responseHandler {
    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Report{{>attribute}}(success);
    }, true);
}

{{/if}}
{{/chip_server_cluster_attributes}}

@end

{{/chip_client_clusters}}
{{/if}}
