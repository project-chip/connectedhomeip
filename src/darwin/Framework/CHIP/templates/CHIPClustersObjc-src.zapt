{{> header}}

{{#if (chip_has_client_clusters)}}
#import <Foundation/Foundation.h>

#import "CHIPCallbackBridge_internal.h"
#import "CHIPCluster_internal.h"
#import "CHIPClustersObjc_internal.h"
#import "CHIPDevice.h"
#import "CHIPDevice_Internal.h"

#include <set>
#include <type_traits>

using chip::Callback::Callback;
using chip::Callback::Cancelable;
using namespace chip::app::Clusters;

template<typename T> struct ListMemberTypeGetter {};
template<typename T> struct ListMemberTypeGetter<chip::app::DataModel::List<T>> {
  // We use List<const ...> in data model data structures, so consumers can
  // use const data.  Just grab the type with the const stripped off.
  using Type = std::remove_const_t<T>;
};

struct ListHolderBase {
  // Just here so we can delete an instance to trigger the subclass destructor.
  virtual ~ListHolderBase() {}
};

template<typename T>
struct ListHolder : ListHolderBase {
  ListHolder(size_t N) {
    mList = new T[N];
  }
  ~ListHolder() {
    delete [] mList;
  }
  T * mList;
};

struct ListFreer {
  ~ListFreer() {
    for (auto listHolder : mListHolders) {
      delete listHolder;
    }
  }

  void add(ListHolderBase * listHolder) {
    mListHolders.insert(listHolder);
  }

  std::set<ListHolderBase *> mListHolders;
};

{{#chip_client_clusters}}
@implementation CHIP{{asUpperCamelCase name}}

- (chip::Controller::ClusterBase *)getCluster
{
    return &_cppCluster;
}

{{#chip_cluster_commands}}
{{#*inline "callbackName"}}{{#if hasSpecificResponse}}{{asUpperCamelCase parent.name}}Cluster{{asUpperCamelCase responseName}}{{else}}DefaultSuccess{{/if}}{{/inline}}
{{#if (zcl_command_arguments_count this.id)}}
- (void){{asLowerCamelCase name}}:{{#chip_cluster_command_arguments_with_structs_expanded}}{{#not_first}}{{asLowerCamelCase label}}:{{/not_first}}({{asObjectiveCBasicType type}}){{asLowerCamelCase label}} {{/chip_cluster_command_arguments_with_structs_expanded}}responseHandler:(ResponseHandler)responseHandler
{{else}}
- (void){{asLowerCamelCase name}}:(ResponseHandler)responseHandler
{{/if}}
{
    ListFreer listFreer;
    {{asUpperCamelCase parent.name}}::Commands::{{asUpperCamelCase name}}::Type request;
    {{#chip_cluster_command_arguments}}
    {{>encode_value target=(concat "request ." (asLowerCamelCase label)) source=(asLowerCamelCase label) cluster=parent.parent.name}}
    {{/chip_cluster_command_arguments}}

    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        auto successFn = Callback<CHIP{{>callbackName}}CallbackType>::FromCancelable(success);
        auto failureFn = Callback<CHIPDefaultFailureCallbackType>::FromCancelable(failure);
        return self.cppCluster.InvokeCommand(request, successFn->mContext, successFn->mCall, failureFn->mCall);
    });
}
{{/chip_cluster_commands}}

{{#chip_server_cluster_attributes}}
{{#*inline "attribute"}}Attribute{{asUpperCamelCase name}}{{/inline}}
{{#*inline "callbackName"}}{{#if isList}}{{asUpperCamelCase ../name}}{{asUpperCamelCase name}}List{{else}}{{chipCallback.name}}{{/if}}Attribute{{/inline}}
- (void)read{{>attribute}}WithResponseHandler:(ResponseHandler)responseHandler
{
    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Read{{>attribute}}(success, failure);
    });
}

{{#if isWritableAttribute}}
{{#*inline "callbackName"}}DefaultSuccess{{/inline}}
{{#*inline "callbackParams"}},
  {{#if_chip_enum type}}
    static_cast<{{chipType}}>(value)
  {{else if (isOctetString type)}}
    [self asByteSpan:value]
  {{else if (isCharString type)}}
    [self asCharSpan:value]
  {{else}}
    value
  {{/if_chip_enum}}
{{/inline}}
- (void)write{{>attribute}}WithValue:({{asObjectiveCBasicType type}})value responseHandler:(ResponseHandler)responseHandler
{
    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Write{{>attribute}}(success, failure{{>callbackParams}});
    });
}

{{/if}}
{{#if isReportableAttribute}}
{{#*inline "callbackName"}}DefaultSuccess{{/inline}}
{{#*inline "callbackParams"}}, minInterval, maxInterval{{#if isAnalog}}, change{{/if}}{{/inline}}
- (void) subscribe{{>attribute}}WithMinInterval:(uint16_t)minInterval  maxInterval:(uint16_t)maxInterval responseHandler:(ResponseHandler)responseHandler
{
    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Subscribe{{>attribute}}(success, failure{{>callbackParams}});
    });
}

{{#*inline "callbackName"}}{{chipCallback.name}}Attribute{{/inline}}
- (void) report{{>attribute}}WithResponseHandler:(ResponseHandler)responseHandler {
    new CHIP{{>callbackName}}CallbackBridge(self.callbackQueue, responseHandler, ^(Cancelable * success, Cancelable * failure) {
        return self.cppCluster.Report{{>attribute}}(success);
    }, true);
}

{{/if}}
{{/chip_server_cluster_attributes}}

@end

{{/chip_client_clusters}}
{{/if}}
