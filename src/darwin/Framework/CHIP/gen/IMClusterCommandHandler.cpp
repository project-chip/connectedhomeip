/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include "IMClusterCommandHandler.h"

#include <cinttypes>
#include <cstdint>

#include "af-structs.h"
#include "call-command-handler.h"
#include "callback.h"
#include "cluster-id.h"
#include "command-id.h"
#include "util.h"

#include <app/InteractionModelEngine.h>

namespace chip {
namespace app {

void DispatchSingleClusterCommand(chip::ClusterId aClusterId, chip::CommandId aCommandId, chip::EndpointId aEndPointId,
                                  chip::TLV::TLVReader & aReader, Command * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=%" PRIx16 " Command=%" PRIx8 " Endpoint=%" PRIx8, aClusterId, aCommandId,
                  aEndPointId);
    switch (aClusterId)
    {
    default:
        // Unrecognized cluster ID, error status will apply.
        // TODO: Encode response for Cluster not found
        ChipLogError(Zcl, "Unknown cluster %" PRIx16, aClusterId);
        break;
    }
}

// Cluster specific command parsing

namespace clusters {

namespace DoorLock {

void DispatchClientCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_CLEAR_ALL_PINS_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnClearAllPinsResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_CLEAR_ALL_RFIDS_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnClearAllRfidsResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_CLEAR_HOLIDAY_SCHEDULE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnClearHolidayScheduleResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_CLEAR_PIN_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnClearPinResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_CLEAR_RFID_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnClearRfidResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_CLEAR_WEEKDAY_SCHEDULE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnClearWeekdayScheduleResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_CLEAR_YEARDAY_SCHEDULE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnClearYeardayScheduleResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_GET_HOLIDAY_SCHEDULE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint8_t status;
            uint32_t localStartTime;
            uint32_t localEndTime;
            uint8_t operatingModeDuringHoliday;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(status);
                    break;
                case 2:
                    TLVError = dataTlv.Get(localStartTime);
                    break;
                case 3:
                    TLVError = dataTlv.Get(localEndTime);
                    break;
                case 4:
                    TLVError = dataTlv.Get(operatingModeDuringHoliday);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnGetHolidayScheduleResponseCommandCallback(command, endpointId, scheduleId, status, localStartTime, localEndTime,
                                                        operatingModeDuringHoliday);
            break;
        }
        case ZCL_GET_LOG_RECORD_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t logEntryId;
            uint32_t timestamp;
            uint8_t eventType;
            uint8_t source;
            uint8_t eventIdOrAlarmCode;
            uint16_t userId;
            const uint8_t * pin;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(logEntryId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(timestamp);
                    break;
                case 2:
                    TLVError = dataTlv.Get(eventType);
                    break;
                case 3:
                    TLVError = dataTlv.Get(source);
                    break;
                case 4:
                    TLVError = dataTlv.Get(eventIdOrAlarmCode);
                    break;
                case 5:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 6:
                    TLVError = dataTlv.GetDataPtr(pin);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnGetLogRecordResponseCommandCallback(command, endpointId, logEntryId, timestamp, eventType, source, eventIdOrAlarmCode,
                                                  userId, pin);
            break;
        }
        case ZCL_GET_PIN_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;
            uint8_t userStatus;
            uint8_t userType;
            const uint8_t * pin;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userStatus);
                    break;
                case 2:
                    TLVError = dataTlv.Get(userType);
                    break;
                case 3:
                    TLVError = dataTlv.GetDataPtr(pin);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnGetPinResponseCommandCallback(command, endpointId, userId, userStatus, userType, pin);
            break;
        }
        case ZCL_GET_RFID_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;
            uint8_t userStatus;
            uint8_t userType;
            const uint8_t * rfid;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userStatus);
                    break;
                case 2:
                    TLVError = dataTlv.Get(userType);
                    break;
                case 3:
                    TLVError = dataTlv.GetDataPtr(rfid);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnGetRfidResponseCommandCallback(command, endpointId, userId, userStatus, userType, rfid);
            break;
        }
        case ZCL_GET_USER_TYPE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t userId;
            uint8_t userType;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userType);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnGetUserTypeResponseCommandCallback(command, endpointId, userId, userType);
            break;
        }
        case ZCL_GET_WEEKDAY_SCHEDULE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint16_t userId;
            uint8_t status;
            uint8_t daysMask;
            uint8_t startHour;
            uint8_t startMinute;
            uint8_t endHour;
            uint8_t endMinute;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(status);
                    break;
                case 3:
                    TLVError = dataTlv.Get(daysMask);
                    break;
                case 4:
                    TLVError = dataTlv.Get(startHour);
                    break;
                case 5:
                    TLVError = dataTlv.Get(startMinute);
                    break;
                case 6:
                    TLVError = dataTlv.Get(endHour);
                    break;
                case 7:
                    TLVError = dataTlv.Get(endMinute);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnGetWeekdayScheduleResponseCommandCallback(command, endpointId, scheduleId, userId, status, daysMask, startHour,
                                                        startMinute, endHour, endMinute);
            break;
        }
        case ZCL_GET_YEARDAY_SCHEDULE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t scheduleId;
            uint16_t userId;
            uint8_t status;
            uint32_t localStartTime;
            uint32_t localEndTime;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(scheduleId);
                    break;
                case 1:
                    TLVError = dataTlv.Get(userId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(status);
                    break;
                case 3:
                    TLVError = dataTlv.Get(localStartTime);
                    break;
                case 4:
                    TLVError = dataTlv.Get(localEndTime);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnGetYeardayScheduleResponseCommandCallback(command, endpointId, scheduleId, userId, status, localStartTime,
                                                        localEndTime);
            break;
        }
        case ZCL_LOCK_DOOR_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnLockDoorResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_SET_HOLIDAY_SCHEDULE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnSetHolidayScheduleResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_SET_PIN_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnSetPinResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_SET_RFID_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnSetRfidResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_SET_USER_TYPE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnSetUserTypeResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_SET_WEEKDAY_SCHEDULE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnSetWeekdayScheduleResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_SET_YEARDAY_SCHEDULE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnSetYeardayScheduleResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_UNLOCK_DOOR_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnUnlockDoorResponseCommandCallback(command, endpointId, status);
            break;
        }
        case ZCL_UNLOCK_WITH_TIMEOUT_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnUnlockWithTimeoutResponseCommandCallback(command, endpointId, status);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_DOOR_LOCK_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace DoorLock

namespace Groups {

void DispatchClientCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_ADD_GROUP_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;
            uint16_t groupId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnAddGroupResponseCommandCallback(command, endpointId, status, groupId);
            break;
        }
        case ZCL_GET_GROUP_MEMBERSHIP_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t capacity;
            uint8_t groupCount;
            /* TYPE WARNING: array array defaults to */ uint8_t * groupList;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(capacity);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupCount);
                    break;
                case 2:
                    // Just for compatibility, we will add array type support in IM later.
                    TLVError = dataTlv.GetDataPtr(const_cast<const uint8_t *&>(groupList));
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnGetGroupMembershipResponseCommandCallback(command, endpointId, capacity, groupCount, groupList);
            break;
        }
        case ZCL_REMOVE_GROUP_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;
            uint16_t groupId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnRemoveGroupResponseCommandCallback(command, endpointId, status, groupId);
            break;
        }
        case ZCL_VIEW_GROUP_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;
            uint16_t groupId;
            const uint8_t * groupName;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 2:
                    TLVError = dataTlv.GetDataPtr(groupName);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnViewGroupResponseCommandCallback(command, endpointId, status, groupId, groupName);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_GROUPS_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Groups

namespace Identify {

void DispatchClientCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_IDENTIFY_QUERY_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint16_t timeout;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(timeout);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnIdentifyQueryResponseCommandCallback(command, endpointId, timeout);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_IDENTIFY_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Identify

namespace Scenes {

void DispatchClientCommand(app::Command * command, CommandId commandId, EndpointId endpointId, TLV::TLVReader & dataTlv)
{
    {
        switch (commandId)
        {
        case ZCL_ADD_SCENE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;
            uint16_t groupId;
            uint8_t sceneId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(sceneId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnAddSceneResponseCommandCallback(command, endpointId, status, groupId, sceneId);
            break;
        }
        case ZCL_GET_SCENE_MEMBERSHIP_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;
            uint8_t capacity;
            uint16_t groupId;
            uint8_t sceneCount;
            /* TYPE WARNING: array array defaults to */ uint8_t * sceneList;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                case 1:
                    TLVError = dataTlv.Get(capacity);
                    break;
                case 2:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 3:
                    TLVError = dataTlv.Get(sceneCount);
                    break;
                case 4:
                    // Just for compatibility, we will add array type support in IM later.
                    TLVError = dataTlv.GetDataPtr(const_cast<const uint8_t *&>(sceneList));
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnGetSceneMembershipResponseCommandCallback(command, endpointId, status, capacity, groupId, sceneCount, sceneList);
            break;
        }
        case ZCL_REMOVE_ALL_SCENES_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;
            uint16_t groupId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnRemoveAllScenesResponseCommandCallback(command, endpointId, status, groupId);
            break;
        }
        case ZCL_REMOVE_SCENE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;
            uint16_t groupId;
            uint8_t sceneId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(sceneId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnRemoveSceneResponseCommandCallback(command, endpointId, status, groupId, sceneId);
            break;
        }
        case ZCL_STORE_SCENE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;
            uint16_t groupId;
            uint8_t sceneId;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(sceneId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnStoreSceneResponseCommandCallback(command, endpointId, status, groupId, sceneId);
            break;
        }
        case ZCL_VIEW_SCENE_RESPONSE_COMMAND_ID: {
            CHIP_ERROR TLVError = CHIP_NO_ERROR;
            uint8_t status;
            uint16_t groupId;
            uint8_t sceneId;
            uint16_t transitionTime;
            const uint8_t * sceneName;
            /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets;

            while ((TLVError = dataTlv.Next()) == CHIP_NO_ERROR)
            {
                switch (TLV::TagNumFromTag(dataTlv.GetTag()))
                {
                case 0:
                    TLVError = dataTlv.Get(status);
                    break;
                case 1:
                    TLVError = dataTlv.Get(groupId);
                    break;
                case 2:
                    TLVError = dataTlv.Get(sceneId);
                    break;
                case 3:
                    TLVError = dataTlv.Get(transitionTime);
                    break;
                case 4:
                    TLVError = dataTlv.GetDataPtr(sceneName);
                    break;
                case 5:
                    // Just for compatibility, we will add array type support in IM later.
                    TLVError = dataTlv.GetDataPtr(const_cast<const uint8_t *&>(extensionFieldSets));
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (TLVError != CHIP_NO_ERROR)
                {
                    // TODO: Report Error Here
                }
            }
            OnViewSceneResponseCommandCallback(command, endpointId, status, groupId, sceneId, transitionTime, sceneName,
                                               extensionFieldSets);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            // TODO: Encode response for command not found
            ChipLogError(Zcl, "Unknown command %" PRIx16 " for cluster %" PRIx16, commandId, ZCL_SCENES_CLUSTER_ID);
            break;
        }
        }
    }
}

} // namespace Scenes

} // namespace clusters
} // namespace app
} // namespace chip
