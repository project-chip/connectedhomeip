//
//  CHIPClustersTests.m
//  CHIPClustersTests
/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

// module headers
#import <CHIP/CHIP.h>
#import <CHIP/CHIPTestClustersObjc.h>

#import "CHIPErrorTestUtils.h"

// system dependencies
#import <XCTest/XCTest.h>

const uint16_t kPairingTimeoutInSeconds = 10;
const uint16_t kAddressResolveTimeoutInSeconds = 10;
const uint16_t kCASESetupTimeoutInSeconds = 30;
const uint16_t kTimeoutInSeconds = 3;
const uint64_t kDeviceId = 1;
const uint16_t kDiscriminator = 3840;
const uint32_t kSetupPINCode = 20202021;
const uint16_t kRemotePort = 5540;
const uint16_t kLocalPort = 5541;
NSString * kAddress = @"::1";

// This test suite reuses a device object to speed up the test process for CI.
// The following global variable holds the reference to the device object.
static CHIPDevice * mConnectedDevice;

// Test Util APIs
void WaitForMs(XCTestExpectation * expectation, dispatch_queue_t queue, unsigned int ms)
{
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, ms * NSEC_PER_MSEC), queue, ^{
        [expectation fulfill];
    });
}

CHIPDevice * GetConnectedDevice()
{
    XCTAssertNotNil(mConnectedDevice);
    return mConnectedDevice;
}

@interface CHIPToolPairingDelegate : NSObject <CHIPDevicePairingDelegate>
@property (nonatomic, strong) XCTestExpectation * expectation;
@end

@implementation CHIPToolPairingDelegate
- (id)initWithExpectation:(XCTestExpectation *)expectation
{
    self = [super init];
    if (self) {
        _expectation = expectation;
    }
    return self;
}

- (void)onPairingComplete:(NSError *)error
{
    XCTAssertEqual(error.code, 0);
    [_expectation fulfill];
    _expectation = nil;
}

- (void)onAddressUpdated:(NSError *)error
{
    XCTAssertEqual(error.code, 0);
    [_expectation fulfill];
    _expectation = nil;
}
@end

@interface CHIPClustersTests : XCTestCase
@end

@implementation CHIPClustersTests

- (void)setUp
{
    [super setUp];
    [self setContinueAfterFailure:NO];
}

- (void)testInitStack
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Pairing Complete"];

    CHIPDeviceController * controller = [CHIPDeviceController sharedController];
    XCTAssertNotNil(controller);

    CHIPToolPairingDelegate * pairing = [[CHIPToolPairingDelegate alloc] initWithExpectation:expectation];
    dispatch_queue_t callbackQueue = dispatch_queue_create("com.chip.pairing", DISPATCH_QUEUE_SERIAL);

    [controller setListenPort:kLocalPort];
    [controller setPairingDelegate:pairing queue:callbackQueue];

    BOOL started = [controller startup:nil vendorId:0 nocSigner:nil];
    XCTAssertTrue(started);

    NSError * error;
    [controller pairDevice:kDeviceId
                   address:kAddress
                      port:kRemotePort
             discriminator:kDiscriminator
              setupPINCode:kSetupPINCode
                     error:&error];
    XCTAssertEqual(error.code, 0);

    [self waitForExpectationsWithTimeout:kPairingTimeoutInSeconds handler:nil];

    __block XCTestExpectation * connectionExpectation = [self expectationWithDescription:@"CASE established"];
    [controller getConnectedDevice:kDeviceId
                             queue:dispatch_get_main_queue()
                 completionHandler:^(CHIPDevice * _Nullable device, NSError * _Nullable error) {
                     XCTAssertEqual(error.code, 0);
                     [connectionExpectation fulfill];
                     connectionExpectation = nil;
                     mConnectedDevice = device;
                 }];
    [self waitForExpectationsWithTimeout:kCASESetupTimeoutInSeconds handler:nil];
}

- (void)testShutdownStack
{
    CHIPDeviceController * controller = [CHIPDeviceController sharedController];
    XCTAssertNotNil(controller);

    NSError * error;
    [controller unpairDevice:kDeviceId error:&error];
    XCTAssertEqual(error.code, 0);

    BOOL stopped = [controller shutdown];
    XCTAssertTrue(stopped);
}

- (void)testReuseChipClusterObject
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ReuseCHIPClusterObjectFirstCall"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestCluster * cluster = [[CHIPTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster testWithCompletionHandler:^(NSError * err) {
        NSLog(@"ReuseCHIPClusterObject test Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];

    expectation = [self expectationWithDescription:@"ReuseCHIPClusterObjectSecondCall"];

    // Reuse the CHIPCluster Object for multiple times.

    [cluster testWithCompletionHandler:^(NSError * err) {
        NSLog(@"ReuseCHIPClusterObject test Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_BI_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 1U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_1_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:1U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 1U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_BI_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read mandatory non-global attribute: OutOfService"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOutOfServiceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read mandatory non-global attribute: OutOfService Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000001_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read mandatory non-global attribute constraints: OutOfService"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOutOfServiceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read mandatory non-global attribute constraints: OutOfService Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000002_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory non-global attribute: OutOfService"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id outOfServiceArgument;
    outOfServiceArgument = [NSNumber numberWithBool:0];
    [cluster
        writeAttributeOutOfServiceWithValue:outOfServiceArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write the default values to mandatory non-global attribute: OutOfService Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back the mandatory non-global attribute: OutOfService"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOutOfServiceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back the mandatory non-global attribute: OutOfService Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000004_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read mandatory non-global attribute constraints: PresentValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePresentValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read mandatory non-global attribute constraints: PresentValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000005_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory non-global attribute: PresentValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id presentValueArgument;
    presentValueArgument = [NSNumber numberWithBool:0];
    [cluster
        writeAttributePresentValueWithValue:presentValueArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write the default values to mandatory non-global attribute: PresentValue Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000006_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back the mandatory non-global attribute: PresentValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePresentValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back the mandatory non-global attribute: PresentValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read mandatory non-global attribute: StatusFlags"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStatusFlagsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read mandatory non-global attribute: StatusFlags Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000008_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read mandatory non-global attribute constraints: StatusFlags"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStatusFlagsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read mandatory non-global attribute constraints: StatusFlags Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 15);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000009_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory non-global attribute: StatusFlags"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id statusFlagsArgument;
    statusFlagsArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeStatusFlagsWithValue:statusFlagsArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"Write the default values to mandatory non-global attribute: StatusFlags Error: %@", err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_1_000010_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back the mandatory non-global attribute: StatusFlags"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStatusFlagsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back the mandatory non-global attribute: StatusFlags Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_BI_2_2_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads PresentValue attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePresentValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads PresentValue attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OutOfService attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOutOfServiceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OutOfService attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_2_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads StatusFlags attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStatusFlagsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads StatusFlags attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_2_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads PresentValue attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePresentValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads PresentValue attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_2_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OutOfService attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOutOfServiceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OutOfService attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_2_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads StatusFlags attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStatusFlagsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads StatusFlags attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_2_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads StatusFlags attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStatusFlagsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads StatusFlags attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BI_2_2_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads StatusFlags attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBinaryInputBasic * cluster = [[CHIPTestBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStatusFlagsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads StatusFlags attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_BOOL_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBooleanState * cluster = [[CHIPTestBooleanState alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 1U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BOOL_1_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBooleanState * cluster = [[CHIPTestBooleanState alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:1U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BOOL_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBooleanState * cluster = [[CHIPTestBooleanState alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 1U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_BOOL_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read mandatory non-global attribute: StateValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBooleanState * cluster = [[CHIPTestBooleanState alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStateValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read mandatory non-global attribute: StateValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BOOL_2_1_000001_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read mandatory non-global attribute constraints: StateValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBooleanState * cluster = [[CHIPTestBooleanState alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStateValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read mandatory non-global attribute constraints: StateValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BOOL_2_1_000002_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default value to mandatory non-global attribute: StateValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBooleanState * cluster = [[CHIPTestBooleanState alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id stateValueArgument;
    stateValueArgument = [NSNumber numberWithBool:1];
    [cluster writeAttributeStateValueWithValue:stateValueArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"Write the default value to mandatory non-global attribute: StateValue Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_BOOL_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back the mandatory non-global attribute: StateValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBooleanState * cluster = [[CHIPTestBooleanState alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStateValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back the mandatory non-global attribute: StateValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_1_1_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:4U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads mandatory attribute: CurrentHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attribute: CurrentHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: current hue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: current hue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000002_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default value to mandatory attribute: CurrentHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentHueArgument;
    currentHueArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeCurrentHueWithValue:currentHueArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"Write the default value to mandatory attribute: CurrentHue Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: CurrentHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: CurrentHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads mandatory attribute: CurrentSaturation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentSaturationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attribute: CurrentSaturation Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: CurrentSaturation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentSaturationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: CurrentSaturation Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000006_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default value to mandatory attribute: CurrentSaturation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentSaturationArgument;
    currentSaturationArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeCurrentSaturationWithValue:currentSaturationArgument
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"Write the default value to mandatory attribute: CurrentSaturation Error: %@", err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: CurrentSaturation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentSaturationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: CurrentSaturation Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000008_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: CurrentX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: CurrentX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 24939U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000009_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: CurrentX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: CurrentX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000010_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default value to mandatory attribute: CurrentX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentXArgument;
    currentXArgument = [NSNumber numberWithUnsignedShort:24939U];
    [cluster writeAttributeCurrentXWithValue:currentXArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write the default value to mandatory attribute: CurrentX Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000011_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: CurrentX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: CurrentX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 24939U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000012_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: CurrentY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: CurrentY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 24701U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000013_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: CurrentY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: CurrentY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000014_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: CurrentY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentYArgument;
    currentYArgument = [NSNumber numberWithUnsignedShort:24701U];
    [cluster writeAttributeCurrentYWithValue:currentYArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write the default values to mandatory attribute: CurrentY Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000015_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: CurrentY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: CurrentY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 24701U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000016_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Validate constraints of attribute: ColorTemperatureMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTemperatureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorTemperatureMireds Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000017_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: ColorMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 2);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000018_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Options"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorControlOptionsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Options Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000019_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: Options"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorControlOptionsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: Options Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000020_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default values to mandatory attribute: Options"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorControlOptionsArgument;
    colorControlOptionsArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeColorControlOptionsWithValue:colorControlOptionsArgument
                                      completionHandler:^(NSError * _Nullable err) {
                                          NSLog(@"Write the default values to mandatory attribute: Options Error: %@", err);

                                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                          [expectation fulfill];
                                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000021_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: Options"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorControlOptionsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: Options Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000022_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: EnhancedCurrentHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnhancedCurrentHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: EnhancedCurrentHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000023_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: EnhancedCurrentHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnhancedCurrentHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: EnhancedCurrentHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000024_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: EnhancedCurrentHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id enhancedCurrentHueArgument;
    enhancedCurrentHueArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster
        writeAttributeEnhancedCurrentHueWithValue:enhancedCurrentHueArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write the default values to mandatory attribute: EnhancedCurrentHue Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000025_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: EnhancedCurrentHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnhancedCurrentHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: EnhancedCurrentHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000026_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: EnhancedColorMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnhancedColorModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: EnhancedColorMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000027_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: ColorLoopActive"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: ColorLoopActive Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000028_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: ColorLoopActive"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorLoopActive Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000029_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: ColorLoopActive"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorLoopActiveArgument;
    colorLoopActiveArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeColorLoopActiveWithValue:colorLoopActiveArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write the default values to mandatory attribute: ColorLoopActive Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000030_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: ColorLoopActive"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: ColorLoopActive Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000031_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: ColorLoopDirection"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: ColorLoopDirection Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000032_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: ColorLoopDirection"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorLoopDirection Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000033_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: ColorLoopDirection"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorLoopDirectionArgument;
    colorLoopDirectionArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster
        writeAttributeColorLoopDirectionWithValue:colorLoopDirectionArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write the default values to mandatory attribute: ColorLoopDirection Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000034_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: ColorLoopDirection"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: ColorLoopDirection Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000035_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: ColorLoopTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: ColorLoopTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 25U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000036_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: ColorLoopTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorLoopTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000037_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: ColorLoopTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorLoopTimeArgument;
    colorLoopTimeArgument = [NSNumber numberWithUnsignedShort:25U];
    [cluster writeAttributeColorLoopTimeWithValue:colorLoopTimeArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write the default values to mandatory attribute: ColorLoopTime Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000038_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: ColorLoopTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: ColorLoopTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 25U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000039_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: ColorLoopStartEnhancedHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStartEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: ColorLoopStartEnhancedHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 8960U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000040_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Validate constraints of attribute: ColorLoopStartEnhancedHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStartEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorLoopStartEnhancedHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000041_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: ColorLoopStartEnhancedHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorLoopStartEnhancedHueArgument;
    colorLoopStartEnhancedHueArgument = [NSNumber numberWithUnsignedShort:8960U];
    [cluster writeAttributeColorLoopStartEnhancedHueWithValue:colorLoopStartEnhancedHueArgument
                                            completionHandler:^(NSError * _Nullable err) {
                                                NSLog(@"Write the default values to mandatory attribute: ColorLoopStartEnhancedHue "
                                                      @"Error: %@",
                                                    err);

                                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                [expectation fulfill];
                                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000042_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back mandatory attribute: ColorLoopStartEnhancedHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStartEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: ColorLoopStartEnhancedHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 8960U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000043_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: ColorLoopStoredEnhancedHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStoredEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: ColorLoopStoredEnhancedHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000044_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Validate constraints of attribute: ColorLoopStoredEnhancedHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStoredEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorLoopStoredEnhancedHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000045_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: ColorLoopStoredEnhancedHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorLoopStoredEnhancedHueArgument;
    colorLoopStoredEnhancedHueArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeColorLoopStoredEnhancedHueWithValue:colorLoopStoredEnhancedHueArgument
                                             completionHandler:^(NSError * _Nullable err) {
                                                 NSLog(@"Write the default values to mandatory attribute: "
                                                       @"ColorLoopStoredEnhancedHue Error: %@",
                                                     err);

                                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                 [expectation fulfill];
                                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000046_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back mandatory attribute: ColorLoopStoredEnhancedHue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStoredEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: ColorLoopStoredEnhancedHue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000047_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: ColorCapabilities"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorCapabilitiesWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: ColorCapabilities Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000048_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: ColorCapabilities"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorCapabilitiesWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorCapabilities Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000049_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: ColorCapabilities"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorCapabilitiesArgument;
    colorCapabilitiesArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeColorCapabilitiesWithValue:colorCapabilitiesArgument
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"Write the default values to mandatory attribute: ColorCapabilities Error: %@", err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000050_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: ColorCapabilities"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorCapabilitiesWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: ColorCapabilities Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000051_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: ColorTempPhysicalMinMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTempPhysicalMinWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: ColorTempPhysicalMinMireds Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000052_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Validate constraints of attribute: ColorTempPhysicalMinMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTempPhysicalMinWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorTempPhysicalMinMireds Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000053_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory  attribute: ColorTempPhysicalMinMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorTempPhysicalMinArgument;
    colorTempPhysicalMinArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster
        writeAttributeColorTempPhysicalMinWithValue:colorTempPhysicalMinArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(
                                          @"Write the default values to mandatory  attribute: ColorTempPhysicalMinMireds Error: %@",
                                          err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000054_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back mandatory attribute: ColorTempPhysicalMinMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTempPhysicalMinWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: ColorTempPhysicalMinMireds Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000055_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: ColorTempPhysicalMaxMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTempPhysicalMaxWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: ColorTempPhysicalMaxMireds Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 65279U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000056_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Validate constraints of attribute: ColorTempPhysicalMaxMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTempPhysicalMaxWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: ColorTempPhysicalMaxMireds Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000057_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: ColorTempPhysicalMaxMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorTempPhysicalMaxArgument;
    colorTempPhysicalMaxArgument = [NSNumber numberWithUnsignedShort:65279U];
    [cluster
        writeAttributeColorTempPhysicalMaxWithValue:colorTempPhysicalMaxArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(
                                          @"Write the default values to mandatory attribute: ColorTempPhysicalMaxMireds Error: %@",
                                          err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000058_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back mandatory attribute: ColorTempPhysicalMaxMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTempPhysicalMaxWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: ColorTempPhysicalMaxMireds Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 65279U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000059_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read the optional attribute: CoupleColorTempToLevelMinMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCoupleColorTempToLevelMinMiredsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"Read the optional attribute: CoupleColorTempToLevelMinMireds Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000060_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to optional attribute: CoupleColorTempToLevelMinMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id coupleColorTempToLevelMinMiredsArgument;
    coupleColorTempToLevelMinMiredsArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeCoupleColorTempToLevelMinMiredsWithValue:coupleColorTempToLevelMinMiredsArgument
                                                  completionHandler:^(NSError * _Nullable err) {
                                                      NSLog(@"Write the default values to optional attribute: "
                                                            @"CoupleColorTempToLevelMinMireds Error: %@",
                                                          err);

                                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                      [expectation fulfill];
                                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000061_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back optional attribute: CoupleColorTempToLevelMinMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCoupleColorTempToLevelMinMiredsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"Reads back optional attribute: CoupleColorTempToLevelMinMireds Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertEqual([actualValue unsignedShortValue], 0U);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000062_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read the optional attribute: StartUpColorTemperatureMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeStartUpColorTemperatureMiredsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"Read the optional attribute: StartUpColorTemperatureMireds Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000063_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to optional attribute: StartUpColorTemperatureMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id startUpColorTemperatureMiredsArgument;
    startUpColorTemperatureMiredsArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeStartUpColorTemperatureMiredsWithValue:startUpColorTemperatureMiredsArgument
                                                completionHandler:^(NSError * _Nullable err) {
                                                    NSLog(@"Write the default values to optional attribute: "
                                                          @"StartUpColorTemperatureMireds Error: %@",
                                                        err);

                                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                                    [expectation fulfill];
                                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000064_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back optional attribute: StartUpColorTemperatureMireds"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeStartUpColorTemperatureMiredsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"Reads back optional attribute: StartUpColorTemperatureMireds Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertEqual([actualValue unsignedShortValue], 0U);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000065_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the Optional attribute: RemainingTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRemainingTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the Optional attribute: RemainingTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000066_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: RemainingTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRemainingTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: RemainingTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000067_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to optional attribute: RemainingTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id remainingTimeArgument;
    remainingTimeArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeRemainingTimeWithValue:remainingTimeArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write the default values to optional attribute: RemainingTime Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000068_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back optional attribute: RemainingTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRemainingTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back optional attribute: RemainingTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000069_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: DriftCompensation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDriftCompensationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: DriftCompensation Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 4);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000070_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to optional attribute: DriftCompensation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id driftCompensationArgument;
    driftCompensationArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeDriftCompensationWithValue:driftCompensationArgument
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"Write the default values to optional attribute: DriftCompensation Error: %@", err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000071_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back optional attribute: DriftCompensation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDriftCompensationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back optional attribute: DriftCompensation Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000072_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: CompensationText"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCompensationTextWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: CompensationText Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000073_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: NumberOfPrimaries"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNumberOfPrimariesWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: NumberOfPrimaries Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 6);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000074_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: NumberOfPrimaries"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id numberOfPrimariesArgument;
    numberOfPrimariesArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeNumberOfPrimariesWithValue:numberOfPrimariesArgument
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"Write the default mandatory attribute: NumberOfPrimaries Error: %@", err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000075_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: NumberOfPrimaries"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNumberOfPrimariesWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: NumberOfPrimaries Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000076_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary1X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary1XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary1X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000077_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary1X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary1XArgument;
    primary1XArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary1XWithValue:primary1XArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary1X Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000078_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary1X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary1XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary1X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000079_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary1Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary1YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary1Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000080_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary1Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary1YArgument;
    primary1YArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary1YWithValue:primary1YArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary1Y Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000081_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary1Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary1YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary1Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000082_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary1Intensity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary1IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary1Intensity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000083_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary2X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary2XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary2X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000084_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary2X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary2XArgument;
    primary2XArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary2XWithValue:primary2XArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary2X Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000085_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary2X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary2XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary2X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000086_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary2Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary2YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary2Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000087_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary2Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary2YArgument;
    primary2YArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary2YWithValue:primary2YArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary2Y Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000088_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary2Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary2YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary2Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000089_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Validate constraints of attribute: Primary2Intensity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary2IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Validate constraints of attribute: Primary2Intensity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000090_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary3X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary3XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary3X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000091_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary3X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary3XArgument;
    primary3XArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary3XWithValue:primary3XArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary3X Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000092_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary3X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary3XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary3X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000093_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary3Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary3YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary3Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000094_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary3Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary3YArgument;
    primary3YArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary3YWithValue:primary3YArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary3Y Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000095_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary3Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary3YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary3Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000096_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary3Intensity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary3IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary3Intensity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000097_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary4X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary4XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary4X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000098_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary4X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary4XArgument;
    primary4XArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary4XWithValue:primary4XArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary4X Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000099_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary4X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary4XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary4X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000100_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary4Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary4YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary4Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000101_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary4Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary4YArgument;
    primary4YArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary4YWithValue:primary4YArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary4Y Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000102_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary4Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary4YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary4Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000103_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary4Intensity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary4IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary4Intensity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000104_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary5X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary5XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary5X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000105_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary5X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary5XArgument;
    primary5XArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary5XWithValue:primary5XArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary5X Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000106_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary5X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary5XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary5X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000107_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary5Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary5YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary5Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000108_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary5Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary5YArgument;
    primary5YArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary5YWithValue:primary5YArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary5Y Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000109_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary5Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary5YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary5Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000110_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary5Intensity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary5IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary5Intensity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000111_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary6X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary6XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary6X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000112_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary6X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary6XArgument;
    primary6XArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary6XWithValue:primary6XArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary6X Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000113_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary6X"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary6XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary6X Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000114_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary6Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary6YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary6Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000115_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default mandatory attribute: Primary6Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id primary6YArgument;
    primary6YArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributePrimary6YWithValue:primary6YArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write the default mandatory attribute: Primary6Y Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000116_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the mandatory attribute: Primary6Y"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary6YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the mandatory attribute: Primary6Y Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000117_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: Primary6Intensity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary6IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: Primary6Intensity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000118_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: WhitePointX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeWhitePointXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: WhitePointX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000119_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default optional attribute: WhitePointX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id whitePointXArgument;
    whitePointXArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeWhitePointXWithValue:whitePointXArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"Write the default optional attribute: WhitePointX Error: %@", err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000120_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the optional attribute: WhitePointX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeWhitePointXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the optional attribute: WhitePointX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000121_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: WhitePointY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeWhitePointYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: WhitePointY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000122_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default optional attribute: WhitePointY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id whitePointYArgument;
    whitePointYArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeWhitePointYWithValue:whitePointYArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"Write the default optional attribute: WhitePointY Error: %@", err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000123_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the optional attribute: WhitePointY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeWhitePointYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the optional attribute: WhitePointY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000124_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: ColorPointRX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointRXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: ColorPointRX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000125_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default optional attribute: ColorPointRX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorPointRXArgument;
    colorPointRXArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeColorPointRXWithValue:colorPointRXArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"Write the default optional attribute: ColorPointRX Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000126_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the optional attribute: ColorPointRX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointRXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the optional attribute: ColorPointRX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000127_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: ColorPointRY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointRYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: ColorPointRY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000128_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default optional attribute: ColorPointRY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorPointRYArgument;
    colorPointRYArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeColorPointRYWithValue:colorPointRYArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"Write the default optional attribute: ColorPointRY Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000129_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the optional attribute: ColorPointRY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointRYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the optional attribute: ColorPointRY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000130_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: ColorPointRIntensity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointRIntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: ColorPointRIntensity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000131_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: ColorPointGX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointGXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: ColorPointGX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000132_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default optional attribute: ColorPointGX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorPointGXArgument;
    colorPointGXArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeColorPointGXWithValue:colorPointGXArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"Write the default optional attribute: ColorPointGX Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000133_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the optional attribute: ColorPointGX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointGXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the optional attribute: ColorPointGX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000134_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: ColorPointGY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointGYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: ColorPointGY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000135_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default optional attribute: ColorPointGY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorPointGYArgument;
    colorPointGYArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeColorPointGYWithValue:colorPointGYArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"Write the default optional attribute: ColorPointGY Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000136_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the optional attribute: ColorPointGY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointGYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the optional attribute: ColorPointGY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000137_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: ColorPointGIntensity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointGIntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: ColorPointGIntensity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000138_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: ColorPointBX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointBXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: ColorPointBX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000139_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default optional attribute: ColorPointBX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorPointBXArgument;
    colorPointBXArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeColorPointBXWithValue:colorPointBXArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"Write the default optional attribute: ColorPointBX Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000140_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the optional attribute: ColorPointBX"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointBXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the optional attribute: ColorPointBX Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000141_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: ColorPointBY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointBYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: ColorPointBY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65279);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000142_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write the default optional attribute: ColorPointBY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id colorPointBYArgument;
    colorPointBYArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeColorPointBYWithValue:colorPointBYArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"Write the default optional attribute: ColorPointBY Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000143_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back the optional attribute: ColorPointBY"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointBYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back the optional attribute: ColorPointBY Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_2_1_000144_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the optional attribute: ColorPointBIntensity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointBIntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the optional attribute: ColorPointBIntensity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_3_1_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_1_000002_MoveToHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move to hue shortest distance command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveToHueParams alloc] init];
    params.hue = [NSNumber numberWithUnsignedChar:150];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.transitionTime = [NSNumber numberWithUnsignedShort:100U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveToHueWithParams:params
               completionHandler:^(NSError * _Nullable err) {
                   NSLog(@"Move to hue shortest distance command Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_1_000003_MoveToHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move to hue longest distance command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveToHueParams alloc] init];
    params.hue = [NSNumber numberWithUnsignedChar:200];
    params.direction = [NSNumber numberWithUnsignedChar:1];
    params.transitionTime = [NSNumber numberWithUnsignedShort:100U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveToHueWithParams:params
               completionHandler:^(NSError * _Nullable err) {
                   NSLog(@"Move to hue longest distance command Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_1_000004_MoveToHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move to hue up command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveToHueParams alloc] init];
    params.hue = [NSNumber numberWithUnsignedChar:250];
    params.direction = [NSNumber numberWithUnsignedChar:2];
    params.transitionTime = [NSNumber numberWithUnsignedShort:100U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveToHueWithParams:params
               completionHandler:^(NSError * _Nullable err) {
                   NSLog(@"Move to hue up command Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_1_000005_MoveToHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move to hue down command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveToHueParams alloc] init];
    params.hue = [NSNumber numberWithUnsignedChar:225];
    params.direction = [NSNumber numberWithUnsignedChar:3];
    params.transitionTime = [NSNumber numberWithUnsignedShort:100U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveToHueWithParams:params
               completionHandler:^(NSError * _Nullable err) {
                   NSLog(@"Move to hue down command Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_1_000006_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_1_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_3_2_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_2_000002_MoveHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move hue up command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveHueParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:1];
    params.rate = [NSNumber numberWithUnsignedChar:50];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveHueWithParams:params
             completionHandler:^(NSError * _Nullable err) {
                 NSLog(@"Move hue up command Error: %@", err);

                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                 [expectation fulfill];
             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_2_000003_MoveHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move hue stop command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveHueParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:0];
    params.rate = [NSNumber numberWithUnsignedChar:50];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveHueWithParams:params
             completionHandler:^(NSError * _Nullable err) {
                 NSLog(@"Move hue stop command Error: %@", err);

                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                 [expectation fulfill];
             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_2_000004_MoveHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move hue down command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveHueParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:3];
    params.rate = [NSNumber numberWithUnsignedChar:50];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveHueWithParams:params
             completionHandler:^(NSError * _Nullable err) {
                 NSLog(@"Move hue down command Error: %@", err);

                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                 [expectation fulfill];
             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_2_000005_MoveHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move hue stop command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveHueParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:0];
    params.rate = [NSNumber numberWithUnsignedChar:50];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveHueWithParams:params
             completionHandler:^(NSError * _Nullable err) {
                 NSLog(@"Move hue stop command Error: %@", err);

                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                 [expectation fulfill];
             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_2_000006_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_2_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_3_3_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_3_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_3_000002_StepHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Step hue up command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterStepHueParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:1];
    params.stepSize = [NSNumber numberWithUnsignedChar:5];
    params.transitionTime = [NSNumber numberWithUnsignedChar:25];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepHueWithParams:params
             completionHandler:^(NSError * _Nullable err) {
                 NSLog(@"Step hue up command Error: %@", err);

                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                 [expectation fulfill];
             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_3_000003_StepHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Step hue down command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterStepHueParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:3];
    params.stepSize = [NSNumber numberWithUnsignedChar:5];
    params.transitionTime = [NSNumber numberWithUnsignedChar:25];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepHueWithParams:params
             completionHandler:^(NSError * _Nullable err) {
                 NSLog(@"Step hue down command Error: %@", err);

                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                 [expectation fulfill];
             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_3_000004_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_3_3_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_4_1_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_1_000002_MoveToSaturation
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move to saturation command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveToSaturationParams alloc] init];
    params.saturation = [NSNumber numberWithUnsignedChar:90];
    params.transitionTime = [NSNumber numberWithUnsignedShort:10U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveToSaturationWithParams:params
                      completionHandler:^(NSError * _Nullable err) {
                          NSLog(@"Move to saturation command Error: %@", err);

                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                          [expectation fulfill];
                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_1_000003_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_4_2_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_2_000002_MoveSaturation
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move saturation up command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveSaturationParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:1];
    params.rate = [NSNumber numberWithUnsignedChar:5];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveSaturationWithParams:params
                    completionHandler:^(NSError * _Nullable err) {
                        NSLog(@"Move saturation up command Error: %@", err);

                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                        [expectation fulfill];
                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_2_000003_MoveSaturation
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move saturation down command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveSaturationParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:3];
    params.rate = [NSNumber numberWithUnsignedChar:5];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveSaturationWithParams:params
                    completionHandler:^(NSError * _Nullable err) {
                        NSLog(@"Move saturation down command Error: %@", err);

                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                        [expectation fulfill];
                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_2_000004_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_2_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_4_3_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_3_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_3_000002_StepSaturation
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Step saturation up command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterStepSaturationParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:1];
    params.stepSize = [NSNumber numberWithUnsignedChar:15];
    params.transitionTime = [NSNumber numberWithUnsignedChar:10];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepSaturationWithParams:params
                    completionHandler:^(NSError * _Nullable err) {
                        NSLog(@"Step saturation up command Error: %@", err);

                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                        [expectation fulfill];
                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_3_000003_StepSaturation
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Step saturation down command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterStepSaturationParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:3];
    params.stepSize = [NSNumber numberWithUnsignedChar:20];
    params.transitionTime = [NSNumber numberWithUnsignedChar:10];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepSaturationWithParams:params
                    completionHandler:^(NSError * _Nullable err) {
                        NSLog(@"Step saturation down command Error: %@", err);

                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                        [expectation fulfill];
                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_3_000004_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_3_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_4_4_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_4_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_4_000002_MoveToHueAndSaturation
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move To current hue and saturation command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveToHueAndSaturationParams alloc] init];
    params.hue = [NSNumber numberWithUnsignedChar:40];
    params.saturation = [NSNumber numberWithUnsignedChar:160];
    params.transitionTime = [NSNumber numberWithUnsignedShort:10U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveToHueAndSaturationWithParams:params
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Move To current hue and saturation command Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_4_000003_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_4_4_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_5_1_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_1_000002_MoveToColor
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move to Color command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveToColorParams alloc] init];
    params.colorX = [NSNumber numberWithUnsignedShort:200U];
    params.colorY = [NSNumber numberWithUnsignedShort:300U];
    params.transitionTime = [NSNumber numberWithUnsignedShort:20U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveToColorWithParams:params
                 completionHandler:^(NSError * _Nullable err) {
                     NSLog(@"Move to Color command Error: %@", err);

                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                     [expectation fulfill];
                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_1_000003_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_5_2_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_2_000002_MoveColor
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move Color command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveColorParams alloc] init];
    params.rateX = [NSNumber numberWithShort:15];
    params.rateY = [NSNumber numberWithShort:20];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveColorWithParams:params
               completionHandler:^(NSError * _Nullable err) {
                   NSLog(@"Move Color command Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_2_000003_StopMoveStep
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Stop Move Step command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterStopMoveStepParams alloc] init];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stopMoveStepWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Stop Move Step command Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_2_000004_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_2_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_5_3_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_3_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_3_000002_StepColor
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Step Color command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterStepColorParams alloc] init];
    params.stepX = [NSNumber numberWithShort:15];
    params.stepY = [NSNumber numberWithShort:20];
    params.transitionTime = [NSNumber numberWithUnsignedShort:50U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepColorWithParams:params
               completionHandler:^(NSError * _Nullable err) {
                   NSLog(@"Step Color command Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_3_000003_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_5_3_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_6_1_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_1_000002_MoveToColorTemperature
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move To Color Temperature command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveToColorTemperatureParams alloc] init];
    params.colorTemperature = [NSNumber numberWithUnsignedShort:100U];
    params.transitionTime = [NSNumber numberWithUnsignedShort:10U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveToColorTemperatureWithParams:params
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Move To Color Temperature command Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_1_000003_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_6_2_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_2_000002_MoveColorTemperature
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move up color temperature command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveColorTemperatureParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:1];
    params.rate = [NSNumber numberWithUnsignedShort:10U];
    params.colorTemperatureMinimum = [NSNumber numberWithUnsignedShort:1U];
    params.colorTemperatureMaximum = [NSNumber numberWithUnsignedShort:255U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveColorTemperatureWithParams:params
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Move up color temperature command Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_2_000003_MoveColorTemperature
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Stop Color Temperature command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveColorTemperatureParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:0];
    params.rate = [NSNumber numberWithUnsignedShort:10U];
    params.colorTemperatureMinimum = [NSNumber numberWithUnsignedShort:1U];
    params.colorTemperatureMaximum = [NSNumber numberWithUnsignedShort:255U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveColorTemperatureWithParams:params
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Stop Color Temperature command Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_2_000004_MoveColorTemperature
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Move down color temperature command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterMoveColorTemperatureParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:3];
    params.rate = [NSNumber numberWithUnsignedShort:20U];
    params.colorTemperatureMinimum = [NSNumber numberWithUnsignedShort:1U];
    params.colorTemperatureMaximum = [NSNumber numberWithUnsignedShort:255U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster moveColorTemperatureWithParams:params
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Move down color temperature command Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_2_000005_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_2_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_6_3_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_3_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_3_000002_StepColorTemperature
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Step up color temperature command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterStepColorTemperatureParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:1];
    params.stepSize = [NSNumber numberWithUnsignedShort:5U];
    params.transitionTime = [NSNumber numberWithUnsignedShort:50U];
    params.colorTemperatureMinimum = [NSNumber numberWithUnsignedShort:5U];
    params.colorTemperatureMaximum = [NSNumber numberWithUnsignedShort:100U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepColorTemperatureWithParams:params
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Step up color temperature command Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_3_000003_StepColorTemperature
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Step down color temperature command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterStepColorTemperatureParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:3];
    params.stepSize = [NSNumber numberWithUnsignedShort:5U];
    params.transitionTime = [NSNumber numberWithUnsignedShort:50U];
    params.colorTemperatureMinimum = [NSNumber numberWithUnsignedShort:5U];
    params.colorTemperatureMaximum = [NSNumber numberWithUnsignedShort:100U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepColorTemperatureWithParams:params
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Step down color temperature command Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_3_000004_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_6_3_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_7_1_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_1_000002_EnhancedMoveToHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Enhanced Move To Hue command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterEnhancedMoveToHueParams alloc] init];
    params.enhancedHue = [NSNumber numberWithUnsignedShort:1025U];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.transitionTime = [NSNumber numberWithUnsignedShort:1U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster enhancedMoveToHueWithParams:params
                       completionHandler:^(NSError * _Nullable err) {
                           NSLog(@"Enhanced Move To Hue command Error: %@", err);

                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                           [expectation fulfill];
                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_1_000003_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Check Remaining time attribute value matched the value sent by the last command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRemainingTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check Remaining time attribute value matched the value sent by the last command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 1U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_1_000004_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_7_2_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_2_000002_EnhancedMoveHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Enhanced Move Hue Down command "];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterEnhancedMoveHueParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:3];
    params.rate = [NSNumber numberWithUnsignedShort:5U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster enhancedMoveHueWithParams:params
                     completionHandler:^(NSError * _Nullable err) {
                         NSLog(@"Enhanced Move Hue Down command  Error: %@", err);

                         XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                         [expectation fulfill];
                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_2_000003_EnhancedMoveHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Enhanced Move Hue Stop command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterEnhancedMoveHueParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:0];
    params.rate = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster enhancedMoveHueWithParams:params
                     completionHandler:^(NSError * _Nullable err) {
                         NSLog(@"Enhanced Move Hue Stop command Error: %@", err);

                         XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                         [expectation fulfill];
                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_2_000004_EnhancedMoveHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Enhanced Move Hue Up command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterEnhancedMoveHueParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:1];
    params.rate = [NSNumber numberWithUnsignedShort:50U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster enhancedMoveHueWithParams:params
                     completionHandler:^(NSError * _Nullable err) {
                         NSLog(@"Enhanced Move Hue Up command Error: %@", err);

                         XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                         [expectation fulfill];
                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_2_000005_EnhancedMoveHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Enhanced Move Hue Stop command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterEnhancedMoveHueParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:0];
    params.rate = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster enhancedMoveHueWithParams:params
                     completionHandler:^(NSError * _Nullable err) {
                         NSLog(@"Enhanced Move Hue Stop command Error: %@", err);

                         XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                         [expectation fulfill];
                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_2_000006_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_2_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_7_3_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_3_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_3_000002_EnhancedStepHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Enhanced Step Hue Up command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterEnhancedStepHueParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:0];
    params.stepSize = [NSNumber numberWithUnsignedShort:50U];
    params.transitionTime = [NSNumber numberWithUnsignedShort:1U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster enhancedStepHueWithParams:params
                     completionHandler:^(NSError * _Nullable err) {
                         NSLog(@"Enhanced Step Hue Up command Error: %@", err);

                         XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                         [expectation fulfill];
                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_3_000003_EnhancedStepHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Enhanced Step Hue Down command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterEnhancedStepHueParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:1];
    params.stepSize = [NSNumber numberWithUnsignedShort:75U];
    params.transitionTime = [NSNumber numberWithUnsignedShort:1U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster enhancedStepHueWithParams:params
                     completionHandler:^(NSError * _Nullable err) {
                         NSLog(@"Enhanced Step Hue Down command Error: %@", err);

                         XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                         [expectation fulfill];
                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_3_000004_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_3_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_7_4_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_4_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_4_000002_EnhancedMoveToHueAndSaturation
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Enhanced move to hue and saturation command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterEnhancedMoveToHueAndSaturationParams alloc] init];
    params.enhancedHue = [NSNumber numberWithUnsignedShort:1200U];
    params.saturation = [NSNumber numberWithUnsignedChar:90];
    params.transitionTime = [NSNumber numberWithUnsignedShort:10U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster enhancedMoveToHueAndSaturationWithParams:params
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"Enhanced move to hue and saturation command Error: %@", err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_4_000003_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_7_4_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_8_1_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000002_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Color Loop Set Command - Set all Attributs"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:14];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:1];
    params.time = [NSNumber numberWithUnsignedShort:100U];
    params.startHue = [NSNumber numberWithUnsignedShort:500U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Set all Attributs Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check ColorLoopDirection Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check ColorLoopDirection Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check ColorLoopTime Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check ColorLoopTime Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 100U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check ColorLoopStartEnhancedHue Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStartEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check ColorLoopStartEnhancedHue Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 500U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check ColorLoopActive Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check ColorLoopActive Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000007_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Color Loop Set Command - Start Color Loop"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:1];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Start Color Loop Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000008_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check ColorLoopActive Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check ColorLoopActive Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000009_ColorLoopSet
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Color Loop Set Command - Set direction and time while running"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:6];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:3500U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Set direction and time while running Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check ColorLoopDirection Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check ColorLoopDirection Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000011_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check ColorLoopTime Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check ColorLoopTime Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 3500U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000012_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Color Loop Set Command - Set direction while running"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:2];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:1];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Set direction while running Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000013_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check ColorLoopDirection Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check ColorLoopDirection Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000014_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light that we turned on"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light that we turned on Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_8_1_000015_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_9_1_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Precondition : Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Precondition : Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000002_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000004_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:2];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopDirection attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopDirection attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000006_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:4];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:30U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 30U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000008_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:8];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:160U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000009_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopStartEnhancedHue attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStartEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopStartEnhancedHue attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 160U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000010_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:1];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000011_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000012_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000013_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000014_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:2];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:1];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000015_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopDirection attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopDirection attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000016_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:1];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000017_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000018_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000019_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000020_EnhancedMoveToHue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Enhanced Move To Hue command 10"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterEnhancedMoveToHueParams alloc] init];
    params.enhancedHue = [NSNumber numberWithUnsignedShort:40960U];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.transitionTime = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster enhancedMoveToHueWithParams:params
                       completionHandler:^(NSError * _Nullable err) {
                           NSLog(@"Enhanced Move To Hue command 10 Error: %@", err);

                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                           [expectation fulfill];
                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000021_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 2000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 2000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000022_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read EnhancedCurrentHue attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnhancedCurrentHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read EnhancedCurrentHue attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 40960U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000023_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:2];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000024_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopDirection attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopDirection attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000025_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:2];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000026_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000027_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000028_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000029_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:2];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:1];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000030_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopDirection attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopDirection attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000031_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:2];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000032_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000033_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000034_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_1_000035_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn Off light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn Off light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_9_2_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Precondition: Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Precondition: Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000001_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Precondition: Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Precondition: Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000002_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:15];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:30U];
    params.startHue = [NSNumber numberWithUnsignedShort:160U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopDirection attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopDirection attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopTime attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopTime attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 30U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopStartEnhancedHue attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStartEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopStartEnhancedHue attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 160U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000007_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Color Loop Set Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:1];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000008_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000009_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Color Loop Set Command - Start Color Loop"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:2];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:1];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Start Color Loop Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopDirection attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopDirection attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000011_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Color Loop Set Command - Start Color Loop"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Start Color Loop Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000012_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_2_000013_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_CC_9_3_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Precondition: Turn on light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Precondition: Turn on light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000001_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Precondition: Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Precondition: Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000002_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends ColorLoopSet Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:15];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:30U];
    params.startHue = [NSNumber numberWithUnsignedShort:160U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Sends ColorLoopSet Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopDirection attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopDirection attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopTime attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopTime attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 30U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopStartEnhancedHue attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStartEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopStartEnhancedHue attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 160U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000007_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Color Loop Set Command - Set all Attributes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:1];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Set all Attributes Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000008_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000009_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Color Loop Set Command - Start Color Loop"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:4];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:60U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Start Color Loop Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopTime attribute from DUT."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopTime attribute from DUT. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 60U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000011_ColorLoopSet
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Color Loop Set Command - Start Color Loop"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPColorControlClusterColorLoopSetParams alloc] init];
    params.updateFlags = [NSNumber numberWithUnsignedChar:1];
    params.action = [NSNumber numberWithUnsignedChar:0];
    params.direction = [NSNumber numberWithUnsignedChar:0];
    params.time = [NSNumber numberWithUnsignedShort:0U];
    params.startHue = [NSNumber numberWithUnsignedShort:0U];
    params.optionsMask = [NSNumber numberWithUnsignedChar:0];
    params.optionsOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster colorLoopSetWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Color Loop Set Command - Start Color Loop Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000012_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read ColorLoopActive attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestColorControl * cluster = [[CHIPTestColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read ColorLoopActive attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_CC_9_3_000013_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn off light for color control tests"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn off light for color control tests Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_DM_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query Interaction Model Version"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInteractionModelVersionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query Interaction Model Version Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query Vendor Name"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorNameWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query Vendor Name Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 32);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query VendorID"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorIDWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query VendorID Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query Product Name"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeProductNameWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query Product Name Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 32);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query ProductID"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeProductIDWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query ProductID Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query Node Label"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNodeLabelWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query Node Label Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 32);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query User Location"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLocationWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query User Location Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 2);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query HardwareVersion"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeHardwareVersionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query HardwareVersion Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000008_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query HardwareVersionString"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeHardwareVersionStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query HardwareVersionString Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue length], 1);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 64);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000009_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query SoftwareVersion"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSoftwareVersionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query SoftwareVersion Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query SoftwareVersionString"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSoftwareVersionStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query SoftwareVersionString Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue length], 1);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 64);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000011_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query ManufacturingDate"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeManufacturingDateWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query ManufacturingDate Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue length], 8);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 16);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000012_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query PartNumber"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePartNumberWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query PartNumber Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 32);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000013_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query ProductURL"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeProductURLWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query ProductURL Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 256);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000014_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query ProductLabel"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeProductLabelWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query ProductLabel Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 64);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000015_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query SerialNumber"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSerialNumberWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query SerialNumber Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 32);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000016_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query LocalConfigDisabled"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLocalConfigDisabledWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query LocalConfigDisabled Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000017_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query Reachable"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeReachableWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query Reachable Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DM_1_1_000018_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Query UniqueID"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeUniqueIDWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Query UniqueID Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue length], 32);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_EMR_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestElectricalMeasurement * cluster = [[CHIPTestElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 3U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_EMR_1_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestElectricalMeasurement * cluster = [[CHIPTestElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:1U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_EMR_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestElectricalMeasurement * cluster = [[CHIPTestElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 3U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_FLW_1_1_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:2U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_FLW_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_FLW_2_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MinMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MinMeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_FLW_2_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MaxMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MaxMeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_FLW_2_1_000003_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default value to optional attribute: MinMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minMeasuredValueArgument;
    minMeasuredValueArgument = [NSNumber numberWithShort:0];
    [cluster writeAttributeMinMeasuredValueWithValue:minMeasuredValueArgument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"write the default value to optional attribute: MinMeasuredValue Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_FLW_2_1_000004_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default value to optional attribute: MaxMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxMeasuredValueArgument;
    maxMeasuredValueArgument = [NSNumber numberWithShort:0];
    [cluster writeAttributeMaxMeasuredValueWithValue:maxMeasuredValueArgument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"write the default value to optional attribute: MaxMeasuredValue Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_FLW_2_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_FLW_2_1_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MinMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MinMeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_FLW_2_1_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MaxMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MaxMeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_FLW_2_2_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_FLW_2_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestFlowMeasurement * cluster = [[CHIPTestFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_ILL_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestIlluminanceMeasurement * cluster = [[CHIPTestIlluminanceMeasurement alloc] initWithDevice:device
                                                                                             endpoint:1
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 2U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_ILL_1_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestIlluminanceMeasurement * cluster = [[CHIPTestIlluminanceMeasurement alloc] initWithDevice:device
                                                                                             endpoint:1
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:1U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_ILL_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestIlluminanceMeasurement * cluster = [[CHIPTestIlluminanceMeasurement alloc] initWithDevice:device
                                                                                             endpoint:1
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 2U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_LVL_1_1_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:4U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_LVL_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads current Level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads current Level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000001_MoveToLevel
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"sends a Move to level command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterMoveToLevelParams alloc] init];
    params.level = [NSNumber numberWithUnsignedChar:64];
    params.transitionTime = [NSNumber numberWithUnsignedShort:0U];
    params.optionMask = [NSNumber numberWithUnsignedChar:1];
    params.optionOverride = [NSNumber numberWithUnsignedChar:1];
    [cluster moveToLevelWithParams:params
                 completionHandler:^(NSError * _Nullable err) {
                     NSLog(@"sends a Move to level command Error: %@", err);

                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                     [expectation fulfill];
                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000002_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 100ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 100);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads current Level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads current Level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 64);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000004_MoveToLevel
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"sends a Move to level command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterMoveToLevelParams alloc] init];
    params.level = [NSNumber numberWithUnsignedChar:128];
    params.transitionTime = [NSNumber numberWithUnsignedShort:1U];
    params.optionMask = [NSNumber numberWithUnsignedChar:1];
    params.optionOverride = [NSNumber numberWithUnsignedChar:1];
    [cluster moveToLevelWithParams:params
                 completionHandler:^(NSError * _Nullable err) {
                     NSLog(@"sends a Move to level command Error: %@", err);

                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                     [expectation fulfill];
                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000005_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 200ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 200);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads current Level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads current Level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 128);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads On Off Transition Time attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffTransitionTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads On Off Transition Time attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000008_MoveToLevel
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"sends a Move to level command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterMoveToLevelParams alloc] init];
    params.level = [NSNumber numberWithUnsignedChar:254];
    params.transitionTime = [NSNumber numberWithUnsignedShort:65535U];
    params.optionMask = [NSNumber numberWithUnsignedChar:1];
    params.optionOverride = [NSNumber numberWithUnsignedChar:1];
    [cluster moveToLevelWithParams:params
                 completionHandler:^(NSError * _Nullable err) {
                     NSLog(@"sends a Move to level command Error: %@", err);

                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                     [expectation fulfill];
                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000009_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 10ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 10);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads current Level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads current Level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000011_MoveToLevel
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reset level to 0"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterMoveToLevelParams alloc] init];
    params.level = [NSNumber numberWithUnsignedChar:0];
    params.transitionTime = [NSNumber numberWithUnsignedShort:0U];
    params.optionMask = [NSNumber numberWithUnsignedChar:1];
    params.optionOverride = [NSNumber numberWithUnsignedChar:1];
    [cluster moveToLevelWithParams:params
                 completionHandler:^(NSError * _Nullable err) {
                     NSLog(@"Reset level to 0 Error: %@", err);

                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                     [expectation fulfill];
                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_2_1_000012_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 100ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 100);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_LVL_3_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads current level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads current level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads max level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads max level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 255);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000002_Move
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"sends a Move up command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterMoveParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:0];
    params.rate = [NSNumber numberWithUnsignedChar:200];
    params.optionMask = [NSNumber numberWithUnsignedChar:1];
    params.optionOverride = [NSNumber numberWithUnsignedChar:1];
    [cluster moveWithParams:params
          completionHandler:^(NSError * _Nullable err) {
              NSLog(@"sends a Move up command Error: %@", err);

              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

              [expectation fulfill];
          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000003_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 3000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 3000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads current level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads current level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 255);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads min level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads min level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000006_Move
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"sends a Move down command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterMoveParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:1];
    params.rate = [NSNumber numberWithUnsignedChar:250];
    params.optionMask = [NSNumber numberWithUnsignedChar:1];
    params.optionOverride = [NSNumber numberWithUnsignedChar:1];
    [cluster moveWithParams:params
          completionHandler:^(NSError * _Nullable err) {
              NSLog(@"sends a Move down command Error: %@", err);

              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

              [expectation fulfill];
          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000007_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 3000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 3000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000008_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads current level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads current level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000009_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write default move rate attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id defaultMoveRateArgument;
    defaultMoveRateArgument = [NSNumber numberWithUnsignedChar:20];
    [cluster writeAttributeDefaultMoveRateWithValue:defaultMoveRateArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write default move rate attribute from DUT Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads default move rate attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDefaultMoveRateWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads default move rate attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 20);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000011_Move
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"sends a Move up command at default move rate"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterMoveParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:1];
    params.rate = [NSNumber numberWithUnsignedChar:255];
    params.optionMask = [NSNumber numberWithUnsignedChar:1];
    params.optionOverride = [NSNumber numberWithUnsignedChar:1];
    [cluster moveWithParams:params
          completionHandler:^(NSError * _Nullable err) {
              NSLog(@"sends a Move up command at default move rate Error: %@", err);

              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

              [expectation fulfill];
          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000012_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 100ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 100);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_3_1_000013_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads current level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads current level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedCharValue], 255);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_LVL_4_1_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sending on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Sending on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000001_Step
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Precondition: DUT level is set to 0x80"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterStepParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:0];
    params.stepSize = [NSNumber numberWithUnsignedChar:128];
    params.transitionTime = [NSNumber numberWithUnsignedShort:20U];
    params.optionMask = [NSNumber numberWithUnsignedChar:0];
    params.optionOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepWithParams:params
          completionHandler:^(NSError * _Nullable err) {
              NSLog(@"Precondition: DUT level is set to 0x80 Error: %@", err);

              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

              [expectation fulfill];
          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000002_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 3000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 3000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads current level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads current level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 128);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000004_Step
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends step down command to DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterStepParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:1];
    params.stepSize = [NSNumber numberWithUnsignedChar:64];
    params.transitionTime = [NSNumber numberWithUnsignedShort:20U];
    params.optionMask = [NSNumber numberWithUnsignedChar:0];
    params.optionOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepWithParams:params
          completionHandler:^(NSError * _Nullable err) {
              NSLog(@"Sends step down command to DUT Error: %@", err);

              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

              [expectation fulfill];
          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000005_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 3000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 3000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads current level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads current level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 64);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000007_Step
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends a Step up command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterStepParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:0];
    params.stepSize = [NSNumber numberWithUnsignedChar:64];
    params.transitionTime = [NSNumber numberWithUnsignedShort:20U];
    params.optionMask = [NSNumber numberWithUnsignedChar:0];
    params.optionOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepWithParams:params
          completionHandler:^(NSError * _Nullable err) {
              NSLog(@"Sends a Step up command Error: %@", err);

              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

              [expectation fulfill];
          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000008_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 3000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 3000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000009_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads current level attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads current level attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 128);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_4_1_000010_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sending off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Sending off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_LVL_5_1_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sending on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Sending on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_5_1_000001_Step
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Precondition: DUT level is set to 0x80"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterStepParams alloc] init];
    params.stepMode = [NSNumber numberWithUnsignedChar:0];
    params.stepSize = [NSNumber numberWithUnsignedChar:128];
    params.transitionTime = [NSNumber numberWithUnsignedShort:20U];
    params.optionMask = [NSNumber numberWithUnsignedChar:0];
    params.optionOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stepWithParams:params
          completionHandler:^(NSError * _Nullable err) {
              NSLog(@"Precondition: DUT level is set to 0x80 Error: %@", err);

              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

              [expectation fulfill];
          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_5_1_000002_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 3000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 3000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_5_1_000003_Move
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends a move up command to DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterMoveParams alloc] init];
    params.moveMode = [NSNumber numberWithUnsignedChar:0];
    params.rate = [NSNumber numberWithUnsignedChar:1];
    params.optionMask = [NSNumber numberWithUnsignedChar:1];
    params.optionOverride = [NSNumber numberWithUnsignedChar:1];
    [cluster moveWithParams:params
          completionHandler:^(NSError * _Nullable err) {
              NSLog(@"Sends a move up command to DUT Error: %@", err);

              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

              [expectation fulfill];
          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_5_1_000004_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 3000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 3000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_5_1_000005_Stop
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sends stop command to DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLevelControl * cluster = [[CHIPTestLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPLevelControlClusterStopParams alloc] init];
    params.optionMask = [NSNumber numberWithUnsignedChar:0];
    params.optionOverride = [NSNumber numberWithUnsignedChar:0];
    [cluster stopWithParams:params
          completionHandler:^(NSError * _Nullable err) {
              NSLog(@"Sends stop command to DUT Error: %@", err);

              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

              [expectation fulfill];
          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_LVL_5_1_000006_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sending off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Sending off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_MC_1_1_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestRelativeHumidityMeasurement * cluster = [[CHIPTestRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:1U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_MC_2_1_000000_Sleep
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Put the device into low power mode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestLowPower * cluster = [[CHIPTestLowPower alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster sleepWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Put the device into low power mode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_OCC_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 2U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_1_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:2U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_OCC_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads mandatory attribute constrains: Occupancy"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancyWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attribute constrains: Occupancy Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_2_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the respective default value to mandatory attribute: Occupancy"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupancyArgument;
    occupancyArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeOccupancyWithValue:occupancyArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Writes the respective default value to mandatory attribute: Occupancy Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_2_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: Occupancy"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancyWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: Occupancy Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attribute constrains: OccupancySensorType"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancySensorTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attribute constrains: OccupancySensorType Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 3);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_2_1_000004_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the respective default value to mandatory attribute: OccupancySensorType"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupancySensorTypeArgument;
    occupancySensorTypeArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeOccupancySensorTypeWithValue:occupancySensorTypeArgument
                                      completionHandler:^(NSError * _Nullable err) {
                                          NSLog(@"Writes the respective default value to mandatory attribute: OccupancySensorType "
                                                @"Error: %@",
                                              err);

                                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                          [expectation fulfill];
                                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_2_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: OccupancySensorType"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancySensorTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: OccupancySensorType Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_2_1_000006_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attribute constrains: OccupancySensorTypeBitmap"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancySensorTypeBitmapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attribute constrains: OccupancySensorTypeBitmap Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue unsignedCharValue], 1);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 7);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_2_1_000007_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the respective default value to mandatory attribute: OccupancySensorTypeBitmap"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupancySensorTypeBitmapArgument;
    occupancySensorTypeBitmapArgument = [NSNumber numberWithUnsignedChar:1];
    [cluster writeAttributeOccupancySensorTypeBitmapWithValue:occupancySensorTypeBitmapArgument
                                            completionHandler:^(NSError * _Nullable err) {
                                                NSLog(@"Writes the respective default value to mandatory attribute: "
                                                      @"OccupancySensorTypeBitmap Error: %@",
                                                    err);

                                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                [expectation fulfill];
                                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_2_1_000008_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads back mandatory attribute: OccupancySensorTypeBitmap"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancySensorTypeBitmapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: OccupancySensorTypeBitmap Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_OCC_2_2_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads Occupancy attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancyWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads Occupancy attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OCC_2_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads Occupancy attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOccupancySensing * cluster = [[CHIPTestOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancyWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads Occupancy attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_OO_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 4U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_1_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:3U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 4U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_1_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the optional global attribute: FeatureMap"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the optional global attribute: FeatureMap Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_1_1_000004_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to optional global attribute: FeatureMap"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id featureMapArgument;
    featureMapArgument = [NSNumber numberWithUnsignedInt:0UL];
    [cluster writeAttributeFeatureMapWithValue:featureMapArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to optional global attribute: FeatureMap Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_1_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back optional global attribute: FeatureMap"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back optional global attribute: FeatureMap Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_OO_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: OnOff"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: OnOff Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back mandatory attribute: OnOff"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back mandatory attribute: OnOff Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read LT attribute: GlobalSceneControl"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeGlobalSceneControlWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read LT attribute: GlobalSceneControl Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read LT attribute: OnTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read LT attribute: OnTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read LT attribute: OffWaitTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read LT attribute: OffWaitTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read LT attribute: StartUpOnOff"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStartUpOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read LT attribute: StartUpOnOff Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000006_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"write the default value to LT attribute: OnTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id onTimeArgument;
    onTimeArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeOnTimeWithValue:onTimeArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"write the default value to LT attribute: OnTime Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000007_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"write the default value to LT attribute: OffWaitTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id offWaitTimeArgument;
    offWaitTimeArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeOffWaitTimeWithValue:offWaitTimeArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"write the default value to LT attribute: OffWaitTime Error: %@", err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000008_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"write the default value to LT attribute: StartUpOnOff"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id startUpOnOffArgument;
    startUpOnOffArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeStartUpOnOffWithValue:startUpOnOffArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"write the default value to LT attribute: StartUpOnOff Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000009_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back LT attribute: OnTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back LT attribute: OnTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back LT attribute: OffWaitTime"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back LT attribute: OffWaitTime Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_1_000011_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back LT attribute: StartUpOnOff"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStartUpOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back LT attribute: StartUpOnOff Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_OO_2_2_000000_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Off Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Off Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000002_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send On Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send On Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000004_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Off Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Off Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000006_Toggle
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Toggle Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster toggleWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Toggle Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000007_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Check on/off attribute value is true after toggle command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after toggle command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000008_Toggle
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Toggle Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster toggleWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Toggle Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000009_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Check on/off attribute value is false after toggle command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after toggle command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000010_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send On Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send On Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000011_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is true after on command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is true after on command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000012_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Off Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Off Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_2_000013_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check on/off attribute value is false after off command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check on/off attribute value is false after off command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_OO_2_3_000000_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send On Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send On Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000001_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 1000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 1000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads GlobalSceneControl attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeGlobalSceneControlWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads GlobalSceneControl attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000004_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send On Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send On Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000005_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 1000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 1000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads GlobalSceneControl attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeGlobalSceneControlWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads GlobalSceneControl attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000008_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send On Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send On Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000009_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 1000ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 1000);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000011_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads GlobalSceneControl attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeGlobalSceneControlWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads GlobalSceneControl attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000012_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000013_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OffWaitTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OffWaitTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000014_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send On Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send On Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000015_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000016_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000017_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OffWaitTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OffWaitTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000018_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Off Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Off Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000019_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000020_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000021_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000022_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000023_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OffWaitTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OffWaitTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000024_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send On Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send On Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000025_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000026_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OffWaitTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OffWaitTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000027_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Off Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Off Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000028_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000029_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000030_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000031_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000032_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send On Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send On Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000033_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000034_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000035_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OffWaitTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OffWaitTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000036_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Off Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Off Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000037_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000038_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000039_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000040_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000041_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OffWaitTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OffWaitTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000042_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnOff attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnOff attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000043_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OnTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OnTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000044_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads OffWaitTime attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads OffWaitTime attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_OO_2_3_000045_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Off Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Off Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_PRS_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 2U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_1_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the global attribute constraints: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the global attribute constraints: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_1_1_000002_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:2U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"Write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_1_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 2U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_PRS_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute constraints: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute constraints: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_2_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id measuredValueArgument;
    measuredValueArgument = [NSNumber numberWithShort:0];
    [cluster writeAttributeMeasuredValueWithValue:measuredValueArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write the default values to mandatory attribute: MeasuredValue Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_2_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read the mandatory attribute constraints: MinMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute constraints: MinMeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_2_1_000004_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: MinMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minMeasuredValueArgument;
    minMeasuredValueArgument = [NSNumber numberWithShort:0];
    [cluster writeAttributeMinMeasuredValueWithValue:minMeasuredValueArgument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write the default values to mandatory attribute: MinMeasuredValue Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_2_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: MinMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: MinMeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_2_1_000006_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read the mandatory attribute constraints: MaxMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute constraints: MaxMeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_2_1_000007_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write the default values to mandatory attribute: MaxMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxMeasuredValueArgument;
    maxMeasuredValueArgument = [NSNumber numberWithShort:0];
    [cluster writeAttributeMaxMeasuredValueWithValue:maxMeasuredValueArgument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write the default values to mandatory attribute: MaxMeasuredValue Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PRS_2_1_000008_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads back mandatory attribute: MaxMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPressureMeasurement * cluster = [[CHIPTestPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads back mandatory attribute: MaxMeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_PCC_1_1_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:3U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_PCC_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MaxPressure"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxPressureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MaxPressure Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: EffectiveOperationMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEffectiveOperationModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: EffectiveOperationMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: EffectiveControlMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEffectiveControlModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: EffectiveControlMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: Capacity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCapacityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: Capacity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MaxPressure"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxPressureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MaxPressure Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: EffectiveOperationMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEffectiveOperationModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: EffectiveOperationMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_1_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: EffectiveControlMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEffectiveControlModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: EffectiveControlMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_1_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: Capacity"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCapacityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: Capacity Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_PCC_2_2_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write 1 to the OperationMode attribute to DUT: OperationMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    id operationModeArgument;
    operationModeArgument = [NSNumber numberWithUnsignedChar:1];
    [cluster writeAttributeOperationModeWithValue:operationModeArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write 1 to the OperationMode attribute to DUT: OperationMode Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_2_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write 2 to the OperationMode attribute to DUT: OperationMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    id operationModeArgument;
    operationModeArgument = [NSNumber numberWithUnsignedChar:2];
    [cluster writeAttributeOperationModeWithValue:operationModeArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write 2 to the OperationMode attribute to DUT: OperationMode Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_2_000002_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write 3 to the OperationMode attribute to DUT: OperationMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    id operationModeArgument;
    operationModeArgument = [NSNumber numberWithUnsignedChar:3];
    [cluster writeAttributeOperationModeWithValue:operationModeArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write 3 to the OperationMode attribute to DUT: OperationMode Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_PCC_2_3_000000_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write 0 to the OperationMode attribute to DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    id operationModeArgument;
    operationModeArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeOperationModeWithValue:operationModeArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write 0 to the OperationMode attribute to DUT Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_PCC_2_3_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads the attribute: EffectiveOperationMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestPumpConfigurationAndControl * cluster = [[CHIPTestPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEffectiveOperationModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads the attribute: EffectiveOperationMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_RH_1_1_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestRelativeHumidityMeasurement * cluster = [[CHIPTestRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:1U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_RH_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads constraints of attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestRelativeHumidityMeasurement * cluster = [[CHIPTestRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of attribute: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_RH_2_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads constraints of attribute: MinMeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestRelativeHumidityMeasurement * cluster = [[CHIPTestRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of attribute: MinMeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 9999);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_RH_2_2_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads MeasuredValue attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestRelativeHumidityMeasurement * cluster = [[CHIPTestRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads MeasuredValue attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_RH_2_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestRelativeHumidityMeasurement * cluster = [[CHIPTestRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                                       endpoint:1
                                                                                                          queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_TM_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTemperatureMeasurement * cluster = [[CHIPTestTemperatureMeasurement alloc] initWithDevice:device
                                                                                             endpoint:1
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 3U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TM_1_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTemperatureMeasurement * cluster = [[CHIPTestTemperatureMeasurement alloc] initWithDevice:device
                                                                                             endpoint:1
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:3U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TM_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTemperatureMeasurement * cluster = [[CHIPTestTemperatureMeasurement alloc] initWithDevice:device
                                                                                             endpoint:1
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 3U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_TM_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTemperatureMeasurement * cluster = [[CHIPTestTemperatureMeasurement alloc] initWithDevice:device
                                                                                             endpoint:1
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_TM_2_2_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads MeasuredValue attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTemperatureMeasurement * cluster = [[CHIPTestTemperatureMeasurement alloc] initWithDevice:device
                                                                                             endpoint:1
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads MeasuredValue attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TM_2_2_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read the mandatory attribute: MeasuredValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTemperatureMeasurement * cluster = [[CHIPTestTemperatureMeasurement alloc] initWithDevice:device
                                                                                             endpoint:1
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read the mandatory attribute: MeasuredValue Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_TSTAT_1_1_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:5U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_TSTAT_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: LocalTemperature"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLocalTemperatureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: LocalTemperature Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000001_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: AbsMinHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMinHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: AbsMinHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 700);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000002_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: AbsMinHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMinHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: AbsMinHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 700);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 3000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000003_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: AbsMinHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id absMinHeatSetpointLimitArgument;
    absMinHeatSetpointLimitArgument = [NSNumber numberWithShort:700];
    [cluster writeAttributeAbsMinHeatSetpointLimitWithValue:absMinHeatSetpointLimitArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                    @"AbsMinHeatSetpointLimit Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000004_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: AbsMinHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMinHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: AbsMinHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 700);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000005_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: AbsMaxHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMaxHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: AbsMaxHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000006_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: AbsMaxHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMaxHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: AbsMaxHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 700);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 3000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000007_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: AbsMaxHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id absMaxHeatSetpointLimitArgument;
    absMaxHeatSetpointLimitArgument = [NSNumber numberWithShort:3000];
    [cluster writeAttributeAbsMaxHeatSetpointLimitWithValue:absMaxHeatSetpointLimitArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                    @"AbsMaxHeatSetpointLimit Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000008_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: AbsMaxHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMaxHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: AbsMaxHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000009_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: AbsMinCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMinCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: AbsMinCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 1600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000010_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: AbsMinCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMinCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: AbsMinCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 1600);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 3200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000011_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: AbsMinCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id absMinCoolSetpointLimitArgument;
    absMinCoolSetpointLimitArgument = [NSNumber numberWithShort:1600];
    [cluster writeAttributeAbsMinCoolSetpointLimitWithValue:absMinCoolSetpointLimitArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                    @"AbsMinCoolSetpointLimit Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000012_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: AbsMinCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMinCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: AbsMinCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 1600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000013_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: AbsMaxCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMaxCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: AbsMaxCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000014_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: AbsMaxCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMaxCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: AbsMaxCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 1600);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 3200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000015_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: AbsMaxCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id absMaxCoolSetpointLimitArgument;
    absMaxCoolSetpointLimitArgument = [NSNumber numberWithShort:3200];
    [cluster writeAttributeAbsMaxCoolSetpointLimitWithValue:absMaxCoolSetpointLimitArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                    @"AbsMaxCoolSetpointLimit Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000016_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: AbsMaxCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAbsMaxCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: AbsMaxCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000017_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: OccupiedCoolingSetpoint"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedCoolingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: OccupiedCoolingSetpoint Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000018_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: OccupiedCoolingSetpoint"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedCoolingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: OccupiedCoolingSetpoint Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 1600);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 2600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000019_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: OccupiedCoolingSetpoint"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedCoolingSetpointArgument;
    occupiedCoolingSetpointArgument = [NSNumber numberWithShort:2600];
    [cluster writeAttributeOccupiedCoolingSetpointWithValue:occupiedCoolingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                    @"OccupiedCoolingSetpoint Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000020_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: OccupiedCoolingSetpoint"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedCoolingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: OccupiedCoolingSetpoint Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000021_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: OccupiedHeatingSetpoint"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedHeatingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: OccupiedHeatingSetpoint Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000022_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: OccupiedHeatingSetpoint"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedHeatingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: OccupiedHeatingSetpoint Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 700);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 2600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000023_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: OccupiedHeatingSetpoint"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedHeatingSetpointArgument;
    occupiedHeatingSetpointArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeOccupiedHeatingSetpointWithValue:occupiedHeatingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                    @"OccupiedHeatingSetpoint Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000024_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: OccupiedHeatingSetpoint"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedHeatingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: OccupiedHeatingSetpoint Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000025_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: MinHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: MinHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 700);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000026_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: MinHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: MinHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 700);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 3000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000027_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: MinHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minHeatSetpointLimitArgument;
    minHeatSetpointLimitArgument = [NSNumber numberWithShort:700];
    [cluster writeAttributeMinHeatSetpointLimitWithValue:minHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                 @"MinHeatSetpointLimit Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000028_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: MinHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: MinHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 700);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000029_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: MaxHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: MaxHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000030_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: MaxHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: MaxHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 700);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 3000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000031_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: MaxHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxHeatSetpointLimitArgument;
    maxHeatSetpointLimitArgument = [NSNumber numberWithShort:3000];
    [cluster writeAttributeMaxHeatSetpointLimitWithValue:maxHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                 @"MaxHeatSetpointLimit Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000032_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: MaxHeatSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: MaxHeatSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000033_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: MinCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: MinCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 1600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000034_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: MinCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: MinCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 1600);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 3200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000035_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: MinCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minCoolSetpointLimitArgument;
    minCoolSetpointLimitArgument = [NSNumber numberWithShort:1600];
    [cluster writeAttributeMinCoolSetpointLimitWithValue:minCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                 @"MinCoolSetpointLimit Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000036_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: MinCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: MinCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 1600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000037_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: MaxCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: MaxCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000038_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: MaxCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: MaxCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue shortValue], 1600);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue shortValue], 3200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000039_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: MaxCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxCoolSetpointLimitArgument;
    maxCoolSetpointLimitArgument = [NSNumber numberWithShort:3200];
    [cluster writeAttributeMaxCoolSetpointLimitWithValue:maxCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                 @"MaxCoolSetpointLimit Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000040_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: MaxCoolSetpointLimit"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: MaxCoolSetpointLimit Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000041_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads mandatory attributes from DUT: ControlSequenceOfOperation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeControlSequenceOfOperationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: ControlSequenceOfOperation Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 4);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000042_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: ControlSequenceOfOperation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeControlSequenceOfOperationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: ControlSequenceOfOperation Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 5);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000043_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:
                  @"Writes the respective default value to mandatory attributes to DUT: ControlSequenceOfOperation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id controlSequenceOfOperationArgument;
    controlSequenceOfOperationArgument = [NSNumber numberWithUnsignedChar:4];
    [cluster writeAttributeControlSequenceOfOperationWithValue:controlSequenceOfOperationArgument
                                             completionHandler:^(NSError * _Nullable err) {
                                                 NSLog(@"Writes the respective default value to mandatory attributes to DUT: "
                                                       @"ControlSequenceOfOperation Error: %@",
                                                     err);

                                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                                 [expectation fulfill];
                                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000044_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back mandatory attributes from DUT: ControlSequenceOfOperation"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeControlSequenceOfOperationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: ControlSequenceOfOperation Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 4);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000045_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads mandatory attributes from DUT: SystemMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSystemModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads mandatory attributes from DUT: SystemMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000046_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of mandatory attributes from DUT: SystemMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSystemModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of mandatory attributes from DUT: SystemMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 9);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000047_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the respective default value to mandatory attributes to DUT: SystemMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id systemModeArgument;
    systemModeArgument = [NSNumber numberWithUnsignedChar:1];
    [cluster
        writeAttributeSystemModeWithValue:systemModeArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Writes the respective default value to mandatory attributes to DUT: SystemMode Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000048_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back mandatory attributes from DUT: SystemMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSystemModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back mandatory attributes from DUT: SystemMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000049_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads optional attributes from DUT: MinSetpointDeadBand"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinSetpointDeadBandWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads optional attributes from DUT: MinSetpointDeadBand Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue charValue], 25);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000050_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of optional attributes from DUT: MinSetpointDeadBand"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinSetpointDeadBandWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of optional attributes from DUT: MinSetpointDeadBand Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue charValue], 25);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000051_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the respective default value to optional attributes to DUT: MinSetpointDeadBand"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minSetpointDeadBandArgument;
    minSetpointDeadBandArgument = [NSNumber numberWithChar:25];
    [cluster writeAttributeMinSetpointDeadBandWithValue:minSetpointDeadBandArgument
                                      completionHandler:^(NSError * _Nullable err) {
                                          NSLog(@"Writes the respective default value to optional attributes to DUT: "
                                                @"MinSetpointDeadBand Error: %@",
                                              err);

                                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                          [expectation fulfill];
                                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000052_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read back optional attributes from DUT: MinSetpointDeadBand"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinSetpointDeadBandWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back optional attributes from DUT: MinSetpointDeadBand Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue charValue], 25);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000053_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of optional attributes from DUT: StartOfWeek"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStartOfWeekWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of optional attributes from DUT: StartOfWeek Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 6);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000054_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the respective default value to optional attributes to DUT: StartOfWeek"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id startOfWeekArgument;
    startOfWeekArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeStartOfWeekWithValue:startOfWeekArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"Writes the respective default value to optional attributes to DUT: StartOfWeek Error: %@",
                                      err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000055_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back optional attributes from DUT: StartOfWeek"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStartOfWeekWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back optional attributes from DUT: StartOfWeek Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000056_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of optional attributes from DUT: NumberOfWeeklyTransitions"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNumberOfWeeklyTransitionsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of optional attributes from DUT: NumberOfWeeklyTransitions Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000057_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to optional attributes to DUT: NumberOfWeeklyTransitions"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id numberOfWeeklyTransitionsArgument;
    numberOfWeeklyTransitionsArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeNumberOfWeeklyTransitionsWithValue:numberOfWeeklyTransitionsArgument
                                            completionHandler:^(NSError * _Nullable err) {
                                                NSLog(@"Writes the respective default value to optional attributes to DUT: "
                                                      @"NumberOfWeeklyTransitions Error: %@",
                                                    err);

                                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                [expectation fulfill];
                                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000058_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads constraints of optional attributes from DUT: NumberOfDailyTransitions"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNumberOfDailyTransitionsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads constraints of optional attributes from DUT: NumberOfDailyTransitions Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_1_000059_WriteAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Writes the respective default value to optional attributes to DUT: NumberOfDailyTransitions"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id numberOfDailyTransitionsArgument;
    numberOfDailyTransitionsArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeNumberOfDailyTransitionsWithValue:numberOfDailyTransitionsArgument
                                           completionHandler:^(NSError * _Nullable err) {
                                               NSLog(@"Writes the respective default value to optional attributes to DUT: "
                                                     @"NumberOfDailyTransitions Error: %@",
                                                   err);

                                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                               [expectation fulfill];
                                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_TSTAT_2_2_000000_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:
                  @"Reads OccupiedCoolingSetpoint attribute from Server DUT and verifies that the value is within range"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedCoolingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(
            @"Reads OccupiedCoolingSetpoint attribute from Server DUT and verifies that the value is within range Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value back that is different but valid for OccupiedCoolingSetpoint attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedCoolingSetpointArgument;
    occupiedCoolingSetpointArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeOccupiedCoolingSetpointWithValue:occupiedCoolingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes a value back that is different but valid for OccupiedCoolingSetpoint "
                                                    @"attribute Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Reads it back again to confirm the successful write of OccupiedCoolingSetpoint attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedCoolingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads it back again to confirm the successful write of OccupiedCoolingSetpoint attribute Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000003_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of MinCoolSetpointLimit to OccupiedCoolingSetpoint attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedCoolingSetpointArgument;
    occupiedCoolingSetpointArgument = [NSNumber numberWithShort:1600];
    [cluster writeAttributeOccupiedCoolingSetpointWithValue:occupiedCoolingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the limit of MinCoolSetpointLimit to OccupiedCoolingSetpoint "
                                                    @"attribute Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000004_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of MaxCoolSetpointLimit to OccupiedCoolingSetpoint attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedCoolingSetpointArgument;
    occupiedCoolingSetpointArgument = [NSNumber numberWithShort:2600];
    [cluster writeAttributeOccupiedCoolingSetpointWithValue:occupiedCoolingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the limit of MaxCoolSetpointLimit to OccupiedCoolingSetpoint "
                                                    @"attribute Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000005_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:
                  @"Reads OccupiedHeatingSetpoint attribute from Server DUT and verifies that the value is within range"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedHeatingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(
            @"Reads OccupiedHeatingSetpoint attribute from Server DUT and verifies that the value is within range Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000006_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value back that is different but valid for OccupiedHeatingSetpoint attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedHeatingSetpointArgument;
    occupiedHeatingSetpointArgument = [NSNumber numberWithShort:2100];
    [cluster writeAttributeOccupiedHeatingSetpointWithValue:occupiedHeatingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes a value back that is different but valid for OccupiedHeatingSetpoint "
                                                    @"attribute Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"Reads it back again to confirm the successful write of OccupiedHeatingSetpoint attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupiedHeatingSetpointWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads it back again to confirm the successful write of OccupiedHeatingSetpoint attribute Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2100);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000008_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of MinHeatSetpointLimit to OccupiedHeatingSetpoint attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedHeatingSetpointArgument;
    occupiedHeatingSetpointArgument = [NSNumber numberWithShort:700];
    [cluster writeAttributeOccupiedHeatingSetpointWithValue:occupiedHeatingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the limit of MinHeatSetpointLimit to OccupiedHeatingSetpoint "
                                                    @"attribute Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000009_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of MaxHeatSetpointLimit to OccupiedHeatingSetpoint attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedHeatingSetpointArgument;
    occupiedHeatingSetpointArgument = [NSNumber numberWithShort:3000];
    [cluster writeAttributeOccupiedHeatingSetpointWithValue:occupiedHeatingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Writes the limit of MaxHeatSetpointLimit to OccupiedHeatingSetpoint "
                                                    @"attribute Error: %@",
                                                  err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000010_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:
                  @"Reads MinHeatSetpointLimit attribute from Server DUT and verifies that the value is within range"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads MinHeatSetpointLimit attribute from Server DUT and verifies that the value is within range Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 700);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000011_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value back that is different but valid for MinHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minHeatSetpointLimitArgument;
    minHeatSetpointLimitArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeMinHeatSetpointLimitWithValue:minHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes a value back that is different but valid for MinHeatSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000012_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads it back again to confirm the successful write of MinHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads it back again to confirm the successful write of MinHeatSetpointLimit attribute Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000013_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of AbsMinHeatSetpointLimit to MinHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minHeatSetpointLimitArgument;
    minHeatSetpointLimitArgument = [NSNumber numberWithShort:700];
    [cluster writeAttributeMinHeatSetpointLimitWithValue:minHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the limit of AbsMinHeatSetpointLimit to MinHeatSetpointLimit attribute "
                                                 @"Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000014_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of AbsMaxHeatSetpointLimit to MinHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minHeatSetpointLimitArgument;
    minHeatSetpointLimitArgument = [NSNumber numberWithShort:3000];
    [cluster writeAttributeMinHeatSetpointLimitWithValue:minHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the limit of AbsMaxHeatSetpointLimit to MinHeatSetpointLimit attribute "
                                                 @"Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000015_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:
                  @"Reads MaxHeatSetpointLimit attribute from Server DUT and verifies that the value is within range"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads MaxHeatSetpointLimit attribute from Server DUT and verifies that the value is within range Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000016_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value back that is different but valid for MaxHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxHeatSetpointLimitArgument;
    maxHeatSetpointLimitArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeMaxHeatSetpointLimitWithValue:maxHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes a value back that is different but valid for MaxHeatSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000017_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads it back again to confirm the successful write of MaxHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxHeatSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads it back again to confirm the successful write of MaxHeatSetpointLimit attribute Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000018_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of AbsMinHeatSetpointLimit to MaxHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxHeatSetpointLimitArgument;
    maxHeatSetpointLimitArgument = [NSNumber numberWithShort:700];
    [cluster writeAttributeMaxHeatSetpointLimitWithValue:maxHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the limit of AbsMinHeatSetpointLimit to MaxHeatSetpointLimit attribute "
                                                 @"Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000019_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of AbsMaxHeatSetpointLimit to MaxHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxHeatSetpointLimitArgument;
    maxHeatSetpointLimitArgument = [NSNumber numberWithShort:3000];
    [cluster writeAttributeMaxHeatSetpointLimitWithValue:maxHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the limit of AbsMaxHeatSetpointLimit to MaxHeatSetpointLimit attribute "
                                                 @"Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000020_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:
                  @"Reads MinCoolSetpointLimit attribute from Server DUT and verifies that the value is within range"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads MinCoolSetpointLimit attribute from Server DUT and verifies that the value is within range Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 1600);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000021_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value back that is different but valid for MinCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minCoolSetpointLimitArgument;
    minCoolSetpointLimitArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeMinCoolSetpointLimitWithValue:minCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes a value back that is different but valid for MinCoolSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000022_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads it back again to confirm the successful write of MinCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads it back again to confirm the successful write of MinCoolSetpointLimit attribute Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000023_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of AbsMinCoolSetpointLimit to MinCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minCoolSetpointLimitArgument;
    minCoolSetpointLimitArgument = [NSNumber numberWithShort:1600];
    [cluster writeAttributeMinCoolSetpointLimitWithValue:minCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the limit of AbsMinCoolSetpointLimit to MinCoolSetpointLimit attribute "
                                                 @"Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000024_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of MaxCoolSetpointLimit to MinCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minCoolSetpointLimitArgument;
    minCoolSetpointLimitArgument = [NSNumber numberWithShort:3200];
    [cluster
        writeAttributeMinCoolSetpointLimitWithValue:minCoolSetpointLimitArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Writes the limit of MaxCoolSetpointLimit to MinCoolSetpointLimit attribute Error: %@",
                                          err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000025_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:
                  @"Reads MaxCoolSetpointLimit attribute from Server DUT and verifies that the value is within range"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads MaxCoolSetpointLimit attribute from Server DUT and verifies that the value is within range Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 3200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000026_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value back that is different but valid for MaxCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxCoolSetpointLimitArgument;
    maxCoolSetpointLimitArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeMaxCoolSetpointLimitWithValue:maxCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes a value back that is different but valid for MaxCoolSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000027_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads it back again to confirm the successful write of MaxCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxCoolSetpointLimitWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads it back again to confirm the successful write of MaxCoolSetpointLimit attribute Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 2000);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000028_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of AbsMinCoolSetpointLimit to MaxCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxCoolSetpointLimitArgument;
    maxCoolSetpointLimitArgument = [NSNumber numberWithShort:1600];
    [cluster writeAttributeMaxCoolSetpointLimitWithValue:maxCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes the limit of AbsMinCoolSetpointLimit to MaxCoolSetpointLimit attribute "
                                                 @"Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000029_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes the limit of MaxCoolSetpointLimit to MaxCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxCoolSetpointLimitArgument;
    maxCoolSetpointLimitArgument = [NSNumber numberWithShort:3200];
    [cluster
        writeAttributeMaxCoolSetpointLimitWithValue:maxCoolSetpointLimitArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Writes the limit of MaxCoolSetpointLimit to MaxCoolSetpointLimit attribute Error: %@",
                                          err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000030_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes (sets back) the limit of MinHeatSetpointLimit to MinHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minHeatSetpointLimitArgument;
    minHeatSetpointLimitArgument = [NSNumber numberWithShort:700];
    [cluster writeAttributeMinHeatSetpointLimitWithValue:minHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes (sets back) the limit of MinHeatSetpointLimit to MinHeatSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000031_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes (sets back) the limit of MaxHeatSetpointLimit to MinHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minHeatSetpointLimitArgument;
    minHeatSetpointLimitArgument = [NSNumber numberWithShort:3000];
    [cluster writeAttributeMinHeatSetpointLimitWithValue:minHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes (sets back) the limit of MaxHeatSetpointLimit to MinHeatSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000032_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes (sets back) the limit of MinHeatSetpointLimit to MaxHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxHeatSetpointLimitArgument;
    maxHeatSetpointLimitArgument = [NSNumber numberWithShort:700];
    [cluster writeAttributeMaxHeatSetpointLimitWithValue:maxHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes (sets back) the limit of MinHeatSetpointLimit to MaxHeatSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000033_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes (sets back) the limit of MaxHeatSetpointLimit to MaxHeatSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxHeatSetpointLimitArgument;
    maxHeatSetpointLimitArgument = [NSNumber numberWithShort:3000];
    [cluster writeAttributeMaxHeatSetpointLimitWithValue:maxHeatSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes (sets back) the limit of MaxHeatSetpointLimit to MaxHeatSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000034_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes (sets back) the limit of MinCoolSetpointLimit to MinCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minCoolSetpointLimitArgument;
    minCoolSetpointLimitArgument = [NSNumber numberWithShort:1600];
    [cluster writeAttributeMinCoolSetpointLimitWithValue:minCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes (sets back) the limit of MinCoolSetpointLimit to MinCoolSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000035_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes (sets back) the limit of MaxCoolSetpointLimit to MinCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id minCoolSetpointLimitArgument;
    minCoolSetpointLimitArgument = [NSNumber numberWithShort:3200];
    [cluster writeAttributeMinCoolSetpointLimitWithValue:minCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes (sets back) the limit of MaxCoolSetpointLimit to MinCoolSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000036_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes (sets back) the limit of MinCoolSetpointLimit to MaxCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxCoolSetpointLimitArgument;
    maxCoolSetpointLimitArgument = [NSNumber numberWithShort:1600];
    [cluster writeAttributeMaxCoolSetpointLimitWithValue:maxCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes (sets back) the limit of MinCoolSetpointLimit to MaxCoolSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000037_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes (sets back) the limit of MaxCoolSetpointLimit to MaxCoolSetpointLimit attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id maxCoolSetpointLimitArgument;
    maxCoolSetpointLimitArgument = [NSNumber numberWithShort:3200];
    [cluster writeAttributeMaxCoolSetpointLimitWithValue:maxCoolSetpointLimitArgument
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"Writes (sets back) the limit of MaxCoolSetpointLimit to MaxCoolSetpointLimit "
                                                 @"attribute Error: %@",
                                               err);

                                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000038_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads ControlSequenceOfOperation from Server DUT and verifies that the value is valid"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeControlSequenceOfOperationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads ControlSequenceOfOperation from Server DUT and verifies that the value is valid Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 4);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000039_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write Attribute command for ControlSequenceOfOperation with a new valid value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id controlSequenceOfOperationArgument;
    controlSequenceOfOperationArgument = [NSNumber numberWithUnsignedChar:2];
    [cluster writeAttributeControlSequenceOfOperationWithValue:controlSequenceOfOperationArgument
                                             completionHandler:^(NSError * _Nullable err) {
                                                 NSLog(@"Write Attribute command for ControlSequenceOfOperation with a new valid "
                                                       @"value Error: %@",
                                                     err);

                                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                                 [expectation fulfill];
                                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000040_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read it back again to confirm the successful write"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeControlSequenceOfOperationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read it back again to confirm the successful write Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 2);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000041_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sets OccupiedHeatingSetpoint to default value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedHeatingSetpointArgument;
    occupiedHeatingSetpointArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeOccupiedHeatingSetpointWithValue:occupiedHeatingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Sets OccupiedHeatingSetpoint to default value Error: %@", err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000042_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sets OccupiedHeatingSetpoint to default value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedHeatingSetpointArgument;
    occupiedHeatingSetpointArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeOccupiedHeatingSetpointWithValue:occupiedHeatingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Sets OccupiedHeatingSetpoint to default value Error: %@", err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000043_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sets OccupiedCoolingSetpoint to default value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedCoolingSetpointArgument;
    occupiedCoolingSetpointArgument = [NSNumber numberWithShort:2600];
    [cluster writeAttributeOccupiedCoolingSetpointWithValue:occupiedCoolingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Sets OccupiedCoolingSetpoint to default value Error: %@", err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000044_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sets OccupiedCoolingSetpoint to default value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedCoolingSetpointArgument;
    occupiedCoolingSetpointArgument = [NSNumber numberWithShort:2600];
    [cluster writeAttributeOccupiedCoolingSetpointWithValue:occupiedCoolingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Sets OccupiedCoolingSetpoint to default value Error: %@", err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000045_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sets OccupiedCoolingSetpoint to default value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedCoolingSetpointArgument;
    occupiedCoolingSetpointArgument = [NSNumber numberWithShort:2600];
    [cluster writeAttributeOccupiedCoolingSetpointWithValue:occupiedCoolingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Sets OccupiedCoolingSetpoint to default value Error: %@", err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000046_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sets OccupiedHeatingSetpoint to default value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedHeatingSetpointArgument;
    occupiedHeatingSetpointArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeOccupiedHeatingSetpointWithValue:occupiedHeatingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Sets OccupiedHeatingSetpoint to default value Error: %@", err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000047_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sets OccupiedCoolingSetpoint to default value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedCoolingSetpointArgument;
    occupiedCoolingSetpointArgument = [NSNumber numberWithShort:2600];
    [cluster writeAttributeOccupiedCoolingSetpointWithValue:occupiedCoolingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Sets OccupiedCoolingSetpoint to default value Error: %@", err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSTAT_2_2_000048_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Sets OccupiedHeatingSetpoint to default value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostat * cluster = [[CHIPTestThermostat alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id occupiedHeatingSetpointArgument;
    occupiedHeatingSetpointArgument = [NSNumber numberWithShort:2000];
    [cluster writeAttributeOccupiedHeatingSetpointWithValue:occupiedHeatingSetpointArgument
                                          completionHandler:^(NSError * _Nullable err) {
                                              NSLog(@"Sets OccupiedHeatingSetpoint to default value Error: %@", err);

                                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                              [expectation fulfill];
                                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_TSUIC_1_1_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:2U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_TSUIC_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: TemperatureDisplayMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTemperatureDisplayModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: TemperatureDisplayMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: TemperatureDisplayMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTemperatureDisplayModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: TemperatureDisplayMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000002_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"write to the mandatory attribute: TemperatureDisplayMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id temperatureDisplayModeArgument;
    temperatureDisplayModeArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeTemperatureDisplayModeWithValue:temperatureDisplayModeArgument
                                         completionHandler:^(NSError * _Nullable err) {
                                             NSLog(@"write to the mandatory attribute: TemperatureDisplayMode Error: %@", err);

                                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                             [expectation fulfill];
                                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: TemperatureDisplayMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTemperatureDisplayModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: TemperatureDisplayMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: TemperatureDisplayMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTemperatureDisplayModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: TemperatureDisplayMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: KeypadLockout"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeKeypadLockoutWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: KeypadLockout Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: KeypadLockout"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeKeypadLockoutWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: KeypadLockout Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000007_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"write to the mandatory attribute: KeypadLockout"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id keypadLockoutArgument;
    keypadLockoutArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeKeypadLockoutWithValue:keypadLockoutArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"write to the mandatory attribute: KeypadLockout Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000008_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: KeypadLockout"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeKeypadLockoutWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: KeypadLockout Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000009_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the mandatory attribute: KeypadLockout"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeKeypadLockoutWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the mandatory attribute: KeypadLockout Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000010_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"read the optional attribute: ScheduleProgrammingVisibility"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeScheduleProgrammingVisibilityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"read the optional attribute: ScheduleProgrammingVisibility Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertEqual([actualValue unsignedCharValue], 0);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000011_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"read the optional attribute: ScheduleProgrammingVisibility"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeScheduleProgrammingVisibilityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"read the optional attribute: ScheduleProgrammingVisibility Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000012_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write to the mandatory attribute: ScheduleProgrammingVisibility"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id scheduleProgrammingVisibilityArgument;
    scheduleProgrammingVisibilityArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster
        writeAttributeScheduleProgrammingVisibilityWithValue:scheduleProgrammingVisibilityArgument
                                           completionHandler:^(NSError * _Nullable err) {
                                               NSLog(@"write to the mandatory attribute: ScheduleProgrammingVisibility Error: %@",
                                                   err);

                                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                               [expectation fulfill];
                                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000013_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"read the optional attribute: ScheduleProgrammingVisibility"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeScheduleProgrammingVisibilityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"read the optional attribute: ScheduleProgrammingVisibility Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertEqual([actualValue unsignedCharValue], 0);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_1_000014_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"read the optional attribute: ScheduleProgrammingVisibility"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeScheduleProgrammingVisibilityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"read the optional attribute: ScheduleProgrammingVisibility Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_TSUIC_2_2_000000_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value of 0 to TemperatureDisplayMode attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id temperatureDisplayModeArgument;
    temperatureDisplayModeArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster
        writeAttributeTemperatureDisplayModeWithValue:temperatureDisplayModeArgument
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"Writes a value of 0 to TemperatureDisplayMode attribute of DUT Error: %@", err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_2_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value of 1 to TemperatureDisplayMode attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id temperatureDisplayModeArgument;
    temperatureDisplayModeArgument = [NSNumber numberWithUnsignedChar:1];
    [cluster
        writeAttributeTemperatureDisplayModeWithValue:temperatureDisplayModeArgument
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"Writes a value of 1 to TemperatureDisplayMode attribute of DUT Error: %@", err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_2_000002_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Writes a value of 0 to KeypadLockout attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id keypadLockoutArgument;
    keypadLockoutArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeKeypadLockoutWithValue:keypadLockoutArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Writes a value of 0 to KeypadLockout attribute of DUT Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_2_000003_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Writes a value of 1 to KeypadLockout attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id keypadLockoutArgument;
    keypadLockoutArgument = [NSNumber numberWithUnsignedChar:1];
    [cluster writeAttributeKeypadLockoutWithValue:keypadLockoutArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Writes a value of 1 to KeypadLockout attribute of DUT Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_2_000004_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Writes a value of 2 to KeypadLockout attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id keypadLockoutArgument;
    keypadLockoutArgument = [NSNumber numberWithUnsignedChar:2];
    [cluster writeAttributeKeypadLockoutWithValue:keypadLockoutArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Writes a value of 2 to KeypadLockout attribute of DUT Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_2_000005_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Writes a value of 3 to KeypadLockout attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id keypadLockoutArgument;
    keypadLockoutArgument = [NSNumber numberWithUnsignedChar:3];
    [cluster writeAttributeKeypadLockoutWithValue:keypadLockoutArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Writes a value of 3 to KeypadLockout attribute of DUT Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_2_000006_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Writes a value of 4 to KeypadLockout attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id keypadLockoutArgument;
    keypadLockoutArgument = [NSNumber numberWithUnsignedChar:4];
    [cluster writeAttributeKeypadLockoutWithValue:keypadLockoutArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Writes a value of 4 to KeypadLockout attribute of DUT Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_2_000007_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Writes a value of 5 to KeypadLockout attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id keypadLockoutArgument;
    keypadLockoutArgument = [NSNumber numberWithUnsignedChar:5];
    [cluster writeAttributeKeypadLockoutWithValue:keypadLockoutArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Writes a value of 5 to KeypadLockout attribute of DUT Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_2_000008_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value of 0 to ScheduleProgrammingVisibility attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id scheduleProgrammingVisibilityArgument;
    scheduleProgrammingVisibilityArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeScheduleProgrammingVisibilityWithValue:scheduleProgrammingVisibilityArgument
                                                completionHandler:^(NSError * _Nullable err) {
                                                    NSLog(@"Writes a value of 0 to ScheduleProgrammingVisibility attribute of DUT "
                                                          @"Error: %@",
                                                        err);

                                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                                    [expectation fulfill];
                                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_TSUIC_2_2_000009_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Writes a value of 1 to ScheduleProgrammingVisibility attribute of DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThermostatUserInterfaceConfiguration * cluster =
        [[CHIPTestThermostatUserInterfaceConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id scheduleProgrammingVisibilityArgument;
    scheduleProgrammingVisibilityArgument = [NSNumber numberWithUnsignedChar:1];
    [cluster writeAttributeScheduleProgrammingVisibilityWithValue:scheduleProgrammingVisibilityArgument
                                                completionHandler:^(NSError * _Nullable err) {
                                                    NSLog(@"Writes a value of 1 to ScheduleProgrammingVisibility attribute of DUT "
                                                          @"Error: %@",
                                                        err);

                                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                                    [expectation fulfill];
                                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_DIAGTH_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThreadNetworkDiagnostics * cluster = [[CHIPTestThreadNetworkDiagnostics alloc] initWithDevice:device
                                                                                                 endpoint:0
                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 1U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DIAGTH_1_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"write the default values to mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThreadNetworkDiagnostics * cluster = [[CHIPTestThreadNetworkDiagnostics alloc] initWithDevice:device
                                                                                                 endpoint:0
                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:1U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"write the default values to mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DIAGTH_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"reads back global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestThreadNetworkDiagnostics * cluster = [[CHIPTestThreadNetworkDiagnostics alloc] initWithDevice:device
                                                                                                 endpoint:0
                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"reads back global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 1U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_WNCV_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"2: read the global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue unsignedShortValue], 5);
        }
        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 200);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_1_1_000001_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO mandatory global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id clusterRevisionArgument;
    clusterRevisionArgument = [NSNumber numberWithUnsignedShort:201U];
    [cluster
        writeAttributeClusterRevisionWithValue:clusterRevisionArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"3a: write a value into the RO mandatory global attribute: ClusterRevision Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"3b: reads back global attribute: ClusterRevision"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back global attribute: ClusterRevision Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedShortValue], 201);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_1_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"2: read the global attribute: FeatureMap"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the global attribute: FeatureMap Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedIntValue], 32768);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_1_1_000004_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write the default value to optional global attribute: FeatureMap"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id featureMapArgument;
    featureMapArgument = [NSNumber numberWithUnsignedInt:32769UL];
    [cluster writeAttributeFeatureMapWithValue:featureMapArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"3a: write the default value to optional global attribute: FeatureMap Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_1_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"3b: reads back global attribute: FeatureMap"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back global attribute: FeatureMap Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedIntValue], 32769);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_WNCV_2_1_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"2: read the RO mandatory attribute default: Type"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the RO mandatory attribute default: Type Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 9);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000001_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"3a: write a value into the RO mandatory attribute: Type"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id typeArgument;
    typeArgument = [NSNumber numberWithUnsignedChar:250];
    [cluster writeAttributeTypeWithValue:typeArgument
                       completionHandler:^(NSError * _Nullable err) {
                           NSLog(@"3a: write a value into the RO mandatory attribute: Type Error: %@", err);

                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                           [expectation fulfill];
                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"3b: reads back the RO mandatory attribute: Type"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back the RO mandatory attribute: Type Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedCharValue], 250);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"2: read the RO mandatory attribute default: ConfigStatus"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeConfigStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the RO mandatory attribute default: ConfigStatus Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 63);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000004_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO mandatory attribute: ConfigStatus"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id configStatusArgument;
    configStatusArgument = [NSNumber numberWithUnsignedChar:128];
    [cluster writeAttributeConfigStatusWithValue:configStatusArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"3a: write a value into the RO mandatory attribute: ConfigStatus Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"3b: reads back the RO mandatory attribute: ConfigStatus"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeConfigStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back the RO mandatory attribute: ConfigStatus Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedCharValue], 128);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000006_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO mandatory attribute default: OperationalStatus"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOperationalStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the RO mandatory attribute default: OperationalStatus Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 63);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000007_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO mandatory attribute: OperationalStatus"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id operationalStatusArgument;
    operationalStatusArgument = [NSNumber numberWithUnsignedChar:128];
    [cluster
        writeAttributeOperationalStatusWithValue:operationalStatusArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"3a: write a value into the RO mandatory attribute: OperationalStatus Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000008_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO mandatory attribute: OperationalStatus"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOperationalStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back the RO mandatory attribute: OperationalStatus Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedCharValue], 128);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000009_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO mandatory attribute default: EndProductType"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEndProductTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the RO mandatory attribute default: EndProductType Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 23);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000010_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO mandatory attribute: EndProductType"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id endProductTypeArgument;
    endProductTypeArgument = [NSNumber numberWithUnsignedChar:250];
    [cluster writeAttributeEndProductTypeWithValue:endProductTypeArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"3a: write a value into the RO mandatory attribute: EndProductType Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000011_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO mandatory attribute: EndProductType"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEndProductTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back the RO mandatory attribute: EndProductType Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedCharValue], 250);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000012_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"2: read the RW mandatory attribute default: Mode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the RW mandatory attribute default: Mode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 15);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000013_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"3a: write a value into the RW mandatory attribute:: Mode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id modeArgument;
    modeArgument = [NSNumber numberWithUnsignedChar:8];
    [cluster writeAttributeModeWithValue:modeArgument
                       completionHandler:^(NSError * _Nullable err) {
                           NSLog(@"3a: write a value into the RW mandatory attribute:: Mode Error: %@", err);

                           XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                           [expectation fulfill];
                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000014_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"3b: reads back the RW mandatory attribute: Mode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back the RW mandatory attribute: Mode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 8);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000015_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO optional attribute default: TargetPositionLiftPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeTargetPositionLiftPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"2: read the RO optional attribute default: TargetPositionLiftPercent100ths Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 10000);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000016_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO optional attribute: TargetPositionLiftPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id targetPositionLiftPercent100thsArgument;
    targetPositionLiftPercent100thsArgument = [NSNumber numberWithUnsignedShort:20000U];
    [cluster writeAttributeTargetPositionLiftPercent100thsWithValue:targetPositionLiftPercent100thsArgument
                                                  completionHandler:^(NSError * _Nullable err) {
                                                      NSLog(@"3a: write a value into the RO optional attribute: "
                                                            @"TargetPositionLiftPercent100ths Error: %@",
                                                          err);

                                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                      [expectation fulfill];
                                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000017_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO optional attribute: TargetPositionLiftPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeTargetPositionLiftPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"3b: reads back the RO optional attribute: TargetPositionLiftPercent100ths Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertNotEqual([actualValue unsignedShortValue], 20000);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000018_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO optional attribute default: TargetPositionTiltPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeTargetPositionTiltPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"2: read the RO optional attribute default: TargetPositionTiltPercent100ths Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 10000);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000019_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO optional attribute: TargetPositionTiltPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id targetPositionTiltPercent100thsArgument;
    targetPositionTiltPercent100thsArgument = [NSNumber numberWithUnsignedShort:20000U];
    [cluster writeAttributeTargetPositionTiltPercent100thsWithValue:targetPositionTiltPercent100thsArgument
                                                  completionHandler:^(NSError * _Nullable err) {
                                                      NSLog(@"3a: write a value into the RO optional attribute: "
                                                            @"TargetPositionTiltPercent100ths Error: %@",
                                                          err);

                                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                      [expectation fulfill];
                                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000020_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO optional attribute: TargetPositionTiltPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeTargetPositionTiltPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"3b: reads back the RO optional attribute: TargetPositionTiltPercent100ths Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertNotEqual([actualValue unsignedShortValue], 20000);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000021_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO optional attribute default: CurrentPositionLiftPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionLiftPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"2: read the RO optional attribute default: CurrentPositionLiftPercent100ths Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 10000);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000022_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO optional attribute: CurrentPositionLiftPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentPositionLiftPercent100thsArgument;
    currentPositionLiftPercent100thsArgument = [NSNumber numberWithUnsignedShort:20000U];
    [cluster writeAttributeCurrentPositionLiftPercent100thsWithValue:currentPositionLiftPercent100thsArgument
                                                   completionHandler:^(NSError * _Nullable err) {
                                                       NSLog(@"3a: write a value into the RO optional attribute: "
                                                             @"CurrentPositionLiftPercent100ths Error: %@",
                                                           err);

                                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                       [expectation fulfill];
                                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000023_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO optional attribute: CurrentPositionLiftPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionLiftPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"3b: reads back the RO optional attribute: CurrentPositionLiftPercent100ths Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertNotEqual([actualValue unsignedShortValue], 20000);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000024_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO optional attribute default: CurrentPositionTiltPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionTiltPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"2: read the RO optional attribute default: CurrentPositionTiltPercent100ths Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 10000);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000025_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO optional attribute: CurrentPositionTiltPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentPositionTiltPercent100thsArgument;
    currentPositionTiltPercent100thsArgument = [NSNumber numberWithUnsignedShort:20000U];
    [cluster writeAttributeCurrentPositionTiltPercent100thsWithValue:currentPositionTiltPercent100thsArgument
                                                   completionHandler:^(NSError * _Nullable err) {
                                                       NSLog(@"3a: write a value into the RO optional attribute: "
                                                             @"CurrentPositionTiltPercent100ths Error: %@",
                                                           err);

                                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                       [expectation fulfill];
                                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000026_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO optional attribute: CurrentPositionTiltPercent100ths"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionTiltPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"3b: reads back the RO optional attribute: CurrentPositionTiltPercent100ths Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertNotEqual([actualValue unsignedShortValue], 20000);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000027_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO optional attribute default: InstalledOpenLimitLift"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledOpenLimitLiftWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the RO optional attribute default: InstalledOpenLimitLift Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000028_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO optional attribute: InstalledOpenLimitLift"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id installedOpenLimitLiftArgument;
    installedOpenLimitLiftArgument = [NSNumber numberWithUnsignedShort:255U];
    [cluster
        writeAttributeInstalledOpenLimitLiftWithValue:installedOpenLimitLiftArgument
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"3a: write a value into the RO optional attribute: InstalledOpenLimitLift Error: %@",
                                            err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000029_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO optional attribute: InstalledOpenLimitLift"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledOpenLimitLiftWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back the RO optional attribute: InstalledOpenLimitLift Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000030_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO optional attribute default: InstalledClosedLimitLift"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledClosedLimitLiftWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the RO optional attribute default: InstalledClosedLimitLift Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000031_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO optional attribute: InstalledClosedLimitLift"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id installedClosedLimitLiftArgument;
    installedClosedLimitLiftArgument = [NSNumber numberWithUnsignedShort:255U];
    [cluster writeAttributeInstalledClosedLimitLiftWithValue:installedClosedLimitLiftArgument
                                           completionHandler:^(NSError * _Nullable err) {
                                               NSLog(@"3a: write a value into the RO optional attribute: InstalledClosedLimitLift "
                                                     @"Error: %@",
                                                   err);

                                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                               [expectation fulfill];
                                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000032_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO optional attribute: InstalledClosedLimitLift"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledClosedLimitLiftWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back the RO optional attribute: InstalledClosedLimitLift Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000033_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO optional attribute default: InstalledOpenLimitTilt"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledOpenLimitTiltWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the RO optional attribute default: InstalledOpenLimitTilt Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000034_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO optional attribute: InstalledOpenLimitTilt"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id installedOpenLimitTiltArgument;
    installedOpenLimitTiltArgument = [NSNumber numberWithUnsignedShort:255U];
    [cluster
        writeAttributeInstalledOpenLimitTiltWithValue:installedOpenLimitTiltArgument
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"3a: write a value into the RO optional attribute: InstalledOpenLimitTilt Error: %@",
                                            err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000035_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO optional attribute: InstalledOpenLimitTilt"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledOpenLimitTiltWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back the RO optional attribute: InstalledOpenLimitTilt Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000036_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"2: read the RO optional attribute default: InstalledClosedLimitTilt"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledClosedLimitTiltWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2: read the RO optional attribute default: InstalledClosedLimitTilt Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000037_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3a: write a value into the RO optional attribute: InstalledClosedLimitTilt"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id installedClosedLimitTiltArgument;
    installedClosedLimitTiltArgument = [NSNumber numberWithUnsignedShort:255U];
    [cluster writeAttributeInstalledClosedLimitTiltWithValue:installedClosedLimitTiltArgument
                                           completionHandler:^(NSError * _Nullable err) {
                                               NSLog(@"3a: write a value into the RO optional attribute: InstalledClosedLimitTilt "
                                                     @"Error: %@",
                                                   err);

                                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                               [expectation fulfill];
                                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000038_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"3b: reads back the RO optional attribute: InstalledClosedLimitTilt"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledClosedLimitTiltWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3b: reads back the RO optional attribute: InstalledClosedLimitTilt Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000039_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"4: read the RO mandatory attribute default: SafetyStatus"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSafetyStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"4: read the RO mandatory attribute default: SafetyStatus Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 2047);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000040_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"5a: write a value into the RO mandatory attribute: SafetyStatus"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id safetyStatusArgument;
    safetyStatusArgument = [NSNumber numberWithUnsignedShort:4096U];
    [cluster writeAttributeSafetyStatusWithValue:safetyStatusArgument
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"5a: write a value into the RO mandatory attribute: SafetyStatus Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000041_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"5b: reads back the RO mandatory attribute: SafetyStatus"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSafetyStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"5b: reads back the RO mandatory attribute: SafetyStatus Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedShortValue], 4096);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000042_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"4: read the RO optional attribute default: CurrentPositionLift"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentPositionLiftWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"4: read the RO optional attribute default: CurrentPositionLift Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000043_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"5a: write a value into the RO optional attribute: CurrentPositionLift"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentPositionLiftArgument;
    currentPositionLiftArgument = [NSNumber numberWithUnsignedShort:255U];
    [cluster
        writeAttributeCurrentPositionLiftWithValue:currentPositionLiftArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"5a: write a value into the RO optional attribute: CurrentPositionLift Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000044_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"5b: reads back the RO optional attribute: CurrentPositionLift"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentPositionLiftWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"5b: reads back the RO optional attribute: CurrentPositionLift Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000045_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"4: read the RO optional attribute default: CurrentPositionTilt"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentPositionTiltWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"4: read the RO optional attribute default: CurrentPositionTilt Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000046_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"5a: write a value into the RO optional attribute: CurrentPositionTilt"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentPositionTiltArgument;
    currentPositionTiltArgument = [NSNumber numberWithUnsignedShort:255U];
    [cluster
        writeAttributeCurrentPositionTiltWithValue:currentPositionTiltArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"5a: write a value into the RO optional attribute: CurrentPositionTilt Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000047_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"5b: reads back the RO optional attribute: CurrentPositionTilt"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentPositionTiltWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"5b: reads back the RO optional attribute: CurrentPositionTilt Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedShortValue], 65535);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000048_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"4: read the RO optional attribute default: CurrentPositionLiftPercentage"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionLiftPercentageWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"4: read the RO optional attribute default: CurrentPositionLiftPercentage Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 100);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000049_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"5a: write a value into the RO optional attribute: CurrentPositionLiftPercentage"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentPositionLiftPercentageArgument;
    currentPositionLiftPercentageArgument = [NSNumber numberWithUnsignedChar:200];
    [cluster writeAttributeCurrentPositionLiftPercentageWithValue:currentPositionLiftPercentageArgument
                                                completionHandler:^(NSError * _Nullable err) {
                                                    NSLog(@"5a: write a value into the RO optional attribute: "
                                                          @"CurrentPositionLiftPercentage Error: %@",
                                                        err);

                                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                    [expectation fulfill];
                                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000050_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"5b: reads back the RO optional attribute: CurrentPositionLiftPercentage"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionLiftPercentageWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"5b: reads back the RO optional attribute: CurrentPositionLiftPercentage Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertNotEqual([actualValue unsignedCharValue], 200);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000051_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"4: read the RO optional attribute default: CurrentPositionTiltPercentage"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionTiltPercentageWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"4: read the RO optional attribute default: CurrentPositionTiltPercentage Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 100);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000052_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"5a: write a value into the RO optional attribute: CurrentPositionTiltPercentage"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id currentPositionTiltPercentageArgument;
    currentPositionTiltPercentageArgument = [NSNumber numberWithUnsignedChar:200];
    [cluster writeAttributeCurrentPositionTiltPercentageWithValue:currentPositionTiltPercentageArgument
                                                completionHandler:^(NSError * _Nullable err) {
                                                    NSLog(@"5a: write a value into the RO optional attribute: "
                                                          @"CurrentPositionTiltPercentage Error: %@",
                                                        err);

                                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                                    [expectation fulfill];
                                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_1_000053_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"5b: reads back the RO optional attribute: CurrentPositionTiltPercentage"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionTiltPercentageWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"5b: reads back the RO optional attribute: CurrentPositionTiltPercentage Error: %@", err);

            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

            {
                id actualValue = value;
                XCTAssertNotEqual([actualValue unsignedCharValue], 200);
            }

            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_WNCV_2_4_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads Type attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads Type attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_4_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads Type attribute constraints"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads Type attribute constraints Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 9);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_WNCV_2_5_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads EndProductType attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEndProductTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads EndProductType attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_2_5_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Reads EndProductType attribute constraints from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEndProductTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads EndProductType attribute constraints from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedCharValue], 23);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_WNCV_3_1_000000_DownOrClose
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"1a: TH adjusts the the DUT to a non-open position"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster downOrCloseWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"1a: TH adjusts the the DUT to a non-open position Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_3_1_000001_UpOrOpen
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"2a: TH sends UpOrOpen command to DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster upOrOpenWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"2a: TH sends UpOrOpen command to DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_3_1_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"3a: TH reads OperationalStatus attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOperationalStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3a: TH reads OperationalStatus attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_WNCV_3_2_000000_UpOrOpen
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"1a: TH adjusts the the DUT to a non-closed position"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster upOrOpenWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"1a: TH adjusts the the DUT to a non-closed position Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_3_2_000001_DownOrClose
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"2a: TH sends DownOrClose command to DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster downOrCloseWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"2a: TH sends DownOrClose command to DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_3_2_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"3a: TH reads OperationalStatus attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOperationalStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"3a: TH reads OperationalStatus attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_WNCV_3_3_000000_UpOrOpen
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"1a: TH adjusts the the DUT to a non-open position"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster upOrOpenWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"1a: TH adjusts the the DUT to a non-open position Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_3_3_000001_StopMotion
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"2a: TH sends StopMotion command to DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster stopMotionWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"2a: TH sends StopMotion command to DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_WNCV_3_3_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"2b: TH reads OperationalStatus attribute from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestWindowCovering * cluster = [[CHIPTestWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOperationalStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"2b: TH reads OperationalStatus attribute from DUT Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestCluster_000000_Test
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster testWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Test Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000001_TestNotHandled
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Not Handled Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster testNotHandledWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Test Not Handled Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000002_TestSpecific
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Specific Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster testSpecificWithCompletionHandler:^(
        CHIPTestClusterClusterTestSpecificResponseParams * _Nullable values, NSError * _Nullable err) {
        NSLog(@"Send Test Specific Command Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = values.returnValue;
            XCTAssertEqual([actualValue unsignedCharValue], 7);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000003_TestAddArguments
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Add Arguments Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestAddArgumentsParams alloc] init];
    params.arg1 = [NSNumber numberWithUnsignedChar:3];
    params.arg2 = [NSNumber numberWithUnsignedChar:17];
    [cluster testAddArgumentsWithParams:params
                      completionHandler:^(
                          CHIPTestClusterClusterTestAddArgumentsResponseParams * _Nullable values, NSError * _Nullable err) {
                          NSLog(@"Send Test Add Arguments Command Error: %@", err);

                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                          {
                              id actualValue = values.returnValue;
                              XCTAssertEqual([actualValue unsignedCharValue], 20);
                          }

                          [expectation fulfill];
                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000004_TestAddArguments
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send failing Test Add Arguments Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestAddArgumentsParams alloc] init];
    params.arg1 = [NSNumber numberWithUnsignedChar:250];
    params.arg2 = [NSNumber numberWithUnsignedChar:6];
    [cluster testAddArgumentsWithParams:params
                      completionHandler:^(
                          CHIPTestClusterClusterTestAddArgumentsResponseParams * _Nullable values, NSError * _Nullable err) {
                          NSLog(@"Send failing Test Add Arguments Command Error: %@", err);

                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                          [expectation fulfill];
                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BOOLEAN Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBooleanWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BOOLEAN Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000006_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BOOLEAN True"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id booleanArgument;
    booleanArgument = [NSNumber numberWithBool:1];
    [cluster writeAttributeBooleanWithValue:booleanArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute BOOLEAN True Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BOOLEAN True"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBooleanWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BOOLEAN True Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000008_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BOOLEAN False"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id booleanArgument;
    booleanArgument = [NSNumber numberWithBool:0];
    [cluster writeAttributeBooleanWithValue:booleanArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute BOOLEAN False Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000009_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BOOLEAN False"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBooleanWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BOOLEAN False Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP8 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP8 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000011_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP8 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap8Argument;
    bitmap8Argument = [NSNumber numberWithUnsignedChar:255];
    [cluster writeAttributeBitmap8WithValue:bitmap8Argument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute BITMAP8 Max Value Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000012_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP8 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP8 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 255);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000013_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP8 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap8Argument;
    bitmap8Argument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeBitmap8WithValue:bitmap8Argument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute BITMAP8 Min Value Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000014_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP8 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP8 Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000015_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP16 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP16 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000016_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP16 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap16Argument;
    bitmap16Argument = [NSNumber numberWithUnsignedShort:65535U];
    [cluster writeAttributeBitmap16WithValue:bitmap16Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP16 Max Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000017_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP16 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP16 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 65535U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000018_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP16 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap16Argument;
    bitmap16Argument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeBitmap16WithValue:bitmap16Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP16 Min Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000019_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP16 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP16 Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000020_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP32 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap32WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP32 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000021_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP32 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap32Argument;
    bitmap32Argument = [NSNumber numberWithUnsignedInt:4294967295UL];
    [cluster writeAttributeBitmap32WithValue:bitmap32Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP32 Max Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000022_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP32 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap32WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP32 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 4294967295UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000023_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP32 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap32Argument;
    bitmap32Argument = [NSNumber numberWithUnsignedInt:0UL];
    [cluster writeAttributeBitmap32WithValue:bitmap32Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP32 Min Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000024_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP32 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap32WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP32 Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000025_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP64 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap64WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP64 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 0ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000026_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP64 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap64Argument;
    bitmap64Argument = [NSNumber numberWithUnsignedLongLong:18446744073709551615ULL];
    [cluster writeAttributeBitmap64WithValue:bitmap64Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP64 Max Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000027_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP64 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap64WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP64 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 18446744073709551615ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000028_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP64 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap64Argument;
    bitmap64Argument = [NSNumber numberWithUnsignedLongLong:0ULL];
    [cluster writeAttributeBitmap64WithValue:bitmap64Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP64 Min Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000029_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP64 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap64WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP64 Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 0ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000030_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000031_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT8U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int8uArgument;
    int8uArgument = [NSNumber numberWithUnsignedChar:255];
    [cluster writeAttributeInt8uWithValue:int8uArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute INT8U Max Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000032_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8U Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 255);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000033_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT8U Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int8uArgument;
    int8uArgument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeInt8uWithValue:int8uArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute INT8U Min Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000034_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8U Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8U Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000035_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000036_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT16U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int16uArgument;
    int16uArgument = [NSNumber numberWithUnsignedShort:65535U];
    [cluster writeAttributeInt16uWithValue:int16uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT16U Max Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000037_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16U Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 65535U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000038_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT16U Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int16uArgument;
    int16uArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeInt16uWithValue:int16uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT16U Min Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000039_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16U Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16U Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000040_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000041_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32uArgument;
    int32uArgument = [NSNumber numberWithUnsignedInt:4294967295UL];
    [cluster writeAttributeInt32uWithValue:int32uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32U Max Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000042_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32U Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 4294967295UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000043_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32U Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32uArgument;
    int32uArgument = [NSNumber numberWithUnsignedInt:0UL];
    [cluster writeAttributeInt32uWithValue:int32uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32U Min Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000044_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32U Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32U Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000045_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 0ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000046_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT64U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int64uArgument;
    int64uArgument = [NSNumber numberWithUnsignedLongLong:18446744073709551615ULL];
    [cluster writeAttributeInt64uWithValue:int64uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT64U Max Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000047_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64U Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 18446744073709551615ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000048_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT64U Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int64uArgument;
    int64uArgument = [NSNumber numberWithUnsignedLongLong:0ULL];
    [cluster writeAttributeInt64uWithValue:int64uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT64U Min Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000049_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64U Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64U Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 0ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000050_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue charValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000051_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT8S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int8sArgument;
    int8sArgument = [NSNumber numberWithChar:127];
    [cluster writeAttributeInt8sWithValue:int8sArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute INT8S Max Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000052_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8S Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue charValue], 127);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000053_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT8S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int8sArgument;
    int8sArgument = [NSNumber numberWithChar:-128];
    [cluster writeAttributeInt8sWithValue:int8sArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute INT8S Min Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000054_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8S Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue charValue], -128);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000055_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT8S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int8sArgument;
    int8sArgument = [NSNumber numberWithChar:0];
    [cluster writeAttributeInt8sWithValue:int8sArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute INT8S Default Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000056_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue charValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000057_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000058_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT16S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int16sArgument;
    int16sArgument = [NSNumber numberWithShort:32767];
    [cluster writeAttributeInt16sWithValue:int16sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT16S Max Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000059_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16S Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 32767);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000060_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT16S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int16sArgument;
    int16sArgument = [NSNumber numberWithShort:-32768];
    [cluster writeAttributeInt16sWithValue:int16sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT16S Min Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000061_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16S Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], -32768);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000062_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT16S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int16sArgument;
    int16sArgument = [NSNumber numberWithShort:0];
    [cluster writeAttributeInt16sWithValue:int16sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT16S Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000063_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000064_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue intValue], 0L);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000065_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32sArgument;
    int32sArgument = [NSNumber numberWithInt:2147483647L];
    [cluster writeAttributeInt32sWithValue:int32sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32S Max Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000066_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32S Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue intValue], 2147483647L);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000067_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32sArgument;
    int32sArgument = [NSNumber numberWithInt:-2147483648L];
    [cluster writeAttributeInt32sWithValue:int32sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32S Min Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000068_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32S Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue intValue], -2147483648L);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000069_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32sArgument;
    int32sArgument = [NSNumber numberWithInt:0L];
    [cluster writeAttributeInt32sWithValue:int32sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32S Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000070_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue intValue], 0L);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000071_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue longLongValue], 0LL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000072_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT64S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int64sArgument;
    int64sArgument = [NSNumber numberWithLongLong:9223372036854775807LL];
    [cluster writeAttributeInt64sWithValue:int64sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT64S Max Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000073_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64S Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue longLongValue], 9223372036854775807LL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000074_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT64S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int64sArgument;
    int64sArgument = [NSNumber numberWithLongLong:-9223372036854775807LL];
    [cluster writeAttributeInt64sWithValue:int64sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT64S Min Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000075_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64S Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue longLongValue], -9223372036854775807LL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000076_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT64S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int64sArgument;
    int64sArgument = [NSNumber numberWithLongLong:0LL];
    [cluster writeAttributeInt64sWithValue:int64sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT64S Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000077_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue longLongValue], 0LL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000078_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM8 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM8 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000079_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute ENUM8 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id enum8Argument;
    enum8Argument = [NSNumber numberWithUnsignedChar:255];
    [cluster writeAttributeEnum8WithValue:enum8Argument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute ENUM8 Max Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000080_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM8 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM8 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 255);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000081_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute ENUM8 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id enum8Argument;
    enum8Argument = [NSNumber numberWithUnsignedChar:0];
    [cluster writeAttributeEnum8WithValue:enum8Argument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute ENUM8 Min Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000082_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM8 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM8 Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000083_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM16 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM16 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000084_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute ENUM16 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id enum16Argument;
    enum16Argument = [NSNumber numberWithUnsignedShort:65535U];
    [cluster writeAttributeEnum16WithValue:enum16Argument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute ENUM16 Max Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000085_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM16 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM16 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 65535U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000086_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute ENUM16 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id enum16Argument;
    enum16Argument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeEnum16WithValue:enum16Argument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute ENUM16 Min Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000087_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM16 Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM16 Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000088_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute OCTET_STRING Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute OCTET_STRING Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToData:[[NSData alloc] initWithBytes:"" length:0]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000089_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute OCTET_STRING with embedded null"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id octetStringArgument;
    octetStringArgument = [[NSData alloc] initWithBytes:"Tes\x00ti\x00ng" length:9];
    [cluster writeAttributeOctetStringWithValue:octetStringArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"Write attribute OCTET_STRING with embedded null Error: %@", err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000090_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute OCTET_STRING with embedded null"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute OCTET_STRING with embedded null Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToData:[[NSData alloc] initWithBytes:"Tes\x00ti\x00ng" length:9]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000091_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id octetStringArgument;
    octetStringArgument = [[NSData alloc] initWithBytes:"TestValue" length:9];
    [cluster writeAttributeOctetStringWithValue:octetStringArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"Write attribute OCTET_STRING Error: %@", err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000092_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute OCTET_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToData:[[NSData alloc] initWithBytes:"TestValue" length:9]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000093_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id octetStringArgument;
    octetStringArgument = [[NSData alloc] initWithBytes:"TestValueLongerThan10" length:21];
    [cluster writeAttributeOctetStringWithValue:octetStringArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"Write attribute OCTET_STRING Error: %@", err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], true);
                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000094_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute OCTET_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToData:[[NSData alloc] initWithBytes:"TestValue" length:9]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000095_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id octetStringArgument;
    octetStringArgument = [[NSData alloc] initWithBytes:"" length:0];
    [cluster writeAttributeOctetStringWithValue:octetStringArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"Write attribute OCTET_STRING Error: %@", err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000096_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute LONG_OCTET_STRING Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLongOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute LONG_OCTET_STRING Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToData:[[NSData alloc] initWithBytes:"" length:0]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000097_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute LONG_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id longOctetStringArgument;
    longOctetStringArgument = [[NSData alloc]
        initWithBytes:"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
                      "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
                      "111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
               length:300];
    [cluster writeAttributeLongOctetStringWithValue:longOctetStringArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write attribute LONG_OCTET_STRING Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000098_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute LONG_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLongOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute LONG_OCTET_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue
                isEqualToData:[[NSData alloc]
                                  initWithBytes:"1111111111111111111111111111111111111111111111111111111111111111111111111111111111"
                                                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111"
                                                "1111111111111111111111111111111111111111111111111111111111111111111111111111111111"
                                                "111111111111111111111111111111111111111111111111111111"
                                         length:300]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000099_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute LONG_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id longOctetStringArgument;
    longOctetStringArgument = [[NSData alloc] initWithBytes:"" length:0];
    [cluster writeAttributeLongOctetStringWithValue:longOctetStringArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write attribute LONG_OCTET_STRING Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000100_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute CHAR_STRING Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCharStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute CHAR_STRING Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToString:@""]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000101_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute CHAR_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id charStringArgument;
    charStringArgument = @"☉T☉";
    [cluster writeAttributeCharStringWithValue:charStringArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"Write attribute CHAR_STRING Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000102_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute CHAR_STRING - Value too long"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id charStringArgument;
    charStringArgument = @"☉TestValueLongerThan10☉";
    [cluster writeAttributeCharStringWithValue:charStringArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"Write attribute CHAR_STRING - Value too long Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], true);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000103_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute CHAR_STRING - Empty"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id charStringArgument;
    charStringArgument = @"";
    [cluster writeAttributeCharStringWithValue:charStringArgument
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"Write attribute CHAR_STRING - Empty Error: %@", err);

                                 XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000104_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute LONG_CHAR_STRING Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLongCharStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute LONG_CHAR_STRING Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToString:@""]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000105_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute LONG_CHAR_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id longCharStringArgument;
    longCharStringArgument
        = @"☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉"
          @"☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉"
          @"☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉";
    [cluster writeAttributeLongCharStringWithValue:longCharStringArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute LONG_CHAR_STRING Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000106_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute LONG_CHAR_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLongCharStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute LONG_CHAR_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue
                isEqualToString:
                    @"☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉"
                    @"☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉"
                    @"☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉☉"]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000107_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute LONG_CHAR_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id longCharStringArgument;
    longCharStringArgument = @"";
    [cluster writeAttributeLongCharStringWithValue:longCharStringArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute LONG_CHAR_STRING Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000108_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_US Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochUsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_US Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 0ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000109_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute EPOCH_US Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id epochUsArgument;
    epochUsArgument = [NSNumber numberWithUnsignedLongLong:18446744073709551615ULL];
    [cluster writeAttributeEpochUsWithValue:epochUsArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute EPOCH_US Max Value Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000110_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_US Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochUsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_US Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 18446744073709551615ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000111_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute EPOCH_US Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id epochUsArgument;
    epochUsArgument = [NSNumber numberWithUnsignedLongLong:0ULL];
    [cluster writeAttributeEpochUsWithValue:epochUsArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute EPOCH_US Min Value Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000112_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_US Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochUsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_US Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 0ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000113_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochSWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000114_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute EPOCH_S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id epochSArgument;
    epochSArgument = [NSNumber numberWithUnsignedInt:4294967295UL];
    [cluster writeAttributeEpochSWithValue:epochSArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute EPOCH_S Max Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000115_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_S Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochSWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_S Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 4294967295UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000116_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute EPOCH_S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id epochSArgument;
    epochSArgument = [NSNumber numberWithUnsignedInt:0UL];
    [cluster writeAttributeEpochSWithValue:epochSArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute EPOCH_S Min Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000117_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochSWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_S Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000118_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute UNSUPPORTED"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeUnsupportedWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute UNSUPPORTED Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000119_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Writeattribute UNSUPPORTED"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id unsupportedArgument;
    unsupportedArgument = [NSNumber numberWithBool:0];
    [cluster writeAttributeUnsupportedWithValue:unsupportedArgument
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"Writeattribute UNSUPPORTED Error: %@", err);

                                  if (err.code == CHIPErrorCodeUnsupportedAttribute) {
                                      [expectation fulfill];
                                      return;
                                  }

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000120_Test
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Command to unsupported endpoint"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:200 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster testWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Send Test Command to unsupported endpoint Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000121_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute vendor_id Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute vendor_id Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000122_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute vendor_id"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id vendorIdArgument;
    vendorIdArgument = [NSNumber numberWithUnsignedShort:17U];
    [cluster writeAttributeVendorIdWithValue:vendorIdArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute vendor_id Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000123_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute vendor_id"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute vendor_id Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 17U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000124_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Restore attribute vendor_id"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id vendorIdArgument;
    vendorIdArgument = [NSNumber numberWithUnsignedShort:0U];
    [cluster writeAttributeVendorIdWithValue:vendorIdArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Restore attribute vendor_id Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000125_TestEnumsRequest
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send a command with a vendor_id and enum"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestEnumsRequestParams alloc] init];
    params.arg1 = [NSNumber numberWithUnsignedShort:20003U];
    params.arg2 = [NSNumber numberWithUnsignedChar:101];
    [cluster
        testEnumsRequestWithParams:params
                 completionHandler:^(CHIPTestClusterClusterTestEnumsResponseParams * _Nullable values, NSError * _Nullable err) {
                     NSLog(@"Send a command with a vendor_id and enum Error: %@", err);

                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                     {
                         id actualValue = values.arg1;
                         XCTAssertEqual([actualValue unsignedShortValue], 20003U);
                     }
                     {
                         id actualValue = values.arg2;
                         XCTAssertEqual([actualValue unsignedCharValue], 101);
                     }

                     [expectation fulfill];
                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000126_TestStructArgumentRequest
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Send Test Command With Struct Argument and arg1.b is true"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestStructArgumentRequestParams alloc] init];
    params.arg1 = [[CHIPTestClusterClusterSimpleStruct alloc] init];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).a = [NSNumber numberWithUnsignedChar:0];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).b = [NSNumber numberWithBool:true];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).c = [NSNumber numberWithUnsignedChar:2];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).d = [[NSData alloc] initWithBytes:"octet_string" length:12];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).e = @"char_string";
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).f = [NSNumber numberWithUnsignedChar:1];

    [cluster testStructArgumentRequestWithParams:params
                               completionHandler:^(
                                   CHIPTestClusterClusterBooleanResponseParams * _Nullable values, NSError * _Nullable err) {
                                   NSLog(@"Send Test Command With Struct Argument and arg1.b is true Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                   {
                                       id actualValue = values.value;
                                       XCTAssertEqual([actualValue boolValue], true);
                                   }

                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000127_TestStructArgumentRequest
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Send Test Command With Struct Argument and arg1.b is false"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestStructArgumentRequestParams alloc] init];
    params.arg1 = [[CHIPTestClusterClusterSimpleStruct alloc] init];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).a = [NSNumber numberWithUnsignedChar:0];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).b = [NSNumber numberWithBool:false];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).c = [NSNumber numberWithUnsignedChar:2];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).d = [[NSData alloc] initWithBytes:"octet_string" length:12];
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).e = @"char_string";
    ((CHIPTestClusterClusterSimpleStruct *) params.arg1).f = [NSNumber numberWithUnsignedChar:1];

    [cluster testStructArgumentRequestWithParams:params
                               completionHandler:^(
                                   CHIPTestClusterClusterBooleanResponseParams * _Nullable values, NSError * _Nullable err) {
                                   NSLog(@"Send Test Command With Struct Argument and arg1.b is false Error: %@", err);

                                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                   {
                                       id actualValue = values.value;
                                       XCTAssertEqual([actualValue boolValue], false);
                                   }

                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000128_TestListInt8UArgumentRequest
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Send Test Command With List of INT8U and none of them is set to 0"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestListInt8UArgumentRequestParams alloc] init];
    {
        NSMutableArray * temp = [[NSMutableArray alloc] init];
        temp[0] = [NSNumber numberWithUnsignedChar:1];
        temp[1] = [NSNumber numberWithUnsignedChar:2];
        temp[2] = [NSNumber numberWithUnsignedChar:3];
        temp[3] = [NSNumber numberWithUnsignedChar:4];
        temp[4] = [NSNumber numberWithUnsignedChar:5];
        temp[5] = [NSNumber numberWithUnsignedChar:6];
        temp[6] = [NSNumber numberWithUnsignedChar:7];
        temp[7] = [NSNumber numberWithUnsignedChar:8];
        temp[8] = [NSNumber numberWithUnsignedChar:9];
        params.arg1 = temp;
    }
    [cluster testListInt8UArgumentRequestWithParams:params
                                  completionHandler:^(
                                      CHIPTestClusterClusterBooleanResponseParams * _Nullable values, NSError * _Nullable err) {
                                      NSLog(@"Send Test Command With List of INT8U and none of them is set to 0 Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      {
                                          id actualValue = values.value;
                                          XCTAssertEqual([actualValue boolValue], true);
                                      }

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000129_TestListInt8UArgumentRequest
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Send Test Command With List of INT8U and one of them is set to 0"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestListInt8UArgumentRequestParams alloc] init];
    {
        NSMutableArray * temp = [[NSMutableArray alloc] init];
        temp[0] = [NSNumber numberWithUnsignedChar:1];
        temp[1] = [NSNumber numberWithUnsignedChar:2];
        temp[2] = [NSNumber numberWithUnsignedChar:3];
        temp[3] = [NSNumber numberWithUnsignedChar:4];
        temp[4] = [NSNumber numberWithUnsignedChar:5];
        temp[5] = [NSNumber numberWithUnsignedChar:6];
        temp[6] = [NSNumber numberWithUnsignedChar:7];
        temp[7] = [NSNumber numberWithUnsignedChar:8];
        temp[8] = [NSNumber numberWithUnsignedChar:9];
        temp[9] = [NSNumber numberWithUnsignedChar:0];
        params.arg1 = temp;
    }
    [cluster testListInt8UArgumentRequestWithParams:params
                                  completionHandler:^(
                                      CHIPTestClusterClusterBooleanResponseParams * _Nullable values, NSError * _Nullable err) {
                                      NSLog(@"Send Test Command With List of INT8U and one of them is set to 0 Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      {
                                          id actualValue = values.value;
                                          XCTAssertEqual([actualValue boolValue], false);
                                      }

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000130_TestListInt8UReverseRequest
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Command With List of INT8U and get it reversed"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestListInt8UReverseRequestParams alloc] init];
    {
        NSMutableArray * temp = [[NSMutableArray alloc] init];
        temp[0] = [NSNumber numberWithUnsignedChar:1];
        temp[1] = [NSNumber numberWithUnsignedChar:2];
        temp[2] = [NSNumber numberWithUnsignedChar:3];
        temp[3] = [NSNumber numberWithUnsignedChar:4];
        temp[4] = [NSNumber numberWithUnsignedChar:5];
        temp[5] = [NSNumber numberWithUnsignedChar:6];
        temp[6] = [NSNumber numberWithUnsignedChar:7];
        temp[7] = [NSNumber numberWithUnsignedChar:8];
        temp[8] = [NSNumber numberWithUnsignedChar:9];
        params.arg1 = temp;
    }
    [cluster testListInt8UReverseRequestWithParams:params
                                 completionHandler:^(CHIPTestClusterClusterTestListInt8UReverseResponseParams * _Nullable values,
                                     NSError * _Nullable err) {
                                     NSLog(@"Send Test Command With List of INT8U and get it reversed Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     {
                                         id actualValue = values.arg1;
                                         XCTAssertEqual([actualValue count], 9);
                                         XCTAssertEqual([actualValue[0] unsignedCharValue], 9);
                                         XCTAssertEqual([actualValue[1] unsignedCharValue], 8);
                                         XCTAssertEqual([actualValue[2] unsignedCharValue], 7);
                                         XCTAssertEqual([actualValue[3] unsignedCharValue], 6);
                                         XCTAssertEqual([actualValue[4] unsignedCharValue], 5);
                                         XCTAssertEqual([actualValue[5] unsignedCharValue], 4);
                                         XCTAssertEqual([actualValue[6] unsignedCharValue], 3);
                                         XCTAssertEqual([actualValue[7] unsignedCharValue], 2);
                                         XCTAssertEqual([actualValue[8] unsignedCharValue], 1);
                                     }

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000131_TestListInt8UReverseRequest
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Send Test Command With empty List of INT8U and get an empty list back"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestListInt8UReverseRequestParams alloc] init];
    {
        NSMutableArray * temp = [[NSMutableArray alloc] init];
        params.arg1 = temp;
    }
    [cluster testListInt8UReverseRequestWithParams:params
                                 completionHandler:^(CHIPTestClusterClusterTestListInt8UReverseResponseParams * _Nullable values,
                                     NSError * _Nullable err) {
                                     NSLog(@"Send Test Command With empty List of INT8U and get an empty list back Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     {
                                         id actualValue = values.arg1;
                                         XCTAssertEqual([actualValue count], 0);
                                     }

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000132_TestListStructArgumentRequest
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Send Test Command With List of Struct Argument and arg1.b of first item is true"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestListStructArgumentRequestParams alloc] init];
    {
        NSMutableArray * temp = [[NSMutableArray alloc] init];
        temp[0] = [[CHIPTestClusterClusterSimpleStruct alloc] init];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).a = [NSNumber numberWithUnsignedChar:0];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).b = [NSNumber numberWithBool:true];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).c = [NSNumber numberWithUnsignedChar:2];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).d = [[NSData alloc] initWithBytes:"first_octet_string" length:18];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).e = @"first_char_string";
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).f = [NSNumber numberWithUnsignedChar:1];

        temp[1] = [[CHIPTestClusterClusterSimpleStruct alloc] init];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).a = [NSNumber numberWithUnsignedChar:1];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).b = [NSNumber numberWithBool:true];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).c = [NSNumber numberWithUnsignedChar:3];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).d = [[NSData alloc] initWithBytes:"second_octet_string" length:19];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).e = @"second_char_string";
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).f = [NSNumber numberWithUnsignedChar:1];

        params.arg1 = temp;
    }
    [cluster
        testListStructArgumentRequestWithParams:params
                              completionHandler:^(
                                  CHIPTestClusterClusterBooleanResponseParams * _Nullable values, NSError * _Nullable err) {
                                  NSLog(
                                      @"Send Test Command With List of Struct Argument and arg1.b of first item is true Error: %@",
                                      err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                  {
                                      id actualValue = values.value;
                                      XCTAssertEqual([actualValue boolValue], true);
                                  }

                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000133_TestListStructArgumentRequest
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Send Test Command With List of Struct Argument and arg1.b of first item is false"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestListStructArgumentRequestParams alloc] init];
    {
        NSMutableArray * temp = [[NSMutableArray alloc] init];
        temp[0] = [[CHIPTestClusterClusterSimpleStruct alloc] init];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).a = [NSNumber numberWithUnsignedChar:1];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).b = [NSNumber numberWithBool:true];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).c = [NSNumber numberWithUnsignedChar:3];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).d = [[NSData alloc] initWithBytes:"second_octet_string" length:19];
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).e = @"second_char_string";
        ((CHIPTestClusterClusterSimpleStruct *) temp[0]).f = [NSNumber numberWithUnsignedChar:1];

        temp[1] = [[CHIPTestClusterClusterSimpleStruct alloc] init];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).a = [NSNumber numberWithUnsignedChar:0];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).b = [NSNumber numberWithBool:false];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).c = [NSNumber numberWithUnsignedChar:2];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).d = [[NSData alloc] initWithBytes:"first_octet_string" length:18];
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).e = @"first_char_string";
        ((CHIPTestClusterClusterSimpleStruct *) temp[1]).f = [NSNumber numberWithUnsignedChar:1];

        params.arg1 = temp;
    }
    [cluster
        testListStructArgumentRequestWithParams:params
                              completionHandler:^(
                                  CHIPTestClusterClusterBooleanResponseParams * _Nullable values, NSError * _Nullable err) {
                                  NSLog(
                                      @"Send Test Command With List of Struct Argument and arg1.b of first item is false Error: %@",
                                      err);

                                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                  {
                                      id actualValue = values.value;
                                      XCTAssertEqual([actualValue boolValue], false);
                                  }

                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000134_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write attribute LIST With List of INT8U and none of them is set to 0"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id listInt8uArgument;
    {
        NSMutableArray * temp = [[NSMutableArray alloc] init];
        temp[0] = [NSNumber numberWithUnsignedChar:1];
        temp[1] = [NSNumber numberWithUnsignedChar:2];
        temp[2] = [NSNumber numberWithUnsignedChar:3];
        temp[3] = [NSNumber numberWithUnsignedChar:4];
        listInt8uArgument = temp;
    }
    [cluster writeAttributeListInt8uWithValue:listInt8uArgument
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"Write attribute LIST With List of INT8U and none of them is set to 0 Error: %@", err);

                                XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000135_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute LIST With List of INT8U"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeListInt8uWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute LIST With List of INT8U Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue count], 4);
            XCTAssertEqual([actualValue[0] unsignedCharValue], 1);
            XCTAssertEqual([actualValue[1] unsignedCharValue], 2);
            XCTAssertEqual([actualValue[2] unsignedCharValue], 3);
            XCTAssertEqual([actualValue[3] unsignedCharValue], 4);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000136_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute LIST With List of OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id listOctetStringArgument;
    {
        NSMutableArray * temp = [[NSMutableArray alloc] init];
        temp[0] = [[NSData alloc] initWithBytes:"Test0" length:5];
        temp[1] = [[NSData alloc] initWithBytes:"Test1" length:5];
        temp[2] = [[NSData alloc] initWithBytes:"Test2" length:5];
        temp[3] = [[NSData alloc] initWithBytes:"Test3" length:5];
        listOctetStringArgument = temp;
    }
    [cluster writeAttributeListOctetStringWithValue:listOctetStringArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write attribute LIST With List of OCTET_STRING Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000137_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute LIST With List of OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeListOctetStringWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute LIST With List of OCTET_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue count], 4);
            XCTAssertTrue([actualValue[0] isEqualToData:[[NSData alloc] initWithBytes:"Test0" length:5]]);
            XCTAssertTrue([actualValue[1] isEqualToData:[[NSData alloc] initWithBytes:"Test1" length:5]]);
            XCTAssertTrue([actualValue[2] isEqualToData:[[NSData alloc] initWithBytes:"Test2" length:5]]);
            XCTAssertTrue([actualValue[3] isEqualToData:[[NSData alloc] initWithBytes:"Test3" length:5]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000138_WriteAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Write attribute LIST With List of LIST_STRUCT_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id listStructOctetStringArgument;
    {
        NSMutableArray * temp = [[NSMutableArray alloc] init];
        temp[0] = [[CHIPTestClusterClusterTestListStructOctet alloc] init];
        ((CHIPTestClusterClusterTestListStructOctet *) temp[0]).fabricIndex = [NSNumber numberWithUnsignedLongLong:0ULL];
        ((CHIPTestClusterClusterTestListStructOctet *) temp[0]).operationalCert = [[NSData alloc] initWithBytes:"Test0" length:5];

        temp[1] = [[CHIPTestClusterClusterTestListStructOctet alloc] init];
        ((CHIPTestClusterClusterTestListStructOctet *) temp[1]).fabricIndex = [NSNumber numberWithUnsignedLongLong:1ULL];
        ((CHIPTestClusterClusterTestListStructOctet *) temp[1]).operationalCert = [[NSData alloc] initWithBytes:"Test1" length:5];

        temp[2] = [[CHIPTestClusterClusterTestListStructOctet alloc] init];
        ((CHIPTestClusterClusterTestListStructOctet *) temp[2]).fabricIndex = [NSNumber numberWithUnsignedLongLong:2ULL];
        ((CHIPTestClusterClusterTestListStructOctet *) temp[2]).operationalCert = [[NSData alloc] initWithBytes:"Test2" length:5];

        temp[3] = [[CHIPTestClusterClusterTestListStructOctet alloc] init];
        ((CHIPTestClusterClusterTestListStructOctet *) temp[3]).fabricIndex = [NSNumber numberWithUnsignedLongLong:3ULL];
        ((CHIPTestClusterClusterTestListStructOctet *) temp[3]).operationalCert = [[NSData alloc] initWithBytes:"Test3" length:5];

        listStructOctetStringArgument = temp;
    }
    [cluster writeAttributeListStructOctetStringWithValue:listStructOctetStringArgument
                                        completionHandler:^(NSError * _Nullable err) {
                                            NSLog(@"Write attribute LIST With List of LIST_STRUCT_OCTET_STRING Error: %@", err);

                                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                            [expectation fulfill];
                                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000139_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Read attribute LIST With List of LIST_STRUCT_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeListStructOctetStringWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute LIST With List of LIST_STRUCT_OCTET_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue count], 4);
            if ([actualValue[0] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[0][@"fabricIndex"] unsignedLongLongValue], 0ULL);
            } else {
                XCTAssertEqual(
                    [((CHIPTestClusterClusterTestListStructOctet *) actualValue[0]).fabricIndex unsignedLongLongValue], 0ULL);
            }
            if ([actualValue[0] isKindOfClass:[NSDictionary class]]) {
                XCTAssertTrue([actualValue[0][@"operationalCert"] isEqualToData:[[NSData alloc] initWithBytes:"Test0" length:5]]);
            } else {
                XCTAssertTrue([((CHIPTestClusterClusterTestListStructOctet *) actualValue[0]).operationalCert
                    isEqualToData:[[NSData alloc] initWithBytes:"Test0" length:5]]);
            }
            if ([actualValue[1] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[1][@"fabricIndex"] unsignedLongLongValue], 1ULL);
            } else {
                XCTAssertEqual(
                    [((CHIPTestClusterClusterTestListStructOctet *) actualValue[1]).fabricIndex unsignedLongLongValue], 1ULL);
            }
            if ([actualValue[1] isKindOfClass:[NSDictionary class]]) {
                XCTAssertTrue([actualValue[1][@"operationalCert"] isEqualToData:[[NSData alloc] initWithBytes:"Test1" length:5]]);
            } else {
                XCTAssertTrue([((CHIPTestClusterClusterTestListStructOctet *) actualValue[1]).operationalCert
                    isEqualToData:[[NSData alloc] initWithBytes:"Test1" length:5]]);
            }
            if ([actualValue[2] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[2][@"fabricIndex"] unsignedLongLongValue], 2ULL);
            } else {
                XCTAssertEqual(
                    [((CHIPTestClusterClusterTestListStructOctet *) actualValue[2]).fabricIndex unsignedLongLongValue], 2ULL);
            }
            if ([actualValue[2] isKindOfClass:[NSDictionary class]]) {
                XCTAssertTrue([actualValue[2][@"operationalCert"] isEqualToData:[[NSData alloc] initWithBytes:"Test2" length:5]]);
            } else {
                XCTAssertTrue([((CHIPTestClusterClusterTestListStructOctet *) actualValue[2]).operationalCert
                    isEqualToData:[[NSData alloc] initWithBytes:"Test2" length:5]]);
            }
            if ([actualValue[3] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[3][@"fabricIndex"] unsignedLongLongValue], 3ULL);
            } else {
                XCTAssertEqual(
                    [((CHIPTestClusterClusterTestListStructOctet *) actualValue[3]).fabricIndex unsignedLongLongValue], 3ULL);
            }
            if ([actualValue[3] isKindOfClass:[NSDictionary class]]) {
                XCTAssertTrue([actualValue[3][@"operationalCert"] isEqualToData:[[NSData alloc] initWithBytes:"Test3" length:5]]);
            } else {
                XCTAssertTrue([((CHIPTestClusterClusterTestListStructOctet *) actualValue[3]).operationalCert
                    isEqualToData:[[NSData alloc] initWithBytes:"Test3" length:5]]);
            }
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000140_TestNullableOptionalRequest
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Command with optional arg set."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestNullableOptionalRequestParams alloc] init];
    params.arg1 = [NSNumber numberWithUnsignedChar:5];
    [cluster testNullableOptionalRequestWithParams:params
                                 completionHandler:^(CHIPTestClusterClusterTestNullableOptionalResponseParams * _Nullable values,
                                     NSError * _Nullable err) {
                                     NSLog(@"Send Test Command with optional arg set. Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     {
                                         id actualValue = values.wasPresent;
                                         XCTAssertEqual([actualValue boolValue], true);
                                     }
                                     {
                                         id actualValue = values.wasNull;
                                         XCTAssertEqual([actualValue boolValue], false);
                                     }
                                     {
                                         id actualValue = values.value;
                                         XCTAssertEqual([actualValue unsignedCharValue], 5);
                                     }
                                     {
                                         id actualValue = values.originalValue;
                                         XCTAssertFalse(actualValue == nil);
                                         XCTAssertEqual([actualValue unsignedCharValue], 5);
                                     }

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000141_TestNullableOptionalRequest
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Command without its optional arg."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestNullableOptionalRequestParams alloc] init];
    [cluster testNullableOptionalRequestWithParams:params
                                 completionHandler:^(CHIPTestClusterClusterTestNullableOptionalResponseParams * _Nullable values,
                                     NSError * _Nullable err) {
                                     NSLog(@"Send Test Command without its optional arg. Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     {
                                         id actualValue = values.wasPresent;
                                         XCTAssertEqual([actualValue boolValue], false);
                                     }

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000142_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BOOLEAN null"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBooleanArgument;
    nullableBooleanArgument = nil;
    [cluster writeAttributeNullableBooleanWithValue:nullableBooleanArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write attribute NULLABLE_BOOLEAN null Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000143_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BOOLEAN null"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBooleanWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BOOLEAN null Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000144_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BOOLEAN True"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBooleanArgument;
    nullableBooleanArgument = [NSNumber numberWithBool:true];
    [cluster writeAttributeNullableBooleanWithValue:nullableBooleanArgument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write attribute NULLABLE_BOOLEAN True Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000145_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BOOLEAN True"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBooleanWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BOOLEAN True Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue boolValue], true);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000146_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP8 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap8Argument;
    nullableBitmap8Argument = [NSNumber numberWithUnsignedChar:254];
    [cluster writeAttributeNullableBitmap8WithValue:nullableBitmap8Argument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write attribute NULLABLE_BITMAP8 Max Value Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000147_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP8 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP8 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedCharValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000148_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP8 Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap8Argument;
    nullableBitmap8Argument = [NSNumber numberWithUnsignedChar:255];
    [cluster writeAttributeNullableBitmap8WithValue:nullableBitmap8Argument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write attribute NULLABLE_BITMAP8 Invalid Value Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000149_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP8 unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP8 unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedCharValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000150_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP8 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap8Argument;
    nullableBitmap8Argument = nil;
    [cluster writeAttributeNullableBitmap8WithValue:nullableBitmap8Argument
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"Write attribute NULLABLE_BITMAP8 null Value Error: %@", err);

                                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000151_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP8 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP8 null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000152_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP16 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap16Argument;
    nullableBitmap16Argument = [NSNumber numberWithUnsignedShort:65534U];
    [cluster writeAttributeNullableBitmap16WithValue:nullableBitmap16Argument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write attribute NULLABLE_BITMAP16 Max Value Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000153_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP16 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP16 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedShortValue], 65534U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000154_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP16 Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap16Argument;
    nullableBitmap16Argument = [NSNumber numberWithUnsignedShort:65535U];
    [cluster writeAttributeNullableBitmap16WithValue:nullableBitmap16Argument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write attribute NULLABLE_BITMAP16 Invalid Value Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000155_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP16 unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP16 unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedShortValue], 65534U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000156_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP16 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap16Argument;
    nullableBitmap16Argument = nil;
    [cluster writeAttributeNullableBitmap16WithValue:nullableBitmap16Argument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write attribute NULLABLE_BITMAP16 null Value Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000157_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP16 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP16 null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000158_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP32 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap32Argument;
    nullableBitmap32Argument = [NSNumber numberWithUnsignedInt:4294967294UL];
    [cluster writeAttributeNullableBitmap32WithValue:nullableBitmap32Argument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write attribute NULLABLE_BITMAP32 Max Value Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000159_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP32 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap32WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP32 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedIntValue], 4294967294UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000160_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP32 Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap32Argument;
    nullableBitmap32Argument = [NSNumber numberWithUnsignedInt:4294967295UL];
    [cluster writeAttributeNullableBitmap32WithValue:nullableBitmap32Argument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write attribute NULLABLE_BITMAP32 Invalid Value Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000161_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP32 unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap32WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP32 unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedIntValue], 4294967294UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000162_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP32 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap32Argument;
    nullableBitmap32Argument = nil;
    [cluster writeAttributeNullableBitmap32WithValue:nullableBitmap32Argument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write attribute NULLABLE_BITMAP32 null Value Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000163_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP32 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap32WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP32 null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000164_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP64 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap64Argument;
    nullableBitmap64Argument = [NSNumber numberWithUnsignedLongLong:18446744073709551614ULL];
    [cluster writeAttributeNullableBitmap64WithValue:nullableBitmap64Argument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write attribute NULLABLE_BITMAP64 Max Value Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000165_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP64 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap64WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP64 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedLongLongValue], 18446744073709551614ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000166_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP64 Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap64Argument;
    nullableBitmap64Argument = [NSNumber numberWithUnsignedLongLong:18446744073709551615ULL];
    [cluster writeAttributeNullableBitmap64WithValue:nullableBitmap64Argument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write attribute NULLABLE_BITMAP64 Invalid Value Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000167_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP64 unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap64WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP64 unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedLongLongValue], 18446744073709551614ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000168_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_BITMAP64 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableBitmap64Argument;
    nullableBitmap64Argument = nil;
    [cluster writeAttributeNullableBitmap64WithValue:nullableBitmap64Argument
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"Write attribute NULLABLE_BITMAP64 null Value Error: %@", err);

                                       XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000169_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_BITMAP64 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableBitmap64WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_BITMAP64 null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000170_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT8U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt8uArgument;
    nullableInt8uArgument = [NSNumber numberWithUnsignedChar:254];
    [cluster writeAttributeNullableInt8uWithValue:nullableInt8uArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write attribute NULLABLE_INT8U Max Value Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000171_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT8U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt8uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT8U Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedCharValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000172_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT8U Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt8uArgument;
    nullableInt8uArgument = [NSNumber numberWithUnsignedChar:255];
    [cluster writeAttributeNullableInt8uWithValue:nullableInt8uArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write attribute NULLABLE_INT8U Invalid Value Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000173_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT8U unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt8uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT8U unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedCharValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000174_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT8U null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt8uArgument;
    nullableInt8uArgument = nil;
    [cluster writeAttributeNullableInt8uWithValue:nullableInt8uArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write attribute NULLABLE_INT8U null Value Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000175_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT8U null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt8uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT8U null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000176_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT16U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt16uArgument;
    nullableInt16uArgument = [NSNumber numberWithUnsignedShort:65534U];
    [cluster writeAttributeNullableInt16uWithValue:nullableInt16uArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT16U Max Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000177_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT16U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt16uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT16U Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedShortValue], 65534U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000178_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT16U Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt16uArgument;
    nullableInt16uArgument = [NSNumber numberWithUnsignedShort:65535U];
    [cluster writeAttributeNullableInt16uWithValue:nullableInt16uArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT16U Invalid Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000179_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT16U unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt16uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT16U unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedShortValue], 65534U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000180_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT16U null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt16uArgument;
    nullableInt16uArgument = nil;
    [cluster writeAttributeNullableInt16uWithValue:nullableInt16uArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT16U null Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000181_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT16U null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt16uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT16U null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000182_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT32U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt32uArgument;
    nullableInt32uArgument = [NSNumber numberWithUnsignedInt:4294967294UL];
    [cluster writeAttributeNullableInt32uWithValue:nullableInt32uArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT32U Max Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000183_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT32U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT32U Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedIntValue], 4294967294UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000184_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT32U Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt32uArgument;
    nullableInt32uArgument = [NSNumber numberWithUnsignedInt:4294967295UL];
    [cluster writeAttributeNullableInt32uWithValue:nullableInt32uArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT32U Invalid Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000185_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT32U unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT32U unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedIntValue], 4294967294UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000186_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT32U null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt32uArgument;
    nullableInt32uArgument = nil;
    [cluster writeAttributeNullableInt32uWithValue:nullableInt32uArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT32U null Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000187_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT32U null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT32U null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000188_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT64U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt64uArgument;
    nullableInt64uArgument = [NSNumber numberWithUnsignedLongLong:18446744073709551614ULL];
    [cluster writeAttributeNullableInt64uWithValue:nullableInt64uArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT64U Max Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000189_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT64U Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt64uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT64U Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedLongLongValue], 18446744073709551614ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000190_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT64U Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt64uArgument;
    nullableInt64uArgument = [NSNumber numberWithUnsignedLongLong:18446744073709551615ULL];
    [cluster writeAttributeNullableInt64uWithValue:nullableInt64uArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT64U Invalid Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000191_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT64U unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt64uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT64U unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedLongLongValue], 18446744073709551614ULL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000192_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT64U null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt64uArgument;
    nullableInt64uArgument = nil;
    [cluster writeAttributeNullableInt64uWithValue:nullableInt64uArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT64U null Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000193_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT64U null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt64uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT64U null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000194_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT8S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt8sArgument;
    nullableInt8sArgument = [NSNumber numberWithChar:-127];
    [cluster writeAttributeNullableInt8sWithValue:nullableInt8sArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write attribute NULLABLE_INT8S Min Value Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000195_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT8S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT8S Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue charValue], -127);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000196_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT8S Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt8sArgument;
    nullableInt8sArgument = [NSNumber numberWithChar:-128];
    [cluster writeAttributeNullableInt8sWithValue:nullableInt8sArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write attribute NULLABLE_INT8S Invalid Value Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000197_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT8S unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT8S unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue charValue], -127);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000198_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT8S null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt8sArgument;
    nullableInt8sArgument = nil;
    [cluster writeAttributeNullableInt8sWithValue:nullableInt8sArgument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write attribute NULLABLE_INT8S null Value Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000199_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT8S null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT8S null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000200_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT16S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt16sArgument;
    nullableInt16sArgument = [NSNumber numberWithShort:-32767];
    [cluster writeAttributeNullableInt16sWithValue:nullableInt16sArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT16S Min Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000201_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT16S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT16S Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue shortValue], -32767);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000202_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT16S Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt16sArgument;
    nullableInt16sArgument = [NSNumber numberWithShort:-32768];
    [cluster writeAttributeNullableInt16sWithValue:nullableInt16sArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT16S Invalid Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000203_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT16S unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT16S unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue shortValue], -32767);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000204_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT16S null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt16sArgument;
    nullableInt16sArgument = nil;
    [cluster writeAttributeNullableInt16sWithValue:nullableInt16sArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT16S null Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000205_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT16S null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT16S null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000206_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT32S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt32sArgument;
    nullableInt32sArgument = [NSNumber numberWithInt:-2147483647L];
    [cluster writeAttributeNullableInt32sWithValue:nullableInt32sArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT32S Min Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000207_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT32S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT32S Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue intValue], -2147483647L);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000208_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT32S Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt32sArgument;
    nullableInt32sArgument = [NSNumber numberWithInt:-2147483648L];
    [cluster writeAttributeNullableInt32sWithValue:nullableInt32sArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT32S Invalid Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000209_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT32S unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT32S unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue intValue], -2147483647L);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000210_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT32S null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt32sArgument;
    nullableInt32sArgument = nil;
    [cluster writeAttributeNullableInt32sWithValue:nullableInt32sArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT32S null Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000211_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT32S null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT32S null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000212_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT64S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt64sArgument;
    nullableInt64sArgument = [NSNumber numberWithLongLong:-9223372036854775807LL];
    [cluster writeAttributeNullableInt64sWithValue:nullableInt64sArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT64S Min Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000213_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT64S Min Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT64S Min Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue longLongValue], -9223372036854775807LL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000214_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT64S Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt64sArgument;
    nullableInt64sArgument = [NSNumber numberWithLongLong:-9223372036854775807LL - 1];
    [cluster writeAttributeNullableInt64sWithValue:nullableInt64sArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT64S Invalid Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000215_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT64S unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT64S unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue longLongValue], -9223372036854775807LL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000216_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_INT64S null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableInt64sArgument;
    nullableInt64sArgument = nil;
    [cluster writeAttributeNullableInt64sWithValue:nullableInt64sArgument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_INT64S null Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000217_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_INT64S null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_INT64S null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000218_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_ENUM8 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableEnum8Argument;
    nullableEnum8Argument = [NSNumber numberWithUnsignedChar:254];
    [cluster writeAttributeNullableEnum8WithValue:nullableEnum8Argument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write attribute NULLABLE_ENUM8 Max Value Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000219_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_ENUM8 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableEnum8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_ENUM8 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedCharValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000220_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_ENUM8 Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableEnum8Argument;
    nullableEnum8Argument = [NSNumber numberWithUnsignedChar:255];
    [cluster writeAttributeNullableEnum8WithValue:nullableEnum8Argument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write attribute NULLABLE_ENUM8 Invalid Value Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000221_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_ENUM8 unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableEnum8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_ENUM8 unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedCharValue], 254);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000222_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_ENUM8 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableEnum8Argument;
    nullableEnum8Argument = nil;
    [cluster writeAttributeNullableEnum8WithValue:nullableEnum8Argument
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"Write attribute NULLABLE_ENUM8 null Value Error: %@", err);

                                    XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000223_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_ENUM8 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableEnum8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_ENUM8 null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000224_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_ENUM16 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableEnum16Argument;
    nullableEnum16Argument = [NSNumber numberWithUnsignedShort:65534U];
    [cluster writeAttributeNullableEnum16WithValue:nullableEnum16Argument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_ENUM16 Max Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000225_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_ENUM16 Max Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableEnum16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_ENUM16 Max Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedShortValue], 65534U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000226_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_ENUM16 Invalid Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableEnum16Argument;
    nullableEnum16Argument = [NSNumber numberWithUnsignedShort:65535U];
    [cluster writeAttributeNullableEnum16WithValue:nullableEnum16Argument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_ENUM16 Invalid Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000227_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_ENUM16 unchanged Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableEnum16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_ENUM16 unchanged Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertEqual([actualValue unsignedShortValue], 65534U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000228_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_ENUM16 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableEnum16Argument;
    nullableEnum16Argument = nil;
    [cluster writeAttributeNullableEnum16WithValue:nullableEnum16Argument
                                 completionHandler:^(NSError * _Nullable err) {
                                     NSLog(@"Write attribute NULLABLE_ENUM16 null Value Error: %@", err);

                                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                     [expectation fulfill];
                                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000229_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_ENUM16 null Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableEnum16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_ENUM16 null Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000230_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_OCTET_STRING Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_OCTET_STRING Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertTrue([actualValue isEqualToData:[[NSData alloc] initWithBytes:"" length:0]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000231_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableOctetStringArgument;
    nullableOctetStringArgument = [[NSData alloc] initWithBytes:"TestValue" length:9];
    [cluster writeAttributeNullableOctetStringWithValue:nullableOctetStringArgument
                                      completionHandler:^(NSError * _Nullable err) {
                                          NSLog(@"Write attribute NULLABLE_OCTET_STRING Error: %@", err);

                                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                          [expectation fulfill];
                                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000232_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_OCTET_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertTrue([actualValue isEqualToData:[[NSData alloc] initWithBytes:"TestValue" length:9]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000233_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableOctetStringArgument;
    nullableOctetStringArgument = nil;
    [cluster writeAttributeNullableOctetStringWithValue:nullableOctetStringArgument
                                      completionHandler:^(NSError * _Nullable err) {
                                          NSLog(@"Write attribute NULLABLE_OCTET_STRING Error: %@", err);

                                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                          [expectation fulfill];
                                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000234_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_OCTET_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000235_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableOctetStringArgument;
    nullableOctetStringArgument = [[NSData alloc] initWithBytes:"" length:0];
    [cluster writeAttributeNullableOctetStringWithValue:nullableOctetStringArgument
                                      completionHandler:^(NSError * _Nullable err) {
                                          NSLog(@"Write attribute NULLABLE_OCTET_STRING Error: %@", err);

                                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                          [expectation fulfill];
                                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000236_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_OCTET_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableOctetStringWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_OCTET_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertTrue([actualValue isEqualToData:[[NSData alloc] initWithBytes:"" length:0]]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000237_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_CHAR_STRING Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableCharStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_CHAR_STRING Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertTrue([actualValue isEqualToString:@""]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000238_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_CHAR_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableCharStringArgument;
    nullableCharStringArgument = @"☉T☉";
    [cluster writeAttributeNullableCharStringWithValue:nullableCharStringArgument
                                     completionHandler:^(NSError * _Nullable err) {
                                         NSLog(@"Write attribute NULLABLE_CHAR_STRING Error: %@", err);

                                         XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                         [expectation fulfill];
                                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000239_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_CHAR_STRING - Value too long"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableCharStringArgument;
    nullableCharStringArgument = nil;
    [cluster writeAttributeNullableCharStringWithValue:nullableCharStringArgument
                                     completionHandler:^(NSError * _Nullable err) {
                                         NSLog(@"Write attribute NULLABLE_CHAR_STRING - Value too long Error: %@", err);

                                         XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                         [expectation fulfill];
                                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000240_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_CHAR_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableCharStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_CHAR_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue(actualValue == nil);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000241_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute NULLABLE_CHAR_STRING - Empty"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id nullableCharStringArgument;
    nullableCharStringArgument = @"";
    [cluster writeAttributeNullableCharStringWithValue:nullableCharStringArgument
                                     completionHandler:^(NSError * _Nullable err) {
                                         NSLog(@"Write attribute NULLABLE_CHAR_STRING - Empty Error: %@", err);

                                         XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                                         [expectation fulfill];
                                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000242_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute NULLABLE_CHAR_STRING"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNullableCharStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute NULLABLE_CHAR_STRING Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertFalse(actualValue == nil);
            XCTAssertTrue([actualValue isEqualToString:@""]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestCluster_000243_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read nonexistent attribute."];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:200 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeListInt8uWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read nonexistent attribute. Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 134);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

uint8_t TestAddArgumentDefaultValue;
- (void)testSendClusterTestSaveAs_000000_TestAddArguments
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Add Arguments Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestAddArgumentsParams alloc] init];
    params.arg1 = [NSNumber numberWithUnsignedChar:3];
    params.arg2 = [NSNumber numberWithUnsignedChar:17];
    [cluster testAddArgumentsWithParams:params
                      completionHandler:^(
                          CHIPTestClusterClusterTestAddArgumentsResponseParams * _Nullable values, NSError * _Nullable err) {
                          NSLog(@"Send Test Add Arguments Command Error: %@", err);

                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                          {
                              id actualValue = values.returnValue;
                              XCTAssertEqual([actualValue unsignedCharValue], 20);
                              TestAddArgumentDefaultValue = [actualValue unsignedCharValue];
                          }

                          [expectation fulfill];
                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000001_TestAddArguments
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Add Arguments Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestAddArgumentsParams alloc] init];
    params.arg1 = [NSNumber numberWithUnsignedChar:3];
    params.arg2 = [NSNumber numberWithUnsignedChar:17];
    [cluster testAddArgumentsWithParams:params
                      completionHandler:^(
                          CHIPTestClusterClusterTestAddArgumentsResponseParams * _Nullable values, NSError * _Nullable err) {
                          NSLog(@"Send Test Add Arguments Command Error: %@", err);

                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                          {
                              id actualValue = values.returnValue;
                              XCTAssertEqual([actualValue unsignedCharValue], TestAddArgumentDefaultValue);
                          }

                          [expectation fulfill];
                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000002_TestAddArguments
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Test Add Arguments Command"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPTestClusterClusterTestAddArgumentsParams alloc] init];
    params.arg1 = [NSNumber numberWithUnsignedChar:3];
    params.arg2 = [NSNumber numberWithUnsignedChar:TestAddArgumentDefaultValue];
    [cluster testAddArgumentsWithParams:params
                      completionHandler:^(
                          CHIPTestClusterClusterTestAddArgumentsResponseParams * _Nullable values, NSError * _Nullable err) {
                          NSLog(@"Send Test Add Arguments Command Error: %@", err);

                          XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                          {
                              id actualValue = values.returnValue;
                              XCTAssertNotEqual([actualValue unsignedCharValue], TestAddArgumentDefaultValue);
                          }

                          [expectation fulfill];
                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
bool readAttributeBooleanDefaultValue;
- (void)testSendClusterTestSaveAs_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BOOLEAN Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBooleanWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BOOLEAN Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], 0);
            readAttributeBooleanDefaultValue = [actualValue boolValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000004_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BOOLEAN Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id booleanArgument;
    booleanArgument = [NSNumber numberWithBool:1];
    [cluster writeAttributeBooleanWithValue:booleanArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute BOOLEAN Not Default Value Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000005_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BOOLEAN Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBooleanWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BOOLEAN Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue boolValue], readAttributeBooleanDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000006_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BOOLEAN DefaultValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id booleanArgument;
    booleanArgument = [NSNumber numberWithBool:readAttributeBooleanDefaultValue];
    [cluster writeAttributeBooleanWithValue:booleanArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute BOOLEAN DefaultValue Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000007_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BOOLEAN False"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBooleanWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BOOLEAN False Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], readAttributeBooleanDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint8_t readAttributeBitmap8DefaultValue;
- (void)testSendClusterTestSaveAs_000008_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP8 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP8 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
            readAttributeBitmap8DefaultValue = [actualValue unsignedCharValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000009_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP8 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap8Argument;
    bitmap8Argument = [NSNumber numberWithUnsignedChar:1];
    [cluster writeAttributeBitmap8WithValue:bitmap8Argument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute BITMAP8 Not Default Value Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000010_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP8 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP8 Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedCharValue], readAttributeBitmap8DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000011_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP8 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap8Argument;
    bitmap8Argument = [NSNumber numberWithUnsignedChar:readAttributeBitmap8DefaultValue];
    [cluster writeAttributeBitmap8WithValue:bitmap8Argument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute BITMAP8 Default Value Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000012_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP8 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP8 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], readAttributeBitmap8DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint16_t readAttributeBitmap16DefaultValue;
- (void)testSendClusterTestSaveAs_000013_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP16 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP16 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
            readAttributeBitmap16DefaultValue = [actualValue unsignedShortValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000014_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP16 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap16Argument;
    bitmap16Argument = [NSNumber numberWithUnsignedShort:1U];
    [cluster writeAttributeBitmap16WithValue:bitmap16Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP16 Not Default Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000015_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP16 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP16 Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedShortValue], readAttributeBitmap16DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000016_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP16 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap16Argument;
    bitmap16Argument = [NSNumber numberWithUnsignedShort:readAttributeBitmap16DefaultValue];
    [cluster writeAttributeBitmap16WithValue:bitmap16Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP16 Default Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000017_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP16 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP16 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], readAttributeBitmap16DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint32_t readAttributeBitmap32DefaultValue;
- (void)testSendClusterTestSaveAs_000018_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP32 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap32WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP32 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
            readAttributeBitmap32DefaultValue = [actualValue unsignedIntValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000019_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP32 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap32Argument;
    bitmap32Argument = [NSNumber numberWithUnsignedInt:1UL];
    [cluster writeAttributeBitmap32WithValue:bitmap32Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP32 Not Default Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000020_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP32 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap32WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP32 Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedIntValue], readAttributeBitmap32DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000021_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP32 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap32Argument;
    bitmap32Argument = [NSNumber numberWithUnsignedInt:readAttributeBitmap32DefaultValue];
    [cluster writeAttributeBitmap32WithValue:bitmap32Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP32 Default Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000022_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP32 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap32WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP32 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], readAttributeBitmap32DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint64_t readAttributeBitmap64DefaultValue;
- (void)testSendClusterTestSaveAs_000023_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP64 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap64WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP64 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 0ULL);
            readAttributeBitmap64DefaultValue = [actualValue unsignedLongLongValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000024_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP64 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap64Argument;
    bitmap64Argument = [NSNumber numberWithUnsignedLongLong:1ULL];
    [cluster writeAttributeBitmap64WithValue:bitmap64Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP64 Not Default Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000025_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP64 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap64WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP64 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedLongLongValue], readAttributeBitmap64DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000026_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute BITMAP64 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id bitmap64Argument;
    bitmap64Argument = [NSNumber numberWithUnsignedLongLong:readAttributeBitmap64DefaultValue];
    [cluster writeAttributeBitmap64WithValue:bitmap64Argument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute BITMAP64 Default Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000027_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute BITMAP64 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBitmap64WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute BITMAP64 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], readAttributeBitmap64DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint8_t readAttributeInt8uDefaultValue;
- (void)testSendClusterTestSaveAs_000028_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
            readAttributeInt8uDefaultValue = [actualValue unsignedCharValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000029_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT8U Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int8uArgument;
    int8uArgument = [NSNumber numberWithUnsignedChar:1];
    [cluster writeAttributeInt8uWithValue:int8uArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute INT8U Not Default Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000030_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8U Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8U Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedCharValue], readAttributeInt8uDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000031_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT8U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int8uArgument;
    int8uArgument = [NSNumber numberWithUnsignedChar:readAttributeInt8uDefaultValue];
    [cluster writeAttributeInt8uWithValue:int8uArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute INT8U Default Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000032_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], readAttributeInt8uDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint16_t readAttributeInt16uDefaultValue;
- (void)testSendClusterTestSaveAs_000033_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
            readAttributeInt16uDefaultValue = [actualValue unsignedShortValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000034_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT16U Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int16uArgument;
    int16uArgument = [NSNumber numberWithUnsignedShort:1U];
    [cluster writeAttributeInt16uWithValue:int16uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT16U Not Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000035_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16U Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16U Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedShortValue], readAttributeInt16uDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000036_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT16U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int16uArgument;
    int16uArgument = [NSNumber numberWithUnsignedShort:readAttributeInt16uDefaultValue];
    [cluster writeAttributeInt16uWithValue:int16uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT16U Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000037_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], readAttributeInt16uDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint32_t readAttributeInt32uDefaultValue;
- (void)testSendClusterTestSaveAs_000038_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
            readAttributeInt32uDefaultValue = [actualValue unsignedIntValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000039_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32U Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32uArgument;
    int32uArgument = [NSNumber numberWithUnsignedInt:1UL];
    [cluster writeAttributeInt32uWithValue:int32uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32U Not Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000040_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32U Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32U Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedIntValue], readAttributeInt32uDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000041_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32uArgument;
    int32uArgument = [NSNumber numberWithUnsignedInt:readAttributeInt32uDefaultValue];
    [cluster writeAttributeInt32uWithValue:int32uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32U Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000042_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], readAttributeInt32uDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint64_t readAttributeInt64uDefaultValue;
- (void)testSendClusterTestSaveAs_000043_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 0ULL);
            readAttributeInt64uDefaultValue = [actualValue unsignedLongLongValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000044_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT64U Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int64uArgument;
    int64uArgument = [NSNumber numberWithUnsignedLongLong:1ULL];
    [cluster writeAttributeInt64uWithValue:int64uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT64U Not Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000045_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64U Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64U Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedLongLongValue], readAttributeInt64uDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000046_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT64U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int64uArgument;
    int64uArgument = [NSNumber numberWithUnsignedLongLong:readAttributeInt64uDefaultValue];
    [cluster writeAttributeInt64uWithValue:int64uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT64U Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000047_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64U Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64U Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], readAttributeInt64uDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
int8_t readAttributeInt8sDefaultValue;
- (void)testSendClusterTestSaveAs_000048_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue charValue], 0);
            readAttributeInt8sDefaultValue = [actualValue charValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000049_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT8S Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int8sArgument;
    int8sArgument = [NSNumber numberWithChar:1];
    [cluster writeAttributeInt8sWithValue:int8sArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute INT8S Not Default Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000050_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8S Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8S Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue charValue], readAttributeInt8sDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000051_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT8S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int8sArgument;
    int8sArgument = [NSNumber numberWithChar:readAttributeInt8sDefaultValue];
    [cluster writeAttributeInt8sWithValue:int8sArgument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute INT8S Default Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000052_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT8S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt8sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT8S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue charValue], readAttributeInt8sDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
int16_t readAttributeInt16sDefaultValue;
- (void)testSendClusterTestSaveAs_000053_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], 0);
            readAttributeInt16sDefaultValue = [actualValue shortValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000054_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT16S Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int16sArgument;
    int16sArgument = [NSNumber numberWithShort:1];
    [cluster writeAttributeInt16sWithValue:int16sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT16S Not Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000055_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16S Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16S Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue shortValue], readAttributeInt16sDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000056_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT16S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int16sArgument;
    int16sArgument = [NSNumber numberWithShort:readAttributeInt16sDefaultValue];
    [cluster writeAttributeInt16sWithValue:int16sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT16S Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000057_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT16S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt16sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT16S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue shortValue], readAttributeInt16sDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
int32_t readAttributeInt32sDefaultValue;
- (void)testSendClusterTestSaveAs_000058_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue intValue], 0L);
            readAttributeInt32sDefaultValue = [actualValue intValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000059_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32S Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32sArgument;
    int32sArgument = [NSNumber numberWithInt:1L];
    [cluster writeAttributeInt32sWithValue:int32sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32S Not Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000060_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32S Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32S Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue intValue], readAttributeInt32sDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000061_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32sArgument;
    int32sArgument = [NSNumber numberWithInt:readAttributeInt32sDefaultValue];
    [cluster writeAttributeInt32sWithValue:int32sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32S Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000062_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue intValue], readAttributeInt32sDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
int64_t readAttributeInt64sDefaultValue;
- (void)testSendClusterTestSaveAs_000063_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue longLongValue], 0LL);
            readAttributeInt64sDefaultValue = [actualValue longLongValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000064_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INTS Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int64sArgument;
    int64sArgument = [NSNumber numberWithLongLong:1LL];
    [cluster writeAttributeInt64sWithValue:int64sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INTS Not Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000065_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64S Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64S Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue longLongValue], readAttributeInt64sDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000066_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT64S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int64sArgument;
    int64sArgument = [NSNumber numberWithLongLong:readAttributeInt64sDefaultValue];
    [cluster writeAttributeInt64sWithValue:int64sArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT64S Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000067_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT64S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt64sWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT64S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue longLongValue], readAttributeInt64sDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint8_t readAttributeEnum8DefaultValue;
- (void)testSendClusterTestSaveAs_000068_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM8 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM8 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
            readAttributeEnum8DefaultValue = [actualValue unsignedCharValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000069_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute ENUM8 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id enum8Argument;
    enum8Argument = [NSNumber numberWithUnsignedChar:1];
    [cluster writeAttributeEnum8WithValue:enum8Argument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute ENUM8 Not Default Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000070_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM8 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM8 Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedCharValue], readAttributeEnum8DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000071_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute ENUM8 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id enum8Argument;
    enum8Argument = [NSNumber numberWithUnsignedChar:readAttributeEnum8DefaultValue];
    [cluster writeAttributeEnum8WithValue:enum8Argument
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"Write attribute ENUM8 Default Value Error: %@", err);

                            XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000072_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM8 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum8WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM8 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], readAttributeEnum8DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint16_t readAttributeEnum16DefaultValue;
- (void)testSendClusterTestSaveAs_000073_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM16 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM16 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
            readAttributeEnum16DefaultValue = [actualValue unsignedShortValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000074_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute ENUM16 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id enum16Argument;
    enum16Argument = [NSNumber numberWithUnsignedShort:1U];
    [cluster writeAttributeEnum16WithValue:enum16Argument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute ENUM16 Not Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000075_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM16 Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM16 Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedShortValue], readAttributeEnum16DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000076_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute ENUM16 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id enum16Argument;
    enum16Argument = [NSNumber numberWithUnsignedShort:readAttributeEnum16DefaultValue];
    [cluster writeAttributeEnum16WithValue:enum16Argument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute ENUM16 Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000077_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute ENUM16 Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnum16WithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute ENUM16 Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], readAttributeEnum16DefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint64_t readAttributeEpochUSDefaultValue;
- (void)testSendClusterTestSaveAs_000078_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_US Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochUsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_US Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], 0ULL);
            readAttributeEpochUSDefaultValue = [actualValue unsignedLongLongValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000079_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute EPOCH_US Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id epochUsArgument;
    epochUsArgument = [NSNumber numberWithUnsignedLongLong:1ULL];
    [cluster writeAttributeEpochUsWithValue:epochUsArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute EPOCH_US Not Default Value Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000080_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_US Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochUsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_US Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedLongLongValue], readAttributeEpochUSDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000081_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute EPOCH_US Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id epochUsArgument;
    epochUsArgument = [NSNumber numberWithUnsignedLongLong:readAttributeEpochUSDefaultValue];
    [cluster writeAttributeEpochUsWithValue:epochUsArgument
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"Write attribute EPOCH_US Default Value Error: %@", err);

                              XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000082_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_US Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochUsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_US Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedLongLongValue], readAttributeEpochUSDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint32_t readAttributeEpochSDefaultValue;
- (void)testSendClusterTestSaveAs_000083_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochSWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], 0UL);
            readAttributeEpochSDefaultValue = [actualValue unsignedIntValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000084_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute EPOCH_S Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id epochSArgument;
    epochSArgument = [NSNumber numberWithUnsignedInt:1UL];
    [cluster writeAttributeEpochSWithValue:epochSArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute EPOCH_S Not Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000085_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_S Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochSWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_S Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedIntValue], readAttributeEpochSDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000086_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute EPOCH_S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id epochSArgument;
    epochSArgument = [NSNumber numberWithUnsignedInt:readAttributeEpochSDefaultValue];
    [cluster writeAttributeEpochSWithValue:epochSArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute EPOCH_S Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000087_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute EPOCH_S Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEpochSWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute EPOCH_S Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedIntValue], readAttributeEpochSDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
uint16_t readAttributeVendorIdDefaultValue;
- (void)testSendClusterTestSaveAs_000088_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute vendor_id Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute vendor_id Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], 0U);
            readAttributeVendorIdDefaultValue = [actualValue unsignedShortValue];
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000089_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute vendor_id Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id vendorIdArgument;
    vendorIdArgument = [NSNumber numberWithUnsignedShort:1U];
    [cluster writeAttributeVendorIdWithValue:vendorIdArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute vendor_id Not Default Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000090_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute vendor_id Not Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute vendor_id Not Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedShortValue], readAttributeVendorIdDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000091_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute vendor_id Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id vendorIdArgument;
    vendorIdArgument = [NSNumber numberWithUnsignedShort:readAttributeVendorIdDefaultValue];
    [cluster writeAttributeVendorIdWithValue:vendorIdArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write attribute vendor_id Default Value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSaveAs_000092_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute vendor_id Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute vendor_id Default Value Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedShortValue], readAttributeVendorIdDefaultValue);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestConstraints_000000_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32U Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32uArgument;
    int32uArgument = [NSNumber numberWithUnsignedInt:5UL];
    [cluster writeAttributeInt32uWithValue:int32uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32U Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestConstraints_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32U Value MinValue Constraints"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32U Value MinValue Constraints Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue unsignedIntValue], 5);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestConstraints_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32U Value MaxValue Constraints"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32U Value MaxValue Constraints Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertLessThanOrEqual([actualValue unsignedIntValue], 5);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestConstraints_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute INT32U Value NotValue Constraints"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInt32uWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute INT32U Value NotValue Constraints Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertNotEqual([actualValue unsignedIntValue], 6);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestConstraints_000004_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write attribute INT32U Value Back to Default Value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestTestCluster * cluster = [[CHIPTestTestCluster alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    id int32uArgument;
    int32uArgument = [NSNumber numberWithUnsignedInt:0UL];
    [cluster writeAttributeInt32uWithValue:int32uArgument
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"Write attribute INT32U Value Back to Default Value Error: %@", err);

                             XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestDelayCommands_000000_WaitForMs
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Wait 100ms"];

    dispatch_queue_t queue = dispatch_get_main_queue();
    WaitForMs(expectation, queue, 100);
    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestDescriptorCluster_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute Device list"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestDescriptor * cluster = [[CHIPTestDescriptor alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDeviceListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute Device list Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue count], 1);
            if ([actualValue[0] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[0][@"type"] unsignedIntValue], 0UL);
            } else {
                XCTAssertEqual([((CHIPDescriptorClusterDeviceType *) actualValue[0]).type unsignedIntValue], 0UL);
            }
            if ([actualValue[0] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[0][@"revision"] unsignedShortValue], 1U);
            } else {
                XCTAssertEqual([((CHIPDescriptorClusterDeviceType *) actualValue[0]).revision unsignedShortValue], 1U);
            }
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestDescriptorCluster_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute Server list"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestDescriptor * cluster = [[CHIPTestDescriptor alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeServerListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute Server list Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue count], 18);
            XCTAssertEqual([actualValue[0] unsignedIntValue], 3UL);
            XCTAssertEqual([actualValue[1] unsignedIntValue], 29UL);
            XCTAssertEqual([actualValue[2] unsignedIntValue], 40UL);
            XCTAssertEqual([actualValue[3] unsignedIntValue], 41UL);
            XCTAssertEqual([actualValue[4] unsignedIntValue], 42UL);
            XCTAssertEqual([actualValue[5] unsignedIntValue], 48UL);
            XCTAssertEqual([actualValue[6] unsignedIntValue], 49UL);
            XCTAssertEqual([actualValue[7] unsignedIntValue], 50UL);
            XCTAssertEqual([actualValue[8] unsignedIntValue], 51UL);
            XCTAssertEqual([actualValue[9] unsignedIntValue], 52UL);
            XCTAssertEqual([actualValue[10] unsignedIntValue], 53UL);
            XCTAssertEqual([actualValue[11] unsignedIntValue], 54UL);
            XCTAssertEqual([actualValue[12] unsignedIntValue], 55UL);
            XCTAssertEqual([actualValue[13] unsignedIntValue], 60UL);
            XCTAssertEqual([actualValue[14] unsignedIntValue], 62UL);
            XCTAssertEqual([actualValue[15] unsignedIntValue], 1029UL);
            XCTAssertEqual([actualValue[16] unsignedIntValue], 61440UL);
            XCTAssertEqual([actualValue[17] unsignedIntValue], 61444UL);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestDescriptorCluster_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute Client list"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestDescriptor * cluster = [[CHIPTestDescriptor alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClientListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute Client list Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue count], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestDescriptorCluster_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read attribute Parts list"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestDescriptor * cluster = [[CHIPTestDescriptor alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePartsListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read attribute Parts list Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue count], 2);
            XCTAssertEqual([actualValue[0] unsignedShortValue], 1U);
            XCTAssertEqual([actualValue[1] unsignedShortValue], 2U);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestBasicInformation_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read location"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLocationWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read location Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToString:@""]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestBasicInformation_000001_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Write location"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    id locationArgument;
    locationArgument = @"us";
    [cluster writeAttributeLocationWithValue:locationArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Write location Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestBasicInformation_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back location"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLocationWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back location Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToString:@"us"]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestBasicInformation_000003_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Restore initial location value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    id locationArgument;
    locationArgument = @"";
    [cluster writeAttributeLocationWithValue:locationArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Restore initial location value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestGroupsCluster_000000_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 0 (invalid)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:0U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 0 (invalid) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 135);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 0U);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000001_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 1 (not found)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:1U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 1 (not found) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 139);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 1U);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000002_AddGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Add Group 1 (new)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterAddGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:1U];
    params.groupName = @"Group #1";
    [cluster addGroupWithParams:params
              completionHandler:^(CHIPGroupsClusterAddGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                  NSLog(@"Add Group 1 (new) Error: %@", err);

                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                  {
                      id actualValue = values.status;
                      XCTAssertEqual([actualValue unsignedCharValue], 0);
                  }
                  {
                      id actualValue = values.groupId;
                      XCTAssertEqual([actualValue unsignedShortValue], 1U);
                  }

                  [expectation fulfill];
              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000003_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 1 (new)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:1U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 1 (new) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 0);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 1U);
                   }
                   {
                       id actualValue = values.groupName;
                       XCTAssertTrue([actualValue isEqualToString:@"Group #1"]);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000004_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 2 (not found)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:4369U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 2 (not found) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 139);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 4369U);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000005_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 3 (not found)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:32767U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 3 (not found) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 139);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 32767U);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000006_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 1 (existing)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:1U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 1 (existing) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 0);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 1U);
                   }
                   {
                       id actualValue = values.groupName;
                       XCTAssertTrue([actualValue isEqualToString:@"Group #1"]);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000007_RemoveGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Remove Group 0 (invalid)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterRemoveGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:0U];
    [cluster removeGroupWithParams:params
                 completionHandler:^(CHIPGroupsClusterRemoveGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                     NSLog(@"Remove Group 0 (invalid) Error: %@", err);

                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                     {
                         id actualValue = values.status;
                         XCTAssertEqual([actualValue unsignedCharValue], 135);
                     }
                     {
                         id actualValue = values.groupId;
                         XCTAssertEqual([actualValue unsignedShortValue], 0U);
                     }

                     [expectation fulfill];
                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000008_RemoveGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Remove Group 4 (not found)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterRemoveGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:4U];
    [cluster removeGroupWithParams:params
                 completionHandler:^(CHIPGroupsClusterRemoveGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                     NSLog(@"Remove Group 4 (not found) Error: %@", err);

                     XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                     {
                         id actualValue = values.status;
                         XCTAssertEqual([actualValue unsignedCharValue], 139);
                     }
                     {
                         id actualValue = values.groupId;
                         XCTAssertEqual([actualValue unsignedShortValue], 4U);
                     }

                     [expectation fulfill];
                 }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000009_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 1 (not removed)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:1U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 1 (not removed) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 0);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 1U);
                   }
                   {
                       id actualValue = values.groupName;
                       XCTAssertTrue([actualValue isEqualToString:@"Group #1"]);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000010_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 2 (removed)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:4369U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 2 (removed) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 139);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 4369U);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000011_RemoveAllGroups
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Remove All"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster removeAllGroupsWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Remove All Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000012_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 1 (removed)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:1U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 1 (removed) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 139);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 1U);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000013_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 2 (still removed)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:4369U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 2 (still removed) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 139);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 4369U);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupsCluster_000014_ViewGroup
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"View Group 3 (removed)"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestGroups * cluster = [[CHIPTestGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPGroupsClusterViewGroupParams alloc] init];
    params.groupId = [NSNumber numberWithUnsignedShort:32767U];
    [cluster viewGroupWithParams:params
               completionHandler:^(CHIPGroupsClusterViewGroupResponseParams * _Nullable values, NSError * _Nullable err) {
                   NSLog(@"View Group 3 (removed) Error: %@", err);

                   XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                   {
                       id actualValue = values.status;
                       XCTAssertEqual([actualValue unsignedCharValue], 139);
                   }
                   {
                       id actualValue = values.groupId;
                       XCTAssertEqual([actualValue unsignedShortValue], 32767U);
                   }

                   [expectation fulfill];
               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestIdentifyCluster_000000_Identify
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Send Identify command and expect success response"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestIdentify * cluster = [[CHIPTestIdentify alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPIdentifyClusterIdentifyParams alloc] init];
    params.identifyTime = [NSNumber numberWithUnsignedShort:0U];
    [cluster identifyWithParams:params
              completionHandler:^(NSError * _Nullable err) {
                  NSLog(@"Send Identify command and expect success response Error: %@", err);

                  XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                  [expectation fulfill];
              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestOperationalCredentialsCluster_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read number of supported fabrics"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOperationalCredentials * cluster = [[CHIPTestOperationalCredentials alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSupportedFabricsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read number of supported fabrics Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue unsignedCharValue], 4);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestOperationalCredentialsCluster_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read number of commissioned fabrics"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOperationalCredentials * cluster = [[CHIPTestOperationalCredentials alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCommissionedFabricsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read number of commissioned fabrics Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestOperationalCredentialsCluster_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read current fabric index"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOperationalCredentials * cluster = [[CHIPTestOperationalCredentials alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentFabricIndexWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read current fabric index Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertGreaterThanOrEqual([actualValue unsignedCharValue], 1);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestModeSelectCluster_000000_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read CurrentMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestModeSelect * cluster = [[CHIPTestModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read CurrentMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestModeSelectCluster_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read OnMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestModeSelect * cluster = [[CHIPTestModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read OnMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestModeSelectCluster_000002_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read StartUpMode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestModeSelect * cluster = [[CHIPTestModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStartUpModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read StartUpMode Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 0);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestModeSelectCluster_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read Description"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestModeSelect * cluster = [[CHIPTestModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDescriptionWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read Description Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToString:@"Coffee"]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestModeSelectCluster_000004_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read SupportedModes"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestModeSelect * cluster = [[CHIPTestModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSupportedModesWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read SupportedModes Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue count], 3);
            if ([actualValue[0] isKindOfClass:[NSDictionary class]]) {
                XCTAssertTrue([actualValue[0][@"label"] isEqualToString:@"Black"]);
            } else {
                XCTAssertTrue([((CHIPModeSelectClusterModeOptionStruct *) actualValue[0]).label isEqualToString:@"Black"]);
            }
            if ([actualValue[0] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[0][@"mode"] unsignedCharValue], 0);
            } else {
                XCTAssertEqual([((CHIPModeSelectClusterModeOptionStruct *) actualValue[0]).mode unsignedCharValue], 0);
            }
            if ([actualValue[0] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[0][@"semanticTag"] unsignedIntValue], 0UL);
            } else {
                XCTAssertEqual([((CHIPModeSelectClusterModeOptionStruct *) actualValue[0]).semanticTag unsignedIntValue], 0UL);
            }
            if ([actualValue[1] isKindOfClass:[NSDictionary class]]) {
                XCTAssertTrue([actualValue[1][@"label"] isEqualToString:@"Cappuccino"]);
            } else {
                XCTAssertTrue([((CHIPModeSelectClusterModeOptionStruct *) actualValue[1]).label isEqualToString:@"Cappuccino"]);
            }
            if ([actualValue[1] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[1][@"mode"] unsignedCharValue], 4);
            } else {
                XCTAssertEqual([((CHIPModeSelectClusterModeOptionStruct *) actualValue[1]).mode unsignedCharValue], 4);
            }
            if ([actualValue[1] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[1][@"semanticTag"] unsignedIntValue], 0UL);
            } else {
                XCTAssertEqual([((CHIPModeSelectClusterModeOptionStruct *) actualValue[1]).semanticTag unsignedIntValue], 0UL);
            }
            if ([actualValue[2] isKindOfClass:[NSDictionary class]]) {
                XCTAssertTrue([actualValue[2][@"label"] isEqualToString:@"Espresso"]);
            } else {
                XCTAssertTrue([((CHIPModeSelectClusterModeOptionStruct *) actualValue[2]).label isEqualToString:@"Espresso"]);
            }
            if ([actualValue[2] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[2][@"mode"] unsignedCharValue], 7);
            } else {
                XCTAssertEqual([((CHIPModeSelectClusterModeOptionStruct *) actualValue[2]).mode unsignedCharValue], 7);
            }
            if ([actualValue[2] isKindOfClass:[NSDictionary class]]) {
                XCTAssertEqual([actualValue[2][@"semanticTag"] unsignedIntValue], 0UL);
            } else {
                XCTAssertEqual([((CHIPModeSelectClusterModeOptionStruct *) actualValue[2]).semanticTag unsignedIntValue], 0UL);
            }
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestModeSelectCluster_000005_ChangeToMode
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Change to Supported Mode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestModeSelect * cluster = [[CHIPTestModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPModeSelectClusterChangeToModeParams alloc] init];
    params.newMode = [NSNumber numberWithUnsignedChar:4];
    [cluster changeToModeWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Change to Supported Mode Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestModeSelectCluster_000006_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Verify Current Mode Change"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestModeSelect * cluster = [[CHIPTestModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Verify Current Mode Change Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue unsignedCharValue], 4);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestModeSelectCluster_000007_ChangeToMode
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Change to Unsupported Mode"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestModeSelect * cluster = [[CHIPTestModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    __auto_type * params = [[CHIPModeSelectClusterChangeToModeParams alloc] init];
    params.newMode = [NSNumber numberWithUnsignedChar:2];
    [cluster changeToModeWithParams:params
                  completionHandler:^(NSError * _Nullable err) {
                      NSLog(@"Change to Unsupported Mode Error: %@", err);

                      XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 1);
                      [expectation fulfill];
                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestGroupMessaging_000000_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Group Write Attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    id locationArgument;
    locationArgument = @"us";
    [cluster writeAttributeLocationWithValue:locationArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Group Write Attribute Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupMessaging_000001_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back Attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLocationWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back Attribute Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToString:@"us"]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupMessaging_000002_WriteAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Restore initial location value"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    id locationArgument;
    locationArgument = @"";
    [cluster writeAttributeLocationWithValue:locationArgument
                           completionHandler:^(NSError * _Nullable err) {
                               NSLog(@"Restore initial location value Error: %@", err);

                               XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

                               [expectation fulfill];
                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestGroupMessaging_000003_ReadAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Read back Attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestBasic * cluster = [[CHIPTestBasic alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLocationWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Read back Attribute Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertTrue([actualValue isEqualToString:@""]);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTest_TC_DIAGSW_1_1_000000_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads CurrentHeapFree non-global attribute value from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestSoftwareDiagnostics * cluster = [[CHIPTestSoftwareDiagnostics alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHeapFreeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads CurrentHeapFree non-global attribute value from DUT Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DIAGSW_1_1_000001_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads CurrentHeapUsed non-global attribute value from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestSoftwareDiagnostics * cluster = [[CHIPTestSoftwareDiagnostics alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHeapUsedWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads CurrentHeapUsed non-global attribute value from DUT Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTest_TC_DIAGSW_1_1_000002_ReadAttribute
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"Reads CurrentHeapHighWaterMark non-global attribute value from DUT"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestSoftwareDiagnostics * cluster = [[CHIPTestSoftwareDiagnostics alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHeapHighWatermarkWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Reads CurrentHeapHighWaterMark non-global attribute value from DUT Error: %@", err);

        if (err.code == CHIPErrorCodeUnsupportedAttribute) {
            [expectation fulfill];
            return;
        }

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTestSubscribe_OnOff_000000_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Set OnOff Attribute to false"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Set OnOff Attribute to false Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
bool testSendClusterTestSubscribe_OnOff_000001_WaitForReport_Fulfilled = false;
- (void)testSendClusterTestSubscribe_OnOff_000001_WaitForReport
{

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster reportAttributeOnOffWithResponseHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Report: Subscribe OnOff Attribute Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], false);
        }

        testSendClusterTestSubscribe_OnOff_000001_WaitForReport_Fulfilled = true;
    }];
}
- (void)testSendClusterTestSubscribe_OnOff_000002_SubscribeAttribute
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Subscribe OnOff Attribute"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    uint16_t minIntervalArgument = 2U;
    uint16_t maxIntervalArgument = 10U;
    [cluster subscribeAttributeOnOffWithMinInterval:minIntervalArgument
                                        maxInterval:maxIntervalArgument
                                    responseHandler:^(NSError * err, NSDictionary * values) {
                                        NSLog(@"Subscribe OnOff Attribute Error: %@", err);

                                        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);
                                        XCTAssertEqual(testSendClusterTestSubscribe_OnOff_000001_WaitForReport_Fulfilled, true);
                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSubscribe_OnOff_000003_On
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn On the light to see attribute change"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster onWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn On the light to see attribute change Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSubscribe_OnOff_000004_WaitForReport
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check for attribute report"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster reportAttributeOnOffWithResponseHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check for attribute report Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], true);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSubscribe_OnOff_000005_Off
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Turn Off the light to see attribute change"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster offWithCompletionHandler:^(NSError * _Nullable err) {
        NSLog(@"Turn Off the light to see attribute change Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterTestSubscribe_OnOff_000006_WaitForReport
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"Check for attribute report"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTestOnOff * cluster = [[CHIPTestOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster reportAttributeOnOffWithResponseHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Check for attribute report Error: %@", err);

        XCTAssertEqual([CHIPErrorTestUtils errorToZCLErrorCode:err], 0);

        {
            id actualValue = value;
            XCTAssertEqual([actualValue boolValue], false);
        }

        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterAccountLoginReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"AccountLoginReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPAccountLogin * cluster = [[CHIPAccountLogin alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"AccountLogin ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterAdministratorCommissioningReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"AdministratorCommissioningReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPAdministratorCommissioning * cluster = [[CHIPAdministratorCommissioning alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"AdministratorCommissioning ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationBasicReadAttributeVendorNameWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationBasicReadAttributeVendorNameWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationBasic * cluster = [[CHIPApplicationBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorNameWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationBasic VendorName Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationBasicReadAttributeVendorIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationBasicReadAttributeVendorIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationBasic * cluster = [[CHIPApplicationBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationBasic VendorId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationBasicReadAttributeApplicationNameWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationBasicReadAttributeApplicationNameWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationBasic * cluster = [[CHIPApplicationBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeApplicationNameWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationBasic ApplicationName Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationBasicReadAttributeProductIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationBasicReadAttributeProductIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationBasic * cluster = [[CHIPApplicationBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeProductIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationBasic ProductId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationBasicReadAttributeApplicationIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationBasicReadAttributeApplicationIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationBasic * cluster = [[CHIPApplicationBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeApplicationIdWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationBasic ApplicationId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationBasicReadAttributeCatalogVendorIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationBasicReadAttributeCatalogVendorIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationBasic * cluster = [[CHIPApplicationBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCatalogVendorIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationBasic CatalogVendorId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationBasicReadAttributeApplicationStatusWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationBasicReadAttributeApplicationStatusWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationBasic * cluster = [[CHIPApplicationBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeApplicationStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationBasic ApplicationStatus Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationBasicReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationBasicReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationBasic * cluster = [[CHIPApplicationBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationBasic ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationLauncherReadAttributeApplicationLauncherListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationLauncherReadAttributeApplicationLauncherListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationLauncher * cluster = [[CHIPApplicationLauncher alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeApplicationLauncherListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationLauncher ApplicationLauncherList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationLauncherReadAttributeCatalogVendorIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationLauncherReadAttributeCatalogVendorIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationLauncher * cluster = [[CHIPApplicationLauncher alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCatalogVendorIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationLauncher CatalogVendorId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationLauncherReadAttributeApplicationIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationLauncherReadAttributeApplicationIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationLauncher * cluster = [[CHIPApplicationLauncher alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeApplicationIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationLauncher ApplicationId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterApplicationLauncherReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ApplicationLauncherReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPApplicationLauncher * cluster = [[CHIPApplicationLauncher alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ApplicationLauncher ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterAudioOutputReadAttributeAudioOutputListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"AudioOutputReadAttributeAudioOutputListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPAudioOutput * cluster = [[CHIPAudioOutput alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAudioOutputListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"AudioOutput AudioOutputList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterAudioOutputReadAttributeCurrentAudioOutputWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"AudioOutputReadAttributeCurrentAudioOutputWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPAudioOutput * cluster = [[CHIPAudioOutput alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentAudioOutputWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"AudioOutput CurrentAudioOutput Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterAudioOutputReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"AudioOutputReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPAudioOutput * cluster = [[CHIPAudioOutput alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"AudioOutput ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBarrierControlReadAttributeBarrierMovingStateWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BarrierControlReadAttributeBarrierMovingStateWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBarrierControl * cluster = [[CHIPBarrierControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBarrierMovingStateWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BarrierControl BarrierMovingState Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBarrierControlReadAttributeBarrierSafetyStatusWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BarrierControlReadAttributeBarrierSafetyStatusWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBarrierControl * cluster = [[CHIPBarrierControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBarrierSafetyStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BarrierControl BarrierSafetyStatus Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBarrierControlReadAttributeBarrierCapabilitiesWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BarrierControlReadAttributeBarrierCapabilitiesWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBarrierControl * cluster = [[CHIPBarrierControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBarrierCapabilitiesWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BarrierControl BarrierCapabilities Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBarrierControlReadAttributeBarrierPositionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BarrierControlReadAttributeBarrierPositionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBarrierControl * cluster = [[CHIPBarrierControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBarrierPositionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BarrierControl BarrierPosition Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBarrierControlReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BarrierControlReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBarrierControl * cluster = [[CHIPBarrierControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BarrierControl ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBinaryInputBasicReadAttributeOutOfServiceWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BinaryInputBasicReadAttributeOutOfServiceWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBinaryInputBasic * cluster = [[CHIPBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOutOfServiceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BinaryInputBasic OutOfService Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBinaryInputBasicWriteAttributeOutOfServiceWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"BinaryInputBasicWriteAttributeOutOfServiceWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBinaryInputBasic * cluster = [[CHIPBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeOutOfServiceWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"BinaryInputBasic OutOfService Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterBinaryInputBasicReadAttributePresentValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BinaryInputBasicReadAttributePresentValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBinaryInputBasic * cluster = [[CHIPBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePresentValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BinaryInputBasic PresentValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBinaryInputBasicWriteAttributePresentValueWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"BinaryInputBasicWriteAttributePresentValueWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBinaryInputBasic * cluster = [[CHIPBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0);
    [cluster writeAttributePresentValueWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"BinaryInputBasic PresentValue Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterBinaryInputBasicReadAttributeStatusFlagsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BinaryInputBasicReadAttributeStatusFlagsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBinaryInputBasic * cluster = [[CHIPBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStatusFlagsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BinaryInputBasic StatusFlags Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBinaryInputBasicReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BinaryInputBasicReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBinaryInputBasic * cluster = [[CHIPBinaryInputBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BinaryInputBasic ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBindingReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"BindingReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBinding * cluster = [[CHIPBinding alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Binding ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBooleanStateReadAttributeStateValueWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"BooleanStateReadAttributeStateValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBooleanState * cluster = [[CHIPBooleanState alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStateValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BooleanState StateValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBooleanStateReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BooleanStateReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBooleanState * cluster = [[CHIPBooleanState alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BooleanState ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedActionsReadAttributeActionListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedActionsReadAttributeActionListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedActions * cluster = [[CHIPBridgedActions alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActionListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedActions ActionList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedActionsReadAttributeEndpointListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedActionsReadAttributeEndpointListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedActions * cluster = [[CHIPBridgedActions alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEndpointListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedActions EndpointList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedActionsReadAttributeSetupUrlWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"BridgedActionsReadAttributeSetupUrlWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedActions * cluster = [[CHIPBridgedActions alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSetupUrlWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedActions SetupUrl Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedActionsReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedActionsReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedActions * cluster = [[CHIPBridgedActions alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedActions ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeVendorNameWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeVendorNameWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorNameWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic VendorName Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeVendorIDWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeVendorIDWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeVendorIDWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic VendorID Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeProductNameWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeProductNameWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeProductNameWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic ProductName Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeNodeLabelWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeNodeLabelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNodeLabelWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic NodeLabel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicWriteAttributeNodeLabelWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"BridgedDeviceBasicWriteAttributeNodeLabelWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSString * _Nonnull value = @"Test";
    [cluster writeAttributeNodeLabelWithValue:value
                            completionHandler:^(NSError * _Nullable err) {
                                NSLog(@"BridgedDeviceBasic NodeLabel Error: %@", err);
                                XCTAssertEqual(err.code, 0);
                                [expectation fulfill];
                            }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterBridgedDeviceBasicReadAttributeHardwareVersionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeHardwareVersionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeHardwareVersionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic HardwareVersion Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeHardwareVersionStringWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeHardwareVersionStringWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeHardwareVersionStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic HardwareVersionString Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeSoftwareVersionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeSoftwareVersionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSoftwareVersionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic SoftwareVersion Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeSoftwareVersionStringWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeSoftwareVersionStringWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSoftwareVersionStringWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic SoftwareVersionString Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeManufacturingDateWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeManufacturingDateWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeManufacturingDateWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic ManufacturingDate Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributePartNumberWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributePartNumberWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePartNumberWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic PartNumber Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeProductURLWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeProductURLWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeProductURLWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic ProductURL Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeProductLabelWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeProductLabelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeProductLabelWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic ProductLabel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeSerialNumberWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeSerialNumberWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSerialNumberWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic SerialNumber Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeReachableWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeReachableWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeReachableWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic Reachable Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterBridgedDeviceBasicReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"BridgedDeviceBasicReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPBridgedDeviceBasic * cluster = [[CHIPBridgedDeviceBasic alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"BridgedDeviceBasic ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeCurrentHueWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributeCurrentHueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl CurrentHue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeCurrentSaturationWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeCurrentSaturationWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentSaturationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl CurrentSaturation Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeRemainingTimeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeRemainingTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRemainingTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl RemainingTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeCurrentXWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributeCurrentXWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl CurrentX Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeCurrentYWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributeCurrentYWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl CurrentY Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeDriftCompensationWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeDriftCompensationWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDriftCompensationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl DriftCompensation Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeCompensationTextWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeCompensationTextWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCompensationTextWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl CompensationText Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorTemperatureWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorTemperatureWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTemperatureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorTemperature Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorModeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributeColorModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorControlOptionsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorControlOptionsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorControlOptionsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorControlOptions Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorControlOptionsWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorControlOptionsWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeColorControlOptionsWithValue:value
                                      completionHandler:^(NSError * _Nullable err) {
                                          NSLog(@"ColorControl ColorControlOptions Error: %@", err);
                                          XCTAssertEqual(err.code, 0);
                                          [expectation fulfill];
                                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeNumberOfPrimariesWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeNumberOfPrimariesWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNumberOfPrimariesWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl NumberOfPrimaries Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary1XWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary1XWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary1XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary1X Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary1YWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary1YWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary1YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary1Y Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary1IntensityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributePrimary1IntensityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary1IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary1Intensity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary2XWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary2XWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary2XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary2X Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary2YWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary2YWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary2YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary2Y Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary2IntensityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributePrimary2IntensityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary2IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary2Intensity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary3XWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary3XWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary3XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary3X Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary3YWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary3YWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary3YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary3Y Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary3IntensityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributePrimary3IntensityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary3IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary3Intensity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary4XWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary4XWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary4XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary4X Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary4YWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary4YWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary4YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary4Y Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary4IntensityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributePrimary4IntensityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary4IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary4Intensity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary5XWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary5XWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary5XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary5X Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary5YWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary5YWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary5YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary5Y Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary5IntensityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributePrimary5IntensityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary5IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary5Intensity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary6XWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary6XWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary6XWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary6X Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary6YWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlReadAttributePrimary6YWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary6YWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary6Y Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributePrimary6IntensityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributePrimary6IntensityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePrimary6IntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl Primary6Intensity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeWhitePointXWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeWhitePointXWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeWhitePointXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl WhitePointX Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeWhitePointXWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeWhitePointXWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeWhitePointXWithValue:value
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"ColorControl WhitePointX Error: %@", err);
                                  XCTAssertEqual(err.code, 0);
                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeWhitePointYWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeWhitePointYWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeWhitePointYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl WhitePointY Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeWhitePointYWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeWhitePointYWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeWhitePointYWithValue:value
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"ColorControl WhitePointY Error: %@", err);
                                  XCTAssertEqual(err.code, 0);
                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeColorPointRXWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorPointRXWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointRXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorPointRX Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorPointRXWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorPointRXWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeColorPointRXWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"ColorControl ColorPointRX Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeColorPointRYWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorPointRYWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointRYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorPointRY Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorPointRYWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorPointRYWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeColorPointRYWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"ColorControl ColorPointRY Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeColorPointRIntensityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorPointRIntensityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointRIntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorPointRIntensity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorPointRIntensityWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorPointRIntensityWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeColorPointRIntensityWithValue:value
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"ColorControl ColorPointRIntensity Error: %@", err);
                                           XCTAssertEqual(err.code, 0);
                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeColorPointGXWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorPointGXWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointGXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorPointGX Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorPointGXWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorPointGXWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeColorPointGXWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"ColorControl ColorPointGX Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeColorPointGYWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorPointGYWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointGYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorPointGY Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorPointGYWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorPointGYWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeColorPointGYWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"ColorControl ColorPointGY Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeColorPointGIntensityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorPointGIntensityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointGIntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorPointGIntensity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorPointGIntensityWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorPointGIntensityWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeColorPointGIntensityWithValue:value
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"ColorControl ColorPointGIntensity Error: %@", err);
                                           XCTAssertEqual(err.code, 0);
                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeColorPointBXWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorPointBXWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointBXWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorPointBX Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorPointBXWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorPointBXWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeColorPointBXWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"ColorControl ColorPointBX Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeColorPointBYWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorPointBYWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointBYWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorPointBY Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorPointBYWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorPointBYWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeColorPointBYWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"ColorControl ColorPointBY Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeColorPointBIntensityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorPointBIntensityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorPointBIntensityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorPointBIntensity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeColorPointBIntensityWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ColorControlWriteAttributeColorPointBIntensityWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeColorPointBIntensityWithValue:value
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"ColorControl ColorPointBIntensity Error: %@", err);
                                           XCTAssertEqual(err.code, 0);
                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeEnhancedCurrentHueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeEnhancedCurrentHueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnhancedCurrentHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl EnhancedCurrentHue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeEnhancedColorModeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeEnhancedColorModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEnhancedColorModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl EnhancedColorMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorLoopActiveWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorLoopActiveWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopActiveWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorLoopActive Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorLoopDirectionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorLoopDirectionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopDirectionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorLoopDirection Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorLoopTimeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorLoopTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorLoopTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorLoopStartEnhancedHueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorLoopStartEnhancedHueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStartEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorLoopStartEnhancedHue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorLoopStoredEnhancedHueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorLoopStoredEnhancedHueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorLoopStoredEnhancedHueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorLoopStoredEnhancedHue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorCapabilitiesWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorCapabilitiesWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorCapabilitiesWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorCapabilities Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorTempPhysicalMinWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorTempPhysicalMinWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTempPhysicalMinWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorTempPhysicalMin Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeColorTempPhysicalMaxWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeColorTempPhysicalMaxWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeColorTempPhysicalMaxWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ColorTempPhysicalMax Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeCoupleColorTempToLevelMinMiredsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeCoupleColorTempToLevelMinMiredsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCoupleColorTempToLevelMinMiredsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"ColorControl CoupleColorTempToLevelMinMireds Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlReadAttributeStartUpColorTemperatureMiredsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeStartUpColorTemperatureMiredsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeStartUpColorTemperatureMiredsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"ColorControl StartUpColorTemperatureMireds Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterColorControlWriteAttributeStartUpColorTemperatureMiredsWithValue
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlWriteAttributeStartUpColorTemperatureMiredsWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeStartUpColorTemperatureMiredsWithValue:value
                                                completionHandler:^(NSError * _Nullable err) {
                                                    NSLog(@"ColorControl StartUpColorTemperatureMireds Error: %@", err);
                                                    XCTAssertEqual(err.code, 0);
                                                    [expectation fulfill];
                                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterColorControlReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ColorControlReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPColorControl * cluster = [[CHIPColorControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ColorControl ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterContentLauncherReadAttributeAcceptsHeaderListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ContentLauncherReadAttributeAcceptsHeaderListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPContentLauncher * cluster = [[CHIPContentLauncher alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAcceptsHeaderListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ContentLauncher AcceptsHeaderList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterContentLauncherReadAttributeSupportedStreamingTypesWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ContentLauncherReadAttributeSupportedStreamingTypesWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPContentLauncher * cluster = [[CHIPContentLauncher alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSupportedStreamingTypesWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ContentLauncher SupportedStreamingTypes Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterContentLauncherReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ContentLauncherReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPContentLauncher * cluster = [[CHIPContentLauncher alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ContentLauncher ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterDescriptorReadAttributeDeviceListWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"DescriptorReadAttributeDeviceListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPDescriptor * cluster = [[CHIPDescriptor alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDeviceListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Descriptor DeviceList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterDescriptorReadAttributeServerListWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"DescriptorReadAttributeServerListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPDescriptor * cluster = [[CHIPDescriptor alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeServerListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Descriptor ServerList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterDescriptorReadAttributeClientListWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"DescriptorReadAttributeClientListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPDescriptor * cluster = [[CHIPDescriptor alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClientListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Descriptor ClientList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterDescriptorReadAttributePartsListWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"DescriptorReadAttributePartsListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPDescriptor * cluster = [[CHIPDescriptor alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePartsListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Descriptor PartsList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterDescriptorReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"DescriptorReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPDescriptor * cluster = [[CHIPDescriptor alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Descriptor ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterDoorLockReadAttributeLockStateWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"DoorLockReadAttributeLockStateWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPDoorLock * cluster = [[CHIPDoorLock alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLockStateWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"DoorLock LockState Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterDoorLockReadAttributeLockTypeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"DoorLockReadAttributeLockTypeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPDoorLock * cluster = [[CHIPDoorLock alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLockTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"DoorLock LockType Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterDoorLockReadAttributeActuatorEnabledWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"DoorLockReadAttributeActuatorEnabledWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPDoorLock * cluster = [[CHIPDoorLock alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActuatorEnabledWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"DoorLock ActuatorEnabled Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterDoorLockReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"DoorLockReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPDoorLock * cluster = [[CHIPDoorLock alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"DoorLock ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeMeasurementTypeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeMeasurementTypeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasurementTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement MeasurementType Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeTotalActivePowerWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeTotalActivePowerWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTotalActivePowerWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement TotalActivePower Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeRmsVoltageWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeRmsVoltageWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRmsVoltageWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement RmsVoltage Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeRmsVoltageMinWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeRmsVoltageMinWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRmsVoltageMinWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement RmsVoltageMin Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeRmsVoltageMaxWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeRmsVoltageMaxWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRmsVoltageMaxWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement RmsVoltageMax Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeRmsCurrentWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeRmsCurrentWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRmsCurrentWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement RmsCurrent Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeRmsCurrentMinWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeRmsCurrentMinWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRmsCurrentMinWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement RmsCurrentMin Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeRmsCurrentMaxWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeRmsCurrentMaxWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRmsCurrentMaxWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement RmsCurrentMax Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeActivePowerWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeActivePowerWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActivePowerWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement ActivePower Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeActivePowerMinWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeActivePowerMinWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActivePowerMinWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement ActivePowerMin Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeActivePowerMaxWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeActivePowerMaxWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActivePowerMaxWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement ActivePowerMax Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterElectricalMeasurementReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ElectricalMeasurementReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPElectricalMeasurement * cluster = [[CHIPElectricalMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ElectricalMeasurement ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributePHYRateWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributePHYRateWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePHYRateWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics PHYRate Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributeFullDuplexWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributeFullDuplexWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFullDuplexWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics FullDuplex Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributePacketRxCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributePacketRxCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePacketRxCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics PacketRxCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributePacketTxCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributePacketTxCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePacketTxCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics PacketTxCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributeTxErrCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributeTxErrCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxErrCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics TxErrCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributeCollisionCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributeCollisionCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCollisionCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics CollisionCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributeOverrunCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributeOverrunCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOverrunCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics OverrunCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributeCarrierDetectWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributeCarrierDetectWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCarrierDetectWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics CarrierDetect Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributeTimeSinceResetWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributeTimeSinceResetWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTimeSinceResetWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics TimeSinceReset Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributeFeatureMapWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributeFeatureMapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics FeatureMap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterEthernetNetworkDiagnosticsReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"EthernetNetworkDiagnosticsReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPEthernetNetworkDiagnostics * cluster = [[CHIPEthernetNetworkDiagnostics alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"EthernetNetworkDiagnostics ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterFixedLabelReadAttributeLabelListWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"FixedLabelReadAttributeLabelListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPFixedLabel * cluster = [[CHIPFixedLabel alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLabelListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"FixedLabel LabelList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterFixedLabelReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"FixedLabelReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPFixedLabel * cluster = [[CHIPFixedLabel alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"FixedLabel ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterFlowMeasurementReadAttributeMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"FlowMeasurementReadAttributeMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPFlowMeasurement * cluster = [[CHIPFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"FlowMeasurement MeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterFlowMeasurementReadAttributeMinMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"FlowMeasurementReadAttributeMinMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPFlowMeasurement * cluster = [[CHIPFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"FlowMeasurement MinMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterFlowMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"FlowMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPFlowMeasurement * cluster = [[CHIPFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"FlowMeasurement MaxMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterFlowMeasurementReadAttributeToleranceWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"FlowMeasurementReadAttributeToleranceWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPFlowMeasurement * cluster = [[CHIPFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeToleranceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"FlowMeasurement Tolerance Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterFlowMeasurementReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"FlowMeasurementReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPFlowMeasurement * cluster = [[CHIPFlowMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"FlowMeasurement ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralCommissioningReadAttributeBreadcrumbWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralCommissioningReadAttributeBreadcrumbWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralCommissioning * cluster = [[CHIPGeneralCommissioning alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBreadcrumbWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralCommissioning Breadcrumb Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralCommissioningWriteAttributeBreadcrumbWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"GeneralCommissioningWriteAttributeBreadcrumbWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralCommissioning * cluster = [[CHIPGeneralCommissioning alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000000000000000);
    [cluster writeAttributeBreadcrumbWithValue:value
                             completionHandler:^(NSError * _Nullable err) {
                                 NSLog(@"GeneralCommissioning Breadcrumb Error: %@", err);
                                 XCTAssertEqual(err.code, 0);
                                 [expectation fulfill];
                             }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterGeneralCommissioningReadAttributeBasicCommissioningInfoListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralCommissioningReadAttributeBasicCommissioningInfoListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralCommissioning * cluster = [[CHIPGeneralCommissioning alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBasicCommissioningInfoListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralCommissioning BasicCommissioningInfoList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralCommissioningReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralCommissioningReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralCommissioning * cluster = [[CHIPGeneralCommissioning alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralCommissioning ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralDiagnosticsReadAttributeNetworkInterfacesWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralDiagnosticsReadAttributeNetworkInterfacesWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralDiagnostics * cluster = [[CHIPGeneralDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNetworkInterfacesWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralDiagnostics NetworkInterfaces Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralDiagnosticsReadAttributeRebootCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralDiagnosticsReadAttributeRebootCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralDiagnostics * cluster = [[CHIPGeneralDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRebootCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralDiagnostics RebootCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralDiagnosticsReadAttributeUpTimeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralDiagnosticsReadAttributeUpTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralDiagnostics * cluster = [[CHIPGeneralDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeUpTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralDiagnostics UpTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralDiagnosticsReadAttributeTotalOperationalHoursWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralDiagnosticsReadAttributeTotalOperationalHoursWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralDiagnostics * cluster = [[CHIPGeneralDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTotalOperationalHoursWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralDiagnostics TotalOperationalHours Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralDiagnosticsReadAttributeBootReasonsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralDiagnosticsReadAttributeBootReasonsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralDiagnostics * cluster = [[CHIPGeneralDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBootReasonsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralDiagnostics BootReasons Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralDiagnosticsReadAttributeActiveHardwareFaultsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralDiagnosticsReadAttributeActiveHardwareFaultsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralDiagnostics * cluster = [[CHIPGeneralDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActiveHardwareFaultsWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralDiagnostics ActiveHardwareFaults Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralDiagnosticsReadAttributeActiveRadioFaultsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralDiagnosticsReadAttributeActiveRadioFaultsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralDiagnostics * cluster = [[CHIPGeneralDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActiveRadioFaultsWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralDiagnostics ActiveRadioFaults Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralDiagnosticsReadAttributeActiveNetworkFaultsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralDiagnosticsReadAttributeActiveNetworkFaultsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralDiagnostics * cluster = [[CHIPGeneralDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActiveNetworkFaultsWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralDiagnostics ActiveNetworkFaults Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGeneralDiagnosticsReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GeneralDiagnosticsReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGeneralDiagnostics * cluster = [[CHIPGeneralDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GeneralDiagnostics ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGroupKeyManagementReadAttributeGroupsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GroupKeyManagementReadAttributeGroupsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGroupKeyManagement * cluster = [[CHIPGroupKeyManagement alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeGroupsWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GroupKeyManagement Groups Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGroupKeyManagementReadAttributeGroupKeysWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GroupKeyManagementReadAttributeGroupKeysWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGroupKeyManagement * cluster = [[CHIPGroupKeyManagement alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeGroupKeysWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GroupKeyManagement GroupKeys Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGroupKeyManagementReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"GroupKeyManagementReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGroupKeyManagement * cluster = [[CHIPGroupKeyManagement alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"GroupKeyManagement ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGroupsReadAttributeNameSupportWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"GroupsReadAttributeNameSupportWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGroups * cluster = [[CHIPGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNameSupportWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Groups NameSupport Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterGroupsReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"GroupsReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPGroups * cluster = [[CHIPGroups alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Groups ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterIdentifyReadAttributeIdentifyTimeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"IdentifyReadAttributeIdentifyTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIdentify * cluster = [[CHIPIdentify alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeIdentifyTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Identify IdentifyTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterIdentifyWriteAttributeIdentifyTimeWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"IdentifyWriteAttributeIdentifyTimeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIdentify * cluster = [[CHIPIdentify alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeIdentifyTimeWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"Identify IdentifyTime Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterIdentifyReadAttributeIdentifyTypeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"IdentifyReadAttributeIdentifyTypeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIdentify * cluster = [[CHIPIdentify alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeIdentifyTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Identify IdentifyType Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterIdentifyReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"IdentifyReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIdentify * cluster = [[CHIPIdentify alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Identify ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterIlluminanceMeasurementReadAttributeMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"IlluminanceMeasurementReadAttributeMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIlluminanceMeasurement * cluster = [[CHIPIlluminanceMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"IlluminanceMeasurement MeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterIlluminanceMeasurementReadAttributeMinMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"IlluminanceMeasurementReadAttributeMinMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIlluminanceMeasurement * cluster = [[CHIPIlluminanceMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"IlluminanceMeasurement MinMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterIlluminanceMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"IlluminanceMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIlluminanceMeasurement * cluster = [[CHIPIlluminanceMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"IlluminanceMeasurement MaxMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterIlluminanceMeasurementReadAttributeToleranceWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"IlluminanceMeasurementReadAttributeToleranceWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIlluminanceMeasurement * cluster = [[CHIPIlluminanceMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeToleranceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"IlluminanceMeasurement Tolerance Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterIlluminanceMeasurementReadAttributeLightSensorTypeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"IlluminanceMeasurementReadAttributeLightSensorTypeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIlluminanceMeasurement * cluster = [[CHIPIlluminanceMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLightSensorTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"IlluminanceMeasurement LightSensorType Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterIlluminanceMeasurementReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"IlluminanceMeasurementReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPIlluminanceMeasurement * cluster = [[CHIPIlluminanceMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"IlluminanceMeasurement ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterKeypadInputReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"KeypadInputReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPKeypadInput * cluster = [[CHIPKeypadInput alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"KeypadInput ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlReadAttributeCurrentLevelWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeCurrentLevelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl CurrentLevel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlReadAttributeRemainingTimeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeRemainingTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRemainingTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl RemainingTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlReadAttributeMinLevelWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlReadAttributeMinLevelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl MinLevel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlReadAttributeMaxLevelWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlReadAttributeMaxLevelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl MaxLevel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlReadAttributeCurrentFrequencyWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeCurrentFrequencyWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentFrequencyWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl CurrentFrequency Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlReadAttributeMinFrequencyWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeMinFrequencyWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinFrequencyWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl MinFrequency Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlReadAttributeMaxFrequencyWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeMaxFrequencyWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxFrequencyWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl MaxFrequency Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlReadAttributeOptionsWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlReadAttributeOptionsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOptionsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl Options Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlWriteAttributeOptionsWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlWriteAttributeOptionsWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeOptionsWithValue:value
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"LevelControl Options Error: %@", err);
                              XCTAssertEqual(err.code, 0);
                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterLevelControlReadAttributeOnOffTransitionTimeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeOnOffTransitionTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffTransitionTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl OnOffTransitionTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlWriteAttributeOnOffTransitionTimeWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlWriteAttributeOnOffTransitionTimeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeOnOffTransitionTimeWithValue:value
                                      completionHandler:^(NSError * _Nullable err) {
                                          NSLog(@"LevelControl OnOffTransitionTime Error: %@", err);
                                          XCTAssertEqual(err.code, 0);
                                          [expectation fulfill];
                                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterLevelControlReadAttributeOnLevelWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlReadAttributeOnLevelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl OnLevel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlWriteAttributeOnLevelWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlWriteAttributeOnLevelWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeOnLevelWithValue:value
                          completionHandler:^(NSError * _Nullable err) {
                              NSLog(@"LevelControl OnLevel Error: %@", err);
                              XCTAssertEqual(err.code, 0);
                              [expectation fulfill];
                          }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterLevelControlReadAttributeOnTransitionTimeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeOnTransitionTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTransitionTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl OnTransitionTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlWriteAttributeOnTransitionTimeWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlWriteAttributeOnTransitionTimeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeOnTransitionTimeWithValue:value
                                   completionHandler:^(NSError * _Nullable err) {
                                       NSLog(@"LevelControl OnTransitionTime Error: %@", err);
                                       XCTAssertEqual(err.code, 0);
                                       [expectation fulfill];
                                   }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterLevelControlReadAttributeOffTransitionTimeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeOffTransitionTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffTransitionTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl OffTransitionTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlWriteAttributeOffTransitionTimeWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlWriteAttributeOffTransitionTimeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x0000);
    [cluster writeAttributeOffTransitionTimeWithValue:value
                                    completionHandler:^(NSError * _Nullable err) {
                                        NSLog(@"LevelControl OffTransitionTime Error: %@", err);
                                        XCTAssertEqual(err.code, 0);
                                        [expectation fulfill];
                                    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterLevelControlReadAttributeDefaultMoveRateWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeDefaultMoveRateWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDefaultMoveRateWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl DefaultMoveRate Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlWriteAttributeDefaultMoveRateWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlWriteAttributeDefaultMoveRateWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeDefaultMoveRateWithValue:value
                                  completionHandler:^(NSError * _Nullable err) {
                                      NSLog(@"LevelControl DefaultMoveRate Error: %@", err);
                                      XCTAssertEqual(err.code, 0);
                                      [expectation fulfill];
                                  }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterLevelControlReadAttributeStartUpCurrentLevelWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeStartUpCurrentLevelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStartUpCurrentLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl StartUpCurrentLevel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLevelControlWriteAttributeStartUpCurrentLevelWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"LevelControlWriteAttributeStartUpCurrentLevelWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x01);
    [cluster writeAttributeStartUpCurrentLevelWithValue:value
                                      completionHandler:^(NSError * _Nullable err) {
                                          NSLog(@"LevelControl StartUpCurrentLevel Error: %@", err);
                                          XCTAssertEqual(err.code, 0);
                                          [expectation fulfill];
                                      }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterLevelControlReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LevelControlReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLevelControl * cluster = [[CHIPLevelControl alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LevelControl ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterLowPowerReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"LowPowerReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPLowPower * cluster = [[CHIPLowPower alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"LowPower ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaInputReadAttributeMediaInputListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"MediaInputReadAttributeMediaInputListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaInput * cluster = [[CHIPMediaInput alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMediaInputListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaInput MediaInputList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaInputReadAttributeCurrentMediaInputWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"MediaInputReadAttributeCurrentMediaInputWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaInput * cluster = [[CHIPMediaInput alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentMediaInputWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaInput CurrentMediaInput Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaInputReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"MediaInputReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaInput * cluster = [[CHIPMediaInput alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaInput ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaPlaybackReadAttributePlaybackStateWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"MediaPlaybackReadAttributePlaybackStateWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaPlayback * cluster = [[CHIPMediaPlayback alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePlaybackStateWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaPlayback PlaybackState Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaPlaybackReadAttributeStartTimeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"MediaPlaybackReadAttributeStartTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaPlayback * cluster = [[CHIPMediaPlayback alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStartTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaPlayback StartTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaPlaybackReadAttributeDurationWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"MediaPlaybackReadAttributeDurationWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaPlayback * cluster = [[CHIPMediaPlayback alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDurationWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaPlayback Duration Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaPlaybackReadAttributePositionUpdatedAtWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"MediaPlaybackReadAttributePositionUpdatedAtWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaPlayback * cluster = [[CHIPMediaPlayback alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePositionUpdatedAtWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaPlayback PositionUpdatedAt Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaPlaybackReadAttributePositionWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"MediaPlaybackReadAttributePositionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaPlayback * cluster = [[CHIPMediaPlayback alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePositionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaPlayback Position Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaPlaybackReadAttributePlaybackSpeedWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"MediaPlaybackReadAttributePlaybackSpeedWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaPlayback * cluster = [[CHIPMediaPlayback alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePlaybackSpeedWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaPlayback PlaybackSpeed Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaPlaybackReadAttributeSeekRangeEndWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"MediaPlaybackReadAttributeSeekRangeEndWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaPlayback * cluster = [[CHIPMediaPlayback alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSeekRangeEndWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaPlayback SeekRangeEnd Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaPlaybackReadAttributeSeekRangeStartWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"MediaPlaybackReadAttributeSeekRangeStartWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaPlayback * cluster = [[CHIPMediaPlayback alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSeekRangeStartWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaPlayback SeekRangeStart Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterMediaPlaybackReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"MediaPlaybackReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPMediaPlayback * cluster = [[CHIPMediaPlayback alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"MediaPlayback ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterModeSelectReadAttributeCurrentModeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ModeSelectReadAttributeCurrentModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPModeSelect * cluster = [[CHIPModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ModeSelect CurrentMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterModeSelectReadAttributeSupportedModesWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ModeSelectReadAttributeSupportedModesWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPModeSelect * cluster = [[CHIPModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSupportedModesWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ModeSelect SupportedModes Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterModeSelectReadAttributeOnModeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ModeSelectReadAttributeOnModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPModeSelect * cluster = [[CHIPModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ModeSelect OnMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterModeSelectWriteAttributeOnModeWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ModeSelectWriteAttributeOnModeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPModeSelect * cluster = [[CHIPModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0);
    [cluster writeAttributeOnModeWithValue:value
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"ModeSelect OnMode Error: %@", err);
                             XCTAssertEqual(err.code, 0);
                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterModeSelectReadAttributeStartUpModeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ModeSelectReadAttributeStartUpModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPModeSelect * cluster = [[CHIPModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStartUpModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ModeSelect StartUpMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterModeSelectReadAttributeDescriptionWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ModeSelectReadAttributeDescriptionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPModeSelect * cluster = [[CHIPModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDescriptionWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ModeSelect Description Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterModeSelectReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ModeSelectReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPModeSelect * cluster = [[CHIPModeSelect alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ModeSelect ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterNetworkCommissioningReadAttributeFeatureMapWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"NetworkCommissioningReadAttributeFeatureMapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPNetworkCommissioning * cluster = [[CHIPNetworkCommissioning alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"NetworkCommissioning FeatureMap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterNetworkCommissioningReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"NetworkCommissioningReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPNetworkCommissioning * cluster = [[CHIPNetworkCommissioning alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"NetworkCommissioning ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOtaSoftwareUpdateProviderReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OtaSoftwareUpdateProviderReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOtaSoftwareUpdateProvider * cluster = [[CHIPOtaSoftwareUpdateProvider alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OtaSoftwareUpdateProvider ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOtaSoftwareUpdateRequestorReadAttributeDefaultOtaProviderWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OtaSoftwareUpdateRequestorReadAttributeDefaultOtaProviderWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOtaSoftwareUpdateRequestor * cluster = [[CHIPOtaSoftwareUpdateRequestor alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDefaultOtaProviderWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OtaSoftwareUpdateRequestor DefaultOtaProvider Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOtaSoftwareUpdateRequestorWriteAttributeDefaultOtaProviderWithValue
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OtaSoftwareUpdateRequestorWriteAttributeDefaultOtaProviderWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOtaSoftwareUpdateRequestor * cluster = [[CHIPOtaSoftwareUpdateRequestor alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    NSData * _Nonnull value = [@"Test" dataUsingEncoding:NSUTF8StringEncoding];
    [cluster writeAttributeDefaultOtaProviderWithValue:value
                                     completionHandler:^(NSError * _Nullable err) {
                                         NSLog(@"OtaSoftwareUpdateRequestor DefaultOtaProvider Error: %@", err);
                                         XCTAssertEqual(err.code, 0);
                                         [expectation fulfill];
                                     }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterOtaSoftwareUpdateRequestorReadAttributeUpdatePossibleWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OtaSoftwareUpdateRequestorReadAttributeUpdatePossibleWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOtaSoftwareUpdateRequestor * cluster = [[CHIPOtaSoftwareUpdateRequestor alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeUpdatePossibleWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OtaSoftwareUpdateRequestor UpdatePossible Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOtaSoftwareUpdateRequestorReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OtaSoftwareUpdateRequestorReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOtaSoftwareUpdateRequestor * cluster = [[CHIPOtaSoftwareUpdateRequestor alloc] initWithDevice:device
                                                                                             endpoint:0
                                                                                                queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OtaSoftwareUpdateRequestor ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOccupancySensingReadAttributeOccupancyWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OccupancySensingReadAttributeOccupancyWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOccupancySensing * cluster = [[CHIPOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancyWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OccupancySensing Occupancy Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOccupancySensingReadAttributeOccupancySensorTypeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OccupancySensingReadAttributeOccupancySensorTypeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOccupancySensing * cluster = [[CHIPOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancySensorTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OccupancySensing OccupancySensorType Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOccupancySensingReadAttributeOccupancySensorTypeBitmapWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OccupancySensingReadAttributeOccupancySensorTypeBitmapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOccupancySensing * cluster = [[CHIPOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOccupancySensorTypeBitmapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OccupancySensing OccupancySensorTypeBitmap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOccupancySensingReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OccupancySensingReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOccupancySensing * cluster = [[CHIPOccupancySensing alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OccupancySensing ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffReadAttributeOnOffWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"OnOffReadAttributeOnOffWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOff OnOff Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffReadAttributeGlobalSceneControlWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OnOffReadAttributeGlobalSceneControlWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeGlobalSceneControlWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOff GlobalSceneControl Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffReadAttributeOnTimeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"OnOffReadAttributeOnTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOnTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOff OnTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffWriteAttributeOnTimeWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"OnOffWriteAttributeOnTimeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0);
    [cluster writeAttributeOnTimeWithValue:value
                         completionHandler:^(NSError * _Nullable err) {
                             NSLog(@"OnOff OnTime Error: %@", err);
                             XCTAssertEqual(err.code, 0);
                             [expectation fulfill];
                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterOnOffReadAttributeOffWaitTimeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"OnOffReadAttributeOffWaitTimeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOffWaitTimeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOff OffWaitTime Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffWriteAttributeOffWaitTimeWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"OnOffWriteAttributeOffWaitTimeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0);
    [cluster writeAttributeOffWaitTimeWithValue:value
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"OnOff OffWaitTime Error: %@", err);
                                  XCTAssertEqual(err.code, 0);
                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterOnOffReadAttributeStartUpOnOffWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"OnOffReadAttributeStartUpOnOffWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStartUpOnOffWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOff StartUpOnOff Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffWriteAttributeStartUpOnOffWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"OnOffWriteAttributeStartUpOnOffWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0);
    [cluster writeAttributeStartUpOnOffWithValue:value
                               completionHandler:^(NSError * _Nullable err) {
                                   NSLog(@"OnOff StartUpOnOff Error: %@", err);
                                   XCTAssertEqual(err.code, 0);
                                   [expectation fulfill];
                               }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterOnOffReadAttributeFeatureMapWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"OnOffReadAttributeFeatureMapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOff FeatureMap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"OnOffReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOff * cluster = [[CHIPOnOff alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOff ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffSwitchConfigurationReadAttributeSwitchTypeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OnOffSwitchConfigurationReadAttributeSwitchTypeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOffSwitchConfiguration * cluster = [[CHIPOnOffSwitchConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSwitchTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOffSwitchConfiguration SwitchType Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffSwitchConfigurationReadAttributeSwitchActionsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OnOffSwitchConfigurationReadAttributeSwitchActionsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOffSwitchConfiguration * cluster = [[CHIPOnOffSwitchConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSwitchActionsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOffSwitchConfiguration SwitchActions Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOnOffSwitchConfigurationWriteAttributeSwitchActionsWithValue
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OnOffSwitchConfigurationWriteAttributeSwitchActionsWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOffSwitchConfiguration * cluster = [[CHIPOnOffSwitchConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeSwitchActionsWithValue:value
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"OnOffSwitchConfiguration SwitchActions Error: %@", err);
                                    XCTAssertEqual(err.code, 0);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterOnOffSwitchConfigurationReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OnOffSwitchConfigurationReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOnOffSwitchConfiguration * cluster = [[CHIPOnOffSwitchConfiguration alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OnOffSwitchConfiguration ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOperationalCredentialsReadAttributeFabricsListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OperationalCredentialsReadAttributeFabricsListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOperationalCredentials * cluster = [[CHIPOperationalCredentials alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFabricsListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OperationalCredentials FabricsList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOperationalCredentialsReadAttributeSupportedFabricsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OperationalCredentialsReadAttributeSupportedFabricsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOperationalCredentials * cluster = [[CHIPOperationalCredentials alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSupportedFabricsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OperationalCredentials SupportedFabrics Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOperationalCredentialsReadAttributeCommissionedFabricsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OperationalCredentialsReadAttributeCommissionedFabricsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOperationalCredentials * cluster = [[CHIPOperationalCredentials alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCommissionedFabricsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OperationalCredentials CommissionedFabrics Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOperationalCredentialsReadAttributeTrustedRootCertificatesWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OperationalCredentialsReadAttributeTrustedRootCertificatesWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOperationalCredentials * cluster = [[CHIPOperationalCredentials alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTrustedRootCertificatesWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OperationalCredentials TrustedRootCertificates Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOperationalCredentialsReadAttributeCurrentFabricIndexWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OperationalCredentialsReadAttributeCurrentFabricIndexWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOperationalCredentials * cluster = [[CHIPOperationalCredentials alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentFabricIndexWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OperationalCredentials CurrentFabricIndex Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterOperationalCredentialsReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"OperationalCredentialsReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPOperationalCredentials * cluster = [[CHIPOperationalCredentials alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"OperationalCredentials ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeStatusWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"PowerSourceReadAttributeStatusWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource Status Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeOrderWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"PowerSourceReadAttributeOrderWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOrderWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource Order Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeDescriptionWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"PowerSourceReadAttributeDescriptionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDescriptionWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource Description Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeBatteryVoltageWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PowerSourceReadAttributeBatteryVoltageWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBatteryVoltageWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource BatteryVoltage Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeBatteryPercentRemainingWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PowerSourceReadAttributeBatteryPercentRemainingWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBatteryPercentRemainingWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource BatteryPercentRemaining Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeBatteryTimeRemainingWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PowerSourceReadAttributeBatteryTimeRemainingWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBatteryTimeRemainingWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource BatteryTimeRemaining Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeBatteryChargeLevelWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PowerSourceReadAttributeBatteryChargeLevelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBatteryChargeLevelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource BatteryChargeLevel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeActiveBatteryFaultsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PowerSourceReadAttributeActiveBatteryFaultsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActiveBatteryFaultsWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource ActiveBatteryFaults Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeBatteryChargeStateWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PowerSourceReadAttributeBatteryChargeStateWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBatteryChargeStateWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource BatteryChargeState Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeFeatureMapWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"PowerSourceReadAttributeFeatureMapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource FeatureMap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPowerSourceReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PowerSourceReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPowerSource * cluster = [[CHIPPowerSource alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PowerSource ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPressureMeasurementReadAttributeMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PressureMeasurementReadAttributeMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPressureMeasurement * cluster = [[CHIPPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PressureMeasurement MeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPressureMeasurementReadAttributeMinMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PressureMeasurementReadAttributeMinMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPressureMeasurement * cluster = [[CHIPPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PressureMeasurement MinMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPressureMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PressureMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPressureMeasurement * cluster = [[CHIPPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PressureMeasurement MaxMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPressureMeasurementReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PressureMeasurementReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPressureMeasurement * cluster = [[CHIPPressureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PressureMeasurement ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMaxPressureWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMaxPressureWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxPressureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MaxPressure Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMaxSpeedWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMaxSpeedWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxSpeedWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MaxSpeed Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMaxFlowWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMaxFlowWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxFlowWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MaxFlow Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMinConstPressureWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMinConstPressureWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinConstPressureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MinConstPressure Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMaxConstPressureWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMaxConstPressureWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxConstPressureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MaxConstPressure Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMinCompPressureWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMinCompPressureWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinCompPressureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MinCompPressure Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMaxCompPressureWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMaxCompPressureWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxCompPressureWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MaxCompPressure Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMinConstSpeedWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMinConstSpeedWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinConstSpeedWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MinConstSpeed Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMaxConstSpeedWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMaxConstSpeedWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxConstSpeedWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MaxConstSpeed Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMinConstFlowWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMinConstFlowWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinConstFlowWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MinConstFlow Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMaxConstFlowWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMaxConstFlowWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxConstFlowWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MaxConstFlow Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMinConstTempWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMinConstTempWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinConstTempWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MinConstTemp Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeMaxConstTempWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeMaxConstTempWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxConstTempWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl MaxConstTemp Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributePumpStatusWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributePumpStatusWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePumpStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl PumpStatus Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeEffectiveOperationModeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeEffectiveOperationModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEffectiveOperationModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl EffectiveOperationMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeEffectiveControlModeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeEffectiveControlModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEffectiveControlModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl EffectiveControlMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeCapacityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeCapacityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCapacityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl Capacity Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeSpeedWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeSpeedWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSpeedWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl Speed Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeLifetimeRunningHoursWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeLifetimeRunningHoursWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLifetimeRunningHoursWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl LifetimeRunningHours Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlWriteAttributeLifetimeRunningHoursWithValue
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlWriteAttributeLifetimeRunningHoursWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x000000);
    [cluster writeAttributeLifetimeRunningHoursWithValue:value
                                       completionHandler:^(NSError * _Nullable err) {
                                           NSLog(@"PumpConfigurationAndControl LifetimeRunningHours Error: %@", err);
                                           XCTAssertEqual(err.code, 0);
                                           [expectation fulfill];
                                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterPumpConfigurationAndControlReadAttributePowerWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributePowerWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePowerWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl Power Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlWriteAttributePowerWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"PumpConfigurationAndControlWriteAttributePowerWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x000000);
    [cluster writeAttributePowerWithValue:value
                        completionHandler:^(NSError * _Nullable err) {
                            NSLog(@"PumpConfigurationAndControl Power Error: %@", err);
                            XCTAssertEqual(err.code, 0);
                            [expectation fulfill];
                        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterPumpConfigurationAndControlReadAttributeLifetimeEnergyConsumedWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeLifetimeEnergyConsumedWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLifetimeEnergyConsumedWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl LifetimeEnergyConsumed Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeOperationModeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeOperationModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOperationModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl OperationMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlWriteAttributeOperationModeWithValue
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlWriteAttributeOperationModeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeOperationModeWithValue:value
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"PumpConfigurationAndControl OperationMode Error: %@", err);
                                    XCTAssertEqual(err.code, 0);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterPumpConfigurationAndControlReadAttributeControlModeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeControlModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeControlModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl ControlMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlWriteAttributeControlModeWithValue
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlWriteAttributeControlModeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeControlModeWithValue:value
                              completionHandler:^(NSError * _Nullable err) {
                                  NSLog(@"PumpConfigurationAndControl ControlMode Error: %@", err);
                                  XCTAssertEqual(err.code, 0);
                                  [expectation fulfill];
                              }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterPumpConfigurationAndControlReadAttributeAlarmMaskWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeAlarmMaskWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAlarmMaskWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl AlarmMask Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeFeatureMapWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeFeatureMapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl FeatureMap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterPumpConfigurationAndControlReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"PumpConfigurationAndControlReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPPumpConfigurationAndControl * cluster = [[CHIPPumpConfigurationAndControl alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"PumpConfigurationAndControl ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterRelativeHumidityMeasurementReadAttributeMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"RelativeHumidityMeasurementReadAttributeMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPRelativeHumidityMeasurement * cluster = [[CHIPRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"RelativeHumidityMeasurement MeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterRelativeHumidityMeasurementReadAttributeMinMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"RelativeHumidityMeasurementReadAttributeMinMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPRelativeHumidityMeasurement * cluster = [[CHIPRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"RelativeHumidityMeasurement MinMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterRelativeHumidityMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"RelativeHumidityMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPRelativeHumidityMeasurement * cluster = [[CHIPRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"RelativeHumidityMeasurement MaxMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterRelativeHumidityMeasurementReadAttributeToleranceWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"RelativeHumidityMeasurementReadAttributeToleranceWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPRelativeHumidityMeasurement * cluster = [[CHIPRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeToleranceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"RelativeHumidityMeasurement Tolerance Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterRelativeHumidityMeasurementReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"RelativeHumidityMeasurementReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPRelativeHumidityMeasurement * cluster = [[CHIPRelativeHumidityMeasurement alloc] initWithDevice:device
                                                                                               endpoint:1
                                                                                                  queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"RelativeHumidityMeasurement ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterScenesReadAttributeSceneCountWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ScenesReadAttributeSceneCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPScenes * cluster = [[CHIPScenes alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSceneCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Scenes SceneCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterScenesReadAttributeCurrentSceneWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ScenesReadAttributeCurrentSceneWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPScenes * cluster = [[CHIPScenes alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentSceneWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Scenes CurrentScene Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterScenesReadAttributeCurrentGroupWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ScenesReadAttributeCurrentGroupWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPScenes * cluster = [[CHIPScenes alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentGroupWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Scenes CurrentGroup Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterScenesReadAttributeSceneValidWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ScenesReadAttributeSceneValidWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPScenes * cluster = [[CHIPScenes alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSceneValidWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Scenes SceneValid Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterScenesReadAttributeNameSupportWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ScenesReadAttributeNameSupportWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPScenes * cluster = [[CHIPScenes alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNameSupportWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Scenes NameSupport Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterScenesReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"ScenesReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPScenes * cluster = [[CHIPScenes alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Scenes ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSoftwareDiagnosticsReadAttributeThreadMetricsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"SoftwareDiagnosticsReadAttributeThreadMetricsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSoftwareDiagnostics * cluster = [[CHIPSoftwareDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeThreadMetricsWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"SoftwareDiagnostics ThreadMetrics Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSoftwareDiagnosticsReadAttributeCurrentHeapFreeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"SoftwareDiagnosticsReadAttributeCurrentHeapFreeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSoftwareDiagnostics * cluster = [[CHIPSoftwareDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHeapFreeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"SoftwareDiagnostics CurrentHeapFree Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSoftwareDiagnosticsReadAttributeCurrentHeapUsedWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"SoftwareDiagnosticsReadAttributeCurrentHeapUsedWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSoftwareDiagnostics * cluster = [[CHIPSoftwareDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHeapUsedWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"SoftwareDiagnostics CurrentHeapUsed Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSoftwareDiagnosticsReadAttributeCurrentHeapHighWatermarkWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"SoftwareDiagnosticsReadAttributeCurrentHeapHighWatermarkWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSoftwareDiagnostics * cluster = [[CHIPSoftwareDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentHeapHighWatermarkWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"SoftwareDiagnostics CurrentHeapHighWatermark Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSoftwareDiagnosticsReadAttributeFeatureMapWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"SoftwareDiagnosticsReadAttributeFeatureMapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSoftwareDiagnostics * cluster = [[CHIPSoftwareDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"SoftwareDiagnostics FeatureMap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSoftwareDiagnosticsReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"SoftwareDiagnosticsReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSoftwareDiagnostics * cluster = [[CHIPSoftwareDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"SoftwareDiagnostics ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSwitchReadAttributeNumberOfPositionsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"SwitchReadAttributeNumberOfPositionsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSwitch * cluster = [[CHIPSwitch alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNumberOfPositionsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Switch NumberOfPositions Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSwitchReadAttributeCurrentPositionWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"SwitchReadAttributeCurrentPositionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSwitch * cluster = [[CHIPSwitch alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentPositionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Switch CurrentPosition Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSwitchReadAttributeMultiPressMaxWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"SwitchReadAttributeMultiPressMaxWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSwitch * cluster = [[CHIPSwitch alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMultiPressMaxWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Switch MultiPressMax Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSwitchReadAttributeFeatureMapWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"SwitchReadAttributeFeatureMapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSwitch * cluster = [[CHIPSwitch alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Switch FeatureMap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterSwitchReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"SwitchReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPSwitch * cluster = [[CHIPSwitch alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"Switch ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTvChannelReadAttributeTvChannelListWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"TvChannelReadAttributeTvChannelListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTvChannel * cluster = [[CHIPTvChannel alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTvChannelListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TvChannel TvChannelList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTvChannelReadAttributeTvChannelLineupWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TvChannelReadAttributeTvChannelLineupWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTvChannel * cluster = [[CHIPTvChannel alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTvChannelLineupWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TvChannel TvChannelLineup Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTvChannelReadAttributeCurrentTvChannelWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TvChannelReadAttributeCurrentTvChannelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTvChannel * cluster = [[CHIPTvChannel alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentTvChannelWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TvChannel CurrentTvChannel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTvChannelReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TvChannelReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTvChannel * cluster = [[CHIPTvChannel alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TvChannel ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTargetNavigatorReadAttributeTargetNavigatorListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TargetNavigatorReadAttributeTargetNavigatorListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTargetNavigator * cluster = [[CHIPTargetNavigator alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTargetNavigatorListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TargetNavigator TargetNavigatorList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTargetNavigatorReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TargetNavigatorReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTargetNavigator * cluster = [[CHIPTargetNavigator alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TargetNavigator ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTemperatureMeasurementReadAttributeMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TemperatureMeasurementReadAttributeMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTemperatureMeasurement * cluster = [[CHIPTemperatureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TemperatureMeasurement MeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTemperatureMeasurementReadAttributeMinMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TemperatureMeasurementReadAttributeMinMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTemperatureMeasurement * cluster = [[CHIPTemperatureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMinMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TemperatureMeasurement MinMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTemperatureMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TemperatureMeasurementReadAttributeMaxMeasuredValueWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTemperatureMeasurement * cluster = [[CHIPTemperatureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMaxMeasuredValueWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TemperatureMeasurement MaxMeasuredValue Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTemperatureMeasurementReadAttributeToleranceWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TemperatureMeasurementReadAttributeToleranceWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTemperatureMeasurement * cluster = [[CHIPTemperatureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeToleranceWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TemperatureMeasurement Tolerance Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterTemperatureMeasurementReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"TemperatureMeasurementReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPTemperatureMeasurement * cluster = [[CHIPTemperatureMeasurement alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"TemperatureMeasurement ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThermostatUserInterfaceConfigurationReadAttributeTemperatureDisplayModeWithCompletionHandler
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"ThermostatUserInterfaceConfigurationReadAttributeTemperatureDisplayModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThermostatUserInterfaceConfiguration * cluster = [[CHIPThermostatUserInterfaceConfiguration alloc] initWithDevice:device
                                                                                                                 endpoint:1
                                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTemperatureDisplayModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThermostatUserInterfaceConfiguration TemperatureDisplayMode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThermostatUserInterfaceConfigurationWriteAttributeTemperatureDisplayModeWithValue
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThermostatUserInterfaceConfigurationWriteAttributeTemperatureDisplayModeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThermostatUserInterfaceConfiguration * cluster = [[CHIPThermostatUserInterfaceConfiguration alloc] initWithDevice:device
                                                                                                                 endpoint:1
                                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeTemperatureDisplayModeWithValue:value
                                         completionHandler:^(NSError * _Nullable err) {
                                             NSLog(@"ThermostatUserInterfaceConfiguration TemperatureDisplayMode Error: %@", err);
                                             XCTAssertEqual(err.code, 0);
                                             [expectation fulfill];
                                         }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterThermostatUserInterfaceConfigurationReadAttributeKeypadLockoutWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThermostatUserInterfaceConfigurationReadAttributeKeypadLockoutWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThermostatUserInterfaceConfiguration * cluster = [[CHIPThermostatUserInterfaceConfiguration alloc] initWithDevice:device
                                                                                                                 endpoint:1
                                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeKeypadLockoutWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThermostatUserInterfaceConfiguration KeypadLockout Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThermostatUserInterfaceConfigurationWriteAttributeKeypadLockoutWithValue
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThermostatUserInterfaceConfigurationWriteAttributeKeypadLockoutWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThermostatUserInterfaceConfiguration * cluster = [[CHIPThermostatUserInterfaceConfiguration alloc] initWithDevice:device
                                                                                                                 endpoint:1
                                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeKeypadLockoutWithValue:value
                                completionHandler:^(NSError * _Nullable err) {
                                    NSLog(@"ThermostatUserInterfaceConfiguration KeypadLockout Error: %@", err);
                                    XCTAssertEqual(err.code, 0);
                                    [expectation fulfill];
                                }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterThermostatUserInterfaceConfigurationReadAttributeScheduleProgrammingVisibilityWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:
                  @"ThermostatUserInterfaceConfigurationReadAttributeScheduleProgrammingVisibilityWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThermostatUserInterfaceConfiguration * cluster = [[CHIPThermostatUserInterfaceConfiguration alloc] initWithDevice:device
                                                                                                                 endpoint:1
                                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeScheduleProgrammingVisibilityWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"ThermostatUserInterfaceConfiguration ScheduleProgrammingVisibility Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThermostatUserInterfaceConfigurationWriteAttributeScheduleProgrammingVisibilityWithValue
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"ThermostatUserInterfaceConfigurationWriteAttributeScheduleProgrammingVisibilityWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThermostatUserInterfaceConfiguration * cluster = [[CHIPThermostatUserInterfaceConfiguration alloc] initWithDevice:device
                                                                                                                 endpoint:1
                                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster
        writeAttributeScheduleProgrammingVisibilityWithValue:value
                                           completionHandler:^(NSError * _Nullable err) {
                                               NSLog(
                                                   @"ThermostatUserInterfaceConfiguration ScheduleProgrammingVisibility Error: %@",
                                                   err);
                                               XCTAssertEqual(err.code, 0);
                                               [expectation fulfill];
                                           }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterThermostatUserInterfaceConfigurationReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThermostatUserInterfaceConfigurationReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThermostatUserInterfaceConfiguration * cluster = [[CHIPThermostatUserInterfaceConfiguration alloc] initWithDevice:device
                                                                                                                 endpoint:1
                                                                                                                    queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThermostatUserInterfaceConfiguration ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeChannelWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeChannelWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeChannelWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics Channel Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRoutingRoleWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRoutingRoleWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRoutingRoleWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RoutingRole Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeNetworkNameWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeNetworkNameWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNetworkNameWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics NetworkName Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributePanIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributePanIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePanIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics PanId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeExtendedPanIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeExtendedPanIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeExtendedPanIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics ExtendedPanId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeMeshLocalPrefixWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeMeshLocalPrefixWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeMeshLocalPrefixWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics MeshLocalPrefix Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeOverrunCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeOverrunCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOverrunCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics OverrunCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeNeighborTableListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeNeighborTableListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeNeighborTableListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics NeighborTableList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRouteTableListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRouteTableListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRouteTableListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RouteTableList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributePartitionIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributePartitionIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePartitionIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics PartitionId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeWeightingWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeWeightingWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeWeightingWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics Weighting Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeDataVersionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeDataVersionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDataVersionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics DataVersion Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeStableDataVersionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeStableDataVersionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeStableDataVersionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics StableDataVersion Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeLeaderRouterIdWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeLeaderRouterIdWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLeaderRouterIdWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics LeaderRouterId Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeDetachedRoleCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeDetachedRoleCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDetachedRoleCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics DetachedRoleCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeChildRoleCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeChildRoleCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeChildRoleCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics ChildRoleCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRouterRoleCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRouterRoleCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRouterRoleCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RouterRoleCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeLeaderRoleCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeLeaderRoleCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeLeaderRoleCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics LeaderRoleCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeAttachAttemptCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeAttachAttemptCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeAttachAttemptCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics AttachAttemptCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributePartitionIdChangeCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributePartitionIdChangeCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePartitionIdChangeCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics PartitionIdChangeCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeBetterPartitionAttachAttemptCountWithCompletionHandler
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeBetterPartitionAttachAttemptCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeBetterPartitionAttachAttemptCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"ThreadNetworkDiagnostics BetterPartitionAttachAttemptCount Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeParentChangeCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeParentChangeCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeParentChangeCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics ParentChangeCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxTotalCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxTotalCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxTotalCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxTotalCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxUnicastCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxUnicastCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxUnicastCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxUnicastCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxBroadcastCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxBroadcastCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxBroadcastCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxBroadcastCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxAckRequestedCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxAckRequestedCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxAckRequestedCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxAckRequestedCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxAckedCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxAckedCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxAckedCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxAckedCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxNoAckRequestedCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxNoAckRequestedCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxNoAckRequestedCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxNoAckRequestedCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxDataCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxDataCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxDataCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxDataCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxDataPollCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxDataPollCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxDataPollCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxDataPollCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxBeaconCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxBeaconCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxBeaconCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxBeaconCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxBeaconRequestCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxBeaconRequestCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxBeaconRequestCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxBeaconRequestCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxOtherCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxOtherCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxOtherCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxOtherCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxRetryCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxRetryCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxRetryCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxRetryCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxDirectMaxRetryExpiryCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxDirectMaxRetryExpiryCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxDirectMaxRetryExpiryCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxDirectMaxRetryExpiryCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxIndirectMaxRetryExpiryCountWithCompletionHandler
{
    XCTestExpectation * expectation = [self
        expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxIndirectMaxRetryExpiryCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeTxIndirectMaxRetryExpiryCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"ThreadNetworkDiagnostics TxIndirectMaxRetryExpiryCount Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxErrCcaCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxErrCcaCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxErrCcaCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxErrCcaCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxErrAbortCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxErrAbortCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxErrAbortCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxErrAbortCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeTxErrBusyChannelCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeTxErrBusyChannelCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTxErrBusyChannelCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics TxErrBusyChannelCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxTotalCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxTotalCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxTotalCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxTotalCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxUnicastCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxUnicastCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxUnicastCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxUnicastCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxBroadcastCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxBroadcastCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxBroadcastCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxBroadcastCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxDataCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxDataCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxDataCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxDataCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxDataPollCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxDataPollCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxDataPollCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxDataPollCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxBeaconCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxBeaconCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxBeaconCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxBeaconCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxBeaconRequestCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxBeaconRequestCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxBeaconRequestCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxBeaconRequestCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxOtherCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxOtherCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxOtherCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxOtherCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxAddressFilteredCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxAddressFilteredCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxAddressFilteredCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxAddressFilteredCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxDestAddrFilteredCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxDestAddrFilteredCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxDestAddrFilteredCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxDestAddrFilteredCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxDuplicatedCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxDuplicatedCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxDuplicatedCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxDuplicatedCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrNoFrameCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxErrNoFrameCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxErrNoFrameCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxErrNoFrameCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrUnknownNeighborCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxErrUnknownNeighborCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxErrUnknownNeighborCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxErrUnknownNeighborCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrInvalidSrcAddrCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxErrInvalidSrcAddrCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxErrInvalidSrcAddrCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxErrInvalidSrcAddrCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrSecCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxErrSecCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxErrSecCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxErrSecCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrFcsCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxErrFcsCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxErrFcsCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxErrFcsCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeRxErrOtherCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeRxErrOtherCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRxErrOtherCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics RxErrOtherCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeActiveTimestampWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeActiveTimestampWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActiveTimestampWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics ActiveTimestamp Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributePendingTimestampWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributePendingTimestampWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePendingTimestampWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics PendingTimestamp Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeDelayWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeDelayWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeDelayWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics Delay Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeSecurityPolicyWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeSecurityPolicyWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSecurityPolicyWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics SecurityPolicy Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeChannelMaskWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeChannelMaskWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeChannelMaskWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics ChannelMask Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeOperationalDatasetComponentsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeOperationalDatasetComponentsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOperationalDatasetComponentsWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics OperationalDatasetComponents Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeActiveNetworkFaultsListWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeActiveNetworkFaultsListWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeActiveNetworkFaultsListWithCompletionHandler:^(NSArray * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics ActiveNetworkFaultsList Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterThreadNetworkDiagnosticsReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"ThreadNetworkDiagnosticsReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPThreadNetworkDiagnostics * cluster = [[CHIPThreadNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"ThreadNetworkDiagnostics ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWakeOnLanReadAttributeWakeOnLanMacAddressWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WakeOnLanReadAttributeWakeOnLanMacAddressWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWakeOnLan * cluster = [[CHIPWakeOnLan alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeWakeOnLanMacAddressWithCompletionHandler:^(NSString * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WakeOnLan WakeOnLanMacAddress Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWakeOnLanReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WakeOnLanReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWakeOnLan * cluster = [[CHIPWakeOnLan alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WakeOnLan ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeBssidWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeBssidWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBssidWithCompletionHandler:^(NSData * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics Bssid Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeSecurityTypeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeSecurityTypeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSecurityTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics SecurityType Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeWiFiVersionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeWiFiVersionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeWiFiVersionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics WiFiVersion Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeChannelNumberWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeChannelNumberWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeChannelNumberWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics ChannelNumber Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeRssiWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeRssiWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeRssiWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics Rssi Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeBeaconLostCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeBeaconLostCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBeaconLostCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics BeaconLostCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeBeaconRxCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeBeaconRxCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeBeaconRxCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics BeaconRxCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributePacketMulticastRxCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributePacketMulticastRxCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePacketMulticastRxCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics PacketMulticastRxCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributePacketMulticastTxCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributePacketMulticastTxCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePacketMulticastTxCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics PacketMulticastTxCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributePacketUnicastRxCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributePacketUnicastRxCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePacketUnicastRxCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics PacketUnicastRxCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributePacketUnicastTxCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributePacketUnicastTxCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributePacketUnicastTxCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics PacketUnicastTxCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeCurrentMaxRateWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeCurrentMaxRateWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentMaxRateWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics CurrentMaxRate Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeOverrunCountWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeOverrunCountWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOverrunCountWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics OverrunCount Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeFeatureMapWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeFeatureMapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics FeatureMap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWiFiNetworkDiagnosticsReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WiFiNetworkDiagnosticsReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWiFiNetworkDiagnostics * cluster = [[CHIPWiFiNetworkDiagnostics alloc] initWithDevice:device endpoint:0 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WiFiNetworkDiagnostics ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeTypeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"WindowCoveringReadAttributeTypeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering Type Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeCurrentPositionLiftWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeCurrentPositionLiftWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentPositionLiftWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering CurrentPositionLift Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeCurrentPositionTiltWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeCurrentPositionTiltWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeCurrentPositionTiltWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering CurrentPositionTilt Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeConfigStatusWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeConfigStatusWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeConfigStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering ConfigStatus Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeCurrentPositionLiftPercentageWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeCurrentPositionLiftPercentageWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionLiftPercentageWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"WindowCovering CurrentPositionLiftPercentage Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeCurrentPositionTiltPercentageWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeCurrentPositionTiltPercentageWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionTiltPercentageWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"WindowCovering CurrentPositionTiltPercentage Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeOperationalStatusWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeOperationalStatusWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeOperationalStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering OperationalStatus Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeTargetPositionLiftPercent100thsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeTargetPositionLiftPercent100thsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeTargetPositionLiftPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"WindowCovering TargetPositionLiftPercent100ths Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeTargetPositionTiltPercent100thsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeTargetPositionTiltPercent100thsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeTargetPositionTiltPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"WindowCovering TargetPositionTiltPercent100ths Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeEndProductTypeWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeEndProductTypeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeEndProductTypeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering EndProductType Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeCurrentPositionLiftPercent100thsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeCurrentPositionLiftPercent100thsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionLiftPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"WindowCovering CurrentPositionLiftPercent100ths Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeCurrentPositionTiltPercent100thsWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeCurrentPositionTiltPercent100thsWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster
        readAttributeCurrentPositionTiltPercent100thsWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
            NSLog(@"WindowCovering CurrentPositionTiltPercent100ths Error: %@", err);
            XCTAssertEqual(err.code, 0);
            [expectation fulfill];
        }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeInstalledOpenLimitLiftWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeInstalledOpenLimitLiftWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledOpenLimitLiftWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering InstalledOpenLimitLift Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeInstalledClosedLimitLiftWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeInstalledClosedLimitLiftWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledClosedLimitLiftWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering InstalledClosedLimitLift Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeInstalledOpenLimitTiltWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeInstalledOpenLimitTiltWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledOpenLimitTiltWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering InstalledOpenLimitTilt Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeInstalledClosedLimitTiltWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeInstalledClosedLimitTiltWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeInstalledClosedLimitTiltWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering InstalledClosedLimitTilt Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeModeWithCompletionHandler
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"WindowCoveringReadAttributeModeWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeModeWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering Mode Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringWriteAttributeModeWithValue
{
    XCTestExpectation * expectation = [self expectationWithDescription:@"WindowCoveringWriteAttributeModeWithValue"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    NSNumber * _Nonnull value = @(0x00);
    [cluster writeAttributeModeWithValue:value
                       completionHandler:^(NSError * _Nullable err) {
                           NSLog(@"WindowCovering Mode Error: %@", err);
                           XCTAssertEqual(err.code, 0);
                           [expectation fulfill];
                       }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}
- (void)testSendClusterWindowCoveringReadAttributeSafetyStatusWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeSafetyStatusWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeSafetyStatusWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering SafetyStatus Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeFeatureMapWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeFeatureMapWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeFeatureMapWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering FeatureMap Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

- (void)testSendClusterWindowCoveringReadAttributeClusterRevisionWithCompletionHandler
{
    XCTestExpectation * expectation =
        [self expectationWithDescription:@"WindowCoveringReadAttributeClusterRevisionWithCompletionHandler"];

    CHIPDevice * device = GetConnectedDevice();
    dispatch_queue_t queue = dispatch_get_main_queue();
    CHIPWindowCovering * cluster = [[CHIPWindowCovering alloc] initWithDevice:device endpoint:1 queue:queue];
    XCTAssertNotNil(cluster);

    [cluster readAttributeClusterRevisionWithCompletionHandler:^(NSNumber * _Nullable value, NSError * _Nullable err) {
        NSLog(@"WindowCovering ClusterRevision Error: %@", err);
        XCTAssertEqual(err.code, 0);
        [expectation fulfill];
    }];

    [self waitForExpectationsWithTimeout:kTimeoutInSeconds handler:nil];
}

@end
