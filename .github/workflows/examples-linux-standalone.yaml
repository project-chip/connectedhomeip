# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build example - Linux Standalone

on:
    push:
    pull_request:
    merge_group:

concurrency:
    group: ${{ github.ref }}-${{ github.workflow }}-${{ (github.event_name == 'pull_request' && github.event.number) || (github.event_name == 'workflow_dispatch' && github.run_number) || github.sha }}
    cancel-in-progress: true

env:
    CHIP_NO_LOG_TIMESTAMPS: true
    
jobs:
    linux_standalone:
        name: Linux Standalone

        runs-on: ubuntu-latest
        if: github.actor != 'restyled-io[bot]'

        container:
            image: ghcr.io/project-chip/chip-build:1
            volumes:
                - "/tmp/bloat_reports:/tmp/bloat_reports"

        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Checkout submodules & Bootstrap
              uses: ./.github/actions/checkout-submodules-and-bootstrap
              with:
                platform: linux

            - name: Set up environment for size reports
              uses: ./.github/actions/setup-size-reports
              if: ${{ !env.ACT }}
              with:
                gh-context: ${{ toJson(github) }}

            - name: Build Standalone cert tool
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-chip-cert \
                        build"
            - name: Build minmdns example with platform dns
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-address-resolve-tool-platform-mdns-ipv6only \
                        build"
            - name: Build example Standalone chip tool
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-chip-tool \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug chip-tool \
                    out/linux-x64-chip-tool/chip-tool \
                    /tmp/bloat_reports/
            - name: Build example Standalone Shell
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-shell \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug shell \
                    out/linux-x64-shell/chip-shell \
                    /tmp/bloat_reports/
            - name: Build example Standalone All Clusters Server
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-all-clusters \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug all-clusters-app \
                    out/linux-x64-all-clusters/chip-all-clusters-app \
                    /tmp/bloat_reports/
            - name: Clean out build output
              run: rm -rf ./out
            - name: Build example Standalone All Clusters Minimal Server
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-all-clusters-minimal \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug all-clusters-minimal-app \
                    out/linux-x64-all-clusters-minimal/chip-all-clusters-minimal-app \
                    /tmp/bloat_reports/
            - name: Build example TV app
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-tv-app \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug tv-app \
                    out/linux-x64-tv-app/chip-tv-app \
                    /tmp/bloat_reports/
            - name: Build example Standalone TV Casting App
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-tv-casting-app \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug tv-casting-app \
                    out/linux-x64-tv-casting-app/chip-tv-casting-app \
                    /tmp/bloat_reports/
            - name: Build example lighting app with RPCs and UI
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-light-rpc-with-ui \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug+rpc+ui lighting-app \
                    out/linux-x64-light-rpc-with-ui/chip-lighting-app \
                    /tmp/bloat_reports/
            - name: Clean out build output
              run: rm -rf ./out
            - name: Build example Standalone Bridge
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-bridge \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug bridge-app \
                    out/linux-x64-bridge/chip-bridge-app \
                    /tmp/bloat_reports/
            - name: Build example OTA Provider
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-ota-provider \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug ota-provider-app \
                    out/linux-x64-ota-provider/chip-ota-provider-app \
                    /tmp/bloat_reports/
            - name: Build example OTA Requestor
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-ota-requestor \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug ota-requestor-app \
                    out/linux-x64-ota-requestor/chip-ota-requestor-app \
                    /tmp/bloat_reports/
            - name: Clean out build output
              run: rm -rf ./out
            - name: Build example Standalone Lock App
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-lock-no-thread \
                        build"
                  .environment/pigweed-venv/bin/python3 scripts/tools/memory/gh_sizes.py \
                    linux debug lock-app \
                    out/linux-x64-lock-no-thread/chip-lock-app \
                    /tmp/bloat_reports/
            - name: Build example contact sensor with UI
              run: |
                  ./scripts/run_in_build_env.sh \
                     "./scripts/build/build_examples.py \
                        --target linux-x64-contact-sensor-no-ble-with-ui \
                        build"
            - name: Uploading Size Reports
              uses: ./.github/actions/upload-size-reports
              if: ${{ !env.ACT }}
              with:
                platform-name: Linux-Standalone
