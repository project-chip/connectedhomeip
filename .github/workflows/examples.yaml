name: Examples

on:
    push:
    pull_request:

jobs:
    esp32:
        name: ESP32

        env:
            BUILD_TYPE: esp32
            BUILD_VERSION: 0.2.14
            BUILD_IMAGE: chip-build-esp32
            BUILD_ORG: connectedhomeip

        runs-on: ubuntu-latest

        container:
            image: connectedhomeip/chip-build-esp32:0.2.14 # $BUILD_IMAGE/$BUILD_ORG:$BUILD_VERSION
            volumes:
                - "/tmp/bloat_reports:/tmp/bloat_reports"
                - "/tmp/output_binaries:/tmp/output_binaries"

        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Build example Echo App
              run: scripts/examples/esp_echo_app.sh
            - name: Copy aside build products
              run:
                  mkdir -p example_binaries/$BUILD_TYPE-build; cp
                  examples/wifi-echo/server/esp32/build/chip-wifi-echo.elf  example_binaries/$BUILD_TYPE-build/chip-wifi-echo.elf

            # - name: Generate bloat report
            #   run: |
            #       mkdir -p "master_binaries/esp32-build"
            #       scripts/helpers/bloat_check.py                                                   \
            #          --token "$GITHUB_TOKEN"                                                       \
            #          --job "$GITHUB_WORKFLOW"                                                      \
            #          --artifact-download-dir "master_binaries/$BUILD_TYPE-build"                   \
            #          --build-output-dir "example_binaries/$BUILD_TYPE-build"                       \
            #          --report-file bloat_report.txt                                                \
            #          --github-repository "$GITHUB_REPOSITORY"                                      \
            #          --github-comment-pr-number "$CIRCLE_PR_NUMBER"
            - name: Copy aside bloat report & binaries
              run: |
                  cp -r example_binaries/$BUILD_TYPE-build /tmp/output_binaries/
                  # cp bloat_report.txt /tmp/bloat_reports/
            # - name: Uploading Bloat Report
            #   uses: actions/upload-artifact@v1
            #   with:
            #       name: ${{ env.BUILD_TYPE }}-bloat-report
            #       path: /tmp/bloat_reports/bloat_report.txt
            - name: Uploading Binaries
              uses: actions/upload-artifact@v1
              with:
                  name: ${{ env.BUILD_TYPE }}-example-build
                  path: /tmp/output_binaries/${{ env.BUILD_TYPE }}-build

    nrf:
        name: nRF

        env:
            BUILD_TYPE: nrf
            BUILD_VERSION: 0.2.14
            BUILD_IMAGE: chip-build-nrf-platform
            BUILD_ORG: connectedhomeip

        runs-on: ubuntu-latest

        container:
            image: connectedhomeip/chip-build-nrf-platform:0.2.14 # $BUILD_IMAGE/$BUILD_ORG:$BUILD_VERSION
            volumes:
                - "/tmp/bloat_reports:/tmp/bloat_reports"
                - "/tmp/output_binaries:/tmp/output_binaries"

        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Build example nRF5 Lock App
              run: scripts/examples/nrf_lock_app.sh
            - name: Preserve artifacts
              run:
                  mkdir -p example_binaries/nrf-build ; cp
                  examples/lock-app/nrf5/build/chip-nrf52840-lock-example.out  example_binaries/nrf-build/chip-nrf52840-lock-example.out

    linux-standalone:
        name: Linux Standalone

        env:
            BUILD_TYPE: linux
            BUILD_VERSION: 0.2.14
            BUILD_IMAGE: chip-build
            BUILD_ORG: connectedhomeip

        runs-on: ubuntu-latest

        container:
            image: connectedhomeip/chip-build:0.2.14 # $BUILD_IMAGE/$BUILD_ORG:$BUILD_VERSION
            volumes:
                - "/tmp/bloat_reports:/tmp/bloat_reports"
                - "/tmp/output_binaries:/tmp/output_binaries"

        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Build example Standalone Echo Client
              run: scripts/examples/standalone_echo_client.sh
            - name: Build example Standalone Shell
              run: scripts/examples/standalone_shell.sh
            - name: Preserve artifacts
              run: |
                  mkdir -p example_binaries/$BUILD_TYPE
                  cp examples/chip-tool/build/chip-standalone-demo.out \
                     example_binaries/$BUILD_TYPE/chip-standalone-demo.out
