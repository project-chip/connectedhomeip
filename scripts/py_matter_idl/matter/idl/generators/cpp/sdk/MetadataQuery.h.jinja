// DO NOT EDIT MANUALLY - Generated file
//
// This file provides a function to query into the MetadataProviders without 
// instansiating but the necessary Metadata
//
// based on {{input_name}}
#pragma once

#include <lib/core/DataModelTypes.h>

{%- for cluster in clusters | sort(attribute='name') %}
#include <clusters/{{cluster.name | name_for_id_usage}}/Ids.h>
#include <clusters/{{cluster.name | name_for_id_usage}}/MetadataProvider.h>
{%- endfor%}


namespace chip {
namespace app {
namespace DataModel {

// Implements a search for the AcceptedCommandEntry in multiple clusters
// If no Clusters are provided it will search all clusters
// Replacement for old Accepted Command Entry from Ember metadata using the ClusterMetadataProvider
// Provided for legacy compatibility
// We provide this function for convenience, however it is not expected to be used long-term
template <ClusterId... TClusterIds>
DataModel::AcceptedCommandEntry AcceptedCommandEntryFor(ClusterId id, CommandId command)
{
    using namespace chip::app::Clusters; 
    {%- for cluster in clusters | sort(attribute='name') %}
    if constexpr (sizeof...(TClusterIds) == 0 || ((TClusterIds == {{cluster.name}}::Id) || ...))
    {
        if(id == {{cluster.name}}::Id)
            return ClusterMetadataProvider<DataModel::AcceptedCommandEntry, {{cluster.name}}::Id>::EntryFor(command);
    }
    {%- endfor%}

    return DataModel::AcceptedCommandEntry{};
}

} // namespace DataModel
} // namespace app
} // namespace chip