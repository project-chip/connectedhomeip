/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
// This file is generated from codedriven-init-shutdown.cpp.zapt

#include <app-common/zap-generated/ids/Clusters.h>
#include <zap-generated/CodeDrivenCallback.h>

using namespace chip;

void MatterClusterServerInitCallback(EndpointId endpoint, ClusterId clusterId)
{
    switch (clusterId)
    {
    case app::Clusters::BasicInformation::Id:
        MatterBasicInformationClusterInitCallback(endpoint);
        break;
    case app::Clusters::TimeFormatLocalization::Id:
        MatterTimeFormatLocalizationClusterInitCallback(endpoint);
        break;
    case app::Clusters::DiagnosticLogs::Id:
        MatterDiagnosticLogsClusterInitCallback(endpoint);
        break;
    case app::Clusters::GeneralDiagnostics::Id:
        MatterGeneralDiagnosticsClusterInitCallback(endpoint);
        break;
    case app::Clusters::SoftwareDiagnostics::Id:
        MatterSoftwareDiagnosticsClusterInitCallback(endpoint);
        break;
    case app::Clusters::WiFiNetworkDiagnostics::Id:
        MatterWiFiNetworkDiagnosticsClusterInitCallback(endpoint);
        break;
    case app::Clusters::EthernetNetworkDiagnostics::Id:
        MatterEthernetNetworkDiagnosticsClusterInitCallback(endpoint);
        break;
    case app::Clusters::AdministratorCommissioning::Id:
        MatterAdministratorCommissioningClusterInitCallback(endpoint);
        break;
    case app::Clusters::GroupKeyManagement::Id:
        MatterGroupKeyManagementClusterInitCallback(endpoint);
        break;
    }
}

void MatterClusterServerShutdownCallback(EndpointId endpoint, ClusterId clusterId)
{
    switch (clusterId)
    {
    case app::Clusters::BasicInformation::Id:
        MatterBasicInformationClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::TimeFormatLocalization::Id:
        MatterTimeFormatLocalizationClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::DiagnosticLogs::Id:
        MatterDiagnosticLogsClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::GeneralDiagnostics::Id:
        MatterGeneralDiagnosticsClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::SoftwareDiagnostics::Id:
        MatterSoftwareDiagnosticsClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::WiFiNetworkDiagnostics::Id:
        MatterWiFiNetworkDiagnosticsClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::EthernetNetworkDiagnostics::Id:
        MatterEthernetNetworkDiagnosticsClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::AdministratorCommissioning::Id:
        MatterAdministratorCommissioningClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::GroupKeyManagement::Id:
        MatterGroupKeyManagementClusterShutdownCallback(endpoint);
        break;
    }
}
