/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
// This file is generated from codedriven-callback.h.zapt

// Prevent multiple inclusion
#pragma once

#include <app/util/basic-types.h>

void MatterBindingClusterInitCallback(chip::EndpointId endpointId);

void MatterBindingClusterShutdownCallback(chip::EndpointId endpointId);

void MatterBasicInformationClusterInitCallback(chip::EndpointId endpointId);

void MatterBasicInformationClusterShutdownCallback(chip::EndpointId endpointId);

void MatterTimeFormatLocalizationClusterInitCallback(chip::EndpointId endpointId);

void MatterTimeFormatLocalizationClusterShutdownCallback(chip::EndpointId endpointId);

void MatterDiagnosticLogsClusterInitCallback(chip::EndpointId endpointId);

void MatterDiagnosticLogsClusterShutdownCallback(chip::EndpointId endpointId);

void MatterGeneralDiagnosticsClusterInitCallback(chip::EndpointId endpointId);

void MatterGeneralDiagnosticsClusterShutdownCallback(chip::EndpointId endpointId);

void MatterSoftwareDiagnosticsClusterInitCallback(chip::EndpointId endpointId);

void MatterSoftwareDiagnosticsClusterShutdownCallback(chip::EndpointId endpointId);

void MatterWiFiNetworkDiagnosticsClusterInitCallback(chip::EndpointId endpointId);

void MatterWiFiNetworkDiagnosticsClusterShutdownCallback(chip::EndpointId endpointId);

void MatterEthernetNetworkDiagnosticsClusterInitCallback(chip::EndpointId endpointId);

void MatterEthernetNetworkDiagnosticsClusterShutdownCallback(chip::EndpointId endpointId);

void MatterAdministratorCommissioningClusterInitCallback(chip::EndpointId endpointId);

void MatterAdministratorCommissioningClusterShutdownCallback(chip::EndpointId endpointId);

void MatterGroupKeyManagementClusterInitCallback(chip::EndpointId endpointId);

void MatterGroupKeyManagementClusterShutdownCallback(chip::EndpointId endpointId);

void MatterBooleanStateClusterInitCallback(chip::EndpointId endpointId);

void MatterBooleanStateClusterShutdownCallback(chip::EndpointId endpointId);
