/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
// This file is generated from codedriven-init-shutdown.cpp.zapt

#include <cinttypes>
#include <cstdint>

#include <app-common/zap-generated/cluster-objects.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app-common/zap-generated/ids/Commands.h>
#include <app/CommandHandler.h>
#include <app/util/util.h>
#include <lib/core/CHIPSafeCasts.h>
#include <lib/support/TypeTraits.h>
#include <zap-generated/CodedrivenCallback.h>

namespace chip {

// Cluster Init Functions for Codedriven Clusters
void MatterCodedrivenClusterInitCallback(EndpointId endpoint, ClusterId clusterId)
{
    switch (clusterId)
    {
    case app::Clusters::BasicInformation::Id:
        MatterCodedrivenBasicInformationClusterInitCallback(endpoint);
        break;
    case app::Clusters::NetworkCommissioning::Id:
        MatterCodedrivenNetworkCommissioningClusterInitCallback(endpoint);
        break;
    case app::Clusters::GeneralDiagnostics::Id:
        MatterCodedrivenGeneralDiagnosticsClusterInitCallback(endpoint);
        break;
    case app::Clusters::SoftwareDiagnostics::Id:
        MatterCodedrivenSoftwareDiagnosticsClusterInitCallback(endpoint);
        break;
    case app::Clusters::WiFiNetworkDiagnostics::Id:
        MatterCodedrivenWiFiNetworkDiagnosticsClusterInitCallback(endpoint);
        break;
    case app::Clusters::EthernetNetworkDiagnostics::Id:
        MatterCodedrivenEthernetNetworkDiagnosticsClusterInitCallback(endpoint);
        break;
    case app::Clusters::AdministratorCommissioning::Id:
        MatterCodedrivenAdministratorCommissioningClusterInitCallback(endpoint);
        break;
    case app::Clusters::GroupKeyManagement::Id:
        MatterCodedrivenGroupKeyManagementClusterInitCallback(endpoint);
        break;
    case app::Clusters::BooleanState::Id:
        MatterCodedrivenBooleanStateClusterInitCallback(endpoint);
        break;
    }
}

void MatterCodedrivenClusterShutdownCallback(EndpointId endpoint, ClusterId clusterId)
{
    switch (clusterId)
    {
    case app::Clusters::BasicInformation::Id:
        MatterCodedrivenBasicInformationClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::NetworkCommissioning::Id:
        MatterCodedrivenNetworkCommissioningClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::GeneralDiagnostics::Id:
        MatterCodedrivenGeneralDiagnosticsClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::SoftwareDiagnostics::Id:
        MatterCodedrivenSoftwareDiagnosticsClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::WiFiNetworkDiagnostics::Id:
        MatterCodedrivenWiFiNetworkDiagnosticsClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::EthernetNetworkDiagnostics::Id:
        MatterCodedrivenEthernetNetworkDiagnosticsClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::AdministratorCommissioning::Id:
        MatterCodedrivenAdministratorCommissioningClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::GroupKeyManagement::Id:
        MatterCodedrivenGroupKeyManagementClusterShutdownCallback(endpoint);
        break;
    case app::Clusters::BooleanState::Id:
        MatterCodedrivenBooleanStateClusterShutdownCallback(endpoint);
        break;
    }
}
} // namespace chip
