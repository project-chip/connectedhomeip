steps:
    - name: "connectedhomeip/chip-build-vscode:0.5.65"
      env:
          - PW_ENVIRONMENT_ROOT=/pwenv
      args:
          - "-c"
          - source ./scripts/bootstrap.sh
      id: Bootstrap
      entrypoint: /usr/bin/bash
      volumes:
          - name: pwenv
            path: /pwenv
      timeout: 900s

    - name: "connectedhomeip/chip-build-vscode:0.5.65"
      id: ESP32
      env:
          - PW_ENVIRONMENT_ROOT=/pwenv
      args:
          - >-
              ./scripts/build/build_examples.py --enable-flashbundle
              --target-glob '*-m5stack-*' build --create-archives
              /workspace/artifacts/
      waitFor:
          - Bootstrap
      entrypoint: ./scripts/run_in_build_env.sh
      volumes:
          - name: pwenv
            path: /pwenv

    - name: "connectedhomeip/chip-build-vscode:0.5.65"
      id: NRFConnect
      env:
          - PW_ENVIRONMENT_ROOT=/pwenv
      args:
          - >-
              ./scripts/build/build_examples.py --enable-flashbundle
              --target-glob '*-nrf52840*{lock,light}*' build --create-archives
              /workspace/artifacts/
      waitFor:
          - Bootstrap
          - ESP32
      entrypoint: ./scripts/run_in_build_env.sh
      volumes:
          - name: pwenv
            path: /pwenv

    - name: "connectedhomeip/chip-build-vscode:0.5.65"
      id: EFR32
      env:
          - PW_ENVIRONMENT_ROOT=/pwenv
      args:
          - >-
              ./scripts/build/build_examples.py --enable-flashbundle
              --target-glob '*-brd4161a-{lock,light,unit-test}*' build
              --create-archives /workspace/artifacts/
      waitFor:
          - Bootstrap
          - NRFConnect
      entrypoint: ./scripts/run_in_build_env.sh
      volumes:
          - name: pwenv
            path: /pwenv

    - name: "connectedhomeip/chip-build-vscode:0.5.65"
      id: Linux
      env:
          - PW_ENVIRONMENT_ROOT=/pwenv
      args:
          - >-
              ./scripts/build/build_examples.py --enable-flashbundle
              --target-glob 'linux-*' --skip-target-glob '*-tests' build
              --create-archives /workspace/artifacts/
      waitFor:
          - Bootstrap
          - EFR32
      entrypoint: ./scripts/run_in_build_env.sh
      volumes:
          - name: pwenv
            path: /pwenv

    - name: "connectedhomeip/chip-build-vscode:0.5.65"
      id: Android
      env:
          - PW_ENVIRONMENT_ROOT=/pwenv
      args:
          - >-
              ./scripts/build/build_examples.py --enable-flashbundle
              --target-glob 'android-arm64-chip-tool' build --create-archives
              /workspace/artifacts/
      waitFor:
          - Bootstrap
          - Linux
      entrypoint: ./scripts/run_in_build_env.sh
      volumes:
          - name: pwenv
            path: /pwenv

    - name: "connectedhomeip/chip-build-vscode:0.5.65"
      id: Chef
      env:
          - PW_ENVIRONMENT_ROOT=/pwenv
      args:
          - >-
              rm -R /workspace/third_party/zap/repo;
              cp -r /opt/zap /workspace/third_party/zap/repo;
              ./scripts/build/build_examples.py --enable-flashbundle
              --target-glob 'chef-all' --skip-target-glob '*-tests' build
              --create-archives /workspace/artifacts/;
      # waitFor: ALL
      entrypoint: ./scripts/run_in_build_env.sh
      volumes:
          - name: pwenv
            path: /pwenv

logsBucket: matter-build-automation-build-logs

# Global timeout for all steps
timeout: 9000s

artifacts:
    objects:
        location: "gs://matter-build-automation-artifacts/$PROJECT_ID/$COMMIT_SHA/"
        paths: ["/workspace/artifacts/*.tar.gz"]

# Using higher CPU machines generally speeds up builds by > 4x (faster as we spend more time
# building instead of docker download/checkout/bootstrap)
options:
    machineType: "E2_HIGHCPU_32"
    diskSizeGb: 200
