
_@=@
Common_C_Flags = -DHAVE_CONFIG_H -g -O2

Module_C_Flags += $(Common_C_Flags) $(Module_Includes)
Module_Test_C_Flags += $(Common_C_Flags) $(Module_Test_Includes)

C_Objects = $(C_Files:.c=.o)
CPP_Objects = $(CPP_Files:.cpp=.o)

Tests_C_Files = $(wildcard $(Test_Dir)/*.c)
Tests_C_Exe = $(Tests_C_Files:.c=_q)

Tests_CPP_Files = $(wildcard $(Test_Dir)/*.cpp)
Tests_CPP_Exe = $(Tests_CPP_Files:.cpp=_q)

VALGRIND := $(shell command -v valgrind 2> /dev/null)

ifdef VALGRIND
	VALGRIND += --leak-check=yes -q
endif

CLANG_FORMAT := $(shell command -v clang-format 2> /dev/null)
ifdef CLANG_FORMAT
	CLANG_FORMAT += -i
endif

CLANG_TIDY := $(shell command -v clang-tidy 2> /dev/null)
ifdef CLANG_TIDY
	CLANG_TIDY += -checks=-*,clang-analyzer-*,-clang-analyzer-cplusplus*
endif

GCOV := $(shell command -v gcov 2> /dev/null)

ifdef GCOV
        GCOV_FLAGS=-fprofile-arcs -ftest-coverage
endif

# search up in the tree from where the makefile lives for overrides, other definitions
__updirs=$(if $1,$(if $2,$(if $(subst /,,$(abspath $2)),$(or $(wildcard $2$1),$(call __updirs,$1,$2../))),$(call __updirs,$1,./)))
-include $(call __updirs,.yams.min)

%.o: %.c
ifdef CLANG_FORMAT
	$(_@)$(CLANG_FORMAT) $<
endif
	$(_@)$(CC) $(Module_C_Flags) -c $< -o $@
ifdef CLANG_TIDY
	$(_@)$(CLANG_TIDY)  $< -- $(Module_C_Flags)
endif
	@echo "CC  <=  $<"

%.o: %.cpp
ifdef CLANG_FORMAT
	$(_@)$(CLANG_FORMAT) $<
endif
	$(_@)$(CXX) $(Module_C_Flags) -c $< -o $@
ifdef CLANG_TIDY
	$(_@)$(CLANG_TIDY) $< -- $(Module_C_Flags)
endif
	@echo "CXX  <=  $<"

$(Test_Dir)/%_q: $(Test_Dir)/%.c
ifdef CLANG_FORMAT
	$(_@)$(CLANG_FORMAT) $<
endif
	$(_@)$(CC) $< -o $@ $(Module_Test_C_Flags) -L/usr/local/lib $($(*F)_FLAGS) $(GCOV_FLAGS)
ifdef CLANG_TIDY
	$(_@)$(CLANG_TIDY) $< -- $(Module_Test_C_Flags)
endif
	@echo "Building tests <=  $<"

$(Test_Dir)/%_q: $(Test_Dir)/%.cpp
ifdef CLANG_FORMAT
	$(_@)$(CLANG_FORMAT) $<
endif
	$(_@)$(CXX) $< -o $@ $(Module_Test_C_Flags) -L/usr/local/lib $($(*F)_FLAGS) $(GCOV_FLAGS)
ifdef CLANG_TIDY
	$(_@)$(CLANG_TIDY) $< -- $(Module_Test_C_Flags)
endif
	@echo "Building tests <=  $<"

check: $(Tests_C_Exe) $(Tests_CPP_Exe)
	@echo "Running tests <=  $<"
	$(_@)$(foreach f,$^,$(VALGRIND) ./$(f);)
ifneq ($(and $(GCOV),$(Tests_C_Files)),)
	$(_@)$(GCOV) $(notdir $(Tests_C_Files))
endif
ifneq ($(and $(GCOV),$(Tests_CPP_Files)),)
	$(_@)$(GCOV) $(notdir $(Tests_CPP_Files))
endif

my_clean:
	$(_@)rm -f $(C_Objects) $(CPP_Objects)
	$(_@)rm -f *.gcda *.gcno *.gcov
	$(_@)rm -f $(Tests_C_Exe) $(Tests_CPP_Exe) $(Test_Dir)/*.gcda $(Test_Dir)/*.gcno $(Test_Dir)/*.gcov
	$(_@)rm -rf $(Test_Dir)/*.dSYM

.PHONY: _DEBUG_%
_DEBUG_%:
	@echo $*='"$($(*))"'

