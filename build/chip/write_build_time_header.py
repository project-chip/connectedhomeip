#!/usr/bin/env python
# Copyright (c) 2023 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import optparse
import os
from datetime import datetime, timezone


def utc_time_in_matter_epoch_s():
    """ Returns the time in matter epoch in s. """
    # Matter epoch is 0 hours, 0 minutes, 0 seconds on Jan 1, 2000 UTC
    utc_matter = datetime.now(tz=timezone.utc) - datetime(2000, 1, 1, 0, 0, 0, 0, timezone.utc)
    return int(utc_matter.total_seconds())


class Options:
    def __init__(self, output, header_guard, define_name, define_val):
        self.output = output
        self.header_guard = header_guard
        self.define_name = define_name
        self.define_val = define_val


def GetOptions():
    parser = optparse.OptionParser()
    parser.add_option('--output', help="Output header name (inside gen dir)")
    parser.add_option('--gen-dir',
                      help="Path to root of generated file directory tree.")
    cmdline_options, _ = parser.parse_args()

    # Compute header guard by replacing some chars with _ and upper-casing.
    header_guard = cmdline_options.output.upper()
    header_guard = \
        header_guard.replace('/', '_').replace('\\', '_').replace('.', '_')
    header_guard += '_'

    # The actual output file is inside the gen dir.
    output = os.path.join(cmdline_options.gen_dir, cmdline_options.output)

    define_name = 'CHIP_DEVICE_CONFIG_FIRMWARE_BUILD_TIME_MATTER_EPOCH_S'
    build_time = utc_time_in_matter_epoch_s()

    return Options(output=output,
                   header_guard=header_guard,
                   define_name=define_name,
                   define_val=str(build_time))


def WriteHeader(options):
    with open(options.output, "w") as output_file:
        output_file.write("// Generated by write_build_time_header.py\n")

        output_file.write(f'\n#ifndef {options.header_guard}\n')
        output_file.write(f'#define {options.header_guard}\n\n')

        output_file.write(f'#define {options.define_name} {options.define_val}\n')

        output_file.write(f'\n#endif  // {options.header_guard}\n')


options = GetOptions()
WriteHeader(options)
