// This IDL was generated automatically by ZAP.
// It is for view/code review purposes only.

struct LabelStruct {
  CHAR_STRING kLabel = 1;
  CHAR_STRING kValue = 2;
}

server cluster AdministratorCommissioning = 60 {
  enum CommissioningWindowStatus : ENUM8 {
    kWindowNotOpen = 0;
    kEnhancedWindowOpen = 1;
    kBasicWindowOpen = 2;
  }

  enum StatusCode : ENUM8 {
    kBusy = 1;
    kPAKEParameterError = 2;
    kWindowNotOpen = 3;
  }

  attribute(writable) int8u windowStatus = 0;
  attribute(writable) fabric_idx adminFabricIndex = 1;
  attribute(writable) int16u adminVendorId = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct OpenBasicCommissioningWindowRequest {
    INT16U CommissioningTimeout;  
  }

  request struct OpenCommissioningWindowRequest {
    INT16U CommissioningTimeout;  
    OCTET_STRING PAKEVerifier;  
    INT16U Discriminator;  
    INT32U Iterations;  
    OCTET_STRING Salt;  
    INT16U PasscodeID;  
  }

  request struct RevokeCommissioningRequest {
  }

  command OpenBasicCommissioningWindow(OpenBasicCommissioningWindowRequest): DefaultSuccess = 1;
  command OpenCommissioningWindow(OpenCommissioningWindowRequest): DefaultSuccess = 0;
  command RevokeCommissioning(RevokeCommissioningRequest): DefaultSuccess = 2;
}

server cluster Basic = 40 {
  event StartUp(critical) = 0 {
    kSoftwareVersion = 0,
  }

  event ShutDown(critical) = 1 {
  }

  event Leave(info) = 2 {
  }

  event ReachableChanged(info) = 3 {
    kReachableNewValue = 0,
  }

  attribute(writable, reportable) int16u interactionModelVersion = 0;
  attribute(writable, reportable) char_string vendorName = 1;
  attribute(writable, reportable) vendor_id vendorID = 2;
  attribute(writable, reportable) char_string productName = 3;
  attribute(writable, reportable) int16u productID = 4;
  attribute(readonly, reportable) char_string nodeLabel = 5;
  attribute(readonly, reportable) char_string location = 6;
  attribute(writable, reportable) int16u hardwareVersion = 7;
  attribute(writable, reportable) char_string hardwareVersionString = 8;
  attribute(writable, reportable) int32u softwareVersion = 9;
  attribute(writable, reportable) char_string softwareVersionString = 10;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster Descriptor = 29 {
  struct DeviceType {
    DEVTYPE_ID kType = 1;
    INT16U kRevision = 2;
  }

  attribute(writable, reportable) DeviceType deviceList = 0;
  attribute(writable, reportable) CLUSTER_ID serverList = 1;
  attribute(writable, reportable) CLUSTER_ID clientList = 2;
  attribute(writable, reportable) ENDPOINT_NO partsList = 3;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster DiagnosticLogs = 50 {
  enum LogsIntent : ENUM8 {
    kEndUserSupport = 0;
    kNetworkDiag = 1;
    kCrashLogs = 2;
  }

  enum LogsStatus : ENUM8 {
    kSuccess = 0;
    kExhausted = 1;
    kNoLogs = 2;
    kBusy = 3;
    kDenied = 4;
  }

  enum LogsTransferProtocol : ENUM8 {
    kResponsePayload = 0;
    kBdx = 1;
  }


  request struct RetrieveLogsRequestRequest {
    LogsIntent intent;  
    LogsTransferProtocol requestedProtocol;  
    OCTET_STRING transferFileDesignator;  
  }

  command RetrieveLogsRequest(RetrieveLogsRequestRequest): RetrieveLogsResponse = 0;
}

server cluster EthernetNetworkDiagnostics = 55 {
  enum PHYRateType : ENUM8 {
    k10m = 0;
    k100m = 1;
    k1000m = 2;
    k25g = 3;
    k5g = 4;
    k10g = 5;
    k40g = 6;
    k100g = 7;
    k200g = 8;
    k400g = 9;
  }

  attribute(writable, reportable) enum8 PHYRate = 0;
  attribute(writable, reportable) boolean fullDuplex = 1;
  attribute(writable, reportable) int64u packetRxCount = 2;
  attribute(writable, reportable) int64u packetTxCount = 3;
  attribute(writable, reportable) int64u txErrCount = 4;
  attribute(writable, reportable) int64u collisionCount = 5;
  attribute(writable, reportable) int64u overrunCount = 6;
  attribute(writable, reportable) boolean carrierDetect = 7;
  attribute(writable, reportable) int64u timeSinceReset = 8;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster FixedLabel = 64 {
  attribute(writable) LabelStruct labelList = 0;
  attribute(writable) int16u clusterRevision = 65533;
}

server cluster GeneralCommissioning = 48 {
  enum GeneralCommissioningError : ENUM8 {
    kOk = 0;
    kValueOutsideRange = 1;
    kInvalidAuthentication = 2;
    kNotCommissioning = 3;
  }

  enum RegulatoryLocationType : ENUM8 {
    kIndoor = 0;
    kOutdoor = 1;
    kIndoorOutdoor = 2;
  }

  struct BasicCommissioningInfoType {
    INT32U kFailSafeExpiryLengthMs = 1;
  }

  attribute(readonly, reportable) int64u breadcrumb = 0;
  attribute(writable, reportable) BasicCommissioningInfoType basicCommissioningInfoList = 1;
  attribute(writable) enum8 regulatoryConfig = 2;
  attribute(writable) enum8 locationCapability = 3;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct ArmFailSafeRequest {
    INT16U expiryLengthSeconds;  
    INT64U breadcrumb;  
    INT32U timeoutMs;  
  }

  request struct CommissioningCompleteRequest {
  }

  request struct SetRegulatoryConfigRequest {
    RegulatoryLocationType location;  
    CHAR_STRING countryCode;  
    INT64U breadcrumb;  
    INT32U timeoutMs;  
  }

  response struct ArmFailSafeResponse {
    GeneralCommissioningError errorCode;  
    CHAR_STRING debugText;  
  }

  response struct CommissioningCompleteResponse {
    GeneralCommissioningError errorCode;  
    CHAR_STRING debugText;  
  }

  response struct SetRegulatoryConfigResponse {
    GeneralCommissioningError errorCode;  
    CHAR_STRING debugText;  
  }

  command ArmFailSafe(ArmFailSafeRequest): ArmFailSafeResponse = 0;
  command CommissioningComplete(CommissioningCompleteRequest): CommissioningCompleteResponse = 4;
  command SetRegulatoryConfig(SetRegulatoryConfigRequest): SetRegulatoryConfigResponse = 2;
}

server cluster GeneralDiagnostics = 51 {
  enum BootReasonType : ENUM8 {
    kUnspecified = 0;
    kPowerOnReboot = 1;
    kBrownOutReset = 2;
    kSoftwareWatchdogReset = 3;
    kHardwareWatchdogReset = 4;
    kSoftwareUpdateCompleted = 5;
    kSoftwareReset = 6;
  }

  enum HardwareFaultType : ENUM8 {
    kUnspecified = 0;
    kRadio = 1;
    kSensor = 2;
    kResettableOverTemp = 3;
    kNonResettableOverTemp = 4;
    kPowerSource = 5;
    kVisualDisplayFault = 6;
    kAudioOutputFault = 7;
    kUserInterfaceFault = 8;
    kNonVolatileMemoryError = 9;
    kTamperDetected = 10;
  }

  enum InterfaceType : ENUM8 {
    kUnspecified = 0;
    kWiFi = 1;
    kEthernet = 2;
    kCellular = 3;
    kThread = 4;
  }

  enum NetworkFaultType : ENUM8 {
    kUnspecified = 0;
    kHardwareFailure = 1;
    kNetworkJammed = 2;
    kConnectionFailed = 3;
  }

  enum RadioFaultType : ENUM8 {
    kUnspecified = 0;
    kWiFiFault = 1;
    kCellularFault = 2;
    kThreadFault = 3;
    kNFCFault = 4;
    kBLEFault = 5;
    kEthernetFault = 6;
  }

  struct NetworkInterfaceType {
    CHAR_STRING kName = 1;
    BOOLEAN kFabricConnected = 2;
    BOOLEAN kOffPremiseServicesReachableIPv4 = 3;
    BOOLEAN kOffPremiseServicesReachableIPv6 = 4;
    OCTET_STRING kHardwareAddress = 5;
    InterfaceType kType = 6;
  }

  event HardwareFaultChange(critical) = 0 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event RadioFaultChange(critical) = 1 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event NetworkFaultChange(critical) = 2 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event BootReason(critical) = 3 {
    kBootReason = 0,
  }

  attribute(writable, reportable) NetworkInterfaceType networkInterfaces = 0;
  attribute(writable, reportable) int16u rebootCount = 1;
  attribute(writable, reportable) int64u upTime = 2;
  attribute(writable, reportable) int32u totalOperationalHours = 3;
  attribute(writable, reportable) enum8 bootReasons = 4;
  attribute(writable, reportable) ENUM8 activeHardwareFaults = 5;
  attribute(writable, reportable) ENUM8 activeRadioFaults = 6;
  attribute(writable, reportable) ENUM8 activeNetworkFaults = 7;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster LocalizationConfiguration = 43 {
  attribute(readonly) char_string activeLocale = 1;
  attribute(writable) CHAR_STRING supportedLocales = 2;
}

server cluster NetworkCommissioning = 49 {
  enum NetworkCommissioningStatus : ENUM8 {
    kSuccess = 0;
    kOutOfRange = 1;
    kBoundsExceeded = 2;
    kNetworkIDNotFound = 3;
    kDuplicateNetworkID = 4;
    kNetworkNotFound = 5;
    kRegulatoryError = 6;
    kAuthFailure = 7;
    kUnsupportedSecurity = 8;
    kOtherConnectionFailure = 9;
    kIPV6Failed = 10;
    kIPBindFailed = 11;
    kUnknownError = 12;
  }

  enum WiFiBand : ENUM8 {
    k2g4 = 0;
    k3g65 = 1;
    k5g = 2;
    k6g = 3;
    k60g = 4;
  }

  struct NetworkInfo {
    OCTET_STRING kNetworkID = 1;
    BOOLEAN kConnected = 2;
  }

  struct WiFiInterfaceScanResult {
    BITMAP8 kSecurity = 1;
    OCTET_STRING kSsid = 2;
    OCTET_STRING kBssid = 3;
    INT16U kChannel = 4;
    WiFiBand kWiFiBand = 5;
    INT8S kRssi = 6;
  }

  struct ThreadInterfaceScanResult {
    INT64U kPanId = 1;
    INT64U kExtendedPanId = 2;
    CHAR_STRING kNetworkName = 3;
    INT16U kChannel = 4;
    INT8U kVersion = 5;
    INT64U kExtendedAddress = 6;
    INT8S kRssi = 7;
    INT8U kLqi = 8;
  }

  attribute(writable) int8u maxNetworks = 0;
  attribute(writable) NetworkInfo networks = 1;
  attribute(writable) int8u scanMaxTimeSeconds = 2;
  attribute(writable) int8u connectMaxTimeSeconds = 3;
  attribute(readonly) boolean interfaceEnabled = 4;
  attribute(writable) NetworkCommissioningStatus lastNetworkingStatus = 5;
  attribute(writable) octet_string lastNetworkID = 6;
  attribute(writable) int32u lastConnectErrorValue = 7;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct AddOrUpdateWiFiNetworkRequest {
    OCTET_STRING SSID;  
    OCTET_STRING Credentials;  
    INT64U breadcrumb;  
  }

  request struct ConnectNetworkRequest {
    OCTET_STRING NetworkID;  
    INT64U Breadcrumb;  
  }

  request struct RemoveNetworkRequest {
    OCTET_STRING NetworkID;  
    INT64U Breadcrumb;  
  }

  request struct ReorderNetworkRequest {
    OCTET_STRING NetworkID;  
    INT8U NetworkIndex;  
    INT64U Breadcrumb;  
  }

  request struct ScanNetworksRequest {
    OCTET_STRING SSID;  
    INT64U Breadcrumb;  
  }

  response struct ConnectNetworkResponse {
    NetworkCommissioningStatus NetworkingStatus;  
    CHAR_STRING DebugText;  
    INT32S ErrorValue;  
  }

  response struct NetworkConfigResponse {
    NetworkCommissioningStatus NetworkingStatus;  
    CHAR_STRING DebugText;  
  }

  response struct ScanNetworksResponse {
    NetworkCommissioningStatus NetworkingStatus;  
    CHAR_STRING DebugText;  
    WiFiInterfaceScanResult WiFiScanResults;  
    ThreadInterfaceScanResult ThreadScanResults;  
  }

  command AddOrUpdateWiFiNetwork(AddOrUpdateWiFiNetworkRequest): NetworkConfigResponse = 2;
  command ConnectNetwork(ConnectNetworkRequest): ConnectNetworkResponse = 6;
  command RemoveNetwork(RemoveNetworkRequest): NetworkConfigResponse = 4;
  command ReorderNetwork(ReorderNetworkRequest): NetworkConfigResponse = 8;
  command ScanNetworks(ScanNetworksRequest): ScanNetworksResponse = 0;
}

server cluster OperationalCredentials = 62 {
  enum NodeOperationalCertStatus : ENUM8 {
    kSuccess = 0;
    kInvalidPublicKey = 1;
    kInvalidNodeOpId = 2;
    kInvalidNOC = 3;
    kMissingCsr = 4;
    kTableFull = 5;
    kInsufficientPrivilege = 8;
    kFabricConflict = 9;
    kLabelConflict = 10;
    kInvalidFabricIndex = 11;
  }

  struct FabricDescriptor {
    INT8U kFabricIndex = 1;
    OCTET_STRING kRootPublicKey = 2;
    INT16U kVendorId = 3;
    FABRIC_ID kFabricId = 4;
    NODE_ID kNodeId = 5;
    CHAR_STRING kLabel = 6;
  }

  attribute(writable, reportable) FabricDescriptor fabricsList = 1;
  attribute(writable, reportable) int8u supportedFabrics = 2;
  attribute(writable, reportable) int8u commissionedFabrics = 3;
  attribute(writable, reportable) OCTET_STRING trustedRootCertificates = 4;
  attribute(writable, reportable) fabric_idx currentFabricIndex = 5;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct AddNOCRequest {
    OCTET_STRING NOCValue;  
    OCTET_STRING ICACValue;  
    OCTET_STRING IPKValue;  
    NODE_ID CaseAdminNode;  
    INT16U AdminVendorId;  
  }

  request struct AddTrustedRootCertificateRequest {
    OCTET_STRING RootCertificate;  
  }

  request struct AttestationRequestRequest {
    OCTET_STRING AttestationNonce;  
  }

  request struct CertificateChainRequestRequest {
    INT8U CertificateType;  
  }

  request struct OpCSRRequestRequest {
    OCTET_STRING CSRNonce;  
  }

  request struct RemoveFabricRequest {
    INT8U FabricIndex;  
  }

  request struct RemoveTrustedRootCertificateRequest {
    OCTET_STRING TrustedRootIdentifier;  
  }

  request struct UpdateFabricLabelRequest {
    CHAR_STRING Label;  
  }

  request struct UpdateNOCRequest {
    OCTET_STRING NOCValue;  
    OCTET_STRING ICACValue;  
  }

  response struct AttestationResponse {
    OCTET_STRING AttestationElements;  
    OCTET_STRING Signature;  
  }

  response struct CertificateChainResponse {
    OCTET_STRING Certificate;  
  }

  response struct NOCResponse {
    INT8U StatusCode;  
    INT8U FabricIndex;  
    CHAR_STRING DebugText;  
  }

  response struct OpCSRResponse {
    OCTET_STRING NOCSRElements;  
    OCTET_STRING AttestationSignature;  
  }

  command AddNOC(AddNOCRequest): NOCResponse = 6;
  command AddTrustedRootCertificate(AddTrustedRootCertificateRequest): DefaultSuccess = 11;
  command AttestationRequest(AttestationRequestRequest): AttestationResponse = 0;
  command CertificateChainRequest(CertificateChainRequestRequest): CertificateChainResponse = 2;
  command OpCSRRequest(OpCSRRequestRequest): OpCSRResponse = 4;
  command RemoveFabric(RemoveFabricRequest): NOCResponse = 10;
  command RemoveTrustedRootCertificate(RemoveTrustedRootCertificateRequest): DefaultSuccess = 12;
  command UpdateFabricLabel(UpdateFabricLabelRequest): NOCResponse = 9;
  command UpdateNOC(UpdateNOCRequest): NOCResponse = 7;
}

server cluster SoftwareDiagnostics = 52 {
  event SoftwareFault(info) = 0 {
    kSoftwareFault = 0,
  }

  attribute(writable, reportable) int64u currentHeapHighWatermark = 3;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster TemperatureMeasurement = 1026 {
  attribute(writable, reportable) int16s measuredValue = 0;
  attribute(writable, reportable) int16s minMeasuredValue = 1;
  attribute(writable, reportable) int16s maxMeasuredValue = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster UserLabel = 65 {
  attribute(readonly) LabelStruct labelList = 0;
  attribute(writable) int16u clusterRevision = 65533;
}

server cluster WiFiNetworkDiagnostics = 54 {
  enum AssociationFailureCause : ENUM8 {
    kUnknown = 0;
    kAssociationFailed = 1;
    kAuthenticationFailed = 2;
    kSsidNotFound = 3;
  }

  enum SecurityType : ENUM8 {
    kUnspecified = 0;
    kNone = 1;
    kWep = 2;
    kWpa = 3;
    kWpa2 = 4;
    kWpa3 = 5;
  }

  enum WiFiConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  enum WiFiVersionType : ENUM8 {
    k80211a = 0;
    k80211b = 1;
    k80211g = 2;
    k80211n = 3;
    k80211ac = 4;
    k80211ax = 5;
  }

  event Disconnection(info) = 0 {
    kReasonCode = 0,
  }

  event AssociationFailure(info) = 1 {
    kAssociationFailure = 0,
    kStatus = 1,
  }

  event ConnectionStatus(info) = 2 {
    kConnectionStatus = 0,
  }

  attribute(writable, reportable) octet_string bssid = 0;
  attribute(writable, reportable) enum8 securityType = 1;
  attribute(writable, reportable) enum8 wiFiVersion = 2;
  attribute(writable, reportable) int16u channelNumber = 3;
  attribute(writable, reportable) int8s rssi = 4;
  attribute(writable, reportable) int32u beaconLostCount = 5;
  attribute(writable, reportable) int32u beaconRxCount = 6;
  attribute(writable, reportable) int32u packetMulticastRxCount = 7;
  attribute(writable, reportable) int32u packetMulticastTxCount = 8;
  attribute(writable, reportable) int32u packetUnicastRxCount = 9;
  attribute(writable, reportable) int32u packetUnicastTxCount = 10;
  attribute(writable, reportable) int64u currentMaxRate = 11;
  attribute(writable, reportable) int64u overrunCount = 12;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}


endpoint 0 {
}

endpoint 1 {
}

