/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#include <clusters/WebRTCTransportRequestor/Commands.h>

#include <app/data-model/Decode.h>
#include <app/data-model/StructDecodeIterator.h>
#include <app/data-model/WrappedStructEncoder.h>

namespace chip {
namespace app {
namespace Clusters {
namespace WebRTCTransportRequestor {
namespace Commands {
namespace Offer {

CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kWebRTCSessionID), webRTCSessionID);
    encoder.Encode(to_underlying(Fields::kSdp), sdp);
    encoder.Encode(to_underlying(Fields::kICEServers), ICEServers);
    encoder.Encode(to_underlying(Fields::kICETransportPolicy), ICETransportPolicy);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kWebRTCSessionID))
        {
            err = DataModel::Decode(reader, webRTCSessionID);
        }
        else if (__context_tag == to_underlying(Fields::kSdp))
        {
            err = DataModel::Decode(reader, sdp);
        }
        else if (__context_tag == to_underlying(Fields::kICEServers))
        {
            err = DataModel::Decode(reader, ICEServers);
        }
        else if (__context_tag == to_underlying(Fields::kICETransportPolicy))
        {
            err = DataModel::Decode(reader, ICETransportPolicy);
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace Offer.
namespace Answer {

CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kWebRTCSessionID), webRTCSessionID);
    encoder.Encode(to_underlying(Fields::kSdp), sdp);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kWebRTCSessionID))
        {
            err = DataModel::Decode(reader, webRTCSessionID);
        }
        else if (__context_tag == to_underlying(Fields::kSdp))
        {
            err = DataModel::Decode(reader, sdp);
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace Answer.
namespace ICECandidates {

CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kWebRTCSessionID), webRTCSessionID);
    encoder.Encode(to_underlying(Fields::kICECandidates), ICECandidates);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kWebRTCSessionID))
        {
            err = DataModel::Decode(reader, webRTCSessionID);
        }
        else if (__context_tag == to_underlying(Fields::kICECandidates))
        {
            err = DataModel::Decode(reader, ICECandidates);
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace ICECandidates.
namespace End {

CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kWebRTCSessionID), webRTCSessionID);
    encoder.Encode(to_underlying(Fields::kReason), reason);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kWebRTCSessionID))
        {
            err = DataModel::Decode(reader, webRTCSessionID);
        }
        else if (__context_tag == to_underlying(Fields::kReason))
        {
            err = DataModel::Decode(reader, reason);
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace End.
} // namespace Commands
} // namespace WebRTCTransportRequestor
} // namespace Clusters
} // namespace app
} // namespace chip
