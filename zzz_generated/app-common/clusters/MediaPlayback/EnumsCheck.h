/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/MediaPlayback/Enums.h>

namespace chip {
namespace app {
namespace Clusters {
static auto __attribute__((unused)) EnsureKnownEnumValue(MediaPlayback::CharacteristicEnum val)
{
    using EnumType = MediaPlayback::CharacteristicEnum;
    switch (val)
    {
    case EnumType::kForcedSubtitles:
    case EnumType::kDescribesVideo:
    case EnumType::kEasyToRead:
    case EnumType::kFrameBased:
    case EnumType::kMainProgram:
    case EnumType::kOriginalContent:
    case EnumType::kVoiceOverTranslation:
    case EnumType::kCaption:
    case EnumType::kSubtitle:
    case EnumType::kAlternate:
    case EnumType::kSupplementary:
    case EnumType::kCommentary:
    case EnumType::kDubbedTranslation:
    case EnumType::kDescription:
    case EnumType::kMetadata:
    case EnumType::kEnhancedAudioIntelligibility:
    case EnumType::kEmergency:
    case EnumType::kKaraoke:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(MediaPlayback::PlaybackStateEnum val)
{
    using EnumType = MediaPlayback::PlaybackStateEnum;
    switch (val)
    {
    case EnumType::kPlaying:
    case EnumType::kPaused:
    case EnumType::kNotPlaying:
    case EnumType::kBuffering:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(MediaPlayback::StatusEnum val)
{
    using EnumType = MediaPlayback::StatusEnum;
    switch (val)
    {
    case EnumType::kSuccess:
    case EnumType::kInvalidStateForCommand:
    case EnumType::kNotAllowed:
    case EnumType::kNotActive:
    case EnumType::kSpeedOutOfRange:
    case EnumType::kSeekOutOfRange:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
} // namespace Clusters
} // namespace app
} // namespace chip
