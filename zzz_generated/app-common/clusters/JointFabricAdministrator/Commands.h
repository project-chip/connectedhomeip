/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/NullObject.h>
#include <app/data-model/Nullable.h>
#include <lib/core/DataModelTypes.h>
#include <lib/core/Optional.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/JointFabricAdministrator/ClusterId.h>
#include <clusters/JointFabricAdministrator/CommandIds.h>
#include <clusters/JointFabricAdministrator/Enums.h>
#include <clusters/JointFabricAdministrator/Structs.h>

#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace JointFabricAdministrator {
namespace Commands {
// Forward-declarations so we can reference these later.

namespace ICACCSRRequest {
struct Type;
struct DecodableType;
} // namespace ICACCSRRequest

namespace ICACCSRResponse {
struct Type;
struct DecodableType;
} // namespace ICACCSRResponse

namespace AddICAC {
struct Type;
struct DecodableType;
} // namespace AddICAC

namespace ICACResponse {
struct Type;
struct DecodableType;
} // namespace ICACResponse

namespace OpenJointCommissioningWindow {
struct Type;
struct DecodableType;
} // namespace OpenJointCommissioningWindow

namespace TransferAnchorRequest {
struct Type;
struct DecodableType;
} // namespace TransferAnchorRequest

namespace TransferAnchorResponse {
struct Type;
struct DecodableType;
} // namespace TransferAnchorResponse

namespace TransferAnchorComplete {
struct Type;
struct DecodableType;
} // namespace TransferAnchorComplete

namespace AnnounceJointFabricAdministrator {
struct Type;
struct DecodableType;
} // namespace AnnounceJointFabricAdministrator

} // namespace Commands

namespace Commands {
namespace ICACCSRRequest {
enum class Fields : uint8_t
{
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::ICACCSRRequest::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = Clusters::JointFabricAdministrator::Commands::ICACCSRResponse::DecodableType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::ICACCSRRequest::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace ICACCSRRequest
namespace ICACCSRResponse {
enum class Fields : uint8_t
{
    kIcaccsr = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::ICACCSRResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    chip::ByteSpan icaccsr;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::ICACCSRResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    chip::ByteSpan icaccsr;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace ICACCSRResponse
namespace AddICAC {
enum class Fields : uint8_t
{
    kICACValue = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AddICAC::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    chip::ByteSpan ICACValue;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = Clusters::JointFabricAdministrator::Commands::ICACResponse::DecodableType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AddICAC::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    chip::ByteSpan ICACValue;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AddICAC
namespace ICACResponse {
enum class Fields : uint8_t
{
    kStatusCode = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::ICACResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    ICACResponseStatusEnum statusCode = static_cast<ICACResponseStatusEnum>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::ICACResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    ICACResponseStatusEnum statusCode = static_cast<ICACResponseStatusEnum>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace ICACResponse
namespace OpenJointCommissioningWindow {
enum class Fields : uint8_t
{
    kCommissioningTimeout = 0,
    kPAKEPasscodeVerifier = 1,
    kDiscriminator        = 2,
    kIterations           = 3,
    kSalt                 = 4,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::OpenJointCommissioningWindow::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    uint16_t commissioningTimeout = static_cast<uint16_t>(0);
    chip::ByteSpan PAKEPasscodeVerifier;
    uint16_t discriminator = static_cast<uint16_t>(0);
    uint32_t iterations    = static_cast<uint32_t>(0);
    chip::ByteSpan salt;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::OpenJointCommissioningWindow::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    uint16_t commissioningTimeout = static_cast<uint16_t>(0);
    chip::ByteSpan PAKEPasscodeVerifier;
    uint16_t discriminator = static_cast<uint16_t>(0);
    uint32_t iterations    = static_cast<uint32_t>(0);
    chip::ByteSpan salt;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace OpenJointCommissioningWindow
namespace TransferAnchorRequest {
enum class Fields : uint8_t
{
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::TransferAnchorRequest::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = Clusters::JointFabricAdministrator::Commands::TransferAnchorResponse::DecodableType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::TransferAnchorRequest::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace TransferAnchorRequest
namespace TransferAnchorResponse {
enum class Fields : uint8_t
{
    kStatusCode = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::TransferAnchorResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    TransferAnchorResponseStatusEnum statusCode = static_cast<TransferAnchorResponseStatusEnum>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::TransferAnchorResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    TransferAnchorResponseStatusEnum statusCode = static_cast<TransferAnchorResponseStatusEnum>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace TransferAnchorResponse
namespace TransferAnchorComplete {
enum class Fields : uint8_t
{
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::TransferAnchorComplete::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::TransferAnchorComplete::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace TransferAnchorComplete
namespace AnnounceJointFabricAdministrator {
enum class Fields : uint8_t
{
    kEndpointID = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AnnounceJointFabricAdministrator::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AnnounceJointFabricAdministrator::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricAdministrator::Id; }

    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AnnounceJointFabricAdministrator
} // namespace Commands
} // namespace JointFabricAdministrator
} // namespace Clusters
} // namespace app
} // namespace chip
