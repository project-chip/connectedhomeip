/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/shared/Enums.h>
#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace CameraAvStreamManagement {

// Enum for AudioCodecEnum
enum class AudioCodecEnum : uint8_t
{
    kOpus  = 0x00,
    kAacLc = 0x01,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 2,
};

// Enum for ImageCodecEnum
enum class ImageCodecEnum : uint8_t
{
    kJpeg = 0x00,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 1,
};

using StreamUsageEnum = Clusters::detail::StreamUsageEnum;

// Enum for TriStateAutoEnum
enum class TriStateAutoEnum : uint8_t
{
    kOff  = 0x00,
    kOn   = 0x01,
    kAuto = 0x02,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 3,
};

// Enum for TwoWayTalkSupportTypeEnum
enum class TwoWayTalkSupportTypeEnum : uint8_t
{
    kNotSupported = 0x00,
    kHalfDuplex   = 0x01,
    kFullDuplex   = 0x02,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 3,
};

// Enum for VideoCodecEnum
enum class VideoCodecEnum : uint8_t
{
    kH264 = 0x00,
    kHevc = 0x01,
    kVvc  = 0x02,
    kAv1  = 0x03,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 4,
};

// Bitmap for Feature
enum class Feature : uint32_t
{
    kAudio            = 0x1,
    kVideo            = 0x2,
    kSnapshot         = 0x4,
    kPrivacy          = 0x8,
    kSpeaker          = 0x10,
    kImageControl     = 0x20,
    kWatermark        = 0x40,
    kOnScreenDisplay  = 0x80,
    kLocalStorage     = 0x100,
    kHighDynamicRange = 0x200,
};
} // namespace CameraAvStreamManagement
} // namespace Clusters
} // namespace app
} // namespace chip
