/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <app/ConcreteAttributePath.h>
#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/Nullable.h>
#include <app/util/basic-types.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Attributes.h>
#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/JointFabricDatastore/AttributeIds.h>
#include <clusters/JointFabricDatastore/ClusterId.h>
#include <clusters/JointFabricDatastore/Enums.h>
#include <clusters/JointFabricDatastore/Structs.h>

namespace chip {
namespace app {
namespace Clusters {
namespace JointFabricDatastore {
namespace Attributes {

namespace AnchorRootCA {
struct TypeInfo
{
    using Type             = chip::ByteSpan;
    using DecodableType    = chip::ByteSpan;
    using DecodableArgType = chip::ByteSpan;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::AnchorRootCA::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
    static constexpr size_t MaxLength() { return 254; }
};
} // namespace AnchorRootCA
namespace AnchorNodeID {
struct TypeInfo
{
    using Type             = chip::NodeId;
    using DecodableType    = chip::NodeId;
    using DecodableArgType = chip::NodeId;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::AnchorNodeID::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace AnchorNodeID
namespace AnchorVendorID {
struct TypeInfo
{
    using Type             = chip::VendorId;
    using DecodableType    = chip::VendorId;
    using DecodableArgType = chip::VendorId;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::AnchorVendorID::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace AnchorVendorID
namespace FriendlyName {
struct TypeInfo
{
    using Type             = chip::CharSpan;
    using DecodableType    = chip::CharSpan;
    using DecodableArgType = chip::CharSpan;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::FriendlyName::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
    static constexpr size_t MaxLength() { return 32; }
};
} // namespace FriendlyName
namespace GroupKeySetList {
struct TypeInfo
{
    using Type =
        chip::app::DataModel::List<const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreGroupKeySetStruct::Type>;
    using DecodableType = chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreGroupKeySetStruct::DecodableType>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreGroupKeySetStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::GroupKeySetList::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace GroupKeySetList
namespace GroupList {
struct TypeInfo
{
    using Type = chip::app::DataModel::List<
        const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreGroupInformationEntryStruct::Type>;
    using DecodableType = chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreGroupInformationEntryStruct::DecodableType>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreGroupInformationEntryStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::GroupList::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace GroupList
namespace NodeList {
struct TypeInfo
{
    using Type = chip::app::DataModel::List<
        const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreNodeInformationEntryStruct::Type>;
    using DecodableType = chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreNodeInformationEntryStruct::DecodableType>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreNodeInformationEntryStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::NodeList::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace NodeList
namespace AdminList {
struct TypeInfo
{
    using Type = chip::app::DataModel::List<
        const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreAdministratorInformationEntryStruct::Type>;
    using DecodableType = chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreAdministratorInformationEntryStruct::DecodableType>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreAdministratorInformationEntryStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::AdminList::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace AdminList
namespace Status {
struct TypeInfo
{
    using Type             = chip::app::Clusters::JointFabricDatastore::Structs::DatastoreStatusStruct::Type;
    using DecodableType    = chip::app::Clusters::JointFabricDatastore::Structs::DatastoreStatusStruct::DecodableType;
    using DecodableArgType = const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreStatusStruct::DecodableType &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::Status::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace Status
namespace EndpointGroupIDList {
struct TypeInfo
{
    using Type = chip::app::DataModel::List<
        const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreEndpointGroupIDEntryStruct::Type>;
    using DecodableType = chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreEndpointGroupIDEntryStruct::DecodableType>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreEndpointGroupIDEntryStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::EndpointGroupIDList::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace EndpointGroupIDList
namespace EndpointBindingList {
struct TypeInfo
{
    using Type = chip::app::DataModel::List<
        const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreEndpointBindingEntryStruct::Type>;
    using DecodableType = chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreEndpointBindingEntryStruct::DecodableType>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreEndpointBindingEntryStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::EndpointBindingList::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace EndpointBindingList
namespace NodeKeySetList {
struct TypeInfo
{
    using Type =
        chip::app::DataModel::List<const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreNodeKeySetEntry::Type>;
    using DecodableType = chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreNodeKeySetEntry::DecodableType>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreNodeKeySetEntry::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::NodeKeySetList::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace NodeKeySetList
namespace NodeACLList {
struct TypeInfo
{
    using Type =
        chip::app::DataModel::List<const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreACLEntryStruct::Type>;
    using DecodableType = chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreACLEntryStruct::DecodableType>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreACLEntryStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::NodeACLList::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace NodeACLList
namespace NodeEndpointList {
struct TypeInfo
{
    using Type =
        chip::app::DataModel::List<const chip::app::Clusters::JointFabricDatastore::Structs::DatastoreEndpointEntryStruct::Type>;
    using DecodableType = chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreEndpointEntryStruct::DecodableType>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<
        chip::app::Clusters::JointFabricDatastore::Structs::DatastoreEndpointEntryStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::NodeEndpointList::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace NodeEndpointList
namespace GeneratedCommandList {
struct TypeInfo : public Clusters::Globals::Attributes::GeneratedCommandList::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
};
} // namespace GeneratedCommandList
namespace AcceptedCommandList {
struct TypeInfo : public Clusters::Globals::Attributes::AcceptedCommandList::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
};
} // namespace AcceptedCommandList
namespace AttributeList {
struct TypeInfo : public Clusters::Globals::Attributes::AttributeList::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
};
} // namespace AttributeList
namespace FeatureMap {
struct TypeInfo : public Clusters::Globals::Attributes::FeatureMap::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
};
} // namespace FeatureMap
namespace ClusterRevision {
struct TypeInfo : public Clusters::Globals::Attributes::ClusterRevision::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }
};
} // namespace ClusterRevision

struct TypeInfo
{
    struct DecodableType
    {
        static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

        CHIP_ERROR Decode(TLV::TLVReader & reader, const ConcreteAttributePath & path);

        Attributes::AnchorRootCA::TypeInfo::DecodableType anchorRootCA;
        Attributes::AnchorNodeID::TypeInfo::DecodableType anchorNodeID     = static_cast<chip::NodeId>(0);
        Attributes::AnchorVendorID::TypeInfo::DecodableType anchorVendorID = static_cast<chip::VendorId>(0);
        Attributes::FriendlyName::TypeInfo::DecodableType friendlyName;
        Attributes::GroupKeySetList::TypeInfo::DecodableType groupKeySetList;
        Attributes::GroupList::TypeInfo::DecodableType groupList;
        Attributes::NodeList::TypeInfo::DecodableType nodeList;
        Attributes::AdminList::TypeInfo::DecodableType adminList;
        Attributes::Status::TypeInfo::DecodableType status;
        Attributes::EndpointGroupIDList::TypeInfo::DecodableType endpointGroupIDList;
        Attributes::EndpointBindingList::TypeInfo::DecodableType endpointBindingList;
        Attributes::NodeKeySetList::TypeInfo::DecodableType nodeKeySetList;
        Attributes::NodeACLList::TypeInfo::DecodableType nodeACLList;
        Attributes::NodeEndpointList::TypeInfo::DecodableType nodeEndpointList;
        Attributes::GeneratedCommandList::TypeInfo::DecodableType generatedCommandList;
        Attributes::AcceptedCommandList::TypeInfo::DecodableType acceptedCommandList;
        Attributes::AttributeList::TypeInfo::DecodableType attributeList;
        Attributes::FeatureMap::TypeInfo::DecodableType featureMap           = static_cast<uint32_t>(0);
        Attributes::ClusterRevision::TypeInfo::DecodableType clusterRevision = static_cast<uint16_t>(0);
    };
};
} // namespace Attributes
} // namespace JointFabricDatastore
} // namespace Clusters
} // namespace app
} // namespace chip
