/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/NullObject.h>
#include <app/data-model/Nullable.h>
#include <lib/core/DataModelTypes.h>
#include <lib/core/Optional.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/JointFabricDatastore/ClusterId.h>
#include <clusters/JointFabricDatastore/CommandIds.h>
#include <clusters/JointFabricDatastore/Enums.h>
#include <clusters/JointFabricDatastore/Structs.h>

#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace JointFabricDatastore {
namespace Commands {
// Forward-declarations so we can reference these later.

namespace AddKeySet {
struct Type;
struct DecodableType;
} // namespace AddKeySet

namespace UpdateKeySet {
struct Type;
struct DecodableType;
} // namespace UpdateKeySet

namespace RemoveKeySet {
struct Type;
struct DecodableType;
} // namespace RemoveKeySet

namespace AddGroup {
struct Type;
struct DecodableType;
} // namespace AddGroup

namespace UpdateGroup {
struct Type;
struct DecodableType;
} // namespace UpdateGroup

namespace RemoveGroup {
struct Type;
struct DecodableType;
} // namespace RemoveGroup

namespace AddAdmin {
struct Type;
struct DecodableType;
} // namespace AddAdmin

namespace UpdateAdmin {
struct Type;
struct DecodableType;
} // namespace UpdateAdmin

namespace RemoveAdmin {
struct Type;
struct DecodableType;
} // namespace RemoveAdmin

namespace AddPendingNode {
struct Type;
struct DecodableType;
} // namespace AddPendingNode

namespace RefreshNode {
struct Type;
struct DecodableType;
} // namespace RefreshNode

namespace UpdateNode {
struct Type;
struct DecodableType;
} // namespace UpdateNode

namespace RemoveNode {
struct Type;
struct DecodableType;
} // namespace RemoveNode

namespace UpdateEndpointForNode {
struct Type;
struct DecodableType;
} // namespace UpdateEndpointForNode

namespace AddGroupIDToEndpointForNode {
struct Type;
struct DecodableType;
} // namespace AddGroupIDToEndpointForNode

namespace RemoveGroupIDFromEndpointForNode {
struct Type;
struct DecodableType;
} // namespace RemoveGroupIDFromEndpointForNode

namespace AddBindingToEndpointForNode {
struct Type;
struct DecodableType;
} // namespace AddBindingToEndpointForNode

namespace RemoveBindingFromEndpointForNode {
struct Type;
struct DecodableType;
} // namespace RemoveBindingFromEndpointForNode

namespace AddACLToNode {
struct Type;
struct DecodableType;
} // namespace AddACLToNode

namespace RemoveACLFromNode {
struct Type;
struct DecodableType;
} // namespace RemoveACLFromNode

} // namespace Commands

namespace Commands {
namespace AddKeySet {
enum class Fields : uint8_t
{
    kGroupKeySet = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AddKeySet::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    Structs::DatastoreGroupKeySetStruct::Type groupKeySet;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AddKeySet::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    Structs::DatastoreGroupKeySetStruct::DecodableType groupKeySet;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AddKeySet
namespace UpdateKeySet {
enum class Fields : uint8_t
{
    kGroupKeySet = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::UpdateKeySet::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    Structs::DatastoreGroupKeySetStruct::Type groupKeySet;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::UpdateKeySet::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    Structs::DatastoreGroupKeySetStruct::DecodableType groupKeySet;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace UpdateKeySet
namespace RemoveKeySet {
enum class Fields : uint8_t
{
    kGroupKeySetID = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::RemoveKeySet::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    uint16_t groupKeySetID = static_cast<uint16_t>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::RemoveKeySet::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    uint16_t groupKeySetID = static_cast<uint16_t>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace RemoveKeySet
namespace AddGroup {
enum class Fields : uint8_t
{
    kGroupID         = 0,
    kFriendlyName    = 1,
    kGroupKeySetID   = 2,
    kGroupCAT        = 3,
    kGroupCATVersion = 4,
    kGroupPermission = 5,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AddGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    chip::CharSpan friendlyName;
    DataModel::Nullable<uint16_t> groupKeySetID;
    DataModel::Nullable<uint16_t> groupCAT;
    DataModel::Nullable<uint16_t> groupCATVersion;
    DatastoreAccessControlEntryPrivilegeEnum groupPermission = static_cast<DatastoreAccessControlEntryPrivilegeEnum>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AddGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    chip::CharSpan friendlyName;
    DataModel::Nullable<uint16_t> groupKeySetID;
    DataModel::Nullable<uint16_t> groupCAT;
    DataModel::Nullable<uint16_t> groupCATVersion;
    DatastoreAccessControlEntryPrivilegeEnum groupPermission = static_cast<DatastoreAccessControlEntryPrivilegeEnum>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AddGroup
namespace UpdateGroup {
enum class Fields : uint8_t
{
    kGroupID         = 0,
    kFriendlyName    = 1,
    kGroupKeySetID   = 2,
    kGroupCAT        = 3,
    kGroupCATVersion = 4,
    kGroupPermission = 5,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::UpdateGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    DataModel::Nullable<chip::CharSpan> friendlyName;
    DataModel::Nullable<uint16_t> groupKeySetID;
    DataModel::Nullable<uint16_t> groupCAT;
    DataModel::Nullable<uint16_t> groupCATVersion;
    DatastoreAccessControlEntryPrivilegeEnum groupPermission = static_cast<DatastoreAccessControlEntryPrivilegeEnum>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::UpdateGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    DataModel::Nullable<chip::CharSpan> friendlyName;
    DataModel::Nullable<uint16_t> groupKeySetID;
    DataModel::Nullable<uint16_t> groupCAT;
    DataModel::Nullable<uint16_t> groupCATVersion;
    DatastoreAccessControlEntryPrivilegeEnum groupPermission = static_cast<DatastoreAccessControlEntryPrivilegeEnum>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace UpdateGroup
namespace RemoveGroup {
enum class Fields : uint8_t
{
    kGroupID = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::RemoveGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::RemoveGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace RemoveGroup
namespace AddAdmin {
enum class Fields : uint8_t
{
    kNodeID       = 0,
    kFriendlyName = 1,
    kVendorID     = 2,
    kIcac         = 3,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AddAdmin::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    chip::CharSpan friendlyName;
    chip::VendorId vendorID = static_cast<chip::VendorId>(0);
    chip::ByteSpan icac;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AddAdmin::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    chip::CharSpan friendlyName;
    chip::VendorId vendorID = static_cast<chip::VendorId>(0);
    chip::ByteSpan icac;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AddAdmin
namespace UpdateAdmin {
enum class Fields : uint8_t
{
    kNodeID       = 0,
    kFriendlyName = 1,
    kIcac         = 2,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::UpdateAdmin::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    DataModel::Nullable<chip::NodeId> nodeID;
    DataModel::Nullable<chip::CharSpan> friendlyName;
    DataModel::Nullable<chip::ByteSpan> icac;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::UpdateAdmin::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    DataModel::Nullable<chip::NodeId> nodeID;
    DataModel::Nullable<chip::CharSpan> friendlyName;
    DataModel::Nullable<chip::ByteSpan> icac;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace UpdateAdmin
namespace RemoveAdmin {
enum class Fields : uint8_t
{
    kNodeID = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::RemoveAdmin::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::RemoveAdmin::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace RemoveAdmin
namespace AddPendingNode {
enum class Fields : uint8_t
{
    kNodeID       = 0,
    kFriendlyName = 1,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AddPendingNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    chip::CharSpan friendlyName;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AddPendingNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    chip::CharSpan friendlyName;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AddPendingNode
namespace RefreshNode {
enum class Fields : uint8_t
{
    kNodeID = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::RefreshNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::RefreshNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace RefreshNode
namespace UpdateNode {
enum class Fields : uint8_t
{
    kNodeID       = 0,
    kFriendlyName = 1,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::UpdateNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    chip::CharSpan friendlyName;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::UpdateNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    chip::CharSpan friendlyName;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace UpdateNode
namespace RemoveNode {
enum class Fields : uint8_t
{
    kNodeID = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::RemoveNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::RemoveNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace RemoveNode
namespace UpdateEndpointForNode {
enum class Fields : uint8_t
{
    kEndpointID   = 0,
    kNodeID       = 1,
    kFriendlyName = 2,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::UpdateEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);
    chip::CharSpan friendlyName;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::UpdateEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);
    chip::CharSpan friendlyName;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace UpdateEndpointForNode
namespace AddGroupIDToEndpointForNode {
enum class Fields : uint8_t
{
    kNodeID     = 0,
    kEndpointID = 1,
    kGroupID    = 2,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AddGroupIDToEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);
    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    chip::GroupId groupID       = static_cast<chip::GroupId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AddGroupIDToEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);
    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    chip::GroupId groupID       = static_cast<chip::GroupId>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AddGroupIDToEndpointForNode
namespace RemoveGroupIDFromEndpointForNode {
enum class Fields : uint8_t
{
    kNodeID     = 0,
    kEndpointID = 1,
    kGroupID    = 2,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::RemoveGroupIDFromEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);
    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    chip::GroupId groupID       = static_cast<chip::GroupId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::RemoveGroupIDFromEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);
    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    chip::GroupId groupID       = static_cast<chip::GroupId>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace RemoveGroupIDFromEndpointForNode
namespace AddBindingToEndpointForNode {
enum class Fields : uint8_t
{
    kNodeID     = 0,
    kEndpointID = 1,
    kBinding    = 2,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AddBindingToEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);
    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    Structs::DatastoreBindingTargetStruct::Type binding;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AddBindingToEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);
    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    Structs::DatastoreBindingTargetStruct::DecodableType binding;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AddBindingToEndpointForNode
namespace RemoveBindingFromEndpointForNode {
enum class Fields : uint8_t
{
    kListID     = 0,
    kEndpointID = 1,
    kNodeID     = 2,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::RemoveBindingFromEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    uint16_t listID             = static_cast<uint16_t>(0);
    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::RemoveBindingFromEndpointForNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    uint16_t listID             = static_cast<uint16_t>(0);
    chip::EndpointId endpointID = static_cast<chip::EndpointId>(0);
    chip::NodeId nodeID         = static_cast<chip::NodeId>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace RemoveBindingFromEndpointForNode
namespace AddACLToNode {
enum class Fields : uint8_t
{
    kNodeID   = 0,
    kACLEntry = 1,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AddACLToNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    Structs::DatastoreAccessControlEntryStruct::Type ACLEntry;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AddACLToNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    Structs::DatastoreAccessControlEntryStruct::DecodableType ACLEntry;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AddACLToNode
namespace RemoveACLFromNode {
enum class Fields : uint8_t
{
    kListID = 0,
    kNodeID = 1,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::RemoveACLFromNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    uint16_t listID     = static_cast<uint16_t>(0);
    chip::NodeId nodeID = static_cast<chip::NodeId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::RemoveACLFromNode::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::JointFabricDatastore::Id; }

    uint16_t listID     = static_cast<uint16_t>(0);
    chip::NodeId nodeID = static_cast<chip::NodeId>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace RemoveACLFromNode
} // namespace Commands
} // namespace JointFabricDatastore
} // namespace Clusters
} // namespace app
} // namespace chip
