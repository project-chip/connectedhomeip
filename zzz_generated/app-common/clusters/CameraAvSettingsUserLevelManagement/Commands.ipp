/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#include <clusters/CameraAvSettingsUserLevelManagement/Commands.h>

#include <app/data-model/Decode.h>
#include <app/data-model/StructDecodeIterator.h>
#include <app/data-model/WrappedStructEncoder.h>

namespace chip {
namespace app {
namespace Clusters {
namespace CameraAvSettingsUserLevelManagement {
namespace Commands {
namespace MPTZSetPosition {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kPan), pan);
    encoder.Encode(to_underlying(Fields::kTilt), tilt);
    encoder.Encode(to_underlying(Fields::kZoom), zoom);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kPan))
        {
            err = DataModel::Decode(reader, pan);
        }
        else if (__context_tag == to_underlying(Fields::kTilt))
        {
            err = DataModel::Decode(reader, tilt);
        }
        else if (__context_tag == to_underlying(Fields::kZoom))
        {
            err = DataModel::Decode(reader, zoom);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace MPTZSetPosition.
namespace MPTZRelativeMove {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kPanDelta), panDelta);
    encoder.Encode(to_underlying(Fields::kTiltDelta), tiltDelta);
    encoder.Encode(to_underlying(Fields::kZoomDelta), zoomDelta);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kPanDelta))
        {
            err = DataModel::Decode(reader, panDelta);
        }
        else if (__context_tag == to_underlying(Fields::kTiltDelta))
        {
            err = DataModel::Decode(reader, tiltDelta);
        }
        else if (__context_tag == to_underlying(Fields::kZoomDelta))
        {
            err = DataModel::Decode(reader, zoomDelta);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace MPTZRelativeMove.
namespace MPTZMoveToPreset {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kPresetID), presetID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kPresetID))
        {
            err = DataModel::Decode(reader, presetID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace MPTZMoveToPreset.
namespace MPTZSavePreset {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kPresetID), presetID);
    encoder.Encode(to_underlying(Fields::kName), name);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kPresetID))
        {
            err = DataModel::Decode(reader, presetID);
        }
        else if (__context_tag == to_underlying(Fields::kName))
        {
            err = DataModel::Decode(reader, name);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace MPTZSavePreset.
namespace MPTZRemovePreset {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kPresetID), presetID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kPresetID))
        {
            err = DataModel::Decode(reader, presetID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace MPTZRemovePreset.
namespace DPTZSetViewport {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kVideoStreamID), videoStreamID);
    encoder.Encode(to_underlying(Fields::kViewport), viewport);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kVideoStreamID))
        {
            err = DataModel::Decode(reader, videoStreamID);
        }
        else if (__context_tag == to_underlying(Fields::kViewport))
        {
            err = DataModel::Decode(reader, viewport);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace DPTZSetViewport.
namespace DPTZRelativeMove {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kVideoStreamID), videoStreamID);
    encoder.Encode(to_underlying(Fields::kDeltaX), deltaX);
    encoder.Encode(to_underlying(Fields::kDeltaY), deltaY);
    encoder.Encode(to_underlying(Fields::kZoomDelta), zoomDelta);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kVideoStreamID))
        {
            err = DataModel::Decode(reader, videoStreamID);
        }
        else if (__context_tag == to_underlying(Fields::kDeltaX))
        {
            err = DataModel::Decode(reader, deltaX);
        }
        else if (__context_tag == to_underlying(Fields::kDeltaY))
        {
            err = DataModel::Decode(reader, deltaY);
        }
        else if (__context_tag == to_underlying(Fields::kZoomDelta))
        {
            err = DataModel::Decode(reader, zoomDelta);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace DPTZRelativeMove.
} // namespace Commands
} // namespace CameraAvSettingsUserLevelManagement
} // namespace Clusters
} // namespace app
} // namespace chip
