/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/shared/Enums.h>
#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace ClosureControl {

// Enum for ClosureErrorEnum
enum class ClosureErrorEnum : uint8_t
{
    kBlocked              = 0x00,
    kTemperatureLimited   = 0x01,
    kMaintenanceRequired  = 0x02,
    kInternalInterference = 0x03,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 4,
};

// Enum for LatchingEnum
enum class LatchingEnum : uint8_t
{
    kLatchedAndSecured    = 0x00,
    kLatchedButNotSecured = 0x01,
    kNotLatched           = 0x02,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 3,
};

// Enum for MainStateEnum
enum class MainStateEnum : uint8_t
{
    kStopped          = 0x00,
    kMoving           = 0x01,
    kWaitingForMotion = 0x02,
    kError            = 0x03,
    kCalibrating      = 0x04,
    kProtected        = 0x05,
    kDisengaged       = 0x06,
    kSetupRequired    = 0x07,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 8,
};

// Enum for PositioningEnum
enum class PositioningEnum : uint8_t
{
    kFullyClosed          = 0x00,
    kFullyOpened          = 0x01,
    kPartiallyOpened      = 0x02,
    kOpenedForPedestrian  = 0x03,
    kOpenedForVentilation = 0x04,
    kOpenedAtSignature    = 0x05,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 6,
};

// Enum for TargetLatchEnum
enum class TargetLatchEnum : uint8_t
{
    kLatch   = 0x00,
    kUnlatch = 0x01,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 2,
};

// Enum for TargetPositionEnum
enum class TargetPositionEnum : uint8_t
{
    kCloseInFull = 0x00,
    kOpenInFull  = 0x01,
    kPedestrian  = 0x02,
    kVentilation = 0x03,
    kSignature   = 0x04,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 5,
};

// Bitmap for Feature
enum class Feature : uint32_t
{
    kPositioning      = 0x1,
    kMotionLatching   = 0x2,
    kInstantaneous    = 0x4,
    kSpeed            = 0x8,
    kVentilation      = 0x10,
    kPedestrian       = 0x20,
    kCalibration      = 0x40,
    kProtection       = 0x80,
    kManuallyOperable = 0x100,
};
} // namespace ClosureControl
} // namespace Clusters
} // namespace app
} // namespace chip
