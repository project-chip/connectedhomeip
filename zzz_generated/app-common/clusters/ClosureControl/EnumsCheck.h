/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/ClosureControl/Enums.h>

namespace chip {
namespace app {
namespace Clusters {
static auto __attribute__((unused)) EnsureKnownEnumValue(ClosureControl::ClosureErrorEnum val)
{
    using EnumType = ClosureControl::ClosureErrorEnum;
    switch (val)
    {
    case EnumType::kPhysicallyBlocked:
    case EnumType::kBlockedBySensor:
    case EnumType::kTemperatureLimited:
    case EnumType::kMaintenanceRequired:
    case EnumType::kInternalInterference:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(ClosureControl::MainStateEnum val)
{
    using EnumType = ClosureControl::MainStateEnum;
    switch (val)
    {
    case EnumType::kStopped:
    case EnumType::kMoving:
    case EnumType::kWaitingForMotion:
    case EnumType::kError:
    case EnumType::kCalibrating:
    case EnumType::kProtected:
    case EnumType::kDisengaged:
    case EnumType::kSetupRequired:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(ClosureControl::PositioningEnum val)
{
    using EnumType = ClosureControl::PositioningEnum;
    switch (val)
    {
    case EnumType::kFullyClosed:
    case EnumType::kFullyOpened:
    case EnumType::kPartiallyOpened:
    case EnumType::kOpenedForPedestrian:
    case EnumType::kOpenedForVentilation:
    case EnumType::kOpenedAtSignature:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(ClosureControl::TargetPositionEnum val)
{
    using EnumType = ClosureControl::TargetPositionEnum;
    switch (val)
    {
    case EnumType::kCloseInFull:
    case EnumType::kOpenInFull:
    case EnumType::kPedestrian:
    case EnumType::kVentilation:
    case EnumType::kSignature:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
} // namespace Clusters
} // namespace app
} // namespace chip
