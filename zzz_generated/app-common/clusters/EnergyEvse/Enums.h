/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/shared/Enums.h>
#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace EnergyEvse {

// Enum for EnergyTransferStoppedReasonEnum
enum class EnergyTransferStoppedReasonEnum : uint8_t
{
    kEVStopped   = 0x00,
    kEVSEStopped = 0x01,
    kOther       = 0x02,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 3,
};

// Enum for FaultStateEnum
enum class FaultStateEnum : uint8_t
{
    kNoError           = 0x00,
    kMeterFailure      = 0x01,
    kOverVoltage       = 0x02,
    kUnderVoltage      = 0x03,
    kOverCurrent       = 0x04,
    kContactWetFailure = 0x05,
    kContactDryFailure = 0x06,
    kGroundFault       = 0x07,
    kPowerLoss         = 0x08,
    kPowerQuality      = 0x09,
    kPilotShortCircuit = 0x0A,
    kEmergencyStop     = 0x0B,
    kEVDisconnected    = 0x0C,
    kWrongPowerSupply  = 0x0D,
    kLiveNeutralSwap   = 0x0E,
    kOverTemperature   = 0x0F,
    kOther             = 0xFF,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 16,
};

// Enum for StateEnum
enum class StateEnum : uint8_t
{
    kNotPluggedIn         = 0x00,
    kPluggedInNoDemand    = 0x01,
    kPluggedInDemand      = 0x02,
    kPluggedInCharging    = 0x03,
    kPluggedInDischarging = 0x04,
    kSessionEnding        = 0x05,
    kFault                = 0x06,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 7,
};

// Enum for SupplyStateEnum
enum class SupplyStateEnum : uint8_t
{
    kDisabled            = 0x00,
    kChargingEnabled     = 0x01,
    kDischargingEnabled  = 0x02,
    kDisabledError       = 0x03,
    kDisabledDiagnostics = 0x04,
    kEnabled             = 0x05,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 6,
};

// Bitmap for Feature
enum class Feature : uint32_t
{
    kChargingPreferences = 0x1,
    kSoCReporting        = 0x2,
    kPlugAndCharge       = 0x4,
    kRfid                = 0x8,
    kV2x                 = 0x10,
};

// Bitmap for TargetDayOfWeekBitmap
enum class TargetDayOfWeekBitmap : uint8_t
{
    kSunday    = 0x1,
    kMonday    = 0x2,
    kTuesday   = 0x4,
    kWednesday = 0x8,
    kThursday  = 0x10,
    kFriday    = 0x20,
    kSaturday  = 0x40,
};
} // namespace EnergyEvse
} // namespace Clusters
} // namespace app
} // namespace chip
