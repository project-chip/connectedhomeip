/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/EnergyEvse/Enums.h>

namespace chip {
namespace app {
namespace Clusters {
static auto __attribute__((unused)) EnsureKnownEnumValue(EnergyEvse::EnergyTransferStoppedReasonEnum val)
{
    using EnumType = EnergyEvse::EnergyTransferStoppedReasonEnum;
    switch (val)
    {
    case EnumType::kEVStopped:
    case EnumType::kEVSEStopped:
    case EnumType::kOther:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(EnergyEvse::FaultStateEnum val)
{
    using EnumType = EnergyEvse::FaultStateEnum;
    switch (val)
    {
    case EnumType::kNoError:
    case EnumType::kMeterFailure:
    case EnumType::kOverVoltage:
    case EnumType::kUnderVoltage:
    case EnumType::kOverCurrent:
    case EnumType::kContactWetFailure:
    case EnumType::kContactDryFailure:
    case EnumType::kGroundFault:
    case EnumType::kPowerLoss:
    case EnumType::kPowerQuality:
    case EnumType::kPilotShortCircuit:
    case EnumType::kEmergencyStop:
    case EnumType::kEVDisconnected:
    case EnumType::kWrongPowerSupply:
    case EnumType::kLiveNeutralSwap:
    case EnumType::kOverTemperature:
    case EnumType::kOther:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(EnergyEvse::StateEnum val)
{
    using EnumType = EnergyEvse::StateEnum;
    switch (val)
    {
    case EnumType::kNotPluggedIn:
    case EnumType::kPluggedInNoDemand:
    case EnumType::kPluggedInDemand:
    case EnumType::kPluggedInCharging:
    case EnumType::kPluggedInDischarging:
    case EnumType::kSessionEnding:
    case EnumType::kFault:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(EnergyEvse::SupplyStateEnum val)
{
    using EnumType = EnergyEvse::SupplyStateEnum;
    switch (val)
    {
    case EnumType::kDisabled:
    case EnumType::kChargingEnabled:
    case EnumType::kDischargingEnabled:
    case EnumType::kDisabledError:
    case EnumType::kDisabledDiagnostics:
    case EnumType::kEnabled:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
} // namespace Clusters
} // namespace app
} // namespace chip
