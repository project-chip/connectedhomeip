/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
// This file is generated from clusters-Structs.ipp.zapt

#include <clusters/ContentControl/Structs.h>

#include <app/data-model/StructDecodeIterator.h>
#include <app/data-model/WrappedStructEncoder.h>

namespace chip {
namespace app {
namespace Clusters {
namespace ContentControl {
namespace Structs {

namespace TimePeriodStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kStartHour), startHour);
    encoder.Encode(to_underlying(Fields::kStartMinute), startMinute);
    encoder.Encode(to_underlying(Fields::kEndHour), endHour);
    encoder.Encode(to_underlying(Fields::kEndMinute), endMinute);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kStartHour))
        {
            err = DataModel::Decode(reader, startHour);
        }
        else if (__context_tag == to_underlying(Fields::kStartMinute))
        {
            err = DataModel::Decode(reader, startMinute);
        }
        else if (__context_tag == to_underlying(Fields::kEndHour))
        {
            err = DataModel::Decode(reader, endHour);
        }
        else if (__context_tag == to_underlying(Fields::kEndMinute))
        {
            err = DataModel::Decode(reader, endMinute);
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace TimePeriodStruct

namespace TimeWindowStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kTimeWindowIndex), timeWindowIndex);
    encoder.Encode(to_underlying(Fields::kDayOfWeek), dayOfWeek);
    encoder.Encode(to_underlying(Fields::kTimePeriod), timePeriod);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kTimeWindowIndex))
        {
            err = DataModel::Decode(reader, timeWindowIndex);
        }
        else if (__context_tag == to_underlying(Fields::kDayOfWeek))
        {
            err = DataModel::Decode(reader, dayOfWeek);
        }
        else if (__context_tag == to_underlying(Fields::kTimePeriod))
        {
            err = DataModel::Decode(reader, timePeriod);
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace TimeWindowStruct

namespace AppInfoStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kCatalogVendorID), catalogVendorID);
    encoder.Encode(to_underlying(Fields::kApplicationID), applicationID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kCatalogVendorID))
        {
            err = DataModel::Decode(reader, catalogVendorID);
        }
        else if (__context_tag == to_underlying(Fields::kApplicationID))
        {
            err = DataModel::Decode(reader, applicationID);
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace AppInfoStruct

namespace BlockChannelStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kBlockChannelIndex), blockChannelIndex);
    encoder.Encode(to_underlying(Fields::kMajorNumber), majorNumber);
    encoder.Encode(to_underlying(Fields::kMinorNumber), minorNumber);
    encoder.Encode(to_underlying(Fields::kIdentifier), identifier);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kBlockChannelIndex))
        {
            err = DataModel::Decode(reader, blockChannelIndex);
        }
        else if (__context_tag == to_underlying(Fields::kMajorNumber))
        {
            err = DataModel::Decode(reader, majorNumber);
        }
        else if (__context_tag == to_underlying(Fields::kMinorNumber))
        {
            err = DataModel::Decode(reader, minorNumber);
        }
        else if (__context_tag == to_underlying(Fields::kIdentifier))
        {
            err = DataModel::Decode(reader, identifier);
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace BlockChannelStruct

namespace RatingNameStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kRatingName), ratingName);
    encoder.Encode(to_underlying(Fields::kRatingNameDesc), ratingNameDesc);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kRatingName))
        {
            err = DataModel::Decode(reader, ratingName);
        }
        else if (__context_tag == to_underlying(Fields::kRatingNameDesc))
        {
            err = DataModel::Decode(reader, ratingNameDesc);
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace RatingNameStruct
} // namespace Structs
} // namespace ContentControl
} // namespace Clusters
} // namespace app
} // namespace chip
