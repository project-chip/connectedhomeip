/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/NullObject.h>
#include <app/data-model/Nullable.h>
#include <lib/core/DataModelTypes.h>
#include <lib/core/Optional.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/ContentControl/ClusterId.h>
#include <clusters/ContentControl/CommandIds.h>
#include <clusters/ContentControl/Enums.h>
#include <clusters/ContentControl/Structs.h>

#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace ContentControl {
namespace Commands {
// Forward-declarations so we can reference these later.

namespace UpdatePIN {
struct Type;
struct DecodableType;
} // namespace UpdatePIN

namespace ResetPIN {
struct Type;
struct DecodableType;
} // namespace ResetPIN

namespace ResetPINResponse {
struct Type;
struct DecodableType;
} // namespace ResetPINResponse

namespace Enable {
struct Type;
struct DecodableType;
} // namespace Enable

namespace Disable {
struct Type;
struct DecodableType;
} // namespace Disable

namespace AddBonusTime {
struct Type;
struct DecodableType;
} // namespace AddBonusTime

namespace SetScreenDailyTime {
struct Type;
struct DecodableType;
} // namespace SetScreenDailyTime

namespace BlockUnratedContent {
struct Type;
struct DecodableType;
} // namespace BlockUnratedContent

namespace UnblockUnratedContent {
struct Type;
struct DecodableType;
} // namespace UnblockUnratedContent

namespace SetOnDemandRatingThreshold {
struct Type;
struct DecodableType;
} // namespace SetOnDemandRatingThreshold

namespace SetScheduledContentRatingThreshold {
struct Type;
struct DecodableType;
} // namespace SetScheduledContentRatingThreshold

} // namespace Commands

namespace Commands {
namespace UpdatePIN {
enum class Fields : uint8_t
{
    kOldPIN = 0,
    kNewPIN = 1,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::UpdatePIN::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    Optional<chip::CharSpan> oldPIN;
    chip::CharSpan newPIN;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::UpdatePIN::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    Optional<chip::CharSpan> oldPIN;
    chip::CharSpan newPIN;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace UpdatePIN
namespace ResetPIN {
enum class Fields : uint8_t
{
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::ResetPIN::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = Clusters::ContentControl::Commands::ResetPINResponse::DecodableType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::ResetPIN::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace ResetPIN
namespace ResetPINResponse {
enum class Fields : uint8_t
{
    kPINCode = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::ResetPINResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    chip::CharSpan PINCode;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::ResetPINResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    chip::CharSpan PINCode;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace ResetPINResponse
namespace Enable {
enum class Fields : uint8_t
{
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::Enable::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::Enable::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace Enable
namespace Disable {
enum class Fields : uint8_t
{
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::Disable::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::Disable::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace Disable
namespace AddBonusTime {
enum class Fields : uint8_t
{
    kPINCode   = 0,
    kBonusTime = 1,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::AddBonusTime::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    Optional<chip::CharSpan> PINCode;
    Optional<uint32_t> bonusTime;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::AddBonusTime::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    Optional<chip::CharSpan> PINCode;
    Optional<uint32_t> bonusTime;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace AddBonusTime
namespace SetScreenDailyTime {
enum class Fields : uint8_t
{
    kScreenTime = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::SetScreenDailyTime::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    uint32_t screenTime = static_cast<uint32_t>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::SetScreenDailyTime::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    uint32_t screenTime = static_cast<uint32_t>(0);
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace SetScreenDailyTime
namespace BlockUnratedContent {
enum class Fields : uint8_t
{
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::BlockUnratedContent::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::BlockUnratedContent::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace BlockUnratedContent
namespace UnblockUnratedContent {
enum class Fields : uint8_t
{
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::UnblockUnratedContent::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::UnblockUnratedContent::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace UnblockUnratedContent
namespace SetOnDemandRatingThreshold {
enum class Fields : uint8_t
{
    kRating = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::SetOnDemandRatingThreshold::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    chip::CharSpan rating;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::SetOnDemandRatingThreshold::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    chip::CharSpan rating;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace SetOnDemandRatingThreshold
namespace SetScheduledContentRatingThreshold {
enum class Fields : uint8_t
{
    kRating = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::SetScheduledContentRatingThreshold::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    chip::CharSpan rating;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::SetScheduledContentRatingThreshold::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

    chip::CharSpan rating;
    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace SetScheduledContentRatingThreshold
} // namespace Commands
} // namespace ContentControl
} // namespace Clusters
} // namespace app
} // namespace chip
