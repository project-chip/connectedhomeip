/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <app/ConcreteAttributePath.h>
#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/Nullable.h>
#include <app/util/basic-types.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Attributes.h>
#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/ContentControl/AttributeIds.h>
#include <clusters/ContentControl/ClusterId.h>
#include <clusters/ContentControl/Enums.h>
#include <clusters/ContentControl/Structs.h>

namespace chip {
namespace app {
namespace Clusters {
namespace ContentControl {
namespace Attributes {

namespace Enabled {
struct TypeInfo
{
    using Type             = bool;
    using DecodableType    = bool;
    using DecodableArgType = bool;

    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::Enabled::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace Enabled
namespace OnDemandRatings {
struct TypeInfo
{
    using Type = chip::app::DataModel::List<const chip::app::Clusters::ContentControl::Structs::RatingNameStruct::Type>;
    using DecodableType =
        chip::app::DataModel::DecodableList<chip::app::Clusters::ContentControl::Structs::RatingNameStruct::DecodableType>;
    using DecodableArgType =
        const chip::app::DataModel::DecodableList<chip::app::Clusters::ContentControl::Structs::RatingNameStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::OnDemandRatings::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace OnDemandRatings
namespace OnDemandRatingThreshold {
struct TypeInfo
{
    using Type             = chip::CharSpan;
    using DecodableType    = chip::CharSpan;
    using DecodableArgType = chip::CharSpan;

    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::OnDemandRatingThreshold::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
    static constexpr size_t MaxLength() { return 8; }
};
} // namespace OnDemandRatingThreshold
namespace ScheduledContentRatings {
struct TypeInfo
{
    using Type = chip::app::DataModel::List<const chip::app::Clusters::ContentControl::Structs::RatingNameStruct::Type>;
    using DecodableType =
        chip::app::DataModel::DecodableList<chip::app::Clusters::ContentControl::Structs::RatingNameStruct::DecodableType>;
    using DecodableArgType =
        const chip::app::DataModel::DecodableList<chip::app::Clusters::ContentControl::Structs::RatingNameStruct::DecodableType> &;

    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::ScheduledContentRatings::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace ScheduledContentRatings
namespace ScheduledContentRatingThreshold {
struct TypeInfo
{
    using Type             = chip::CharSpan;
    using DecodableType    = chip::CharSpan;
    using DecodableArgType = chip::CharSpan;

    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::ScheduledContentRatingThreshold::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
    static constexpr size_t MaxLength() { return 8; }
};
} // namespace ScheduledContentRatingThreshold
namespace ScreenDailyTime {
struct TypeInfo
{
    using Type             = uint32_t;
    using DecodableType    = uint32_t;
    using DecodableArgType = uint32_t;

    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::ScreenDailyTime::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace ScreenDailyTime
namespace RemainingScreenTime {
struct TypeInfo
{
    using Type             = uint32_t;
    using DecodableType    = uint32_t;
    using DecodableArgType = uint32_t;

    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::RemainingScreenTime::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace RemainingScreenTime
namespace BlockUnrated {
struct TypeInfo
{
    using Type             = bool;
    using DecodableType    = bool;
    using DecodableArgType = bool;

    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::BlockUnrated::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace BlockUnrated
namespace GeneratedCommandList {
struct TypeInfo : public Clusters::Globals::Attributes::GeneratedCommandList::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
};
} // namespace GeneratedCommandList
namespace AcceptedCommandList {
struct TypeInfo : public Clusters::Globals::Attributes::AcceptedCommandList::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
};
} // namespace AcceptedCommandList
namespace AttributeList {
struct TypeInfo : public Clusters::Globals::Attributes::AttributeList::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
};
} // namespace AttributeList
namespace FeatureMap {
struct TypeInfo : public Clusters::Globals::Attributes::FeatureMap::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
};
} // namespace FeatureMap
namespace ClusterRevision {
struct TypeInfo : public Clusters::Globals::Attributes::ClusterRevision::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }
};
} // namespace ClusterRevision

struct TypeInfo
{
    struct DecodableType
    {
        static constexpr ClusterId GetClusterId() { return Clusters::ContentControl::Id; }

        CHIP_ERROR Decode(TLV::TLVReader & reader, const ConcreteAttributePath & path);

        Attributes::Enabled::TypeInfo::DecodableType enabled = static_cast<bool>(0);
        Attributes::OnDemandRatings::TypeInfo::DecodableType onDemandRatings;
        Attributes::OnDemandRatingThreshold::TypeInfo::DecodableType onDemandRatingThreshold;
        Attributes::ScheduledContentRatings::TypeInfo::DecodableType scheduledContentRatings;
        Attributes::ScheduledContentRatingThreshold::TypeInfo::DecodableType scheduledContentRatingThreshold;
        Attributes::ScreenDailyTime::TypeInfo::DecodableType screenDailyTime         = static_cast<uint32_t>(0);
        Attributes::RemainingScreenTime::TypeInfo::DecodableType remainingScreenTime = static_cast<uint32_t>(0);
        Attributes::BlockUnrated::TypeInfo::DecodableType blockUnrated               = static_cast<bool>(0);
        Attributes::GeneratedCommandList::TypeInfo::DecodableType generatedCommandList;
        Attributes::AcceptedCommandList::TypeInfo::DecodableType acceptedCommandList;
        Attributes::AttributeList::TypeInfo::DecodableType attributeList;
        Attributes::FeatureMap::TypeInfo::DecodableType featureMap           = static_cast<uint32_t>(0);
        Attributes::ClusterRevision::TypeInfo::DecodableType clusterRevision = static_cast<uint16_t>(0);
    };
};
} // namespace Attributes
} // namespace ContentControl
} // namespace Clusters
} // namespace app
} // namespace chip
