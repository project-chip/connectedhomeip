/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/ContentLauncher/Enums.h>

namespace chip {
namespace app {
namespace Clusters {
static auto __attribute__((unused)) EnsureKnownEnumValue(ContentLauncher::CharacteristicEnum val)
{
    using EnumType = ContentLauncher::CharacteristicEnum;
    switch (val)
    {
    case EnumType::kForcedSubtitles:
    case EnumType::kDescribesVideo:
    case EnumType::kEasyToRead:
    case EnumType::kFrameBased:
    case EnumType::kMainProgram:
    case EnumType::kOriginalContent:
    case EnumType::kVoiceOverTranslation:
    case EnumType::kCaption:
    case EnumType::kSubtitle:
    case EnumType::kAlternate:
    case EnumType::kSupplementary:
    case EnumType::kCommentary:
    case EnumType::kDubbedTranslation:
    case EnumType::kDescription:
    case EnumType::kMetadata:
    case EnumType::kEnhancedAudioIntelligibility:
    case EnumType::kEmergency:
    case EnumType::kKaraoke:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(ContentLauncher::MetricTypeEnum val)
{
    using EnumType = ContentLauncher::MetricTypeEnum;
    switch (val)
    {
    case EnumType::kPixels:
    case EnumType::kPercentage:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(ContentLauncher::ParameterEnum val)
{
    using EnumType = ContentLauncher::ParameterEnum;
    switch (val)
    {
    case EnumType::kActor:
    case EnumType::kChannel:
    case EnumType::kCharacter:
    case EnumType::kDirector:
    case EnumType::kEvent:
    case EnumType::kFranchise:
    case EnumType::kGenre:
    case EnumType::kLeague:
    case EnumType::kPopularity:
    case EnumType::kProvider:
    case EnumType::kSport:
    case EnumType::kSportsTeam:
    case EnumType::kType:
    case EnumType::kVideo:
    case EnumType::kSeason:
    case EnumType::kEpisode:
    case EnumType::kAny:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(ContentLauncher::StatusEnum val)
{
    using EnumType = ContentLauncher::StatusEnum;
    switch (val)
    {
    case EnumType::kSuccess:
    case EnumType::kURLNotAvailable:
    case EnumType::kAuthFailed:
    case EnumType::kTextTrackNotAvailable:
    case EnumType::kAudioTrackNotAvailable:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
} // namespace Clusters
} // namespace app
} // namespace chip
