/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#include <clusters/ContentLauncher/Commands.h>

#include <app/data-model/Decode.h>
#include <app/data-model/StructDecodeIterator.h>
#include <app/data-model/WrappedStructEncoder.h>

namespace chip {
namespace app {
namespace Clusters {
namespace ContentLauncher {
namespace Commands {
namespace LaunchContent {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kSearch), search);
    encoder.Encode(to_underlying(Fields::kAutoPlay), autoPlay);
    encoder.Encode(to_underlying(Fields::kData), data);
    encoder.Encode(to_underlying(Fields::kPlaybackPreferences), playbackPreferences);
    encoder.Encode(to_underlying(Fields::kUseCurrentContext), useCurrentContext);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kSearch))
        {
            err = DataModel::Decode(reader, search);
        }
        else if (__context_tag == to_underlying(Fields::kAutoPlay))
        {
            err = DataModel::Decode(reader, autoPlay);
        }
        else if (__context_tag == to_underlying(Fields::kData))
        {
            err = DataModel::Decode(reader, data);
        }
        else if (__context_tag == to_underlying(Fields::kPlaybackPreferences))
        {
            err = DataModel::Decode(reader, playbackPreferences);
        }
        else if (__context_tag == to_underlying(Fields::kUseCurrentContext))
        {
            err = DataModel::Decode(reader, useCurrentContext);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace LaunchContent.
namespace LaunchURL {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kContentURL), contentURL);
    encoder.Encode(to_underlying(Fields::kDisplayString), displayString);
    encoder.Encode(to_underlying(Fields::kBrandingInformation), brandingInformation);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kContentURL))
        {
            err = DataModel::Decode(reader, contentURL);
        }
        else if (__context_tag == to_underlying(Fields::kDisplayString))
        {
            err = DataModel::Decode(reader, displayString);
        }
        else if (__context_tag == to_underlying(Fields::kBrandingInformation))
        {
            err = DataModel::Decode(reader, brandingInformation);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace LaunchURL.
namespace LauncherResponse {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kStatus), status);
    encoder.Encode(to_underlying(Fields::kData), data);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kStatus))
        {
            err = DataModel::Decode(reader, status);
        }
        else if (__context_tag == to_underlying(Fields::kData))
        {
            err = DataModel::Decode(reader, data);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace LauncherResponse.
} // namespace Commands
} // namespace ContentLauncher
} // namespace Clusters
} // namespace app
} // namespace chip
