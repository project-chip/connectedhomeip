/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/NullObject.h>
#include <app/data-model/Nullable.h>
#include <lib/core/DataModelTypes.h>
#include <lib/core/Optional.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/Multicast/ClusterId.h>
#include <clusters/Multicast/CommandIds.h>
#include <clusters/Multicast/Enums.h>
#include <clusters/Multicast/Structs.h>

#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace Multicast {
namespace Commands {
// Forward-declarations so we can reference these later.

namespace SetTarget {
struct Type;
struct DecodableType;
} // namespace SetTarget

namespace RemoveTarget {
struct Type;
struct DecodableType;
} // namespace RemoveTarget

} // namespace Commands

namespace Commands {
namespace SetTarget {
enum class Fields : uint8_t
{
    kGroupId     = 0,
    kEndpoints   = 1,
    kKey         = 2,
    kGracePeriod = 3,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::SetTarget::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Multicast::Id; }
    static constexpr bool kIsFabricScoped = true;

    chip::GroupId groupId = static_cast<chip::GroupId>(0);
    DataModel::List<const chip::EndpointId> endpoints;
    chip::ByteSpan key;
    uint32_t gracePeriod = static_cast<uint32_t>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::SetTarget::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Multicast::Id; }
    static constexpr bool kIsFabricScoped = true;

    chip::GroupId groupId = static_cast<chip::GroupId>(0);
    DataModel::DecodableList<chip::EndpointId> endpoints;
    chip::ByteSpan key;
    uint32_t gracePeriod = static_cast<uint32_t>(0);

    CHIP_ERROR Decode(TLV::TLVReader & reader, FabricIndex aAccessingFabricIndex);
};
}; // namespace SetTarget
namespace RemoveTarget {
enum class Fields : uint8_t
{
    kGroupId     = 0,
    kEndpoints   = 1,
    kGracePeriod = 2,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::RemoveTarget::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Multicast::Id; }
    static constexpr bool kIsFabricScoped = true;

    chip::GroupId groupId = static_cast<chip::GroupId>(0);
    DataModel::List<const chip::EndpointId> endpoints;
    uint32_t gracePeriod = static_cast<uint32_t>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::RemoveTarget::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Multicast::Id; }
    static constexpr bool kIsFabricScoped = true;

    chip::GroupId groupId = static_cast<chip::GroupId>(0);
    DataModel::DecodableList<chip::EndpointId> endpoints;
    uint32_t gracePeriod = static_cast<uint32_t>(0);

    CHIP_ERROR Decode(TLV::TLVReader & reader, FabricIndex aAccessingFabricIndex);
};
}; // namespace RemoveTarget
} // namespace Commands
} // namespace Multicast
} // namespace Clusters
} // namespace app
} // namespace chip
