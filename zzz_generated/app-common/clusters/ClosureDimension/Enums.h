/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/shared/Enums.h>
#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace ClosureDimension {

// Enum for ClosureUnitEnum
enum class ClosureUnitEnum : uint8_t
{
    kMillimeter = 0x00,
    kDegree     = 0x01,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 2,
};

// Enum for ModulationTypeEnum
enum class ModulationTypeEnum : uint8_t
{
    kSlatsOrientation = 0x00,
    kSlatsOpenwork    = 0x01,
    kStripesAlignment = 0x02,
    kOpacity          = 0x03,
    kVentilation      = 0x04,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 5,
};

// Enum for OverflowEnum
enum class OverflowEnum : uint8_t
{
    kNoOverflow    = 0x00,
    kInside        = 0x01,
    kOutside       = 0x02,
    kTopInside     = 0x03,
    kTopOutside    = 0x04,
    kBottomInside  = 0x05,
    kBottomOutside = 0x06,
    kLeftInside    = 0x07,
    kLeftOutside   = 0x08,
    kRightInside   = 0x09,
    kRightOutside  = 0x0A,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 11,
};

// Enum for RotationAxisEnum
enum class RotationAxisEnum : uint8_t
{
    kLeft                 = 0x00,
    kCenteredVertical     = 0x01,
    kLeftAndRight         = 0x02,
    kRight                = 0x03,
    kTop                  = 0x04,
    kCenteredHorizontal   = 0x05,
    kTopAndBottom         = 0x06,
    kBottom               = 0x07,
    kLeftBarrier          = 0x08,
    kLeftAndRightBarriers = 0x09,
    kRightBarrier         = 0x0A,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 11,
};

// Enum for StepDirectionEnum
enum class StepDirectionEnum : uint8_t
{
    kDecrease = 0x00,
    kIncrease = 0x01,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 2,
};

// Enum for TranslationDirectionEnum
enum class TranslationDirectionEnum : uint8_t
{
    kDownward                = 0x00,
    kUpward                  = 0x01,
    kVerticalMask            = 0x02,
    kVerticalSymmetry        = 0x03,
    kLeftward                = 0x04,
    kRightward               = 0x05,
    kHorizontalMask          = 0x06,
    kHorizontalSymmetry      = 0x07,
    kForward                 = 0x08,
    kBackward                = 0x09,
    kDepthMask               = 0x0A,
    kDepthSymmetry           = 0x0B,
    kCeilingSimple           = 0x0C,
    kCeilingMask             = 0x0D,
    kCeilingSidedSymmetry    = 0x0E,
    kCeilingCenteredSymmetry = 0x0F,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 16,
};

// Bitmap for Feature
enum class Feature : uint32_t
{
    kPositioning    = 0x1,
    kMotionLatching = 0x2,
    kUnit           = 0x4,
    kLimitation     = 0x8,
    kSpeed          = 0x10,
    kTranslation    = 0x20,
    kRotation       = 0x40,
    kModulation     = 0x80,
};
} // namespace ClosureDimension
} // namespace Clusters
} // namespace app
} // namespace chip
