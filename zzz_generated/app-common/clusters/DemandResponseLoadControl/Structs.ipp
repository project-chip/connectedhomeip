/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#include <clusters/DemandResponseLoadControl/Structs.h>

#include <app/data-model/StructDecodeIterator.h>
#include <app/data-model/WrappedStructEncoder.h>

namespace chip {
namespace app {
namespace Clusters {
namespace DemandResponseLoadControl {
namespace Structs {

namespace HeatingSourceControlStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kHeatingSource), heatingSource);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kHeatingSource))
        {
            err = DataModel::Decode(reader, heatingSource);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace HeatingSourceControlStruct

namespace PowerSavingsControlStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kPowerSavings), powerSavings);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kPowerSavings))
        {
            err = DataModel::Decode(reader, powerSavings);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace PowerSavingsControlStruct

namespace DutyCycleControlStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kDutyCycle), dutyCycle);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kDutyCycle))
        {
            err = DataModel::Decode(reader, dutyCycle);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace DutyCycleControlStruct

namespace AverageLoadControlStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kLoadAdjustment), loadAdjustment);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kLoadAdjustment))
        {
            err = DataModel::Decode(reader, loadAdjustment);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace AverageLoadControlStruct

namespace TemperatureControlStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kCoolingTempOffset), coolingTempOffset);
    encoder.Encode(to_underlying(Fields::kHeatingtTempOffset), heatingtTempOffset);
    encoder.Encode(to_underlying(Fields::kCoolingTempSetpoint), coolingTempSetpoint);
    encoder.Encode(to_underlying(Fields::kHeatingTempSetpoint), heatingTempSetpoint);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kCoolingTempOffset))
        {
            err = DataModel::Decode(reader, coolingTempOffset);
        }
        else if (__context_tag == to_underlying(Fields::kHeatingtTempOffset))
        {
            err = DataModel::Decode(reader, heatingtTempOffset);
        }
        else if (__context_tag == to_underlying(Fields::kCoolingTempSetpoint))
        {
            err = DataModel::Decode(reader, coolingTempSetpoint);
        }
        else if (__context_tag == to_underlying(Fields::kHeatingTempSetpoint))
        {
            err = DataModel::Decode(reader, heatingTempSetpoint);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace TemperatureControlStruct

namespace LoadControlEventTransitionStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kDuration), duration);
    encoder.Encode(to_underlying(Fields::kControl), control);
    encoder.Encode(to_underlying(Fields::kTemperatureControl), temperatureControl);
    encoder.Encode(to_underlying(Fields::kAverageLoadControl), averageLoadControl);
    encoder.Encode(to_underlying(Fields::kDutyCycleControl), dutyCycleControl);
    encoder.Encode(to_underlying(Fields::kPowerSavingsControl), powerSavingsControl);
    encoder.Encode(to_underlying(Fields::kHeatingSourceControl), heatingSourceControl);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kDuration))
        {
            err = DataModel::Decode(reader, duration);
        }
        else if (__context_tag == to_underlying(Fields::kControl))
        {
            err = DataModel::Decode(reader, control);
        }
        else if (__context_tag == to_underlying(Fields::kTemperatureControl))
        {
            err = DataModel::Decode(reader, temperatureControl);
        }
        else if (__context_tag == to_underlying(Fields::kAverageLoadControl))
        {
            err = DataModel::Decode(reader, averageLoadControl);
        }
        else if (__context_tag == to_underlying(Fields::kDutyCycleControl))
        {
            err = DataModel::Decode(reader, dutyCycleControl);
        }
        else if (__context_tag == to_underlying(Fields::kPowerSavingsControl))
        {
            err = DataModel::Decode(reader, powerSavingsControl);
        }
        else if (__context_tag == to_underlying(Fields::kHeatingSourceControl))
        {
            err = DataModel::Decode(reader, heatingSourceControl);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace LoadControlEventTransitionStruct

namespace LoadControlEventStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kEventID), eventID);
    encoder.Encode(to_underlying(Fields::kProgramID), programID);
    encoder.Encode(to_underlying(Fields::kControl), control);
    encoder.Encode(to_underlying(Fields::kDeviceClass), deviceClass);
    encoder.Encode(to_underlying(Fields::kEnrollmentGroup), enrollmentGroup);
    encoder.Encode(to_underlying(Fields::kCriticality), criticality);
    encoder.Encode(to_underlying(Fields::kStartTime), startTime);
    encoder.Encode(to_underlying(Fields::kTransitions), transitions);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kEventID))
        {
            err = DataModel::Decode(reader, eventID);
        }
        else if (__context_tag == to_underlying(Fields::kProgramID))
        {
            err = DataModel::Decode(reader, programID);
        }
        else if (__context_tag == to_underlying(Fields::kControl))
        {
            err = DataModel::Decode(reader, control);
        }
        else if (__context_tag == to_underlying(Fields::kDeviceClass))
        {
            err = DataModel::Decode(reader, deviceClass);
        }
        else if (__context_tag == to_underlying(Fields::kEnrollmentGroup))
        {
            err = DataModel::Decode(reader, enrollmentGroup);
        }
        else if (__context_tag == to_underlying(Fields::kCriticality))
        {
            err = DataModel::Decode(reader, criticality);
        }
        else if (__context_tag == to_underlying(Fields::kStartTime))
        {
            err = DataModel::Decode(reader, startTime);
        }
        else if (__context_tag == to_underlying(Fields::kTransitions))
        {
            err = DataModel::Decode(reader, transitions);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace LoadControlEventStruct

namespace LoadControlProgramStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kProgramID), programID);
    encoder.Encode(to_underlying(Fields::kName), name);
    encoder.Encode(to_underlying(Fields::kEnrollmentGroup), enrollmentGroup);
    encoder.Encode(to_underlying(Fields::kRandomStartMinutes), randomStartMinutes);
    encoder.Encode(to_underlying(Fields::kRandomDurationMinutes), randomDurationMinutes);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kProgramID))
        {
            err = DataModel::Decode(reader, programID);
        }
        else if (__context_tag == to_underlying(Fields::kName))
        {
            err = DataModel::Decode(reader, name);
        }
        else if (__context_tag == to_underlying(Fields::kEnrollmentGroup))
        {
            err = DataModel::Decode(reader, enrollmentGroup);
        }
        else if (__context_tag == to_underlying(Fields::kRandomStartMinutes))
        {
            err = DataModel::Decode(reader, randomStartMinutes);
        }
        else if (__context_tag == to_underlying(Fields::kRandomDurationMinutes))
        {
            err = DataModel::Decode(reader, randomDurationMinutes);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace LoadControlProgramStruct
} // namespace Structs
} // namespace DemandResponseLoadControl
} // namespace Clusters
} // namespace app
} // namespace chip
