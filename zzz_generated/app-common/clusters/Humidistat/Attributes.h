/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
// This file is generated from clusters-Attributes.h.zapt

#pragma once

#include <app/ConcreteAttributePath.h>
#include <app/data-model/DecodableList.h>
#include <app/data-model/List.h>
#include <app/data-model/Nullable.h>
#include <app/util/basic-types.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Attributes.h>
#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/Humidistat/AttributeIds.h>
#include <clusters/Humidistat/ClusterId.h>
#include <clusters/Humidistat/Enums.h>
#include <clusters/Humidistat/Structs.h>

namespace chip {
namespace app {
namespace Clusters {
namespace Humidistat {
namespace Attributes {

namespace SupportedModes {
struct TypeInfo
{
    using Type             = chip::app::DataModel::List<const chip::app::Clusters::Humidistat::ModeEnum>;
    using DecodableType    = chip::app::DataModel::DecodableList<chip::app::Clusters::Humidistat::ModeEnum>;
    using DecodableArgType = const chip::app::DataModel::DecodableList<chip::app::Clusters::Humidistat::ModeEnum> &;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::SupportedModes::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace SupportedModes
namespace Mode {
struct TypeInfo
{
    using Type             = chip::app::Clusters::Humidistat::ModeEnum;
    using DecodableType    = chip::app::Clusters::Humidistat::ModeEnum;
    using DecodableArgType = chip::app::Clusters::Humidistat::ModeEnum;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::Mode::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace Mode
namespace SystemState {
struct TypeInfo
{
    using Type             = chip::app::Clusters::Humidistat::SystemStateEnum;
    using DecodableType    = chip::app::Clusters::Humidistat::SystemStateEnum;
    using DecodableArgType = chip::app::Clusters::Humidistat::SystemStateEnum;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::SystemState::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace SystemState
namespace UserSetpoint {
struct TypeInfo
{
    using Type             = chip::Percent;
    using DecodableType    = chip::Percent;
    using DecodableArgType = chip::Percent;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::UserSetpoint::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace UserSetpoint
namespace MinSetpoint {
struct TypeInfo
{
    using Type             = chip::Percent;
    using DecodableType    = chip::Percent;
    using DecodableArgType = chip::Percent;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::MinSetpoint::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace MinSetpoint
namespace MaxSetpoint {
struct TypeInfo
{
    using Type             = chip::Percent;
    using DecodableType    = chip::Percent;
    using DecodableArgType = chip::Percent;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::MaxSetpoint::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace MaxSetpoint
namespace Step {
struct TypeInfo
{
    using Type             = chip::Percent;
    using DecodableType    = chip::Percent;
    using DecodableArgType = chip::Percent;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::Step::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace Step
namespace TargetSetpoint {
struct TypeInfo
{
    using Type             = chip::Percent;
    using DecodableType    = chip::Percent;
    using DecodableArgType = chip::Percent;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::TargetSetpoint::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace TargetSetpoint
namespace MistType {
struct TypeInfo
{
    using Type             = chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::Humidistat::MistTypeBitmap>>;
    using DecodableType    = chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::Humidistat::MistTypeBitmap>>;
    using DecodableArgType = const chip::app::DataModel::Nullable<chip::BitMask<chip::app::Clusters::Humidistat::MistTypeBitmap>> &;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::MistType::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace MistType
namespace Continuous {
struct TypeInfo
{
    using Type             = bool;
    using DecodableType    = bool;
    using DecodableArgType = bool;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::Continuous::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace Continuous
namespace Sleep {
struct TypeInfo
{
    using Type             = bool;
    using DecodableType    = bool;
    using DecodableArgType = bool;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::Sleep::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace Sleep
namespace Optimal {
struct TypeInfo
{
    using Type             = bool;
    using DecodableType    = bool;
    using DecodableArgType = bool;

    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
    static constexpr AttributeId GetAttributeId() { return Attributes::Optimal::Id; }
    static constexpr bool MustUseTimedWrite() { return false; }
};
} // namespace Optimal
namespace GeneratedCommandList {
struct TypeInfo : public Clusters::Globals::Attributes::GeneratedCommandList::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
};
} // namespace GeneratedCommandList
namespace AcceptedCommandList {
struct TypeInfo : public Clusters::Globals::Attributes::AcceptedCommandList::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
};
} // namespace AcceptedCommandList
namespace AttributeList {
struct TypeInfo : public Clusters::Globals::Attributes::AttributeList::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
};
} // namespace AttributeList
namespace FeatureMap {
struct TypeInfo : public Clusters::Globals::Attributes::FeatureMap::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
};
} // namespace FeatureMap
namespace ClusterRevision {
struct TypeInfo : public Clusters::Globals::Attributes::ClusterRevision::TypeInfo
{
    static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }
};
} // namespace ClusterRevision

struct TypeInfo
{
    struct DecodableType
    {
        static constexpr ClusterId GetClusterId() { return Clusters::Humidistat::Id; }

        CHIP_ERROR Decode(TLV::TLVReader & reader, const ConcreteAttributePath & path);

        Attributes::SupportedModes::TypeInfo::DecodableType supportedModes;
        Attributes::Mode::TypeInfo::DecodableType mode = static_cast<chip::app::Clusters::Humidistat::ModeEnum>(0);
        Attributes::SystemState::TypeInfo::DecodableType systemState =
            static_cast<chip::app::Clusters::Humidistat::SystemStateEnum>(0);
        Attributes::UserSetpoint::TypeInfo::DecodableType userSetpoint     = static_cast<chip::Percent>(0);
        Attributes::MinSetpoint::TypeInfo::DecodableType minSetpoint       = static_cast<chip::Percent>(0);
        Attributes::MaxSetpoint::TypeInfo::DecodableType maxSetpoint       = static_cast<chip::Percent>(0);
        Attributes::Step::TypeInfo::DecodableType step                     = static_cast<chip::Percent>(0);
        Attributes::TargetSetpoint::TypeInfo::DecodableType targetSetpoint = static_cast<chip::Percent>(0);
        Attributes::MistType::TypeInfo::DecodableType mistType;
        Attributes::Continuous::TypeInfo::DecodableType continuous = static_cast<bool>(0);
        Attributes::Sleep::TypeInfo::DecodableType sleep           = static_cast<bool>(0);
        Attributes::Optimal::TypeInfo::DecodableType optimal       = static_cast<bool>(0);
        Attributes::GeneratedCommandList::TypeInfo::DecodableType generatedCommandList;
        Attributes::AcceptedCommandList::TypeInfo::DecodableType acceptedCommandList;
        Attributes::AttributeList::TypeInfo::DecodableType attributeList;
        Attributes::FeatureMap::TypeInfo::DecodableType featureMap           = static_cast<uint32_t>(0);
        Attributes::ClusterRevision::TypeInfo::DecodableType clusterRevision = static_cast<uint16_t>(0);
    };
};
} // namespace Attributes
} // namespace Humidistat
} // namespace Clusters
} // namespace app
} // namespace chip
