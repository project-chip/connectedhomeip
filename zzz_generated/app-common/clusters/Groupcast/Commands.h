/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
// This file is generated from clusters-Commands.h.zapt

#pragma once

#include <app/data-model/DecodableList.h>
#include <app/data-model/Encode.h>
#include <app/data-model/List.h>
#include <app/data-model/NullObject.h>
#include <app/data-model/Nullable.h>
#include <lib/core/DataModelTypes.h>
#include <lib/core/Optional.h>
#include <lib/core/TLV.h>
#include <lib/support/BitMask.h>

#include <clusters/shared/Enums.h>
#include <clusters/shared/Structs.h>

#include <clusters/Groupcast/ClusterId.h>
#include <clusters/Groupcast/CommandIds.h>
#include <clusters/Groupcast/Enums.h>
#include <clusters/Groupcast/Structs.h>

#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace Groupcast {
namespace Commands {
// Forward-declarations so we can reference these later.

namespace JoinGroup {
struct Type;
struct DecodableType;
} // namespace JoinGroup

namespace LeaveGroup {
struct Type;
struct DecodableType;
} // namespace LeaveGroup

namespace LeaveGroupResponse {
struct Type;
struct DecodableType;
} // namespace LeaveGroupResponse

namespace UpdateGroupKey {
struct Type;
struct DecodableType;
} // namespace UpdateGroupKey

namespace ExpireGracePeriod {
struct Type;
struct DecodableType;
} // namespace ExpireGracePeriod

namespace ConfigureAuxiliaryACL {
struct Type;
struct DecodableType;
} // namespace ConfigureAuxiliaryACL

} // namespace Commands

namespace Commands {
namespace JoinGroup {
enum class Fields : uint8_t
{
    kGroupID         = 0,
    kEndpoints       = 1,
    kKey             = 2,
    kKeyID           = 3,
    kGracePeriod     = 4,
    kUseAuxiliaryACL = 5,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::JoinGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    DataModel::List<const chip::EndpointId> endpoints;
    chip::ByteSpan key;
    uint32_t keyID = static_cast<uint32_t>(0);
    Optional<uint32_t> gracePeriod;
    Optional<bool> useAuxiliaryACL;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::JoinGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }
    static constexpr bool kIsFabricScoped = true;

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    DataModel::DecodableList<chip::EndpointId> endpoints;
    chip::ByteSpan key;
    uint32_t keyID = static_cast<uint32_t>(0);
    Optional<uint32_t> gracePeriod;
    Optional<bool> useAuxiliaryACL;

    CHIP_ERROR Decode(TLV::TLVReader & reader, FabricIndex aAccessingFabricIndex);
};
}; // namespace JoinGroup
namespace LeaveGroup {
enum class Fields : uint8_t
{
    kGroupID   = 0,
    kEndpoints = 1,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::LeaveGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    Optional<DataModel::List<const chip::EndpointId>> endpoints;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = Clusters::Groupcast::Commands::LeaveGroupResponse::DecodableType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::LeaveGroup::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }
    static constexpr bool kIsFabricScoped = true;

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    Optional<DataModel::DecodableList<chip::EndpointId>> endpoints;

    CHIP_ERROR Decode(TLV::TLVReader & reader, FabricIndex aAccessingFabricIndex);
};
}; // namespace LeaveGroup
namespace LeaveGroupResponse {
enum class Fields : uint8_t
{
    kGroupID      = 0,
    kEndpoints    = 1,
    kListTooLarge = 2,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::LeaveGroupResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    Optional<DataModel::List<const chip::EndpointId>> endpoints;
    Optional<bool> listTooLarge;

    CHIP_ERROR Encode(DataModel::FabricAwareTLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::LeaveGroupResponse::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    Optional<DataModel::DecodableList<chip::EndpointId>> endpoints;
    Optional<bool> listTooLarge;

    CHIP_ERROR Decode(TLV::TLVReader & reader);
};
}; // namespace LeaveGroupResponse
namespace UpdateGroupKey {
enum class Fields : uint8_t
{
    kGroupID     = 0,
    kKey         = 1,
    kKeyID       = 2,
    kGracePeriod = 3,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::UpdateGroupKey::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    chip::ByteSpan key;
    uint32_t keyID = static_cast<uint32_t>(0);
    Optional<uint32_t> gracePeriod;

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::UpdateGroupKey::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }
    static constexpr bool kIsFabricScoped = true;

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    chip::ByteSpan key;
    uint32_t keyID = static_cast<uint32_t>(0);
    Optional<uint32_t> gracePeriod;

    CHIP_ERROR Decode(TLV::TLVReader & reader, FabricIndex aAccessingFabricIndex);
};
}; // namespace UpdateGroupKey
namespace ExpireGracePeriod {
enum class Fields : uint8_t
{
    kGroupID = 0,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::ExpireGracePeriod::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::ExpireGracePeriod::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }
    static constexpr bool kIsFabricScoped = true;

    chip::GroupId groupID = static_cast<chip::GroupId>(0);

    CHIP_ERROR Decode(TLV::TLVReader & reader, FabricIndex aAccessingFabricIndex);
};
}; // namespace ExpireGracePeriod
namespace ConfigureAuxiliaryACL {
enum class Fields : uint8_t
{
    kGroupID         = 0,
    kUseAuxiliaryACL = 1,
};

struct Type
{
public:
    // Use GetCommandId instead of commandId directly to avoid naming conflict with CommandIdentification in ExecutionOfACommand
    static constexpr CommandId GetCommandId() { return Commands::ConfigureAuxiliaryACL::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    bool useAuxiliaryACL  = static_cast<bool>(0);

    CHIP_ERROR Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const;

    using ResponseType = DataModel::NullObjectType;

    static constexpr bool MustUseTimedInvoke() { return false; }
};

struct DecodableType
{
public:
    static constexpr CommandId GetCommandId() { return Commands::ConfigureAuxiliaryACL::Id; }
    static constexpr ClusterId GetClusterId() { return Clusters::Groupcast::Id; }
    static constexpr bool kIsFabricScoped = true;

    chip::GroupId groupID = static_cast<chip::GroupId>(0);
    bool useAuxiliaryACL  = static_cast<bool>(0);

    CHIP_ERROR Decode(TLV::TLVReader & reader, FabricIndex aAccessingFabricIndex);
};
}; // namespace ConfigureAuxiliaryACL
} // namespace Commands
} // namespace Groupcast
} // namespace Clusters
} // namespace app
} // namespace chip
