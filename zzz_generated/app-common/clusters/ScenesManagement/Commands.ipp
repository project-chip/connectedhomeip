/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#include <clusters/ScenesManagement/Commands.h>

#include <app/data-model/Decode.h>
#include <app/data-model/StructDecodeIterator.h>
#include <app/data-model/WrappedStructEncoder.h>

namespace chip {
namespace app {
namespace Clusters {
namespace ScenesManagement {
namespace Commands {
namespace AddScene {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneID), sceneID);
    encoder.Encode(to_underlying(Fields::kTransitionTime), transitionTime);
    encoder.Encode(to_underlying(Fields::kSceneName), sceneName);
    encoder.Encode(to_underlying(Fields::kExtensionFieldSetStructs), extensionFieldSetStructs);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneID))
        {
            err = DataModel::Decode(reader, sceneID);
        }
        else if (__context_tag == to_underlying(Fields::kTransitionTime))
        {
            err = DataModel::Decode(reader, transitionTime);
        }
        else if (__context_tag == to_underlying(Fields::kSceneName))
        {
            err = DataModel::Decode(reader, sceneName);
        }
        else if (__context_tag == to_underlying(Fields::kExtensionFieldSetStructs))
        {
            err = DataModel::Decode(reader, extensionFieldSetStructs);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace AddScene.
namespace AddSceneResponse {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kStatus), status);
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneID), sceneID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kStatus))
        {
            err = DataModel::Decode(reader, status);
        }
        else if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneID))
        {
            err = DataModel::Decode(reader, sceneID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace AddSceneResponse.
namespace ViewScene {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneID), sceneID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneID))
        {
            err = DataModel::Decode(reader, sceneID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace ViewScene.
namespace ViewSceneResponse {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kStatus), status);
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneID), sceneID);
    encoder.Encode(to_underlying(Fields::kTransitionTime), transitionTime);
    encoder.Encode(to_underlying(Fields::kSceneName), sceneName);
    encoder.Encode(to_underlying(Fields::kExtensionFieldSetStructs), extensionFieldSetStructs);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kStatus))
        {
            err = DataModel::Decode(reader, status);
        }
        else if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneID))
        {
            err = DataModel::Decode(reader, sceneID);
        }
        else if (__context_tag == to_underlying(Fields::kTransitionTime))
        {
            err = DataModel::Decode(reader, transitionTime);
        }
        else if (__context_tag == to_underlying(Fields::kSceneName))
        {
            err = DataModel::Decode(reader, sceneName);
        }
        else if (__context_tag == to_underlying(Fields::kExtensionFieldSetStructs))
        {
            err = DataModel::Decode(reader, extensionFieldSetStructs);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace ViewSceneResponse.
namespace RemoveScene {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneID), sceneID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneID))
        {
            err = DataModel::Decode(reader, sceneID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace RemoveScene.
namespace RemoveSceneResponse {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kStatus), status);
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneID), sceneID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kStatus))
        {
            err = DataModel::Decode(reader, status);
        }
        else if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneID))
        {
            err = DataModel::Decode(reader, sceneID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace RemoveSceneResponse.
namespace RemoveAllScenes {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace RemoveAllScenes.
namespace RemoveAllScenesResponse {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kStatus), status);
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kStatus))
        {
            err = DataModel::Decode(reader, status);
        }
        else if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace RemoveAllScenesResponse.
namespace StoreScene {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneID), sceneID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneID))
        {
            err = DataModel::Decode(reader, sceneID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace StoreScene.
namespace StoreSceneResponse {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kStatus), status);
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneID), sceneID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kStatus))
        {
            err = DataModel::Decode(reader, status);
        }
        else if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneID))
        {
            err = DataModel::Decode(reader, sceneID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace StoreSceneResponse.
namespace RecallScene {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneID), sceneID);
    encoder.Encode(to_underlying(Fields::kTransitionTime), transitionTime);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneID))
        {
            err = DataModel::Decode(reader, sceneID);
        }
        else if (__context_tag == to_underlying(Fields::kTransitionTime))
        {
            err = DataModel::Decode(reader, transitionTime);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace RecallScene.
namespace GetSceneMembership {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace GetSceneMembership.
namespace GetSceneMembershipResponse {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kStatus), status);
    encoder.Encode(to_underlying(Fields::kCapacity), capacity);
    encoder.Encode(to_underlying(Fields::kGroupID), groupID);
    encoder.Encode(to_underlying(Fields::kSceneList), sceneList);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kStatus))
        {
            err = DataModel::Decode(reader, status);
        }
        else if (__context_tag == to_underlying(Fields::kCapacity))
        {
            err = DataModel::Decode(reader, capacity);
        }
        else if (__context_tag == to_underlying(Fields::kGroupID))
        {
            err = DataModel::Decode(reader, groupID);
        }
        else if (__context_tag == to_underlying(Fields::kSceneList))
        {
            err = DataModel::Decode(reader, sceneList);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace GetSceneMembershipResponse.
namespace CopyScene {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kMode), mode);
    encoder.Encode(to_underlying(Fields::kGroupIdentifierFrom), groupIdentifierFrom);
    encoder.Encode(to_underlying(Fields::kSceneIdentifierFrom), sceneIdentifierFrom);
    encoder.Encode(to_underlying(Fields::kGroupIdentifierTo), groupIdentifierTo);
    encoder.Encode(to_underlying(Fields::kSceneIdentifierTo), sceneIdentifierTo);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kMode))
        {
            err = DataModel::Decode(reader, mode);
        }
        else if (__context_tag == to_underlying(Fields::kGroupIdentifierFrom))
        {
            err = DataModel::Decode(reader, groupIdentifierFrom);
        }
        else if (__context_tag == to_underlying(Fields::kSceneIdentifierFrom))
        {
            err = DataModel::Decode(reader, sceneIdentifierFrom);
        }
        else if (__context_tag == to_underlying(Fields::kGroupIdentifierTo))
        {
            err = DataModel::Decode(reader, groupIdentifierTo);
        }
        else if (__context_tag == to_underlying(Fields::kSceneIdentifierTo))
        {
            err = DataModel::Decode(reader, sceneIdentifierTo);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace CopyScene.
namespace CopySceneResponse {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kStatus), status);
    encoder.Encode(to_underlying(Fields::kGroupIdentifierFrom), groupIdentifierFrom);
    encoder.Encode(to_underlying(Fields::kSceneIdentifierFrom), sceneIdentifierFrom);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kStatus))
        {
            err = DataModel::Decode(reader, status);
        }
        else if (__context_tag == to_underlying(Fields::kGroupIdentifierFrom))
        {
            err = DataModel::Decode(reader, groupIdentifierFrom);
        }
        else if (__context_tag == to_underlying(Fields::kSceneIdentifierFrom))
        {
            err = DataModel::Decode(reader, sceneIdentifierFrom);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}
} // namespace CopySceneResponse.
} // namespace Commands
} // namespace ScenesManagement
} // namespace Clusters
} // namespace app
} // namespace chip
