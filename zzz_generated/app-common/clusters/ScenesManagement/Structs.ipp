/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#include <clusters/ScenesManagement/Structs.h>

#include <app/data-model/StructDecodeIterator.h>
#include <app/data-model/WrappedStructEncoder.h>

namespace chip {
namespace app {
namespace Clusters {
namespace ScenesManagement {
namespace Structs {

namespace AttributeValuePairStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kAttributeID), attributeID);
    encoder.Encode(to_underlying(Fields::kValueUnsigned8), valueUnsigned8);
    encoder.Encode(to_underlying(Fields::kValueSigned8), valueSigned8);
    encoder.Encode(to_underlying(Fields::kValueUnsigned16), valueUnsigned16);
    encoder.Encode(to_underlying(Fields::kValueSigned16), valueSigned16);
    encoder.Encode(to_underlying(Fields::kValueUnsigned32), valueUnsigned32);
    encoder.Encode(to_underlying(Fields::kValueSigned32), valueSigned32);
    encoder.Encode(to_underlying(Fields::kValueUnsigned64), valueUnsigned64);
    encoder.Encode(to_underlying(Fields::kValueSigned64), valueSigned64);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kAttributeID))
        {
            err = DataModel::Decode(reader, attributeID);
        }
        else if (__context_tag == to_underlying(Fields::kValueUnsigned8))
        {
            err = DataModel::Decode(reader, valueUnsigned8);
        }
        else if (__context_tag == to_underlying(Fields::kValueSigned8))
        {
            err = DataModel::Decode(reader, valueSigned8);
        }
        else if (__context_tag == to_underlying(Fields::kValueUnsigned16))
        {
            err = DataModel::Decode(reader, valueUnsigned16);
        }
        else if (__context_tag == to_underlying(Fields::kValueSigned16))
        {
            err = DataModel::Decode(reader, valueSigned16);
        }
        else if (__context_tag == to_underlying(Fields::kValueUnsigned32))
        {
            err = DataModel::Decode(reader, valueUnsigned32);
        }
        else if (__context_tag == to_underlying(Fields::kValueSigned32))
        {
            err = DataModel::Decode(reader, valueSigned32);
        }
        else if (__context_tag == to_underlying(Fields::kValueUnsigned64))
        {
            err = DataModel::Decode(reader, valueUnsigned64);
        }
        else if (__context_tag == to_underlying(Fields::kValueSigned64))
        {
            err = DataModel::Decode(reader, valueSigned64);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace AttributeValuePairStruct

namespace ExtensionFieldSetStruct {
CHIP_ERROR Type::Encode(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };
    encoder.Encode(to_underlying(Fields::kClusterID), clusterID);
    encoder.Encode(to_underlying(Fields::kAttributeValueList), attributeValueList);
    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kClusterID))
        {
            err = DataModel::Decode(reader, clusterID);
        }
        else if (__context_tag == to_underlying(Fields::kAttributeValueList))
        {
            err = DataModel::Decode(reader, attributeValueList);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace ExtensionFieldSetStruct

namespace SceneInfoStruct {
CHIP_ERROR Type::EncodeForWrite(TLV::TLVWriter & aWriter, TLV::Tag aTag) const
{
    return DoEncode(aWriter, aTag, NullOptional);
}

CHIP_ERROR Type::EncodeForRead(TLV::TLVWriter & aWriter, TLV::Tag aTag, FabricIndex aAccessingFabricIndex) const
{
    return DoEncode(aWriter, aTag, MakeOptional(aAccessingFabricIndex));
}

CHIP_ERROR Type::DoEncode(TLV::TLVWriter & aWriter, TLV::Tag aTag, const Optional<FabricIndex> & aAccessingFabricIndex) const
{
    bool includeSensitive = !aAccessingFabricIndex.HasValue() || (aAccessingFabricIndex.Value() == fabricIndex);

    DataModel::WrappedStructEncoder encoder{ aWriter, aTag };

    encoder.Encode(to_underlying(Fields::kSceneCount), sceneCount);
    if (includeSensitive)
    {
        encoder.Encode(to_underlying(Fields::kCurrentScene), currentScene);
    }
    if (includeSensitive)
    {
        encoder.Encode(to_underlying(Fields::kCurrentGroup), currentGroup);
    }
    if (includeSensitive)
    {
        encoder.Encode(to_underlying(Fields::kSceneValid), sceneValid);
    }
    encoder.Encode(to_underlying(Fields::kRemainingCapacity), remainingCapacity);
    if (aAccessingFabricIndex.HasValue())
    {
        encoder.Encode(to_underlying(Fields::kFabricIndex), fabricIndex);
    }

    return encoder.Finalize();
}

CHIP_ERROR DecodableType::Decode(TLV::TLVReader & reader)
{
    detail::StructDecodeIterator __iterator(reader);
    while (true)
    {
        uint8_t __context_tag = 0;
        CHIP_ERROR err        = __iterator.Next(__context_tag);
        VerifyOrReturnError(err != CHIP_ERROR_END_OF_TLV, CHIP_NO_ERROR);
        ReturnErrorOnFailure(err);

        if (__context_tag == to_underlying(Fields::kSceneCount))
        {
            err = DataModel::Decode(reader, sceneCount);
        }
        else if (__context_tag == to_underlying(Fields::kCurrentScene))
        {
            err = DataModel::Decode(reader, currentScene);
        }
        else if (__context_tag == to_underlying(Fields::kCurrentGroup))
        {
            err = DataModel::Decode(reader, currentGroup);
        }
        else if (__context_tag == to_underlying(Fields::kSceneValid))
        {
            err = DataModel::Decode(reader, sceneValid);
        }
        else if (__context_tag == to_underlying(Fields::kRemainingCapacity))
        {
            err = DataModel::Decode(reader, remainingCapacity);
        }
        else if (__context_tag == to_underlying(Fields::kFabricIndex))
        {
            err = DataModel::Decode(reader, fabricIndex);
        }
        else
        {
        }

        ReturnErrorOnFailure(err);
    }
}

} // namespace SceneInfoStruct
} // namespace Structs
} // namespace ScenesManagement
} // namespace Clusters
} // namespace app
} // namespace chip
