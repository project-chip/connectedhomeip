/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/PushAvStreamTransport/Enums.h>

namespace chip {
namespace app {
namespace Clusters {
static auto __attribute__((unused)) EnsureKnownEnumValue(PushAvStreamTransport::ContainerFormatEnum val)
{
    using EnumType = PushAvStreamTransport::ContainerFormatEnum;
    switch (val)
    {
    case EnumType::kCmaf:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(PushAvStreamTransport::IngestMethodsEnum val)
{
    using EnumType = PushAvStreamTransport::IngestMethodsEnum;
    switch (val)
    {
    case EnumType::kCMAFIngest:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(PushAvStreamTransport::StatusCodeEnum val)
{
    using EnumType = PushAvStreamTransport::StatusCodeEnum;
    switch (val)
    {
    case EnumType::kAllocationNotPermitted:
    case EnumType::kInvalidTLSEndpoint:
    case EnumType::kInvalidStream:
    case EnumType::kInvalidURL:
    case EnumType::kInvalidZone:
    case EnumType::kUnsupportedContainerFormat:
    case EnumType::kUnsupportedIngestMethod:
    case EnumType::kInvalidTriggerType:
    case EnumType::kInvalidTransportStatus:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(PushAvStreamTransport::StreamMultiplexingEnum val)
{
    using EnumType = PushAvStreamTransport::StreamMultiplexingEnum;
    switch (val)
    {
    case EnumType::kInterleaved:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(PushAvStreamTransport::TransportStatusEnum val)
{
    using EnumType = PushAvStreamTransport::TransportStatusEnum;
    switch (val)
    {
    case EnumType::kActive:
    case EnumType::kInactive:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(PushAvStreamTransport::TransportTriggerTypeEnum val)
{
    using EnumType = PushAvStreamTransport::TransportTriggerTypeEnum;
    switch (val)
    {
    case EnumType::kCommand:
    case EnumType::kMotion:
    case EnumType::kContinuous:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
static auto __attribute__((unused)) EnsureKnownEnumValue(PushAvStreamTransport::TriggerActivationReasonEnum val)
{
    using EnumType = PushAvStreamTransport::TriggerActivationReasonEnum;
    switch (val)
    {
    case EnumType::kUserInitiated:
    case EnumType::kAutomation:
    case EnumType::kEmergency:
        return val;
    default:
        return EnumType::kUnknownEnumValue;
    }
}
} // namespace Clusters
} // namespace app
} // namespace chip
