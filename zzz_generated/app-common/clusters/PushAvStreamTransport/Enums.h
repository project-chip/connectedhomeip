/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP
#pragma once

#include <clusters/shared/Enums.h>
#include <cstdint>

namespace chip {
namespace app {
namespace Clusters {
namespace PushAvStreamTransport {

// Enum for ContainerFormatEnum
enum class ContainerFormatEnum : uint8_t
{
    kCmaf = 0x00,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 1,
};

// Enum for IngestMethodsEnum
enum class IngestMethodsEnum : uint8_t
{
    kCMAFIngest = 0x00,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 1,
};

// Enum for StatusCodeEnum
enum class StatusCodeEnum : uint8_t
{
    kAllocationNotPermitted     = 0x02,
    kInvalidTLSEndpoint         = 0x03,
    kInvalidStream              = 0x04,
    kInvalidURL                 = 0x05,
    kInvalidZone                = 0x06,
    kUnsupportedContainerFormat = 0x07,
    kUnsupportedIngestMethod    = 0x08,
    kInvalidTriggerType         = 0x09,
    kInvalidTransportStatus     = 0x10,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 0,
};

// Enum for StreamMultiplexingEnum
enum class StreamMultiplexingEnum : uint8_t
{
    kInterleaved = 0x00,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 1,
};

using StreamUsageEnum = Clusters::detail::StreamUsageEnum;

// Enum for TransportStatusEnum
enum class TransportStatusEnum : uint8_t
{
    kActive   = 0x00,
    kInactive = 0x01,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 2,
};

// Enum for TransportTriggerTypeEnum
enum class TransportTriggerTypeEnum : uint8_t
{
    kCommand    = 0x00,
    kMotion     = 0x01,
    kContinuous = 0x02,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 3,
};

// Enum for TriggerActivationReasonEnum
enum class TriggerActivationReasonEnum : uint8_t
{
    kUserInitiated = 0x00,
    kAutomation    = 0x01,
    kEmergency     = 0x02,
    // All received enum values that are not listed above will be mapped
    // to kUnknownEnumValue. This is a helper enum value that should only
    // be used by code to process how it handles receiving and unknown
    // enum value. This specific should never be transmitted.
    kUnknownEnumValue = 3,
};

// Bitmap for Feature
enum class Feature : uint32_t
{
    kPerZoneSensitivity = 0x1,
};

// Bitmap for SupportedContainerFormatsBitmap
enum class SupportedContainerFormatsBitmap : uint8_t
{
    kCmaf = 0x1,
};

// Bitmap for SupportedIngestMethodsBitmap
enum class SupportedIngestMethodsBitmap : uint8_t
{
    kCMAFIngest = 0x1,
};
} // namespace PushAvStreamTransport
} // namespace Clusters
} // namespace app
} // namespace chip
