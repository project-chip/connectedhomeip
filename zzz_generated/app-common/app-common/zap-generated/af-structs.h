/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

// Prevent multiple inclusion
#pragma once

#include <stdint.h>

#include "enums.h"
#include <app/util/basic-types.h>
#include <lib/core/CHIPTLV.h>
#include <lib/support/Span.h>

// Struct for ApplicationLauncherApp
typedef struct _ApplicationLauncherApp
{
    uint16_t catalogVendorId;
    const uint8_t * applicationId;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ApplicationLauncherApp;

// Struct for AudioOutputInfo
typedef struct _AudioOutputInfo
{
    uint8_t index;
    uint8_t outputType;
    chip::ByteSpan name;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} AudioOutputInfo;

// Struct for BasicCommissioningInfoType
typedef struct _BasicCommissioningInfoType
{
    uint32_t FailSafeExpiryLengthMs;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} BasicCommissioningInfoType;

// Struct for ConfigureReportingRecord
typedef struct _ConfigureReportingRecord
{
    uint8_t direction;
    chip::AttributeId attributeId;
    uint8_t attributeType;
    uint16_t minimumReportingInterval;
    uint16_t maximumReportingInterval;
    uint8_t * reportableChangeLocation;
    uint16_t timeoutPeriod;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ConfigureReportingRecord;

// Struct for ConfigureReportingStatusRecord
typedef struct _ConfigureReportingStatusRecord
{
    uint8_t status;
    uint8_t direction;
    chip::AttributeId attributeId;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ConfigureReportingStatusRecord;

// Struct for ContentLaunchAdditionalInfo
typedef struct _ContentLaunchAdditionalInfo
{
    const uint8_t * name;
    const uint8_t * value;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ContentLaunchAdditionalInfo;

// Struct for ContentLaunchBrandingInformation
typedef struct _ContentLaunchBrandingInformation
{
    const uint8_t * providerName;
    uint8_t background;
    uint8_t logo;
    uint8_t progressBar;
    uint8_t splash;
    uint8_t waterMark;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ContentLaunchBrandingInformation;

// Struct for ContentLaunchDimension
typedef struct _ContentLaunchDimension
{
    const uint8_t * width;
    const uint8_t * height;
    uint8_t metric;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ContentLaunchDimension;

// Struct for ContentLaunchParamater
typedef struct _ContentLaunchParamater
{
    uint8_t Type;
    const uint8_t * Value;
    const /* TYPE WARNING: array array defaults to */ uint8_t * ExternalIDList;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ContentLaunchParamater;

// Struct for ContentLaunchStyleInformation
typedef struct _ContentLaunchStyleInformation
{
    const uint8_t * imageUrl;
    const uint8_t * color;
    uint8_t size;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ContentLaunchStyleInformation;

// Struct for DeviceType
typedef struct _DeviceType
{
    chip::DeviceTypeId type;
    uint16_t revision;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} DeviceType;

// Struct for DiscoverAttributesInfoRecord
typedef struct _DiscoverAttributesInfoRecord
{
    chip::AttributeId attributeId;
    uint8_t attributeType;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} DiscoverAttributesInfoRecord;

// Struct for ExtendedDiscoverAttributesInfoRecord
typedef struct _ExtendedDiscoverAttributesInfoRecord
{
    chip::AttributeId attributeId;
    uint8_t attributeType;
    uint8_t attributeAccessControl;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ExtendedDiscoverAttributesInfoRecord;

// Struct for FabricDescriptor
typedef struct _FabricDescriptor
{
    uint8_t FabricIndex;
    chip::ByteSpan RootPublicKey;
    uint16_t VendorId;
    chip::FabricId FabricId;
    chip::NodeId NodeId;
    chip::ByteSpan Label;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} FabricDescriptor;

// Struct for GroupKey
typedef struct _GroupKey
{
    uint16_t VendorId;
    uint16_t GroupKeyIndex;
    chip::ByteSpan GroupKeyRoot;
    uint64_t GroupKeyEpochStartTime;
    uint8_t GroupKeySecurityPolicy;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} GroupKey;

// Struct for GroupState
typedef struct _GroupState
{
    uint16_t VendorId;
    uint16_t VendorGroupId;
    uint16_t GroupKeySetIndex;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} GroupState;

// Struct for IasAceZoneStatusResult
typedef struct _IasAceZoneStatusResult
{
    uint8_t zoneId;
    uint16_t zoneStatus;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} IasAceZoneStatusResult;

// Struct for LabelStruct
typedef struct _LabelStruct
{
    chip::ByteSpan label;
    chip::ByteSpan value;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} LabelStruct;

// Struct for MediaInputInfo
typedef struct _MediaInputInfo
{
    uint8_t index;
    uint8_t inputType;
    chip::ByteSpan name;
    chip::ByteSpan description;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} MediaInputInfo;

// Struct for MediaPlaybackPosition
typedef struct _MediaPlaybackPosition
{
    uint64_t updatedAt;
    uint64_t position;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} MediaPlaybackPosition;

// Struct for NOCStruct
typedef struct _NOCStruct
{
    uint8_t FabricIndex;
    chip::ByteSpan NOC;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} NOCStruct;

// Struct for NavigateTargetTargetInfo
typedef struct _NavigateTargetTargetInfo
{
    uint8_t identifier;
    chip::ByteSpan name;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} NavigateTargetTargetInfo;

// Struct for NeighborTable
typedef struct _NeighborTable
{
    uint64_t ExtAddress;
    uint32_t Age;
    uint16_t Rloc16;
    uint32_t LinkFrameCounter;
    uint32_t MleFrameCounter;
    uint8_t LQI;
    int8_t AverageRssi;
    int8_t LastRssi;
    uint8_t FrameErrorRate;
    uint8_t MessageErrorRate;
    bool RxOnWhenIdle;
    bool FullThreadDevice;
    bool FullNetworkData;
    bool IsChild;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} NeighborTable;

// Struct for NetworkInterfaceType
typedef struct _NetworkInterfaceType
{
    chip::ByteSpan Name;
    bool FabricConnected;
    bool OffPremiseServicesReachableIPv4;
    bool OffPremiseServicesReachableIPv6;
    chip::ByteSpan HardwareAddress;
    uint8_t Type;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} NetworkInterfaceType;

// Struct for Notification
typedef struct _Notification
{
    uint16_t contentId;
    uint8_t statusFeedback;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} Notification;

// Struct for OperationalDatasetComponents
typedef struct _OperationalDatasetComponents
{
    bool ActiveTimestampPresent;
    bool PendingTimestampPresent;
    bool MasterKeyPresent;
    bool NetworkNamePresent;
    bool ExtendedPanIdPresent;
    bool MeshLocalPrefixPresent;
    bool DelayPresent;
    bool PanIdPresent;
    bool ChannelPresent;
    bool PskcPresent;
    bool SecurityPolicyPresent;
    bool ChannelMaskPresent;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} OperationalDatasetComponents;

// Struct for PowerProfileRecord
typedef struct _PowerProfileRecord
{
    uint8_t powerProfileId;
    uint8_t energyPhaseId;
    bool powerProfileRemoteControl;
    uint8_t powerProfileState;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} PowerProfileRecord;

// Struct for ReadAttributeStatusRecord
typedef struct _ReadAttributeStatusRecord
{
    chip::AttributeId attributeId;
    uint8_t status;
    uint8_t attributeType;
    uint8_t * attributeLocation;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ReadAttributeStatusRecord;

// Struct for ReadReportingConfigurationAttributeRecord
typedef struct _ReadReportingConfigurationAttributeRecord
{
    uint8_t direction;
    chip::AttributeId attributeId;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ReadReportingConfigurationAttributeRecord;

// Struct for ReadReportingConfigurationRecord
typedef struct _ReadReportingConfigurationRecord
{
    uint8_t status;
    uint8_t direction;
    chip::AttributeId attributeId;
    uint8_t attributeType;
    uint16_t minimumReportingInterval;
    uint16_t maximumReportingInterval;
    uint8_t * reportableChangeLocation;
    uint16_t timeoutPeriod;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ReadReportingConfigurationRecord;

// Struct for ReadStructuredAttributeRecord
typedef struct _ReadStructuredAttributeRecord
{
    chip::AttributeId attributeId;
    uint8_t indicator;
    uint16_t indicies;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ReadStructuredAttributeRecord;

// Struct for ReportAttributeRecord
typedef struct _ReportAttributeRecord
{
    chip::AttributeId attributeId;
    uint8_t attributeType;
    uint8_t * attributeLocation;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ReportAttributeRecord;

// Struct for RouteTable
typedef struct _RouteTable
{
    uint64_t ExtAddress;
    uint16_t Rloc16;
    uint8_t RouterId;
    uint8_t NextHop;
    uint8_t PathCost;
    uint8_t LQIIn;
    uint8_t LQIOut;
    uint8_t Age;
    bool Allocated;
    bool LinkEstablished;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} RouteTable;

// Struct for SceneExtensionAttributeInfo
typedef struct _SceneExtensionAttributeInfo
{
    uint8_t attributeType;
    uint8_t * attributeLocation;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} SceneExtensionAttributeInfo;

// Struct for SceneExtensionFieldSet
typedef struct _SceneExtensionFieldSet
{
    chip::ClusterId clusterId;
    uint8_t length;
    uint8_t value;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} SceneExtensionFieldSet;

// Struct for ScheduledPhase
typedef struct _ScheduledPhase
{
    uint8_t energyPhaseId;
    uint16_t scheduledTime;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ScheduledPhase;

// Struct for SecurityPolicy
typedef struct _SecurityPolicy
{
    uint16_t RotationTime;
    uint8_t Flags;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} SecurityPolicy;

// Struct for SimpleStruct
typedef struct _SimpleStruct
{
    uint64_t fieldA;
    uint32_t fieldB;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} SimpleStruct;

// Struct for TestListStructOctet
typedef struct _TestListStructOctet
{
    uint64_t fabricIndex;
    chip::ByteSpan operationalCert;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} TestListStructOctet;

// Struct for ThreadInterfaceScanResult
typedef struct _ThreadInterfaceScanResult
{
    chip::ByteSpan DiscoveryResponse;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ThreadInterfaceScanResult;

// Struct for ThreadMetrics
typedef struct _ThreadMetrics
{
    uint64_t Id;
    chip::ByteSpan Name;
    uint32_t StackFreeCurrent;
    uint32_t StackFreeMinimum;
    uint32_t StackSize;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} ThreadMetrics;

// Struct for TransferredPhase
typedef struct _TransferredPhase
{
    uint8_t energyPhaseId;
    uint8_t macroPhaseId;
    uint16_t expectedDuration;
    uint16_t peakPower;
    uint16_t energy;
    uint16_t maxActivationDelay;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} TransferredPhase;

// Struct for TvChannelInfo
typedef struct _TvChannelInfo
{
    uint16_t majorNumber;
    uint16_t minorNumber;
    chip::ByteSpan name;
    chip::ByteSpan callSign;
    chip::ByteSpan affiliateCallSign;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} TvChannelInfo;

// Struct for TvChannelLineupInfo
typedef struct _TvChannelLineupInfo
{
    const uint8_t * operatorName;
    const uint8_t * lineupName;
    const uint8_t * postalCode;
    uint8_t lineupInfoType;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} TvChannelLineupInfo;

// Struct for WiFiInterfaceScanResult
typedef struct _WiFiInterfaceScanResult
{
    uint8_t Security;
    chip::ByteSpan SSID;
    chip::ByteSpan BSSID;
    uint8_t Channel;
    uint32_t FrequencyBand;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} WiFiInterfaceScanResult;

// Struct for WriteAttributeRecord
typedef struct _WriteAttributeRecord
{
    chip::AttributeId attributeId;
    uint8_t attributeType;
    uint8_t * attributeLocation;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} WriteAttributeRecord;

// Struct for WriteAttributeStatusRecord
typedef struct _WriteAttributeStatusRecord
{
    uint8_t status;
    chip::AttributeId attributeId;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} WriteAttributeStatusRecord;

// Struct for WriteStructuredAttributeRecord
typedef struct _WriteStructuredAttributeRecord
{
    chip::AttributeId attributeId;
    uint8_t indicator;
    uint16_t indicies;
    uint8_t attributeType;
    uint8_t * attributeLocation;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} WriteStructuredAttributeRecord;

// Struct for WriteStructuredAttributeStatusRecord
typedef struct _WriteStructuredAttributeStatusRecord
{
    uint8_t status;
    chip::AttributeId attributeId;
    uint8_t indicator;
    uint16_t indicies;
    static CHIP_ERROR Encode(const void * val, chip::TLV::TLVWriter & writer, uint64_t tag);
    static CHIP_ERROR Decode(void * val, const chip::TLV::TLVReader & aReader);
    static CHIP_ERROR ToEmberBuffer(const void * valPtr, uint8_t * buf, size_t bufLength, size_t & len);
    static CHIP_ERROR FromEmberBuffer(void * valPtr, const uint8_t * buf, size_t bufLength);
} WriteStructuredAttributeStatusRecord;
