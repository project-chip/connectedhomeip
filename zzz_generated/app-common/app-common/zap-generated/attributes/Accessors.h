/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

/**
 *  @file
 *    This file contains declarations for accessors around clusters attributes.
 */

#pragma once

#include <app-common/zap-generated/cluster-objects.h>
#include <app/data-model/Nullable.h>
#include <app/util/af-types.h>
#include <lib/support/Span.h>

namespace chip {
namespace app {
namespace Clusters {

namespace PowerConfiguration {
namespace Attributes {

namespace MainsVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MainsVoltage

namespace MainsFrequency {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MainsFrequency

namespace MainsAlarmMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MainsAlarmMask

namespace MainsVoltageMinThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MainsVoltageMinThreshold

namespace MainsVoltageMaxThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MainsVoltageMaxThreshold

namespace MainsVoltageDwellTrip {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MainsVoltageDwellTrip

namespace BatteryVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryVoltage

namespace BatteryPercentageRemaining {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryPercentageRemaining

namespace BatteryManufacturer {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace BatteryManufacturer

namespace BatterySize {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatterySize

namespace BatteryAhrRating {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BatteryAhrRating

namespace BatteryQuantity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryQuantity

namespace BatteryRatedVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryRatedVoltage

namespace BatteryAlarmMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryAlarmMask

namespace BatteryVoltageMinThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryVoltageMinThreshold

namespace BatteryVoltageThreshold1 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryVoltageThreshold1

namespace BatteryVoltageThreshold2 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryVoltageThreshold2

namespace BatteryVoltageThreshold3 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryVoltageThreshold3

namespace BatteryPercentageMinThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryPercentageMinThreshold

namespace BatteryPercentageThreshold1 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryPercentageThreshold1

namespace BatteryPercentageThreshold2 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryPercentageThreshold2

namespace BatteryPercentageThreshold3 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryPercentageThreshold3

namespace BatteryAlarmState {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BatteryAlarmState

namespace Battery2Voltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2Voltage

namespace Battery2PercentageRemaining {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2PercentageRemaining

namespace Battery2Manufacturer {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace Battery2Manufacturer

namespace Battery2Size {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2Size

namespace Battery2AhrRating {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Battery2AhrRating

namespace Battery2Quantity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2Quantity

namespace Battery2RatedVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2RatedVoltage

namespace Battery2AlarmMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2AlarmMask

namespace Battery2VoltageMinThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2VoltageMinThreshold

namespace Battery2VoltageThreshold1 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2VoltageThreshold1

namespace Battery2VoltageThreshold2 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2VoltageThreshold2

namespace Battery2VoltageThreshold3 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2VoltageThreshold3

namespace Battery2PercentageMinThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2PercentageMinThreshold

namespace Battery2PercentageThreshold1 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2PercentageThreshold1

namespace Battery2PercentageThreshold2 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2PercentageThreshold2

namespace Battery2PercentageThreshold3 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery2PercentageThreshold3

namespace Battery2AlarmState {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace Battery2AlarmState

namespace Battery3Voltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3Voltage

namespace Battery3PercentageRemaining {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3PercentageRemaining

namespace Battery3Manufacturer {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace Battery3Manufacturer

namespace Battery3Size {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3Size

namespace Battery3AhrRating {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Battery3AhrRating

namespace Battery3Quantity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3Quantity

namespace Battery3RatedVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3RatedVoltage

namespace Battery3AlarmMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3AlarmMask

namespace Battery3VoltageMinThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3VoltageMinThreshold

namespace Battery3VoltageThreshold1 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3VoltageThreshold1

namespace Battery3VoltageThreshold2 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3VoltageThreshold2

namespace Battery3VoltageThreshold3 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3VoltageThreshold3

namespace Battery3PercentageMinThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3PercentageMinThreshold

namespace Battery3PercentageThreshold1 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3PercentageThreshold1

namespace Battery3PercentageThreshold2 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3PercentageThreshold2

namespace Battery3PercentageThreshold3 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Battery3PercentageThreshold3

namespace Battery3AlarmState {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace Battery3AlarmState

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace PowerConfiguration

namespace DeviceTemperatureConfiguration {
namespace Attributes {

namespace CurrentTemperature {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace CurrentTemperature

namespace MinTempExperienced {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinTempExperienced

namespace MaxTempExperienced {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxTempExperienced

namespace OverTempTotalDwell {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace OverTempTotalDwell

namespace DeviceTempAlarmMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace DeviceTempAlarmMask

namespace LowTempThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace LowTempThreshold

namespace HighTempThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace HighTempThreshold

namespace LowTempDwellTripPoint {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int24u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LowTempDwellTripPoint

namespace HighTempDwellTripPoint {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int24u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace HighTempDwellTripPoint

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace DeviceTemperatureConfiguration

namespace Identify {
namespace Attributes {

namespace IdentifyTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace IdentifyTime

namespace IdentifyType {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace IdentifyType

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Identify

namespace Groups {
namespace Attributes {

namespace NameSupport {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace NameSupport

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Groups

namespace Scenes {
namespace Attributes {

namespace SceneCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace SceneCount

namespace CurrentScene {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentScene

namespace CurrentGroup {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace CurrentGroup

namespace SceneValid {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace SceneValid

namespace NameSupport {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace NameSupport

namespace LastConfiguredBy {
EmberAfStatus Get(chip::EndpointId endpoint, chip::NodeId * value); // node_id
EmberAfStatus Set(chip::EndpointId endpoint, chip::NodeId value);
} // namespace LastConfiguredBy

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Scenes

namespace OnOff {
namespace Attributes {

namespace OnOff {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace OnOff

namespace GlobalSceneControl {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace GlobalSceneControl

namespace OnTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace OnTime

namespace OffWaitTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace OffWaitTime

namespace StartUpOnOff {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace StartUpOnOff

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace OnOff

namespace OnOffSwitchConfiguration {
namespace Attributes {

namespace SwitchType {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace SwitchType

namespace SwitchActions {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace SwitchActions

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace OnOffSwitchConfiguration

namespace LevelControl {
namespace Attributes {

namespace CurrentLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentLevel

namespace RemainingTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RemainingTime

namespace MinLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MinLevel

namespace MaxLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MaxLevel

namespace CurrentFrequency {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace CurrentFrequency

namespace MinFrequency {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MinFrequency

namespace MaxFrequency {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MaxFrequency

namespace Options {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Options

namespace OnOffTransitionTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace OnOffTransitionTime

namespace OnLevel {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint8_t> & value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value);
} // namespace OnLevel

namespace OnTransitionTime {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace OnTransitionTime

namespace OffTransitionTime {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace OffTransitionTime

namespace DefaultMoveRate {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint8_t> & value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value);
} // namespace DefaultMoveRate

namespace StartUpCurrentLevel {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint8_t> & value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value);
} // namespace StartUpCurrentLevel

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace LevelControl

namespace Alarms {
namespace Attributes {

namespace AlarmCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AlarmCount

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Alarms

namespace Time {
namespace Attributes {

namespace Time {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // epoch_s
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace Time

namespace TimeStatus {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace TimeStatus

namespace TimeZone {
EmberAfStatus Get(chip::EndpointId endpoint, int32_t * value); // int32s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
} // namespace TimeZone

namespace DstStart {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace DstStart

namespace DstEnd {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace DstEnd

namespace DstShift {
EmberAfStatus Get(chip::EndpointId endpoint, int32_t * value); // int32s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
} // namespace DstShift

namespace StandardTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace StandardTime

namespace LocalTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LocalTime

namespace LastSetTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // epoch_s
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LastSetTime

namespace ValidUntilTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // epoch_s
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace ValidUntilTime

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Time

namespace BinaryInputBasic {
namespace Attributes {

namespace ActiveText {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ActiveText

namespace Description {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace Description

namespace InactiveText {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace InactiveText

namespace OutOfService {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace OutOfService

namespace Polarity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Polarity

namespace PresentValue {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace PresentValue

namespace Reliability {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Reliability

namespace StatusFlags {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace StatusFlags

namespace ApplicationType {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace ApplicationType

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace BinaryInputBasic

namespace PowerProfile {
namespace Attributes {

namespace TotalProfileNum {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace TotalProfileNum

namespace MultipleScheduling {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace MultipleScheduling

namespace EnergyFormatting {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace EnergyFormatting

namespace EnergyRemote {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace EnergyRemote

namespace ScheduleMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ScheduleMode

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace PowerProfile

namespace ApplianceControl {
namespace Attributes {

namespace StartTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace StartTime

namespace FinishTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace FinishTime

namespace RemainingTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RemainingTime

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ApplianceControl

namespace PulseWidthModulation {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace PulseWidthModulation

namespace Descriptor {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Descriptor

namespace Binding {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Binding

namespace AccessControl {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace AccessControl

namespace PollControl {
namespace Attributes {

namespace CheckInInterval {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace CheckInInterval

namespace LongPollInterval {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LongPollInterval

namespace ShortPollInterval {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ShortPollInterval

namespace FastPollTimeout {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace FastPollTimeout

namespace CheckInIntervalMin {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace CheckInIntervalMin

namespace LongPollIntervalMin {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LongPollIntervalMin

namespace FastPollTimeoutMax {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace FastPollTimeoutMax

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace PollControl

namespace BridgedActions {
namespace Attributes {

namespace SetupUrl {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // long_char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace SetupUrl

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace BridgedActions

namespace Basic {
namespace Attributes {

namespace InteractionModelVersion {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace InteractionModelVersion

namespace VendorName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace VendorName

namespace VendorID {
EmberAfStatus Get(chip::EndpointId endpoint, chip::VendorId * value); // vendor_id
EmberAfStatus Set(chip::EndpointId endpoint, chip::VendorId value);
} // namespace VendorID

namespace ProductName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ProductName

namespace ProductID {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ProductID

namespace NodeLabel {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace NodeLabel

namespace Location {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace Location

namespace HardwareVersion {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace HardwareVersion

namespace HardwareVersionString {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace HardwareVersionString

namespace SoftwareVersion {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace SoftwareVersion

namespace SoftwareVersionString {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace SoftwareVersionString

namespace ManufacturingDate {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ManufacturingDate

namespace PartNumber {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace PartNumber

namespace ProductURL {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // long_char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ProductURL

namespace ProductLabel {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ProductLabel

namespace SerialNumber {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace SerialNumber

namespace LocalConfigDisabled {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace LocalConfigDisabled

namespace Reachable {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace Reachable

namespace UniqueID {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace UniqueID

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Basic

namespace OtaSoftwareUpdateProvider {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace OtaSoftwareUpdateProvider

namespace OtaSoftwareUpdateRequestor {
namespace Attributes {

namespace UpdatePossible {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace UpdatePossible

namespace UpdateState {
EmberAfStatus Get(chip::EndpointId endpoint,
                  chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAUpdateStateEnum * value); // OTAUpdateStateEnum
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAUpdateStateEnum value);
} // namespace UpdateState

namespace UpdateStateProgress {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint8_t> & value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value);
} // namespace UpdateStateProgress

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace OtaSoftwareUpdateRequestor

namespace LocalizationConfiguration {
namespace Attributes {

namespace ActiveLocale {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ActiveLocale

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace LocalizationConfiguration

namespace TimeFormatLocalization {
namespace Attributes {

namespace HourFormat {
EmberAfStatus Get(chip::EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::HourFormat * value); // HourFormat
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::HourFormat value);
} // namespace HourFormat

namespace ActiveCalendarType {
EmberAfStatus Get(chip::EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::CalendarType * value); // CalendarType
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::TimeFormatLocalization::CalendarType value);
} // namespace ActiveCalendarType

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace TimeFormatLocalization

namespace PowerSourceConfiguration {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace PowerSourceConfiguration

namespace PowerSource {
namespace Attributes {

namespace Status {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Status

namespace Order {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Order

namespace Description {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace Description

namespace WiredAssessedInputVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace WiredAssessedInputVoltage

namespace WiredAssessedInputFrequency {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace WiredAssessedInputFrequency

namespace WiredCurrentType {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace WiredCurrentType

namespace WiredAssessedCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace WiredAssessedCurrent

namespace WiredNominalVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace WiredNominalVoltage

namespace WiredMaximumCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace WiredMaximumCurrent

namespace WiredPresent {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace WiredPresent

namespace BatteryVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BatteryVoltage

namespace BatteryPercentRemaining {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryPercentRemaining

namespace BatteryTimeRemaining {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BatteryTimeRemaining

namespace BatteryChargeLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryChargeLevel

namespace BatteryReplacementNeeded {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace BatteryReplacementNeeded

namespace BatteryReplaceability {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryReplaceability

namespace BatteryPresent {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace BatteryPresent

namespace BatteryReplacementDescription {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace BatteryReplacementDescription

namespace BatteryCommonDesignation {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BatteryCommonDesignation

namespace BatteryANSIDesignation {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace BatteryANSIDesignation

namespace BatteryIECDesignation {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace BatteryIECDesignation

namespace BatteryApprovedChemistry {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BatteryApprovedChemistry

namespace BatteryCapacity {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BatteryCapacity

namespace BatteryQuantity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryQuantity

namespace BatteryChargeState {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BatteryChargeState

namespace BatteryTimeToFullCharge {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BatteryTimeToFullCharge

namespace BatteryFunctionalWhileCharging {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace BatteryFunctionalWhileCharging

namespace BatteryChargingCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BatteryChargingCurrent

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace PowerSource

namespace GeneralCommissioning {
namespace Attributes {

namespace Breadcrumb {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace Breadcrumb

namespace RegulatoryConfig {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace RegulatoryConfig

namespace LocationCapability {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace LocationCapability

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace GeneralCommissioning

namespace NetworkCommissioning {
namespace Attributes {

namespace MaxNetworks {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MaxNetworks

namespace ScanMaxTimeSeconds {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ScanMaxTimeSeconds

namespace ConnectMaxTimeSeconds {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ConnectMaxTimeSeconds

namespace InterfaceEnabled {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace InterfaceEnabled

namespace LastNetworkingStatus {
EmberAfStatus Get(chip::EndpointId endpoint,
                  chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatus * value); // NetworkCommissioningStatus
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatus value);
} // namespace LastNetworkingStatus

namespace LastNetworkID {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace LastNetworkID

namespace LastConnectErrorValue {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LastConnectErrorValue

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace NetworkCommissioning

namespace DiagnosticLogs {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace DiagnosticLogs

namespace GeneralDiagnostics {
namespace Attributes {

namespace RebootCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RebootCount

namespace UpTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace UpTime

namespace TotalOperationalHours {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TotalOperationalHours

namespace BootReasons {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BootReasons

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace GeneralDiagnostics

namespace SoftwareDiagnostics {
namespace Attributes {

namespace CurrentHeapFree {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace CurrentHeapFree

namespace CurrentHeapUsed {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace CurrentHeapUsed

namespace CurrentHeapHighWatermark {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace CurrentHeapHighWatermark

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace SoftwareDiagnostics

namespace ThreadNetworkDiagnostics {
namespace Attributes {

namespace Channel {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Channel

namespace RoutingRole {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace RoutingRole

namespace NetworkName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace NetworkName

namespace PanId {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PanId

namespace ExtendedPanId {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace ExtendedPanId

namespace MeshLocalPrefix {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace MeshLocalPrefix

namespace OverrunCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace OverrunCount

namespace PartitionId {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace PartitionId

namespace Weighting {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Weighting

namespace DataVersion {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace DataVersion

namespace StableDataVersion {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace StableDataVersion

namespace LeaderRouterId {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace LeaderRouterId

namespace DetachedRoleCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace DetachedRoleCount

namespace ChildRoleCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ChildRoleCount

namespace RouterRoleCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RouterRoleCount

namespace LeaderRoleCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace LeaderRoleCount

namespace AttachAttemptCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AttachAttemptCount

namespace PartitionIdChangeCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PartitionIdChangeCount

namespace BetterPartitionAttachAttemptCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BetterPartitionAttachAttemptCount

namespace ParentChangeCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ParentChangeCount

namespace TxTotalCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxTotalCount

namespace TxUnicastCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxUnicastCount

namespace TxBroadcastCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxBroadcastCount

namespace TxAckRequestedCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxAckRequestedCount

namespace TxAckedCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxAckedCount

namespace TxNoAckRequestedCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxNoAckRequestedCount

namespace TxDataCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxDataCount

namespace TxDataPollCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxDataPollCount

namespace TxBeaconCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxBeaconCount

namespace TxBeaconRequestCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxBeaconRequestCount

namespace TxOtherCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxOtherCount

namespace TxRetryCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxRetryCount

namespace TxDirectMaxRetryExpiryCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxDirectMaxRetryExpiryCount

namespace TxIndirectMaxRetryExpiryCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxIndirectMaxRetryExpiryCount

namespace TxErrCcaCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxErrCcaCount

namespace TxErrAbortCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxErrAbortCount

namespace TxErrBusyChannelCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TxErrBusyChannelCount

namespace RxTotalCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxTotalCount

namespace RxUnicastCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxUnicastCount

namespace RxBroadcastCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxBroadcastCount

namespace RxDataCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxDataCount

namespace RxDataPollCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxDataPollCount

namespace RxBeaconCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxBeaconCount

namespace RxBeaconRequestCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxBeaconRequestCount

namespace RxOtherCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxOtherCount

namespace RxAddressFilteredCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxAddressFilteredCount

namespace RxDestAddrFilteredCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxDestAddrFilteredCount

namespace RxDuplicatedCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxDuplicatedCount

namespace RxErrNoFrameCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxErrNoFrameCount

namespace RxErrUnknownNeighborCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxErrUnknownNeighborCount

namespace RxErrInvalidSrcAddrCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxErrInvalidSrcAddrCount

namespace RxErrSecCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxErrSecCount

namespace RxErrFcsCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxErrFcsCount

namespace RxErrOtherCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace RxErrOtherCount

namespace ActiveTimestamp {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace ActiveTimestamp

namespace PendingTimestamp {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace PendingTimestamp

namespace Delay {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace Delay

namespace ChannelMask {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace ChannelMask

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ThreadNetworkDiagnostics

namespace WiFiNetworkDiagnostics {
namespace Attributes {

namespace Bssid {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace Bssid

namespace SecurityType {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace SecurityType

namespace WiFiVersion {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace WiFiVersion

namespace ChannelNumber {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ChannelNumber

namespace Rssi {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace Rssi

namespace BeaconLostCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BeaconLostCount

namespace BeaconRxCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace BeaconRxCount

namespace PacketMulticastRxCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace PacketMulticastRxCount

namespace PacketMulticastTxCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace PacketMulticastTxCount

namespace PacketUnicastRxCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace PacketUnicastRxCount

namespace PacketUnicastTxCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace PacketUnicastTxCount

namespace CurrentMaxRate {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace CurrentMaxRate

namespace OverrunCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace OverrunCount

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace WiFiNetworkDiagnostics

namespace EthernetNetworkDiagnostics {
namespace Attributes {

namespace PHYRate {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace PHYRate

namespace FullDuplex {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace FullDuplex

namespace PacketRxCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace PacketRxCount

namespace PacketTxCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace PacketTxCount

namespace TxErrCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace TxErrCount

namespace CollisionCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace CollisionCount

namespace OverrunCount {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace OverrunCount

namespace CarrierDetect {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace CarrierDetect

namespace TimeSinceReset {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace TimeSinceReset

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace EthernetNetworkDiagnostics

namespace TimeSynchronization {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace TimeSynchronization

namespace BridgedDeviceBasic {
namespace Attributes {

namespace VendorName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace VendorName

namespace VendorID {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace VendorID

namespace ProductName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ProductName

namespace NodeLabel {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace NodeLabel

namespace HardwareVersion {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace HardwareVersion

namespace HardwareVersionString {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace HardwareVersionString

namespace SoftwareVersion {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace SoftwareVersion

namespace SoftwareVersionString {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace SoftwareVersionString

namespace ManufacturingDate {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ManufacturingDate

namespace PartNumber {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace PartNumber

namespace ProductURL {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // long_char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ProductURL

namespace ProductLabel {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ProductLabel

namespace SerialNumber {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace SerialNumber

namespace Reachable {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace Reachable

namespace UniqueID {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace UniqueID

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace BridgedDeviceBasic

namespace Switch {
namespace Attributes {

namespace NumberOfPositions {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace NumberOfPositions

namespace CurrentPosition {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentPosition

namespace MultiPressMax {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MultiPressMax

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Switch

namespace AdministratorCommissioning {
namespace Attributes {

namespace WindowStatus {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace WindowStatus

namespace AdminFabricIndex {
EmberAfStatus Get(chip::EndpointId endpoint, chip::FabricIndex * value); // fabric_idx
EmberAfStatus Set(chip::EndpointId endpoint, chip::FabricIndex value);
} // namespace AdminFabricIndex

namespace AdminVendorId {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AdminVendorId

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace AdministratorCommissioning

namespace OperationalCredentials {
namespace Attributes {

namespace SupportedFabrics {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace SupportedFabrics

namespace CommissionedFabrics {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CommissionedFabrics

namespace CurrentFabricIndex {
EmberAfStatus Get(chip::EndpointId endpoint, chip::FabricIndex * value); // fabric_idx
EmberAfStatus Set(chip::EndpointId endpoint, chip::FabricIndex value);
} // namespace CurrentFabricIndex

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace OperationalCredentials

namespace GroupKeyManagement {
namespace Attributes {

namespace MaxGroupsPerFabric {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MaxGroupsPerFabric

namespace MaxGroupKeysPerFabric {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MaxGroupKeysPerFabric

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace GroupKeyManagement

namespace FixedLabel {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace FixedLabel

namespace UserLabel {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace UserLabel

namespace ProxyConfiguration {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ProxyConfiguration

namespace ProxyDiscovery {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ProxyDiscovery

namespace ProxyValid {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ProxyValid

namespace BooleanState {
namespace Attributes {

namespace StateValue {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace StateValue

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace BooleanState

namespace ModeSelect {
namespace Attributes {

namespace CurrentMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentMode

namespace OnMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace OnMode

namespace StartUpMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace StartUpMode

namespace Description {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace Description

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ModeSelect

namespace ShadeConfiguration {
namespace Attributes {

namespace PhysicalClosedLimit {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PhysicalClosedLimit

namespace MotorStepSize {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MotorStepSize

namespace Status {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Status

namespace ClosedLimit {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClosedLimit

namespace Mode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Mode

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ShadeConfiguration

namespace DoorLock {
namespace Attributes {

namespace LockState {
EmberAfStatus Get(chip::EndpointId endpoint,
                  DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockState> & value); // DlLockState
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::DoorLock::DlLockState value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint,
                  const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockState> & value);
} // namespace LockState

namespace LockType {
EmberAfStatus Get(chip::EndpointId endpoint, chip::app::Clusters::DoorLock::DlLockType * value); // DlLockType
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::DoorLock::DlLockType value);
} // namespace LockType

namespace ActuatorEnabled {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace ActuatorEnabled

namespace DoorState {
EmberAfStatus Get(chip::EndpointId endpoint,
                  DataModel::Nullable<chip::app::Clusters::DoorLock::DlDoorState> & value); // DlDoorState
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::DoorLock::DlDoorState value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint,
                  const chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlDoorState> & value);
} // namespace DoorState

namespace DoorOpenEvents {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace DoorOpenEvents

namespace DoorClosedEvents {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace DoorClosedEvents

namespace OpenPeriod {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace OpenPeriod

namespace NumberOfLogRecordsSupported {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NumberOfLogRecordsSupported

namespace NumberOfTotalUsersSupported {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NumberOfTotalUsersSupported

namespace NumberOfPINUsersSupported {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NumberOfPINUsersSupported

namespace NumberOfRFIDUsersSupported {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NumberOfRFIDUsersSupported

namespace NumberOfWeekDaySchedulesSupportedPerUser {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NumberOfWeekDaySchedulesSupportedPerUser

namespace NumberOfYearDaySchedulesSupportedPerUser {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NumberOfYearDaySchedulesSupportedPerUser

namespace NumberOfHolidaySchedulesSupported {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NumberOfHolidaySchedulesSupported

namespace MaxPINCodeLength {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MaxPINCodeLength

namespace MinPINCodeLength {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MinPINCodeLength

namespace MaxRFIDCodeLength {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MaxRFIDCodeLength

namespace MinRFIDCodeLength {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MinRFIDCodeLength

namespace CredentialRulesSupport {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CredentialRulesSupport

namespace EnableLogging {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace EnableLogging

namespace Language {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace Language

namespace LEDSettings {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace LEDSettings

namespace AutoRelockTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace AutoRelockTime

namespace SoundVolume {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace SoundVolume

namespace OperatingMode {
EmberAfStatus Get(chip::EndpointId endpoint, chip::app::Clusters::DoorLock::DlOperatingMode * value); // DlOperatingMode
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::DoorLock::DlOperatingMode value);
} // namespace OperatingMode

namespace SupportedOperatingModes {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace SupportedOperatingModes

namespace DefaultConfigurationRegister {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace DefaultConfigurationRegister

namespace EnableLocalProgramming {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace EnableLocalProgramming

namespace EnableOneTouchLocking {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace EnableOneTouchLocking

namespace EnableInsideStatusLED {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace EnableInsideStatusLED

namespace EnablePrivacyModeButton {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace EnablePrivacyModeButton

namespace LocalProgrammingFeatures {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace LocalProgrammingFeatures

namespace WrongCodeEntryLimit {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace WrongCodeEntryLimit

namespace UserCodeTemporaryDisableTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace UserCodeTemporaryDisableTime

namespace SendPINOverTheAir {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace SendPINOverTheAir

namespace RequirePINforRemoteOperation {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace RequirePINforRemoteOperation

namespace ExpiringUserTimeout {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ExpiringUserTimeout

namespace AlarmMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AlarmMask

namespace KeypadOperationEventMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace KeypadOperationEventMask

namespace RemoteOperationEventMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RemoteOperationEventMask

namespace ManualOperationEventMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ManualOperationEventMask

namespace RFIDOperationEventMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RFIDOperationEventMask

namespace KeypadProgrammingEventMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace KeypadProgrammingEventMask

namespace RemoteProgrammingEventMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RemoteProgrammingEventMask

namespace RFIDProgrammingEventMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RFIDProgrammingEventMask

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace DoorLock

namespace WindowCovering {
namespace Attributes {

namespace Type {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Type

namespace PhysicalClosedLimitLift {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PhysicalClosedLimitLift

namespace PhysicalClosedLimitTilt {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PhysicalClosedLimitTilt

namespace CurrentPositionLift {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace CurrentPositionLift

namespace CurrentPositionTilt {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace CurrentPositionTilt

namespace NumberOfActuationsLift {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NumberOfActuationsLift

namespace NumberOfActuationsTilt {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NumberOfActuationsTilt

namespace ConfigStatus {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ConfigStatus

namespace CurrentPositionLiftPercentage {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<chip::Percent> & value); // Percent
EmberAfStatus Set(chip::EndpointId endpoint, chip::Percent value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value);
} // namespace CurrentPositionLiftPercentage

namespace CurrentPositionTiltPercentage {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<chip::Percent> & value); // Percent
EmberAfStatus Set(chip::EndpointId endpoint, chip::Percent value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent> & value);
} // namespace CurrentPositionTiltPercentage

namespace OperationalStatus {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace OperationalStatus

namespace TargetPositionLiftPercent100ths {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<chip::Percent100ths> & value); // Percent100ths
EmberAfStatus Set(chip::EndpointId endpoint, chip::Percent100ths value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value);
} // namespace TargetPositionLiftPercent100ths

namespace TargetPositionTiltPercent100ths {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<chip::Percent100ths> & value); // Percent100ths
EmberAfStatus Set(chip::EndpointId endpoint, chip::Percent100ths value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value);
} // namespace TargetPositionTiltPercent100ths

namespace EndProductType {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace EndProductType

namespace CurrentPositionLiftPercent100ths {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<chip::Percent100ths> & value); // Percent100ths
EmberAfStatus Set(chip::EndpointId endpoint, chip::Percent100ths value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value);
} // namespace CurrentPositionLiftPercent100ths

namespace CurrentPositionTiltPercent100ths {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<chip::Percent100ths> & value); // Percent100ths
EmberAfStatus Set(chip::EndpointId endpoint, chip::Percent100ths value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<chip::Percent100ths> & value);
} // namespace CurrentPositionTiltPercent100ths

namespace InstalledOpenLimitLift {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace InstalledOpenLimitLift

namespace InstalledClosedLimitLift {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace InstalledClosedLimitLift

namespace InstalledOpenLimitTilt {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace InstalledOpenLimitTilt

namespace InstalledClosedLimitTilt {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace InstalledClosedLimitTilt

namespace Mode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Mode

namespace SafetyStatus {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace SafetyStatus

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace WindowCovering

namespace BarrierControl {
namespace Attributes {

namespace BarrierMovingState {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BarrierMovingState

namespace BarrierSafetyStatus {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BarrierSafetyStatus

namespace BarrierCapabilities {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BarrierCapabilities

namespace BarrierOpenEvents {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BarrierOpenEvents

namespace BarrierCloseEvents {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BarrierCloseEvents

namespace BarrierCommandOpenEvents {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BarrierCommandOpenEvents

namespace BarrierCommandCloseEvents {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BarrierCommandCloseEvents

namespace BarrierOpenPeriod {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BarrierOpenPeriod

namespace BarrierClosePeriod {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BarrierClosePeriod

namespace BarrierPosition {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BarrierPosition

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace BarrierControl

namespace PumpConfigurationAndControl {
namespace Attributes {

namespace MaxPressure {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxPressure

namespace MaxSpeed {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MaxSpeed

namespace MaxFlow {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MaxFlow

namespace MinConstPressure {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinConstPressure

namespace MaxConstPressure {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxConstPressure

namespace MinCompPressure {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinCompPressure

namespace MaxCompPressure {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxCompPressure

namespace MinConstSpeed {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MinConstSpeed

namespace MaxConstSpeed {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MaxConstSpeed

namespace MinConstFlow {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MinConstFlow

namespace MaxConstFlow {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MaxConstFlow

namespace MinConstTemp {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinConstTemp

namespace MaxConstTemp {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxConstTemp

namespace PumpStatus {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PumpStatus

namespace EffectiveOperationMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace EffectiveOperationMode

namespace EffectiveControlMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace EffectiveControlMode

namespace Capacity {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace Capacity

namespace Speed {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Speed

namespace LifetimeRunningHours {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint32_t> & value); // int24u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value);
} // namespace LifetimeRunningHours

namespace Power {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int24u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace Power

namespace LifetimeEnergyConsumed {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint32_t> & value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value);
} // namespace LifetimeEnergyConsumed

namespace OperationMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace OperationMode

namespace ControlMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ControlMode

namespace AlarmMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AlarmMask

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace PumpConfigurationAndControl

namespace Thermostat {
namespace Attributes {

namespace LocalTemperature {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace LocalTemperature

namespace OutdoorTemperature {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace OutdoorTemperature

namespace Occupancy {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Occupancy

namespace AbsMinHeatSetpointLimit {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AbsMinHeatSetpointLimit

namespace AbsMaxHeatSetpointLimit {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AbsMaxHeatSetpointLimit

namespace AbsMinCoolSetpointLimit {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AbsMinCoolSetpointLimit

namespace AbsMaxCoolSetpointLimit {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AbsMaxCoolSetpointLimit

namespace PiCoolingDemand {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace PiCoolingDemand

namespace PiHeatingDemand {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace PiHeatingDemand

namespace HvacSystemTypeConfiguration {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace HvacSystemTypeConfiguration

namespace LocalTemperatureCalibration {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace LocalTemperatureCalibration

namespace OccupiedCoolingSetpoint {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace OccupiedCoolingSetpoint

namespace OccupiedHeatingSetpoint {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace OccupiedHeatingSetpoint

namespace UnoccupiedCoolingSetpoint {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace UnoccupiedCoolingSetpoint

namespace UnoccupiedHeatingSetpoint {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace UnoccupiedHeatingSetpoint

namespace MinHeatSetpointLimit {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinHeatSetpointLimit

namespace MaxHeatSetpointLimit {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxHeatSetpointLimit

namespace MinCoolSetpointLimit {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinCoolSetpointLimit

namespace MaxCoolSetpointLimit {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxCoolSetpointLimit

namespace MinSetpointDeadBand {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace MinSetpointDeadBand

namespace RemoteSensing {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace RemoteSensing

namespace ControlSequenceOfOperation {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ControlSequenceOfOperation

namespace SystemMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace SystemMode

namespace AlarmMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace AlarmMask

namespace ThermostatRunningMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ThermostatRunningMode

namespace StartOfWeek {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace StartOfWeek

namespace NumberOfWeeklyTransitions {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace NumberOfWeeklyTransitions

namespace NumberOfDailyTransitions {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace NumberOfDailyTransitions

namespace TemperatureSetpointHold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace TemperatureSetpointHold

namespace TemperatureSetpointHoldDuration {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace TemperatureSetpointHoldDuration

namespace ThermostatProgrammingOperationMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ThermostatProgrammingOperationMode

namespace ThermostatRunningState {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ThermostatRunningState

namespace SetpointChangeSource {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace SetpointChangeSource

namespace SetpointChangeAmount {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace SetpointChangeAmount

namespace SetpointChangeSourceTimestamp {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // epoch_s
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace SetpointChangeSourceTimestamp

namespace AcType {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace AcType

namespace AcCapacity {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcCapacity

namespace AcRefrigerantType {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace AcRefrigerantType

namespace AcCompressor {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace AcCompressor

namespace AcErrorCode {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace AcErrorCode

namespace AcLouverPosition {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace AcLouverPosition

namespace AcCoilTemperature {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AcCoilTemperature

namespace AcCapacityFormat {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace AcCapacityFormat

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Thermostat

namespace FanControl {
namespace Attributes {

namespace FanMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace FanMode

namespace FanModeSequence {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace FanModeSequence

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace FanControl

namespace DehumidificationControl {
namespace Attributes {

namespace RelativeHumidity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace RelativeHumidity

namespace DehumidificationCooling {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace DehumidificationCooling

namespace RhDehumidificationSetpoint {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace RhDehumidificationSetpoint

namespace RelativeHumidityMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace RelativeHumidityMode

namespace DehumidificationLockout {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace DehumidificationLockout

namespace DehumidificationHysteresis {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace DehumidificationHysteresis

namespace DehumidificationMaxCool {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace DehumidificationMaxCool

namespace RelativeHumidityDisplay {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace RelativeHumidityDisplay

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace DehumidificationControl

namespace ThermostatUserInterfaceConfiguration {
namespace Attributes {

namespace TemperatureDisplayMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace TemperatureDisplayMode

namespace KeypadLockout {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace KeypadLockout

namespace ScheduleProgrammingVisibility {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ScheduleProgrammingVisibility

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ThermostatUserInterfaceConfiguration

namespace ColorControl {
namespace Attributes {

namespace CurrentHue {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentHue

namespace CurrentSaturation {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentSaturation

namespace RemainingTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RemainingTime

namespace CurrentX {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace CurrentX

namespace CurrentY {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace CurrentY

namespace DriftCompensation {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace DriftCompensation

namespace CompensationText {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace CompensationText

namespace ColorTemperature {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorTemperature

namespace ColorMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ColorMode

namespace ColorControlOptions {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ColorControlOptions

namespace NumberOfPrimaries {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace NumberOfPrimaries

namespace Primary1X {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary1X

namespace Primary1Y {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary1Y

namespace Primary1Intensity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Primary1Intensity

namespace Primary2X {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary2X

namespace Primary2Y {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary2Y

namespace Primary2Intensity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Primary2Intensity

namespace Primary3X {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary3X

namespace Primary3Y {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary3Y

namespace Primary3Intensity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Primary3Intensity

namespace Primary4X {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary4X

namespace Primary4Y {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary4Y

namespace Primary4Intensity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Primary4Intensity

namespace Primary5X {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary5X

namespace Primary5Y {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary5Y

namespace Primary5Intensity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Primary5Intensity

namespace Primary6X {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary6X

namespace Primary6Y {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Primary6Y

namespace Primary6Intensity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Primary6Intensity

namespace WhitePointX {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace WhitePointX

namespace WhitePointY {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace WhitePointY

namespace ColorPointRX {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorPointRX

namespace ColorPointRY {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorPointRY

namespace ColorPointRIntensity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ColorPointRIntensity

namespace ColorPointGX {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorPointGX

namespace ColorPointGY {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorPointGY

namespace ColorPointGIntensity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ColorPointGIntensity

namespace ColorPointBX {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorPointBX

namespace ColorPointBY {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorPointBY

namespace ColorPointBIntensity {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ColorPointBIntensity

namespace EnhancedCurrentHue {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace EnhancedCurrentHue

namespace EnhancedColorMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace EnhancedColorMode

namespace ColorLoopActive {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ColorLoopActive

namespace ColorLoopDirection {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ColorLoopDirection

namespace ColorLoopTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorLoopTime

namespace ColorLoopStartEnhancedHue {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorLoopStartEnhancedHue

namespace ColorLoopStoredEnhancedHue {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorLoopStoredEnhancedHue

namespace ColorCapabilities {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorCapabilities

namespace ColorTempPhysicalMin {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorTempPhysicalMin

namespace ColorTempPhysicalMax {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ColorTempPhysicalMax

namespace CoupleColorTempToLevelMinMireds {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace CoupleColorTempToLevelMinMireds

namespace StartUpColorTemperatureMireds {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace StartUpColorTemperatureMireds

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ColorControl

namespace BallastConfiguration {
namespace Attributes {

namespace PhysicalMinLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace PhysicalMinLevel

namespace PhysicalMaxLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace PhysicalMaxLevel

namespace BallastStatus {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BallastStatus

namespace MinLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MinLevel

namespace MaxLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace MaxLevel

namespace PowerOnLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace PowerOnLevel

namespace PowerOnFadeTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PowerOnFadeTime

namespace IntrinsicBallastFactor {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace IntrinsicBallastFactor

namespace BallastFactorAdjustment {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace BallastFactorAdjustment

namespace LampQuality {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace LampQuality

namespace LampType {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace LampType

namespace LampManufacturer {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace LampManufacturer

namespace LampRatedHours {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int24u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LampRatedHours

namespace LampBurnHours {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int24u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LampBurnHours

namespace LampAlarmMode {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace LampAlarmMode

namespace LampBurnHoursTripPoint {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int24u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LampBurnHoursTripPoint

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace BallastConfiguration

namespace IlluminanceMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Tolerance

namespace LightSensorType {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint8_t> & value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value);
} // namespace LightSensorType

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace IlluminanceMeasurement

namespace TemperatureMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace TemperatureMeasurement

namespace PressureMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Tolerance

namespace ScaledValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ScaledValue

namespace MinScaledValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinScaledValue

namespace MaxScaledValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxScaledValue

namespace ScaledTolerance {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ScaledTolerance

namespace Scale {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace Scale

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace PressureMeasurement

namespace FlowMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace FlowMeasurement

namespace RelativeHumidityMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace RelativeHumidityMeasurement

namespace OccupancySensing {
namespace Attributes {

namespace Occupancy {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Occupancy

namespace OccupancySensorType {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace OccupancySensorType

namespace OccupancySensorTypeBitmap {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace OccupancySensorTypeBitmap

namespace PirOccupiedToUnoccupiedDelay {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PirOccupiedToUnoccupiedDelay

namespace PirUnoccupiedToOccupiedDelay {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PirUnoccupiedToOccupiedDelay

namespace PirUnoccupiedToOccupiedThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace PirUnoccupiedToOccupiedThreshold

namespace UltrasonicOccupiedToUnoccupiedDelay {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace UltrasonicOccupiedToUnoccupiedDelay

namespace UltrasonicUnoccupiedToOccupiedDelay {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace UltrasonicUnoccupiedToOccupiedDelay

namespace UltrasonicUnoccupiedToOccupiedThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace UltrasonicUnoccupiedToOccupiedThreshold

namespace PhysicalContactOccupiedToUnoccupiedDelay {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PhysicalContactOccupiedToUnoccupiedDelay

namespace PhysicalContactUnoccupiedToOccupiedDelay {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace PhysicalContactUnoccupiedToOccupiedDelay

namespace PhysicalContactUnoccupiedToOccupiedThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace PhysicalContactUnoccupiedToOccupiedThreshold

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace OccupancySensing

namespace CarbonMonoxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace CarbonMonoxideConcentrationMeasurement

namespace CarbonDioxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace CarbonDioxideConcentrationMeasurement

namespace EthyleneConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace EthyleneConcentrationMeasurement

namespace EthyleneOxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace EthyleneOxideConcentrationMeasurement

namespace HydrogenConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace HydrogenConcentrationMeasurement

namespace HydrogenSulphideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace HydrogenSulphideConcentrationMeasurement

namespace NitricOxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace NitricOxideConcentrationMeasurement

namespace NitrogenDioxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace NitrogenDioxideConcentrationMeasurement

namespace OxygenConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace OxygenConcentrationMeasurement

namespace OzoneConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace OzoneConcentrationMeasurement

namespace SulfurDioxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace SulfurDioxideConcentrationMeasurement

namespace DissolvedOxygenConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace DissolvedOxygenConcentrationMeasurement

namespace BromateConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace BromateConcentrationMeasurement

namespace ChloraminesConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ChloraminesConcentrationMeasurement

namespace ChlorineConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ChlorineConcentrationMeasurement

namespace FecalColiformAndEColiConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace FecalColiformAndEColiConcentrationMeasurement

namespace FluorideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace FluorideConcentrationMeasurement

namespace HaloaceticAcidsConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace HaloaceticAcidsConcentrationMeasurement

namespace TotalTrihalomethanesConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace TotalTrihalomethanesConcentrationMeasurement

namespace TotalColiformBacteriaConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace TotalColiformBacteriaConcentrationMeasurement

namespace TurbidityConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace TurbidityConcentrationMeasurement

namespace CopperConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace CopperConcentrationMeasurement

namespace LeadConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace LeadConcentrationMeasurement

namespace ManganeseConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ManganeseConcentrationMeasurement

namespace SulfateConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace SulfateConcentrationMeasurement

namespace BromodichloromethaneConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace BromodichloromethaneConcentrationMeasurement

namespace BromoformConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace BromoformConcentrationMeasurement

namespace ChlorodibromomethaneConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ChlorodibromomethaneConcentrationMeasurement

namespace ChloroformConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ChloroformConcentrationMeasurement

namespace SodiumConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MeasuredValue

namespace MinMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MinMeasuredValue

namespace MaxMeasuredValue {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace MaxMeasuredValue

namespace Tolerance {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace Tolerance

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace SodiumConcentrationMeasurement

namespace IasZone {
namespace Attributes {

namespace ZoneState {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ZoneState

namespace ZoneType {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // enum16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ZoneType

namespace ZoneStatus {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ZoneStatus

namespace IasCieAddress {
EmberAfStatus Get(chip::EndpointId endpoint, chip::NodeId * value); // node_id
EmberAfStatus Set(chip::EndpointId endpoint, chip::NodeId value);
} // namespace IasCieAddress

namespace ZoneId {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace ZoneId

namespace NumberOfZoneSensitivityLevelsSupported {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace NumberOfZoneSensitivityLevelsSupported

namespace CurrentZoneSensitivityLevel {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentZoneSensitivityLevel

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace IasZone

namespace IasAce {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace IasAce

namespace IasWd {
namespace Attributes {

namespace MaxDuration {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MaxDuration

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace IasWd

namespace WakeOnLan {
namespace Attributes {

namespace WakeOnLanMacAddress {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace WakeOnLanMacAddress

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace WakeOnLan

namespace Channel {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Channel

namespace TargetNavigator {
namespace Attributes {

namespace CurrentNavigatorTarget {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentNavigatorTarget

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace TargetNavigator

namespace MediaPlayback {
namespace Attributes {

namespace PlaybackState {
EmberAfStatus Get(chip::EndpointId endpoint, chip::app::Clusters::MediaPlayback::PlaybackStateEnum * value); // PlaybackStateEnum
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::MediaPlayback::PlaybackStateEnum value);
} // namespace PlaybackState

namespace StartTime {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // epoch_us
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace StartTime

namespace Duration {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace Duration

namespace PlaybackSpeed {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace PlaybackSpeed

namespace SeekRangeEnd {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace SeekRangeEnd

namespace SeekRangeStart {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace SeekRangeStart

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace MediaPlayback

namespace MediaInput {
namespace Attributes {

namespace CurrentMediaInput {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentMediaInput

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace MediaInput

namespace LowPower {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace LowPower

namespace KeypadInput {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace KeypadInput

namespace ContentLauncher {
namespace Attributes {

namespace SupportedStreamingProtocols {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace SupportedStreamingProtocols

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ContentLauncher

namespace AudioOutput {
namespace Attributes {

namespace CurrentAudioOutput {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CurrentAudioOutput

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace AudioOutput

namespace ApplicationLauncher {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ApplicationLauncher

namespace ApplicationBasic {
namespace Attributes {

namespace VendorName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace VendorName

namespace VendorId {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace VendorId

namespace ApplicationName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ApplicationName

namespace ProductId {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ProductId

namespace ApplicationStatus {
EmberAfStatus Get(chip::EndpointId endpoint,
                  chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum * value); // ApplicationStatusEnum
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum value);
} // namespace ApplicationStatus

namespace ApplicationVersion {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace ApplicationVersion

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ApplicationBasic

namespace AccountLogin {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace AccountLogin

namespace TestCluster {
namespace Attributes {

namespace Boolean {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace Boolean

namespace Bitmap8 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Bitmap8

namespace Bitmap16 {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Bitmap16

namespace Bitmap32 {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace Bitmap32

namespace Bitmap64 {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // bitmap64
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace Bitmap64

namespace Int8u {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Int8u

namespace Int16u {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Int16u

namespace Int24u {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int24u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace Int24u

namespace Int32u {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace Int32u

namespace Int40u {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int40u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace Int40u

namespace Int48u {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int48u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace Int48u

namespace Int56u {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int56u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace Int56u

namespace Int64u {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace Int64u

namespace Int8s {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace Int8s

namespace Int16s {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace Int16s

namespace Int24s {
EmberAfStatus Get(chip::EndpointId endpoint, int32_t * value); // int24s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
} // namespace Int24s

namespace Int32s {
EmberAfStatus Get(chip::EndpointId endpoint, int32_t * value); // int32s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
} // namespace Int32s

namespace Int40s {
EmberAfStatus Get(chip::EndpointId endpoint, int64_t * value); // int40s
EmberAfStatus Set(chip::EndpointId endpoint, int64_t value);
} // namespace Int40s

namespace Int48s {
EmberAfStatus Get(chip::EndpointId endpoint, int64_t * value); // int48s
EmberAfStatus Set(chip::EndpointId endpoint, int64_t value);
} // namespace Int48s

namespace Int56s {
EmberAfStatus Get(chip::EndpointId endpoint, int64_t * value); // int56s
EmberAfStatus Set(chip::EndpointId endpoint, int64_t value);
} // namespace Int56s

namespace Int64s {
EmberAfStatus Get(chip::EndpointId endpoint, int64_t * value); // int64s
EmberAfStatus Set(chip::EndpointId endpoint, int64_t value);
} // namespace Int64s

namespace Enum8 {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace Enum8

namespace Enum16 {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // enum16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace Enum16

namespace FloatSingle {
EmberAfStatus Get(chip::EndpointId endpoint, float * value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
} // namespace FloatSingle

namespace FloatDouble {
EmberAfStatus Get(chip::EndpointId endpoint, double * value); // double
EmberAfStatus Set(chip::EndpointId endpoint, double value);
} // namespace FloatDouble

namespace OctetString {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace OctetString

namespace LongOctetString {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // long_octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace LongOctetString

namespace CharString {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace CharString

namespace LongCharString {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // long_char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace LongCharString

namespace EpochUs {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // epoch_us
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace EpochUs

namespace EpochS {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // epoch_s
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace EpochS

namespace VendorId {
EmberAfStatus Get(chip::EndpointId endpoint, chip::VendorId * value); // vendor_id
EmberAfStatus Set(chip::EndpointId endpoint, chip::VendorId value);
} // namespace VendorId

namespace EnumAttr {
EmberAfStatus Get(chip::EndpointId endpoint, chip::app::Clusters::TestCluster::SimpleEnum * value); // SimpleEnum
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::TestCluster::SimpleEnum value);
} // namespace EnumAttr

namespace RangeRestrictedInt8u {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace RangeRestrictedInt8u

namespace RangeRestrictedInt8s {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace RangeRestrictedInt8s

namespace RangeRestrictedInt16u {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RangeRestrictedInt16u

namespace RangeRestrictedInt16s {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace RangeRestrictedInt16s

namespace TimedWriteBoolean {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace TimedWriteBoolean

namespace Unsupported {
EmberAfStatus Get(chip::EndpointId endpoint, bool * value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
} // namespace Unsupported

namespace NullableBoolean {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<bool> & value); // boolean
EmberAfStatus Set(chip::EndpointId endpoint, bool value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<bool> & value);
} // namespace NullableBoolean

namespace NullableBitmap8 {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint8_t> & value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value);
} // namespace NullableBitmap8

namespace NullableBitmap16 {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace NullableBitmap16

namespace NullableBitmap32 {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint32_t> & value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value);
} // namespace NullableBitmap32

namespace NullableBitmap64 {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint64_t> & value); // bitmap64
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value);
} // namespace NullableBitmap64

namespace NullableInt8u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint8_t> & value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value);
} // namespace NullableInt8u

namespace NullableInt16u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace NullableInt16u

namespace NullableInt24u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint32_t> & value); // int24u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value);
} // namespace NullableInt24u

namespace NullableInt32u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint32_t> & value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint32_t> & value);
} // namespace NullableInt32u

namespace NullableInt40u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint64_t> & value); // int40u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value);
} // namespace NullableInt40u

namespace NullableInt48u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint64_t> & value); // int48u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value);
} // namespace NullableInt48u

namespace NullableInt56u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint64_t> & value); // int56u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value);
} // namespace NullableInt56u

namespace NullableInt64u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint64_t> & value); // int64u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint64_t> & value);
} // namespace NullableInt64u

namespace NullableInt8s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int8_t> & value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int8_t> & value);
} // namespace NullableInt8s

namespace NullableInt16s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int16_t> & value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value);
} // namespace NullableInt16s

namespace NullableInt24s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int32_t> & value); // int24s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int32_t> & value);
} // namespace NullableInt24s

namespace NullableInt32s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int32_t> & value); // int32s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int32_t> & value);
} // namespace NullableInt32s

namespace NullableInt40s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int64_t> & value); // int40s
EmberAfStatus Set(chip::EndpointId endpoint, int64_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value);
} // namespace NullableInt40s

namespace NullableInt48s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int64_t> & value); // int48s
EmberAfStatus Set(chip::EndpointId endpoint, int64_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value);
} // namespace NullableInt48s

namespace NullableInt56s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int64_t> & value); // int56s
EmberAfStatus Set(chip::EndpointId endpoint, int64_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value);
} // namespace NullableInt56s

namespace NullableInt64s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int64_t> & value); // int64s
EmberAfStatus Set(chip::EndpointId endpoint, int64_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int64_t> & value);
} // namespace NullableInt64s

namespace NullableEnum8 {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint8_t> & value); // enum8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value);
} // namespace NullableEnum8

namespace NullableEnum16 {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // enum16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace NullableEnum16

namespace NullableFloatSingle {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<float> & value); // single
EmberAfStatus Set(chip::EndpointId endpoint, float value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<float> & value);
} // namespace NullableFloatSingle

namespace NullableFloatDouble {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<double> & value); // double
EmberAfStatus Set(chip::EndpointId endpoint, double value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<double> & value);
} // namespace NullableFloatDouble

namespace NullableOctetString {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<chip::MutableByteSpan> & value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<chip::ByteSpan> & value);
} // namespace NullableOctetString

namespace NullableCharString {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<chip::MutableCharSpan> & value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<chip::CharSpan> & value);
} // namespace NullableCharString

namespace NullableEnumAttr {
EmberAfStatus Get(chip::EndpointId endpoint,
                  DataModel::Nullable<chip::app::Clusters::TestCluster::SimpleEnum> & value); // SimpleEnum
EmberAfStatus Set(chip::EndpointId endpoint, chip::app::Clusters::TestCluster::SimpleEnum value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint,
                  const chip::app::DataModel::Nullable<chip::app::Clusters::TestCluster::SimpleEnum> & value);
} // namespace NullableEnumAttr

namespace NullableRangeRestrictedInt8u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint8_t> & value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint8_t> & value);
} // namespace NullableRangeRestrictedInt8u

namespace NullableRangeRestrictedInt8s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int8_t> & value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int8_t> & value);
} // namespace NullableRangeRestrictedInt8s

namespace NullableRangeRestrictedInt16u {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<uint16_t> & value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<uint16_t> & value);
} // namespace NullableRangeRestrictedInt16u

namespace NullableRangeRestrictedInt16s {
EmberAfStatus Get(chip::EndpointId endpoint, DataModel::Nullable<int16_t> & value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
EmberAfStatus SetNull(chip::EndpointId endpoint);
EmberAfStatus Set(chip::EndpointId endpoint, const chip::app::DataModel::Nullable<int16_t> & value);
} // namespace NullableRangeRestrictedInt16s

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace TestCluster

namespace Messaging {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace Messaging

namespace ApplianceIdentification {
namespace Attributes {

namespace BasicIdentification {
EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * value); // int56u
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t value);
} // namespace BasicIdentification

namespace CompanyName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace CompanyName

namespace CompanyId {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace CompanyId

namespace BrandName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace BrandName

namespace BrandId {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace BrandId

namespace Model {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace Model

namespace PartNumber {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace PartNumber

namespace ProductRevision {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace ProductRevision

namespace SoftwareRevision {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace SoftwareRevision

namespace ProductTypeName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace ProductTypeName

namespace ProductTypeId {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ProductTypeId

namespace CecedSpecificationVersion {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace CecedSpecificationVersion

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ApplianceIdentification

namespace MeterIdentification {
namespace Attributes {

namespace CompanyName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace CompanyName

namespace MeterTypeId {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace MeterTypeId

namespace DataQualityId {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace DataQualityId

namespace CustomerName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace CustomerName

namespace Model {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace Model

namespace PartNumber {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace PartNumber

namespace ProductRevision {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace ProductRevision

namespace SoftwareRevision {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableByteSpan value); // octet_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::ByteSpan value);
} // namespace SoftwareRevision

namespace UtilityName {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace UtilityName

namespace Pod {
EmberAfStatus Get(chip::EndpointId endpoint, chip::MutableCharSpan value); // char_string
EmberAfStatus Set(chip::EndpointId endpoint, chip::CharSpan value);
} // namespace Pod

namespace AvailablePower {
EmberAfStatus Get(chip::EndpointId endpoint, int32_t * value); // int24s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
} // namespace AvailablePower

namespace PowerThreshold {
EmberAfStatus Get(chip::EndpointId endpoint, int32_t * value); // int24s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
} // namespace PowerThreshold

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace MeterIdentification

namespace ApplianceEventsAndAlert {
namespace Attributes {

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ApplianceEventsAndAlert

namespace ApplianceStatistics {
namespace Attributes {

namespace LogMaxSize {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace LogMaxSize

namespace LogQueueMaxSize {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // int8u
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace LogQueueMaxSize

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ApplianceStatistics

namespace ElectricalMeasurement {
namespace Attributes {

namespace MeasurementType {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace MeasurementType

namespace DcVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace DcVoltage

namespace DcVoltageMin {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace DcVoltageMin

namespace DcVoltageMax {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace DcVoltageMax

namespace DcCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace DcCurrent

namespace DcCurrentMin {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace DcCurrentMin

namespace DcCurrentMax {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace DcCurrentMax

namespace DcPower {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace DcPower

namespace DcPowerMin {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace DcPowerMin

namespace DcPowerMax {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace DcPowerMax

namespace DcVoltageMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace DcVoltageMultiplier

namespace DcVoltageDivisor {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace DcVoltageDivisor

namespace DcCurrentMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace DcCurrentMultiplier

namespace DcCurrentDivisor {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace DcCurrentDivisor

namespace DcPowerMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace DcPowerMultiplier

namespace DcPowerDivisor {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace DcPowerDivisor

namespace AcFrequency {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcFrequency

namespace AcFrequencyMin {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcFrequencyMin

namespace AcFrequencyMax {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcFrequencyMax

namespace NeutralCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace NeutralCurrent

namespace TotalActivePower {
EmberAfStatus Get(chip::EndpointId endpoint, int32_t * value); // int32s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
} // namespace TotalActivePower

namespace TotalReactivePower {
EmberAfStatus Get(chip::EndpointId endpoint, int32_t * value); // int32s
EmberAfStatus Set(chip::EndpointId endpoint, int32_t value);
} // namespace TotalReactivePower

namespace TotalApparentPower {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace TotalApparentPower

namespace Measured1stHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace Measured1stHarmonicCurrent

namespace Measured3rdHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace Measured3rdHarmonicCurrent

namespace Measured5thHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace Measured5thHarmonicCurrent

namespace Measured7thHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace Measured7thHarmonicCurrent

namespace Measured9thHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace Measured9thHarmonicCurrent

namespace Measured11thHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace Measured11thHarmonicCurrent

namespace MeasuredPhase1stHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MeasuredPhase1stHarmonicCurrent

namespace MeasuredPhase3rdHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MeasuredPhase3rdHarmonicCurrent

namespace MeasuredPhase5thHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MeasuredPhase5thHarmonicCurrent

namespace MeasuredPhase7thHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MeasuredPhase7thHarmonicCurrent

namespace MeasuredPhase9thHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MeasuredPhase9thHarmonicCurrent

namespace MeasuredPhase11thHarmonicCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace MeasuredPhase11thHarmonicCurrent

namespace AcFrequencyMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcFrequencyMultiplier

namespace AcFrequencyDivisor {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcFrequencyDivisor

namespace PowerMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace PowerMultiplier

namespace PowerDivisor {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // int32u
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace PowerDivisor

namespace HarmonicCurrentMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace HarmonicCurrentMultiplier

namespace PhaseHarmonicCurrentMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace PhaseHarmonicCurrentMultiplier

namespace InstantaneousVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace InstantaneousVoltage

namespace InstantaneousLineCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace InstantaneousLineCurrent

namespace InstantaneousActiveCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace InstantaneousActiveCurrent

namespace InstantaneousReactiveCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace InstantaneousReactiveCurrent

namespace InstantaneousPower {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace InstantaneousPower

namespace RmsVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltage

namespace RmsVoltageMin {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageMin

namespace RmsVoltageMax {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageMax

namespace RmsCurrent {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsCurrent

namespace RmsCurrentMin {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsCurrentMin

namespace RmsCurrentMax {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsCurrentMax

namespace ActivePower {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActivePower

namespace ActivePowerMin {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActivePowerMin

namespace ActivePowerMax {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActivePowerMax

namespace ReactivePower {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ReactivePower

namespace ApparentPower {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ApparentPower

namespace PowerFactor {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace PowerFactor

namespace AverageRmsVoltageMeasurementPeriod {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AverageRmsVoltageMeasurementPeriod

namespace AverageRmsUnderVoltageCounter {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AverageRmsUnderVoltageCounter

namespace RmsExtremeOverVoltagePeriod {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsExtremeOverVoltagePeriod

namespace RmsExtremeUnderVoltagePeriod {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsExtremeUnderVoltagePeriod

namespace RmsVoltageSagPeriod {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageSagPeriod

namespace RmsVoltageSwellPeriod {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageSwellPeriod

namespace AcVoltageMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcVoltageMultiplier

namespace AcVoltageDivisor {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcVoltageDivisor

namespace AcCurrentMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcCurrentMultiplier

namespace AcCurrentDivisor {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcCurrentDivisor

namespace AcPowerMultiplier {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcPowerMultiplier

namespace AcPowerDivisor {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcPowerDivisor

namespace OverloadAlarmsMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * value); // bitmap8
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t value);
} // namespace OverloadAlarmsMask

namespace VoltageOverload {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace VoltageOverload

namespace CurrentOverload {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace CurrentOverload

namespace AcOverloadAlarmsMask {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // bitmap16
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AcOverloadAlarmsMask

namespace AcVoltageOverload {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AcVoltageOverload

namespace AcCurrentOverload {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AcCurrentOverload

namespace AcActivePowerOverload {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AcActivePowerOverload

namespace AcReactivePowerOverload {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AcReactivePowerOverload

namespace AverageRmsOverVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AverageRmsOverVoltage

namespace AverageRmsUnderVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace AverageRmsUnderVoltage

namespace RmsExtremeOverVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace RmsExtremeOverVoltage

namespace RmsExtremeUnderVoltage {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace RmsExtremeUnderVoltage

namespace RmsVoltageSag {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace RmsVoltageSag

namespace RmsVoltageSwell {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace RmsVoltageSwell

namespace LineCurrentPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace LineCurrentPhaseB

namespace ActiveCurrentPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActiveCurrentPhaseB

namespace ReactiveCurrentPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ReactiveCurrentPhaseB

namespace RmsVoltagePhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltagePhaseB

namespace RmsVoltageMinPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageMinPhaseB

namespace RmsVoltageMaxPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageMaxPhaseB

namespace RmsCurrentPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsCurrentPhaseB

namespace RmsCurrentMinPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsCurrentMinPhaseB

namespace RmsCurrentMaxPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsCurrentMaxPhaseB

namespace ActivePowerPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActivePowerPhaseB

namespace ActivePowerMinPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActivePowerMinPhaseB

namespace ActivePowerMaxPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActivePowerMaxPhaseB

namespace ReactivePowerPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ReactivePowerPhaseB

namespace ApparentPowerPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ApparentPowerPhaseB

namespace PowerFactorPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace PowerFactorPhaseB

namespace AverageRmsVoltageMeasurementPeriodPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AverageRmsVoltageMeasurementPeriodPhaseB

namespace AverageRmsOverVoltageCounterPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AverageRmsOverVoltageCounterPhaseB

namespace AverageRmsUnderVoltageCounterPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AverageRmsUnderVoltageCounterPhaseB

namespace RmsExtremeOverVoltagePeriodPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsExtremeOverVoltagePeriodPhaseB

namespace RmsExtremeUnderVoltagePeriodPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsExtremeUnderVoltagePeriodPhaseB

namespace RmsVoltageSagPeriodPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageSagPeriodPhaseB

namespace RmsVoltageSwellPeriodPhaseB {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageSwellPeriodPhaseB

namespace LineCurrentPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace LineCurrentPhaseC

namespace ActiveCurrentPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActiveCurrentPhaseC

namespace ReactiveCurrentPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ReactiveCurrentPhaseC

namespace RmsVoltagePhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltagePhaseC

namespace RmsVoltageMinPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageMinPhaseC

namespace RmsVoltageMaxPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageMaxPhaseC

namespace RmsCurrentPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsCurrentPhaseC

namespace RmsCurrentMinPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsCurrentMinPhaseC

namespace RmsCurrentMaxPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsCurrentMaxPhaseC

namespace ActivePowerPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActivePowerPhaseC

namespace ActivePowerMinPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActivePowerMinPhaseC

namespace ActivePowerMaxPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ActivePowerMaxPhaseC

namespace ReactivePowerPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, int16_t * value); // int16s
EmberAfStatus Set(chip::EndpointId endpoint, int16_t value);
} // namespace ReactivePowerPhaseC

namespace ApparentPowerPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ApparentPowerPhaseC

namespace PowerFactorPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, int8_t * value); // int8s
EmberAfStatus Set(chip::EndpointId endpoint, int8_t value);
} // namespace PowerFactorPhaseC

namespace AverageRmsVoltageMeasurementPeriodPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AverageRmsVoltageMeasurementPeriodPhaseC

namespace AverageRmsOverVoltageCounterPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AverageRmsOverVoltageCounterPhaseC

namespace AverageRmsUnderVoltageCounterPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace AverageRmsUnderVoltageCounterPhaseC

namespace RmsExtremeOverVoltagePeriodPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsExtremeOverVoltagePeriodPhaseC

namespace RmsExtremeUnderVoltagePeriodPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsExtremeUnderVoltagePeriodPhaseC

namespace RmsVoltageSagPeriodPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageSagPeriodPhaseC

namespace RmsVoltageSwellPeriodPhaseC {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace RmsVoltageSwellPeriodPhaseC

namespace FeatureMap {
EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * value); // bitmap32
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t value);
} // namespace FeatureMap

namespace ClusterRevision {
EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * value); // int16u
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t value);
} // namespace ClusterRevision

} // namespace Attributes
} // namespace ElectricalMeasurement

} // namespace Clusters
} // namespace app
} // namespace chip
