/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

/**
 *  @file
 *    This file contains definitions for accessors around clusters attributes.
 */

#include <app-common/zap-generated/attributes/Accessors.h>

#include <app-common/zap-generated/attribute-type.h>
#include <app-common/zap-generated/ids/Attributes.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app/util/af.h>

namespace chip {
namespace app {
namespace Clusters {

namespace PowerConfiguration {
namespace Attributes {

namespace MainsVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * mainsVoltage)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, MainsVoltage::Id, (uint8_t *) mainsVoltage,
                                      sizeof(*mainsVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t mainsVoltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, MainsVoltage::Id, (uint8_t *) &mainsVoltage,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MainsVoltage

namespace MainsFrequency {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * mainsFrequency)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, MainsFrequency::Id, (uint8_t *) mainsFrequency,
                                      sizeof(*mainsFrequency));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t mainsFrequency)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, MainsFrequency::Id, (uint8_t *) &mainsFrequency,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace MainsFrequency

namespace MainsAlarmMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * mainsAlarmMask)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, MainsAlarmMask::Id, (uint8_t *) mainsAlarmMask,
                                      sizeof(*mainsAlarmMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t mainsAlarmMask)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, MainsAlarmMask::Id, (uint8_t *) &mainsAlarmMask,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace MainsAlarmMask

namespace MainsVoltageMinThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * mainsVoltageMinThreshold)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, MainsVoltageMinThreshold::Id,
                                      (uint8_t *) mainsVoltageMinThreshold, sizeof(*mainsVoltageMinThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t mainsVoltageMinThreshold)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, MainsVoltageMinThreshold::Id,
                                       (uint8_t *) &mainsVoltageMinThreshold, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MainsVoltageMinThreshold

namespace MainsVoltageMaxThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * mainsVoltageMaxThreshold)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, MainsVoltageMaxThreshold::Id,
                                      (uint8_t *) mainsVoltageMaxThreshold, sizeof(*mainsVoltageMaxThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t mainsVoltageMaxThreshold)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, MainsVoltageMaxThreshold::Id,
                                       (uint8_t *) &mainsVoltageMaxThreshold, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MainsVoltageMaxThreshold

namespace MainsVoltageDwellTrip {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * mainsVoltageDwellTrip)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, MainsVoltageDwellTrip::Id,
                                      (uint8_t *) mainsVoltageDwellTrip, sizeof(*mainsVoltageDwellTrip));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t mainsVoltageDwellTrip)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, MainsVoltageDwellTrip::Id,
                                       (uint8_t *) &mainsVoltageDwellTrip, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MainsVoltageDwellTrip

namespace BatteryVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryVoltage)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltage::Id, (uint8_t *) batteryVoltage,
                                      sizeof(*batteryVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryVoltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltage::Id, (uint8_t *) &batteryVoltage,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryVoltage

namespace BatteryPercentageRemaining {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryPercentageRemaining)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageRemaining::Id,
                                      (uint8_t *) batteryPercentageRemaining, sizeof(*batteryPercentageRemaining));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryPercentageRemaining)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageRemaining::Id,
                                       (uint8_t *) &batteryPercentageRemaining, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryPercentageRemaining

namespace BatterySize {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batterySize)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatterySize::Id, (uint8_t *) batterySize,
                                      sizeof(*batterySize));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batterySize)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatterySize::Id, (uint8_t *) &batterySize,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace BatterySize

namespace BatteryAhrRating {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * batteryAhrRating)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryAhrRating::Id, (uint8_t *) batteryAhrRating,
                                      sizeof(*batteryAhrRating));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t batteryAhrRating)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryAhrRating::Id, (uint8_t *) &batteryAhrRating,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace BatteryAhrRating

namespace BatteryQuantity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryQuantity)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryQuantity::Id, (uint8_t *) batteryQuantity,
                                      sizeof(*batteryQuantity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryQuantity)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryQuantity::Id, (uint8_t *) &batteryQuantity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryQuantity

namespace BatteryRatedVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryRatedVoltage)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryRatedVoltage::Id, (uint8_t *) batteryRatedVoltage,
                                      sizeof(*batteryRatedVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryRatedVoltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryRatedVoltage::Id, (uint8_t *) &batteryRatedVoltage,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryRatedVoltage

namespace BatteryAlarmMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryAlarmMask)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryAlarmMask::Id, (uint8_t *) batteryAlarmMask,
                                      sizeof(*batteryAlarmMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryAlarmMask)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryAlarmMask::Id, (uint8_t *) &batteryAlarmMask,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace BatteryAlarmMask

namespace BatteryVoltageMinThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryVoltageMinThreshold)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltageMinThreshold::Id,
                                      (uint8_t *) batteryVoltageMinThreshold, sizeof(*batteryVoltageMinThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryVoltageMinThreshold)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltageMinThreshold::Id,
                                       (uint8_t *) &batteryVoltageMinThreshold, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryVoltageMinThreshold

namespace BatteryVoltageThreshold1 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryVoltageThreshold1)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltageThreshold1::Id,
                                      (uint8_t *) batteryVoltageThreshold1, sizeof(*batteryVoltageThreshold1));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryVoltageThreshold1)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltageThreshold1::Id,
                                       (uint8_t *) &batteryVoltageThreshold1, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryVoltageThreshold1

namespace BatteryVoltageThreshold2 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryVoltageThreshold2)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltageThreshold2::Id,
                                      (uint8_t *) batteryVoltageThreshold2, sizeof(*batteryVoltageThreshold2));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryVoltageThreshold2)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltageThreshold2::Id,
                                       (uint8_t *) &batteryVoltageThreshold2, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryVoltageThreshold2

namespace BatteryVoltageThreshold3 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryVoltageThreshold3)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltageThreshold3::Id,
                                      (uint8_t *) batteryVoltageThreshold3, sizeof(*batteryVoltageThreshold3));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryVoltageThreshold3)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryVoltageThreshold3::Id,
                                       (uint8_t *) &batteryVoltageThreshold3, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryVoltageThreshold3

namespace BatteryPercentageMinThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryPercentageMinThreshold)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageMinThreshold::Id,
                                      (uint8_t *) batteryPercentageMinThreshold, sizeof(*batteryPercentageMinThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryPercentageMinThreshold)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageMinThreshold::Id,
                                       (uint8_t *) &batteryPercentageMinThreshold, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryPercentageMinThreshold

namespace BatteryPercentageThreshold1 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryPercentageThreshold1)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageThreshold1::Id,
                                      (uint8_t *) batteryPercentageThreshold1, sizeof(*batteryPercentageThreshold1));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryPercentageThreshold1)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageThreshold1::Id,
                                       (uint8_t *) &batteryPercentageThreshold1, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryPercentageThreshold1

namespace BatteryPercentageThreshold2 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryPercentageThreshold2)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageThreshold2::Id,
                                      (uint8_t *) batteryPercentageThreshold2, sizeof(*batteryPercentageThreshold2));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryPercentageThreshold2)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageThreshold2::Id,
                                       (uint8_t *) &batteryPercentageThreshold2, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryPercentageThreshold2

namespace BatteryPercentageThreshold3 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryPercentageThreshold3)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageThreshold3::Id,
                                      (uint8_t *) batteryPercentageThreshold3, sizeof(*batteryPercentageThreshold3));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryPercentageThreshold3)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryPercentageThreshold3::Id,
                                       (uint8_t *) &batteryPercentageThreshold3, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryPercentageThreshold3

namespace BatteryAlarmState {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * batteryAlarmState)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, BatteryAlarmState::Id, (uint8_t *) batteryAlarmState,
                                      sizeof(*batteryAlarmState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t batteryAlarmState)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, BatteryAlarmState::Id, (uint8_t *) &batteryAlarmState,
                                       ZCL_BITMAP32_ATTRIBUTE_TYPE);
}

} // namespace BatteryAlarmState

namespace Battery2Voltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2Voltage)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2Voltage::Id, (uint8_t *) battery2Voltage,
                                      sizeof(*battery2Voltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2Voltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2Voltage::Id, (uint8_t *) &battery2Voltage,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2Voltage

namespace Battery2PercentageRemaining {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2PercentageRemaining)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageRemaining::Id,
                                      (uint8_t *) battery2PercentageRemaining, sizeof(*battery2PercentageRemaining));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2PercentageRemaining)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageRemaining::Id,
                                       (uint8_t *) &battery2PercentageRemaining, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2PercentageRemaining

namespace Battery2Size {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2Size)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2Size::Id, (uint8_t *) battery2Size,
                                      sizeof(*battery2Size));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2Size)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2Size::Id, (uint8_t *) &battery2Size,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace Battery2Size

namespace Battery2AhrRating {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * battery2AhrRating)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2AhrRating::Id, (uint8_t *) battery2AhrRating,
                                      sizeof(*battery2AhrRating));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t battery2AhrRating)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2AhrRating::Id, (uint8_t *) &battery2AhrRating,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Battery2AhrRating

namespace Battery2Quantity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2Quantity)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2Quantity::Id, (uint8_t *) battery2Quantity,
                                      sizeof(*battery2Quantity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2Quantity)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2Quantity::Id, (uint8_t *) &battery2Quantity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2Quantity

namespace Battery2RatedVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2RatedVoltage)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2RatedVoltage::Id, (uint8_t *) battery2RatedVoltage,
                                      sizeof(*battery2RatedVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2RatedVoltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2RatedVoltage::Id,
                                       (uint8_t *) &battery2RatedVoltage, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2RatedVoltage

namespace Battery2AlarmMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2AlarmMask)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2AlarmMask::Id, (uint8_t *) battery2AlarmMask,
                                      sizeof(*battery2AlarmMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2AlarmMask)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2AlarmMask::Id, (uint8_t *) &battery2AlarmMask,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace Battery2AlarmMask

namespace Battery2VoltageMinThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2VoltageMinThreshold)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2VoltageMinThreshold::Id,
                                      (uint8_t *) battery2VoltageMinThreshold, sizeof(*battery2VoltageMinThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2VoltageMinThreshold)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2VoltageMinThreshold::Id,
                                       (uint8_t *) &battery2VoltageMinThreshold, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2VoltageMinThreshold

namespace Battery2VoltageThreshold1 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2VoltageThreshold1)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2VoltageThreshold1::Id,
                                      (uint8_t *) battery2VoltageThreshold1, sizeof(*battery2VoltageThreshold1));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2VoltageThreshold1)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2VoltageThreshold1::Id,
                                       (uint8_t *) &battery2VoltageThreshold1, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2VoltageThreshold1

namespace Battery2VoltageThreshold2 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2VoltageThreshold2)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2VoltageThreshold2::Id,
                                      (uint8_t *) battery2VoltageThreshold2, sizeof(*battery2VoltageThreshold2));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2VoltageThreshold2)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2VoltageThreshold2::Id,
                                       (uint8_t *) &battery2VoltageThreshold2, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2VoltageThreshold2

namespace Battery2VoltageThreshold3 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2VoltageThreshold3)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2VoltageThreshold3::Id,
                                      (uint8_t *) battery2VoltageThreshold3, sizeof(*battery2VoltageThreshold3));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2VoltageThreshold3)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2VoltageThreshold3::Id,
                                       (uint8_t *) &battery2VoltageThreshold3, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2VoltageThreshold3

namespace Battery2PercentageMinThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2PercentageMinThreshold)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageMinThreshold::Id,
                                      (uint8_t *) battery2PercentageMinThreshold, sizeof(*battery2PercentageMinThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2PercentageMinThreshold)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageMinThreshold::Id,
                                       (uint8_t *) &battery2PercentageMinThreshold, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2PercentageMinThreshold

namespace Battery2PercentageThreshold1 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2PercentageThreshold1)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageThreshold1::Id,
                                      (uint8_t *) battery2PercentageThreshold1, sizeof(*battery2PercentageThreshold1));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2PercentageThreshold1)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageThreshold1::Id,
                                       (uint8_t *) &battery2PercentageThreshold1, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2PercentageThreshold1

namespace Battery2PercentageThreshold2 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2PercentageThreshold2)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageThreshold2::Id,
                                      (uint8_t *) battery2PercentageThreshold2, sizeof(*battery2PercentageThreshold2));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2PercentageThreshold2)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageThreshold2::Id,
                                       (uint8_t *) &battery2PercentageThreshold2, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2PercentageThreshold2

namespace Battery2PercentageThreshold3 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery2PercentageThreshold3)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageThreshold3::Id,
                                      (uint8_t *) battery2PercentageThreshold3, sizeof(*battery2PercentageThreshold3));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery2PercentageThreshold3)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2PercentageThreshold3::Id,
                                       (uint8_t *) &battery2PercentageThreshold3, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery2PercentageThreshold3

namespace Battery2AlarmState {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * battery2AlarmState)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery2AlarmState::Id, (uint8_t *) battery2AlarmState,
                                      sizeof(*battery2AlarmState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t battery2AlarmState)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery2AlarmState::Id, (uint8_t *) &battery2AlarmState,
                                       ZCL_BITMAP32_ATTRIBUTE_TYPE);
}

} // namespace Battery2AlarmState

namespace Battery3Voltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3Voltage)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3Voltage::Id, (uint8_t *) battery3Voltage,
                                      sizeof(*battery3Voltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3Voltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3Voltage::Id, (uint8_t *) &battery3Voltage,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3Voltage

namespace Battery3PercentageRemaining {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3PercentageRemaining)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageRemaining::Id,
                                      (uint8_t *) battery3PercentageRemaining, sizeof(*battery3PercentageRemaining));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3PercentageRemaining)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageRemaining::Id,
                                       (uint8_t *) &battery3PercentageRemaining, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3PercentageRemaining

namespace Battery3Size {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3Size)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3Size::Id, (uint8_t *) battery3Size,
                                      sizeof(*battery3Size));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3Size)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3Size::Id, (uint8_t *) &battery3Size,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace Battery3Size

namespace Battery3AhrRating {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * battery3AhrRating)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3AhrRating::Id, (uint8_t *) battery3AhrRating,
                                      sizeof(*battery3AhrRating));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t battery3AhrRating)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3AhrRating::Id, (uint8_t *) &battery3AhrRating,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Battery3AhrRating

namespace Battery3Quantity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3Quantity)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3Quantity::Id, (uint8_t *) battery3Quantity,
                                      sizeof(*battery3Quantity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3Quantity)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3Quantity::Id, (uint8_t *) &battery3Quantity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3Quantity

namespace Battery3RatedVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3RatedVoltage)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3RatedVoltage::Id, (uint8_t *) battery3RatedVoltage,
                                      sizeof(*battery3RatedVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3RatedVoltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3RatedVoltage::Id,
                                       (uint8_t *) &battery3RatedVoltage, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3RatedVoltage

namespace Battery3AlarmMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3AlarmMask)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3AlarmMask::Id, (uint8_t *) battery3AlarmMask,
                                      sizeof(*battery3AlarmMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3AlarmMask)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3AlarmMask::Id, (uint8_t *) &battery3AlarmMask,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace Battery3AlarmMask

namespace Battery3VoltageMinThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3VoltageMinThreshold)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3VoltageMinThreshold::Id,
                                      (uint8_t *) battery3VoltageMinThreshold, sizeof(*battery3VoltageMinThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3VoltageMinThreshold)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3VoltageMinThreshold::Id,
                                       (uint8_t *) &battery3VoltageMinThreshold, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3VoltageMinThreshold

namespace Battery3VoltageThreshold1 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3VoltageThreshold1)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3VoltageThreshold1::Id,
                                      (uint8_t *) battery3VoltageThreshold1, sizeof(*battery3VoltageThreshold1));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3VoltageThreshold1)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3VoltageThreshold1::Id,
                                       (uint8_t *) &battery3VoltageThreshold1, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3VoltageThreshold1

namespace Battery3VoltageThreshold2 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3VoltageThreshold2)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3VoltageThreshold2::Id,
                                      (uint8_t *) battery3VoltageThreshold2, sizeof(*battery3VoltageThreshold2));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3VoltageThreshold2)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3VoltageThreshold2::Id,
                                       (uint8_t *) &battery3VoltageThreshold2, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3VoltageThreshold2

namespace Battery3VoltageThreshold3 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3VoltageThreshold3)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3VoltageThreshold3::Id,
                                      (uint8_t *) battery3VoltageThreshold3, sizeof(*battery3VoltageThreshold3));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3VoltageThreshold3)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3VoltageThreshold3::Id,
                                       (uint8_t *) &battery3VoltageThreshold3, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3VoltageThreshold3

namespace Battery3PercentageMinThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3PercentageMinThreshold)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageMinThreshold::Id,
                                      (uint8_t *) battery3PercentageMinThreshold, sizeof(*battery3PercentageMinThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3PercentageMinThreshold)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageMinThreshold::Id,
                                       (uint8_t *) &battery3PercentageMinThreshold, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3PercentageMinThreshold

namespace Battery3PercentageThreshold1 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3PercentageThreshold1)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageThreshold1::Id,
                                      (uint8_t *) battery3PercentageThreshold1, sizeof(*battery3PercentageThreshold1));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3PercentageThreshold1)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageThreshold1::Id,
                                       (uint8_t *) &battery3PercentageThreshold1, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3PercentageThreshold1

namespace Battery3PercentageThreshold2 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3PercentageThreshold2)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageThreshold2::Id,
                                      (uint8_t *) battery3PercentageThreshold2, sizeof(*battery3PercentageThreshold2));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3PercentageThreshold2)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageThreshold2::Id,
                                       (uint8_t *) &battery3PercentageThreshold2, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3PercentageThreshold2

namespace Battery3PercentageThreshold3 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * battery3PercentageThreshold3)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageThreshold3::Id,
                                      (uint8_t *) battery3PercentageThreshold3, sizeof(*battery3PercentageThreshold3));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t battery3PercentageThreshold3)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3PercentageThreshold3::Id,
                                       (uint8_t *) &battery3PercentageThreshold3, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Battery3PercentageThreshold3

namespace Battery3AlarmState {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * battery3AlarmState)
{
    return emberAfReadServerAttribute(endpoint, PowerConfiguration::Id, Battery3AlarmState::Id, (uint8_t *) battery3AlarmState,
                                      sizeof(*battery3AlarmState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t battery3AlarmState)
{
    return emberAfWriteServerAttribute(endpoint, PowerConfiguration::Id, Battery3AlarmState::Id, (uint8_t *) &battery3AlarmState,
                                       ZCL_BITMAP32_ATTRIBUTE_TYPE);
}

} // namespace Battery3AlarmState

} // namespace Attributes
} // namespace PowerConfiguration

namespace DeviceTemperatureConfiguration {
namespace Attributes {

namespace CurrentTemperature {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * currentTemperature)
{
    return emberAfReadServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, CurrentTemperature::Id,
                                      (uint8_t *) currentTemperature, sizeof(*currentTemperature));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t currentTemperature)
{
    return emberAfWriteServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, CurrentTemperature::Id,
                                       (uint8_t *) &currentTemperature, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace CurrentTemperature

namespace MinTempExperienced {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minTempExperienced)
{
    return emberAfReadServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, MinTempExperienced::Id,
                                      (uint8_t *) minTempExperienced, sizeof(*minTempExperienced));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minTempExperienced)
{
    return emberAfWriteServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, MinTempExperienced::Id,
                                       (uint8_t *) &minTempExperienced, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinTempExperienced

namespace MaxTempExperienced {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxTempExperienced)
{
    return emberAfReadServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, MaxTempExperienced::Id,
                                      (uint8_t *) maxTempExperienced, sizeof(*maxTempExperienced));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxTempExperienced)
{
    return emberAfWriteServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, MaxTempExperienced::Id,
                                       (uint8_t *) &maxTempExperienced, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxTempExperienced

namespace OverTempTotalDwell {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * overTempTotalDwell)
{
    return emberAfReadServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, OverTempTotalDwell::Id,
                                      (uint8_t *) overTempTotalDwell, sizeof(*overTempTotalDwell));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t overTempTotalDwell)
{
    return emberAfWriteServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, OverTempTotalDwell::Id,
                                       (uint8_t *) &overTempTotalDwell, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace OverTempTotalDwell

namespace DeviceTempAlarmMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * deviceTempAlarmMask)
{
    return emberAfReadServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, DeviceTempAlarmMask::Id,
                                      (uint8_t *) deviceTempAlarmMask, sizeof(*deviceTempAlarmMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t deviceTempAlarmMask)
{
    return emberAfWriteServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, DeviceTempAlarmMask::Id,
                                       (uint8_t *) &deviceTempAlarmMask, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace DeviceTempAlarmMask

namespace LowTempThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * lowTempThreshold)
{
    return emberAfReadServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, LowTempThreshold::Id,
                                      (uint8_t *) lowTempThreshold, sizeof(*lowTempThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t lowTempThreshold)
{
    return emberAfWriteServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, LowTempThreshold::Id,
                                       (uint8_t *) &lowTempThreshold, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace LowTempThreshold

namespace HighTempThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * highTempThreshold)
{
    return emberAfReadServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, HighTempThreshold::Id,
                                      (uint8_t *) highTempThreshold, sizeof(*highTempThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t highTempThreshold)
{
    return emberAfWriteServerAttribute(endpoint, DeviceTemperatureConfiguration::Id, HighTempThreshold::Id,
                                       (uint8_t *) &highTempThreshold, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace HighTempThreshold

} // namespace Attributes
} // namespace DeviceTemperatureConfiguration

namespace Identify {
namespace Attributes {

namespace IdentifyTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * identifyTime)
{
    return emberAfReadServerAttribute(endpoint, Identify::Id, IdentifyTime::Id, (uint8_t *) identifyTime, sizeof(*identifyTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t identifyTime)
{
    return emberAfWriteServerAttribute(endpoint, Identify::Id, IdentifyTime::Id, (uint8_t *) &identifyTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace IdentifyTime

namespace IdentifyType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * identifyType)
{
    return emberAfReadServerAttribute(endpoint, Identify::Id, IdentifyType::Id, (uint8_t *) identifyType, sizeof(*identifyType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t identifyType)
{
    return emberAfWriteServerAttribute(endpoint, Identify::Id, IdentifyType::Id, (uint8_t *) &identifyType,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace IdentifyType

} // namespace Attributes
} // namespace Identify

namespace Groups {
namespace Attributes {

namespace NameSupport {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * nameSupport)
{
    return emberAfReadServerAttribute(endpoint, Groups::Id, NameSupport::Id, (uint8_t *) nameSupport, sizeof(*nameSupport));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t nameSupport)
{
    return emberAfWriteServerAttribute(endpoint, Groups::Id, NameSupport::Id, (uint8_t *) &nameSupport, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace NameSupport

} // namespace Attributes
} // namespace Groups

namespace Scenes {
namespace Attributes {

namespace SceneCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * sceneCount)
{
    return emberAfReadServerAttribute(endpoint, Scenes::Id, SceneCount::Id, (uint8_t *) sceneCount, sizeof(*sceneCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t sceneCount)
{
    return emberAfWriteServerAttribute(endpoint, Scenes::Id, SceneCount::Id, (uint8_t *) &sceneCount, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace SceneCount

namespace CurrentScene {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentScene)
{
    return emberAfReadServerAttribute(endpoint, Scenes::Id, CurrentScene::Id, (uint8_t *) currentScene, sizeof(*currentScene));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentScene)
{
    return emberAfWriteServerAttribute(endpoint, Scenes::Id, CurrentScene::Id, (uint8_t *) &currentScene, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentScene

namespace CurrentGroup {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * currentGroup)
{
    return emberAfReadServerAttribute(endpoint, Scenes::Id, CurrentGroup::Id, (uint8_t *) currentGroup, sizeof(*currentGroup));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t currentGroup)
{
    return emberAfWriteServerAttribute(endpoint, Scenes::Id, CurrentGroup::Id, (uint8_t *) &currentGroup,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CurrentGroup

namespace SceneValid {

EmberAfStatus Get(chip::EndpointId endpoint, bool * sceneValid)
{
    return emberAfReadServerAttribute(endpoint, Scenes::Id, SceneValid::Id, (uint8_t *) sceneValid, sizeof(*sceneValid));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool sceneValid)
{
    return emberAfWriteServerAttribute(endpoint, Scenes::Id, SceneValid::Id, (uint8_t *) &sceneValid, ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace SceneValid

namespace NameSupport {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * nameSupport)
{
    return emberAfReadServerAttribute(endpoint, Scenes::Id, NameSupport::Id, (uint8_t *) nameSupport, sizeof(*nameSupport));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t nameSupport)
{
    return emberAfWriteServerAttribute(endpoint, Scenes::Id, NameSupport::Id, (uint8_t *) &nameSupport, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace NameSupport

namespace LastConfiguredBy {

EmberAfStatus Get(chip::EndpointId endpoint, chip::NodeId * lastConfiguredBy)
{
    return emberAfReadServerAttribute(endpoint, Scenes::Id, LastConfiguredBy::Id, (uint8_t *) lastConfiguredBy,
                                      sizeof(*lastConfiguredBy));
}
EmberAfStatus Set(chip::EndpointId endpoint, chip::NodeId lastConfiguredBy)
{
    return emberAfWriteServerAttribute(endpoint, Scenes::Id, LastConfiguredBy::Id, (uint8_t *) &lastConfiguredBy,
                                       ZCL_NODE_ID_ATTRIBUTE_TYPE);
}

} // namespace LastConfiguredBy

} // namespace Attributes
} // namespace Scenes

namespace OnOff {
namespace Attributes {

namespace OnOff {

EmberAfStatus Get(chip::EndpointId endpoint, bool * onOff)
{
    return emberAfReadServerAttribute(endpoint, OnOff::Id, OnOff::Id, (uint8_t *) onOff, sizeof(*onOff));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool onOff)
{
    return emberAfWriteServerAttribute(endpoint, OnOff::Id, OnOff::Id, (uint8_t *) &onOff, ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace OnOff

namespace SampleMfgSpecificAttribute0x00000x1002 {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * sampleMfgSpecificAttribute0x00000x1002)
{
    return emberAfReadServerAttribute(endpoint, OnOff::Id, SampleMfgSpecificAttribute0x00000x1002::Id,
                                      (uint8_t *) sampleMfgSpecificAttribute0x00000x1002,
                                      sizeof(*sampleMfgSpecificAttribute0x00000x1002));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t sampleMfgSpecificAttribute0x00000x1002)
{
    return emberAfWriteServerAttribute(endpoint, OnOff::Id, SampleMfgSpecificAttribute0x00000x1002::Id,
                                       (uint8_t *) &sampleMfgSpecificAttribute0x00000x1002, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace SampleMfgSpecificAttribute0x00000x1002

namespace SampleMfgSpecificAttribute0x00000x1049 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * sampleMfgSpecificAttribute0x00000x1049)
{
    return emberAfReadServerAttribute(endpoint, OnOff::Id, SampleMfgSpecificAttribute0x00000x1049::Id,
                                      (uint8_t *) sampleMfgSpecificAttribute0x00000x1049,
                                      sizeof(*sampleMfgSpecificAttribute0x00000x1049));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t sampleMfgSpecificAttribute0x00000x1049)
{
    return emberAfWriteServerAttribute(endpoint, OnOff::Id, SampleMfgSpecificAttribute0x00000x1049::Id,
                                       (uint8_t *) &sampleMfgSpecificAttribute0x00000x1049, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace SampleMfgSpecificAttribute0x00000x1049

namespace SampleMfgSpecificAttribute0x00010x1002 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * sampleMfgSpecificAttribute0x00010x1002)
{
    return emberAfReadServerAttribute(endpoint, OnOff::Id, SampleMfgSpecificAttribute0x00010x1002::Id,
                                      (uint8_t *) sampleMfgSpecificAttribute0x00010x1002,
                                      sizeof(*sampleMfgSpecificAttribute0x00010x1002));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t sampleMfgSpecificAttribute0x00010x1002)
{
    return emberAfWriteServerAttribute(endpoint, OnOff::Id, SampleMfgSpecificAttribute0x00010x1002::Id,
                                       (uint8_t *) &sampleMfgSpecificAttribute0x00010x1002, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace SampleMfgSpecificAttribute0x00010x1002

namespace SampleMfgSpecificAttribute0x00010x1040 {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * sampleMfgSpecificAttribute0x00010x1040)
{
    return emberAfReadServerAttribute(endpoint, OnOff::Id, SampleMfgSpecificAttribute0x00010x1040::Id,
                                      (uint8_t *) sampleMfgSpecificAttribute0x00010x1040,
                                      sizeof(*sampleMfgSpecificAttribute0x00010x1040));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t sampleMfgSpecificAttribute0x00010x1040)
{
    return emberAfWriteServerAttribute(endpoint, OnOff::Id, SampleMfgSpecificAttribute0x00010x1040::Id,
                                       (uint8_t *) &sampleMfgSpecificAttribute0x00010x1040, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace SampleMfgSpecificAttribute0x00010x1040

namespace GlobalSceneControl {

EmberAfStatus Get(chip::EndpointId endpoint, bool * globalSceneControl)
{
    return emberAfReadServerAttribute(endpoint, OnOff::Id, GlobalSceneControl::Id, (uint8_t *) globalSceneControl,
                                      sizeof(*globalSceneControl));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool globalSceneControl)
{
    return emberAfWriteServerAttribute(endpoint, OnOff::Id, GlobalSceneControl::Id, (uint8_t *) &globalSceneControl,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace GlobalSceneControl

namespace OnTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * onTime)
{
    return emberAfReadServerAttribute(endpoint, OnOff::Id, OnTime::Id, (uint8_t *) onTime, sizeof(*onTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t onTime)
{
    return emberAfWriteServerAttribute(endpoint, OnOff::Id, OnTime::Id, (uint8_t *) &onTime, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace OnTime

namespace OffWaitTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * offWaitTime)
{
    return emberAfReadServerAttribute(endpoint, OnOff::Id, OffWaitTime::Id, (uint8_t *) offWaitTime, sizeof(*offWaitTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t offWaitTime)
{
    return emberAfWriteServerAttribute(endpoint, OnOff::Id, OffWaitTime::Id, (uint8_t *) &offWaitTime, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace OffWaitTime

namespace StartUpOnOff {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * startUpOnOff)
{
    return emberAfReadServerAttribute(endpoint, OnOff::Id, StartUpOnOff::Id, (uint8_t *) startUpOnOff, sizeof(*startUpOnOff));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t startUpOnOff)
{
    return emberAfWriteServerAttribute(endpoint, OnOff::Id, StartUpOnOff::Id, (uint8_t *) &startUpOnOff, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace StartUpOnOff

} // namespace Attributes
} // namespace OnOff

namespace OnOffSwitchConfiguration {
namespace Attributes {

namespace SwitchType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * switchType)
{
    return emberAfReadServerAttribute(endpoint, OnOffSwitchConfiguration::Id, SwitchType::Id, (uint8_t *) switchType,
                                      sizeof(*switchType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t switchType)
{
    return emberAfWriteServerAttribute(endpoint, OnOffSwitchConfiguration::Id, SwitchType::Id, (uint8_t *) &switchType,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace SwitchType

namespace SwitchActions {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * switchActions)
{
    return emberAfReadServerAttribute(endpoint, OnOffSwitchConfiguration::Id, SwitchActions::Id, (uint8_t *) switchActions,
                                      sizeof(*switchActions));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t switchActions)
{
    return emberAfWriteServerAttribute(endpoint, OnOffSwitchConfiguration::Id, SwitchActions::Id, (uint8_t *) &switchActions,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace SwitchActions

} // namespace Attributes
} // namespace OnOffSwitchConfiguration

namespace LevelControl {
namespace Attributes {

namespace CurrentLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentLevel)
{
    return emberAfReadServerAttribute(endpoint, LevelControl::Id, CurrentLevel::Id, (uint8_t *) currentLevel,
                                      sizeof(*currentLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentLevel)
{
    return emberAfWriteServerAttribute(endpoint, LevelControl::Id, CurrentLevel::Id, (uint8_t *) &currentLevel,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentLevel

namespace RemainingTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * remainingTime)
{
    return emberAfReadServerAttribute(endpoint, LevelControl::Id, RemainingTime::Id, (uint8_t *) remainingTime,
                                      sizeof(*remainingTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t remainingTime)
{
    return emberAfWriteServerAttribute(endpoint, LevelControl::Id, RemainingTime::Id, (uint8_t *) &remainingTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RemainingTime

namespace Options {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * options)
{
    return emberAfReadServerAttribute(endpoint, LevelControl::Id, Options::Id, (uint8_t *) options, sizeof(*options));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t options)
{
    return emberAfWriteServerAttribute(endpoint, LevelControl::Id, Options::Id, (uint8_t *) &options, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace Options

namespace OnOffTransitionTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * onOffTransitionTime)
{
    return emberAfReadServerAttribute(endpoint, LevelControl::Id, OnOffTransitionTime::Id, (uint8_t *) onOffTransitionTime,
                                      sizeof(*onOffTransitionTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t onOffTransitionTime)
{
    return emberAfWriteServerAttribute(endpoint, LevelControl::Id, OnOffTransitionTime::Id, (uint8_t *) &onOffTransitionTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace OnOffTransitionTime

namespace OnLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * onLevel)
{
    return emberAfReadServerAttribute(endpoint, LevelControl::Id, OnLevel::Id, (uint8_t *) onLevel, sizeof(*onLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t onLevel)
{
    return emberAfWriteServerAttribute(endpoint, LevelControl::Id, OnLevel::Id, (uint8_t *) &onLevel, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace OnLevel

namespace OnTransitionTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * onTransitionTime)
{
    return emberAfReadServerAttribute(endpoint, LevelControl::Id, OnTransitionTime::Id, (uint8_t *) onTransitionTime,
                                      sizeof(*onTransitionTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t onTransitionTime)
{
    return emberAfWriteServerAttribute(endpoint, LevelControl::Id, OnTransitionTime::Id, (uint8_t *) &onTransitionTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace OnTransitionTime

namespace OffTransitionTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * offTransitionTime)
{
    return emberAfReadServerAttribute(endpoint, LevelControl::Id, OffTransitionTime::Id, (uint8_t *) offTransitionTime,
                                      sizeof(*offTransitionTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t offTransitionTime)
{
    return emberAfWriteServerAttribute(endpoint, LevelControl::Id, OffTransitionTime::Id, (uint8_t *) &offTransitionTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace OffTransitionTime

namespace DefaultMoveRate {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * defaultMoveRate)
{
    return emberAfReadServerAttribute(endpoint, LevelControl::Id, DefaultMoveRate::Id, (uint8_t *) defaultMoveRate,
                                      sizeof(*defaultMoveRate));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t defaultMoveRate)
{
    return emberAfWriteServerAttribute(endpoint, LevelControl::Id, DefaultMoveRate::Id, (uint8_t *) &defaultMoveRate,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace DefaultMoveRate

namespace StartUpCurrentLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * startUpCurrentLevel)
{
    return emberAfReadServerAttribute(endpoint, LevelControl::Id, StartUpCurrentLevel::Id, (uint8_t *) startUpCurrentLevel,
                                      sizeof(*startUpCurrentLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t startUpCurrentLevel)
{
    return emberAfWriteServerAttribute(endpoint, LevelControl::Id, StartUpCurrentLevel::Id, (uint8_t *) &startUpCurrentLevel,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace StartUpCurrentLevel

} // namespace Attributes
} // namespace LevelControl

namespace Alarms {
namespace Attributes {

namespace AlarmCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * alarmCount)
{
    return emberAfReadServerAttribute(endpoint, Alarms::Id, AlarmCount::Id, (uint8_t *) alarmCount, sizeof(*alarmCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t alarmCount)
{
    return emberAfWriteServerAttribute(endpoint, Alarms::Id, AlarmCount::Id, (uint8_t *) &alarmCount, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AlarmCount

} // namespace Attributes
} // namespace Alarms

namespace Time {
namespace Attributes {

namespace Time {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * time)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, Time::Id, (uint8_t *) time, sizeof(*time));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t time)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, Time::Id, (uint8_t *) &time, ZCL_EPOCH_S_ATTRIBUTE_TYPE);
}

} // namespace Time

namespace TimeStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * timeStatus)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, TimeStatus::Id, (uint8_t *) timeStatus, sizeof(*timeStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t timeStatus)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, TimeStatus::Id, (uint8_t *) &timeStatus, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace TimeStatus

namespace TimeZone {

EmberAfStatus Get(chip::EndpointId endpoint, int32_t * timeZone)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, TimeZone::Id, (uint8_t *) timeZone, sizeof(*timeZone));
}
EmberAfStatus Set(chip::EndpointId endpoint, int32_t timeZone)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, TimeZone::Id, (uint8_t *) &timeZone, ZCL_INT32S_ATTRIBUTE_TYPE);
}

} // namespace TimeZone

namespace DstStart {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * dstStart)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, DstStart::Id, (uint8_t *) dstStart, sizeof(*dstStart));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t dstStart)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, DstStart::Id, (uint8_t *) &dstStart, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace DstStart

namespace DstEnd {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * dstEnd)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, DstEnd::Id, (uint8_t *) dstEnd, sizeof(*dstEnd));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t dstEnd)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, DstEnd::Id, (uint8_t *) &dstEnd, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace DstEnd

namespace DstShift {

EmberAfStatus Get(chip::EndpointId endpoint, int32_t * dstShift)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, DstShift::Id, (uint8_t *) dstShift, sizeof(*dstShift));
}
EmberAfStatus Set(chip::EndpointId endpoint, int32_t dstShift)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, DstShift::Id, (uint8_t *) &dstShift, ZCL_INT32S_ATTRIBUTE_TYPE);
}

} // namespace DstShift

namespace StandardTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * standardTime)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, StandardTime::Id, (uint8_t *) standardTime, sizeof(*standardTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t standardTime)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, StandardTime::Id, (uint8_t *) &standardTime, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace StandardTime

namespace LocalTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * localTime)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, LocalTime::Id, (uint8_t *) localTime, sizeof(*localTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t localTime)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, LocalTime::Id, (uint8_t *) &localTime, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace LocalTime

namespace LastSetTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * lastSetTime)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, LastSetTime::Id, (uint8_t *) lastSetTime, sizeof(*lastSetTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t lastSetTime)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, LastSetTime::Id, (uint8_t *) &lastSetTime, ZCL_EPOCH_S_ATTRIBUTE_TYPE);
}

} // namespace LastSetTime

namespace ValidUntilTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * validUntilTime)
{
    return emberAfReadServerAttribute(endpoint, Time::Id, ValidUntilTime::Id, (uint8_t *) validUntilTime, sizeof(*validUntilTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t validUntilTime)
{
    return emberAfWriteServerAttribute(endpoint, Time::Id, ValidUntilTime::Id, (uint8_t *) &validUntilTime,
                                       ZCL_EPOCH_S_ATTRIBUTE_TYPE);
}

} // namespace ValidUntilTime

} // namespace Attributes
} // namespace Time

namespace BinaryInputBasic {
namespace Attributes {

namespace OutOfService {

EmberAfStatus Get(chip::EndpointId endpoint, bool * outOfService)
{
    return emberAfReadServerAttribute(endpoint, BinaryInputBasic::Id, OutOfService::Id, (uint8_t *) outOfService,
                                      sizeof(*outOfService));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool outOfService)
{
    return emberAfWriteServerAttribute(endpoint, BinaryInputBasic::Id, OutOfService::Id, (uint8_t *) &outOfService,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace OutOfService

namespace Polarity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * polarity)
{
    return emberAfReadServerAttribute(endpoint, BinaryInputBasic::Id, Polarity::Id, (uint8_t *) polarity, sizeof(*polarity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t polarity)
{
    return emberAfWriteServerAttribute(endpoint, BinaryInputBasic::Id, Polarity::Id, (uint8_t *) &polarity,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace Polarity

namespace PresentValue {

EmberAfStatus Get(chip::EndpointId endpoint, bool * presentValue)
{
    return emberAfReadServerAttribute(endpoint, BinaryInputBasic::Id, PresentValue::Id, (uint8_t *) presentValue,
                                      sizeof(*presentValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool presentValue)
{
    return emberAfWriteServerAttribute(endpoint, BinaryInputBasic::Id, PresentValue::Id, (uint8_t *) &presentValue,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace PresentValue

namespace Reliability {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * reliability)
{
    return emberAfReadServerAttribute(endpoint, BinaryInputBasic::Id, Reliability::Id, (uint8_t *) reliability,
                                      sizeof(*reliability));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t reliability)
{
    return emberAfWriteServerAttribute(endpoint, BinaryInputBasic::Id, Reliability::Id, (uint8_t *) &reliability,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace Reliability

namespace StatusFlags {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * statusFlags)
{
    return emberAfReadServerAttribute(endpoint, BinaryInputBasic::Id, StatusFlags::Id, (uint8_t *) statusFlags,
                                      sizeof(*statusFlags));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t statusFlags)
{
    return emberAfWriteServerAttribute(endpoint, BinaryInputBasic::Id, StatusFlags::Id, (uint8_t *) &statusFlags,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace StatusFlags

namespace ApplicationType {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * applicationType)
{
    return emberAfReadServerAttribute(endpoint, BinaryInputBasic::Id, ApplicationType::Id, (uint8_t *) applicationType,
                                      sizeof(*applicationType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t applicationType)
{
    return emberAfWriteServerAttribute(endpoint, BinaryInputBasic::Id, ApplicationType::Id, (uint8_t *) &applicationType,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace ApplicationType

} // namespace Attributes
} // namespace BinaryInputBasic

namespace PowerProfile {
namespace Attributes {

namespace TotalProfileNum {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * totalProfileNum)
{
    return emberAfReadServerAttribute(endpoint, PowerProfile::Id, TotalProfileNum::Id, (uint8_t *) totalProfileNum,
                                      sizeof(*totalProfileNum));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t totalProfileNum)
{
    return emberAfWriteServerAttribute(endpoint, PowerProfile::Id, TotalProfileNum::Id, (uint8_t *) &totalProfileNum,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace TotalProfileNum

namespace MultipleScheduling {

EmberAfStatus Get(chip::EndpointId endpoint, bool * multipleScheduling)
{
    return emberAfReadServerAttribute(endpoint, PowerProfile::Id, MultipleScheduling::Id, (uint8_t *) multipleScheduling,
                                      sizeof(*multipleScheduling));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool multipleScheduling)
{
    return emberAfWriteServerAttribute(endpoint, PowerProfile::Id, MultipleScheduling::Id, (uint8_t *) &multipleScheduling,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace MultipleScheduling

namespace EnergyFormatting {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * energyFormatting)
{
    return emberAfReadServerAttribute(endpoint, PowerProfile::Id, EnergyFormatting::Id, (uint8_t *) energyFormatting,
                                      sizeof(*energyFormatting));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t energyFormatting)
{
    return emberAfWriteServerAttribute(endpoint, PowerProfile::Id, EnergyFormatting::Id, (uint8_t *) &energyFormatting,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace EnergyFormatting

namespace EnergyRemote {

EmberAfStatus Get(chip::EndpointId endpoint, bool * energyRemote)
{
    return emberAfReadServerAttribute(endpoint, PowerProfile::Id, EnergyRemote::Id, (uint8_t *) energyRemote,
                                      sizeof(*energyRemote));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool energyRemote)
{
    return emberAfWriteServerAttribute(endpoint, PowerProfile::Id, EnergyRemote::Id, (uint8_t *) &energyRemote,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace EnergyRemote

namespace ScheduleMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * scheduleMode)
{
    return emberAfReadServerAttribute(endpoint, PowerProfile::Id, ScheduleMode::Id, (uint8_t *) scheduleMode,
                                      sizeof(*scheduleMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t scheduleMode)
{
    return emberAfWriteServerAttribute(endpoint, PowerProfile::Id, ScheduleMode::Id, (uint8_t *) &scheduleMode,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace ScheduleMode

} // namespace Attributes
} // namespace PowerProfile

namespace ApplianceControl {
namespace Attributes {

namespace StartTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * startTime)
{
    return emberAfReadServerAttribute(endpoint, ApplianceControl::Id, StartTime::Id, (uint8_t *) startTime, sizeof(*startTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t startTime)
{
    return emberAfWriteServerAttribute(endpoint, ApplianceControl::Id, StartTime::Id, (uint8_t *) &startTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace StartTime

namespace FinishTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * finishTime)
{
    return emberAfReadServerAttribute(endpoint, ApplianceControl::Id, FinishTime::Id, (uint8_t *) finishTime, sizeof(*finishTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t finishTime)
{
    return emberAfWriteServerAttribute(endpoint, ApplianceControl::Id, FinishTime::Id, (uint8_t *) &finishTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace FinishTime

namespace RemainingTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * remainingTime)
{
    return emberAfReadServerAttribute(endpoint, ApplianceControl::Id, RemainingTime::Id, (uint8_t *) remainingTime,
                                      sizeof(*remainingTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t remainingTime)
{
    return emberAfWriteServerAttribute(endpoint, ApplianceControl::Id, RemainingTime::Id, (uint8_t *) &remainingTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RemainingTime

} // namespace Attributes
} // namespace ApplianceControl

namespace Descriptor {
namespace Attributes {

} // namespace Attributes
} // namespace Descriptor

namespace PollControl {
namespace Attributes {

namespace CheckInInterval {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * checkInInterval)
{
    return emberAfReadServerAttribute(endpoint, PollControl::Id, CheckInInterval::Id, (uint8_t *) checkInInterval,
                                      sizeof(*checkInInterval));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t checkInInterval)
{
    return emberAfWriteServerAttribute(endpoint, PollControl::Id, CheckInInterval::Id, (uint8_t *) &checkInInterval,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace CheckInInterval

namespace LongPollInterval {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * longPollInterval)
{
    return emberAfReadServerAttribute(endpoint, PollControl::Id, LongPollInterval::Id, (uint8_t *) longPollInterval,
                                      sizeof(*longPollInterval));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t longPollInterval)
{
    return emberAfWriteServerAttribute(endpoint, PollControl::Id, LongPollInterval::Id, (uint8_t *) &longPollInterval,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace LongPollInterval

namespace ShortPollInterval {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * shortPollInterval)
{
    return emberAfReadServerAttribute(endpoint, PollControl::Id, ShortPollInterval::Id, (uint8_t *) shortPollInterval,
                                      sizeof(*shortPollInterval));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t shortPollInterval)
{
    return emberAfWriteServerAttribute(endpoint, PollControl::Id, ShortPollInterval::Id, (uint8_t *) &shortPollInterval,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ShortPollInterval

namespace FastPollTimeout {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * fastPollTimeout)
{
    return emberAfReadServerAttribute(endpoint, PollControl::Id, FastPollTimeout::Id, (uint8_t *) fastPollTimeout,
                                      sizeof(*fastPollTimeout));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t fastPollTimeout)
{
    return emberAfWriteServerAttribute(endpoint, PollControl::Id, FastPollTimeout::Id, (uint8_t *) &fastPollTimeout,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace FastPollTimeout

namespace CheckInIntervalMin {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * checkInIntervalMin)
{
    return emberAfReadServerAttribute(endpoint, PollControl::Id, CheckInIntervalMin::Id, (uint8_t *) checkInIntervalMin,
                                      sizeof(*checkInIntervalMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t checkInIntervalMin)
{
    return emberAfWriteServerAttribute(endpoint, PollControl::Id, CheckInIntervalMin::Id, (uint8_t *) &checkInIntervalMin,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace CheckInIntervalMin

namespace LongPollIntervalMin {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * longPollIntervalMin)
{
    return emberAfReadServerAttribute(endpoint, PollControl::Id, LongPollIntervalMin::Id, (uint8_t *) longPollIntervalMin,
                                      sizeof(*longPollIntervalMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t longPollIntervalMin)
{
    return emberAfWriteServerAttribute(endpoint, PollControl::Id, LongPollIntervalMin::Id, (uint8_t *) &longPollIntervalMin,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace LongPollIntervalMin

namespace FastPollTimeoutMax {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * fastPollTimeoutMax)
{
    return emberAfReadServerAttribute(endpoint, PollControl::Id, FastPollTimeoutMax::Id, (uint8_t *) fastPollTimeoutMax,
                                      sizeof(*fastPollTimeoutMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t fastPollTimeoutMax)
{
    return emberAfWriteServerAttribute(endpoint, PollControl::Id, FastPollTimeoutMax::Id, (uint8_t *) &fastPollTimeoutMax,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace FastPollTimeoutMax

} // namespace Attributes
} // namespace PollControl

namespace Basic {
namespace Attributes {

namespace InteractionModelVersion {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * interactionModelVersion)
{
    return emberAfReadServerAttribute(endpoint, Basic::Id, InteractionModelVersion::Id, (uint8_t *) interactionModelVersion,
                                      sizeof(*interactionModelVersion));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t interactionModelVersion)
{
    return emberAfWriteServerAttribute(endpoint, Basic::Id, InteractionModelVersion::Id, (uint8_t *) &interactionModelVersion,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace InteractionModelVersion

namespace VendorID {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * vendorID)
{
    return emberAfReadServerAttribute(endpoint, Basic::Id, VendorID::Id, (uint8_t *) vendorID, sizeof(*vendorID));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t vendorID)
{
    return emberAfWriteServerAttribute(endpoint, Basic::Id, VendorID::Id, (uint8_t *) &vendorID, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace VendorID

namespace ProductID {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * productID)
{
    return emberAfReadServerAttribute(endpoint, Basic::Id, ProductID::Id, (uint8_t *) productID, sizeof(*productID));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t productID)
{
    return emberAfWriteServerAttribute(endpoint, Basic::Id, ProductID::Id, (uint8_t *) &productID, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ProductID

namespace HardwareVersion {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * hardwareVersion)
{
    return emberAfReadServerAttribute(endpoint, Basic::Id, HardwareVersion::Id, (uint8_t *) hardwareVersion,
                                      sizeof(*hardwareVersion));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t hardwareVersion)
{
    return emberAfWriteServerAttribute(endpoint, Basic::Id, HardwareVersion::Id, (uint8_t *) &hardwareVersion,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace HardwareVersion

namespace SoftwareVersion {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * softwareVersion)
{
    return emberAfReadServerAttribute(endpoint, Basic::Id, SoftwareVersion::Id, (uint8_t *) softwareVersion,
                                      sizeof(*softwareVersion));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t softwareVersion)
{
    return emberAfWriteServerAttribute(endpoint, Basic::Id, SoftwareVersion::Id, (uint8_t *) &softwareVersion,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace SoftwareVersion

namespace LocalConfigDisabled {

EmberAfStatus Get(chip::EndpointId endpoint, bool * localConfigDisabled)
{
    return emberAfReadServerAttribute(endpoint, Basic::Id, LocalConfigDisabled::Id, (uint8_t *) localConfigDisabled,
                                      sizeof(*localConfigDisabled));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool localConfigDisabled)
{
    return emberAfWriteServerAttribute(endpoint, Basic::Id, LocalConfigDisabled::Id, (uint8_t *) &localConfigDisabled,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace LocalConfigDisabled

namespace Reachable {

EmberAfStatus Get(chip::EndpointId endpoint, bool * reachable)
{
    return emberAfReadServerAttribute(endpoint, Basic::Id, Reachable::Id, (uint8_t *) reachable, sizeof(*reachable));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool reachable)
{
    return emberAfWriteServerAttribute(endpoint, Basic::Id, Reachable::Id, (uint8_t *) &reachable, ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace Reachable

} // namespace Attributes
} // namespace Basic

namespace OtaSoftwareUpdateRequestor {
namespace Attributes {

namespace UpdatePossible {

EmberAfStatus Get(chip::EndpointId endpoint, bool * updatePossible)
{
    return emberAfReadServerAttribute(endpoint, OtaSoftwareUpdateRequestor::Id, UpdatePossible::Id, (uint8_t *) updatePossible,
                                      sizeof(*updatePossible));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool updatePossible)
{
    return emberAfWriteServerAttribute(endpoint, OtaSoftwareUpdateRequestor::Id, UpdatePossible::Id, (uint8_t *) &updatePossible,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace UpdatePossible

} // namespace Attributes
} // namespace OtaSoftwareUpdateRequestor

namespace PowerSource {
namespace Attributes {

namespace Status {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * status)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, Status::Id, (uint8_t *) status, sizeof(*status));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t status)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, Status::Id, (uint8_t *) &status, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace Status

namespace Order {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * order)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, Order::Id, (uint8_t *) order, sizeof(*order));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t order)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, Order::Id, (uint8_t *) &order, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Order

namespace WiredAssessedInputVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * wiredAssessedInputVoltage)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, WiredAssessedInputVoltage::Id,
                                      (uint8_t *) wiredAssessedInputVoltage, sizeof(*wiredAssessedInputVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t wiredAssessedInputVoltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, WiredAssessedInputVoltage::Id,
                                       (uint8_t *) &wiredAssessedInputVoltage, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace WiredAssessedInputVoltage

namespace WiredAssessedInputFrequency {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * wiredAssessedInputFrequency)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, WiredAssessedInputFrequency::Id,
                                      (uint8_t *) wiredAssessedInputFrequency, sizeof(*wiredAssessedInputFrequency));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t wiredAssessedInputFrequency)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, WiredAssessedInputFrequency::Id,
                                       (uint8_t *) &wiredAssessedInputFrequency, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace WiredAssessedInputFrequency

namespace WiredCurrentType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * wiredCurrentType)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, WiredCurrentType::Id, (uint8_t *) wiredCurrentType,
                                      sizeof(*wiredCurrentType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t wiredCurrentType)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, WiredCurrentType::Id, (uint8_t *) &wiredCurrentType,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace WiredCurrentType

namespace WiredAssessedCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * wiredAssessedCurrent)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, WiredAssessedCurrent::Id, (uint8_t *) wiredAssessedCurrent,
                                      sizeof(*wiredAssessedCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t wiredAssessedCurrent)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, WiredAssessedCurrent::Id, (uint8_t *) &wiredAssessedCurrent,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace WiredAssessedCurrent

namespace WiredNominalVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * wiredNominalVoltage)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, WiredNominalVoltage::Id, (uint8_t *) wiredNominalVoltage,
                                      sizeof(*wiredNominalVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t wiredNominalVoltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, WiredNominalVoltage::Id, (uint8_t *) &wiredNominalVoltage,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace WiredNominalVoltage

namespace WiredMaximumCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * wiredMaximumCurrent)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, WiredMaximumCurrent::Id, (uint8_t *) wiredMaximumCurrent,
                                      sizeof(*wiredMaximumCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t wiredMaximumCurrent)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, WiredMaximumCurrent::Id, (uint8_t *) &wiredMaximumCurrent,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace WiredMaximumCurrent

namespace WiredPresent {

EmberAfStatus Get(chip::EndpointId endpoint, bool * wiredPresent)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, WiredPresent::Id, (uint8_t *) wiredPresent, sizeof(*wiredPresent));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool wiredPresent)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, WiredPresent::Id, (uint8_t *) &wiredPresent,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace WiredPresent

namespace BatteryVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * batteryVoltage)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryVoltage::Id, (uint8_t *) batteryVoltage,
                                      sizeof(*batteryVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t batteryVoltage)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryVoltage::Id, (uint8_t *) &batteryVoltage,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace BatteryVoltage

namespace BatteryPercentRemaining {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryPercentRemaining)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryPercentRemaining::Id, (uint8_t *) batteryPercentRemaining,
                                      sizeof(*batteryPercentRemaining));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryPercentRemaining)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryPercentRemaining::Id, (uint8_t *) &batteryPercentRemaining,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryPercentRemaining

namespace BatteryTimeRemaining {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * batteryTimeRemaining)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryTimeRemaining::Id, (uint8_t *) batteryTimeRemaining,
                                      sizeof(*batteryTimeRemaining));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t batteryTimeRemaining)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryTimeRemaining::Id, (uint8_t *) &batteryTimeRemaining,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace BatteryTimeRemaining

namespace BatteryChargeLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryChargeLevel)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryChargeLevel::Id, (uint8_t *) batteryChargeLevel,
                                      sizeof(*batteryChargeLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryChargeLevel)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryChargeLevel::Id, (uint8_t *) &batteryChargeLevel,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace BatteryChargeLevel

namespace BatteryReplacementNeeded {

EmberAfStatus Get(chip::EndpointId endpoint, bool * batteryReplacementNeeded)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryReplacementNeeded::Id, (uint8_t *) batteryReplacementNeeded,
                                      sizeof(*batteryReplacementNeeded));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool batteryReplacementNeeded)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryReplacementNeeded::Id,
                                       (uint8_t *) &batteryReplacementNeeded, ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace BatteryReplacementNeeded

namespace BatteryReplaceability {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryReplaceability)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryReplaceability::Id, (uint8_t *) batteryReplaceability,
                                      sizeof(*batteryReplaceability));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryReplaceability)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryReplaceability::Id, (uint8_t *) &batteryReplaceability,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace BatteryReplaceability

namespace BatteryPresent {

EmberAfStatus Get(chip::EndpointId endpoint, bool * batteryPresent)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryPresent::Id, (uint8_t *) batteryPresent,
                                      sizeof(*batteryPresent));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool batteryPresent)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryPresent::Id, (uint8_t *) &batteryPresent,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace BatteryPresent

namespace BatteryCommonDesignation {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * batteryCommonDesignation)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryCommonDesignation::Id, (uint8_t *) batteryCommonDesignation,
                                      sizeof(*batteryCommonDesignation));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t batteryCommonDesignation)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryCommonDesignation::Id,
                                       (uint8_t *) &batteryCommonDesignation, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace BatteryCommonDesignation

namespace BatteryApprovedChemistry {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * batteryApprovedChemistry)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryApprovedChemistry::Id, (uint8_t *) batteryApprovedChemistry,
                                      sizeof(*batteryApprovedChemistry));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t batteryApprovedChemistry)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryApprovedChemistry::Id,
                                       (uint8_t *) &batteryApprovedChemistry, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace BatteryApprovedChemistry

namespace BatteryCapacity {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * batteryCapacity)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryCapacity::Id, (uint8_t *) batteryCapacity,
                                      sizeof(*batteryCapacity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t batteryCapacity)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryCapacity::Id, (uint8_t *) &batteryCapacity,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace BatteryCapacity

namespace BatteryQuantity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryQuantity)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryQuantity::Id, (uint8_t *) batteryQuantity,
                                      sizeof(*batteryQuantity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryQuantity)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryQuantity::Id, (uint8_t *) &batteryQuantity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BatteryQuantity

namespace BatteryChargeState {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * batteryChargeState)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryChargeState::Id, (uint8_t *) batteryChargeState,
                                      sizeof(*batteryChargeState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t batteryChargeState)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryChargeState::Id, (uint8_t *) &batteryChargeState,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace BatteryChargeState

namespace BatteryTimeToFullCharge {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * batteryTimeToFullCharge)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryTimeToFullCharge::Id, (uint8_t *) batteryTimeToFullCharge,
                                      sizeof(*batteryTimeToFullCharge));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t batteryTimeToFullCharge)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryTimeToFullCharge::Id, (uint8_t *) &batteryTimeToFullCharge,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace BatteryTimeToFullCharge

namespace BatteryFunctionalWhileCharging {

EmberAfStatus Get(chip::EndpointId endpoint, bool * batteryFunctionalWhileCharging)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryFunctionalWhileCharging::Id,
                                      (uint8_t *) batteryFunctionalWhileCharging, sizeof(*batteryFunctionalWhileCharging));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool batteryFunctionalWhileCharging)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryFunctionalWhileCharging::Id,
                                       (uint8_t *) &batteryFunctionalWhileCharging, ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace BatteryFunctionalWhileCharging

namespace BatteryChargingCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * batteryChargingCurrent)
{
    return emberAfReadServerAttribute(endpoint, PowerSource::Id, BatteryChargingCurrent::Id, (uint8_t *) batteryChargingCurrent,
                                      sizeof(*batteryChargingCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t batteryChargingCurrent)
{
    return emberAfWriteServerAttribute(endpoint, PowerSource::Id, BatteryChargingCurrent::Id, (uint8_t *) &batteryChargingCurrent,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace BatteryChargingCurrent

} // namespace Attributes
} // namespace PowerSource

namespace GeneralCommissioning {
namespace Attributes {

namespace Breadcrumb {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * breadcrumb)
{
    return emberAfReadServerAttribute(endpoint, GeneralCommissioning::Id, Breadcrumb::Id, (uint8_t *) breadcrumb,
                                      sizeof(*breadcrumb));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t breadcrumb)
{
    return emberAfWriteServerAttribute(endpoint, GeneralCommissioning::Id, Breadcrumb::Id, (uint8_t *) &breadcrumb,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace Breadcrumb

} // namespace Attributes
} // namespace GeneralCommissioning

namespace GeneralDiagnostics {
namespace Attributes {

namespace RebootCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rebootCount)
{
    return emberAfReadServerAttribute(endpoint, GeneralDiagnostics::Id, RebootCount::Id, (uint8_t *) rebootCount,
                                      sizeof(*rebootCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rebootCount)
{
    return emberAfWriteServerAttribute(endpoint, GeneralDiagnostics::Id, RebootCount::Id, (uint8_t *) &rebootCount,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RebootCount

namespace UpTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * upTime)
{
    return emberAfReadServerAttribute(endpoint, GeneralDiagnostics::Id, UpTime::Id, (uint8_t *) upTime, sizeof(*upTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t upTime)
{
    return emberAfWriteServerAttribute(endpoint, GeneralDiagnostics::Id, UpTime::Id, (uint8_t *) &upTime,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace UpTime

namespace TotalOperationalHours {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * totalOperationalHours)
{
    return emberAfReadServerAttribute(endpoint, GeneralDiagnostics::Id, TotalOperationalHours::Id,
                                      (uint8_t *) totalOperationalHours, sizeof(*totalOperationalHours));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t totalOperationalHours)
{
    return emberAfWriteServerAttribute(endpoint, GeneralDiagnostics::Id, TotalOperationalHours::Id,
                                       (uint8_t *) &totalOperationalHours, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TotalOperationalHours

namespace BootReasons {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * bootReasons)
{
    return emberAfReadServerAttribute(endpoint, GeneralDiagnostics::Id, BootReasons::Id, (uint8_t *) bootReasons,
                                      sizeof(*bootReasons));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t bootReasons)
{
    return emberAfWriteServerAttribute(endpoint, GeneralDiagnostics::Id, BootReasons::Id, (uint8_t *) &bootReasons,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace BootReasons

} // namespace Attributes
} // namespace GeneralDiagnostics

namespace SoftwareDiagnostics {
namespace Attributes {

namespace CurrentHeapFree {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * currentHeapFree)
{
    return emberAfReadServerAttribute(endpoint, SoftwareDiagnostics::Id, CurrentHeapFree::Id, (uint8_t *) currentHeapFree,
                                      sizeof(*currentHeapFree));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t currentHeapFree)
{
    return emberAfWriteServerAttribute(endpoint, SoftwareDiagnostics::Id, CurrentHeapFree::Id, (uint8_t *) &currentHeapFree,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace CurrentHeapFree

namespace CurrentHeapUsed {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * currentHeapUsed)
{
    return emberAfReadServerAttribute(endpoint, SoftwareDiagnostics::Id, CurrentHeapUsed::Id, (uint8_t *) currentHeapUsed,
                                      sizeof(*currentHeapUsed));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t currentHeapUsed)
{
    return emberAfWriteServerAttribute(endpoint, SoftwareDiagnostics::Id, CurrentHeapUsed::Id, (uint8_t *) &currentHeapUsed,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace CurrentHeapUsed

namespace CurrentHeapHighWatermark {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * currentHeapHighWatermark)
{
    return emberAfReadServerAttribute(endpoint, SoftwareDiagnostics::Id, CurrentHeapHighWatermark::Id,
                                      (uint8_t *) currentHeapHighWatermark, sizeof(*currentHeapHighWatermark));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t currentHeapHighWatermark)
{
    return emberAfWriteServerAttribute(endpoint, SoftwareDiagnostics::Id, CurrentHeapHighWatermark::Id,
                                       (uint8_t *) &currentHeapHighWatermark, ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace CurrentHeapHighWatermark

} // namespace Attributes
} // namespace SoftwareDiagnostics

namespace ThreadNetworkDiagnostics {
namespace Attributes {

namespace Channel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * channel)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, Channel::Id, (uint8_t *) channel, sizeof(*channel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t channel)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, Channel::Id, (uint8_t *) &channel,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Channel

namespace RoutingRole {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * routingRole)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RoutingRole::Id, (uint8_t *) routingRole,
                                      sizeof(*routingRole));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t routingRole)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RoutingRole::Id, (uint8_t *) &routingRole,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace RoutingRole

namespace PanId {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * panId)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, PanId::Id, (uint8_t *) panId, sizeof(*panId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t panId)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, PanId::Id, (uint8_t *) &panId,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PanId

namespace ExtendedPanId {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * extendedPanId)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, ExtendedPanId::Id, (uint8_t *) extendedPanId,
                                      sizeof(*extendedPanId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t extendedPanId)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, ExtendedPanId::Id, (uint8_t *) &extendedPanId,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace ExtendedPanId

namespace OverrunCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * overrunCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, OverrunCount::Id, (uint8_t *) overrunCount,
                                      sizeof(*overrunCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t overrunCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, OverrunCount::Id, (uint8_t *) &overrunCount,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace OverrunCount

namespace PartitionId {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * partitionId)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, PartitionId::Id, (uint8_t *) partitionId,
                                      sizeof(*partitionId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t partitionId)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, PartitionId::Id, (uint8_t *) &partitionId,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace PartitionId

namespace Weighting {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * weighting)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, Weighting::Id, (uint8_t *) weighting,
                                      sizeof(*weighting));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t weighting)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, Weighting::Id, (uint8_t *) &weighting,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Weighting

namespace DataVersion {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * dataVersion)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, DataVersion::Id, (uint8_t *) dataVersion,
                                      sizeof(*dataVersion));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t dataVersion)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, DataVersion::Id, (uint8_t *) &dataVersion,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace DataVersion

namespace StableDataVersion {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * stableDataVersion)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, StableDataVersion::Id, (uint8_t *) stableDataVersion,
                                      sizeof(*stableDataVersion));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t stableDataVersion)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, StableDataVersion::Id,
                                       (uint8_t *) &stableDataVersion, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace StableDataVersion

namespace LeaderRouterId {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * leaderRouterId)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, LeaderRouterId::Id, (uint8_t *) leaderRouterId,
                                      sizeof(*leaderRouterId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t leaderRouterId)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, LeaderRouterId::Id, (uint8_t *) &leaderRouterId,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace LeaderRouterId

namespace DetachedRoleCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * detachedRoleCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, DetachedRoleCount::Id, (uint8_t *) detachedRoleCount,
                                      sizeof(*detachedRoleCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t detachedRoleCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, DetachedRoleCount::Id,
                                       (uint8_t *) &detachedRoleCount, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace DetachedRoleCount

namespace ChildRoleCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * childRoleCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, ChildRoleCount::Id, (uint8_t *) childRoleCount,
                                      sizeof(*childRoleCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t childRoleCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, ChildRoleCount::Id, (uint8_t *) &childRoleCount,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ChildRoleCount

namespace RouterRoleCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * routerRoleCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RouterRoleCount::Id, (uint8_t *) routerRoleCount,
                                      sizeof(*routerRoleCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t routerRoleCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RouterRoleCount::Id, (uint8_t *) &routerRoleCount,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RouterRoleCount

namespace LeaderRoleCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * leaderRoleCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, LeaderRoleCount::Id, (uint8_t *) leaderRoleCount,
                                      sizeof(*leaderRoleCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t leaderRoleCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, LeaderRoleCount::Id, (uint8_t *) &leaderRoleCount,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace LeaderRoleCount

namespace AttachAttemptCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * attachAttemptCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, AttachAttemptCount::Id,
                                      (uint8_t *) attachAttemptCount, sizeof(*attachAttemptCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t attachAttemptCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, AttachAttemptCount::Id,
                                       (uint8_t *) &attachAttemptCount, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AttachAttemptCount

namespace PartitionIdChangeCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * partitionIdChangeCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, PartitionIdChangeCount::Id,
                                      (uint8_t *) partitionIdChangeCount, sizeof(*partitionIdChangeCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t partitionIdChangeCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, PartitionIdChangeCount::Id,
                                       (uint8_t *) &partitionIdChangeCount, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PartitionIdChangeCount

namespace BetterPartitionAttachAttemptCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * betterPartitionAttachAttemptCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, BetterPartitionAttachAttemptCount::Id,
                                      (uint8_t *) betterPartitionAttachAttemptCount, sizeof(*betterPartitionAttachAttemptCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t betterPartitionAttachAttemptCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, BetterPartitionAttachAttemptCount::Id,
                                       (uint8_t *) &betterPartitionAttachAttemptCount, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace BetterPartitionAttachAttemptCount

namespace ParentChangeCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * parentChangeCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, ParentChangeCount::Id, (uint8_t *) parentChangeCount,
                                      sizeof(*parentChangeCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t parentChangeCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, ParentChangeCount::Id,
                                       (uint8_t *) &parentChangeCount, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ParentChangeCount

namespace TxTotalCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txTotalCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxTotalCount::Id, (uint8_t *) txTotalCount,
                                      sizeof(*txTotalCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txTotalCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxTotalCount::Id, (uint8_t *) &txTotalCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxTotalCount

namespace TxUnicastCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txUnicastCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxUnicastCount::Id, (uint8_t *) txUnicastCount,
                                      sizeof(*txUnicastCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txUnicastCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxUnicastCount::Id, (uint8_t *) &txUnicastCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxUnicastCount

namespace TxBroadcastCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txBroadcastCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxBroadcastCount::Id, (uint8_t *) txBroadcastCount,
                                      sizeof(*txBroadcastCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txBroadcastCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxBroadcastCount::Id, (uint8_t *) &txBroadcastCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxBroadcastCount

namespace TxAckRequestedCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txAckRequestedCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxAckRequestedCount::Id,
                                      (uint8_t *) txAckRequestedCount, sizeof(*txAckRequestedCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txAckRequestedCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxAckRequestedCount::Id,
                                       (uint8_t *) &txAckRequestedCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxAckRequestedCount

namespace TxAckedCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txAckedCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxAckedCount::Id, (uint8_t *) txAckedCount,
                                      sizeof(*txAckedCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txAckedCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxAckedCount::Id, (uint8_t *) &txAckedCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxAckedCount

namespace TxNoAckRequestedCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txNoAckRequestedCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxNoAckRequestedCount::Id,
                                      (uint8_t *) txNoAckRequestedCount, sizeof(*txNoAckRequestedCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txNoAckRequestedCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxNoAckRequestedCount::Id,
                                       (uint8_t *) &txNoAckRequestedCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxNoAckRequestedCount

namespace TxDataCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txDataCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxDataCount::Id, (uint8_t *) txDataCount,
                                      sizeof(*txDataCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txDataCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxDataCount::Id, (uint8_t *) &txDataCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxDataCount

namespace TxDataPollCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txDataPollCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxDataPollCount::Id, (uint8_t *) txDataPollCount,
                                      sizeof(*txDataPollCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txDataPollCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxDataPollCount::Id, (uint8_t *) &txDataPollCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxDataPollCount

namespace TxBeaconCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txBeaconCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxBeaconCount::Id, (uint8_t *) txBeaconCount,
                                      sizeof(*txBeaconCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txBeaconCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxBeaconCount::Id, (uint8_t *) &txBeaconCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxBeaconCount

namespace TxBeaconRequestCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txBeaconRequestCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxBeaconRequestCount::Id,
                                      (uint8_t *) txBeaconRequestCount, sizeof(*txBeaconRequestCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txBeaconRequestCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxBeaconRequestCount::Id,
                                       (uint8_t *) &txBeaconRequestCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxBeaconRequestCount

namespace TxOtherCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txOtherCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxOtherCount::Id, (uint8_t *) txOtherCount,
                                      sizeof(*txOtherCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txOtherCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxOtherCount::Id, (uint8_t *) &txOtherCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxOtherCount

namespace TxRetryCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txRetryCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxRetryCount::Id, (uint8_t *) txRetryCount,
                                      sizeof(*txRetryCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txRetryCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxRetryCount::Id, (uint8_t *) &txRetryCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxRetryCount

namespace TxDirectMaxRetryExpiryCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txDirectMaxRetryExpiryCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxDirectMaxRetryExpiryCount::Id,
                                      (uint8_t *) txDirectMaxRetryExpiryCount, sizeof(*txDirectMaxRetryExpiryCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txDirectMaxRetryExpiryCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxDirectMaxRetryExpiryCount::Id,
                                       (uint8_t *) &txDirectMaxRetryExpiryCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxDirectMaxRetryExpiryCount

namespace TxIndirectMaxRetryExpiryCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txIndirectMaxRetryExpiryCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxIndirectMaxRetryExpiryCount::Id,
                                      (uint8_t *) txIndirectMaxRetryExpiryCount, sizeof(*txIndirectMaxRetryExpiryCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txIndirectMaxRetryExpiryCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxIndirectMaxRetryExpiryCount::Id,
                                       (uint8_t *) &txIndirectMaxRetryExpiryCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxIndirectMaxRetryExpiryCount

namespace TxErrCcaCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txErrCcaCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxErrCcaCount::Id, (uint8_t *) txErrCcaCount,
                                      sizeof(*txErrCcaCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txErrCcaCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxErrCcaCount::Id, (uint8_t *) &txErrCcaCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxErrCcaCount

namespace TxErrAbortCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txErrAbortCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxErrAbortCount::Id, (uint8_t *) txErrAbortCount,
                                      sizeof(*txErrAbortCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txErrAbortCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxErrAbortCount::Id, (uint8_t *) &txErrAbortCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxErrAbortCount

namespace TxErrBusyChannelCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * txErrBusyChannelCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxErrBusyChannelCount::Id,
                                      (uint8_t *) txErrBusyChannelCount, sizeof(*txErrBusyChannelCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t txErrBusyChannelCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, TxErrBusyChannelCount::Id,
                                       (uint8_t *) &txErrBusyChannelCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TxErrBusyChannelCount

namespace RxTotalCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxTotalCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxTotalCount::Id, (uint8_t *) rxTotalCount,
                                      sizeof(*rxTotalCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxTotalCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxTotalCount::Id, (uint8_t *) &rxTotalCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxTotalCount

namespace RxUnicastCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxUnicastCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxUnicastCount::Id, (uint8_t *) rxUnicastCount,
                                      sizeof(*rxUnicastCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxUnicastCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxUnicastCount::Id, (uint8_t *) &rxUnicastCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxUnicastCount

namespace RxBroadcastCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxBroadcastCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxBroadcastCount::Id, (uint8_t *) rxBroadcastCount,
                                      sizeof(*rxBroadcastCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxBroadcastCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxBroadcastCount::Id, (uint8_t *) &rxBroadcastCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxBroadcastCount

namespace RxDataCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxDataCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxDataCount::Id, (uint8_t *) rxDataCount,
                                      sizeof(*rxDataCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxDataCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxDataCount::Id, (uint8_t *) &rxDataCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxDataCount

namespace RxDataPollCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxDataPollCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxDataPollCount::Id, (uint8_t *) rxDataPollCount,
                                      sizeof(*rxDataPollCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxDataPollCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxDataPollCount::Id, (uint8_t *) &rxDataPollCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxDataPollCount

namespace RxBeaconCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxBeaconCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxBeaconCount::Id, (uint8_t *) rxBeaconCount,
                                      sizeof(*rxBeaconCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxBeaconCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxBeaconCount::Id, (uint8_t *) &rxBeaconCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxBeaconCount

namespace RxBeaconRequestCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxBeaconRequestCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxBeaconRequestCount::Id,
                                      (uint8_t *) rxBeaconRequestCount, sizeof(*rxBeaconRequestCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxBeaconRequestCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxBeaconRequestCount::Id,
                                       (uint8_t *) &rxBeaconRequestCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxBeaconRequestCount

namespace RxOtherCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxOtherCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxOtherCount::Id, (uint8_t *) rxOtherCount,
                                      sizeof(*rxOtherCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxOtherCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxOtherCount::Id, (uint8_t *) &rxOtherCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxOtherCount

namespace RxAddressFilteredCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxAddressFilteredCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxAddressFilteredCount::Id,
                                      (uint8_t *) rxAddressFilteredCount, sizeof(*rxAddressFilteredCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxAddressFilteredCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxAddressFilteredCount::Id,
                                       (uint8_t *) &rxAddressFilteredCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxAddressFilteredCount

namespace RxDestAddrFilteredCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxDestAddrFilteredCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxDestAddrFilteredCount::Id,
                                      (uint8_t *) rxDestAddrFilteredCount, sizeof(*rxDestAddrFilteredCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxDestAddrFilteredCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxDestAddrFilteredCount::Id,
                                       (uint8_t *) &rxDestAddrFilteredCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxDestAddrFilteredCount

namespace RxDuplicatedCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxDuplicatedCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxDuplicatedCount::Id, (uint8_t *) rxDuplicatedCount,
                                      sizeof(*rxDuplicatedCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxDuplicatedCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxDuplicatedCount::Id,
                                       (uint8_t *) &rxDuplicatedCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxDuplicatedCount

namespace RxErrNoFrameCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxErrNoFrameCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrNoFrameCount::Id, (uint8_t *) rxErrNoFrameCount,
                                      sizeof(*rxErrNoFrameCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxErrNoFrameCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrNoFrameCount::Id,
                                       (uint8_t *) &rxErrNoFrameCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxErrNoFrameCount

namespace RxErrUnknownNeighborCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxErrUnknownNeighborCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrUnknownNeighborCount::Id,
                                      (uint8_t *) rxErrUnknownNeighborCount, sizeof(*rxErrUnknownNeighborCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxErrUnknownNeighborCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrUnknownNeighborCount::Id,
                                       (uint8_t *) &rxErrUnknownNeighborCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxErrUnknownNeighborCount

namespace RxErrInvalidSrcAddrCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxErrInvalidSrcAddrCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrInvalidSrcAddrCount::Id,
                                      (uint8_t *) rxErrInvalidSrcAddrCount, sizeof(*rxErrInvalidSrcAddrCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxErrInvalidSrcAddrCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrInvalidSrcAddrCount::Id,
                                       (uint8_t *) &rxErrInvalidSrcAddrCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxErrInvalidSrcAddrCount

namespace RxErrSecCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxErrSecCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrSecCount::Id, (uint8_t *) rxErrSecCount,
                                      sizeof(*rxErrSecCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxErrSecCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrSecCount::Id, (uint8_t *) &rxErrSecCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxErrSecCount

namespace RxErrFcsCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxErrFcsCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrFcsCount::Id, (uint8_t *) rxErrFcsCount,
                                      sizeof(*rxErrFcsCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxErrFcsCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrFcsCount::Id, (uint8_t *) &rxErrFcsCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxErrFcsCount

namespace RxErrOtherCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * rxErrOtherCount)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrOtherCount::Id, (uint8_t *) rxErrOtherCount,
                                      sizeof(*rxErrOtherCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t rxErrOtherCount)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, RxErrOtherCount::Id, (uint8_t *) &rxErrOtherCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace RxErrOtherCount

namespace ActiveTimestamp {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * activeTimestamp)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, ActiveTimestamp::Id, (uint8_t *) activeTimestamp,
                                      sizeof(*activeTimestamp));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t activeTimestamp)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, ActiveTimestamp::Id, (uint8_t *) &activeTimestamp,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace ActiveTimestamp

namespace PendingTimestamp {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * pendingTimestamp)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, PendingTimestamp::Id, (uint8_t *) pendingTimestamp,
                                      sizeof(*pendingTimestamp));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t pendingTimestamp)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, PendingTimestamp::Id, (uint8_t *) &pendingTimestamp,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace PendingTimestamp

namespace Delay {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * delay)
{
    return emberAfReadServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, Delay::Id, (uint8_t *) delay, sizeof(*delay));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t delay)
{
    return emberAfWriteServerAttribute(endpoint, ThreadNetworkDiagnostics::Id, Delay::Id, (uint8_t *) &delay,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace Delay

} // namespace Attributes
} // namespace ThreadNetworkDiagnostics

namespace WiFiNetworkDiagnostics {
namespace Attributes {

namespace SecurityType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * securityType)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, SecurityType::Id, (uint8_t *) securityType,
                                      sizeof(*securityType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t securityType)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, SecurityType::Id, (uint8_t *) &securityType,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace SecurityType

namespace WiFiVersion {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * wiFiVersion)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, WiFiVersion::Id, (uint8_t *) wiFiVersion,
                                      sizeof(*wiFiVersion));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t wiFiVersion)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, WiFiVersion::Id, (uint8_t *) &wiFiVersion,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace WiFiVersion

namespace ChannelNumber {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * channelNumber)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, ChannelNumber::Id, (uint8_t *) channelNumber,
                                      sizeof(*channelNumber));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t channelNumber)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, ChannelNumber::Id, (uint8_t *) &channelNumber,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ChannelNumber

namespace Rssi {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * rssi)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, Rssi::Id, (uint8_t *) rssi, sizeof(*rssi));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t rssi)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, Rssi::Id, (uint8_t *) &rssi, ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace Rssi

namespace BeaconLostCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * beaconLostCount)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, BeaconLostCount::Id, (uint8_t *) beaconLostCount,
                                      sizeof(*beaconLostCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t beaconLostCount)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, BeaconLostCount::Id, (uint8_t *) &beaconLostCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace BeaconLostCount

namespace BeaconRxCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * beaconRxCount)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, BeaconRxCount::Id, (uint8_t *) beaconRxCount,
                                      sizeof(*beaconRxCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t beaconRxCount)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, BeaconRxCount::Id, (uint8_t *) &beaconRxCount,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace BeaconRxCount

namespace PacketMulticastRxCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * packetMulticastRxCount)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, PacketMulticastRxCount::Id,
                                      (uint8_t *) packetMulticastRxCount, sizeof(*packetMulticastRxCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t packetMulticastRxCount)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, PacketMulticastRxCount::Id,
                                       (uint8_t *) &packetMulticastRxCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace PacketMulticastRxCount

namespace PacketMulticastTxCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * packetMulticastTxCount)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, PacketMulticastTxCount::Id,
                                      (uint8_t *) packetMulticastTxCount, sizeof(*packetMulticastTxCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t packetMulticastTxCount)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, PacketMulticastTxCount::Id,
                                       (uint8_t *) &packetMulticastTxCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace PacketMulticastTxCount

namespace PacketUnicastRxCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * packetUnicastRxCount)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, PacketUnicastRxCount::Id,
                                      (uint8_t *) packetUnicastRxCount, sizeof(*packetUnicastRxCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t packetUnicastRxCount)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, PacketUnicastRxCount::Id,
                                       (uint8_t *) &packetUnicastRxCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace PacketUnicastRxCount

namespace PacketUnicastTxCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * packetUnicastTxCount)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, PacketUnicastTxCount::Id,
                                      (uint8_t *) packetUnicastTxCount, sizeof(*packetUnicastTxCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t packetUnicastTxCount)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, PacketUnicastTxCount::Id,
                                       (uint8_t *) &packetUnicastTxCount, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace PacketUnicastTxCount

namespace CurrentMaxRate {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * currentMaxRate)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, CurrentMaxRate::Id, (uint8_t *) currentMaxRate,
                                      sizeof(*currentMaxRate));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t currentMaxRate)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, CurrentMaxRate::Id, (uint8_t *) &currentMaxRate,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace CurrentMaxRate

namespace OverrunCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * overrunCount)
{
    return emberAfReadServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, OverrunCount::Id, (uint8_t *) overrunCount,
                                      sizeof(*overrunCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t overrunCount)
{
    return emberAfWriteServerAttribute(endpoint, WiFiNetworkDiagnostics::Id, OverrunCount::Id, (uint8_t *) &overrunCount,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace OverrunCount

} // namespace Attributes
} // namespace WiFiNetworkDiagnostics

namespace EthernetNetworkDiagnostics {
namespace Attributes {

namespace PHYRate {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * PHYRate)
{
    return emberAfReadServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, PHYRate::Id, (uint8_t *) PHYRate, sizeof(*PHYRate));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t PHYRate)
{
    return emberAfWriteServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, PHYRate::Id, (uint8_t *) &PHYRate,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace PHYRate

namespace FullDuplex {

EmberAfStatus Get(chip::EndpointId endpoint, bool * fullDuplex)
{
    return emberAfReadServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, FullDuplex::Id, (uint8_t *) fullDuplex,
                                      sizeof(*fullDuplex));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool fullDuplex)
{
    return emberAfWriteServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, FullDuplex::Id, (uint8_t *) &fullDuplex,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace FullDuplex

namespace PacketRxCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * packetRxCount)
{
    return emberAfReadServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, PacketRxCount::Id, (uint8_t *) packetRxCount,
                                      sizeof(*packetRxCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t packetRxCount)
{
    return emberAfWriteServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, PacketRxCount::Id, (uint8_t *) &packetRxCount,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace PacketRxCount

namespace PacketTxCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * packetTxCount)
{
    return emberAfReadServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, PacketTxCount::Id, (uint8_t *) packetTxCount,
                                      sizeof(*packetTxCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t packetTxCount)
{
    return emberAfWriteServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, PacketTxCount::Id, (uint8_t *) &packetTxCount,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace PacketTxCount

namespace TxErrCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * txErrCount)
{
    return emberAfReadServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, TxErrCount::Id, (uint8_t *) txErrCount,
                                      sizeof(*txErrCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t txErrCount)
{
    return emberAfWriteServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, TxErrCount::Id, (uint8_t *) &txErrCount,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace TxErrCount

namespace CollisionCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * collisionCount)
{
    return emberAfReadServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, CollisionCount::Id, (uint8_t *) collisionCount,
                                      sizeof(*collisionCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t collisionCount)
{
    return emberAfWriteServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, CollisionCount::Id, (uint8_t *) &collisionCount,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace CollisionCount

namespace OverrunCount {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * overrunCount)
{
    return emberAfReadServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, OverrunCount::Id, (uint8_t *) overrunCount,
                                      sizeof(*overrunCount));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t overrunCount)
{
    return emberAfWriteServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, OverrunCount::Id, (uint8_t *) &overrunCount,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace OverrunCount

namespace CarrierDetect {

EmberAfStatus Get(chip::EndpointId endpoint, bool * carrierDetect)
{
    return emberAfReadServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, CarrierDetect::Id, (uint8_t *) carrierDetect,
                                      sizeof(*carrierDetect));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool carrierDetect)
{
    return emberAfWriteServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, CarrierDetect::Id, (uint8_t *) &carrierDetect,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace CarrierDetect

namespace TimeSinceReset {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * timeSinceReset)
{
    return emberAfReadServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, TimeSinceReset::Id, (uint8_t *) timeSinceReset,
                                      sizeof(*timeSinceReset));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t timeSinceReset)
{
    return emberAfWriteServerAttribute(endpoint, EthernetNetworkDiagnostics::Id, TimeSinceReset::Id, (uint8_t *) &timeSinceReset,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace TimeSinceReset

} // namespace Attributes
} // namespace EthernetNetworkDiagnostics

namespace BridgedDeviceBasic {
namespace Attributes {

namespace VendorID {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * vendorID)
{
    return emberAfReadServerAttribute(endpoint, BridgedDeviceBasic::Id, VendorID::Id, (uint8_t *) vendorID, sizeof(*vendorID));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t vendorID)
{
    return emberAfWriteServerAttribute(endpoint, BridgedDeviceBasic::Id, VendorID::Id, (uint8_t *) &vendorID,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace VendorID

namespace HardwareVersion {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * hardwareVersion)
{
    return emberAfReadServerAttribute(endpoint, BridgedDeviceBasic::Id, HardwareVersion::Id, (uint8_t *) hardwareVersion,
                                      sizeof(*hardwareVersion));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t hardwareVersion)
{
    return emberAfWriteServerAttribute(endpoint, BridgedDeviceBasic::Id, HardwareVersion::Id, (uint8_t *) &hardwareVersion,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace HardwareVersion

namespace SoftwareVersion {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * softwareVersion)
{
    return emberAfReadServerAttribute(endpoint, BridgedDeviceBasic::Id, SoftwareVersion::Id, (uint8_t *) softwareVersion,
                                      sizeof(*softwareVersion));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t softwareVersion)
{
    return emberAfWriteServerAttribute(endpoint, BridgedDeviceBasic::Id, SoftwareVersion::Id, (uint8_t *) &softwareVersion,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace SoftwareVersion

namespace Reachable {

EmberAfStatus Get(chip::EndpointId endpoint, bool * reachable)
{
    return emberAfReadServerAttribute(endpoint, BridgedDeviceBasic::Id, Reachable::Id, (uint8_t *) reachable, sizeof(*reachable));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool reachable)
{
    return emberAfWriteServerAttribute(endpoint, BridgedDeviceBasic::Id, Reachable::Id, (uint8_t *) &reachable,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace Reachable

} // namespace Attributes
} // namespace BridgedDeviceBasic

namespace Switch {
namespace Attributes {

namespace NumberOfPositions {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * numberOfPositions)
{
    return emberAfReadServerAttribute(endpoint, Switch::Id, NumberOfPositions::Id, (uint8_t *) numberOfPositions,
                                      sizeof(*numberOfPositions));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t numberOfPositions)
{
    return emberAfWriteServerAttribute(endpoint, Switch::Id, NumberOfPositions::Id, (uint8_t *) &numberOfPositions,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace NumberOfPositions

namespace CurrentPosition {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentPosition)
{
    return emberAfReadServerAttribute(endpoint, Switch::Id, CurrentPosition::Id, (uint8_t *) currentPosition,
                                      sizeof(*currentPosition));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentPosition)
{
    return emberAfWriteServerAttribute(endpoint, Switch::Id, CurrentPosition::Id, (uint8_t *) &currentPosition,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentPosition

namespace MultiPressMax {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * multiPressMax)
{
    return emberAfReadServerAttribute(endpoint, Switch::Id, MultiPressMax::Id, (uint8_t *) multiPressMax, sizeof(*multiPressMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t multiPressMax)
{
    return emberAfWriteServerAttribute(endpoint, Switch::Id, MultiPressMax::Id, (uint8_t *) &multiPressMax,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace MultiPressMax

} // namespace Attributes
} // namespace Switch

namespace OperationalCredentials {
namespace Attributes {

namespace SupportedFabrics {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * supportedFabrics)
{
    return emberAfReadServerAttribute(endpoint, OperationalCredentials::Id, SupportedFabrics::Id, (uint8_t *) supportedFabrics,
                                      sizeof(*supportedFabrics));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t supportedFabrics)
{
    return emberAfWriteServerAttribute(endpoint, OperationalCredentials::Id, SupportedFabrics::Id, (uint8_t *) &supportedFabrics,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace SupportedFabrics

namespace CommissionedFabrics {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * commissionedFabrics)
{
    return emberAfReadServerAttribute(endpoint, OperationalCredentials::Id, CommissionedFabrics::Id,
                                      (uint8_t *) commissionedFabrics, sizeof(*commissionedFabrics));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t commissionedFabrics)
{
    return emberAfWriteServerAttribute(endpoint, OperationalCredentials::Id, CommissionedFabrics::Id,
                                       (uint8_t *) &commissionedFabrics, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CommissionedFabrics

} // namespace Attributes
} // namespace OperationalCredentials

namespace FixedLabel {
namespace Attributes {

} // namespace Attributes
} // namespace FixedLabel

namespace ShadeConfiguration {
namespace Attributes {

namespace PhysicalClosedLimit {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * physicalClosedLimit)
{
    return emberAfReadServerAttribute(endpoint, ShadeConfiguration::Id, PhysicalClosedLimit::Id, (uint8_t *) physicalClosedLimit,
                                      sizeof(*physicalClosedLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t physicalClosedLimit)
{
    return emberAfWriteServerAttribute(endpoint, ShadeConfiguration::Id, PhysicalClosedLimit::Id, (uint8_t *) &physicalClosedLimit,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PhysicalClosedLimit

namespace MotorStepSize {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * motorStepSize)
{
    return emberAfReadServerAttribute(endpoint, ShadeConfiguration::Id, MotorStepSize::Id, (uint8_t *) motorStepSize,
                                      sizeof(*motorStepSize));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t motorStepSize)
{
    return emberAfWriteServerAttribute(endpoint, ShadeConfiguration::Id, MotorStepSize::Id, (uint8_t *) &motorStepSize,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace MotorStepSize

namespace Status {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * status)
{
    return emberAfReadServerAttribute(endpoint, ShadeConfiguration::Id, Status::Id, (uint8_t *) status, sizeof(*status));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t status)
{
    return emberAfWriteServerAttribute(endpoint, ShadeConfiguration::Id, Status::Id, (uint8_t *) &status,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace Status

namespace ClosedLimit {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * closedLimit)
{
    return emberAfReadServerAttribute(endpoint, ShadeConfiguration::Id, ClosedLimit::Id, (uint8_t *) closedLimit,
                                      sizeof(*closedLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t closedLimit)
{
    return emberAfWriteServerAttribute(endpoint, ShadeConfiguration::Id, ClosedLimit::Id, (uint8_t *) &closedLimit,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ClosedLimit

namespace Mode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * mode)
{
    return emberAfReadServerAttribute(endpoint, ShadeConfiguration::Id, Mode::Id, (uint8_t *) mode, sizeof(*mode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t mode)
{
    return emberAfWriteServerAttribute(endpoint, ShadeConfiguration::Id, Mode::Id, (uint8_t *) &mode, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace Mode

} // namespace Attributes
} // namespace ShadeConfiguration

namespace DoorLock {
namespace Attributes {

namespace LockState {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * lockState)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, LockState::Id, (uint8_t *) lockState, sizeof(*lockState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t lockState)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, LockState::Id, (uint8_t *) &lockState, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace LockState

namespace LockType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * lockType)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, LockType::Id, (uint8_t *) lockType, sizeof(*lockType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t lockType)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, LockType::Id, (uint8_t *) &lockType, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace LockType

namespace ActuatorEnabled {

EmberAfStatus Get(chip::EndpointId endpoint, bool * actuatorEnabled)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, ActuatorEnabled::Id, (uint8_t *) actuatorEnabled,
                                      sizeof(*actuatorEnabled));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool actuatorEnabled)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, ActuatorEnabled::Id, (uint8_t *) &actuatorEnabled,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace ActuatorEnabled

namespace DoorState {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * doorState)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, DoorState::Id, (uint8_t *) doorState, sizeof(*doorState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t doorState)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, DoorState::Id, (uint8_t *) &doorState, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace DoorState

namespace DoorOpenEvents {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * doorOpenEvents)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, DoorOpenEvents::Id, (uint8_t *) doorOpenEvents,
                                      sizeof(*doorOpenEvents));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t doorOpenEvents)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, DoorOpenEvents::Id, (uint8_t *) &doorOpenEvents,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace DoorOpenEvents

namespace DoorClosedEvents {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * doorClosedEvents)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, DoorClosedEvents::Id, (uint8_t *) doorClosedEvents,
                                      sizeof(*doorClosedEvents));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t doorClosedEvents)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, DoorClosedEvents::Id, (uint8_t *) &doorClosedEvents,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace DoorClosedEvents

namespace OpenPeriod {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * openPeriod)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, OpenPeriod::Id, (uint8_t *) openPeriod, sizeof(*openPeriod));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t openPeriod)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, OpenPeriod::Id, (uint8_t *) &openPeriod, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace OpenPeriod

namespace NumLockRecordsSupported {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * numLockRecordsSupported)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, NumLockRecordsSupported::Id, (uint8_t *) numLockRecordsSupported,
                                      sizeof(*numLockRecordsSupported));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t numLockRecordsSupported)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, NumLockRecordsSupported::Id, (uint8_t *) &numLockRecordsSupported,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace NumLockRecordsSupported

namespace NumTotalUsersSupported {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * numTotalUsersSupported)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, NumTotalUsersSupported::Id, (uint8_t *) numTotalUsersSupported,
                                      sizeof(*numTotalUsersSupported));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t numTotalUsersSupported)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, NumTotalUsersSupported::Id, (uint8_t *) &numTotalUsersSupported,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace NumTotalUsersSupported

namespace NumPinUsersSupported {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * numPinUsersSupported)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, NumPinUsersSupported::Id, (uint8_t *) numPinUsersSupported,
                                      sizeof(*numPinUsersSupported));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t numPinUsersSupported)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, NumPinUsersSupported::Id, (uint8_t *) &numPinUsersSupported,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace NumPinUsersSupported

namespace NumRfidUsersSupported {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * numRfidUsersSupported)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, NumRfidUsersSupported::Id, (uint8_t *) numRfidUsersSupported,
                                      sizeof(*numRfidUsersSupported));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t numRfidUsersSupported)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, NumRfidUsersSupported::Id, (uint8_t *) &numRfidUsersSupported,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace NumRfidUsersSupported

namespace NumWeekdaySchedulesSupportedPerUser {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * numWeekdaySchedulesSupportedPerUser)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, NumWeekdaySchedulesSupportedPerUser::Id,
                                      (uint8_t *) numWeekdaySchedulesSupportedPerUser,
                                      sizeof(*numWeekdaySchedulesSupportedPerUser));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t numWeekdaySchedulesSupportedPerUser)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, NumWeekdaySchedulesSupportedPerUser::Id,
                                       (uint8_t *) &numWeekdaySchedulesSupportedPerUser, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace NumWeekdaySchedulesSupportedPerUser

namespace NumYeardaySchedulesSupportedPerUser {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * numYeardaySchedulesSupportedPerUser)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, NumYeardaySchedulesSupportedPerUser::Id,
                                      (uint8_t *) numYeardaySchedulesSupportedPerUser,
                                      sizeof(*numYeardaySchedulesSupportedPerUser));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t numYeardaySchedulesSupportedPerUser)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, NumYeardaySchedulesSupportedPerUser::Id,
                                       (uint8_t *) &numYeardaySchedulesSupportedPerUser, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace NumYeardaySchedulesSupportedPerUser

namespace NumHolidaySchedulesSupportedPerUser {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * numHolidaySchedulesSupportedPerUser)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, NumHolidaySchedulesSupportedPerUser::Id,
                                      (uint8_t *) numHolidaySchedulesSupportedPerUser,
                                      sizeof(*numHolidaySchedulesSupportedPerUser));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t numHolidaySchedulesSupportedPerUser)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, NumHolidaySchedulesSupportedPerUser::Id,
                                       (uint8_t *) &numHolidaySchedulesSupportedPerUser, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace NumHolidaySchedulesSupportedPerUser

namespace MaxPinLength {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * maxPinLength)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, MaxPinLength::Id, (uint8_t *) maxPinLength, sizeof(*maxPinLength));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t maxPinLength)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, MaxPinLength::Id, (uint8_t *) &maxPinLength,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace MaxPinLength

namespace MinPinLength {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * minPinLength)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, MinPinLength::Id, (uint8_t *) minPinLength, sizeof(*minPinLength));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t minPinLength)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, MinPinLength::Id, (uint8_t *) &minPinLength,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace MinPinLength

namespace MaxRfidCodeLength {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * maxRfidCodeLength)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, MaxRfidCodeLength::Id, (uint8_t *) maxRfidCodeLength,
                                      sizeof(*maxRfidCodeLength));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t maxRfidCodeLength)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, MaxRfidCodeLength::Id, (uint8_t *) &maxRfidCodeLength,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace MaxRfidCodeLength

namespace MinRfidCodeLength {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * minRfidCodeLength)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, MinRfidCodeLength::Id, (uint8_t *) minRfidCodeLength,
                                      sizeof(*minRfidCodeLength));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t minRfidCodeLength)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, MinRfidCodeLength::Id, (uint8_t *) &minRfidCodeLength,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace MinRfidCodeLength

namespace EnableLogging {

EmberAfStatus Get(chip::EndpointId endpoint, bool * enableLogging)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, EnableLogging::Id, (uint8_t *) enableLogging, sizeof(*enableLogging));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool enableLogging)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, EnableLogging::Id, (uint8_t *) &enableLogging,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace EnableLogging

namespace LedSettings {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * ledSettings)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, LedSettings::Id, (uint8_t *) ledSettings, sizeof(*ledSettings));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t ledSettings)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, LedSettings::Id, (uint8_t *) &ledSettings, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace LedSettings

namespace AutoRelockTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * autoRelockTime)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, AutoRelockTime::Id, (uint8_t *) autoRelockTime,
                                      sizeof(*autoRelockTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t autoRelockTime)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, AutoRelockTime::Id, (uint8_t *) &autoRelockTime,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace AutoRelockTime

namespace SoundVolume {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * soundVolume)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, SoundVolume::Id, (uint8_t *) soundVolume, sizeof(*soundVolume));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t soundVolume)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, SoundVolume::Id, (uint8_t *) &soundVolume, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace SoundVolume

namespace OperatingMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * operatingMode)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, OperatingMode::Id, (uint8_t *) operatingMode, sizeof(*operatingMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t operatingMode)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, OperatingMode::Id, (uint8_t *) &operatingMode,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace OperatingMode

namespace SupportedOperatingModes {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * supportedOperatingModes)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, SupportedOperatingModes::Id, (uint8_t *) supportedOperatingModes,
                                      sizeof(*supportedOperatingModes));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t supportedOperatingModes)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, SupportedOperatingModes::Id, (uint8_t *) &supportedOperatingModes,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace SupportedOperatingModes

namespace DefaultConfigurationRegister {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * defaultConfigurationRegister)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, DefaultConfigurationRegister::Id,
                                      (uint8_t *) defaultConfigurationRegister, sizeof(*defaultConfigurationRegister));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t defaultConfigurationRegister)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, DefaultConfigurationRegister::Id,
                                       (uint8_t *) &defaultConfigurationRegister, ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace DefaultConfigurationRegister

namespace EnableLocalProgramming {

EmberAfStatus Get(chip::EndpointId endpoint, bool * enableLocalProgramming)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, EnableLocalProgramming::Id, (uint8_t *) enableLocalProgramming,
                                      sizeof(*enableLocalProgramming));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool enableLocalProgramming)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, EnableLocalProgramming::Id, (uint8_t *) &enableLocalProgramming,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace EnableLocalProgramming

namespace EnableOneTouchLocking {

EmberAfStatus Get(chip::EndpointId endpoint, bool * enableOneTouchLocking)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, EnableOneTouchLocking::Id, (uint8_t *) enableOneTouchLocking,
                                      sizeof(*enableOneTouchLocking));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool enableOneTouchLocking)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, EnableOneTouchLocking::Id, (uint8_t *) &enableOneTouchLocking,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace EnableOneTouchLocking

namespace EnableInsideStatusLed {

EmberAfStatus Get(chip::EndpointId endpoint, bool * enableInsideStatusLed)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, EnableInsideStatusLed::Id, (uint8_t *) enableInsideStatusLed,
                                      sizeof(*enableInsideStatusLed));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool enableInsideStatusLed)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, EnableInsideStatusLed::Id, (uint8_t *) &enableInsideStatusLed,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace EnableInsideStatusLed

namespace EnablePrivacyModeButton {

EmberAfStatus Get(chip::EndpointId endpoint, bool * enablePrivacyModeButton)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, EnablePrivacyModeButton::Id, (uint8_t *) enablePrivacyModeButton,
                                      sizeof(*enablePrivacyModeButton));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool enablePrivacyModeButton)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, EnablePrivacyModeButton::Id, (uint8_t *) &enablePrivacyModeButton,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace EnablePrivacyModeButton

namespace WrongCodeEntryLimit {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * wrongCodeEntryLimit)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, WrongCodeEntryLimit::Id, (uint8_t *) wrongCodeEntryLimit,
                                      sizeof(*wrongCodeEntryLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t wrongCodeEntryLimit)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, WrongCodeEntryLimit::Id, (uint8_t *) &wrongCodeEntryLimit,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace WrongCodeEntryLimit

namespace UserCodeTemporaryDisableTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * userCodeTemporaryDisableTime)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, UserCodeTemporaryDisableTime::Id,
                                      (uint8_t *) userCodeTemporaryDisableTime, sizeof(*userCodeTemporaryDisableTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t userCodeTemporaryDisableTime)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, UserCodeTemporaryDisableTime::Id,
                                       (uint8_t *) &userCodeTemporaryDisableTime, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace UserCodeTemporaryDisableTime

namespace SendPinOverTheAir {

EmberAfStatus Get(chip::EndpointId endpoint, bool * sendPinOverTheAir)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, SendPinOverTheAir::Id, (uint8_t *) sendPinOverTheAir,
                                      sizeof(*sendPinOverTheAir));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool sendPinOverTheAir)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, SendPinOverTheAir::Id, (uint8_t *) &sendPinOverTheAir,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace SendPinOverTheAir

namespace RequirePinForRfOperation {

EmberAfStatus Get(chip::EndpointId endpoint, bool * requirePinForRfOperation)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, RequirePinForRfOperation::Id, (uint8_t *) requirePinForRfOperation,
                                      sizeof(*requirePinForRfOperation));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool requirePinForRfOperation)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, RequirePinForRfOperation::Id, (uint8_t *) &requirePinForRfOperation,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace RequirePinForRfOperation

namespace ZigbeeSecurityLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * zigbeeSecurityLevel)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, ZigbeeSecurityLevel::Id, (uint8_t *) zigbeeSecurityLevel,
                                      sizeof(*zigbeeSecurityLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t zigbeeSecurityLevel)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, ZigbeeSecurityLevel::Id, (uint8_t *) &zigbeeSecurityLevel,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace ZigbeeSecurityLevel

namespace AlarmMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * alarmMask)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, AlarmMask::Id, (uint8_t *) alarmMask, sizeof(*alarmMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t alarmMask)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, AlarmMask::Id, (uint8_t *) &alarmMask, ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace AlarmMask

namespace KeypadOperationEventMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * keypadOperationEventMask)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, KeypadOperationEventMask::Id, (uint8_t *) keypadOperationEventMask,
                                      sizeof(*keypadOperationEventMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t keypadOperationEventMask)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, KeypadOperationEventMask::Id, (uint8_t *) &keypadOperationEventMask,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace KeypadOperationEventMask

namespace RfOperationEventMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rfOperationEventMask)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, RfOperationEventMask::Id, (uint8_t *) rfOperationEventMask,
                                      sizeof(*rfOperationEventMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rfOperationEventMask)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, RfOperationEventMask::Id, (uint8_t *) &rfOperationEventMask,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace RfOperationEventMask

namespace ManualOperationEventMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * manualOperationEventMask)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, ManualOperationEventMask::Id, (uint8_t *) manualOperationEventMask,
                                      sizeof(*manualOperationEventMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t manualOperationEventMask)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, ManualOperationEventMask::Id, (uint8_t *) &manualOperationEventMask,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace ManualOperationEventMask

namespace RfidOperationEventMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rfidOperationEventMask)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, RfidOperationEventMask::Id, (uint8_t *) rfidOperationEventMask,
                                      sizeof(*rfidOperationEventMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rfidOperationEventMask)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, RfidOperationEventMask::Id, (uint8_t *) &rfidOperationEventMask,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace RfidOperationEventMask

namespace KeypadProgrammingEventMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * keypadProgrammingEventMask)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, KeypadProgrammingEventMask::Id,
                                      (uint8_t *) keypadProgrammingEventMask, sizeof(*keypadProgrammingEventMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t keypadProgrammingEventMask)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, KeypadProgrammingEventMask::Id,
                                       (uint8_t *) &keypadProgrammingEventMask, ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace KeypadProgrammingEventMask

namespace RfProgrammingEventMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rfProgrammingEventMask)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, RfProgrammingEventMask::Id, (uint8_t *) rfProgrammingEventMask,
                                      sizeof(*rfProgrammingEventMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rfProgrammingEventMask)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, RfProgrammingEventMask::Id, (uint8_t *) &rfProgrammingEventMask,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace RfProgrammingEventMask

namespace RfidProgrammingEventMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rfidProgrammingEventMask)
{
    return emberAfReadServerAttribute(endpoint, DoorLock::Id, RfidProgrammingEventMask::Id, (uint8_t *) rfidProgrammingEventMask,
                                      sizeof(*rfidProgrammingEventMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rfidProgrammingEventMask)
{
    return emberAfWriteServerAttribute(endpoint, DoorLock::Id, RfidProgrammingEventMask::Id, (uint8_t *) &rfidProgrammingEventMask,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace RfidProgrammingEventMask

} // namespace Attributes
} // namespace DoorLock

namespace WindowCovering {
namespace Attributes {

namespace Type {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * type)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, Type::Id, (uint8_t *) type, sizeof(*type));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t type)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, Type::Id, (uint8_t *) &type, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace Type

namespace PhysicalClosedLimitLift {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * physicalClosedLimitLift)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, PhysicalClosedLimitLift::Id,
                                      (uint8_t *) physicalClosedLimitLift, sizeof(*physicalClosedLimitLift));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t physicalClosedLimitLift)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, PhysicalClosedLimitLift::Id,
                                       (uint8_t *) &physicalClosedLimitLift, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PhysicalClosedLimitLift

namespace PhysicalClosedLimitTilt {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * physicalClosedLimitTilt)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, PhysicalClosedLimitTilt::Id,
                                      (uint8_t *) physicalClosedLimitTilt, sizeof(*physicalClosedLimitTilt));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t physicalClosedLimitTilt)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, PhysicalClosedLimitTilt::Id,
                                       (uint8_t *) &physicalClosedLimitTilt, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PhysicalClosedLimitTilt

namespace CurrentPositionLift {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * currentPositionLift)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, CurrentPositionLift::Id, (uint8_t *) currentPositionLift,
                                      sizeof(*currentPositionLift));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t currentPositionLift)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, CurrentPositionLift::Id, (uint8_t *) &currentPositionLift,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CurrentPositionLift

namespace CurrentPositionTilt {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * currentPositionTilt)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, CurrentPositionTilt::Id, (uint8_t *) currentPositionTilt,
                                      sizeof(*currentPositionTilt));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t currentPositionTilt)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, CurrentPositionTilt::Id, (uint8_t *) &currentPositionTilt,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CurrentPositionTilt

namespace NumberOfActuationsLift {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * numberOfActuationsLift)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, NumberOfActuationsLift::Id, (uint8_t *) numberOfActuationsLift,
                                      sizeof(*numberOfActuationsLift));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t numberOfActuationsLift)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, NumberOfActuationsLift::Id,
                                       (uint8_t *) &numberOfActuationsLift, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace NumberOfActuationsLift

namespace NumberOfActuationsTilt {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * numberOfActuationsTilt)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, NumberOfActuationsTilt::Id, (uint8_t *) numberOfActuationsTilt,
                                      sizeof(*numberOfActuationsTilt));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t numberOfActuationsTilt)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, NumberOfActuationsTilt::Id,
                                       (uint8_t *) &numberOfActuationsTilt, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace NumberOfActuationsTilt

namespace ConfigStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * configStatus)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, ConfigStatus::Id, (uint8_t *) configStatus,
                                      sizeof(*configStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t configStatus)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, ConfigStatus::Id, (uint8_t *) &configStatus,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace ConfigStatus

namespace CurrentPositionLiftPercentage {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentPositionLiftPercentage)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, CurrentPositionLiftPercentage::Id,
                                      (uint8_t *) currentPositionLiftPercentage, sizeof(*currentPositionLiftPercentage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentPositionLiftPercentage)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, CurrentPositionLiftPercentage::Id,
                                       (uint8_t *) &currentPositionLiftPercentage, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentPositionLiftPercentage

namespace CurrentPositionTiltPercentage {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentPositionTiltPercentage)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, CurrentPositionTiltPercentage::Id,
                                      (uint8_t *) currentPositionTiltPercentage, sizeof(*currentPositionTiltPercentage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentPositionTiltPercentage)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, CurrentPositionTiltPercentage::Id,
                                       (uint8_t *) &currentPositionTiltPercentage, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentPositionTiltPercentage

namespace OperationalStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * operationalStatus)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, OperationalStatus::Id, (uint8_t *) operationalStatus,
                                      sizeof(*operationalStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t operationalStatus)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, OperationalStatus::Id, (uint8_t *) &operationalStatus,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace OperationalStatus

namespace TargetPositionLiftPercent100ths {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * targetPositionLiftPercent100ths)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, TargetPositionLiftPercent100ths::Id,
                                      (uint8_t *) targetPositionLiftPercent100ths, sizeof(*targetPositionLiftPercent100ths));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t targetPositionLiftPercent100ths)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, TargetPositionLiftPercent100ths::Id,
                                       (uint8_t *) &targetPositionLiftPercent100ths, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace TargetPositionLiftPercent100ths

namespace TargetPositionTiltPercent100ths {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * targetPositionTiltPercent100ths)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, TargetPositionTiltPercent100ths::Id,
                                      (uint8_t *) targetPositionTiltPercent100ths, sizeof(*targetPositionTiltPercent100ths));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t targetPositionTiltPercent100ths)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, TargetPositionTiltPercent100ths::Id,
                                       (uint8_t *) &targetPositionTiltPercent100ths, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace TargetPositionTiltPercent100ths

namespace EndProductType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * endProductType)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, EndProductType::Id, (uint8_t *) endProductType,
                                      sizeof(*endProductType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t endProductType)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, EndProductType::Id, (uint8_t *) &endProductType,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace EndProductType

namespace CurrentPositionLiftPercent100ths {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * currentPositionLiftPercent100ths)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, CurrentPositionLiftPercent100ths::Id,
                                      (uint8_t *) currentPositionLiftPercent100ths, sizeof(*currentPositionLiftPercent100ths));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t currentPositionLiftPercent100ths)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, CurrentPositionLiftPercent100ths::Id,
                                       (uint8_t *) &currentPositionLiftPercent100ths, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CurrentPositionLiftPercent100ths

namespace CurrentPositionTiltPercent100ths {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * currentPositionTiltPercent100ths)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, CurrentPositionTiltPercent100ths::Id,
                                      (uint8_t *) currentPositionTiltPercent100ths, sizeof(*currentPositionTiltPercent100ths));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t currentPositionTiltPercent100ths)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, CurrentPositionTiltPercent100ths::Id,
                                       (uint8_t *) &currentPositionTiltPercent100ths, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CurrentPositionTiltPercent100ths

namespace InstalledOpenLimitLift {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * installedOpenLimitLift)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, InstalledOpenLimitLift::Id, (uint8_t *) installedOpenLimitLift,
                                      sizeof(*installedOpenLimitLift));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t installedOpenLimitLift)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, InstalledOpenLimitLift::Id,
                                       (uint8_t *) &installedOpenLimitLift, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace InstalledOpenLimitLift

namespace InstalledClosedLimitLift {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * installedClosedLimitLift)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, InstalledClosedLimitLift::Id,
                                      (uint8_t *) installedClosedLimitLift, sizeof(*installedClosedLimitLift));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t installedClosedLimitLift)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, InstalledClosedLimitLift::Id,
                                       (uint8_t *) &installedClosedLimitLift, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace InstalledClosedLimitLift

namespace InstalledOpenLimitTilt {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * installedOpenLimitTilt)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, InstalledOpenLimitTilt::Id, (uint8_t *) installedOpenLimitTilt,
                                      sizeof(*installedOpenLimitTilt));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t installedOpenLimitTilt)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, InstalledOpenLimitTilt::Id,
                                       (uint8_t *) &installedOpenLimitTilt, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace InstalledOpenLimitTilt

namespace InstalledClosedLimitTilt {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * installedClosedLimitTilt)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, InstalledClosedLimitTilt::Id,
                                      (uint8_t *) installedClosedLimitTilt, sizeof(*installedClosedLimitTilt));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t installedClosedLimitTilt)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, InstalledClosedLimitTilt::Id,
                                       (uint8_t *) &installedClosedLimitTilt, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace InstalledClosedLimitTilt

namespace VelocityLift {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * velocityLift)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, VelocityLift::Id, (uint8_t *) velocityLift,
                                      sizeof(*velocityLift));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t velocityLift)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, VelocityLift::Id, (uint8_t *) &velocityLift,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace VelocityLift

namespace AccelerationTimeLift {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * accelerationTimeLift)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, AccelerationTimeLift::Id, (uint8_t *) accelerationTimeLift,
                                      sizeof(*accelerationTimeLift));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t accelerationTimeLift)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, AccelerationTimeLift::Id, (uint8_t *) &accelerationTimeLift,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AccelerationTimeLift

namespace DecelerationTimeLift {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * decelerationTimeLift)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, DecelerationTimeLift::Id, (uint8_t *) decelerationTimeLift,
                                      sizeof(*decelerationTimeLift));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t decelerationTimeLift)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, DecelerationTimeLift::Id, (uint8_t *) &decelerationTimeLift,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace DecelerationTimeLift

namespace Mode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * mode)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, Mode::Id, (uint8_t *) mode, sizeof(*mode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t mode)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, Mode::Id, (uint8_t *) &mode, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace Mode

namespace SafetyStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * safetyStatus)
{
    return emberAfReadServerAttribute(endpoint, WindowCovering::Id, SafetyStatus::Id, (uint8_t *) safetyStatus,
                                      sizeof(*safetyStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t safetyStatus)
{
    return emberAfWriteServerAttribute(endpoint, WindowCovering::Id, SafetyStatus::Id, (uint8_t *) &safetyStatus,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace SafetyStatus

} // namespace Attributes
} // namespace WindowCovering

namespace BarrierControl {
namespace Attributes {

namespace BarrierMovingState {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * barrierMovingState)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierMovingState::Id, (uint8_t *) barrierMovingState,
                                      sizeof(*barrierMovingState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t barrierMovingState)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierMovingState::Id, (uint8_t *) &barrierMovingState,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace BarrierMovingState

namespace BarrierSafetyStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * barrierSafetyStatus)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierSafetyStatus::Id, (uint8_t *) barrierSafetyStatus,
                                      sizeof(*barrierSafetyStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t barrierSafetyStatus)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierSafetyStatus::Id, (uint8_t *) &barrierSafetyStatus,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace BarrierSafetyStatus

namespace BarrierCapabilities {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * barrierCapabilities)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierCapabilities::Id, (uint8_t *) barrierCapabilities,
                                      sizeof(*barrierCapabilities));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t barrierCapabilities)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierCapabilities::Id, (uint8_t *) &barrierCapabilities,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace BarrierCapabilities

namespace BarrierOpenEvents {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * barrierOpenEvents)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierOpenEvents::Id, (uint8_t *) barrierOpenEvents,
                                      sizeof(*barrierOpenEvents));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t barrierOpenEvents)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierOpenEvents::Id, (uint8_t *) &barrierOpenEvents,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace BarrierOpenEvents

namespace BarrierCloseEvents {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * barrierCloseEvents)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierCloseEvents::Id, (uint8_t *) barrierCloseEvents,
                                      sizeof(*barrierCloseEvents));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t barrierCloseEvents)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierCloseEvents::Id, (uint8_t *) &barrierCloseEvents,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace BarrierCloseEvents

namespace BarrierCommandOpenEvents {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * barrierCommandOpenEvents)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierCommandOpenEvents::Id,
                                      (uint8_t *) barrierCommandOpenEvents, sizeof(*barrierCommandOpenEvents));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t barrierCommandOpenEvents)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierCommandOpenEvents::Id,
                                       (uint8_t *) &barrierCommandOpenEvents, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace BarrierCommandOpenEvents

namespace BarrierCommandCloseEvents {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * barrierCommandCloseEvents)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierCommandCloseEvents::Id,
                                      (uint8_t *) barrierCommandCloseEvents, sizeof(*barrierCommandCloseEvents));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t barrierCommandCloseEvents)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierCommandCloseEvents::Id,
                                       (uint8_t *) &barrierCommandCloseEvents, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace BarrierCommandCloseEvents

namespace BarrierOpenPeriod {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * barrierOpenPeriod)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierOpenPeriod::Id, (uint8_t *) barrierOpenPeriod,
                                      sizeof(*barrierOpenPeriod));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t barrierOpenPeriod)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierOpenPeriod::Id, (uint8_t *) &barrierOpenPeriod,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace BarrierOpenPeriod

namespace BarrierClosePeriod {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * barrierClosePeriod)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierClosePeriod::Id, (uint8_t *) barrierClosePeriod,
                                      sizeof(*barrierClosePeriod));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t barrierClosePeriod)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierClosePeriod::Id, (uint8_t *) &barrierClosePeriod,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace BarrierClosePeriod

namespace BarrierPosition {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * barrierPosition)
{
    return emberAfReadServerAttribute(endpoint, BarrierControl::Id, BarrierPosition::Id, (uint8_t *) barrierPosition,
                                      sizeof(*barrierPosition));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t barrierPosition)
{
    return emberAfWriteServerAttribute(endpoint, BarrierControl::Id, BarrierPosition::Id, (uint8_t *) &barrierPosition,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BarrierPosition

} // namespace Attributes
} // namespace BarrierControl

namespace PumpConfigurationAndControl {
namespace Attributes {

namespace MaxPressure {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxPressure)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxPressure::Id, (uint8_t *) maxPressure,
                                      sizeof(*maxPressure));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxPressure)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxPressure::Id, (uint8_t *) &maxPressure,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxPressure

namespace MaxSpeed {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * maxSpeed)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxSpeed::Id, (uint8_t *) maxSpeed,
                                      sizeof(*maxSpeed));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t maxSpeed)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxSpeed::Id, (uint8_t *) &maxSpeed,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MaxSpeed

namespace MaxFlow {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * maxFlow)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxFlow::Id, (uint8_t *) maxFlow,
                                      sizeof(*maxFlow));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t maxFlow)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxFlow::Id, (uint8_t *) &maxFlow,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MaxFlow

namespace MinConstPressure {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minConstPressure)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinConstPressure::Id, (uint8_t *) minConstPressure,
                                      sizeof(*minConstPressure));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minConstPressure)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinConstPressure::Id,
                                       (uint8_t *) &minConstPressure, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinConstPressure

namespace MaxConstPressure {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxConstPressure)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxConstPressure::Id, (uint8_t *) maxConstPressure,
                                      sizeof(*maxConstPressure));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxConstPressure)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxConstPressure::Id,
                                       (uint8_t *) &maxConstPressure, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxConstPressure

namespace MinCompPressure {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minCompPressure)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinCompPressure::Id, (uint8_t *) minCompPressure,
                                      sizeof(*minCompPressure));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minCompPressure)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinCompPressure::Id, (uint8_t *) &minCompPressure,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinCompPressure

namespace MaxCompPressure {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxCompPressure)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxCompPressure::Id, (uint8_t *) maxCompPressure,
                                      sizeof(*maxCompPressure));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxCompPressure)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxCompPressure::Id, (uint8_t *) &maxCompPressure,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxCompPressure

namespace MinConstSpeed {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * minConstSpeed)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinConstSpeed::Id, (uint8_t *) minConstSpeed,
                                      sizeof(*minConstSpeed));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t minConstSpeed)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinConstSpeed::Id, (uint8_t *) &minConstSpeed,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MinConstSpeed

namespace MaxConstSpeed {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * maxConstSpeed)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxConstSpeed::Id, (uint8_t *) maxConstSpeed,
                                      sizeof(*maxConstSpeed));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t maxConstSpeed)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxConstSpeed::Id, (uint8_t *) &maxConstSpeed,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MaxConstSpeed

namespace MinConstFlow {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * minConstFlow)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinConstFlow::Id, (uint8_t *) minConstFlow,
                                      sizeof(*minConstFlow));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t minConstFlow)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinConstFlow::Id, (uint8_t *) &minConstFlow,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MinConstFlow

namespace MaxConstFlow {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * maxConstFlow)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxConstFlow::Id, (uint8_t *) maxConstFlow,
                                      sizeof(*maxConstFlow));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t maxConstFlow)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxConstFlow::Id, (uint8_t *) &maxConstFlow,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MaxConstFlow

namespace MinConstTemp {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minConstTemp)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinConstTemp::Id, (uint8_t *) minConstTemp,
                                      sizeof(*minConstTemp));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minConstTemp)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MinConstTemp::Id, (uint8_t *) &minConstTemp,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinConstTemp

namespace MaxConstTemp {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxConstTemp)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxConstTemp::Id, (uint8_t *) maxConstTemp,
                                      sizeof(*maxConstTemp));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxConstTemp)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, MaxConstTemp::Id, (uint8_t *) &maxConstTemp,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxConstTemp

namespace PumpStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * pumpStatus)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, PumpStatus::Id, (uint8_t *) pumpStatus,
                                      sizeof(*pumpStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t pumpStatus)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, PumpStatus::Id, (uint8_t *) &pumpStatus,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace PumpStatus

namespace EffectiveOperationMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * effectiveOperationMode)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, EffectiveOperationMode::Id,
                                      (uint8_t *) effectiveOperationMode, sizeof(*effectiveOperationMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t effectiveOperationMode)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, EffectiveOperationMode::Id,
                                       (uint8_t *) &effectiveOperationMode, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace EffectiveOperationMode

namespace EffectiveControlMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * effectiveControlMode)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, EffectiveControlMode::Id,
                                      (uint8_t *) effectiveControlMode, sizeof(*effectiveControlMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t effectiveControlMode)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, EffectiveControlMode::Id,
                                       (uint8_t *) &effectiveControlMode, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace EffectiveControlMode

namespace Capacity {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * capacity)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, Capacity::Id, (uint8_t *) capacity,
                                      sizeof(*capacity));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t capacity)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, Capacity::Id, (uint8_t *) &capacity,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace Capacity

namespace Speed {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * speed)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, Speed::Id, (uint8_t *) speed, sizeof(*speed));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t speed)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, Speed::Id, (uint8_t *) &speed,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Speed

namespace LifetimeEnergyConsumed {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * lifetimeEnergyConsumed)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, LifetimeEnergyConsumed::Id,
                                      (uint8_t *) lifetimeEnergyConsumed, sizeof(*lifetimeEnergyConsumed));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t lifetimeEnergyConsumed)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, LifetimeEnergyConsumed::Id,
                                       (uint8_t *) &lifetimeEnergyConsumed, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace LifetimeEnergyConsumed

namespace OperationMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * operationMode)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, OperationMode::Id, (uint8_t *) operationMode,
                                      sizeof(*operationMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t operationMode)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, OperationMode::Id, (uint8_t *) &operationMode,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace OperationMode

namespace ControlMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * controlMode)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, ControlMode::Id, (uint8_t *) controlMode,
                                      sizeof(*controlMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t controlMode)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, ControlMode::Id, (uint8_t *) &controlMode,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace ControlMode

namespace AlarmMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * alarmMask)
{
    return emberAfReadServerAttribute(endpoint, PumpConfigurationAndControl::Id, AlarmMask::Id, (uint8_t *) alarmMask,
                                      sizeof(*alarmMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t alarmMask)
{
    return emberAfWriteServerAttribute(endpoint, PumpConfigurationAndControl::Id, AlarmMask::Id, (uint8_t *) &alarmMask,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace AlarmMask

} // namespace Attributes
} // namespace PumpConfigurationAndControl

namespace Thermostat {
namespace Attributes {

namespace LocalTemperature {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * localTemperature)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, LocalTemperature::Id, (uint8_t *) localTemperature,
                                      sizeof(*localTemperature));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t localTemperature)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, LocalTemperature::Id, (uint8_t *) &localTemperature,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace LocalTemperature

namespace OutdoorTemperature {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * outdoorTemperature)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, OutdoorTemperature::Id, (uint8_t *) outdoorTemperature,
                                      sizeof(*outdoorTemperature));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t outdoorTemperature)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, OutdoorTemperature::Id, (uint8_t *) &outdoorTemperature,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace OutdoorTemperature

namespace Occupancy {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * occupancy)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, Occupancy::Id, (uint8_t *) occupancy, sizeof(*occupancy));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t occupancy)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, Occupancy::Id, (uint8_t *) &occupancy, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace Occupancy

namespace AbsMinHeatSetpointLimit {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * absMinHeatSetpointLimit)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AbsMinHeatSetpointLimit::Id, (uint8_t *) absMinHeatSetpointLimit,
                                      sizeof(*absMinHeatSetpointLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t absMinHeatSetpointLimit)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AbsMinHeatSetpointLimit::Id, (uint8_t *) &absMinHeatSetpointLimit,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AbsMinHeatSetpointLimit

namespace AbsMaxHeatSetpointLimit {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * absMaxHeatSetpointLimit)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AbsMaxHeatSetpointLimit::Id, (uint8_t *) absMaxHeatSetpointLimit,
                                      sizeof(*absMaxHeatSetpointLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t absMaxHeatSetpointLimit)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AbsMaxHeatSetpointLimit::Id, (uint8_t *) &absMaxHeatSetpointLimit,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AbsMaxHeatSetpointLimit

namespace AbsMinCoolSetpointLimit {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * absMinCoolSetpointLimit)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AbsMinCoolSetpointLimit::Id, (uint8_t *) absMinCoolSetpointLimit,
                                      sizeof(*absMinCoolSetpointLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t absMinCoolSetpointLimit)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AbsMinCoolSetpointLimit::Id, (uint8_t *) &absMinCoolSetpointLimit,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AbsMinCoolSetpointLimit

namespace AbsMaxCoolSetpointLimit {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * absMaxCoolSetpointLimit)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AbsMaxCoolSetpointLimit::Id, (uint8_t *) absMaxCoolSetpointLimit,
                                      sizeof(*absMaxCoolSetpointLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t absMaxCoolSetpointLimit)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AbsMaxCoolSetpointLimit::Id, (uint8_t *) &absMaxCoolSetpointLimit,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AbsMaxCoolSetpointLimit

namespace PiCoolingDemand {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * piCoolingDemand)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, PiCoolingDemand::Id, (uint8_t *) piCoolingDemand,
                                      sizeof(*piCoolingDemand));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t piCoolingDemand)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, PiCoolingDemand::Id, (uint8_t *) &piCoolingDemand,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace PiCoolingDemand

namespace PiHeatingDemand {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * piHeatingDemand)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, PiHeatingDemand::Id, (uint8_t *) piHeatingDemand,
                                      sizeof(*piHeatingDemand));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t piHeatingDemand)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, PiHeatingDemand::Id, (uint8_t *) &piHeatingDemand,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace PiHeatingDemand

namespace HvacSystemTypeConfiguration {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * hvacSystemTypeConfiguration)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, HvacSystemTypeConfiguration::Id,
                                      (uint8_t *) hvacSystemTypeConfiguration, sizeof(*hvacSystemTypeConfiguration));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t hvacSystemTypeConfiguration)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, HvacSystemTypeConfiguration::Id,
                                       (uint8_t *) &hvacSystemTypeConfiguration, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace HvacSystemTypeConfiguration

namespace LocalTemperatureCalibration {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * localTemperatureCalibration)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, LocalTemperatureCalibration::Id,
                                      (uint8_t *) localTemperatureCalibration, sizeof(*localTemperatureCalibration));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t localTemperatureCalibration)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, LocalTemperatureCalibration::Id,
                                       (uint8_t *) &localTemperatureCalibration, ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace LocalTemperatureCalibration

namespace OccupiedCoolingSetpoint {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * occupiedCoolingSetpoint)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, OccupiedCoolingSetpoint::Id, (uint8_t *) occupiedCoolingSetpoint,
                                      sizeof(*occupiedCoolingSetpoint));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t occupiedCoolingSetpoint)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, OccupiedCoolingSetpoint::Id, (uint8_t *) &occupiedCoolingSetpoint,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace OccupiedCoolingSetpoint

namespace OccupiedHeatingSetpoint {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * occupiedHeatingSetpoint)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, OccupiedHeatingSetpoint::Id, (uint8_t *) occupiedHeatingSetpoint,
                                      sizeof(*occupiedHeatingSetpoint));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t occupiedHeatingSetpoint)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, OccupiedHeatingSetpoint::Id, (uint8_t *) &occupiedHeatingSetpoint,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace OccupiedHeatingSetpoint

namespace UnoccupiedCoolingSetpoint {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * unoccupiedCoolingSetpoint)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, UnoccupiedCoolingSetpoint::Id,
                                      (uint8_t *) unoccupiedCoolingSetpoint, sizeof(*unoccupiedCoolingSetpoint));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t unoccupiedCoolingSetpoint)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, UnoccupiedCoolingSetpoint::Id,
                                       (uint8_t *) &unoccupiedCoolingSetpoint, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace UnoccupiedCoolingSetpoint

namespace UnoccupiedHeatingSetpoint {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * unoccupiedHeatingSetpoint)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, UnoccupiedHeatingSetpoint::Id,
                                      (uint8_t *) unoccupiedHeatingSetpoint, sizeof(*unoccupiedHeatingSetpoint));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t unoccupiedHeatingSetpoint)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, UnoccupiedHeatingSetpoint::Id,
                                       (uint8_t *) &unoccupiedHeatingSetpoint, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace UnoccupiedHeatingSetpoint

namespace MinHeatSetpointLimit {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minHeatSetpointLimit)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, MinHeatSetpointLimit::Id, (uint8_t *) minHeatSetpointLimit,
                                      sizeof(*minHeatSetpointLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minHeatSetpointLimit)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, MinHeatSetpointLimit::Id, (uint8_t *) &minHeatSetpointLimit,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinHeatSetpointLimit

namespace MaxHeatSetpointLimit {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxHeatSetpointLimit)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, MaxHeatSetpointLimit::Id, (uint8_t *) maxHeatSetpointLimit,
                                      sizeof(*maxHeatSetpointLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxHeatSetpointLimit)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, MaxHeatSetpointLimit::Id, (uint8_t *) &maxHeatSetpointLimit,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxHeatSetpointLimit

namespace MinCoolSetpointLimit {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minCoolSetpointLimit)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, MinCoolSetpointLimit::Id, (uint8_t *) minCoolSetpointLimit,
                                      sizeof(*minCoolSetpointLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minCoolSetpointLimit)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, MinCoolSetpointLimit::Id, (uint8_t *) &minCoolSetpointLimit,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinCoolSetpointLimit

namespace MaxCoolSetpointLimit {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxCoolSetpointLimit)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, MaxCoolSetpointLimit::Id, (uint8_t *) maxCoolSetpointLimit,
                                      sizeof(*maxCoolSetpointLimit));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxCoolSetpointLimit)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, MaxCoolSetpointLimit::Id, (uint8_t *) &maxCoolSetpointLimit,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxCoolSetpointLimit

namespace MinSetpointDeadBand {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * minSetpointDeadBand)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, MinSetpointDeadBand::Id, (uint8_t *) minSetpointDeadBand,
                                      sizeof(*minSetpointDeadBand));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t minSetpointDeadBand)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, MinSetpointDeadBand::Id, (uint8_t *) &minSetpointDeadBand,
                                       ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace MinSetpointDeadBand

namespace RemoteSensing {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * remoteSensing)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, RemoteSensing::Id, (uint8_t *) remoteSensing,
                                      sizeof(*remoteSensing));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t remoteSensing)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, RemoteSensing::Id, (uint8_t *) &remoteSensing,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace RemoteSensing

namespace ControlSequenceOfOperation {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * controlSequenceOfOperation)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, ControlSequenceOfOperation::Id,
                                      (uint8_t *) controlSequenceOfOperation, sizeof(*controlSequenceOfOperation));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t controlSequenceOfOperation)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, ControlSequenceOfOperation::Id,
                                       (uint8_t *) &controlSequenceOfOperation, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace ControlSequenceOfOperation

namespace SystemMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * systemMode)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, SystemMode::Id, (uint8_t *) systemMode, sizeof(*systemMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t systemMode)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, SystemMode::Id, (uint8_t *) &systemMode, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace SystemMode

namespace AlarmMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * alarmMask)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AlarmMask::Id, (uint8_t *) alarmMask, sizeof(*alarmMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t alarmMask)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AlarmMask::Id, (uint8_t *) &alarmMask, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace AlarmMask

namespace ThermostatRunningMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * thermostatRunningMode)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, ThermostatRunningMode::Id, (uint8_t *) thermostatRunningMode,
                                      sizeof(*thermostatRunningMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t thermostatRunningMode)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, ThermostatRunningMode::Id, (uint8_t *) &thermostatRunningMode,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace ThermostatRunningMode

namespace StartOfWeek {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * startOfWeek)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, StartOfWeek::Id, (uint8_t *) startOfWeek, sizeof(*startOfWeek));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t startOfWeek)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, StartOfWeek::Id, (uint8_t *) &startOfWeek,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace StartOfWeek

namespace NumberOfWeeklyTransitions {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * numberOfWeeklyTransitions)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, NumberOfWeeklyTransitions::Id,
                                      (uint8_t *) numberOfWeeklyTransitions, sizeof(*numberOfWeeklyTransitions));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t numberOfWeeklyTransitions)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, NumberOfWeeklyTransitions::Id,
                                       (uint8_t *) &numberOfWeeklyTransitions, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace NumberOfWeeklyTransitions

namespace NumberOfDailyTransitions {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * numberOfDailyTransitions)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, NumberOfDailyTransitions::Id, (uint8_t *) numberOfDailyTransitions,
                                      sizeof(*numberOfDailyTransitions));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t numberOfDailyTransitions)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, NumberOfDailyTransitions::Id,
                                       (uint8_t *) &numberOfDailyTransitions, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace NumberOfDailyTransitions

namespace TemperatureSetpointHold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * temperatureSetpointHold)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, TemperatureSetpointHold::Id, (uint8_t *) temperatureSetpointHold,
                                      sizeof(*temperatureSetpointHold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t temperatureSetpointHold)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, TemperatureSetpointHold::Id, (uint8_t *) &temperatureSetpointHold,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace TemperatureSetpointHold

namespace TemperatureSetpointHoldDuration {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * temperatureSetpointHoldDuration)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, TemperatureSetpointHoldDuration::Id,
                                      (uint8_t *) temperatureSetpointHoldDuration, sizeof(*temperatureSetpointHoldDuration));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t temperatureSetpointHoldDuration)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, TemperatureSetpointHoldDuration::Id,
                                       (uint8_t *) &temperatureSetpointHoldDuration, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace TemperatureSetpointHoldDuration

namespace ThermostatProgrammingOperationMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * thermostatProgrammingOperationMode)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, ThermostatProgrammingOperationMode::Id,
                                      (uint8_t *) thermostatProgrammingOperationMode, sizeof(*thermostatProgrammingOperationMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t thermostatProgrammingOperationMode)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, ThermostatProgrammingOperationMode::Id,
                                       (uint8_t *) &thermostatProgrammingOperationMode, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace ThermostatProgrammingOperationMode

namespace HvacRelayState {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * hvacRelayState)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, HvacRelayState::Id, (uint8_t *) hvacRelayState,
                                      sizeof(*hvacRelayState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t hvacRelayState)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, HvacRelayState::Id, (uint8_t *) &hvacRelayState,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace HvacRelayState

namespace SetpointChangeSource {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * setpointChangeSource)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, SetpointChangeSource::Id, (uint8_t *) setpointChangeSource,
                                      sizeof(*setpointChangeSource));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t setpointChangeSource)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, SetpointChangeSource::Id, (uint8_t *) &setpointChangeSource,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace SetpointChangeSource

namespace SetpointChangeAmount {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * setpointChangeAmount)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, SetpointChangeAmount::Id, (uint8_t *) setpointChangeAmount,
                                      sizeof(*setpointChangeAmount));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t setpointChangeAmount)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, SetpointChangeAmount::Id, (uint8_t *) &setpointChangeAmount,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace SetpointChangeAmount

namespace SetpointChangeSourceTimestamp {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * setpointChangeSourceTimestamp)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, SetpointChangeSourceTimestamp::Id,
                                      (uint8_t *) setpointChangeSourceTimestamp, sizeof(*setpointChangeSourceTimestamp));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t setpointChangeSourceTimestamp)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, SetpointChangeSourceTimestamp::Id,
                                       (uint8_t *) &setpointChangeSourceTimestamp, ZCL_EPOCH_S_ATTRIBUTE_TYPE);
}

} // namespace SetpointChangeSourceTimestamp

namespace AcType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * acType)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AcType::Id, (uint8_t *) acType, sizeof(*acType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t acType)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AcType::Id, (uint8_t *) &acType, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace AcType

namespace AcCapacity {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acCapacity)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AcCapacity::Id, (uint8_t *) acCapacity, sizeof(*acCapacity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acCapacity)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AcCapacity::Id, (uint8_t *) &acCapacity,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcCapacity

namespace AcRefrigerantType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * acRefrigerantType)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AcRefrigerantType::Id, (uint8_t *) acRefrigerantType,
                                      sizeof(*acRefrigerantType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t acRefrigerantType)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AcRefrigerantType::Id, (uint8_t *) &acRefrigerantType,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace AcRefrigerantType

namespace AcCompressor {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * acCompressor)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AcCompressor::Id, (uint8_t *) acCompressor, sizeof(*acCompressor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t acCompressor)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AcCompressor::Id, (uint8_t *) &acCompressor,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace AcCompressor

namespace AcErrorCode {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * acErrorCode)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AcErrorCode::Id, (uint8_t *) acErrorCode, sizeof(*acErrorCode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t acErrorCode)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AcErrorCode::Id, (uint8_t *) &acErrorCode,
                                       ZCL_BITMAP32_ATTRIBUTE_TYPE);
}

} // namespace AcErrorCode

namespace AcLouverPosition {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * acLouverPosition)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AcLouverPosition::Id, (uint8_t *) acLouverPosition,
                                      sizeof(*acLouverPosition));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t acLouverPosition)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AcLouverPosition::Id, (uint8_t *) &acLouverPosition,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace AcLouverPosition

namespace AcCoilTemperature {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * acCoilTemperature)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AcCoilTemperature::Id, (uint8_t *) acCoilTemperature,
                                      sizeof(*acCoilTemperature));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t acCoilTemperature)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AcCoilTemperature::Id, (uint8_t *) &acCoilTemperature,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AcCoilTemperature

namespace AcCapacityFormat {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * acCapacityFormat)
{
    return emberAfReadServerAttribute(endpoint, Thermostat::Id, AcCapacityFormat::Id, (uint8_t *) acCapacityFormat,
                                      sizeof(*acCapacityFormat));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t acCapacityFormat)
{
    return emberAfWriteServerAttribute(endpoint, Thermostat::Id, AcCapacityFormat::Id, (uint8_t *) &acCapacityFormat,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace AcCapacityFormat

} // namespace Attributes
} // namespace Thermostat

namespace FanControl {
namespace Attributes {

namespace FanMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * fanMode)
{
    return emberAfReadServerAttribute(endpoint, FanControl::Id, FanMode::Id, (uint8_t *) fanMode, sizeof(*fanMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t fanMode)
{
    return emberAfWriteServerAttribute(endpoint, FanControl::Id, FanMode::Id, (uint8_t *) &fanMode, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace FanMode

namespace FanModeSequence {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * fanModeSequence)
{
    return emberAfReadServerAttribute(endpoint, FanControl::Id, FanModeSequence::Id, (uint8_t *) fanModeSequence,
                                      sizeof(*fanModeSequence));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t fanModeSequence)
{
    return emberAfWriteServerAttribute(endpoint, FanControl::Id, FanModeSequence::Id, (uint8_t *) &fanModeSequence,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace FanModeSequence

} // namespace Attributes
} // namespace FanControl

namespace DehumidificationControl {
namespace Attributes {

namespace RelativeHumidity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * relativeHumidity)
{
    return emberAfReadServerAttribute(endpoint, DehumidificationControl::Id, RelativeHumidity::Id, (uint8_t *) relativeHumidity,
                                      sizeof(*relativeHumidity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t relativeHumidity)
{
    return emberAfWriteServerAttribute(endpoint, DehumidificationControl::Id, RelativeHumidity::Id, (uint8_t *) &relativeHumidity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace RelativeHumidity

namespace DehumidificationCooling {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * dehumidificationCooling)
{
    return emberAfReadServerAttribute(endpoint, DehumidificationControl::Id, DehumidificationCooling::Id,
                                      (uint8_t *) dehumidificationCooling, sizeof(*dehumidificationCooling));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t dehumidificationCooling)
{
    return emberAfWriteServerAttribute(endpoint, DehumidificationControl::Id, DehumidificationCooling::Id,
                                       (uint8_t *) &dehumidificationCooling, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace DehumidificationCooling

namespace RhDehumidificationSetpoint {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * rhDehumidificationSetpoint)
{
    return emberAfReadServerAttribute(endpoint, DehumidificationControl::Id, RhDehumidificationSetpoint::Id,
                                      (uint8_t *) rhDehumidificationSetpoint, sizeof(*rhDehumidificationSetpoint));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t rhDehumidificationSetpoint)
{
    return emberAfWriteServerAttribute(endpoint, DehumidificationControl::Id, RhDehumidificationSetpoint::Id,
                                       (uint8_t *) &rhDehumidificationSetpoint, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace RhDehumidificationSetpoint

namespace RelativeHumidityMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * relativeHumidityMode)
{
    return emberAfReadServerAttribute(endpoint, DehumidificationControl::Id, RelativeHumidityMode::Id,
                                      (uint8_t *) relativeHumidityMode, sizeof(*relativeHumidityMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t relativeHumidityMode)
{
    return emberAfWriteServerAttribute(endpoint, DehumidificationControl::Id, RelativeHumidityMode::Id,
                                       (uint8_t *) &relativeHumidityMode, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace RelativeHumidityMode

namespace DehumidificationLockout {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * dehumidificationLockout)
{
    return emberAfReadServerAttribute(endpoint, DehumidificationControl::Id, DehumidificationLockout::Id,
                                      (uint8_t *) dehumidificationLockout, sizeof(*dehumidificationLockout));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t dehumidificationLockout)
{
    return emberAfWriteServerAttribute(endpoint, DehumidificationControl::Id, DehumidificationLockout::Id,
                                       (uint8_t *) &dehumidificationLockout, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace DehumidificationLockout

namespace DehumidificationHysteresis {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * dehumidificationHysteresis)
{
    return emberAfReadServerAttribute(endpoint, DehumidificationControl::Id, DehumidificationHysteresis::Id,
                                      (uint8_t *) dehumidificationHysteresis, sizeof(*dehumidificationHysteresis));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t dehumidificationHysteresis)
{
    return emberAfWriteServerAttribute(endpoint, DehumidificationControl::Id, DehumidificationHysteresis::Id,
                                       (uint8_t *) &dehumidificationHysteresis, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace DehumidificationHysteresis

namespace DehumidificationMaxCool {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * dehumidificationMaxCool)
{
    return emberAfReadServerAttribute(endpoint, DehumidificationControl::Id, DehumidificationMaxCool::Id,
                                      (uint8_t *) dehumidificationMaxCool, sizeof(*dehumidificationMaxCool));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t dehumidificationMaxCool)
{
    return emberAfWriteServerAttribute(endpoint, DehumidificationControl::Id, DehumidificationMaxCool::Id,
                                       (uint8_t *) &dehumidificationMaxCool, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace DehumidificationMaxCool

namespace RelativeHumidityDisplay {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * relativeHumidityDisplay)
{
    return emberAfReadServerAttribute(endpoint, DehumidificationControl::Id, RelativeHumidityDisplay::Id,
                                      (uint8_t *) relativeHumidityDisplay, sizeof(*relativeHumidityDisplay));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t relativeHumidityDisplay)
{
    return emberAfWriteServerAttribute(endpoint, DehumidificationControl::Id, RelativeHumidityDisplay::Id,
                                       (uint8_t *) &relativeHumidityDisplay, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace RelativeHumidityDisplay

} // namespace Attributes
} // namespace DehumidificationControl

namespace ThermostatUserInterfaceConfiguration {
namespace Attributes {

namespace TemperatureDisplayMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * temperatureDisplayMode)
{
    return emberAfReadServerAttribute(endpoint, ThermostatUserInterfaceConfiguration::Id, TemperatureDisplayMode::Id,
                                      (uint8_t *) temperatureDisplayMode, sizeof(*temperatureDisplayMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t temperatureDisplayMode)
{
    return emberAfWriteServerAttribute(endpoint, ThermostatUserInterfaceConfiguration::Id, TemperatureDisplayMode::Id,
                                       (uint8_t *) &temperatureDisplayMode, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace TemperatureDisplayMode

namespace KeypadLockout {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * keypadLockout)
{
    return emberAfReadServerAttribute(endpoint, ThermostatUserInterfaceConfiguration::Id, KeypadLockout::Id,
                                      (uint8_t *) keypadLockout, sizeof(*keypadLockout));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t keypadLockout)
{
    return emberAfWriteServerAttribute(endpoint, ThermostatUserInterfaceConfiguration::Id, KeypadLockout::Id,
                                       (uint8_t *) &keypadLockout, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace KeypadLockout

namespace ScheduleProgrammingVisibility {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * scheduleProgrammingVisibility)
{
    return emberAfReadServerAttribute(endpoint, ThermostatUserInterfaceConfiguration::Id, ScheduleProgrammingVisibility::Id,
                                      (uint8_t *) scheduleProgrammingVisibility, sizeof(*scheduleProgrammingVisibility));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t scheduleProgrammingVisibility)
{
    return emberAfWriteServerAttribute(endpoint, ThermostatUserInterfaceConfiguration::Id, ScheduleProgrammingVisibility::Id,
                                       (uint8_t *) &scheduleProgrammingVisibility, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace ScheduleProgrammingVisibility

} // namespace Attributes
} // namespace ThermostatUserInterfaceConfiguration

namespace ColorControl {
namespace Attributes {

namespace CurrentHue {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentHue)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, CurrentHue::Id, (uint8_t *) currentHue, sizeof(*currentHue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentHue)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, CurrentHue::Id, (uint8_t *) &currentHue,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentHue

namespace CurrentSaturation {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentSaturation)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, CurrentSaturation::Id, (uint8_t *) currentSaturation,
                                      sizeof(*currentSaturation));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentSaturation)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, CurrentSaturation::Id, (uint8_t *) &currentSaturation,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentSaturation

namespace RemainingTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * remainingTime)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, RemainingTime::Id, (uint8_t *) remainingTime,
                                      sizeof(*remainingTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t remainingTime)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, RemainingTime::Id, (uint8_t *) &remainingTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RemainingTime

namespace CurrentX {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * currentX)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, CurrentX::Id, (uint8_t *) currentX, sizeof(*currentX));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t currentX)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, CurrentX::Id, (uint8_t *) &currentX, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CurrentX

namespace CurrentY {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * currentY)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, CurrentY::Id, (uint8_t *) currentY, sizeof(*currentY));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t currentY)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, CurrentY::Id, (uint8_t *) &currentY, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CurrentY

namespace DriftCompensation {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * driftCompensation)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, DriftCompensation::Id, (uint8_t *) driftCompensation,
                                      sizeof(*driftCompensation));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t driftCompensation)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, DriftCompensation::Id, (uint8_t *) &driftCompensation,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace DriftCompensation

namespace ColorTemperature {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorTemperature)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorTemperature::Id, (uint8_t *) colorTemperature,
                                      sizeof(*colorTemperature));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorTemperature)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorTemperature::Id, (uint8_t *) &colorTemperature,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorTemperature

namespace ColorMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * colorMode)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorMode::Id, (uint8_t *) colorMode, sizeof(*colorMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t colorMode)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorMode::Id, (uint8_t *) &colorMode, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace ColorMode

namespace ColorControlOptions {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * colorControlOptions)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorControlOptions::Id, (uint8_t *) colorControlOptions,
                                      sizeof(*colorControlOptions));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t colorControlOptions)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorControlOptions::Id, (uint8_t *) &colorControlOptions,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace ColorControlOptions

namespace NumberOfPrimaries {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * numberOfPrimaries)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, NumberOfPrimaries::Id, (uint8_t *) numberOfPrimaries,
                                      sizeof(*numberOfPrimaries));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t numberOfPrimaries)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, NumberOfPrimaries::Id, (uint8_t *) &numberOfPrimaries,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace NumberOfPrimaries

namespace Primary1X {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary1X)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary1X::Id, (uint8_t *) primary1X, sizeof(*primary1X));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary1X)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary1X::Id, (uint8_t *) &primary1X,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary1X

namespace Primary1Y {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary1Y)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary1Y::Id, (uint8_t *) primary1Y, sizeof(*primary1Y));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary1Y)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary1Y::Id, (uint8_t *) &primary1Y,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary1Y

namespace Primary1Intensity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * primary1Intensity)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary1Intensity::Id, (uint8_t *) primary1Intensity,
                                      sizeof(*primary1Intensity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t primary1Intensity)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary1Intensity::Id, (uint8_t *) &primary1Intensity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Primary1Intensity

namespace Primary2X {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary2X)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary2X::Id, (uint8_t *) primary2X, sizeof(*primary2X));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary2X)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary2X::Id, (uint8_t *) &primary2X,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary2X

namespace Primary2Y {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary2Y)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary2Y::Id, (uint8_t *) primary2Y, sizeof(*primary2Y));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary2Y)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary2Y::Id, (uint8_t *) &primary2Y,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary2Y

namespace Primary2Intensity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * primary2Intensity)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary2Intensity::Id, (uint8_t *) primary2Intensity,
                                      sizeof(*primary2Intensity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t primary2Intensity)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary2Intensity::Id, (uint8_t *) &primary2Intensity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Primary2Intensity

namespace Primary3X {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary3X)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary3X::Id, (uint8_t *) primary3X, sizeof(*primary3X));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary3X)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary3X::Id, (uint8_t *) &primary3X,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary3X

namespace Primary3Y {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary3Y)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary3Y::Id, (uint8_t *) primary3Y, sizeof(*primary3Y));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary3Y)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary3Y::Id, (uint8_t *) &primary3Y,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary3Y

namespace Primary3Intensity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * primary3Intensity)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary3Intensity::Id, (uint8_t *) primary3Intensity,
                                      sizeof(*primary3Intensity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t primary3Intensity)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary3Intensity::Id, (uint8_t *) &primary3Intensity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Primary3Intensity

namespace Primary4X {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary4X)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary4X::Id, (uint8_t *) primary4X, sizeof(*primary4X));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary4X)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary4X::Id, (uint8_t *) &primary4X,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary4X

namespace Primary4Y {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary4Y)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary4Y::Id, (uint8_t *) primary4Y, sizeof(*primary4Y));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary4Y)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary4Y::Id, (uint8_t *) &primary4Y,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary4Y

namespace Primary4Intensity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * primary4Intensity)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary4Intensity::Id, (uint8_t *) primary4Intensity,
                                      sizeof(*primary4Intensity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t primary4Intensity)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary4Intensity::Id, (uint8_t *) &primary4Intensity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Primary4Intensity

namespace Primary5X {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary5X)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary5X::Id, (uint8_t *) primary5X, sizeof(*primary5X));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary5X)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary5X::Id, (uint8_t *) &primary5X,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary5X

namespace Primary5Y {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary5Y)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary5Y::Id, (uint8_t *) primary5Y, sizeof(*primary5Y));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary5Y)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary5Y::Id, (uint8_t *) &primary5Y,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary5Y

namespace Primary5Intensity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * primary5Intensity)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary5Intensity::Id, (uint8_t *) primary5Intensity,
                                      sizeof(*primary5Intensity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t primary5Intensity)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary5Intensity::Id, (uint8_t *) &primary5Intensity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Primary5Intensity

namespace Primary6X {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary6X)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary6X::Id, (uint8_t *) primary6X, sizeof(*primary6X));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary6X)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary6X::Id, (uint8_t *) &primary6X,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary6X

namespace Primary6Y {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * primary6Y)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary6Y::Id, (uint8_t *) primary6Y, sizeof(*primary6Y));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t primary6Y)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary6Y::Id, (uint8_t *) &primary6Y,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Primary6Y

namespace Primary6Intensity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * primary6Intensity)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, Primary6Intensity::Id, (uint8_t *) primary6Intensity,
                                      sizeof(*primary6Intensity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t primary6Intensity)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, Primary6Intensity::Id, (uint8_t *) &primary6Intensity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Primary6Intensity

namespace WhitePointX {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * whitePointX)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, WhitePointX::Id, (uint8_t *) whitePointX, sizeof(*whitePointX));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t whitePointX)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, WhitePointX::Id, (uint8_t *) &whitePointX,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace WhitePointX

namespace WhitePointY {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * whitePointY)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, WhitePointY::Id, (uint8_t *) whitePointY, sizeof(*whitePointY));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t whitePointY)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, WhitePointY::Id, (uint8_t *) &whitePointY,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace WhitePointY

namespace ColorPointRX {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorPointRX)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorPointRX::Id, (uint8_t *) colorPointRX,
                                      sizeof(*colorPointRX));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorPointRX)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorPointRX::Id, (uint8_t *) &colorPointRX,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorPointRX

namespace ColorPointRY {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorPointRY)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorPointRY::Id, (uint8_t *) colorPointRY,
                                      sizeof(*colorPointRY));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorPointRY)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorPointRY::Id, (uint8_t *) &colorPointRY,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorPointRY

namespace ColorPointRIntensity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * colorPointRIntensity)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorPointRIntensity::Id, (uint8_t *) colorPointRIntensity,
                                      sizeof(*colorPointRIntensity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t colorPointRIntensity)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorPointRIntensity::Id, (uint8_t *) &colorPointRIntensity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace ColorPointRIntensity

namespace ColorPointGX {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorPointGX)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorPointGX::Id, (uint8_t *) colorPointGX,
                                      sizeof(*colorPointGX));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorPointGX)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorPointGX::Id, (uint8_t *) &colorPointGX,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorPointGX

namespace ColorPointGY {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorPointGY)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorPointGY::Id, (uint8_t *) colorPointGY,
                                      sizeof(*colorPointGY));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorPointGY)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorPointGY::Id, (uint8_t *) &colorPointGY,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorPointGY

namespace ColorPointGIntensity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * colorPointGIntensity)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorPointGIntensity::Id, (uint8_t *) colorPointGIntensity,
                                      sizeof(*colorPointGIntensity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t colorPointGIntensity)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorPointGIntensity::Id, (uint8_t *) &colorPointGIntensity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace ColorPointGIntensity

namespace ColorPointBX {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorPointBX)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorPointBX::Id, (uint8_t *) colorPointBX,
                                      sizeof(*colorPointBX));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorPointBX)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorPointBX::Id, (uint8_t *) &colorPointBX,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorPointBX

namespace ColorPointBY {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorPointBY)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorPointBY::Id, (uint8_t *) colorPointBY,
                                      sizeof(*colorPointBY));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorPointBY)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorPointBY::Id, (uint8_t *) &colorPointBY,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorPointBY

namespace ColorPointBIntensity {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * colorPointBIntensity)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorPointBIntensity::Id, (uint8_t *) colorPointBIntensity,
                                      sizeof(*colorPointBIntensity));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t colorPointBIntensity)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorPointBIntensity::Id, (uint8_t *) &colorPointBIntensity,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace ColorPointBIntensity

namespace EnhancedCurrentHue {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * enhancedCurrentHue)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, EnhancedCurrentHue::Id, (uint8_t *) enhancedCurrentHue,
                                      sizeof(*enhancedCurrentHue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t enhancedCurrentHue)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, EnhancedCurrentHue::Id, (uint8_t *) &enhancedCurrentHue,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace EnhancedCurrentHue

namespace EnhancedColorMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * enhancedColorMode)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, EnhancedColorMode::Id, (uint8_t *) enhancedColorMode,
                                      sizeof(*enhancedColorMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t enhancedColorMode)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, EnhancedColorMode::Id, (uint8_t *) &enhancedColorMode,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace EnhancedColorMode

namespace ColorLoopActive {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * colorLoopActive)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorLoopActive::Id, (uint8_t *) colorLoopActive,
                                      sizeof(*colorLoopActive));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t colorLoopActive)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorLoopActive::Id, (uint8_t *) &colorLoopActive,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace ColorLoopActive

namespace ColorLoopDirection {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * colorLoopDirection)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorLoopDirection::Id, (uint8_t *) colorLoopDirection,
                                      sizeof(*colorLoopDirection));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t colorLoopDirection)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorLoopDirection::Id, (uint8_t *) &colorLoopDirection,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace ColorLoopDirection

namespace ColorLoopTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorLoopTime)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorLoopTime::Id, (uint8_t *) colorLoopTime,
                                      sizeof(*colorLoopTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorLoopTime)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorLoopTime::Id, (uint8_t *) &colorLoopTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorLoopTime

namespace ColorLoopStartEnhancedHue {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorLoopStartEnhancedHue)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorLoopStartEnhancedHue::Id,
                                      (uint8_t *) colorLoopStartEnhancedHue, sizeof(*colorLoopStartEnhancedHue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorLoopStartEnhancedHue)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorLoopStartEnhancedHue::Id,
                                       (uint8_t *) &colorLoopStartEnhancedHue, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorLoopStartEnhancedHue

namespace ColorLoopStoredEnhancedHue {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorLoopStoredEnhancedHue)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorLoopStoredEnhancedHue::Id,
                                      (uint8_t *) colorLoopStoredEnhancedHue, sizeof(*colorLoopStoredEnhancedHue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorLoopStoredEnhancedHue)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorLoopStoredEnhancedHue::Id,
                                       (uint8_t *) &colorLoopStoredEnhancedHue, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorLoopStoredEnhancedHue

namespace ColorCapabilities {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorCapabilities)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorCapabilities::Id, (uint8_t *) colorCapabilities,
                                      sizeof(*colorCapabilities));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorCapabilities)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorCapabilities::Id, (uint8_t *) &colorCapabilities,
                                       ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace ColorCapabilities

namespace ColorTempPhysicalMin {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorTempPhysicalMin)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorTempPhysicalMin::Id, (uint8_t *) colorTempPhysicalMin,
                                      sizeof(*colorTempPhysicalMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorTempPhysicalMin)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorTempPhysicalMin::Id, (uint8_t *) &colorTempPhysicalMin,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorTempPhysicalMin

namespace ColorTempPhysicalMax {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * colorTempPhysicalMax)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, ColorTempPhysicalMax::Id, (uint8_t *) colorTempPhysicalMax,
                                      sizeof(*colorTempPhysicalMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t colorTempPhysicalMax)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, ColorTempPhysicalMax::Id, (uint8_t *) &colorTempPhysicalMax,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ColorTempPhysicalMax

namespace CoupleColorTempToLevelMinMireds {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * coupleColorTempToLevelMinMireds)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, CoupleColorTempToLevelMinMireds::Id,
                                      (uint8_t *) coupleColorTempToLevelMinMireds, sizeof(*coupleColorTempToLevelMinMireds));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t coupleColorTempToLevelMinMireds)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, CoupleColorTempToLevelMinMireds::Id,
                                       (uint8_t *) &coupleColorTempToLevelMinMireds, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CoupleColorTempToLevelMinMireds

namespace StartUpColorTemperatureMireds {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * startUpColorTemperatureMireds)
{
    return emberAfReadServerAttribute(endpoint, ColorControl::Id, StartUpColorTemperatureMireds::Id,
                                      (uint8_t *) startUpColorTemperatureMireds, sizeof(*startUpColorTemperatureMireds));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t startUpColorTemperatureMireds)
{
    return emberAfWriteServerAttribute(endpoint, ColorControl::Id, StartUpColorTemperatureMireds::Id,
                                       (uint8_t *) &startUpColorTemperatureMireds, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace StartUpColorTemperatureMireds

} // namespace Attributes
} // namespace ColorControl

namespace BallastConfiguration {
namespace Attributes {

namespace PhysicalMinLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * physicalMinLevel)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, PhysicalMinLevel::Id, (uint8_t *) physicalMinLevel,
                                      sizeof(*physicalMinLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t physicalMinLevel)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, PhysicalMinLevel::Id, (uint8_t *) &physicalMinLevel,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace PhysicalMinLevel

namespace PhysicalMaxLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * physicalMaxLevel)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, PhysicalMaxLevel::Id, (uint8_t *) physicalMaxLevel,
                                      sizeof(*physicalMaxLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t physicalMaxLevel)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, PhysicalMaxLevel::Id, (uint8_t *) &physicalMaxLevel,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace PhysicalMaxLevel

namespace BallastStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * ballastStatus)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, BallastStatus::Id, (uint8_t *) ballastStatus,
                                      sizeof(*ballastStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t ballastStatus)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, BallastStatus::Id, (uint8_t *) &ballastStatus,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace BallastStatus

namespace MinLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * minLevel)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, MinLevel::Id, (uint8_t *) minLevel, sizeof(*minLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t minLevel)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, MinLevel::Id, (uint8_t *) &minLevel,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace MinLevel

namespace MaxLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * maxLevel)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, MaxLevel::Id, (uint8_t *) maxLevel, sizeof(*maxLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t maxLevel)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, MaxLevel::Id, (uint8_t *) &maxLevel,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace MaxLevel

namespace PowerOnLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * powerOnLevel)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, PowerOnLevel::Id, (uint8_t *) powerOnLevel,
                                      sizeof(*powerOnLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t powerOnLevel)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, PowerOnLevel::Id, (uint8_t *) &powerOnLevel,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace PowerOnLevel

namespace PowerOnFadeTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * powerOnFadeTime)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, PowerOnFadeTime::Id, (uint8_t *) powerOnFadeTime,
                                      sizeof(*powerOnFadeTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t powerOnFadeTime)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, PowerOnFadeTime::Id, (uint8_t *) &powerOnFadeTime,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PowerOnFadeTime

namespace IntrinsicBallastFactor {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * intrinsicBallastFactor)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, IntrinsicBallastFactor::Id,
                                      (uint8_t *) intrinsicBallastFactor, sizeof(*intrinsicBallastFactor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t intrinsicBallastFactor)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, IntrinsicBallastFactor::Id,
                                       (uint8_t *) &intrinsicBallastFactor, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace IntrinsicBallastFactor

namespace BallastFactorAdjustment {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * ballastFactorAdjustment)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, BallastFactorAdjustment::Id,
                                      (uint8_t *) ballastFactorAdjustment, sizeof(*ballastFactorAdjustment));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t ballastFactorAdjustment)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, BallastFactorAdjustment::Id,
                                       (uint8_t *) &ballastFactorAdjustment, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace BallastFactorAdjustment

namespace LampQuality {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * lampQuality)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, LampQuality::Id, (uint8_t *) lampQuality,
                                      sizeof(*lampQuality));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t lampQuality)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, LampQuality::Id, (uint8_t *) &lampQuality,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace LampQuality

namespace LampAlarmMode {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * lampAlarmMode)
{
    return emberAfReadServerAttribute(endpoint, BallastConfiguration::Id, LampAlarmMode::Id, (uint8_t *) lampAlarmMode,
                                      sizeof(*lampAlarmMode));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t lampAlarmMode)
{
    return emberAfWriteServerAttribute(endpoint, BallastConfiguration::Id, LampAlarmMode::Id, (uint8_t *) &lampAlarmMode,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace LampAlarmMode

} // namespace Attributes
} // namespace BallastConfiguration

namespace IlluminanceMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * measuredValue)
{
    return emberAfReadServerAttribute(endpoint, IlluminanceMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, IlluminanceMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, IlluminanceMeasurement::Id, MinMeasuredValue::Id, (uint8_t *) minMeasuredValue,
                                      sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, IlluminanceMeasurement::Id, MinMeasuredValue::Id, (uint8_t *) &minMeasuredValue,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, IlluminanceMeasurement::Id, MaxMeasuredValue::Id, (uint8_t *) maxMeasuredValue,
                                      sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, IlluminanceMeasurement::Id, MaxMeasuredValue::Id, (uint8_t *) &maxMeasuredValue,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * tolerance)
{
    return emberAfReadServerAttribute(endpoint, IlluminanceMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t tolerance)
{
    return emberAfWriteServerAttribute(endpoint, IlluminanceMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

namespace LightSensorType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * lightSensorType)
{
    return emberAfReadServerAttribute(endpoint, IlluminanceMeasurement::Id, LightSensorType::Id, (uint8_t *) lightSensorType,
                                      sizeof(*lightSensorType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t lightSensorType)
{
    return emberAfWriteServerAttribute(endpoint, IlluminanceMeasurement::Id, LightSensorType::Id, (uint8_t *) &lightSensorType,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace LightSensorType

} // namespace Attributes
} // namespace IlluminanceMeasurement

namespace IlluminanceLevelSensing {
namespace Attributes {

namespace LevelStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * levelStatus)
{
    return emberAfReadServerAttribute(endpoint, IlluminanceLevelSensing::Id, LevelStatus::Id, (uint8_t *) levelStatus,
                                      sizeof(*levelStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t levelStatus)
{
    return emberAfWriteServerAttribute(endpoint, IlluminanceLevelSensing::Id, LevelStatus::Id, (uint8_t *) &levelStatus,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace LevelStatus

namespace LightSensorType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * lightSensorType)
{
    return emberAfReadServerAttribute(endpoint, IlluminanceLevelSensing::Id, LightSensorType::Id, (uint8_t *) lightSensorType,
                                      sizeof(*lightSensorType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t lightSensorType)
{
    return emberAfWriteServerAttribute(endpoint, IlluminanceLevelSensing::Id, LightSensorType::Id, (uint8_t *) &lightSensorType,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace LightSensorType

namespace IlluminanceLevelTarget {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * illuminanceLevelTarget)
{
    return emberAfReadServerAttribute(endpoint, IlluminanceLevelSensing::Id, IlluminanceLevelTarget::Id,
                                      (uint8_t *) illuminanceLevelTarget, sizeof(*illuminanceLevelTarget));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t illuminanceLevelTarget)
{
    return emberAfWriteServerAttribute(endpoint, IlluminanceLevelSensing::Id, IlluminanceLevelTarget::Id,
                                       (uint8_t *) &illuminanceLevelTarget, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace IlluminanceLevelTarget

} // namespace Attributes
} // namespace IlluminanceLevelSensing

namespace TemperatureMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measuredValue)
{
    return emberAfReadServerAttribute(endpoint, TemperatureMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TemperatureMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, TemperatureMeasurement::Id, MinMeasuredValue::Id, (uint8_t *) minMeasuredValue,
                                      sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TemperatureMeasurement::Id, MinMeasuredValue::Id, (uint8_t *) &minMeasuredValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, TemperatureMeasurement::Id, MaxMeasuredValue::Id, (uint8_t *) maxMeasuredValue,
                                      sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TemperatureMeasurement::Id, MaxMeasuredValue::Id, (uint8_t *) &maxMeasuredValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * tolerance)
{
    return emberAfReadServerAttribute(endpoint, TemperatureMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t tolerance)
{
    return emberAfWriteServerAttribute(endpoint, TemperatureMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace TemperatureMeasurement

namespace PressureMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measuredValue)
{
    return emberAfReadServerAttribute(endpoint, PressureMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, PressureMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, PressureMeasurement::Id, MinMeasuredValue::Id, (uint8_t *) minMeasuredValue,
                                      sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, PressureMeasurement::Id, MinMeasuredValue::Id, (uint8_t *) &minMeasuredValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, PressureMeasurement::Id, MaxMeasuredValue::Id, (uint8_t *) maxMeasuredValue,
                                      sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, PressureMeasurement::Id, MaxMeasuredValue::Id, (uint8_t *) &maxMeasuredValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * tolerance)
{
    return emberAfReadServerAttribute(endpoint, PressureMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance, sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t tolerance)
{
    return emberAfWriteServerAttribute(endpoint, PressureMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

namespace ScaledValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * scaledValue)
{
    return emberAfReadServerAttribute(endpoint, PressureMeasurement::Id, ScaledValue::Id, (uint8_t *) scaledValue,
                                      sizeof(*scaledValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t scaledValue)
{
    return emberAfWriteServerAttribute(endpoint, PressureMeasurement::Id, ScaledValue::Id, (uint8_t *) &scaledValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ScaledValue

namespace MinScaledValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minScaledValue)
{
    return emberAfReadServerAttribute(endpoint, PressureMeasurement::Id, MinScaledValue::Id, (uint8_t *) minScaledValue,
                                      sizeof(*minScaledValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minScaledValue)
{
    return emberAfWriteServerAttribute(endpoint, PressureMeasurement::Id, MinScaledValue::Id, (uint8_t *) &minScaledValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinScaledValue

namespace MaxScaledValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxScaledValue)
{
    return emberAfReadServerAttribute(endpoint, PressureMeasurement::Id, MaxScaledValue::Id, (uint8_t *) maxScaledValue,
                                      sizeof(*maxScaledValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxScaledValue)
{
    return emberAfWriteServerAttribute(endpoint, PressureMeasurement::Id, MaxScaledValue::Id, (uint8_t *) &maxScaledValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxScaledValue

namespace ScaledTolerance {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * scaledTolerance)
{
    return emberAfReadServerAttribute(endpoint, PressureMeasurement::Id, ScaledTolerance::Id, (uint8_t *) scaledTolerance,
                                      sizeof(*scaledTolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t scaledTolerance)
{
    return emberAfWriteServerAttribute(endpoint, PressureMeasurement::Id, ScaledTolerance::Id, (uint8_t *) &scaledTolerance,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ScaledTolerance

namespace Scale {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * scale)
{
    return emberAfReadServerAttribute(endpoint, PressureMeasurement::Id, Scale::Id, (uint8_t *) scale, sizeof(*scale));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t scale)
{
    return emberAfWriteServerAttribute(endpoint, PressureMeasurement::Id, Scale::Id, (uint8_t *) &scale, ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace Scale

} // namespace Attributes
} // namespace PressureMeasurement

namespace FlowMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measuredValue)
{
    return emberAfReadServerAttribute(endpoint, FlowMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, FlowMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, FlowMeasurement::Id, MinMeasuredValue::Id, (uint8_t *) minMeasuredValue,
                                      sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, FlowMeasurement::Id, MinMeasuredValue::Id, (uint8_t *) &minMeasuredValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, FlowMeasurement::Id, MaxMeasuredValue::Id, (uint8_t *) maxMeasuredValue,
                                      sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, FlowMeasurement::Id, MaxMeasuredValue::Id, (uint8_t *) &maxMeasuredValue,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * tolerance)
{
    return emberAfReadServerAttribute(endpoint, FlowMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance, sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t tolerance)
{
    return emberAfWriteServerAttribute(endpoint, FlowMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace FlowMeasurement

namespace RelativeHumidityMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * measuredValue)
{
    return emberAfReadServerAttribute(endpoint, RelativeHumidityMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, RelativeHumidityMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, RelativeHumidityMeasurement::Id, MinMeasuredValue::Id, (uint8_t *) minMeasuredValue,
                                      sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, RelativeHumidityMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, RelativeHumidityMeasurement::Id, MaxMeasuredValue::Id, (uint8_t *) maxMeasuredValue,
                                      sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, RelativeHumidityMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * tolerance)
{
    return emberAfReadServerAttribute(endpoint, RelativeHumidityMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t tolerance)
{
    return emberAfWriteServerAttribute(endpoint, RelativeHumidityMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace RelativeHumidityMeasurement

namespace OccupancySensing {
namespace Attributes {

namespace Occupancy {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * occupancy)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, Occupancy::Id, (uint8_t *) occupancy, sizeof(*occupancy));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t occupancy)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, Occupancy::Id, (uint8_t *) &occupancy,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace Occupancy

namespace OccupancySensorType {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * occupancySensorType)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, OccupancySensorType::Id, (uint8_t *) occupancySensorType,
                                      sizeof(*occupancySensorType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t occupancySensorType)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, OccupancySensorType::Id, (uint8_t *) &occupancySensorType,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace OccupancySensorType

namespace OccupancySensorTypeBitmap {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * occupancySensorTypeBitmap)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, OccupancySensorTypeBitmap::Id,
                                      (uint8_t *) occupancySensorTypeBitmap, sizeof(*occupancySensorTypeBitmap));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t occupancySensorTypeBitmap)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, OccupancySensorTypeBitmap::Id,
                                       (uint8_t *) &occupancySensorTypeBitmap, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace OccupancySensorTypeBitmap

namespace PirOccupiedToUnoccupiedDelay {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * pirOccupiedToUnoccupiedDelay)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, PirOccupiedToUnoccupiedDelay::Id,
                                      (uint8_t *) pirOccupiedToUnoccupiedDelay, sizeof(*pirOccupiedToUnoccupiedDelay));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t pirOccupiedToUnoccupiedDelay)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, PirOccupiedToUnoccupiedDelay::Id,
                                       (uint8_t *) &pirOccupiedToUnoccupiedDelay, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PirOccupiedToUnoccupiedDelay

namespace PirUnoccupiedToOccupiedDelay {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * pirUnoccupiedToOccupiedDelay)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, PirUnoccupiedToOccupiedDelay::Id,
                                      (uint8_t *) pirUnoccupiedToOccupiedDelay, sizeof(*pirUnoccupiedToOccupiedDelay));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t pirUnoccupiedToOccupiedDelay)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, PirUnoccupiedToOccupiedDelay::Id,
                                       (uint8_t *) &pirUnoccupiedToOccupiedDelay, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PirUnoccupiedToOccupiedDelay

namespace PirUnoccupiedToOccupiedThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * pirUnoccupiedToOccupiedThreshold)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, PirUnoccupiedToOccupiedThreshold::Id,
                                      (uint8_t *) pirUnoccupiedToOccupiedThreshold, sizeof(*pirUnoccupiedToOccupiedThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t pirUnoccupiedToOccupiedThreshold)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, PirUnoccupiedToOccupiedThreshold::Id,
                                       (uint8_t *) &pirUnoccupiedToOccupiedThreshold, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace PirUnoccupiedToOccupiedThreshold

namespace UltrasonicOccupiedToUnoccupiedDelay {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * ultrasonicOccupiedToUnoccupiedDelay)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, UltrasonicOccupiedToUnoccupiedDelay::Id,
                                      (uint8_t *) ultrasonicOccupiedToUnoccupiedDelay,
                                      sizeof(*ultrasonicOccupiedToUnoccupiedDelay));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t ultrasonicOccupiedToUnoccupiedDelay)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, UltrasonicOccupiedToUnoccupiedDelay::Id,
                                       (uint8_t *) &ultrasonicOccupiedToUnoccupiedDelay, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace UltrasonicOccupiedToUnoccupiedDelay

namespace UltrasonicUnoccupiedToOccupiedDelay {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * ultrasonicUnoccupiedToOccupiedDelay)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, UltrasonicUnoccupiedToOccupiedDelay::Id,
                                      (uint8_t *) ultrasonicUnoccupiedToOccupiedDelay,
                                      sizeof(*ultrasonicUnoccupiedToOccupiedDelay));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t ultrasonicUnoccupiedToOccupiedDelay)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, UltrasonicUnoccupiedToOccupiedDelay::Id,
                                       (uint8_t *) &ultrasonicUnoccupiedToOccupiedDelay, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace UltrasonicUnoccupiedToOccupiedDelay

namespace UltrasonicUnoccupiedToOccupiedThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * ultrasonicUnoccupiedToOccupiedThreshold)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, UltrasonicUnoccupiedToOccupiedThreshold::Id,
                                      (uint8_t *) ultrasonicUnoccupiedToOccupiedThreshold,
                                      sizeof(*ultrasonicUnoccupiedToOccupiedThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t ultrasonicUnoccupiedToOccupiedThreshold)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, UltrasonicUnoccupiedToOccupiedThreshold::Id,
                                       (uint8_t *) &ultrasonicUnoccupiedToOccupiedThreshold, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace UltrasonicUnoccupiedToOccupiedThreshold

namespace PhysicalContactOccupiedToUnoccupiedDelay {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * physicalContactOccupiedToUnoccupiedDelay)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, PhysicalContactOccupiedToUnoccupiedDelay::Id,
                                      (uint8_t *) physicalContactOccupiedToUnoccupiedDelay,
                                      sizeof(*physicalContactOccupiedToUnoccupiedDelay));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t physicalContactOccupiedToUnoccupiedDelay)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, PhysicalContactOccupiedToUnoccupiedDelay::Id,
                                       (uint8_t *) &physicalContactOccupiedToUnoccupiedDelay, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PhysicalContactOccupiedToUnoccupiedDelay

namespace PhysicalContactUnoccupiedToOccupiedDelay {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * physicalContactUnoccupiedToOccupiedDelay)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, PhysicalContactUnoccupiedToOccupiedDelay::Id,
                                      (uint8_t *) physicalContactUnoccupiedToOccupiedDelay,
                                      sizeof(*physicalContactUnoccupiedToOccupiedDelay));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t physicalContactUnoccupiedToOccupiedDelay)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, PhysicalContactUnoccupiedToOccupiedDelay::Id,
                                       (uint8_t *) &physicalContactUnoccupiedToOccupiedDelay, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace PhysicalContactUnoccupiedToOccupiedDelay

namespace PhysicalContactUnoccupiedToOccupiedThreshold {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * physicalContactUnoccupiedToOccupiedThreshold)
{
    return emberAfReadServerAttribute(endpoint, OccupancySensing::Id, PhysicalContactUnoccupiedToOccupiedThreshold::Id,
                                      (uint8_t *) physicalContactUnoccupiedToOccupiedThreshold,
                                      sizeof(*physicalContactUnoccupiedToOccupiedThreshold));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t physicalContactUnoccupiedToOccupiedThreshold)
{
    return emberAfWriteServerAttribute(endpoint, OccupancySensing::Id, PhysicalContactUnoccupiedToOccupiedThreshold::Id,
                                       (uint8_t *) &physicalContactUnoccupiedToOccupiedThreshold, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace PhysicalContactUnoccupiedToOccupiedThreshold

} // namespace Attributes
} // namespace OccupancySensing

namespace CarbonMonoxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, CarbonMonoxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, CarbonMonoxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, CarbonMonoxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, CarbonMonoxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, CarbonMonoxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, CarbonMonoxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, CarbonMonoxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, CarbonMonoxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace CarbonMonoxideConcentrationMeasurement

namespace CarbonDioxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, CarbonDioxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, CarbonDioxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, CarbonDioxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, CarbonDioxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, CarbonDioxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, CarbonDioxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, CarbonDioxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, CarbonDioxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace CarbonDioxideConcentrationMeasurement

namespace EthyleneConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, EthyleneConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, EthyleneConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, EthyleneConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, EthyleneConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, EthyleneConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, EthyleneConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, EthyleneConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, EthyleneConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace EthyleneConcentrationMeasurement

namespace EthyleneOxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, EthyleneOxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, EthyleneOxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, EthyleneOxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, EthyleneOxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, EthyleneOxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, EthyleneOxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, EthyleneOxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, EthyleneOxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace EthyleneOxideConcentrationMeasurement

namespace HydrogenConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, HydrogenConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, HydrogenConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, HydrogenConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, HydrogenConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, HydrogenConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, HydrogenConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, HydrogenConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, HydrogenConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace HydrogenConcentrationMeasurement

namespace HydrogenSulphideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, HydrogenSulphideConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, HydrogenSulphideConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, HydrogenSulphideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, HydrogenSulphideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, HydrogenSulphideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, HydrogenSulphideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, HydrogenSulphideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, HydrogenSulphideConcentrationMeasurement::Id, Tolerance::Id,
                                       (uint8_t *) &tolerance, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace HydrogenSulphideConcentrationMeasurement

namespace NitricOxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, NitricOxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, NitricOxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, NitricOxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, NitricOxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, NitricOxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, NitricOxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, NitricOxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, NitricOxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace NitricOxideConcentrationMeasurement

namespace NitrogenDioxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, NitrogenDioxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, NitrogenDioxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, NitrogenDioxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, NitrogenDioxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, NitrogenDioxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, NitrogenDioxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, NitrogenDioxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, NitrogenDioxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace NitrogenDioxideConcentrationMeasurement

namespace OxygenConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, OxygenConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, OxygenConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, OxygenConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, OxygenConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, OxygenConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, OxygenConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, OxygenConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, OxygenConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace OxygenConcentrationMeasurement

namespace OzoneConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, OzoneConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, OzoneConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, OzoneConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, OzoneConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, OzoneConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, OzoneConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, OzoneConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, OzoneConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace OzoneConcentrationMeasurement

namespace SulfurDioxideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, SulfurDioxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, SulfurDioxideConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, SulfurDioxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, SulfurDioxideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, SulfurDioxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, SulfurDioxideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, SulfurDioxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, SulfurDioxideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace SulfurDioxideConcentrationMeasurement

namespace DissolvedOxygenConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, DissolvedOxygenConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, DissolvedOxygenConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, DissolvedOxygenConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, DissolvedOxygenConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, DissolvedOxygenConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, DissolvedOxygenConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, DissolvedOxygenConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, DissolvedOxygenConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace DissolvedOxygenConcentrationMeasurement

namespace BromateConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, BromateConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, BromateConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, BromateConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, BromateConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, BromateConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, BromateConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, BromateConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, BromateConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace BromateConcentrationMeasurement

namespace ChloraminesConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChloraminesConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChloraminesConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChloraminesConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChloraminesConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChloraminesConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChloraminesConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, ChloraminesConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, ChloraminesConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace ChloraminesConcentrationMeasurement

namespace ChlorineConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChlorineConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChlorineConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChlorineConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChlorineConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChlorineConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChlorineConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, ChlorineConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, ChlorineConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace ChlorineConcentrationMeasurement

namespace FecalColiformAndEColiConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, FecalColiformAndEColiConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, FecalColiformAndEColiConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, FecalColiformAndEColiConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, FecalColiformAndEColiConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, FecalColiformAndEColiConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, FecalColiformAndEColiConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, FecalColiformAndEColiConcentrationMeasurement::Id, Tolerance::Id,
                                      (uint8_t *) tolerance, sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, FecalColiformAndEColiConcentrationMeasurement::Id, Tolerance::Id,
                                       (uint8_t *) &tolerance, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace FecalColiformAndEColiConcentrationMeasurement

namespace FluorideConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, FluorideConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, FluorideConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, FluorideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, FluorideConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, FluorideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, FluorideConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, FluorideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, FluorideConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace FluorideConcentrationMeasurement

namespace HaloaceticAcidsConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, HaloaceticAcidsConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, HaloaceticAcidsConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, HaloaceticAcidsConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, HaloaceticAcidsConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, HaloaceticAcidsConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, HaloaceticAcidsConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, HaloaceticAcidsConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, HaloaceticAcidsConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace HaloaceticAcidsConcentrationMeasurement

namespace TotalTrihalomethanesConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, TotalTrihalomethanesConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TotalTrihalomethanesConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, TotalTrihalomethanesConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TotalTrihalomethanesConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, TotalTrihalomethanesConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TotalTrihalomethanesConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, TotalTrihalomethanesConcentrationMeasurement::Id, Tolerance::Id,
                                      (uint8_t *) tolerance, sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, TotalTrihalomethanesConcentrationMeasurement::Id, Tolerance::Id,
                                       (uint8_t *) &tolerance, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace TotalTrihalomethanesConcentrationMeasurement

namespace TotalColiformBacteriaConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, TotalColiformBacteriaConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TotalColiformBacteriaConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, TotalColiformBacteriaConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TotalColiformBacteriaConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, TotalColiformBacteriaConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TotalColiformBacteriaConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, TotalColiformBacteriaConcentrationMeasurement::Id, Tolerance::Id,
                                      (uint8_t *) tolerance, sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, TotalColiformBacteriaConcentrationMeasurement::Id, Tolerance::Id,
                                       (uint8_t *) &tolerance, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace TotalColiformBacteriaConcentrationMeasurement

namespace TurbidityConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, TurbidityConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TurbidityConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, TurbidityConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TurbidityConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, TurbidityConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, TurbidityConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, TurbidityConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, TurbidityConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace TurbidityConcentrationMeasurement

namespace CopperConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, CopperConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, CopperConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, CopperConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, CopperConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, CopperConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, CopperConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, CopperConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, CopperConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace CopperConcentrationMeasurement

namespace LeadConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, LeadConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, LeadConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, LeadConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, LeadConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, LeadConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, LeadConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, LeadConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, LeadConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace LeadConcentrationMeasurement

namespace ManganeseConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, ManganeseConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ManganeseConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ManganeseConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ManganeseConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ManganeseConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ManganeseConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, ManganeseConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, ManganeseConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace ManganeseConcentrationMeasurement

namespace SulfateConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, SulfateConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, SulfateConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, SulfateConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, SulfateConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, SulfateConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, SulfateConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, SulfateConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, SulfateConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace SulfateConcentrationMeasurement

namespace BromodichloromethaneConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, BromodichloromethaneConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, BromodichloromethaneConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, BromodichloromethaneConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, BromodichloromethaneConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, BromodichloromethaneConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, BromodichloromethaneConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, BromodichloromethaneConcentrationMeasurement::Id, Tolerance::Id,
                                      (uint8_t *) tolerance, sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, BromodichloromethaneConcentrationMeasurement::Id, Tolerance::Id,
                                       (uint8_t *) &tolerance, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace BromodichloromethaneConcentrationMeasurement

namespace BromoformConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, BromoformConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, BromoformConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, BromoformConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, BromoformConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, BromoformConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, BromoformConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, BromoformConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, BromoformConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace BromoformConcentrationMeasurement

namespace ChlorodibromomethaneConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChlorodibromomethaneConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChlorodibromomethaneConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChlorodibromomethaneConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChlorodibromomethaneConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChlorodibromomethaneConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChlorodibromomethaneConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, ChlorodibromomethaneConcentrationMeasurement::Id, Tolerance::Id,
                                      (uint8_t *) tolerance, sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, ChlorodibromomethaneConcentrationMeasurement::Id, Tolerance::Id,
                                       (uint8_t *) &tolerance, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace ChlorodibromomethaneConcentrationMeasurement

namespace ChloroformConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChloroformConcentrationMeasurement::Id, MeasuredValue::Id,
                                      (uint8_t *) measuredValue, sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChloroformConcentrationMeasurement::Id, MeasuredValue::Id,
                                       (uint8_t *) &measuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChloroformConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChloroformConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, ChloroformConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, ChloroformConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, ChloroformConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, ChloroformConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace ChloroformConcentrationMeasurement

namespace SodiumConcentrationMeasurement {
namespace Attributes {

namespace MeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** measuredValue)
{
    return emberAfReadServerAttribute(endpoint, SodiumConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) measuredValue,
                                      sizeof(*measuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * measuredValue)
{
    return emberAfWriteServerAttribute(endpoint, SodiumConcentrationMeasurement::Id, MeasuredValue::Id, (uint8_t *) &measuredValue,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MeasuredValue

namespace MinMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** minMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, SodiumConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                      (uint8_t *) minMeasuredValue, sizeof(*minMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * minMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, SodiumConcentrationMeasurement::Id, MinMeasuredValue::Id,
                                       (uint8_t *) &minMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MinMeasuredValue

namespace MaxMeasuredValue {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** maxMeasuredValue)
{
    return emberAfReadServerAttribute(endpoint, SodiumConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                      (uint8_t *) maxMeasuredValue, sizeof(*maxMeasuredValue));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * maxMeasuredValue)
{
    return emberAfWriteServerAttribute(endpoint, SodiumConcentrationMeasurement::Id, MaxMeasuredValue::Id,
                                       (uint8_t *) &maxMeasuredValue, ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace MaxMeasuredValue

namespace Tolerance {

EmberAfStatus Get(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t ** tolerance)
{
    return emberAfReadServerAttribute(endpoint, SodiumConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) tolerance,
                                      sizeof(*tolerance));
}
EmberAfStatus Set(chip::EndpointId endpoint, /* TYPE WARNING: single defaults to */ uint8_t * tolerance)
{
    return emberAfWriteServerAttribute(endpoint, SodiumConcentrationMeasurement::Id, Tolerance::Id, (uint8_t *) &tolerance,
                                       ZCL_SINGLE_ATTRIBUTE_TYPE);
}

} // namespace Tolerance

} // namespace Attributes
} // namespace SodiumConcentrationMeasurement

namespace IasZone {
namespace Attributes {

namespace ZoneState {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * zoneState)
{
    return emberAfReadServerAttribute(endpoint, IasZone::Id, ZoneState::Id, (uint8_t *) zoneState, sizeof(*zoneState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t zoneState)
{
    return emberAfWriteServerAttribute(endpoint, IasZone::Id, ZoneState::Id, (uint8_t *) &zoneState, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace ZoneState

namespace ZoneType {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * zoneType)
{
    return emberAfReadServerAttribute(endpoint, IasZone::Id, ZoneType::Id, (uint8_t *) zoneType, sizeof(*zoneType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t zoneType)
{
    return emberAfWriteServerAttribute(endpoint, IasZone::Id, ZoneType::Id, (uint8_t *) &zoneType, ZCL_ENUM16_ATTRIBUTE_TYPE);
}

} // namespace ZoneType

namespace ZoneStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * zoneStatus)
{
    return emberAfReadServerAttribute(endpoint, IasZone::Id, ZoneStatus::Id, (uint8_t *) zoneStatus, sizeof(*zoneStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t zoneStatus)
{
    return emberAfWriteServerAttribute(endpoint, IasZone::Id, ZoneStatus::Id, (uint8_t *) &zoneStatus, ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace ZoneStatus

namespace IasCieAddress {

EmberAfStatus Get(chip::EndpointId endpoint, chip::NodeId * iasCieAddress)
{
    return emberAfReadServerAttribute(endpoint, IasZone::Id, IasCieAddress::Id, (uint8_t *) iasCieAddress, sizeof(*iasCieAddress));
}
EmberAfStatus Set(chip::EndpointId endpoint, chip::NodeId iasCieAddress)
{
    return emberAfWriteServerAttribute(endpoint, IasZone::Id, IasCieAddress::Id, (uint8_t *) &iasCieAddress,
                                       ZCL_NODE_ID_ATTRIBUTE_TYPE);
}

} // namespace IasCieAddress

namespace ZoneId {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * zoneId)
{
    return emberAfReadServerAttribute(endpoint, IasZone::Id, ZoneId::Id, (uint8_t *) zoneId, sizeof(*zoneId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t zoneId)
{
    return emberAfWriteServerAttribute(endpoint, IasZone::Id, ZoneId::Id, (uint8_t *) &zoneId, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace ZoneId

namespace NumberOfZoneSensitivityLevelsSupported {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * numberOfZoneSensitivityLevelsSupported)
{
    return emberAfReadServerAttribute(endpoint, IasZone::Id, NumberOfZoneSensitivityLevelsSupported::Id,
                                      (uint8_t *) numberOfZoneSensitivityLevelsSupported,
                                      sizeof(*numberOfZoneSensitivityLevelsSupported));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t numberOfZoneSensitivityLevelsSupported)
{
    return emberAfWriteServerAttribute(endpoint, IasZone::Id, NumberOfZoneSensitivityLevelsSupported::Id,
                                       (uint8_t *) &numberOfZoneSensitivityLevelsSupported, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace NumberOfZoneSensitivityLevelsSupported

namespace CurrentZoneSensitivityLevel {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentZoneSensitivityLevel)
{
    return emberAfReadServerAttribute(endpoint, IasZone::Id, CurrentZoneSensitivityLevel::Id,
                                      (uint8_t *) currentZoneSensitivityLevel, sizeof(*currentZoneSensitivityLevel));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentZoneSensitivityLevel)
{
    return emberAfWriteServerAttribute(endpoint, IasZone::Id, CurrentZoneSensitivityLevel::Id,
                                       (uint8_t *) &currentZoneSensitivityLevel, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentZoneSensitivityLevel

} // namespace Attributes
} // namespace IasZone

namespace IasWd {
namespace Attributes {

namespace MaxDuration {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * maxDuration)
{
    return emberAfReadServerAttribute(endpoint, IasWd::Id, MaxDuration::Id, (uint8_t *) maxDuration, sizeof(*maxDuration));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t maxDuration)
{
    return emberAfWriteServerAttribute(endpoint, IasWd::Id, MaxDuration::Id, (uint8_t *) &maxDuration, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MaxDuration

} // namespace Attributes
} // namespace IasWd

namespace WakeOnLan {
namespace Attributes {

} // namespace Attributes
} // namespace WakeOnLan

namespace TvChannel {
namespace Attributes {

} // namespace Attributes
} // namespace TvChannel

namespace TargetNavigator {
namespace Attributes {

namespace CurrentNavigatorTarget {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentNavigatorTarget)
{
    return emberAfReadServerAttribute(endpoint, TargetNavigator::Id, CurrentNavigatorTarget::Id, (uint8_t *) currentNavigatorTarget,
                                      sizeof(*currentNavigatorTarget));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentNavigatorTarget)
{
    return emberAfWriteServerAttribute(endpoint, TargetNavigator::Id, CurrentNavigatorTarget::Id,
                                       (uint8_t *) &currentNavigatorTarget, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentNavigatorTarget

} // namespace Attributes
} // namespace TargetNavigator

namespace MediaPlayback {
namespace Attributes {

namespace PlaybackState {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * playbackState)
{
    return emberAfReadServerAttribute(endpoint, MediaPlayback::Id, PlaybackState::Id, (uint8_t *) playbackState,
                                      sizeof(*playbackState));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t playbackState)
{
    return emberAfWriteServerAttribute(endpoint, MediaPlayback::Id, PlaybackState::Id, (uint8_t *) &playbackState,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace PlaybackState

namespace StartTime {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * startTime)
{
    return emberAfReadServerAttribute(endpoint, MediaPlayback::Id, StartTime::Id, (uint8_t *) startTime, sizeof(*startTime));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t startTime)
{
    return emberAfWriteServerAttribute(endpoint, MediaPlayback::Id, StartTime::Id, (uint8_t *) &startTime,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace StartTime

namespace Duration {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * duration)
{
    return emberAfReadServerAttribute(endpoint, MediaPlayback::Id, Duration::Id, (uint8_t *) duration, sizeof(*duration));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t duration)
{
    return emberAfWriteServerAttribute(endpoint, MediaPlayback::Id, Duration::Id, (uint8_t *) &duration, ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace Duration

namespace PositionUpdatedAt {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * positionUpdatedAt)
{
    return emberAfReadServerAttribute(endpoint, MediaPlayback::Id, PositionUpdatedAt::Id, (uint8_t *) positionUpdatedAt,
                                      sizeof(*positionUpdatedAt));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t positionUpdatedAt)
{
    return emberAfWriteServerAttribute(endpoint, MediaPlayback::Id, PositionUpdatedAt::Id, (uint8_t *) &positionUpdatedAt,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace PositionUpdatedAt

namespace Position {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * position)
{
    return emberAfReadServerAttribute(endpoint, MediaPlayback::Id, Position::Id, (uint8_t *) position, sizeof(*position));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t position)
{
    return emberAfWriteServerAttribute(endpoint, MediaPlayback::Id, Position::Id, (uint8_t *) &position, ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace Position

namespace PlaybackSpeed {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * playbackSpeed)
{
    return emberAfReadServerAttribute(endpoint, MediaPlayback::Id, PlaybackSpeed::Id, (uint8_t *) playbackSpeed,
                                      sizeof(*playbackSpeed));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t playbackSpeed)
{
    return emberAfWriteServerAttribute(endpoint, MediaPlayback::Id, PlaybackSpeed::Id, (uint8_t *) &playbackSpeed,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace PlaybackSpeed

namespace SeekRangeEnd {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * seekRangeEnd)
{
    return emberAfReadServerAttribute(endpoint, MediaPlayback::Id, SeekRangeEnd::Id, (uint8_t *) seekRangeEnd,
                                      sizeof(*seekRangeEnd));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t seekRangeEnd)
{
    return emberAfWriteServerAttribute(endpoint, MediaPlayback::Id, SeekRangeEnd::Id, (uint8_t *) &seekRangeEnd,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace SeekRangeEnd

namespace SeekRangeStart {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * seekRangeStart)
{
    return emberAfReadServerAttribute(endpoint, MediaPlayback::Id, SeekRangeStart::Id, (uint8_t *) seekRangeStart,
                                      sizeof(*seekRangeStart));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t seekRangeStart)
{
    return emberAfWriteServerAttribute(endpoint, MediaPlayback::Id, SeekRangeStart::Id, (uint8_t *) &seekRangeStart,
                                       ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace SeekRangeStart

} // namespace Attributes
} // namespace MediaPlayback

namespace MediaInput {
namespace Attributes {

namespace CurrentMediaInput {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentMediaInput)
{
    return emberAfReadServerAttribute(endpoint, MediaInput::Id, CurrentMediaInput::Id, (uint8_t *) currentMediaInput,
                                      sizeof(*currentMediaInput));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentMediaInput)
{
    return emberAfWriteServerAttribute(endpoint, MediaInput::Id, CurrentMediaInput::Id, (uint8_t *) &currentMediaInput,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentMediaInput

} // namespace Attributes
} // namespace MediaInput

namespace ContentLauncher {
namespace Attributes {

} // namespace Attributes
} // namespace ContentLauncher

namespace AudioOutput {
namespace Attributes {

namespace CurrentAudioOutput {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * currentAudioOutput)
{
    return emberAfReadServerAttribute(endpoint, AudioOutput::Id, CurrentAudioOutput::Id, (uint8_t *) currentAudioOutput,
                                      sizeof(*currentAudioOutput));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t currentAudioOutput)
{
    return emberAfWriteServerAttribute(endpoint, AudioOutput::Id, CurrentAudioOutput::Id, (uint8_t *) &currentAudioOutput,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CurrentAudioOutput

} // namespace Attributes
} // namespace AudioOutput

namespace ApplicationLauncher {
namespace Attributes {

namespace CatalogVendorId {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * catalogVendorId)
{
    return emberAfReadServerAttribute(endpoint, ApplicationLauncher::Id, CatalogVendorId::Id, (uint8_t *) catalogVendorId,
                                      sizeof(*catalogVendorId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t catalogVendorId)
{
    return emberAfWriteServerAttribute(endpoint, ApplicationLauncher::Id, CatalogVendorId::Id, (uint8_t *) &catalogVendorId,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CatalogVendorId

namespace ApplicationId {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * applicationId)
{
    return emberAfReadServerAttribute(endpoint, ApplicationLauncher::Id, ApplicationId::Id, (uint8_t *) applicationId,
                                      sizeof(*applicationId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t applicationId)
{
    return emberAfWriteServerAttribute(endpoint, ApplicationLauncher::Id, ApplicationId::Id, (uint8_t *) &applicationId,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace ApplicationId

} // namespace Attributes
} // namespace ApplicationLauncher

namespace ApplicationBasic {
namespace Attributes {

namespace VendorId {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * vendorId)
{
    return emberAfReadServerAttribute(endpoint, ApplicationBasic::Id, VendorId::Id, (uint8_t *) vendorId, sizeof(*vendorId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t vendorId)
{
    return emberAfWriteServerAttribute(endpoint, ApplicationBasic::Id, VendorId::Id, (uint8_t *) &vendorId,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace VendorId

namespace ProductId {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * productId)
{
    return emberAfReadServerAttribute(endpoint, ApplicationBasic::Id, ProductId::Id, (uint8_t *) productId, sizeof(*productId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t productId)
{
    return emberAfWriteServerAttribute(endpoint, ApplicationBasic::Id, ProductId::Id, (uint8_t *) &productId,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ProductId

namespace CatalogVendorId {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * catalogVendorId)
{
    return emberAfReadServerAttribute(endpoint, ApplicationBasic::Id, CatalogVendorId::Id, (uint8_t *) catalogVendorId,
                                      sizeof(*catalogVendorId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t catalogVendorId)
{
    return emberAfWriteServerAttribute(endpoint, ApplicationBasic::Id, CatalogVendorId::Id, (uint8_t *) &catalogVendorId,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CatalogVendorId

namespace ApplicationStatus {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * applicationStatus)
{
    return emberAfReadServerAttribute(endpoint, ApplicationBasic::Id, ApplicationStatus::Id, (uint8_t *) applicationStatus,
                                      sizeof(*applicationStatus));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t applicationStatus)
{
    return emberAfWriteServerAttribute(endpoint, ApplicationBasic::Id, ApplicationStatus::Id, (uint8_t *) &applicationStatus,
                                       ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace ApplicationStatus

} // namespace Attributes
} // namespace ApplicationBasic

namespace TestCluster {
namespace Attributes {

namespace Boolean {

EmberAfStatus Get(chip::EndpointId endpoint, bool * boolean)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Boolean::Id, (uint8_t *) boolean, sizeof(*boolean));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool boolean)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Boolean::Id, (uint8_t *) &boolean, ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace Boolean

namespace Bitmap8 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * bitmap8)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Bitmap8::Id, (uint8_t *) bitmap8, sizeof(*bitmap8));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t bitmap8)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Bitmap8::Id, (uint8_t *) &bitmap8, ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace Bitmap8

namespace Bitmap16 {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * bitmap16)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Bitmap16::Id, (uint8_t *) bitmap16, sizeof(*bitmap16));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t bitmap16)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Bitmap16::Id, (uint8_t *) &bitmap16, ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace Bitmap16

namespace Bitmap32 {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * bitmap32)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Bitmap32::Id, (uint8_t *) bitmap32, sizeof(*bitmap32));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t bitmap32)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Bitmap32::Id, (uint8_t *) &bitmap32, ZCL_BITMAP32_ATTRIBUTE_TYPE);
}

} // namespace Bitmap32

namespace Bitmap64 {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * bitmap64)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Bitmap64::Id, (uint8_t *) bitmap64, sizeof(*bitmap64));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t bitmap64)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Bitmap64::Id, (uint8_t *) &bitmap64, ZCL_BITMAP64_ATTRIBUTE_TYPE);
}

} // namespace Bitmap64

namespace Int8u {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * int8u)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Int8u::Id, (uint8_t *) int8u, sizeof(*int8u));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t int8u)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Int8u::Id, (uint8_t *) &int8u, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace Int8u

namespace Int16u {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * int16u)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Int16u::Id, (uint8_t *) int16u, sizeof(*int16u));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t int16u)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Int16u::Id, (uint8_t *) &int16u, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace Int16u

namespace Int32u {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * int32u)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Int32u::Id, (uint8_t *) int32u, sizeof(*int32u));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t int32u)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Int32u::Id, (uint8_t *) &int32u, ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace Int32u

namespace Int64u {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * int64u)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Int64u::Id, (uint8_t *) int64u, sizeof(*int64u));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t int64u)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Int64u::Id, (uint8_t *) &int64u, ZCL_INT64U_ATTRIBUTE_TYPE);
}

} // namespace Int64u

namespace Int8s {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * int8s)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Int8s::Id, (uint8_t *) int8s, sizeof(*int8s));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t int8s)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Int8s::Id, (uint8_t *) &int8s, ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace Int8s

namespace Int16s {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * int16s)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Int16s::Id, (uint8_t *) int16s, sizeof(*int16s));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t int16s)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Int16s::Id, (uint8_t *) &int16s, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace Int16s

namespace Int32s {

EmberAfStatus Get(chip::EndpointId endpoint, int32_t * int32s)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Int32s::Id, (uint8_t *) int32s, sizeof(*int32s));
}
EmberAfStatus Set(chip::EndpointId endpoint, int32_t int32s)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Int32s::Id, (uint8_t *) &int32s, ZCL_INT32S_ATTRIBUTE_TYPE);
}

} // namespace Int32s

namespace Int64s {

EmberAfStatus Get(chip::EndpointId endpoint, int64_t * int64s)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Int64s::Id, (uint8_t *) int64s, sizeof(*int64s));
}
EmberAfStatus Set(chip::EndpointId endpoint, int64_t int64s)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Int64s::Id, (uint8_t *) &int64s, ZCL_INT64S_ATTRIBUTE_TYPE);
}

} // namespace Int64s

namespace Enum8 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * enum8)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Enum8::Id, (uint8_t *) enum8, sizeof(*enum8));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t enum8)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Enum8::Id, (uint8_t *) &enum8, ZCL_ENUM8_ATTRIBUTE_TYPE);
}

} // namespace Enum8

namespace Enum16 {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * enum16)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Enum16::Id, (uint8_t *) enum16, sizeof(*enum16));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t enum16)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Enum16::Id, (uint8_t *) &enum16, ZCL_ENUM16_ATTRIBUTE_TYPE);
}

} // namespace Enum16

namespace EpochUs {

EmberAfStatus Get(chip::EndpointId endpoint, uint64_t * epochUs)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, EpochUs::Id, (uint8_t *) epochUs, sizeof(*epochUs));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint64_t epochUs)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, EpochUs::Id, (uint8_t *) &epochUs, ZCL_EPOCH_US_ATTRIBUTE_TYPE);
}

} // namespace EpochUs

namespace EpochS {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * epochS)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, EpochS::Id, (uint8_t *) epochS, sizeof(*epochS));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t epochS)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, EpochS::Id, (uint8_t *) &epochS, ZCL_EPOCH_S_ATTRIBUTE_TYPE);
}

} // namespace EpochS

namespace Unsupported {

EmberAfStatus Get(chip::EndpointId endpoint, bool * unsupported)
{
    return emberAfReadServerAttribute(endpoint, TestCluster::Id, Unsupported::Id, (uint8_t *) unsupported, sizeof(*unsupported));
}
EmberAfStatus Set(chip::EndpointId endpoint, bool unsupported)
{
    return emberAfWriteServerAttribute(endpoint, TestCluster::Id, Unsupported::Id, (uint8_t *) &unsupported,
                                       ZCL_BOOLEAN_ATTRIBUTE_TYPE);
}

} // namespace Unsupported

} // namespace Attributes
} // namespace TestCluster

namespace ApplianceIdentification {
namespace Attributes {

namespace CompanyId {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * companyId)
{
    return emberAfReadServerAttribute(endpoint, ApplianceIdentification::Id, CompanyId::Id, (uint8_t *) companyId,
                                      sizeof(*companyId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t companyId)
{
    return emberAfWriteServerAttribute(endpoint, ApplianceIdentification::Id, CompanyId::Id, (uint8_t *) &companyId,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace CompanyId

namespace BrandId {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * brandId)
{
    return emberAfReadServerAttribute(endpoint, ApplianceIdentification::Id, BrandId::Id, (uint8_t *) brandId, sizeof(*brandId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t brandId)
{
    return emberAfWriteServerAttribute(endpoint, ApplianceIdentification::Id, BrandId::Id, (uint8_t *) &brandId,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace BrandId

namespace ProductTypeId {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * productTypeId)
{
    return emberAfReadServerAttribute(endpoint, ApplianceIdentification::Id, ProductTypeId::Id, (uint8_t *) productTypeId,
                                      sizeof(*productTypeId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t productTypeId)
{
    return emberAfWriteServerAttribute(endpoint, ApplianceIdentification::Id, ProductTypeId::Id, (uint8_t *) &productTypeId,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ProductTypeId

namespace CecedSpecificationVersion {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * cecedSpecificationVersion)
{
    return emberAfReadServerAttribute(endpoint, ApplianceIdentification::Id, CecedSpecificationVersion::Id,
                                      (uint8_t *) cecedSpecificationVersion, sizeof(*cecedSpecificationVersion));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t cecedSpecificationVersion)
{
    return emberAfWriteServerAttribute(endpoint, ApplianceIdentification::Id, CecedSpecificationVersion::Id,
                                       (uint8_t *) &cecedSpecificationVersion, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace CecedSpecificationVersion

} // namespace Attributes
} // namespace ApplianceIdentification

namespace MeterIdentification {
namespace Attributes {

namespace MeterTypeId {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * meterTypeId)
{
    return emberAfReadServerAttribute(endpoint, MeterIdentification::Id, MeterTypeId::Id, (uint8_t *) meterTypeId,
                                      sizeof(*meterTypeId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t meterTypeId)
{
    return emberAfWriteServerAttribute(endpoint, MeterIdentification::Id, MeterTypeId::Id, (uint8_t *) &meterTypeId,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace MeterTypeId

namespace DataQualityId {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * dataQualityId)
{
    return emberAfReadServerAttribute(endpoint, MeterIdentification::Id, DataQualityId::Id, (uint8_t *) dataQualityId,
                                      sizeof(*dataQualityId));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t dataQualityId)
{
    return emberAfWriteServerAttribute(endpoint, MeterIdentification::Id, DataQualityId::Id, (uint8_t *) &dataQualityId,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace DataQualityId

} // namespace Attributes
} // namespace MeterIdentification

namespace ApplianceStatistics {
namespace Attributes {

namespace LogMaxSize {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * logMaxSize)
{
    return emberAfReadServerAttribute(endpoint, ApplianceStatistics::Id, LogMaxSize::Id, (uint8_t *) logMaxSize,
                                      sizeof(*logMaxSize));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t logMaxSize)
{
    return emberAfWriteServerAttribute(endpoint, ApplianceStatistics::Id, LogMaxSize::Id, (uint8_t *) &logMaxSize,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace LogMaxSize

namespace LogQueueMaxSize {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * logQueueMaxSize)
{
    return emberAfReadServerAttribute(endpoint, ApplianceStatistics::Id, LogQueueMaxSize::Id, (uint8_t *) logQueueMaxSize,
                                      sizeof(*logQueueMaxSize));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t logQueueMaxSize)
{
    return emberAfWriteServerAttribute(endpoint, ApplianceStatistics::Id, LogQueueMaxSize::Id, (uint8_t *) &logQueueMaxSize,
                                       ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace LogQueueMaxSize

} // namespace Attributes
} // namespace ApplianceStatistics

namespace ElectricalMeasurement {
namespace Attributes {

namespace MeasurementType {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * measurementType)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, MeasurementType::Id, (uint8_t *) measurementType,
                                      sizeof(*measurementType));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t measurementType)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, MeasurementType::Id, (uint8_t *) &measurementType,
                                       ZCL_BITMAP32_ATTRIBUTE_TYPE);
}

} // namespace MeasurementType

namespace DcVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * dcVoltage)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltage::Id, (uint8_t *) dcVoltage,
                                      sizeof(*dcVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t dcVoltage)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltage::Id, (uint8_t *) &dcVoltage,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace DcVoltage

namespace DcVoltageMin {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * dcVoltageMin)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltageMin::Id, (uint8_t *) dcVoltageMin,
                                      sizeof(*dcVoltageMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t dcVoltageMin)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltageMin::Id, (uint8_t *) &dcVoltageMin,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace DcVoltageMin

namespace DcVoltageMax {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * dcVoltageMax)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltageMax::Id, (uint8_t *) dcVoltageMax,
                                      sizeof(*dcVoltageMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t dcVoltageMax)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltageMax::Id, (uint8_t *) &dcVoltageMax,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace DcVoltageMax

namespace DcCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * dcCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrent::Id, (uint8_t *) dcCurrent,
                                      sizeof(*dcCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t dcCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrent::Id, (uint8_t *) &dcCurrent,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace DcCurrent

namespace DcCurrentMin {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * dcCurrentMin)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrentMin::Id, (uint8_t *) dcCurrentMin,
                                      sizeof(*dcCurrentMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t dcCurrentMin)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrentMin::Id, (uint8_t *) &dcCurrentMin,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace DcCurrentMin

namespace DcCurrentMax {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * dcCurrentMax)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrentMax::Id, (uint8_t *) dcCurrentMax,
                                      sizeof(*dcCurrentMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t dcCurrentMax)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrentMax::Id, (uint8_t *) &dcCurrentMax,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace DcCurrentMax

namespace DcPower {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * dcPower)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcPower::Id, (uint8_t *) dcPower, sizeof(*dcPower));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t dcPower)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcPower::Id, (uint8_t *) &dcPower,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace DcPower

namespace DcPowerMin {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * dcPowerMin)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcPowerMin::Id, (uint8_t *) dcPowerMin,
                                      sizeof(*dcPowerMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t dcPowerMin)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcPowerMin::Id, (uint8_t *) &dcPowerMin,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace DcPowerMin

namespace DcPowerMax {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * dcPowerMax)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcPowerMax::Id, (uint8_t *) dcPowerMax,
                                      sizeof(*dcPowerMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t dcPowerMax)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcPowerMax::Id, (uint8_t *) &dcPowerMax,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace DcPowerMax

namespace DcVoltageMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * dcVoltageMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltageMultiplier::Id, (uint8_t *) dcVoltageMultiplier,
                                      sizeof(*dcVoltageMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t dcVoltageMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltageMultiplier::Id,
                                       (uint8_t *) &dcVoltageMultiplier, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace DcVoltageMultiplier

namespace DcVoltageDivisor {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * dcVoltageDivisor)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltageDivisor::Id, (uint8_t *) dcVoltageDivisor,
                                      sizeof(*dcVoltageDivisor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t dcVoltageDivisor)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcVoltageDivisor::Id, (uint8_t *) &dcVoltageDivisor,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace DcVoltageDivisor

namespace DcCurrentMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * dcCurrentMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrentMultiplier::Id, (uint8_t *) dcCurrentMultiplier,
                                      sizeof(*dcCurrentMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t dcCurrentMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrentMultiplier::Id,
                                       (uint8_t *) &dcCurrentMultiplier, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace DcCurrentMultiplier

namespace DcCurrentDivisor {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * dcCurrentDivisor)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrentDivisor::Id, (uint8_t *) dcCurrentDivisor,
                                      sizeof(*dcCurrentDivisor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t dcCurrentDivisor)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcCurrentDivisor::Id, (uint8_t *) &dcCurrentDivisor,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace DcCurrentDivisor

namespace DcPowerMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * dcPowerMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcPowerMultiplier::Id, (uint8_t *) dcPowerMultiplier,
                                      sizeof(*dcPowerMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t dcPowerMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcPowerMultiplier::Id, (uint8_t *) &dcPowerMultiplier,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace DcPowerMultiplier

namespace DcPowerDivisor {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * dcPowerDivisor)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, DcPowerDivisor::Id, (uint8_t *) dcPowerDivisor,
                                      sizeof(*dcPowerDivisor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t dcPowerDivisor)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, DcPowerDivisor::Id, (uint8_t *) &dcPowerDivisor,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace DcPowerDivisor

namespace AcFrequency {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acFrequency)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequency::Id, (uint8_t *) acFrequency,
                                      sizeof(*acFrequency));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acFrequency)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequency::Id, (uint8_t *) &acFrequency,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcFrequency

namespace AcFrequencyMin {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acFrequencyMin)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequencyMin::Id, (uint8_t *) acFrequencyMin,
                                      sizeof(*acFrequencyMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acFrequencyMin)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequencyMin::Id, (uint8_t *) &acFrequencyMin,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcFrequencyMin

namespace AcFrequencyMax {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acFrequencyMax)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequencyMax::Id, (uint8_t *) acFrequencyMax,
                                      sizeof(*acFrequencyMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acFrequencyMax)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequencyMax::Id, (uint8_t *) &acFrequencyMax,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcFrequencyMax

namespace NeutralCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * neutralCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, NeutralCurrent::Id, (uint8_t *) neutralCurrent,
                                      sizeof(*neutralCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t neutralCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, NeutralCurrent::Id, (uint8_t *) &neutralCurrent,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace NeutralCurrent

namespace TotalActivePower {

EmberAfStatus Get(chip::EndpointId endpoint, int32_t * totalActivePower)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, TotalActivePower::Id, (uint8_t *) totalActivePower,
                                      sizeof(*totalActivePower));
}
EmberAfStatus Set(chip::EndpointId endpoint, int32_t totalActivePower)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, TotalActivePower::Id, (uint8_t *) &totalActivePower,
                                       ZCL_INT32S_ATTRIBUTE_TYPE);
}

} // namespace TotalActivePower

namespace TotalReactivePower {

EmberAfStatus Get(chip::EndpointId endpoint, int32_t * totalReactivePower)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, TotalReactivePower::Id, (uint8_t *) totalReactivePower,
                                      sizeof(*totalReactivePower));
}
EmberAfStatus Set(chip::EndpointId endpoint, int32_t totalReactivePower)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, TotalReactivePower::Id, (uint8_t *) &totalReactivePower,
                                       ZCL_INT32S_ATTRIBUTE_TYPE);
}

} // namespace TotalReactivePower

namespace TotalApparentPower {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * totalApparentPower)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, TotalApparentPower::Id, (uint8_t *) totalApparentPower,
                                      sizeof(*totalApparentPower));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t totalApparentPower)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, TotalApparentPower::Id, (uint8_t *) &totalApparentPower,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace TotalApparentPower

namespace Measured1stHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measured1stHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, Measured1stHarmonicCurrent::Id,
                                      (uint8_t *) measured1stHarmonicCurrent, sizeof(*measured1stHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measured1stHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, Measured1stHarmonicCurrent::Id,
                                       (uint8_t *) &measured1stHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace Measured1stHarmonicCurrent

namespace Measured3rdHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measured3rdHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, Measured3rdHarmonicCurrent::Id,
                                      (uint8_t *) measured3rdHarmonicCurrent, sizeof(*measured3rdHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measured3rdHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, Measured3rdHarmonicCurrent::Id,
                                       (uint8_t *) &measured3rdHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace Measured3rdHarmonicCurrent

namespace Measured5thHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measured5thHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, Measured5thHarmonicCurrent::Id,
                                      (uint8_t *) measured5thHarmonicCurrent, sizeof(*measured5thHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measured5thHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, Measured5thHarmonicCurrent::Id,
                                       (uint8_t *) &measured5thHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace Measured5thHarmonicCurrent

namespace Measured7thHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measured7thHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, Measured7thHarmonicCurrent::Id,
                                      (uint8_t *) measured7thHarmonicCurrent, sizeof(*measured7thHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measured7thHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, Measured7thHarmonicCurrent::Id,
                                       (uint8_t *) &measured7thHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace Measured7thHarmonicCurrent

namespace Measured9thHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measured9thHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, Measured9thHarmonicCurrent::Id,
                                      (uint8_t *) measured9thHarmonicCurrent, sizeof(*measured9thHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measured9thHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, Measured9thHarmonicCurrent::Id,
                                       (uint8_t *) &measured9thHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace Measured9thHarmonicCurrent

namespace Measured11thHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measured11thHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, Measured11thHarmonicCurrent::Id,
                                      (uint8_t *) measured11thHarmonicCurrent, sizeof(*measured11thHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measured11thHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, Measured11thHarmonicCurrent::Id,
                                       (uint8_t *) &measured11thHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace Measured11thHarmonicCurrent

namespace MeasuredPhase1stHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measuredPhase1stHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase1stHarmonicCurrent::Id,
                                      (uint8_t *) measuredPhase1stHarmonicCurrent, sizeof(*measuredPhase1stHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measuredPhase1stHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase1stHarmonicCurrent::Id,
                                       (uint8_t *) &measuredPhase1stHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MeasuredPhase1stHarmonicCurrent

namespace MeasuredPhase3rdHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measuredPhase3rdHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase3rdHarmonicCurrent::Id,
                                      (uint8_t *) measuredPhase3rdHarmonicCurrent, sizeof(*measuredPhase3rdHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measuredPhase3rdHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase3rdHarmonicCurrent::Id,
                                       (uint8_t *) &measuredPhase3rdHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MeasuredPhase3rdHarmonicCurrent

namespace MeasuredPhase5thHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measuredPhase5thHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase5thHarmonicCurrent::Id,
                                      (uint8_t *) measuredPhase5thHarmonicCurrent, sizeof(*measuredPhase5thHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measuredPhase5thHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase5thHarmonicCurrent::Id,
                                       (uint8_t *) &measuredPhase5thHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MeasuredPhase5thHarmonicCurrent

namespace MeasuredPhase7thHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measuredPhase7thHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase7thHarmonicCurrent::Id,
                                      (uint8_t *) measuredPhase7thHarmonicCurrent, sizeof(*measuredPhase7thHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measuredPhase7thHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase7thHarmonicCurrent::Id,
                                       (uint8_t *) &measuredPhase7thHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MeasuredPhase7thHarmonicCurrent

namespace MeasuredPhase9thHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measuredPhase9thHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase9thHarmonicCurrent::Id,
                                      (uint8_t *) measuredPhase9thHarmonicCurrent, sizeof(*measuredPhase9thHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measuredPhase9thHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase9thHarmonicCurrent::Id,
                                       (uint8_t *) &measuredPhase9thHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MeasuredPhase9thHarmonicCurrent

namespace MeasuredPhase11thHarmonicCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * measuredPhase11thHarmonicCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase11thHarmonicCurrent::Id,
                                      (uint8_t *) measuredPhase11thHarmonicCurrent, sizeof(*measuredPhase11thHarmonicCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t measuredPhase11thHarmonicCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, MeasuredPhase11thHarmonicCurrent::Id,
                                       (uint8_t *) &measuredPhase11thHarmonicCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace MeasuredPhase11thHarmonicCurrent

namespace AcFrequencyMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acFrequencyMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequencyMultiplier::Id,
                                      (uint8_t *) acFrequencyMultiplier, sizeof(*acFrequencyMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acFrequencyMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequencyMultiplier::Id,
                                       (uint8_t *) &acFrequencyMultiplier, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcFrequencyMultiplier

namespace AcFrequencyDivisor {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acFrequencyDivisor)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequencyDivisor::Id, (uint8_t *) acFrequencyDivisor,
                                      sizeof(*acFrequencyDivisor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acFrequencyDivisor)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcFrequencyDivisor::Id, (uint8_t *) &acFrequencyDivisor,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcFrequencyDivisor

namespace PowerMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * powerMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, PowerMultiplier::Id, (uint8_t *) powerMultiplier,
                                      sizeof(*powerMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t powerMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, PowerMultiplier::Id, (uint8_t *) &powerMultiplier,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace PowerMultiplier

namespace PowerDivisor {

EmberAfStatus Get(chip::EndpointId endpoint, uint32_t * powerDivisor)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, PowerDivisor::Id, (uint8_t *) powerDivisor,
                                      sizeof(*powerDivisor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint32_t powerDivisor)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, PowerDivisor::Id, (uint8_t *) &powerDivisor,
                                       ZCL_INT32U_ATTRIBUTE_TYPE);
}

} // namespace PowerDivisor

namespace HarmonicCurrentMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * harmonicCurrentMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, HarmonicCurrentMultiplier::Id,
                                      (uint8_t *) harmonicCurrentMultiplier, sizeof(*harmonicCurrentMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t harmonicCurrentMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, HarmonicCurrentMultiplier::Id,
                                       (uint8_t *) &harmonicCurrentMultiplier, ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace HarmonicCurrentMultiplier

namespace PhaseHarmonicCurrentMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * phaseHarmonicCurrentMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, PhaseHarmonicCurrentMultiplier::Id,
                                      (uint8_t *) phaseHarmonicCurrentMultiplier, sizeof(*phaseHarmonicCurrentMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t phaseHarmonicCurrentMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, PhaseHarmonicCurrentMultiplier::Id,
                                       (uint8_t *) &phaseHarmonicCurrentMultiplier, ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace PhaseHarmonicCurrentMultiplier

namespace InstantaneousVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * instantaneousVoltage)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousVoltage::Id,
                                      (uint8_t *) instantaneousVoltage, sizeof(*instantaneousVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t instantaneousVoltage)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousVoltage::Id,
                                       (uint8_t *) &instantaneousVoltage, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace InstantaneousVoltage

namespace InstantaneousLineCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * instantaneousLineCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousLineCurrent::Id,
                                      (uint8_t *) instantaneousLineCurrent, sizeof(*instantaneousLineCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t instantaneousLineCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousLineCurrent::Id,
                                       (uint8_t *) &instantaneousLineCurrent, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace InstantaneousLineCurrent

namespace InstantaneousActiveCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * instantaneousActiveCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousActiveCurrent::Id,
                                      (uint8_t *) instantaneousActiveCurrent, sizeof(*instantaneousActiveCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t instantaneousActiveCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousActiveCurrent::Id,
                                       (uint8_t *) &instantaneousActiveCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace InstantaneousActiveCurrent

namespace InstantaneousReactiveCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * instantaneousReactiveCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousReactiveCurrent::Id,
                                      (uint8_t *) instantaneousReactiveCurrent, sizeof(*instantaneousReactiveCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t instantaneousReactiveCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousReactiveCurrent::Id,
                                       (uint8_t *) &instantaneousReactiveCurrent, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace InstantaneousReactiveCurrent

namespace InstantaneousPower {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * instantaneousPower)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousPower::Id, (uint8_t *) instantaneousPower,
                                      sizeof(*instantaneousPower));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t instantaneousPower)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, InstantaneousPower::Id, (uint8_t *) &instantaneousPower,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace InstantaneousPower

namespace RmsVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltage)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltage::Id, (uint8_t *) rmsVoltage,
                                      sizeof(*rmsVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltage)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltage::Id, (uint8_t *) &rmsVoltage,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltage

namespace RmsVoltageMin {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageMin)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMin::Id, (uint8_t *) rmsVoltageMin,
                                      sizeof(*rmsVoltageMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageMin)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMin::Id, (uint8_t *) &rmsVoltageMin,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageMin

namespace RmsVoltageMax {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageMax)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMax::Id, (uint8_t *) rmsVoltageMax,
                                      sizeof(*rmsVoltageMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageMax)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMax::Id, (uint8_t *) &rmsVoltageMax,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageMax

namespace RmsCurrent {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsCurrent)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrent::Id, (uint8_t *) rmsCurrent,
                                      sizeof(*rmsCurrent));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsCurrent)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrent::Id, (uint8_t *) &rmsCurrent,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsCurrent

namespace RmsCurrentMin {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsCurrentMin)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMin::Id, (uint8_t *) rmsCurrentMin,
                                      sizeof(*rmsCurrentMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsCurrentMin)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMin::Id, (uint8_t *) &rmsCurrentMin,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsCurrentMin

namespace RmsCurrentMax {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsCurrentMax)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMax::Id, (uint8_t *) rmsCurrentMax,
                                      sizeof(*rmsCurrentMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsCurrentMax)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMax::Id, (uint8_t *) &rmsCurrentMax,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsCurrentMax

namespace ActivePower {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activePower)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePower::Id, (uint8_t *) activePower,
                                      sizeof(*activePower));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activePower)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePower::Id, (uint8_t *) &activePower,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActivePower

namespace ActivePowerMin {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activePowerMin)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMin::Id, (uint8_t *) activePowerMin,
                                      sizeof(*activePowerMin));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activePowerMin)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMin::Id, (uint8_t *) &activePowerMin,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActivePowerMin

namespace ActivePowerMax {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activePowerMax)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMax::Id, (uint8_t *) activePowerMax,
                                      sizeof(*activePowerMax));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activePowerMax)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMax::Id, (uint8_t *) &activePowerMax,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActivePowerMax

namespace ReactivePower {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * reactivePower)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ReactivePower::Id, (uint8_t *) reactivePower,
                                      sizeof(*reactivePower));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t reactivePower)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ReactivePower::Id, (uint8_t *) &reactivePower,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ReactivePower

namespace ApparentPower {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * apparentPower)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ApparentPower::Id, (uint8_t *) apparentPower,
                                      sizeof(*apparentPower));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t apparentPower)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ApparentPower::Id, (uint8_t *) &apparentPower,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ApparentPower

namespace PowerFactor {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * powerFactor)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, PowerFactor::Id, (uint8_t *) powerFactor,
                                      sizeof(*powerFactor));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t powerFactor)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, PowerFactor::Id, (uint8_t *) &powerFactor,
                                       ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace PowerFactor

namespace AverageRmsVoltageMeasurementPeriod {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * averageRmsVoltageMeasurementPeriod)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsVoltageMeasurementPeriod::Id,
                                      (uint8_t *) averageRmsVoltageMeasurementPeriod, sizeof(*averageRmsVoltageMeasurementPeriod));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t averageRmsVoltageMeasurementPeriod)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsVoltageMeasurementPeriod::Id,
                                       (uint8_t *) &averageRmsVoltageMeasurementPeriod, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsVoltageMeasurementPeriod

namespace AverageRmsUnderVoltageCounter {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * averageRmsUnderVoltageCounter)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsUnderVoltageCounter::Id,
                                      (uint8_t *) averageRmsUnderVoltageCounter, sizeof(*averageRmsUnderVoltageCounter));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t averageRmsUnderVoltageCounter)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsUnderVoltageCounter::Id,
                                       (uint8_t *) &averageRmsUnderVoltageCounter, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsUnderVoltageCounter

namespace RmsExtremeOverVoltagePeriod {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsExtremeOverVoltagePeriod)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeOverVoltagePeriod::Id,
                                      (uint8_t *) rmsExtremeOverVoltagePeriod, sizeof(*rmsExtremeOverVoltagePeriod));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsExtremeOverVoltagePeriod)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeOverVoltagePeriod::Id,
                                       (uint8_t *) &rmsExtremeOverVoltagePeriod, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsExtremeOverVoltagePeriod

namespace RmsExtremeUnderVoltagePeriod {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsExtremeUnderVoltagePeriod)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeUnderVoltagePeriod::Id,
                                      (uint8_t *) rmsExtremeUnderVoltagePeriod, sizeof(*rmsExtremeUnderVoltagePeriod));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsExtremeUnderVoltagePeriod)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeUnderVoltagePeriod::Id,
                                       (uint8_t *) &rmsExtremeUnderVoltagePeriod, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsExtremeUnderVoltagePeriod

namespace RmsVoltageSagPeriod {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageSagPeriod)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSagPeriod::Id, (uint8_t *) rmsVoltageSagPeriod,
                                      sizeof(*rmsVoltageSagPeriod));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageSagPeriod)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSagPeriod::Id,
                                       (uint8_t *) &rmsVoltageSagPeriod, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageSagPeriod

namespace RmsVoltageSwellPeriod {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageSwellPeriod)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSwellPeriod::Id,
                                      (uint8_t *) rmsVoltageSwellPeriod, sizeof(*rmsVoltageSwellPeriod));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageSwellPeriod)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSwellPeriod::Id,
                                       (uint8_t *) &rmsVoltageSwellPeriod, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageSwellPeriod

namespace AcVoltageMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acVoltageMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcVoltageMultiplier::Id, (uint8_t *) acVoltageMultiplier,
                                      sizeof(*acVoltageMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acVoltageMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcVoltageMultiplier::Id,
                                       (uint8_t *) &acVoltageMultiplier, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcVoltageMultiplier

namespace AcVoltageDivisor {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acVoltageDivisor)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcVoltageDivisor::Id, (uint8_t *) acVoltageDivisor,
                                      sizeof(*acVoltageDivisor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acVoltageDivisor)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcVoltageDivisor::Id, (uint8_t *) &acVoltageDivisor,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcVoltageDivisor

namespace AcCurrentMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acCurrentMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcCurrentMultiplier::Id, (uint8_t *) acCurrentMultiplier,
                                      sizeof(*acCurrentMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acCurrentMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcCurrentMultiplier::Id,
                                       (uint8_t *) &acCurrentMultiplier, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcCurrentMultiplier

namespace AcCurrentDivisor {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acCurrentDivisor)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcCurrentDivisor::Id, (uint8_t *) acCurrentDivisor,
                                      sizeof(*acCurrentDivisor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acCurrentDivisor)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcCurrentDivisor::Id, (uint8_t *) &acCurrentDivisor,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcCurrentDivisor

namespace AcPowerMultiplier {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acPowerMultiplier)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcPowerMultiplier::Id, (uint8_t *) acPowerMultiplier,
                                      sizeof(*acPowerMultiplier));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acPowerMultiplier)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcPowerMultiplier::Id, (uint8_t *) &acPowerMultiplier,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcPowerMultiplier

namespace AcPowerDivisor {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acPowerDivisor)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcPowerDivisor::Id, (uint8_t *) acPowerDivisor,
                                      sizeof(*acPowerDivisor));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acPowerDivisor)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcPowerDivisor::Id, (uint8_t *) &acPowerDivisor,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AcPowerDivisor

namespace OverloadAlarmsMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * overloadAlarmsMask)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, OverloadAlarmsMask::Id, (uint8_t *) overloadAlarmsMask,
                                      sizeof(*overloadAlarmsMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t overloadAlarmsMask)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, OverloadAlarmsMask::Id, (uint8_t *) &overloadAlarmsMask,
                                       ZCL_BITMAP8_ATTRIBUTE_TYPE);
}

} // namespace OverloadAlarmsMask

namespace VoltageOverload {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * voltageOverload)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, VoltageOverload::Id, (uint8_t *) voltageOverload,
                                      sizeof(*voltageOverload));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t voltageOverload)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, VoltageOverload::Id, (uint8_t *) &voltageOverload,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace VoltageOverload

namespace CurrentOverload {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * currentOverload)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, CurrentOverload::Id, (uint8_t *) currentOverload,
                                      sizeof(*currentOverload));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t currentOverload)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, CurrentOverload::Id, (uint8_t *) &currentOverload,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace CurrentOverload

namespace AcOverloadAlarmsMask {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * acOverloadAlarmsMask)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcOverloadAlarmsMask::Id,
                                      (uint8_t *) acOverloadAlarmsMask, sizeof(*acOverloadAlarmsMask));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t acOverloadAlarmsMask)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcOverloadAlarmsMask::Id,
                                       (uint8_t *) &acOverloadAlarmsMask, ZCL_BITMAP16_ATTRIBUTE_TYPE);
}

} // namespace AcOverloadAlarmsMask

namespace AcVoltageOverload {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * acVoltageOverload)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcVoltageOverload::Id, (uint8_t *) acVoltageOverload,
                                      sizeof(*acVoltageOverload));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t acVoltageOverload)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcVoltageOverload::Id, (uint8_t *) &acVoltageOverload,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AcVoltageOverload

namespace AcCurrentOverload {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * acCurrentOverload)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcCurrentOverload::Id, (uint8_t *) acCurrentOverload,
                                      sizeof(*acCurrentOverload));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t acCurrentOverload)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcCurrentOverload::Id, (uint8_t *) &acCurrentOverload,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AcCurrentOverload

namespace AcActivePowerOverload {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * acActivePowerOverload)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcActivePowerOverload::Id,
                                      (uint8_t *) acActivePowerOverload, sizeof(*acActivePowerOverload));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t acActivePowerOverload)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcActivePowerOverload::Id,
                                       (uint8_t *) &acActivePowerOverload, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AcActivePowerOverload

namespace AcReactivePowerOverload {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * acReactivePowerOverload)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AcReactivePowerOverload::Id,
                                      (uint8_t *) acReactivePowerOverload, sizeof(*acReactivePowerOverload));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t acReactivePowerOverload)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AcReactivePowerOverload::Id,
                                       (uint8_t *) &acReactivePowerOverload, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AcReactivePowerOverload

namespace AverageRmsOverVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * averageRmsOverVoltage)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsOverVoltage::Id,
                                      (uint8_t *) averageRmsOverVoltage, sizeof(*averageRmsOverVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t averageRmsOverVoltage)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsOverVoltage::Id,
                                       (uint8_t *) &averageRmsOverVoltage, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsOverVoltage

namespace AverageRmsUnderVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * averageRmsUnderVoltage)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsUnderVoltage::Id,
                                      (uint8_t *) averageRmsUnderVoltage, sizeof(*averageRmsUnderVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t averageRmsUnderVoltage)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsUnderVoltage::Id,
                                       (uint8_t *) &averageRmsUnderVoltage, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsUnderVoltage

namespace RmsExtremeOverVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * rmsExtremeOverVoltage)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeOverVoltage::Id,
                                      (uint8_t *) rmsExtremeOverVoltage, sizeof(*rmsExtremeOverVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t rmsExtremeOverVoltage)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeOverVoltage::Id,
                                       (uint8_t *) &rmsExtremeOverVoltage, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace RmsExtremeOverVoltage

namespace RmsExtremeUnderVoltage {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * rmsExtremeUnderVoltage)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeUnderVoltage::Id,
                                      (uint8_t *) rmsExtremeUnderVoltage, sizeof(*rmsExtremeUnderVoltage));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t rmsExtremeUnderVoltage)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeUnderVoltage::Id,
                                       (uint8_t *) &rmsExtremeUnderVoltage, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace RmsExtremeUnderVoltage

namespace RmsVoltageSag {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * rmsVoltageSag)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSag::Id, (uint8_t *) rmsVoltageSag,
                                      sizeof(*rmsVoltageSag));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t rmsVoltageSag)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSag::Id, (uint8_t *) &rmsVoltageSag,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageSag

namespace RmsVoltageSwell {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * rmsVoltageSwell)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSwell::Id, (uint8_t *) rmsVoltageSwell,
                                      sizeof(*rmsVoltageSwell));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t rmsVoltageSwell)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSwell::Id, (uint8_t *) &rmsVoltageSwell,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageSwell

namespace LineCurrentPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * lineCurrentPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, LineCurrentPhaseB::Id, (uint8_t *) lineCurrentPhaseB,
                                      sizeof(*lineCurrentPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t lineCurrentPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, LineCurrentPhaseB::Id, (uint8_t *) &lineCurrentPhaseB,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace LineCurrentPhaseB

namespace ActiveCurrentPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activeCurrentPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActiveCurrentPhaseB::Id, (uint8_t *) activeCurrentPhaseB,
                                      sizeof(*activeCurrentPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activeCurrentPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActiveCurrentPhaseB::Id,
                                       (uint8_t *) &activeCurrentPhaseB, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActiveCurrentPhaseB

namespace ReactiveCurrentPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * reactiveCurrentPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ReactiveCurrentPhaseB::Id,
                                      (uint8_t *) reactiveCurrentPhaseB, sizeof(*reactiveCurrentPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t reactiveCurrentPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ReactiveCurrentPhaseB::Id,
                                       (uint8_t *) &reactiveCurrentPhaseB, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ReactiveCurrentPhaseB

namespace RmsVoltagePhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltagePhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltagePhaseB::Id, (uint8_t *) rmsVoltagePhaseB,
                                      sizeof(*rmsVoltagePhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltagePhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltagePhaseB::Id, (uint8_t *) &rmsVoltagePhaseB,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltagePhaseB

namespace RmsVoltageMinPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageMinPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMinPhaseB::Id, (uint8_t *) rmsVoltageMinPhaseB,
                                      sizeof(*rmsVoltageMinPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageMinPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMinPhaseB::Id,
                                       (uint8_t *) &rmsVoltageMinPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageMinPhaseB

namespace RmsVoltageMaxPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageMaxPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMaxPhaseB::Id, (uint8_t *) rmsVoltageMaxPhaseB,
                                      sizeof(*rmsVoltageMaxPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageMaxPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMaxPhaseB::Id,
                                       (uint8_t *) &rmsVoltageMaxPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageMaxPhaseB

namespace RmsCurrentPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsCurrentPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentPhaseB::Id, (uint8_t *) rmsCurrentPhaseB,
                                      sizeof(*rmsCurrentPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsCurrentPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentPhaseB::Id, (uint8_t *) &rmsCurrentPhaseB,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsCurrentPhaseB

namespace RmsCurrentMinPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsCurrentMinPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMinPhaseB::Id, (uint8_t *) rmsCurrentMinPhaseB,
                                      sizeof(*rmsCurrentMinPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsCurrentMinPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMinPhaseB::Id,
                                       (uint8_t *) &rmsCurrentMinPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsCurrentMinPhaseB

namespace RmsCurrentMaxPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsCurrentMaxPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMaxPhaseB::Id, (uint8_t *) rmsCurrentMaxPhaseB,
                                      sizeof(*rmsCurrentMaxPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsCurrentMaxPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMaxPhaseB::Id,
                                       (uint8_t *) &rmsCurrentMaxPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsCurrentMaxPhaseB

namespace ActivePowerPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activePowerPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerPhaseB::Id, (uint8_t *) activePowerPhaseB,
                                      sizeof(*activePowerPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activePowerPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerPhaseB::Id, (uint8_t *) &activePowerPhaseB,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActivePowerPhaseB

namespace ActivePowerMinPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activePowerMinPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMinPhaseB::Id,
                                      (uint8_t *) activePowerMinPhaseB, sizeof(*activePowerMinPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activePowerMinPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMinPhaseB::Id,
                                       (uint8_t *) &activePowerMinPhaseB, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActivePowerMinPhaseB

namespace ActivePowerMaxPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activePowerMaxPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMaxPhaseB::Id,
                                      (uint8_t *) activePowerMaxPhaseB, sizeof(*activePowerMaxPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activePowerMaxPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMaxPhaseB::Id,
                                       (uint8_t *) &activePowerMaxPhaseB, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActivePowerMaxPhaseB

namespace ReactivePowerPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * reactivePowerPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ReactivePowerPhaseB::Id, (uint8_t *) reactivePowerPhaseB,
                                      sizeof(*reactivePowerPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t reactivePowerPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ReactivePowerPhaseB::Id,
                                       (uint8_t *) &reactivePowerPhaseB, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ReactivePowerPhaseB

namespace ApparentPowerPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * apparentPowerPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ApparentPowerPhaseB::Id, (uint8_t *) apparentPowerPhaseB,
                                      sizeof(*apparentPowerPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t apparentPowerPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ApparentPowerPhaseB::Id,
                                       (uint8_t *) &apparentPowerPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ApparentPowerPhaseB

namespace PowerFactorPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * powerFactorPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, PowerFactorPhaseB::Id, (uint8_t *) powerFactorPhaseB,
                                      sizeof(*powerFactorPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t powerFactorPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, PowerFactorPhaseB::Id, (uint8_t *) &powerFactorPhaseB,
                                       ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace PowerFactorPhaseB

namespace AverageRmsVoltageMeasurementPeriodPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * averageRmsVoltageMeasurementPeriodPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsVoltageMeasurementPeriodPhaseB::Id,
                                      (uint8_t *) averageRmsVoltageMeasurementPeriodPhaseB,
                                      sizeof(*averageRmsVoltageMeasurementPeriodPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t averageRmsVoltageMeasurementPeriodPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsVoltageMeasurementPeriodPhaseB::Id,
                                       (uint8_t *) &averageRmsVoltageMeasurementPeriodPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsVoltageMeasurementPeriodPhaseB

namespace AverageRmsOverVoltageCounterPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * averageRmsOverVoltageCounterPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsOverVoltageCounterPhaseB::Id,
                                      (uint8_t *) averageRmsOverVoltageCounterPhaseB, sizeof(*averageRmsOverVoltageCounterPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t averageRmsOverVoltageCounterPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsOverVoltageCounterPhaseB::Id,
                                       (uint8_t *) &averageRmsOverVoltageCounterPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsOverVoltageCounterPhaseB

namespace AverageRmsUnderVoltageCounterPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * averageRmsUnderVoltageCounterPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsUnderVoltageCounterPhaseB::Id,
                                      (uint8_t *) averageRmsUnderVoltageCounterPhaseB,
                                      sizeof(*averageRmsUnderVoltageCounterPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t averageRmsUnderVoltageCounterPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsUnderVoltageCounterPhaseB::Id,
                                       (uint8_t *) &averageRmsUnderVoltageCounterPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsUnderVoltageCounterPhaseB

namespace RmsExtremeOverVoltagePeriodPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsExtremeOverVoltagePeriodPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeOverVoltagePeriodPhaseB::Id,
                                      (uint8_t *) rmsExtremeOverVoltagePeriodPhaseB, sizeof(*rmsExtremeOverVoltagePeriodPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsExtremeOverVoltagePeriodPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeOverVoltagePeriodPhaseB::Id,
                                       (uint8_t *) &rmsExtremeOverVoltagePeriodPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsExtremeOverVoltagePeriodPhaseB

namespace RmsExtremeUnderVoltagePeriodPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsExtremeUnderVoltagePeriodPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeUnderVoltagePeriodPhaseB::Id,
                                      (uint8_t *) rmsExtremeUnderVoltagePeriodPhaseB, sizeof(*rmsExtremeUnderVoltagePeriodPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsExtremeUnderVoltagePeriodPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeUnderVoltagePeriodPhaseB::Id,
                                       (uint8_t *) &rmsExtremeUnderVoltagePeriodPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsExtremeUnderVoltagePeriodPhaseB

namespace RmsVoltageSagPeriodPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageSagPeriodPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSagPeriodPhaseB::Id,
                                      (uint8_t *) rmsVoltageSagPeriodPhaseB, sizeof(*rmsVoltageSagPeriodPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageSagPeriodPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSagPeriodPhaseB::Id,
                                       (uint8_t *) &rmsVoltageSagPeriodPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageSagPeriodPhaseB

namespace RmsVoltageSwellPeriodPhaseB {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageSwellPeriodPhaseB)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSwellPeriodPhaseB::Id,
                                      (uint8_t *) rmsVoltageSwellPeriodPhaseB, sizeof(*rmsVoltageSwellPeriodPhaseB));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageSwellPeriodPhaseB)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSwellPeriodPhaseB::Id,
                                       (uint8_t *) &rmsVoltageSwellPeriodPhaseB, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageSwellPeriodPhaseB

namespace LineCurrentPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * lineCurrentPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, LineCurrentPhaseC::Id, (uint8_t *) lineCurrentPhaseC,
                                      sizeof(*lineCurrentPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t lineCurrentPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, LineCurrentPhaseC::Id, (uint8_t *) &lineCurrentPhaseC,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace LineCurrentPhaseC

namespace ActiveCurrentPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activeCurrentPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActiveCurrentPhaseC::Id, (uint8_t *) activeCurrentPhaseC,
                                      sizeof(*activeCurrentPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activeCurrentPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActiveCurrentPhaseC::Id,
                                       (uint8_t *) &activeCurrentPhaseC, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActiveCurrentPhaseC

namespace ReactiveCurrentPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * reactiveCurrentPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ReactiveCurrentPhaseC::Id,
                                      (uint8_t *) reactiveCurrentPhaseC, sizeof(*reactiveCurrentPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t reactiveCurrentPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ReactiveCurrentPhaseC::Id,
                                       (uint8_t *) &reactiveCurrentPhaseC, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ReactiveCurrentPhaseC

namespace RmsVoltagePhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltagePhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltagePhaseC::Id, (uint8_t *) rmsVoltagePhaseC,
                                      sizeof(*rmsVoltagePhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltagePhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltagePhaseC::Id, (uint8_t *) &rmsVoltagePhaseC,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltagePhaseC

namespace RmsVoltageMinPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageMinPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMinPhaseC::Id, (uint8_t *) rmsVoltageMinPhaseC,
                                      sizeof(*rmsVoltageMinPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageMinPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMinPhaseC::Id,
                                       (uint8_t *) &rmsVoltageMinPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageMinPhaseC

namespace RmsVoltageMaxPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageMaxPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMaxPhaseC::Id, (uint8_t *) rmsVoltageMaxPhaseC,
                                      sizeof(*rmsVoltageMaxPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageMaxPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageMaxPhaseC::Id,
                                       (uint8_t *) &rmsVoltageMaxPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageMaxPhaseC

namespace RmsCurrentPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsCurrentPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentPhaseC::Id, (uint8_t *) rmsCurrentPhaseC,
                                      sizeof(*rmsCurrentPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsCurrentPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentPhaseC::Id, (uint8_t *) &rmsCurrentPhaseC,
                                       ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsCurrentPhaseC

namespace RmsCurrentMinPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsCurrentMinPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMinPhaseC::Id, (uint8_t *) rmsCurrentMinPhaseC,
                                      sizeof(*rmsCurrentMinPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsCurrentMinPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMinPhaseC::Id,
                                       (uint8_t *) &rmsCurrentMinPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsCurrentMinPhaseC

namespace RmsCurrentMaxPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsCurrentMaxPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMaxPhaseC::Id, (uint8_t *) rmsCurrentMaxPhaseC,
                                      sizeof(*rmsCurrentMaxPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsCurrentMaxPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsCurrentMaxPhaseC::Id,
                                       (uint8_t *) &rmsCurrentMaxPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsCurrentMaxPhaseC

namespace ActivePowerPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activePowerPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerPhaseC::Id, (uint8_t *) activePowerPhaseC,
                                      sizeof(*activePowerPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activePowerPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerPhaseC::Id, (uint8_t *) &activePowerPhaseC,
                                       ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActivePowerPhaseC

namespace ActivePowerMinPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activePowerMinPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMinPhaseC::Id,
                                      (uint8_t *) activePowerMinPhaseC, sizeof(*activePowerMinPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activePowerMinPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMinPhaseC::Id,
                                       (uint8_t *) &activePowerMinPhaseC, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActivePowerMinPhaseC

namespace ActivePowerMaxPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * activePowerMaxPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMaxPhaseC::Id,
                                      (uint8_t *) activePowerMaxPhaseC, sizeof(*activePowerMaxPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t activePowerMaxPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ActivePowerMaxPhaseC::Id,
                                       (uint8_t *) &activePowerMaxPhaseC, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ActivePowerMaxPhaseC

namespace ReactivePowerPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, int16_t * reactivePowerPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ReactivePowerPhaseC::Id, (uint8_t *) reactivePowerPhaseC,
                                      sizeof(*reactivePowerPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, int16_t reactivePowerPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ReactivePowerPhaseC::Id,
                                       (uint8_t *) &reactivePowerPhaseC, ZCL_INT16S_ATTRIBUTE_TYPE);
}

} // namespace ReactivePowerPhaseC

namespace ApparentPowerPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * apparentPowerPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, ApparentPowerPhaseC::Id, (uint8_t *) apparentPowerPhaseC,
                                      sizeof(*apparentPowerPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t apparentPowerPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, ApparentPowerPhaseC::Id,
                                       (uint8_t *) &apparentPowerPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace ApparentPowerPhaseC

namespace PowerFactorPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, int8_t * powerFactorPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, PowerFactorPhaseC::Id, (uint8_t *) powerFactorPhaseC,
                                      sizeof(*powerFactorPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, int8_t powerFactorPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, PowerFactorPhaseC::Id, (uint8_t *) &powerFactorPhaseC,
                                       ZCL_INT8S_ATTRIBUTE_TYPE);
}

} // namespace PowerFactorPhaseC

namespace AverageRmsVoltageMeasurementPeriodPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * averageRmsVoltageMeasurementPeriodPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsVoltageMeasurementPeriodPhaseC::Id,
                                      (uint8_t *) averageRmsVoltageMeasurementPeriodPhaseC,
                                      sizeof(*averageRmsVoltageMeasurementPeriodPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t averageRmsVoltageMeasurementPeriodPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsVoltageMeasurementPeriodPhaseC::Id,
                                       (uint8_t *) &averageRmsVoltageMeasurementPeriodPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsVoltageMeasurementPeriodPhaseC

namespace AverageRmsOverVoltageCounterPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * averageRmsOverVoltageCounterPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsOverVoltageCounterPhaseC::Id,
                                      (uint8_t *) averageRmsOverVoltageCounterPhaseC, sizeof(*averageRmsOverVoltageCounterPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t averageRmsOverVoltageCounterPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsOverVoltageCounterPhaseC::Id,
                                       (uint8_t *) &averageRmsOverVoltageCounterPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsOverVoltageCounterPhaseC

namespace AverageRmsUnderVoltageCounterPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * averageRmsUnderVoltageCounterPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsUnderVoltageCounterPhaseC::Id,
                                      (uint8_t *) averageRmsUnderVoltageCounterPhaseC,
                                      sizeof(*averageRmsUnderVoltageCounterPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t averageRmsUnderVoltageCounterPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, AverageRmsUnderVoltageCounterPhaseC::Id,
                                       (uint8_t *) &averageRmsUnderVoltageCounterPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace AverageRmsUnderVoltageCounterPhaseC

namespace RmsExtremeOverVoltagePeriodPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsExtremeOverVoltagePeriodPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeOverVoltagePeriodPhaseC::Id,
                                      (uint8_t *) rmsExtremeOverVoltagePeriodPhaseC, sizeof(*rmsExtremeOverVoltagePeriodPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsExtremeOverVoltagePeriodPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeOverVoltagePeriodPhaseC::Id,
                                       (uint8_t *) &rmsExtremeOverVoltagePeriodPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsExtremeOverVoltagePeriodPhaseC

namespace RmsExtremeUnderVoltagePeriodPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsExtremeUnderVoltagePeriodPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeUnderVoltagePeriodPhaseC::Id,
                                      (uint8_t *) rmsExtremeUnderVoltagePeriodPhaseC, sizeof(*rmsExtremeUnderVoltagePeriodPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsExtremeUnderVoltagePeriodPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsExtremeUnderVoltagePeriodPhaseC::Id,
                                       (uint8_t *) &rmsExtremeUnderVoltagePeriodPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsExtremeUnderVoltagePeriodPhaseC

namespace RmsVoltageSagPeriodPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageSagPeriodPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSagPeriodPhaseC::Id,
                                      (uint8_t *) rmsVoltageSagPeriodPhaseC, sizeof(*rmsVoltageSagPeriodPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageSagPeriodPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSagPeriodPhaseC::Id,
                                       (uint8_t *) &rmsVoltageSagPeriodPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageSagPeriodPhaseC

namespace RmsVoltageSwellPeriodPhaseC {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * rmsVoltageSwellPeriodPhaseC)
{
    return emberAfReadServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSwellPeriodPhaseC::Id,
                                      (uint8_t *) rmsVoltageSwellPeriodPhaseC, sizeof(*rmsVoltageSwellPeriodPhaseC));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t rmsVoltageSwellPeriodPhaseC)
{
    return emberAfWriteServerAttribute(endpoint, ElectricalMeasurement::Id, RmsVoltageSwellPeriodPhaseC::Id,
                                       (uint8_t *) &rmsVoltageSwellPeriodPhaseC, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace RmsVoltageSwellPeriodPhaseC

} // namespace Attributes
} // namespace ElectricalMeasurement

namespace GroupKeyManagement {
namespace Attributes {

} // namespace Attributes
} // namespace GroupKeyManagement

namespace SampleMfgSpecificCluster {
namespace Attributes {

namespace EmberSampleAttribute {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * emberSampleAttribute)
{
    return emberAfReadServerAttribute(endpoint, SampleMfgSpecificCluster::Id, EmberSampleAttribute::Id,
                                      (uint8_t *) emberSampleAttribute, sizeof(*emberSampleAttribute));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t emberSampleAttribute)
{
    return emberAfWriteServerAttribute(endpoint, SampleMfgSpecificCluster::Id, EmberSampleAttribute::Id,
                                       (uint8_t *) &emberSampleAttribute, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace EmberSampleAttribute

namespace EmberSampleAttribute2 {

EmberAfStatus Get(chip::EndpointId endpoint, uint8_t * emberSampleAttribute2)
{
    return emberAfReadServerAttribute(endpoint, SampleMfgSpecificCluster::Id, EmberSampleAttribute2::Id,
                                      (uint8_t *) emberSampleAttribute2, sizeof(*emberSampleAttribute2));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint8_t emberSampleAttribute2)
{
    return emberAfWriteServerAttribute(endpoint, SampleMfgSpecificCluster::Id, EmberSampleAttribute2::Id,
                                       (uint8_t *) &emberSampleAttribute2, ZCL_INT8U_ATTRIBUTE_TYPE);
}

} // namespace EmberSampleAttribute2

} // namespace Attributes
} // namespace SampleMfgSpecificCluster

namespace SampleMfgSpecificCluster2 {
namespace Attributes {

namespace EmberSampleAttribute3 {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * emberSampleAttribute3)
{
    return emberAfReadServerAttribute(endpoint, SampleMfgSpecificCluster2::Id, EmberSampleAttribute3::Id,
                                      (uint8_t *) emberSampleAttribute3, sizeof(*emberSampleAttribute3));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t emberSampleAttribute3)
{
    return emberAfWriteServerAttribute(endpoint, SampleMfgSpecificCluster2::Id, EmberSampleAttribute3::Id,
                                       (uint8_t *) &emberSampleAttribute3, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace EmberSampleAttribute3

namespace EmberSampleAttribute4 {

EmberAfStatus Get(chip::EndpointId endpoint, uint16_t * emberSampleAttribute4)
{
    return emberAfReadServerAttribute(endpoint, SampleMfgSpecificCluster2::Id, EmberSampleAttribute4::Id,
                                      (uint8_t *) emberSampleAttribute4, sizeof(*emberSampleAttribute4));
}
EmberAfStatus Set(chip::EndpointId endpoint, uint16_t emberSampleAttribute4)
{
    return emberAfWriteServerAttribute(endpoint, SampleMfgSpecificCluster2::Id, EmberSampleAttribute4::Id,
                                       (uint8_t *) &emberSampleAttribute4, ZCL_INT16U_ATTRIBUTE_TYPE);
}

} // namespace EmberSampleAttribute4

} // namespace Attributes
} // namespace SampleMfgSpecificCluster2

} // namespace Clusters
} // namespace app
} // namespace chip
