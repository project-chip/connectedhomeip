// This IDL was generated automatically by ZAP.
// It is for view/code review purposes only.

struct Dimension {
  double kWidth = 1;
  double kHeight = 2;
  MetricTypeEnum kMetric = 3;
}

struct AdditionalInfo {
  CHAR_STRING kName = 1;
  CHAR_STRING kValue = 2;
}

struct SimpleStruct {
  INT8U kA = 1;
  BOOLEAN kB = 2;
  SimpleEnum kC = 3;
  OCTET_STRING kD = 4;
  CHAR_STRING kE = 5;
  SimpleBitmap kF = 6;
  single kG = 7;
  double kH = 8;
}

struct NullablesAndOptionalsStruct {
  INT16U kNullableInt = 1;
  INT16U kOptionalInt = 2;
  INT16U kNullableOptionalInt = 3;
  CHAR_STRING kNullableString = 4;
  CHAR_STRING kOptionalString = 5;
  CHAR_STRING kNullableOptionalString = 6;
  SimpleStruct kNullableStruct = 7;
  SimpleStruct kOptionalStruct = 8;
  SimpleStruct kNullableOptionalStruct = 9;
  SimpleEnum kNullableList = 10;
  SimpleEnum kOptionalList = 11;
  SimpleEnum kNullableOptionalList = 12;
}

struct NestedStruct {
  INT8U kA = 1;
  BOOLEAN kB = 2;
  SimpleStruct kC = 3;
}

struct NestedStructList {
  INT8U kA = 1;
  BOOLEAN kB = 2;
  SimpleStruct kC = 3;
  SimpleStruct kD = 4;
  INT32U kE = 5;
  OCTET_STRING kF = 6;
  INT8U kG = 7;
}

struct DoubleNestedStructList {
  NestedStructList kA = 1;
}

struct Parameter {
  ParameterEnum kType = 1;
  CHAR_STRING kValue = 2;
  AdditionalInfo kExternalIDList = 3;
}

struct ContentSearch {
  Parameter kParameterList = 1;
}

struct StyleInformation {
  CHAR_STRING kImageUrl = 1;
  CHAR_STRING kColor = 2;
  Dimension kSize = 3;
}

struct BrandingInformation {
  CHAR_STRING kProviderName = 1;
  StyleInformation kBackground = 2;
  StyleInformation kLogo = 3;
  StyleInformation kProgressBar = 4;
  StyleInformation kSplash = 5;
  StyleInformation kWaterMark = 6;
}

struct Application {
  INT16U kCatalogVendorId = 1;
  CHAR_STRING kApplicationId = 2;
}

struct ApplicationEP {
  Application kApplication = 1;
  CHAR_STRING kEndpoint = 2;
}

struct Target {
  cluster_id kCluster = 0;
  endpoint_no kEndpoint = 1;
  devtype_id kDeviceType = 2;
}

[fabric_scoped_by=kFabricIndex]
struct AccessControlEntry {
  fabric_idx kFabricIndex = 0;
  Privilege kPrivilege = 1;
  AuthMode kAuthMode = 2;
  INT64U kSubjects = 3;
  Target kTargets = 4;
}

struct ActionStruct {
  INT16U kActionID = 1;
  CHAR_STRING kName = 2;
  ActionTypeEnum kType = 3;
  INT16U kEndpointListID = 4;
  INT16U kSupportedCommands = 5;
  ActionStateEnum kStatus = 6;
}

struct BasicCommissioningInfoType {
  INT32U kFailSafeExpiryLengthMs = 1;
}

struct BatChargeFaultChangeType {
  BatChargeFaultType kCurrent = 1;
  BatChargeFaultType kPrevious = 2;
}

struct BatFaultChangeType {
  BatFaultType kCurrent = 1;
  BatFaultType kPrevious = 2;
}

struct ChannelInfo {
  INT16U kMajorNumber = 1;
  INT16U kMinorNumber = 2;
  CHAR_STRING kName = 3;
  CHAR_STRING kCallSign = 4;
  CHAR_STRING kAffiliateCallSign = 5;
}

struct DeviceType {
  DEVTYPE_ID kType = 1;
  INT16U kRevision = 2;
}

struct DlCredential {
  DlCredentialType kCredentialType = 1;
  INT16U kCredentialIndex = 2;
}

struct EndpointListStruct {
  INT16U kEndpointListID = 1;
  CHAR_STRING kName = 2;
  EndpointListTypeEnum kType = 3;
  ENDPOINT_NO kEndpoints = 4;
}

[fabric_scoped_by=kFabricIndex]
struct ExtensionEntry {
  fabric_idx kFabricIndex = 0;
  OCTET_STRING kData = 1;
}

struct FabricDescriptor {
  INT8U kFabricIndex = 1;
  OCTET_STRING kRootPublicKey = 2;
  INT16U kVendorId = 3;
  FABRIC_ID kFabricId = 4;
  NODE_ID kNodeId = 5;
  CHAR_STRING kLabel = 6;
}

struct GroupInfo {
  INT16U kFabricIndex = 0;
  INT16U kGroupId = 1;
  INT16U kEndpoints = 2;
  CHAR_STRING kGroupName = 3;
}

[fabric_scoped_by=kFabricIndex]
struct GroupKey {
  fabric_idx kFabricIndex = 0;
  INT16U kGroupId = 1;
  INT16U kGroupKeySetID = 2;
}

struct GroupKeySet {
  INT16U kGroupKeySetID = 0;
  GroupKeySecurityPolicy kSecurityPolicy = 1;
  OCTET_STRING kEpochKey0 = 2;
  INT64U kEpochStartTime0 = 3;
  OCTET_STRING kEpochKey1 = 4;
  INT64U kEpochStartTime1 = 5;
  OCTET_STRING kEpochKey2 = 6;
  INT64U kEpochStartTime2 = 7;
}

struct IasAceZoneStatusResult {
  INT8U kZoneId = 1;
  IasZoneStatus kZoneStatus = 2;
}

struct InputInfo {
  INT8U kIndex = 1;
  InputTypeEnum kInputType = 2;
  CHAR_STRING kName = 3;
  CHAR_STRING kDescription = 4;
}

struct LabelStruct {
  CHAR_STRING kLabel = 1;
  CHAR_STRING kValue = 2;
}

struct LineupInfo {
  CHAR_STRING kOperatorName = 1;
  CHAR_STRING kLineupName = 2;
  CHAR_STRING kPostalCode = 3;
  LineupInfoTypeEnum kLineupInfoType = 4;
}

struct ModeOptionStruct {
  CHAR_STRING kLabel = 1;
  INT8U kMode = 2;
  INT32U kSemanticTag = 3;
}

struct NOCStruct {
  INT8U kFabricIndex = 1;
  OCTET_STRING kNoc = 2;
}

struct NeighborTable {
  INT64U kExtAddress = 1;
  INT32U kAge = 2;
  INT16U kRloc16 = 3;
  INT32U kLinkFrameCounter = 4;
  INT32U kMleFrameCounter = 5;
  INT8U kLqi = 6;
  INT8S kAverageRssi = 7;
  INT8S kLastRssi = 8;
  INT8U kFrameErrorRate = 9;
  INT8U kMessageErrorRate = 10;
  BOOLEAN kRxOnWhenIdle = 11;
  BOOLEAN kFullThreadDevice = 12;
  BOOLEAN kFullNetworkData = 13;
  BOOLEAN kIsChild = 14;
}

struct NetworkInfo {
  OCTET_STRING kNetworkID = 1;
  BOOLEAN kConnected = 2;
}

struct NetworkInterfaceType {
  CHAR_STRING kName = 1;
  BOOLEAN kFabricConnected = 2;
  BOOLEAN kOffPremiseServicesReachableIPv4 = 3;
  BOOLEAN kOffPremiseServicesReachableIPv6 = 4;
  OCTET_STRING kHardwareAddress = 5;
  InterfaceType kType = 6;
}

struct Notification {
  INT16U kContentId = 1;
  ENUM8 kStatusFeedback = 2;
}

struct OperationalDatasetComponents {
  BOOLEAN kActiveTimestampPresent = 1;
  BOOLEAN kPendingTimestampPresent = 2;
  BOOLEAN kMasterKeyPresent = 3;
  BOOLEAN kNetworkNamePresent = 4;
  BOOLEAN kExtendedPanIdPresent = 5;
  BOOLEAN kMeshLocalPrefixPresent = 6;
  BOOLEAN kDelayPresent = 7;
  BOOLEAN kPanIdPresent = 8;
  BOOLEAN kChannelPresent = 9;
  BOOLEAN kPskcPresent = 10;
  BOOLEAN kSecurityPolicyPresent = 11;
  BOOLEAN kChannelMaskPresent = 12;
}

struct OutputInfo {
  INT8U kIndex = 1;
  OutputTypeEnum kOutputType = 2;
  CHAR_STRING kName = 3;
}

struct PlaybackPosition {
  INT64U kUpdatedAt = 1;
  INT64U kPosition = 2;
}

struct PowerProfileRecord {
  INT8U kPowerProfileId = 1;
  INT8U kEnergyPhaseId = 2;
  BOOLEAN kPowerProfileRemoteControl = 3;
  ENUM8 kPowerProfileState = 4;
}

[fabric_scoped_by=kFabricIndex]
struct ProviderLocation {
  fabric_idx kFabricIndex = 0;
  node_id kProviderNodeID = 1;
  endpoint_no kEndpoint = 2;
}

struct ReadAttributeStatusRecord {
  ATTRIB_ID kAttributeId = 1;
  Status kStatus = 2;
  INT8U kAttributeType = 3;
  NO_DATA kAttributeLocation = 4;
}

struct ReadStructuredAttributeRecord {
  ATTRIB_ID kAttributeId = 1;
  INT8U kIndicator = 2;
  INT16U kIndicies = 3;
}

struct RouteTable {
  INT64U kExtAddress = 1;
  INT16U kRloc16 = 2;
  INT8U kRouterId = 3;
  INT8U kNextHop = 4;
  INT8U kPathCost = 5;
  INT8U kLQIIn = 6;
  INT8U kLQIOut = 7;
  INT8U kAge = 8;
  BOOLEAN kAllocated = 9;
  BOOLEAN kLinkEstablished = 10;
}

struct SceneExtensionAttributeInfo {
  INT8U kAttributeType = 1;
  NO_DATA kAttributeLocation = 2;
}

struct SceneExtensionFieldSet {
  CLUSTER_ID kClusterId = 1;
  INT8U kLength = 2;
  INT8U kValue = 3;
}

struct ScheduledPhase {
  INT8U kEnergyPhaseId = 1;
  INT16U kScheduledTime = 2;
}

struct SecurityPolicy {
  INT16U kRotationTime = 1;
  BITMAP16 kFlags = 2;
}

struct SemanticTag {
  ENUM16 kMfgCode = 1;
  ENUM16 kValue = 2;
}

struct SoftwareFault {
  INT64U kId = 1;
  CHAR_STRING kName = 2;
  OCTET_STRING kFaultRecording = 3;
}

struct TargetInfo {
  INT8U kIdentifier = 1;
  CHAR_STRING kName = 2;
}

struct TestListStructOctet {
  INT64U kFabricIndex = 1;
  OCTET_STRING kOperationalCert = 2;
}

struct ThreadInterfaceScanResult {
  INT64U kPanId = 1;
  INT64U kExtendedPanId = 2;
  CHAR_STRING kNetworkName = 3;
  INT16U kChannel = 4;
  INT8U kVersion = 5;
  INT64U kExtendedAddress = 6;
  INT8S kRssi = 7;
  INT8U kLqi = 8;
}

struct ThreadMetrics {
  INT64U kId = 1;
  CHAR_STRING kName = 2;
  INT32U kStackFreeCurrent = 3;
  INT32U kStackFreeMinimum = 4;
  INT32U kStackSize = 5;
}

struct TransferredPhase {
  INT8U kEnergyPhaseId = 1;
  INT8U kMacroPhaseId = 2;
  INT16U kExpectedDuration = 3;
  INT16U kPeakPower = 4;
  INT16U kEnergy = 5;
  INT16U kMaxActivationDelay = 6;
}

struct WiFiInterfaceScanResult {
  BITMAP8 kSecurity = 1;
  OCTET_STRING kSsid = 2;
  OCTET_STRING kBssid = 3;
  INT16U kChannel = 4;
  WiFiBand kWiFiBand = 5;
  INT8S kRssi = 6;
}

struct WiredFaultChangeType {
  WiredFaultType kCurrent = 1;
  WiredFaultType kPrevious = 2;
}

struct WriteAttributeRecord {
  ATTRIB_ID kAttributeId = 1;
  INT8U kAttributeType = 2;
  NO_DATA kAttributeLocation = 3;
}

struct WriteAttributeStatusRecord {
  Status kStatus = 1;
  ATTRIB_ID kAttributeId = 2;
}

struct WriteStructuredAttributeRecord {
  ATTRIB_ID kAttributeId = 1;
  INT8U kIndicator = 2;
  INT16U kIndicies = 3;
  INT8U kAttributeType = 4;
  NO_DATA kAttributeLocation = 5;
}

struct WriteStructuredAttributeStatusRecord {
  Status kStatus = 1;
  ATTRIB_ID kAttributeId = 2;
  INT8U kIndicator = 3;
  INT16U kIndicies = 4;
}


server cluster AdministratorCommissioning = 60 {
  enum CommissioningWindowStatus : ENUM8 {
    kWindowNotOpen = 0;
    kEnhancedWindowOpen = 1;
    kBasicWindowOpen = 2;
  }

  enum StatusCode : ENUM8 {
    kBusy = 1;
    kPAKEParameterError = 2;
    kWindowNotOpen = 3;
  }

  attribute(writable) int8u windowStatus = 0;
  attribute(writable) fabric_idx adminFabricIndex = 1;
  attribute(writable) int16u adminVendorId = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command OpenCommissioningWindow() = 0;
  command OpenBasicCommissioningWindow() = 1;
  command RevokeCommissioning() = 2;
}

server cluster Basic = 40 {
  event StartUp(critical) = 0 {
    kSoftwareVersion = 0,
  }

  event ShutDown(critical) = 1 {
  }

  event Leave(info) = 2 {
  }

  event ReachableChanged(info) = 3 {
    kReachableNewValue = 0,
  }

  attribute(writable, reportable) int16u interactionModelVersion = 0;
  attribute(writable, reportable) char_string vendorName = 1;
  attribute(writable, reportable) vendor_id vendorID = 2;
  attribute(writable, reportable) char_string productName = 3;
  attribute(writable, reportable) int16u productID = 4;
  attribute(readonly, reportable) char_string nodeLabel = 5;
  attribute(readonly, reportable) char_string location = 6;
  attribute(writable, reportable) int16u hardwareVersion = 7;
  attribute(writable, reportable) char_string hardwareVersionString = 8;
  attribute(writable, reportable) int32u softwareVersion = 9;
  attribute(writable, reportable) char_string softwareVersionString = 10;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command MfgSpecificPing() = 0;
}

server cluster Descriptor = 29 {
  attribute(writable, reportable) DeviceType deviceList = 0;
  attribute(writable, reportable) CLUSTER_ID serverList = 1;
  attribute(writable, reportable) CLUSTER_ID clientList = 2;
  attribute(writable, reportable) ENDPOINT_NO partsList = 3;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster DiagnosticLogs = 50 {
  enum LogsIntent : ENUM8 {
    kEndUserSupport = 0;
    kNetworkDiag = 1;
    kCrashLogs = 2;
  }

  enum LogsStatus : ENUM8 {
    kSuccess = 0;
    kExhausted = 1;
    kNoLogs = 2;
    kBusy = 3;
    kDenied = 4;
  }

  enum LogsTransferProtocol : ENUM8 {
    kResponsePayload = 0;
    kBdx = 1;
  }


  command RetrieveLogsRequest() = 0;
  command RetrieveLogsResponse() = 1;
}

server cluster DoorLock = 257 {
  enum DlAlarmCode : ENUM8 {
    kLockJammed = 0;
    kLockFactoryReset = 1;
    kLockRadioPowerCycled = 3;
    kWrongCodeEntryLimit = 4;
    kFrontEsceutcheonRemoved = 5;
    kDoorForcedOpen = 6;
    kDoorAjar = 7;
    kForcedUser = 8;
  }

  enum DlCredentialRule : ENUM8 {
    kSingle = 0;
    kDouble = 1;
    kTri = 2;
  }

  enum DlCredentialType : ENUM8 {
    kProgrammingPIN = 0;
    kPin = 1;
    kRfid = 2;
    kFingerprint = 3;
    kFingerVein = 4;
    kFace = 5;
  }

  enum DlDataOperationType : ENUM8 {
    kAdd = 0;
    kClear = 1;
    kModify = 2;
  }

  enum DlDoorLockStatus : ENUM8 {
    kDuplicate = 2;
    kOccupied = 3;
  }

  enum DlDoorState : ENUM8 {
    kDoorOpen = 0;
    kDoorClosed = 1;
    kDoorJammed = 2;
    kDoorForcedOpen = 3;
    kDoorUnspecifiedError = 4;
    kDoorAjar = 5;
  }

  enum DlLockDataType : ENUM8 {
    kUnspecified = 0;
    kProgrammingCode = 1;
    kUserIndex = 2;
    kWeekDaySchedule = 3;
    kYearDaySchedule = 4;
    kHolidaySchedule = 5;
    kPin = 6;
    kRfid = 7;
    kFingerprint = 8;
  }

  enum DlLockOperationType : ENUM8 {
    kLock = 0;
    kUnlock = 1;
    kNonAccessUserEvent = 2;
    kForcedUserEvent = 3;
  }

  enum DlLockState : ENUM8 {
    kNotFullyLocked = 0;
    kLocked = 1;
    kUnlocked = 2;
  }

  enum DlLockType : ENUM8 {
    kDeadBolt = 0;
    kMagnetic = 1;
    kOther = 2;
    kMortise = 3;
    kRim = 4;
    kLatchBolt = 5;
    kCylindricalLock = 6;
    kTubularLock = 7;
    kInterconnectedLock = 8;
    kDeadLatch = 9;
    kDoorFurniture = 10;
  }

  enum DlOperatingMode : ENUM8 {
    kNormal = 0;
    kVacation = 1;
    kPrivacy = 2;
    kNoRemoteLockUnlock = 3;
    kPassage = 4;
  }

  enum DlOperationError : ENUM8 {
    kUnspecified = 0;
    kInvalidCredential = 1;
    kDisabledUserDenied = 2;
    kRestricted = 3;
    kInsufficientBattery = 4;
  }

  enum DlOperationSource : ENUM8 {
    kUnspecified = 0;
    kManual = 1;
    kProprietaryRemote = 2;
    kKeypad = 3;
    kAuto = 4;
    kButton = 5;
    kSchedule = 6;
    kRemote = 7;
    kRfid = 8;
    kBiometric = 9;
  }

  enum DlStatus : ENUM8 {
    kSuccess = 0;
    kFailure = 1;
    kDuplicate = 2;
    kOccupied = 3;
    kInvalidField = 133;
    kNotFound = 139;
  }

  enum DlUserStatus : ENUM8 {
    kAvailable = 0;
    kOccupiedEnabled = 1;
    kOccupiedDisabled = 3;
  }

  enum DlUserType : ENUM8 {
    kUnrestrictedUser = 0;
    kYearDayScheduleUser = 1;
    kWeekDayScheduleUser = 2;
    kProgrammingUser = 3;
    kNonAccessUser = 4;
    kForcedUser = 5;
    kDisposableUser = 6;
    kExpiringUser = 7;
    kScheduleRestrictedUser = 8;
    kRemoteOnlyUser = 9;
  }

  enum DoorLockOperationEventCode : ENUM8 {
    kUnknownOrMfgSpecific = 0;
    kLock = 1;
    kUnlock = 2;
    kLockInvalidPinOrId = 3;
    kLockInvalidSchedule = 4;
    kUnlockInvalidPinOrId = 5;
    kUnlockInvalidSchedule = 6;
    kOneTouchLock = 7;
    kKeyLock = 8;
    kKeyUnlock = 9;
    kAutoLock = 10;
    kScheduleLock = 11;
    kScheduleUnlock = 12;
    kManualLock = 13;
    kManualUnlock = 14;
  }

  enum DoorLockProgrammingEventCode : ENUM8 {
    kUnknownOrMfgSpecific = 0;
    kMasterCodeChanged = 1;
    kPinAdded = 2;
    kPinDeleted = 3;
    kPinChanged = 4;
    kIdAdded = 5;
    kIdDeleted = 6;
  }

  enum DoorLockSetPinOrIdStatus : ENUM8 {
    kSuccess = 0;
    kGeneralFailure = 1;
    kMemoryFull = 2;
    kDuplicateCodeError = 3;
  }

  enum DoorLockUserStatus : ENUM8 {
    kAvailable = 0;
    kOccupiedEnabled = 1;
    kOccupiedDisabled = 3;
    kNotSupported = 255;
  }

  enum DoorLockUserType : ENUM8 {
    kUnrestricted = 0;
    kYearDayScheduleUser = 1;
    kWeekDayScheduleUser = 2;
    kMasterUser = 3;
    kNonAccessUser = 4;
    kNotSupported = 255;
  }

  event DoorLockAlarm(critical) = 0 {
    kAlarmCode = 0,
  }

  event DoorStateChange(critical) = 1 {
    kDoorState = 0,
  }

  event LockOperation(critical) = 2 {
    kLockOperationType = 0,
    kOperationSource = 1,
    kUserIndex = 2,
    kFabricIndex = 3,
    kSourceNode = 4,
    kCredentials = 5,
  }

  event LockOperationError(critical) = 3 {
    kLockOperationType = 0,
    kOperationSource = 1,
    kOperationError = 2,
    kUserIndex = 3,
    kFabricIndex = 4,
    kSourceNode = 5,
    kCredentials = 6,
  }

  event LockUserChange(info) = 4 {
    kLockDataType = 0,
    kDataOperationType = 1,
    kOperationSource = 2,
    kUserIndex = 3,
    kFabricIndex = 4,
    kSourceNode = 5,
    kDataIndex = 6,
  }

  attribute(writable, reportable) DlLockState lockState = 0;
  attribute(writable, reportable) DlLockType lockType = 1;
  attribute(writable, reportable) boolean actuatorEnabled = 2;
  attribute(writable, reportable) DlDoorState doorState = 3;
  attribute(writable) int16u numberOfTotalUsersSupported = 17;
  attribute(writable) int16u numberOfPINUsersSupported = 18;
  attribute(writable) int8u maxPINCodeLength = 23;
  attribute(writable) int8u minPINCodeLength = 24;
  attribute(writable) bitmap8 credentialRulesSupport = 27;
  attribute(readonly, reportable) char_string language = 33;
  attribute(readonly, reportable) int32u autoRelockTime = 35;
  attribute(readonly, reportable) int8u soundVolume = 36;
  attribute(readonly, reportable) DlOperatingMode operatingMode = 37;
  attribute(writable) bitmap16 supportedOperatingModes = 38;
  attribute(readonly, reportable) boolean enableOneTouchLocking = 41;
  attribute(readonly, reportable) boolean enablePrivacyModeButton = 43;
  attribute(readonly, reportable) int8u wrongCodeEntryLimit = 48;
  attribute(readonly, reportable) int8u userCodeTemporaryDisableTime = 49;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command LockDoor() = 0;
  command UnlockDoor() = 1;
  command UnlockWithTimeout() = 3;
  command GetLogRecord() = 4;
  command GetLogRecordResponse() = 4;
  command SetPINCode() = 5;
  command GetPINCode() = 6;
  command GetPINCodeResponse() = 6;
  command ClearPINCode() = 7;
  command ClearAllPINCodes() = 8;
  command SetUserStatus() = 9;
  command GetUserStatus() = 10;
  command GetUserStatusResponse() = 10;
  command SetWeekDaySchedule() = 11;
  command GetWeekDaySchedule() = 12;
  command GetWeekDayScheduleResponse() = 12;
  command ClearWeekDaySchedule() = 13;
  command SetYearDaySchedule() = 14;
  command GetYearDaySchedule() = 15;
  command GetYearDayScheduleResponse() = 15;
  command ClearYearDaySchedule() = 16;
  command SetHolidaySchedule() = 17;
  command GetHolidaySchedule() = 18;
  command GetHolidayScheduleResponse() = 18;
  command ClearHolidaySchedule() = 19;
  command SetUserType() = 20;
  command GetUserType() = 21;
  command GetUserTypeResponse() = 21;
  command SetRFIDCode() = 22;
  command GetRFIDCode() = 23;
  command GetRFIDCodeResponse() = 23;
  command ClearRFIDCode() = 24;
  command ClearAllRFIDCodes() = 25;
  command SetUser() = 26;
  command GetUser() = 27;
  command GetUserResponse() = 28;
  command ClearUser() = 29;
  command OperatingEventNotification() = 32;
  command ProgrammingEventNotification() = 33;
  command SetCredential() = 34;
  command SetCredentialResponse() = 35;
  command GetCredentialStatus() = 36;
  command GetCredentialStatusResponse() = 37;
  command ClearCredential() = 38;
}

server cluster EthernetNetworkDiagnostics = 55 {
  enum PHYRateType : ENUM8 {
    k10m = 0;
    k100m = 1;
    k1000m = 2;
    k25g = 3;
    k5g = 4;
    k10g = 5;
    k40g = 6;
    k100g = 7;
    k200g = 8;
    k400g = 9;
  }

  attribute(writable, reportable) enum8 PHYRate = 0;
  attribute(writable, reportable) boolean fullDuplex = 1;
  attribute(writable, reportable) int64u packetRxCount = 2;
  attribute(writable, reportable) int64u packetTxCount = 3;
  attribute(writable, reportable) int64u txErrCount = 4;
  attribute(writable, reportable) int64u collisionCount = 5;
  attribute(writable, reportable) int64u overrunCount = 6;
  attribute(writable, reportable) boolean carrierDetect = 7;
  attribute(writable, reportable) int64u timeSinceReset = 8;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command ResetCounts() = 0;
}

server cluster FixedLabel = 64 {
  attribute(writable) LabelStruct labelList = 0;
  attribute(writable) int16u clusterRevision = 65533;
}

server cluster GeneralCommissioning = 48 {
  enum GeneralCommissioningError : ENUM8 {
    kOk = 0;
    kValueOutsideRange = 1;
    kInvalidAuthentication = 2;
    kNotCommissioning = 3;
  }

  enum RegulatoryLocationType : ENUM8 {
    kIndoor = 0;
    kOutdoor = 1;
    kIndoorOutdoor = 2;
  }

  attribute(readonly, reportable) int64u breadcrumb = 0;
  attribute(writable, reportable) BasicCommissioningInfoType basicCommissioningInfoList = 1;
  attribute(writable) enum8 regulatoryConfig = 2;
  attribute(writable) enum8 locationCapability = 3;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command ArmFailSafe() = 0;
  command ArmFailSafeResponse() = 1;
  command SetRegulatoryConfig() = 2;
  command SetRegulatoryConfigResponse() = 3;
  command CommissioningComplete() = 4;
  command CommissioningCompleteResponse() = 5;
}

server cluster GeneralDiagnostics = 51 {
  enum BootReasonType : ENUM8 {
    kUnspecified = 0;
    kPowerOnReboot = 1;
    kBrownOutReset = 2;
    kSoftwareWatchdogReset = 3;
    kHardwareWatchdogReset = 4;
    kSoftwareUpdateCompleted = 5;
    kSoftwareReset = 6;
  }

  enum HardwareFaultType : ENUM8 {
    kUnspecified = 0;
    kRadio = 1;
    kSensor = 2;
    kResettableOverTemp = 3;
    kNonResettableOverTemp = 4;
    kPowerSource = 5;
    kVisualDisplayFault = 6;
    kAudioOutputFault = 7;
    kUserInterfaceFault = 8;
    kNonVolatileMemoryError = 9;
    kTamperDetected = 10;
  }

  enum InterfaceType : ENUM8 {
    kUnspecified = 0;
    kWiFi = 1;
    kEthernet = 2;
    kCellular = 3;
    kThread = 4;
  }

  enum NetworkFaultType : ENUM8 {
    kUnspecified = 0;
    kHardwareFailure = 1;
    kNetworkJammed = 2;
    kConnectionFailed = 3;
  }

  enum RadioFaultType : ENUM8 {
    kUnspecified = 0;
    kWiFiFault = 1;
    kCellularFault = 2;
    kThreadFault = 3;
    kNFCFault = 4;
    kBLEFault = 5;
    kEthernetFault = 6;
  }

  event HardwareFaultChange(critical) = 0 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event RadioFaultChange(critical) = 1 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event NetworkFaultChange(critical) = 2 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event BootReason(critical) = 3 {
    kBootReason = 0,
  }

  attribute(writable, reportable) NetworkInterfaceType networkInterfaces = 0;
  attribute(writable, reportable) int16u rebootCount = 1;
  attribute(writable, reportable) int64u upTime = 2;
  attribute(writable, reportable) int32u totalOperationalHours = 3;
  attribute(writable, reportable) enum8 bootReasons = 4;
  attribute(writable, reportable) ENUM8 activeHardwareFaults = 5;
  attribute(writable, reportable) ENUM8 activeRadioFaults = 6;
  attribute(writable, reportable) ENUM8 activeNetworkFaults = 7;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster LocalizationConfiguration = 43 {
  attribute(readonly) char_string activeLocale = 1;
  attribute(writable) CHAR_STRING supportedLocales = 2;
}

server cluster NetworkCommissioning = 49 {
  enum NetworkCommissioningStatus : ENUM8 {
    kSuccess = 0;
    kOutOfRange = 1;
    kBoundsExceeded = 2;
    kNetworkIDNotFound = 3;
    kDuplicateNetworkID = 4;
    kNetworkNotFound = 5;
    kRegulatoryError = 6;
    kAuthFailure = 7;
    kUnsupportedSecurity = 8;
    kOtherConnectionFailure = 9;
    kIPV6Failed = 10;
    kIPBindFailed = 11;
    kUnknownError = 12;
  }

  enum WiFiBand : ENUM8 {
    k2g4 = 0;
    k3g65 = 1;
    k5g = 2;
    k6g = 3;
    k60g = 4;
  }

  attribute(writable) int8u maxNetworks = 0;
  attribute(writable) NetworkInfo networks = 1;
  attribute(writable) int8u scanMaxTimeSeconds = 2;
  attribute(writable) int8u connectMaxTimeSeconds = 3;
  attribute(readonly) boolean interfaceEnabled = 4;
  attribute(writable) NetworkCommissioningStatus lastNetworkingStatus = 5;
  attribute(writable) octet_string lastNetworkID = 6;
  attribute(writable) int32u lastConnectErrorValue = 7;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command ScanNetworks() = 0;
  command ScanNetworksResponse() = 1;
  command AddOrUpdateWiFiNetwork() = 2;
  command AddOrUpdateThreadNetwork() = 3;
  command RemoveNetwork() = 4;
  command NetworkConfigResponse() = 5;
  command ConnectNetwork() = 6;
  command ConnectNetworkResponse() = 7;
  command ReorderNetwork() = 8;
}

server cluster OperationalCredentials = 62 {
  enum NodeOperationalCertStatus : ENUM8 {
    kSuccess = 0;
    kInvalidPublicKey = 1;
    kInvalidNodeOpId = 2;
    kInvalidNOC = 3;
    kMissingCsr = 4;
    kTableFull = 5;
    kInsufficientPrivilege = 8;
    kFabricConflict = 9;
    kLabelConflict = 10;
    kInvalidFabricIndex = 11;
  }

  attribute(writable, reportable) FabricDescriptor fabricsList = 1;
  attribute(writable, reportable) int8u supportedFabrics = 2;
  attribute(writable, reportable) int8u commissionedFabrics = 3;
  attribute(writable, reportable) OCTET_STRING trustedRootCertificates = 4;
  attribute(writable, reportable) fabric_idx currentFabricIndex = 5;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command AttestationRequest() = 0;
  command AttestationResponse() = 1;
  command CertificateChainRequest() = 2;
  command CertificateChainResponse() = 3;
  command OpCSRRequest() = 4;
  command OpCSRResponse() = 5;
  command AddNOC() = 6;
  command UpdateNOC() = 7;
  command NOCResponse() = 8;
  command UpdateFabricLabel() = 9;
  command RemoveFabric() = 10;
  command AddTrustedRootCertificate() = 11;
  command RemoveTrustedRootCertificate() = 12;
}

server cluster PowerSource = 47 {
  attribute(writable) enum8 status = 0;
  attribute(writable) int8u order = 1;
  attribute(writable) char_string description = 2;
  attribute(writable) int32u wiredAssessedCurrent = 6;
  attribute(writable) enum8 batteryChargeLevel = 14;
  attribute(writable) boolean batteryReplacementNeeded = 15;
  attribute(writable) enum8 batteryReplaceability = 16;
  attribute(writable) char_string batteryReplacementDescription = 19;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable) int16u clusterRevision = 65533;
}

server cluster PowerSourceConfiguration = 46 {
  attribute(writable) INT8U sources = 0;
  attribute(writable) int16u clusterRevision = 65533;
}

server cluster SoftwareDiagnostics = 52 {
  event SoftwareFault(info) = 0 {
    kSoftwareFault = 0,
  }

  attribute(writable, reportable) ThreadMetrics threadMetrics = 0;
  attribute(writable, reportable) int64u currentHeapFree = 1;
  attribute(writable, reportable) int64u currentHeapUsed = 2;
  attribute(writable, reportable) int64u currentHeapHighWatermark = 3;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command ResetWatermarks() = 0;
}

server cluster ThreadNetworkDiagnostics = 53 {
  enum NetworkFault : ENUM8 {
    kUnspecified = 0;
    kLinkDown = 1;
    kHardwareFailure = 2;
    kNetworkJammed = 3;
  }

  enum RoutingRole : ENUM8 {
    kUnspecified = 0;
    kUnassigned = 1;
    kSleepyEndDevice = 2;
    kEndDevice = 3;
    kReed = 4;
    kRouter = 5;
    kLeader = 6;
  }

  enum ThreadConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  event ConnectionStatus(info) = 0 {
    kConnectionStatus = 0,
  }

  attribute(writable, reportable) int16u channel = 0;
  attribute(writable, reportable) enum8 routingRole = 1;
  attribute(writable, reportable) octet_string networkName = 2;
  attribute(writable, reportable) int16u panId = 3;
  attribute(writable, reportable) int64u extendedPanId = 4;
  attribute(writable, reportable) octet_string meshLocalPrefix = 5;
  attribute(writable, reportable) int64u overrunCount = 6;
  attribute(writable, reportable) NeighborTable neighborTableList = 7;
  attribute(writable, reportable) RouteTable routeTableList = 8;
  attribute(writable, reportable) int32u partitionId = 9;
  attribute(writable, reportable) int8u weighting = 10;
  attribute(writable, reportable) int8u dataVersion = 11;
  attribute(writable, reportable) int8u stableDataVersion = 12;
  attribute(writable, reportable) int8u leaderRouterId = 13;
  attribute(writable, reportable) int16u detachedRoleCount = 14;
  attribute(writable, reportable) int16u childRoleCount = 15;
  attribute(writable, reportable) int16u routerRoleCount = 16;
  attribute(writable, reportable) int16u leaderRoleCount = 17;
  attribute(writable, reportable) int16u attachAttemptCount = 18;
  attribute(writable, reportable) int16u partitionIdChangeCount = 19;
  attribute(writable, reportable) int16u betterPartitionAttachAttemptCount = 20;
  attribute(writable, reportable) int16u parentChangeCount = 21;
  attribute(writable, reportable) int32u txTotalCount = 22;
  attribute(writable, reportable) int32u txUnicastCount = 23;
  attribute(writable, reportable) int32u txBroadcastCount = 24;
  attribute(writable, reportable) int32u txAckRequestedCount = 25;
  attribute(writable, reportable) int32u txAckedCount = 26;
  attribute(writable, reportable) int32u txNoAckRequestedCount = 27;
  attribute(writable, reportable) int32u txDataCount = 28;
  attribute(writable, reportable) int32u txDataPollCount = 29;
  attribute(writable, reportable) int32u txBeaconCount = 30;
  attribute(writable, reportable) int32u txBeaconRequestCount = 31;
  attribute(writable, reportable) int32u txOtherCount = 32;
  attribute(writable, reportable) int32u txRetryCount = 33;
  attribute(writable, reportable) int32u txDirectMaxRetryExpiryCount = 34;
  attribute(writable, reportable) int32u txIndirectMaxRetryExpiryCount = 35;
  attribute(writable, reportable) int32u txErrCcaCount = 36;
  attribute(writable, reportable) int32u txErrAbortCount = 37;
  attribute(writable, reportable) int32u txErrBusyChannelCount = 38;
  attribute(writable, reportable) int32u rxTotalCount = 39;
  attribute(writable, reportable) int32u rxUnicastCount = 40;
  attribute(writable, reportable) int32u rxBroadcastCount = 41;
  attribute(writable, reportable) int32u rxDataCount = 42;
  attribute(writable, reportable) int32u rxDataPollCount = 43;
  attribute(writable, reportable) int32u rxBeaconCount = 44;
  attribute(writable, reportable) int32u rxBeaconRequestCount = 45;
  attribute(writable, reportable) int32u rxOtherCount = 46;
  attribute(writable, reportable) int32u rxAddressFilteredCount = 47;
  attribute(writable, reportable) int32u rxDestAddrFilteredCount = 48;
  attribute(writable, reportable) int32u rxDuplicatedCount = 49;
  attribute(writable, reportable) int32u rxErrNoFrameCount = 50;
  attribute(writable, reportable) int32u rxErrUnknownNeighborCount = 51;
  attribute(writable, reportable) int32u rxErrInvalidSrcAddrCount = 52;
  attribute(writable, reportable) int32u rxErrSecCount = 53;
  attribute(writable, reportable) int32u rxErrFcsCount = 54;
  attribute(writable, reportable) int32u rxErrOtherCount = 55;
  attribute(writable, reportable) int64u activeTimestamp = 56;
  attribute(writable, reportable) int64u pendingTimestamp = 57;
  attribute(writable, reportable) int32u delay = 58;
  attribute(writable, reportable) SecurityPolicy securityPolicy = 59;
  attribute(writable, reportable) octet_string channelMask = 60;
  attribute(writable, reportable) OperationalDatasetComponents operationalDatasetComponents = 61;
  attribute(writable, reportable) NetworkFault activeNetworkFaultsList = 62;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command ResetCounts() = 0;
}

server cluster UserLabel = 65 {
  attribute(readonly) LabelStruct labelList = 0;
  attribute(writable) int16u clusterRevision = 65533;
}

server cluster WiFiNetworkDiagnostics = 54 {
  enum AssociationFailureCause : ENUM8 {
    kUnknown = 0;
    kAssociationFailed = 1;
    kAuthenticationFailed = 2;
    kSsidNotFound = 3;
  }

  enum SecurityType : ENUM8 {
    kUnspecified = 0;
    kNone = 1;
    kWep = 2;
    kWpa = 3;
    kWpa2 = 4;
    kWpa3 = 5;
  }

  enum WiFiConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  enum WiFiVersionType : ENUM8 {
    k80211a = 0;
    k80211b = 1;
    k80211g = 2;
    k80211n = 3;
    k80211ac = 4;
    k80211ax = 5;
  }

  event Disconnection(info) = 0 {
    kReasonCode = 0,
  }

  event AssociationFailure(info) = 1 {
    kAssociationFailure = 0,
    kStatus = 1,
  }

  event ConnectionStatus(info) = 2 {
    kConnectionStatus = 0,
  }

  attribute(writable, reportable) octet_string bssid = 0;
  attribute(writable, reportable) enum8 securityType = 1;
  attribute(writable, reportable) enum8 wiFiVersion = 2;
  attribute(writable, reportable) int16u channelNumber = 3;
  attribute(writable, reportable) int8s rssi = 4;
  attribute(writable, reportable) int32u beaconLostCount = 5;
  attribute(writable, reportable) int32u beaconRxCount = 6;
  attribute(writable, reportable) int32u packetMulticastRxCount = 7;
  attribute(writable, reportable) int32u packetMulticastTxCount = 8;
  attribute(writable, reportable) int32u packetUnicastRxCount = 9;
  attribute(writable, reportable) int32u packetUnicastTxCount = 10;
  attribute(writable, reportable) int64u currentMaxRate = 11;
  attribute(writable, reportable) int64u overrunCount = 12;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  command ResetCounts() = 0;
}


// TODO: endpoints
