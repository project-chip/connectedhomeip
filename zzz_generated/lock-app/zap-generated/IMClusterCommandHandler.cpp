/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <cinttypes>
#include <cstdint>

#include "app/util/util.h"
#include <app-common/zap-generated/af-structs.h>
#include <app-common/zap-generated/callback.h>
#include <app-common/zap-generated/cluster-objects.h>
#include <app-common/zap-generated/ids/Clusters.h>
#include <app-common/zap-generated/ids/Commands.h>

#include <app/InteractionModelEngine.h>

// Currently we need some work to keep compatible with ember lib.
#include <app/util/ember-compatibility-functions.h>

namespace chip {
namespace app {

namespace {
void ReportCommandUnsupported(Command * aCommandObj, EndpointId aEndpointId, ClusterId aClusterId, CommandId aCommandId)
{
    CommandPathParams returnStatusParam = { aEndpointId,
                                            0, // GroupId
                                            aClusterId, aCommandId, (CommandPathFlags::kEndpointIdValid) };
    aCommandObj->AddStatusCode(returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                               Protocols::SecureChannel::Id, Protocols::InteractionModel::Status::UnsupportedCommand);
    ChipLogError(Zcl, "Unknown command " ChipLogFormatMEI " for cluster " ChipLogFormatMEI, ChipLogValueMEI(aCommandId),
                 ChipLogValueMEI(aClusterId));
}
} // anonymous namespace

// Cluster specific command parsing

namespace Clusters {

namespace AdministratorCommissioning {

void DispatchServerCommand(CommandHandler * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
    // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
    // Any error value TLVUnpackError means we have received an illegal value.
    // The following variables are used for all commands to save code size.
    CHIP_ERROR TLVError          = CHIP_NO_ERROR;
    CHIP_ERROR TLVUnpackError    = CHIP_NO_ERROR;
    uint32_t validArgumentCount  = 0;
    uint32_t expectArgumentCount = 0;
    uint32_t currentDecodeTagId  = 0;
    bool wasHandled              = false;
    {
        switch (aCommandId)
        {
        case Commands::OpenBasicCommissioningWindow::Id: {
            Commands::OpenBasicCommissioningWindow::DecodableType fieldStruct;
            expectArgumentCount = 1;
            uint16_t CommissioningTimeout;
            bool argExists[1];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 1)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(CommissioningTimeout);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, AdministratorCommissioning::Id, Commands::OpenBasicCommissioningWindow::Id);
                wasHandled = emberAfAdministratorCommissioningClusterOpenBasicCommissioningWindowCallback(
                    apCommandObj, path, aEndpointId, CommissioningTimeout, fieldStruct);
            }
            break;
        }
        case Commands::OpenCommissioningWindow::Id: {
            Commands::OpenCommissioningWindow::DecodableType fieldStruct;
            expectArgumentCount = 6;
            uint16_t CommissioningTimeout;
            chip::ByteSpan PAKEVerifier;
            uint16_t Discriminator;
            uint32_t Iterations;
            chip::ByteSpan Salt;
            uint16_t PasscodeID;
            bool argExists[6];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 6)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(CommissioningTimeout);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(PAKEVerifier);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(Discriminator);
                    break;
                case 3:
                    TLVUnpackError = aDataTlv.Get(Iterations);
                    break;
                case 4:
                    TLVUnpackError = aDataTlv.Get(Salt);
                    break;
                case 5:
                    TLVUnpackError = aDataTlv.Get(PasscodeID);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 6 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, AdministratorCommissioning::Id, Commands::OpenCommissioningWindow::Id);
                wasHandled = emberAfAdministratorCommissioningClusterOpenCommissioningWindowCallback(
                    apCommandObj, path, aEndpointId, CommissioningTimeout, PAKEVerifier, Discriminator, Iterations, Salt,
                    PasscodeID, fieldStruct);
            }
            break;
        }
        case Commands::RevokeCommissioning::Id: {
            Commands::RevokeCommissioning::DecodableType fieldStruct;

            ConcreteCommandPath path(aEndpointId, AdministratorCommissioning::Id, Commands::RevokeCommissioning::Id);
            wasHandled =
                emberAfAdministratorCommissioningClusterRevokeCommissioningCallback(apCommandObj, path, aEndpointId, fieldStruct);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ReportCommandUnsupported(apCommandObj, aEndpointId, AdministratorCommissioning::Id, aCommandId);
            return;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || CHIP_NO_ERROR != TLVUnpackError || expectArgumentCount != validArgumentCount || !wasHandled)
    {
        CommandPathParams returnStatusParam = { aEndpointId,
                                                0, // GroupId
                                                AdministratorCommissioning::Id, aCommandId, (CommandPathFlags::kEndpointIdValid) };
        apCommandObj->AddStatusCode(returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                    Protocols::SecureChannel::Id, Protocols::InteractionModel::Status::InvalidCommand);
        ChipLogProgress(Zcl,
                        "Failed to dispatch command, %" PRIu32 "/%" PRIu32 " arguments parsed, TLVError=%" CHIP_ERROR_FORMAT
                        ", UnpackError=%" CHIP_ERROR_FORMAT " (last decoded tag = %" PRIu32,
                        validArgumentCount, expectArgumentCount, TLVError.Format(), TLVUnpackError.Format(), currentDecodeTagId);
        // A command with no arguments would never write currentDecodeTagId.  If
        // progress logging is also disabled, it would look unused.  Silence that
        // warning.
        UNUSED_VAR(currentDecodeTagId);
    }
}

} // namespace AdministratorCommissioning

namespace DiagnosticLogs {

void DispatchServerCommand(CommandHandler * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
    // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
    // Any error value TLVUnpackError means we have received an illegal value.
    // The following variables are used for all commands to save code size.
    CHIP_ERROR TLVError          = CHIP_NO_ERROR;
    CHIP_ERROR TLVUnpackError    = CHIP_NO_ERROR;
    uint32_t validArgumentCount  = 0;
    uint32_t expectArgumentCount = 0;
    uint32_t currentDecodeTagId  = 0;
    bool wasHandled              = false;
    {
        switch (aCommandId)
        {
        case Commands::RetrieveLogsRequest::Id: {
            Commands::RetrieveLogsRequest::DecodableType fieldStruct;
            expectArgumentCount = 3;
            uint8_t intent;
            uint8_t requestedProtocol;
            chip::ByteSpan transferFileDesignator;
            bool argExists[3];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 3)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(intent);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(requestedProtocol);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(transferFileDesignator);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, DiagnosticLogs::Id, Commands::RetrieveLogsRequest::Id);
                wasHandled = emberAfDiagnosticLogsClusterRetrieveLogsRequestCallback(
                    apCommandObj, path, aEndpointId, intent, requestedProtocol, transferFileDesignator, fieldStruct);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ReportCommandUnsupported(apCommandObj, aEndpointId, DiagnosticLogs::Id, aCommandId);
            return;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || CHIP_NO_ERROR != TLVUnpackError || expectArgumentCount != validArgumentCount || !wasHandled)
    {
        CommandPathParams returnStatusParam = { aEndpointId,
                                                0, // GroupId
                                                DiagnosticLogs::Id, aCommandId, (CommandPathFlags::kEndpointIdValid) };
        apCommandObj->AddStatusCode(returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                    Protocols::SecureChannel::Id, Protocols::InteractionModel::Status::InvalidCommand);
        ChipLogProgress(Zcl,
                        "Failed to dispatch command, %" PRIu32 "/%" PRIu32 " arguments parsed, TLVError=%" CHIP_ERROR_FORMAT
                        ", UnpackError=%" CHIP_ERROR_FORMAT " (last decoded tag = %" PRIu32,
                        validArgumentCount, expectArgumentCount, TLVError.Format(), TLVUnpackError.Format(), currentDecodeTagId);
        // A command with no arguments would never write currentDecodeTagId.  If
        // progress logging is also disabled, it would look unused.  Silence that
        // warning.
        UNUSED_VAR(currentDecodeTagId);
    }
}

} // namespace DiagnosticLogs

namespace GeneralCommissioning {

void DispatchServerCommand(CommandHandler * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
    // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
    // Any error value TLVUnpackError means we have received an illegal value.
    // The following variables are used for all commands to save code size.
    CHIP_ERROR TLVError          = CHIP_NO_ERROR;
    CHIP_ERROR TLVUnpackError    = CHIP_NO_ERROR;
    uint32_t validArgumentCount  = 0;
    uint32_t expectArgumentCount = 0;
    uint32_t currentDecodeTagId  = 0;
    bool wasHandled              = false;
    {
        switch (aCommandId)
        {
        case Commands::ArmFailSafe::Id: {
            Commands::ArmFailSafe::DecodableType fieldStruct;
            expectArgumentCount = 3;
            uint16_t expiryLengthSeconds;
            uint64_t breadcrumb;
            uint32_t timeoutMs;
            bool argExists[3];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 3)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(expiryLengthSeconds);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, GeneralCommissioning::Id, Commands::ArmFailSafe::Id);
                wasHandled = emberAfGeneralCommissioningClusterArmFailSafeCallback(
                    apCommandObj, path, aEndpointId, expiryLengthSeconds, breadcrumb, timeoutMs, fieldStruct);
            }
            break;
        }
        case Commands::CommissioningComplete::Id: {
            Commands::CommissioningComplete::DecodableType fieldStruct;

            ConcreteCommandPath path(aEndpointId, GeneralCommissioning::Id, Commands::CommissioningComplete::Id);
            wasHandled =
                emberAfGeneralCommissioningClusterCommissioningCompleteCallback(apCommandObj, path, aEndpointId, fieldStruct);
            break;
        }
        case Commands::SetRegulatoryConfig::Id: {
            Commands::SetRegulatoryConfig::DecodableType fieldStruct;
            expectArgumentCount = 4;
            uint8_t location;
            const uint8_t * countryCode;
            uint64_t breadcrumb;
            uint32_t timeoutMs;
            bool argExists[4];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 4)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(location);
                    break;
                case 1:
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(countryCode);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    break;
                case 3:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, GeneralCommissioning::Id, Commands::SetRegulatoryConfig::Id);
                wasHandled = emberAfGeneralCommissioningClusterSetRegulatoryConfigCallback(
                    apCommandObj, path, aEndpointId, location, const_cast<uint8_t *>(countryCode), breadcrumb, timeoutMs,
                    fieldStruct);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ReportCommandUnsupported(apCommandObj, aEndpointId, GeneralCommissioning::Id, aCommandId);
            return;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || CHIP_NO_ERROR != TLVUnpackError || expectArgumentCount != validArgumentCount || !wasHandled)
    {
        CommandPathParams returnStatusParam = { aEndpointId,
                                                0, // GroupId
                                                GeneralCommissioning::Id, aCommandId, (CommandPathFlags::kEndpointIdValid) };
        apCommandObj->AddStatusCode(returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                    Protocols::SecureChannel::Id, Protocols::InteractionModel::Status::InvalidCommand);
        ChipLogProgress(Zcl,
                        "Failed to dispatch command, %" PRIu32 "/%" PRIu32 " arguments parsed, TLVError=%" CHIP_ERROR_FORMAT
                        ", UnpackError=%" CHIP_ERROR_FORMAT " (last decoded tag = %" PRIu32,
                        validArgumentCount, expectArgumentCount, TLVError.Format(), TLVUnpackError.Format(), currentDecodeTagId);
        // A command with no arguments would never write currentDecodeTagId.  If
        // progress logging is also disabled, it would look unused.  Silence that
        // warning.
        UNUSED_VAR(currentDecodeTagId);
    }
}

} // namespace GeneralCommissioning

namespace NetworkCommissioning {

void DispatchServerCommand(CommandHandler * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
    // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
    // Any error value TLVUnpackError means we have received an illegal value.
    // The following variables are used for all commands to save code size.
    CHIP_ERROR TLVError          = CHIP_NO_ERROR;
    CHIP_ERROR TLVUnpackError    = CHIP_NO_ERROR;
    uint32_t validArgumentCount  = 0;
    uint32_t expectArgumentCount = 0;
    uint32_t currentDecodeTagId  = 0;
    bool wasHandled              = false;
    {
        switch (aCommandId)
        {
        case Commands::AddThreadNetwork::Id: {
            Commands::AddThreadNetwork::DecodableType fieldStruct;
            expectArgumentCount = 3;
            chip::ByteSpan operationalDataset;
            uint64_t breadcrumb;
            uint32_t timeoutMs;
            bool argExists[3];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 3)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(operationalDataset);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, NetworkCommissioning::Id, Commands::AddThreadNetwork::Id);
                wasHandled = emberAfNetworkCommissioningClusterAddThreadNetworkCallback(
                    apCommandObj, path, aEndpointId, operationalDataset, breadcrumb, timeoutMs, fieldStruct);
            }
            break;
        }
        case Commands::AddWiFiNetwork::Id: {
            Commands::AddWiFiNetwork::DecodableType fieldStruct;
            expectArgumentCount = 4;
            chip::ByteSpan ssid;
            chip::ByteSpan credentials;
            uint64_t breadcrumb;
            uint32_t timeoutMs;
            bool argExists[4];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 4)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(ssid);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(credentials);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    break;
                case 3:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, NetworkCommissioning::Id, Commands::AddWiFiNetwork::Id);
                wasHandled = emberAfNetworkCommissioningClusterAddWiFiNetworkCallback(
                    apCommandObj, path, aEndpointId, ssid, credentials, breadcrumb, timeoutMs, fieldStruct);
            }
            break;
        }
        case Commands::DisableNetwork::Id: {
            Commands::DisableNetwork::DecodableType fieldStruct;
            expectArgumentCount = 3;
            chip::ByteSpan networkID;
            uint64_t breadcrumb;
            uint32_t timeoutMs;
            bool argExists[3];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 3)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(networkID);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, NetworkCommissioning::Id, Commands::DisableNetwork::Id);
                wasHandled = emberAfNetworkCommissioningClusterDisableNetworkCallback(apCommandObj, path, aEndpointId, networkID,
                                                                                      breadcrumb, timeoutMs, fieldStruct);
            }
            break;
        }
        case Commands::EnableNetwork::Id: {
            Commands::EnableNetwork::DecodableType fieldStruct;
            expectArgumentCount = 3;
            chip::ByteSpan networkID;
            uint64_t breadcrumb;
            uint32_t timeoutMs;
            bool argExists[3];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 3)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(networkID);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, NetworkCommissioning::Id, Commands::EnableNetwork::Id);
                wasHandled = emberAfNetworkCommissioningClusterEnableNetworkCallback(apCommandObj, path, aEndpointId, networkID,
                                                                                     breadcrumb, timeoutMs, fieldStruct);
            }
            break;
        }
        case Commands::GetLastNetworkCommissioningResult::Id: {
            Commands::GetLastNetworkCommissioningResult::DecodableType fieldStruct;
            expectArgumentCount = 1;
            uint32_t timeoutMs;
            bool argExists[1];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 1)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, NetworkCommissioning::Id, Commands::GetLastNetworkCommissioningResult::Id);
                wasHandled = emberAfNetworkCommissioningClusterGetLastNetworkCommissioningResultCallback(
                    apCommandObj, path, aEndpointId, timeoutMs, fieldStruct);
            }
            break;
        }
        case Commands::RemoveNetwork::Id: {
            Commands::RemoveNetwork::DecodableType fieldStruct;
            expectArgumentCount = 3;
            chip::ByteSpan NetworkID;
            uint64_t Breadcrumb;
            uint32_t TimeoutMs;
            bool argExists[3];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 3)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(NetworkID);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(Breadcrumb);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(TimeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, NetworkCommissioning::Id, Commands::RemoveNetwork::Id);
                wasHandled = emberAfNetworkCommissioningClusterRemoveNetworkCallback(apCommandObj, path, aEndpointId, NetworkID,
                                                                                     Breadcrumb, TimeoutMs, fieldStruct);
            }
            break;
        }
        case Commands::ScanNetworks::Id: {
            Commands::ScanNetworks::DecodableType fieldStruct;
            expectArgumentCount = 3;
            chip::ByteSpan ssid;
            uint64_t breadcrumb;
            uint32_t timeoutMs;
            bool argExists[3];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 3)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(ssid);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, NetworkCommissioning::Id, Commands::ScanNetworks::Id);
                wasHandled = emberAfNetworkCommissioningClusterScanNetworksCallback(apCommandObj, path, aEndpointId, ssid,
                                                                                    breadcrumb, timeoutMs, fieldStruct);
            }
            break;
        }
        case Commands::UpdateThreadNetwork::Id: {
            Commands::UpdateThreadNetwork::DecodableType fieldStruct;
            expectArgumentCount = 3;
            chip::ByteSpan operationalDataset;
            uint64_t breadcrumb;
            uint32_t timeoutMs;
            bool argExists[3];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 3)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(operationalDataset);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 3 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, NetworkCommissioning::Id, Commands::UpdateThreadNetwork::Id);
                wasHandled = emberAfNetworkCommissioningClusterUpdateThreadNetworkCallback(
                    apCommandObj, path, aEndpointId, operationalDataset, breadcrumb, timeoutMs, fieldStruct);
            }
            break;
        }
        case Commands::UpdateWiFiNetwork::Id: {
            Commands::UpdateWiFiNetwork::DecodableType fieldStruct;
            expectArgumentCount = 4;
            chip::ByteSpan ssid;
            chip::ByteSpan credentials;
            uint64_t breadcrumb;
            uint32_t timeoutMs;
            bool argExists[4];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 4)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(ssid);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(credentials);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(breadcrumb);
                    break;
                case 3:
                    TLVUnpackError = aDataTlv.Get(timeoutMs);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 4 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, NetworkCommissioning::Id, Commands::UpdateWiFiNetwork::Id);
                wasHandled = emberAfNetworkCommissioningClusterUpdateWiFiNetworkCallback(
                    apCommandObj, path, aEndpointId, ssid, credentials, breadcrumb, timeoutMs, fieldStruct);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ReportCommandUnsupported(apCommandObj, aEndpointId, NetworkCommissioning::Id, aCommandId);
            return;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || CHIP_NO_ERROR != TLVUnpackError || expectArgumentCount != validArgumentCount || !wasHandled)
    {
        CommandPathParams returnStatusParam = { aEndpointId,
                                                0, // GroupId
                                                NetworkCommissioning::Id, aCommandId, (CommandPathFlags::kEndpointIdValid) };
        apCommandObj->AddStatusCode(returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                    Protocols::SecureChannel::Id, Protocols::InteractionModel::Status::InvalidCommand);
        ChipLogProgress(Zcl,
                        "Failed to dispatch command, %" PRIu32 "/%" PRIu32 " arguments parsed, TLVError=%" CHIP_ERROR_FORMAT
                        ", UnpackError=%" CHIP_ERROR_FORMAT " (last decoded tag = %" PRIu32,
                        validArgumentCount, expectArgumentCount, TLVError.Format(), TLVUnpackError.Format(), currentDecodeTagId);
        // A command with no arguments would never write currentDecodeTagId.  If
        // progress logging is also disabled, it would look unused.  Silence that
        // warning.
        UNUSED_VAR(currentDecodeTagId);
    }
}

} // namespace NetworkCommissioning

namespace OnOff {

void DispatchServerCommand(CommandHandler * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
    // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
    // Any error value TLVUnpackError means we have received an illegal value.
    // The following variables are used for all commands to save code size.
    CHIP_ERROR TLVError          = CHIP_NO_ERROR;
    CHIP_ERROR TLVUnpackError    = CHIP_NO_ERROR;
    uint32_t validArgumentCount  = 0;
    uint32_t expectArgumentCount = 0;
    uint32_t currentDecodeTagId  = 0;
    bool wasHandled              = false;
    {
        switch (aCommandId)
        {
        case Commands::Off::Id: {
            Commands::Off::DecodableType fieldStruct;

            ConcreteCommandPath path(aEndpointId, OnOff::Id, Commands::Off::Id);
            wasHandled = emberAfOnOffClusterOffCallback(apCommandObj, path, aEndpointId, fieldStruct);
            break;
        }
        case Commands::On::Id: {
            Commands::On::DecodableType fieldStruct;

            ConcreteCommandPath path(aEndpointId, OnOff::Id, Commands::On::Id);
            wasHandled = emberAfOnOffClusterOnCallback(apCommandObj, path, aEndpointId, fieldStruct);
            break;
        }
        case Commands::Toggle::Id: {
            Commands::Toggle::DecodableType fieldStruct;

            ConcreteCommandPath path(aEndpointId, OnOff::Id, Commands::Toggle::Id);
            wasHandled = emberAfOnOffClusterToggleCallback(apCommandObj, path, aEndpointId, fieldStruct);
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ReportCommandUnsupported(apCommandObj, aEndpointId, OnOff::Id, aCommandId);
            return;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || CHIP_NO_ERROR != TLVUnpackError || expectArgumentCount != validArgumentCount || !wasHandled)
    {
        CommandPathParams returnStatusParam = { aEndpointId,
                                                0, // GroupId
                                                OnOff::Id, aCommandId, (CommandPathFlags::kEndpointIdValid) };
        apCommandObj->AddStatusCode(returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                    Protocols::SecureChannel::Id, Protocols::InteractionModel::Status::InvalidCommand);
        ChipLogProgress(Zcl,
                        "Failed to dispatch command, %" PRIu32 "/%" PRIu32 " arguments parsed, TLVError=%" CHIP_ERROR_FORMAT
                        ", UnpackError=%" CHIP_ERROR_FORMAT " (last decoded tag = %" PRIu32,
                        validArgumentCount, expectArgumentCount, TLVError.Format(), TLVUnpackError.Format(), currentDecodeTagId);
        // A command with no arguments would never write currentDecodeTagId.  If
        // progress logging is also disabled, it would look unused.  Silence that
        // warning.
        UNUSED_VAR(currentDecodeTagId);
    }
}

} // namespace OnOff

namespace OperationalCredentials {

void DispatchServerCommand(CommandHandler * apCommandObj, CommandId aCommandId, EndpointId aEndpointId, TLV::TLVReader & aDataTlv)
{
    // We are using TLVUnpackError and TLVError here since both of them can be CHIP_END_OF_TLV
    // When TLVError is CHIP_END_OF_TLV, it means we have iterated all of the items, which is not a real error.
    // Any error value TLVUnpackError means we have received an illegal value.
    // The following variables are used for all commands to save code size.
    CHIP_ERROR TLVError          = CHIP_NO_ERROR;
    CHIP_ERROR TLVUnpackError    = CHIP_NO_ERROR;
    uint32_t validArgumentCount  = 0;
    uint32_t expectArgumentCount = 0;
    uint32_t currentDecodeTagId  = 0;
    bool wasHandled              = false;
    {
        switch (aCommandId)
        {
        case Commands::AddNOC::Id: {
            Commands::AddNOC::DecodableType fieldStruct;
            expectArgumentCount = 5;
            chip::ByteSpan NOCValue;
            chip::ByteSpan ICACValue;
            chip::ByteSpan IPKValue;
            chip::NodeId CaseAdminNode;
            uint16_t AdminVendorId;
            bool argExists[5];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 5)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(NOCValue);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(ICACValue);
                    break;
                case 2:
                    TLVUnpackError = aDataTlv.Get(IPKValue);
                    break;
                case 3:
                    TLVUnpackError = aDataTlv.Get(CaseAdminNode);
                    break;
                case 4:
                    TLVUnpackError = aDataTlv.Get(AdminVendorId);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 5 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, OperationalCredentials::Id, Commands::AddNOC::Id);
                wasHandled = emberAfOperationalCredentialsClusterAddNOCCallback(
                    apCommandObj, path, aEndpointId, NOCValue, ICACValue, IPKValue, CaseAdminNode, AdminVendorId, fieldStruct);
            }
            break;
        }
        case Commands::AddTrustedRootCertificate::Id: {
            Commands::AddTrustedRootCertificate::DecodableType fieldStruct;
            expectArgumentCount = 1;
            chip::ByteSpan RootCertificate;
            bool argExists[1];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 1)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(RootCertificate);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, OperationalCredentials::Id, Commands::AddTrustedRootCertificate::Id);
                wasHandled = emberAfOperationalCredentialsClusterAddTrustedRootCertificateCallback(apCommandObj, path, aEndpointId,
                                                                                                   RootCertificate, fieldStruct);
            }
            break;
        }
        case Commands::AttestationRequest::Id: {
            Commands::AttestationRequest::DecodableType fieldStruct;
            expectArgumentCount = 1;
            chip::ByteSpan AttestationNonce;
            bool argExists[1];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 1)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(AttestationNonce);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, OperationalCredentials::Id, Commands::AttestationRequest::Id);
                wasHandled = emberAfOperationalCredentialsClusterAttestationRequestCallback(apCommandObj, path, aEndpointId,
                                                                                            AttestationNonce, fieldStruct);
            }
            break;
        }
        case Commands::CertificateChainRequest::Id: {
            Commands::CertificateChainRequest::DecodableType fieldStruct;
            expectArgumentCount = 1;
            uint8_t CertificateType;
            bool argExists[1];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 1)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(CertificateType);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, OperationalCredentials::Id, Commands::CertificateChainRequest::Id);
                wasHandled = emberAfOperationalCredentialsClusterCertificateChainRequestCallback(apCommandObj, path, aEndpointId,
                                                                                                 CertificateType, fieldStruct);
            }
            break;
        }
        case Commands::OpCSRRequest::Id: {
            Commands::OpCSRRequest::DecodableType fieldStruct;
            expectArgumentCount = 1;
            chip::ByteSpan CSRNonce;
            bool argExists[1];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 1)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(CSRNonce);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, OperationalCredentials::Id, Commands::OpCSRRequest::Id);
                wasHandled = emberAfOperationalCredentialsClusterOpCSRRequestCallback(apCommandObj, path, aEndpointId, CSRNonce,
                                                                                      fieldStruct);
            }
            break;
        }
        case Commands::RemoveFabric::Id: {
            Commands::RemoveFabric::DecodableType fieldStruct;
            expectArgumentCount = 1;
            uint8_t FabricIndex;
            bool argExists[1];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 1)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(FabricIndex);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, OperationalCredentials::Id, Commands::RemoveFabric::Id);
                wasHandled = emberAfOperationalCredentialsClusterRemoveFabricCallback(apCommandObj, path, aEndpointId, FabricIndex,
                                                                                      fieldStruct);
            }
            break;
        }
        case Commands::RemoveTrustedRootCertificate::Id: {
            Commands::RemoveTrustedRootCertificate::DecodableType fieldStruct;
            expectArgumentCount = 1;
            chip::ByteSpan TrustedRootIdentifier;
            bool argExists[1];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 1)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(TrustedRootIdentifier);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, OperationalCredentials::Id, Commands::RemoveTrustedRootCertificate::Id);
                wasHandled = emberAfOperationalCredentialsClusterRemoveTrustedRootCertificateCallback(
                    apCommandObj, path, aEndpointId, TrustedRootIdentifier, fieldStruct);
            }
            break;
        }
        case Commands::UpdateFabricLabel::Id: {
            Commands::UpdateFabricLabel::DecodableType fieldStruct;
            expectArgumentCount = 1;
            const uint8_t * Label;
            bool argExists[1];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 1)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    // TODO(#5542): The cluster handlers should accept a ByteSpan for all string types.
                    TLVUnpackError = aDataTlv.GetDataPtr(Label);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 1 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, OperationalCredentials::Id, Commands::UpdateFabricLabel::Id);
                wasHandled = emberAfOperationalCredentialsClusterUpdateFabricLabelCallback(
                    apCommandObj, path, aEndpointId, const_cast<uint8_t *>(Label), fieldStruct);
            }
            break;
        }
        case Commands::UpdateNOC::Id: {
            Commands::UpdateNOC::DecodableType fieldStruct;
            expectArgumentCount = 2;
            chip::ByteSpan NOCValue;
            chip::ByteSpan ICACValue;
            bool argExists[2];

            memset(argExists, 0, sizeof argExists);

            while ((TLVError = aDataTlv.Next()) == CHIP_NO_ERROR)
            {
                // Since call to aDataTlv.Next() is CHIP_NO_ERROR, the read head always points to an element.
                // Skip this element if it is not a ContextTag, not consider it as an error if other values are valid.
                if (!TLV::IsContextTag(aDataTlv.GetTag()))
                {
                    continue;
                }
                currentDecodeTagId = TLV::TagNumFromTag(aDataTlv.GetTag());
                if (currentDecodeTagId < 2)
                {
                    if (argExists[currentDecodeTagId])
                    {
                        ChipLogProgress(Zcl, "Duplicate TLV tag %" PRIx32, TLV::TagNumFromTag(aDataTlv.GetTag()));
                        TLVUnpackError = CHIP_ERROR_IM_MALFORMED_COMMAND_DATA_ELEMENT;
                        break;
                    }
                    else
                    {
                        argExists[currentDecodeTagId] = true;
                        validArgumentCount++;
                    }
                }
                switch (currentDecodeTagId)
                {
                case 0:
                    TLVUnpackError = aDataTlv.Get(NOCValue);
                    break;
                case 1:
                    TLVUnpackError = aDataTlv.Get(ICACValue);
                    break;
                default:
                    // Unsupported tag, ignore it.
                    ChipLogProgress(Zcl, "Unknown TLV tag during processing.");
                    break;
                }
                if (CHIP_NO_ERROR != TLVUnpackError)
                {
                    break;
                }
            }

            if (CHIP_END_OF_TLV == TLVError)
            {
                // CHIP_END_OF_TLV means we have iterated all items in the structure, which is not a real error.
                TLVError = CHIP_NO_ERROR;
            }

            if (CHIP_NO_ERROR == TLVError && CHIP_NO_ERROR == TLVUnpackError && 2 == validArgumentCount)
            {
                ConcreteCommandPath path(aEndpointId, OperationalCredentials::Id, Commands::UpdateNOC::Id);
                wasHandled = emberAfOperationalCredentialsClusterUpdateNOCCallback(apCommandObj, path, aEndpointId, NOCValue,
                                                                                   ICACValue, fieldStruct);
            }
            break;
        }
        default: {
            // Unrecognized command ID, error status will apply.
            ReportCommandUnsupported(apCommandObj, aEndpointId, OperationalCredentials::Id, aCommandId);
            return;
        }
        }
    }

    if (CHIP_NO_ERROR != TLVError || CHIP_NO_ERROR != TLVUnpackError || expectArgumentCount != validArgumentCount || !wasHandled)
    {
        CommandPathParams returnStatusParam = { aEndpointId,
                                                0, // GroupId
                                                OperationalCredentials::Id, aCommandId, (CommandPathFlags::kEndpointIdValid) };
        apCommandObj->AddStatusCode(returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kBadRequest,
                                    Protocols::SecureChannel::Id, Protocols::InteractionModel::Status::InvalidCommand);
        ChipLogProgress(Zcl,
                        "Failed to dispatch command, %" PRIu32 "/%" PRIu32 " arguments parsed, TLVError=%" CHIP_ERROR_FORMAT
                        ", UnpackError=%" CHIP_ERROR_FORMAT " (last decoded tag = %" PRIu32,
                        validArgumentCount, expectArgumentCount, TLVError.Format(), TLVUnpackError.Format(), currentDecodeTagId);
        // A command with no arguments would never write currentDecodeTagId.  If
        // progress logging is also disabled, it would look unused.  Silence that
        // warning.
        UNUSED_VAR(currentDecodeTagId);
    }
}

} // namespace OperationalCredentials

} // namespace Clusters

void DispatchSingleClusterCommand(ClusterId aClusterId, CommandId aCommandId, EndpointId aEndPointId, TLV::TLVReader & aReader,
                                  CommandHandler * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=" ChipLogFormatMEI " Command=" ChipLogFormatMEI " Endpoint=%" PRIx16,
                  ChipLogValueMEI(aClusterId), ChipLogValueMEI(aCommandId), aEndPointId);
    Compatibility::SetupEmberAfObjects(apCommandObj, aClusterId, aCommandId, aEndPointId);
    TLV::TLVType dataTlvType;
    SuccessOrExit(aReader.EnterContainer(dataTlvType));
    switch (aClusterId)
    {
    case Clusters::AdministratorCommissioning::Id:
        Clusters::AdministratorCommissioning::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case Clusters::DiagnosticLogs::Id:
        Clusters::DiagnosticLogs::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case Clusters::GeneralCommissioning::Id:
        Clusters::GeneralCommissioning::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case Clusters::NetworkCommissioning::Id:
        Clusters::NetworkCommissioning::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case Clusters::OnOff::Id:
        Clusters::OnOff::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    case Clusters::OperationalCredentials::Id:
        Clusters::OperationalCredentials::DispatchServerCommand(apCommandObj, aCommandId, aEndPointId, aReader);
        break;
    default:
        // Unrecognized cluster ID, error status will apply.
        CommandPathParams returnStatusParam = { aEndPointId,
                                                0, // GroupId
                                                aClusterId, aCommandId, (CommandPathFlags::kEndpointIdValid) };
        apCommandObj->AddStatusCode(returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                    Protocols::SecureChannel::Id, Protocols::InteractionModel::Status::InvalidCommand);
        ChipLogError(Zcl, "Unknown cluster %" PRIx32, aClusterId);
        break;
    }
exit:
    Compatibility::ResetEmberAfObjects();
    aReader.ExitContainer(dataTlvType);
}

void DispatchSingleClusterResponseCommand(ClusterId aClusterId, CommandId aCommandId, EndpointId aEndPointId,
                                          TLV::TLVReader & aReader, CommandSender * apCommandObj)
{
    ChipLogDetail(Zcl, "Received Cluster Command: Cluster=%" PRIx32 " Command=%" PRIx32 " Endpoint=%" PRIx16, aClusterId,
                  aCommandId, aEndPointId);
    Compatibility::SetupEmberAfObjects(apCommandObj, aClusterId, aCommandId, aEndPointId);
    TLV::TLVType dataTlvType;
    SuccessOrExit(aReader.EnterContainer(dataTlvType));
    switch (aClusterId)
    {
    default:
        // Unrecognized cluster ID, error status will apply.
        CommandPathParams returnStatusParam = { aEndPointId,
                                                0, // GroupId
                                                aClusterId, aCommandId, (CommandPathFlags::kEndpointIdValid) };
        apCommandObj->AddStatusCode(returnStatusParam, Protocols::SecureChannel::GeneralStatusCode::kNotFound,
                                    Protocols::SecureChannel::Id, Protocols::InteractionModel::Status::InvalidCommand);
        ChipLogError(Zcl, "Unknown cluster " ChipLogFormatMEI, ChipLogValueMEI(aClusterId));
        break;
    }
exit:
    Compatibility::ResetEmberAfObjects();
    aReader.ExitContainer(dataTlvType);
}

} // namespace app
} // namespace chip
