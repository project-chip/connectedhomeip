/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include "CHIPClusters.h"

#include <app-common/zap-generated/cluster-objects.h>
#include <app-common/zap-generated/ids/Attributes.h>

namespace chip {

using namespace app::Clusters;
using namespace System;
using namespace Encoding::LittleEndian;

namespace Controller {

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafe::Type>(
    const chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafe::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafe::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::GeneralCommissioning::Commands::CommissioningComplete::Type>(
    const chip::app::Clusters::GeneralCommissioning::Commands::CommissioningComplete::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::GeneralCommissioning::Commands::CommissioningComplete::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfig::Type>(
    const chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfig::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfig::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::DisableNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::DisableNetwork::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::NetworkCommissioning::Commands::DisableNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::EnableNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::EnableNetwork::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::NetworkCommissioning::Commands::EnableNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetwork::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworks::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworks::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworks::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::AddNOC::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::AddNOC::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::OperationalCredentials::Commands::AddNOC::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR
ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::AddTrustedRootCertificate::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::AddTrustedRootCertificate::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::AddTrustedRootCertificate::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::AttestationRequest::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::AttestationRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::AttestationRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR
ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::CertificateChainRequest::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::CertificateChainRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::CertificateChainRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::OpCSRRequest::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::OpCSRRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::OpCSRRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::RemoveFabric::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::RemoveFabric::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::RemoveFabric::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::UpdateFabricLabel::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::UpdateFabricLabel::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::UpdateFabricLabel::Type::ResponseType>,
    CommandResponseFailureCallback);

template <typename RequestDataT>
CHIP_ERROR ClusterBase::InvokeCommand(const RequestDataT & requestData, void * context,
                                      CommandResponseSuccessCallback<typename RequestDataT::ResponseType> successCb,
                                      CommandResponseFailureCallback failureCb)
{
    VerifyOrReturnError(mDevice != nullptr, CHIP_ERROR_INCORRECT_STATE);

    auto onSuccessCb = [context, successCb](const app::ConcreteCommandPath & commandPath, const app::StatusIB & aStatus,
                                            const typename RequestDataT::ResponseType & responseData) {
        successCb(context, responseData);
    };

    auto onFailureCb = [context, failureCb](const app::StatusIB & aStatus, CHIP_ERROR aError) {
        failureCb(context, app::ToEmberAfStatus(aStatus.mStatus));
    };

    return InvokeCommandRequest(mDevice->GetExchangeManager(), mDevice->GetSecureSession().Value(), mEndpoint, requestData,
                                onSuccessCb, onFailureCb);
};

} // namespace Controller
} // namespace chip
