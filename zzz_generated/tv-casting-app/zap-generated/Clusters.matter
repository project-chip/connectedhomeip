// This IDL was generated automatically by ZAP.
// It is for view/code review purposes only.

struct Dimension {
  double kWidth = 1;
  double kHeight = 2;
  MetricTypeEnum kMetric = 3;
}

struct AdditionalInfo {
  CHAR_STRING kName = 1;
  CHAR_STRING kValue = 2;
}

struct SimpleStruct {
  INT8U kA = 1;
  BOOLEAN kB = 2;
  SimpleEnum kC = 3;
  OCTET_STRING kD = 4;
  CHAR_STRING kE = 5;
  SimpleBitmap kF = 6;
  single kG = 7;
  double kH = 8;
}

struct NullablesAndOptionalsStruct {
  INT16U kNullableInt = 1;
  INT16U kOptionalInt = 2;
  INT16U kNullableOptionalInt = 3;
  CHAR_STRING kNullableString = 4;
  CHAR_STRING kOptionalString = 5;
  CHAR_STRING kNullableOptionalString = 6;
  SimpleStruct kNullableStruct = 7;
  SimpleStruct kOptionalStruct = 8;
  SimpleStruct kNullableOptionalStruct = 9;
  SimpleEnum kNullableList = 10;
  SimpleEnum kOptionalList = 11;
  SimpleEnum kNullableOptionalList = 12;
}

struct NestedStruct {
  INT8U kA = 1;
  BOOLEAN kB = 2;
  SimpleStruct kC = 3;
}

struct NestedStructList {
  INT8U kA = 1;
  BOOLEAN kB = 2;
  SimpleStruct kC = 3;
  SimpleStruct kD = 4;
  INT32U kE = 5;
  OCTET_STRING kF = 6;
  INT8U kG = 7;
}

struct DoubleNestedStructList {
  NestedStructList kA = 1;
}

struct Parameter {
  ParameterEnum kType = 1;
  CHAR_STRING kValue = 2;
  AdditionalInfo kExternalIDList = 3;
}

struct ContentSearch {
  Parameter kParameterList = 1;
}

struct StyleInformation {
  CHAR_STRING kImageUrl = 1;
  CHAR_STRING kColor = 2;
  Dimension kSize = 3;
}

struct BrandingInformation {
  CHAR_STRING kProviderName = 1;
  StyleInformation kBackground = 2;
  StyleInformation kLogo = 3;
  StyleInformation kProgressBar = 4;
  StyleInformation kSplash = 5;
  StyleInformation kWaterMark = 6;
}

struct Application {
  INT16U kCatalogVendorId = 1;
  CHAR_STRING kApplicationId = 2;
}

struct ApplicationEP {
  Application kApplication = 1;
  CHAR_STRING kEndpoint = 2;
}

struct Target {
  cluster_id kCluster = 0;
  endpoint_no kEndpoint = 1;
  devtype_id kDeviceType = 2;
}

[fabric_scoped_by=kFabricIndex]
struct AccessControlEntry {
  fabric_idx kFabricIndex = 0;
  Privilege kPrivilege = 1;
  AuthMode kAuthMode = 2;
  INT64U kSubjects = 3;
  Target kTargets = 4;
}

struct ActionStruct {
  INT16U kActionID = 1;
  CHAR_STRING kName = 2;
  ActionTypeEnum kType = 3;
  INT16U kEndpointListID = 4;
  INT16U kSupportedCommands = 5;
  ActionStateEnum kStatus = 6;
}

struct BasicCommissioningInfoType {
  INT32U kFailSafeExpiryLengthMs = 1;
}

struct BatChargeFaultChangeType {
  BatChargeFaultType kCurrent = 1;
  BatChargeFaultType kPrevious = 2;
}

struct BatFaultChangeType {
  BatFaultType kCurrent = 1;
  BatFaultType kPrevious = 2;
}

struct ChannelInfo {
  INT16U kMajorNumber = 1;
  INT16U kMinorNumber = 2;
  CHAR_STRING kName = 3;
  CHAR_STRING kCallSign = 4;
  CHAR_STRING kAffiliateCallSign = 5;
}

struct DeviceType {
  DEVTYPE_ID kType = 1;
  INT16U kRevision = 2;
}

struct DlCredential {
  DlCredentialType kCredentialType = 1;
  INT16U kCredentialIndex = 2;
}

struct EndpointListStruct {
  INT16U kEndpointListID = 1;
  CHAR_STRING kName = 2;
  EndpointListTypeEnum kType = 3;
  ENDPOINT_NO kEndpoints = 4;
}

[fabric_scoped_by=kFabricIndex]
struct ExtensionEntry {
  fabric_idx kFabricIndex = 0;
  OCTET_STRING kData = 1;
}

struct FabricDescriptor {
  INT8U kFabricIndex = 1;
  OCTET_STRING kRootPublicKey = 2;
  INT16U kVendorId = 3;
  FABRIC_ID kFabricId = 4;
  NODE_ID kNodeId = 5;
  CHAR_STRING kLabel = 6;
}

struct GroupInfo {
  INT16U kFabricIndex = 0;
  INT16U kGroupId = 1;
  INT16U kEndpoints = 2;
  CHAR_STRING kGroupName = 3;
}

[fabric_scoped_by=kFabricIndex]
struct GroupKey {
  fabric_idx kFabricIndex = 0;
  INT16U kGroupId = 1;
  INT16U kGroupKeySetID = 2;
}

struct GroupKeySet {
  INT16U kGroupKeySetID = 0;
  GroupKeySecurityPolicy kSecurityPolicy = 1;
  OCTET_STRING kEpochKey0 = 2;
  INT64U kEpochStartTime0 = 3;
  OCTET_STRING kEpochKey1 = 4;
  INT64U kEpochStartTime1 = 5;
  OCTET_STRING kEpochKey2 = 6;
  INT64U kEpochStartTime2 = 7;
}

struct IasAceZoneStatusResult {
  INT8U kZoneId = 1;
  IasZoneStatus kZoneStatus = 2;
}

struct InputInfo {
  INT8U kIndex = 1;
  InputTypeEnum kInputType = 2;
  CHAR_STRING kName = 3;
  CHAR_STRING kDescription = 4;
}

struct LabelStruct {
  CHAR_STRING kLabel = 1;
  CHAR_STRING kValue = 2;
}

struct LineupInfo {
  CHAR_STRING kOperatorName = 1;
  CHAR_STRING kLineupName = 2;
  CHAR_STRING kPostalCode = 3;
  LineupInfoTypeEnum kLineupInfoType = 4;
}

struct ModeOptionStruct {
  CHAR_STRING kLabel = 1;
  INT8U kMode = 2;
  INT32U kSemanticTag = 3;
}

struct NOCStruct {
  INT8U kFabricIndex = 1;
  OCTET_STRING kNoc = 2;
}

struct NeighborTable {
  INT64U kExtAddress = 1;
  INT32U kAge = 2;
  INT16U kRloc16 = 3;
  INT32U kLinkFrameCounter = 4;
  INT32U kMleFrameCounter = 5;
  INT8U kLqi = 6;
  INT8S kAverageRssi = 7;
  INT8S kLastRssi = 8;
  INT8U kFrameErrorRate = 9;
  INT8U kMessageErrorRate = 10;
  BOOLEAN kRxOnWhenIdle = 11;
  BOOLEAN kFullThreadDevice = 12;
  BOOLEAN kFullNetworkData = 13;
  BOOLEAN kIsChild = 14;
}

struct NetworkInfo {
  OCTET_STRING kNetworkID = 1;
  BOOLEAN kConnected = 2;
}

struct NetworkInterfaceType {
  CHAR_STRING kName = 1;
  BOOLEAN kFabricConnected = 2;
  BOOLEAN kOffPremiseServicesReachableIPv4 = 3;
  BOOLEAN kOffPremiseServicesReachableIPv6 = 4;
  OCTET_STRING kHardwareAddress = 5;
  InterfaceType kType = 6;
}

struct Notification {
  INT16U kContentId = 1;
  ENUM8 kStatusFeedback = 2;
}

struct OperationalDatasetComponents {
  BOOLEAN kActiveTimestampPresent = 1;
  BOOLEAN kPendingTimestampPresent = 2;
  BOOLEAN kMasterKeyPresent = 3;
  BOOLEAN kNetworkNamePresent = 4;
  BOOLEAN kExtendedPanIdPresent = 5;
  BOOLEAN kMeshLocalPrefixPresent = 6;
  BOOLEAN kDelayPresent = 7;
  BOOLEAN kPanIdPresent = 8;
  BOOLEAN kChannelPresent = 9;
  BOOLEAN kPskcPresent = 10;
  BOOLEAN kSecurityPolicyPresent = 11;
  BOOLEAN kChannelMaskPresent = 12;
}

struct OutputInfo {
  INT8U kIndex = 1;
  OutputTypeEnum kOutputType = 2;
  CHAR_STRING kName = 3;
}

struct PlaybackPosition {
  INT64U kUpdatedAt = 1;
  INT64U kPosition = 2;
}

struct PowerProfileRecord {
  INT8U kPowerProfileId = 1;
  INT8U kEnergyPhaseId = 2;
  BOOLEAN kPowerProfileRemoteControl = 3;
  ENUM8 kPowerProfileState = 4;
}

[fabric_scoped_by=kFabricIndex]
struct ProviderLocation {
  fabric_idx kFabricIndex = 0;
  node_id kProviderNodeID = 1;
  endpoint_no kEndpoint = 2;
}

struct ReadAttributeStatusRecord {
  ATTRIB_ID kAttributeId = 1;
  Status kStatus = 2;
  INT8U kAttributeType = 3;
  NO_DATA kAttributeLocation = 4;
}

struct ReadStructuredAttributeRecord {
  ATTRIB_ID kAttributeId = 1;
  INT8U kIndicator = 2;
  INT16U kIndicies = 3;
}

struct RouteTable {
  INT64U kExtAddress = 1;
  INT16U kRloc16 = 2;
  INT8U kRouterId = 3;
  INT8U kNextHop = 4;
  INT8U kPathCost = 5;
  INT8U kLQIIn = 6;
  INT8U kLQIOut = 7;
  INT8U kAge = 8;
  BOOLEAN kAllocated = 9;
  BOOLEAN kLinkEstablished = 10;
}

struct SceneExtensionAttributeInfo {
  INT8U kAttributeType = 1;
  NO_DATA kAttributeLocation = 2;
}

struct SceneExtensionFieldSet {
  CLUSTER_ID kClusterId = 1;
  INT8U kLength = 2;
  INT8U kValue = 3;
}

struct ScheduledPhase {
  INT8U kEnergyPhaseId = 1;
  INT16U kScheduledTime = 2;
}

struct SecurityPolicy {
  INT16U kRotationTime = 1;
  BITMAP16 kFlags = 2;
}

struct SemanticTag {
  ENUM16 kMfgCode = 1;
  ENUM16 kValue = 2;
}

struct SoftwareFault {
  INT64U kId = 1;
  CHAR_STRING kName = 2;
  OCTET_STRING kFaultRecording = 3;
}

struct TargetInfo {
  INT8U kIdentifier = 1;
  CHAR_STRING kName = 2;
}

struct TestListStructOctet {
  INT64U kFabricIndex = 1;
  OCTET_STRING kOperationalCert = 2;
}

struct ThreadInterfaceScanResult {
  INT64U kPanId = 1;
  INT64U kExtendedPanId = 2;
  CHAR_STRING kNetworkName = 3;
  INT16U kChannel = 4;
  INT8U kVersion = 5;
  INT64U kExtendedAddress = 6;
  INT8S kRssi = 7;
  INT8U kLqi = 8;
}

struct ThreadMetrics {
  INT64U kId = 1;
  CHAR_STRING kName = 2;
  INT32U kStackFreeCurrent = 3;
  INT32U kStackFreeMinimum = 4;
  INT32U kStackSize = 5;
}

struct TransferredPhase {
  INT8U kEnergyPhaseId = 1;
  INT8U kMacroPhaseId = 2;
  INT16U kExpectedDuration = 3;
  INT16U kPeakPower = 4;
  INT16U kEnergy = 5;
  INT16U kMaxActivationDelay = 6;
}

struct WiFiInterfaceScanResult {
  BITMAP8 kSecurity = 1;
  OCTET_STRING kSsid = 2;
  OCTET_STRING kBssid = 3;
  INT16U kChannel = 4;
  WiFiBand kWiFiBand = 5;
  INT8S kRssi = 6;
}

struct WiredFaultChangeType {
  WiredFaultType kCurrent = 1;
  WiredFaultType kPrevious = 2;
}

struct WriteAttributeRecord {
  ATTRIB_ID kAttributeId = 1;
  INT8U kAttributeType = 2;
  NO_DATA kAttributeLocation = 3;
}

struct WriteAttributeStatusRecord {
  Status kStatus = 1;
  ATTRIB_ID kAttributeId = 2;
}

struct WriteStructuredAttributeRecord {
  ATTRIB_ID kAttributeId = 1;
  INT8U kIndicator = 2;
  INT16U kIndicies = 3;
  INT8U kAttributeType = 4;
  NO_DATA kAttributeLocation = 5;
}

struct WriteStructuredAttributeStatusRecord {
  Status kStatus = 1;
  ATTRIB_ID kAttributeId = 2;
  INT8U kIndicator = 3;
  INT16U kIndicies = 4;
}


client cluster AccountLogin = 1294 {
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct GetSetupPINRequestRequest {
    CHAR_STRING tempAccountIdentifier;  
  }

  request struct LoginRequestRequest {
    CHAR_STRING tempAccountIdentifier;  
    CHAR_STRING setupPIN;  
  }

  request struct LogoutRequestRequest {
  }

  command GetSetupPINRequest(GetSetupPINRequestRequest): GetSetupPINResponse = 0;
  command LoginRequest(LoginRequestRequest): DefaultSuccess = 2;
  command LogoutRequest(LogoutRequestRequest): DefaultSuccess = 3;
}

server cluster AdministratorCommissioning = 60 {
  enum CommissioningWindowStatus : ENUM8 {
    kWindowNotOpen = 0;
    kEnhancedWindowOpen = 1;
    kBasicWindowOpen = 2;
  }

  enum StatusCode : ENUM8 {
    kBusy = 1;
    kPAKEParameterError = 2;
    kWindowNotOpen = 3;
  }

  attribute(writable) int8u windowStatus = 0;
  attribute(writable) fabric_idx adminFabricIndex = 1;
  attribute(writable) int16u adminVendorId = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct OpenBasicCommissioningWindowRequest {
    INT16U CommissioningTimeout;  
  }

  request struct OpenCommissioningWindowRequest {
    INT16U CommissioningTimeout;  
    OCTET_STRING PAKEVerifier;  
    INT16U Discriminator;  
    INT32U Iterations;  
    OCTET_STRING Salt;  
    INT16U PasscodeID;  
  }

  request struct RevokeCommissioningRequest {
  }

  command OpenBasicCommissioningWindow(OpenBasicCommissioningWindowRequest): DefaultSuccess = 1;
  command OpenCommissioningWindow(OpenCommissioningWindowRequest): DefaultSuccess = 0;
  command RevokeCommissioning(RevokeCommissioningRequest): DefaultSuccess = 2;
}

client cluster ApplicationBasic = 1293 {
  enum ApplicationStatusEnum : ENUM8 {
    kStopped = 0;
    kActiveVisibleFocus = 1;
    kActiveHidden = 2;
    kActiveVisibleNotFocus = 3;
  }

  attribute(writable, reportable) char_string vendorName = 0;
  attribute(writable, reportable) int16u vendorId = 1;
  attribute(writable, reportable) char_string applicationName = 2;
  attribute(writable, reportable) int16u productId = 3;
  attribute(writable, reportable) ApplicationStatusEnum applicationStatus = 5;
  attribute(writable, reportable) char_string applicationVersion = 6;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

client cluster ApplicationLauncher = 1292 {
  enum StatusEnum : ENUM8 {
    kSuccess = 0;
    kAppNotAvailable = 1;
    kSystemBusy = 2;
  }

  attribute(writable, reportable) INT16U applicationLauncherList = 0;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct HideAppRequestRequest {
    Application application;  
  }

  request struct LaunchAppRequestRequest {
    CHAR_STRING data;  
    Application application;  
  }

  request struct StopAppRequestRequest {
    Application application;  
  }

  command HideAppRequest(HideAppRequestRequest): LauncherResponse = 2;
  command LaunchAppRequest(LaunchAppRequestRequest): LauncherResponse = 0;
  command StopAppRequest(StopAppRequestRequest): LauncherResponse = 1;
}

client cluster AudioOutput = 1291 {
  enum OutputTypeEnum : ENUM8 {
    kHdmi = 0;
    kBt = 1;
    kOptical = 2;
    kHeadphone = 3;
    kInternal = 4;
    kOther = 5;
  }

  attribute(writable, reportable) OutputInfo audioOutputList = 0;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct RenameOutputRequestRequest {
    INT8U index;  
    CHAR_STRING name;  
  }

  request struct SelectOutputRequestRequest {
    INT8U index;  
  }

  command RenameOutputRequest(RenameOutputRequestRequest): DefaultSuccess = 1;
  command SelectOutputRequest(SelectOutputRequestRequest): DefaultSuccess = 0;
}

server cluster BarrierControl = 259 {
  attribute(writable, reportable) enum8 barrierMovingState = 1;
  attribute(writable, reportable) bitmap16 barrierSafetyStatus = 2;
  attribute(writable, reportable) bitmap8 barrierCapabilities = 3;
  attribute(writable, reportable) int8u barrierPosition = 10;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct BarrierControlGoToPercentRequest {
    INT8U percentOpen;  
  }

  request struct BarrierControlStopRequest {
  }

  command BarrierControlGoToPercent(BarrierControlGoToPercentRequest): DefaultSuccess = 0;
  command BarrierControlStop(BarrierControlStopRequest): DefaultSuccess = 1;
}

server cluster Basic = 40 {
  event StartUp(critical) = 0 {
    kSoftwareVersion = 0,
  }

  event ShutDown(critical) = 1 {
  }

  event Leave(info) = 2 {
  }

  event ReachableChanged(info) = 3 {
    kReachableNewValue = 0,
  }

  attribute(writable, reportable) int16u interactionModelVersion = 0;
  attribute(writable, reportable) char_string vendorName = 1;
  attribute(writable, reportable) vendor_id vendorID = 2;
  attribute(writable, reportable) char_string productName = 3;
  attribute(writable, reportable) int16u productID = 4;
  attribute(readonly, reportable) char_string nodeLabel = 5;
  attribute(readonly, reportable) char_string location = 6;
  attribute(writable, reportable) int16u hardwareVersion = 7;
  attribute(writable, reportable) char_string hardwareVersionString = 8;
  attribute(writable, reportable) int32u softwareVersion = 9;
  attribute(writable, reportable) char_string softwareVersionString = 10;
  attribute(writable, reportable) char_string manufacturingDate = 11;
  attribute(writable, reportable) char_string partNumber = 12;
  attribute(writable, reportable) long_char_string productURL = 13;
  attribute(writable, reportable) char_string productLabel = 14;
  attribute(writable, reportable) char_string serialNumber = 15;
  attribute(readonly, reportable) boolean localConfigDisabled = 16;
  attribute(writable, reportable) boolean reachable = 17;
  attribute(writable) char_string uniqueID = 18;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct MfgSpecificPingRequest {
  }

  command MfgSpecificPing(MfgSpecificPingRequest): DefaultSuccess = 0;
}

server cluster BinaryInputBasic = 15 {
  attribute(readonly, reportable) boolean outOfService = 81;
  attribute(readonly, reportable) boolean presentValue = 85;
  attribute(writable, reportable) bitmap8 statusFlags = 111;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster Binding = 30 {
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct BindRequest {
    NODE_ID nodeId;  
    GROUP_ID groupId;  
    ENDPOINT_NO endpointId;  
    CLUSTER_ID clusterId;  
  }

  request struct UnbindRequest {
    NODE_ID nodeId;  
    GROUP_ID groupId;  
    ENDPOINT_NO endpointId;  
    CLUSTER_ID clusterId;  
  }

  command Bind(BindRequest): DefaultSuccess = 0;
  command Unbind(UnbindRequest): DefaultSuccess = 1;
}

server cluster BridgedDeviceBasic = 57 {
  attribute(writable, reportable) char_string vendorName = 1;
  attribute(writable, reportable) int16u vendorID = 2;
  attribute(writable, reportable) char_string productName = 3;
  attribute(readonly, reportable) char_string nodeLabel = 5;
  attribute(writable, reportable) int16u hardwareVersion = 7;
  attribute(writable, reportable) char_string hardwareVersionString = 8;
  attribute(writable, reportable) int32u softwareVersion = 9;
  attribute(writable, reportable) char_string softwareVersionString = 10;
  attribute(writable, reportable) char_string manufacturingDate = 11;
  attribute(writable, reportable) char_string partNumber = 12;
  attribute(writable, reportable) long_char_string productURL = 13;
  attribute(writable, reportable) char_string productLabel = 14;
  attribute(writable, reportable) char_string serialNumber = 15;
  attribute(writable, reportable) boolean reachable = 17;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct LeaveRequest {
  }

  request struct ReachableChangedRequest {
  }

  request struct ShutDownRequest {
  }

  request struct StartUpRequest {
  }

  command Leave(LeaveRequest): DefaultSuccess = 2;
  command ReachableChanged(ReachableChangedRequest): DefaultSuccess = 3;
  command ShutDown(ShutDownRequest): DefaultSuccess = 1;
  command StartUp(StartUpRequest): DefaultSuccess = 0;
}

client cluster Channel = 1284 {
  enum ErrorTypeEnum : ENUM8 {
    kMultipleMatches = 0;
    kNoMatches = 1;
  }

  enum LineupInfoTypeEnum : ENUM8 {
    kMso = 0;
  }

  attribute(writable, reportable) ChannelInfo channelList = 0;
  attribute(readonly, reportable) LineupInfo channelLineup = 1;
  attribute(readonly, reportable) ChannelInfo currentChannel = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct ChangeChannelByNumberRequestRequest {
    INT16U majorNumber;  
    INT16U minorNumber;  
  }

  request struct ChangeChannelRequestRequest {
    CHAR_STRING match;  
  }

  request struct SkipChannelRequestRequest {
    INT16U count;  
  }

  command ChangeChannelByNumberRequest(ChangeChannelByNumberRequestRequest): DefaultSuccess = 2;
  command ChangeChannelRequest(ChangeChannelRequestRequest): ChangeChannelResponse = 0;
  command SkipChannelRequest(SkipChannelRequestRequest): DefaultSuccess = 3;
}

server cluster ColorControl = 768 {
  enum ColorLoopAction : ENUM8 {
    kDeactivate = 0;
    kActivateFromColorLoopStartEnhancedHue = 1;
    kActivateFromEnhancedCurrentHue = 2;
  }

  enum ColorLoopDirection : ENUM8 {
    kDecrementHue = 0;
    kIncrementHue = 1;
  }

  enum ColorMode : ENUM8 {
    kCurrentHueAndCurrentSaturation = 0;
    kCurrentXAndCurrentY = 1;
    kColorTemperature = 2;
  }

  enum HueDirection : ENUM8 {
    kShortestDistance = 0;
    kLongestDistance = 1;
    kUp = 2;
    kDown = 3;
  }

  enum HueMoveMode : ENUM8 {
    kStop = 0;
    kUp = 1;
    kDown = 3;
  }

  enum HueStepMode : ENUM8 {
    kUp = 1;
    kDown = 3;
  }

  enum SaturationMoveMode : ENUM8 {
    kStop = 0;
    kUp = 1;
    kDown = 3;
  }

  enum SaturationStepMode : ENUM8 {
    kUp = 1;
    kDown = 3;
  }

  attribute(writable, reportable) int8u currentHue = 0;
  attribute(writable, reportable) int8u currentSaturation = 1;
  attribute(writable, reportable) int16u remainingTime = 2;
  attribute(writable, reportable) int16u currentX = 3;
  attribute(writable, reportable) int16u currentY = 4;
  attribute(writable, reportable) enum8 driftCompensation = 5;
  attribute(writable, reportable) char_string compensationText = 6;
  attribute(writable, reportable) int16u colorTemperature = 7;
  attribute(writable, reportable) enum8 colorMode = 8;
  attribute(readonly, reportable) bitmap8 colorControlOptions = 15;
  attribute(writable, reportable) int8u numberOfPrimaries = 16;
  attribute(writable, reportable) int16u primary1X = 17;
  attribute(writable, reportable) int16u primary1Y = 18;
  attribute(writable, reportable) int8u primary1Intensity = 19;
  attribute(writable, reportable) int16u primary2X = 21;
  attribute(writable, reportable) int16u primary2Y = 22;
  attribute(writable, reportable) int8u primary2Intensity = 23;
  attribute(writable, reportable) int16u primary3X = 25;
  attribute(writable, reportable) int16u primary3Y = 26;
  attribute(writable, reportable) int8u primary3Intensity = 27;
  attribute(writable, reportable) int16u primary4X = 32;
  attribute(writable, reportable) int16u primary4Y = 33;
  attribute(writable, reportable) int8u primary4Intensity = 34;
  attribute(writable, reportable) int16u primary5X = 36;
  attribute(writable, reportable) int16u primary5Y = 37;
  attribute(writable, reportable) int8u primary5Intensity = 38;
  attribute(writable, reportable) int16u primary6X = 40;
  attribute(writable, reportable) int16u primary6Y = 41;
  attribute(writable, reportable) int8u primary6Intensity = 42;
  attribute(readonly, reportable) int16u whitePointX = 48;
  attribute(readonly, reportable) int16u whitePointY = 49;
  attribute(readonly, reportable) int16u colorPointRX = 50;
  attribute(readonly, reportable) int16u colorPointRY = 51;
  attribute(readonly, reportable) int8u colorPointRIntensity = 52;
  attribute(readonly, reportable) int16u colorPointGX = 54;
  attribute(readonly, reportable) int16u colorPointGY = 55;
  attribute(readonly, reportable) int8u colorPointGIntensity = 56;
  attribute(readonly, reportable) int16u colorPointBX = 58;
  attribute(readonly, reportable) int16u colorPointBY = 59;
  attribute(readonly, reportable) int8u colorPointBIntensity = 60;
  attribute(writable, reportable) int16u enhancedCurrentHue = 16384;
  attribute(writable, reportable) enum8 enhancedColorMode = 16385;
  attribute(writable, reportable) int8u colorLoopActive = 16386;
  attribute(writable, reportable) int8u colorLoopDirection = 16387;
  attribute(writable, reportable) int16u colorLoopTime = 16388;
  attribute(writable, reportable) bitmap16 colorCapabilities = 16394;
  attribute(writable, reportable) int16u colorTempPhysicalMin = 16395;
  attribute(writable, reportable) int16u colorTempPhysicalMax = 16396;
  attribute(writable, reportable) int16u coupleColorTempToLevelMinMireds = 16397;
  attribute(readonly, reportable) int16u startUpColorTemperatureMireds = 16400;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct MoveColorRequest {
    INT16S rateX;  
    INT16S rateY;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct MoveColorTemperatureRequest {
    HueMoveMode moveMode;  
    INT16U rate;  
    INT16U colorTemperatureMinimum;  
    INT16U colorTemperatureMaximum;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct MoveHueRequest {
    HueMoveMode moveMode;  
    INT8U rate;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct MoveSaturationRequest {
    SaturationMoveMode moveMode;  
    INT8U rate;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct MoveToColorRequest {
    INT16U colorX;  
    INT16U colorY;  
    INT16U transitionTime;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct MoveToColorTemperatureRequest {
    INT16U colorTemperature;  
    INT16U transitionTime;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct MoveToHueRequest {
    INT8U hue;  
    HueDirection direction;  
    INT16U transitionTime;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct MoveToHueAndSaturationRequest {
    INT8U hue;  
    INT8U saturation;  
    INT16U transitionTime;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct MoveToSaturationRequest {
    INT8U saturation;  
    INT16U transitionTime;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct StepColorRequest {
    INT16S stepX;  
    INT16S stepY;  
    INT16U transitionTime;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct StepColorTemperatureRequest {
    HueStepMode stepMode;  
    INT16U stepSize;  
    INT16U transitionTime;  
    INT16U colorTemperatureMinimum;  
    INT16U colorTemperatureMaximum;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct StepHueRequest {
    HueStepMode stepMode;  
    INT8U stepSize;  
    INT8U transitionTime;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct StepSaturationRequest {
    SaturationStepMode stepMode;  
    INT8U stepSize;  
    INT8U transitionTime;  
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  request struct StopMoveStepRequest {
    BITMAP8 optionsMask;  
    BITMAP8 optionsOverride;  
  }

  command MoveColor(MoveColorRequest): DefaultSuccess = 8;
  command MoveColorTemperature(MoveColorTemperatureRequest): DefaultSuccess = 75;
  command MoveHue(MoveHueRequest): DefaultSuccess = 1;
  command MoveSaturation(MoveSaturationRequest): DefaultSuccess = 4;
  command MoveToColor(MoveToColorRequest): DefaultSuccess = 7;
  command MoveToColorTemperature(MoveToColorTemperatureRequest): DefaultSuccess = 10;
  command MoveToHue(MoveToHueRequest): DefaultSuccess = 0;
  command MoveToHueAndSaturation(MoveToHueAndSaturationRequest): DefaultSuccess = 6;
  command MoveToSaturation(MoveToSaturationRequest): DefaultSuccess = 3;
  command StepColor(StepColorRequest): DefaultSuccess = 9;
  command StepColorTemperature(StepColorTemperatureRequest): DefaultSuccess = 76;
  command StepHue(StepHueRequest): DefaultSuccess = 2;
  command StepSaturation(StepSaturationRequest): DefaultSuccess = 5;
  command StopMoveStep(StopMoveStepRequest): DefaultSuccess = 71;
}

client cluster ContentLauncher = 1290 {
  enum MetricTypeEnum : ENUM8 {
    kPixels = 0;
    kPercentage = 1;
  }

  enum ParameterEnum : ENUM8 {
    kActor = 0;
    kChannel = 1;
    kCharacter = 2;
    kDirector = 3;
    kEvent = 4;
    kFranchise = 5;
    kGenre = 6;
    kLeague = 7;
    kPopularity = 8;
    kProvider = 9;
    kSport = 10;
    kSportsTeam = 11;
    kType = 12;
  }

  enum StatusEnum : ENUM8 {
    kSuccess = 0;
    kUrlNotAvailable = 1;
    kAuthFailed = 2;
  }

  attribute(writable, reportable) CHAR_STRING acceptHeaderList = 0;
  attribute(readonly, reportable) bitmap32 supportedStreamingProtocols = 1;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct LaunchContentRequestRequest {
    BOOLEAN autoPlay;  
    CHAR_STRING data;  
    ContentSearch search;  
  }

  request struct LaunchURLRequestRequest {
    CHAR_STRING contentURL;  
    CHAR_STRING displayString;  
    BrandingInformation brandingInformation;  
  }

  command LaunchContentRequest(LaunchContentRequestRequest): LaunchResponse = 0;
  command LaunchURLRequest(LaunchURLRequestRequest): LaunchResponse = 1;
}

server cluster Descriptor = 29 {
  attribute(writable, reportable) DeviceType deviceList = 0;
  attribute(writable, reportable) CLUSTER_ID serverList = 1;
  attribute(writable, reportable) CLUSTER_ID clientList = 2;
  attribute(writable, reportable) ENDPOINT_NO partsList = 3;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster DiagnosticLogs = 50 {
  enum LogsIntent : ENUM8 {
    kEndUserSupport = 0;
    kNetworkDiag = 1;
    kCrashLogs = 2;
  }

  enum LogsStatus : ENUM8 {
    kSuccess = 0;
    kExhausted = 1;
    kNoLogs = 2;
    kBusy = 3;
    kDenied = 4;
  }

  enum LogsTransferProtocol : ENUM8 {
    kResponsePayload = 0;
    kBdx = 1;
  }


  request struct RetrieveLogsRequestRequest {
    LogsIntent intent;  
    LogsTransferProtocol requestedProtocol;  
    OCTET_STRING transferFileDesignator;  
  }

  command RetrieveLogsRequest(RetrieveLogsRequestRequest): RetrieveLogsResponse = 0;
}

server cluster DoorLock = 257 {
  enum DlAlarmCode : ENUM8 {
    kLockJammed = 0;
    kLockFactoryReset = 1;
    kLockRadioPowerCycled = 3;
    kWrongCodeEntryLimit = 4;
    kFrontEsceutcheonRemoved = 5;
    kDoorForcedOpen = 6;
    kDoorAjar = 7;
    kForcedUser = 8;
  }

  enum DlCredentialRule : ENUM8 {
    kSingle = 0;
    kDouble = 1;
    kTri = 2;
  }

  enum DlCredentialType : ENUM8 {
    kProgrammingPIN = 0;
    kPin = 1;
    kRfid = 2;
    kFingerprint = 3;
    kFingerVein = 4;
    kFace = 5;
  }

  enum DlDataOperationType : ENUM8 {
    kAdd = 0;
    kClear = 1;
    kModify = 2;
  }

  enum DlDoorLockStatus : ENUM8 {
    kDuplicate = 2;
    kOccupied = 3;
  }

  enum DlDoorState : ENUM8 {
    kDoorOpen = 0;
    kDoorClosed = 1;
    kDoorJammed = 2;
    kDoorForcedOpen = 3;
    kDoorUnspecifiedError = 4;
    kDoorAjar = 5;
  }

  enum DlLockDataType : ENUM8 {
    kUnspecified = 0;
    kProgrammingCode = 1;
    kUserIndex = 2;
    kWeekDaySchedule = 3;
    kYearDaySchedule = 4;
    kHolidaySchedule = 5;
    kPin = 6;
    kRfid = 7;
    kFingerprint = 8;
  }

  enum DlLockOperationType : ENUM8 {
    kLock = 0;
    kUnlock = 1;
    kNonAccessUserEvent = 2;
    kForcedUserEvent = 3;
  }

  enum DlLockState : ENUM8 {
    kNotFullyLocked = 0;
    kLocked = 1;
    kUnlocked = 2;
  }

  enum DlLockType : ENUM8 {
    kDeadBolt = 0;
    kMagnetic = 1;
    kOther = 2;
    kMortise = 3;
    kRim = 4;
    kLatchBolt = 5;
    kCylindricalLock = 6;
    kTubularLock = 7;
    kInterconnectedLock = 8;
    kDeadLatch = 9;
    kDoorFurniture = 10;
  }

  enum DlOperatingMode : ENUM8 {
    kNormal = 0;
    kVacation = 1;
    kPrivacy = 2;
    kNoRemoteLockUnlock = 3;
    kPassage = 4;
  }

  enum DlOperationError : ENUM8 {
    kUnspecified = 0;
    kInvalidCredential = 1;
    kDisabledUserDenied = 2;
    kRestricted = 3;
    kInsufficientBattery = 4;
  }

  enum DlOperationSource : ENUM8 {
    kUnspecified = 0;
    kManual = 1;
    kProprietaryRemote = 2;
    kKeypad = 3;
    kAuto = 4;
    kButton = 5;
    kSchedule = 6;
    kRemote = 7;
    kRfid = 8;
    kBiometric = 9;
  }

  enum DlStatus : ENUM8 {
    kSuccess = 0;
    kFailure = 1;
    kDuplicate = 2;
    kOccupied = 3;
    kInvalidField = 133;
    kNotFound = 139;
  }

  enum DlUserStatus : ENUM8 {
    kAvailable = 0;
    kOccupiedEnabled = 1;
    kOccupiedDisabled = 3;
  }

  enum DlUserType : ENUM8 {
    kUnrestrictedUser = 0;
    kYearDayScheduleUser = 1;
    kWeekDayScheduleUser = 2;
    kProgrammingUser = 3;
    kNonAccessUser = 4;
    kForcedUser = 5;
    kDisposableUser = 6;
    kExpiringUser = 7;
    kScheduleRestrictedUser = 8;
    kRemoteOnlyUser = 9;
  }

  enum DoorLockOperationEventCode : ENUM8 {
    kUnknownOrMfgSpecific = 0;
    kLock = 1;
    kUnlock = 2;
    kLockInvalidPinOrId = 3;
    kLockInvalidSchedule = 4;
    kUnlockInvalidPinOrId = 5;
    kUnlockInvalidSchedule = 6;
    kOneTouchLock = 7;
    kKeyLock = 8;
    kKeyUnlock = 9;
    kAutoLock = 10;
    kScheduleLock = 11;
    kScheduleUnlock = 12;
    kManualLock = 13;
    kManualUnlock = 14;
  }

  enum DoorLockProgrammingEventCode : ENUM8 {
    kUnknownOrMfgSpecific = 0;
    kMasterCodeChanged = 1;
    kPinAdded = 2;
    kPinDeleted = 3;
    kPinChanged = 4;
    kIdAdded = 5;
    kIdDeleted = 6;
  }

  enum DoorLockSetPinOrIdStatus : ENUM8 {
    kSuccess = 0;
    kGeneralFailure = 1;
    kMemoryFull = 2;
    kDuplicateCodeError = 3;
  }

  enum DoorLockUserStatus : ENUM8 {
    kAvailable = 0;
    kOccupiedEnabled = 1;
    kOccupiedDisabled = 3;
    kNotSupported = 255;
  }

  enum DoorLockUserType : ENUM8 {
    kUnrestricted = 0;
    kYearDayScheduleUser = 1;
    kWeekDayScheduleUser = 2;
    kMasterUser = 3;
    kNonAccessUser = 4;
    kNotSupported = 255;
  }

  event DoorLockAlarm(critical) = 0 {
    kAlarmCode = 0,
  }

  event DoorStateChange(critical) = 1 {
    kDoorState = 0,
  }

  event LockOperation(critical) = 2 {
    kLockOperationType = 0,
    kOperationSource = 1,
    kUserIndex = 2,
    kFabricIndex = 3,
    kSourceNode = 4,
    kCredentials = 5,
  }

  event LockOperationError(critical) = 3 {
    kLockOperationType = 0,
    kOperationSource = 1,
    kOperationError = 2,
    kUserIndex = 3,
    kFabricIndex = 4,
    kSourceNode = 5,
    kCredentials = 6,
  }

  event LockUserChange(info) = 4 {
    kLockDataType = 0,
    kDataOperationType = 1,
    kOperationSource = 2,
    kUserIndex = 3,
    kFabricIndex = 4,
    kSourceNode = 5,
    kDataIndex = 6,
  }

  attribute(writable, reportable) DlLockState lockState = 0;
  attribute(writable, reportable) DlLockType lockType = 1;
  attribute(writable, reportable) boolean actuatorEnabled = 2;
  attribute(writable, reportable) DlDoorState doorState = 3;
  attribute(writable) int16u numberOfTotalUsersSupported = 17;
  attribute(writable) int16u numberOfPINUsersSupported = 18;
  attribute(writable) int8u maxPINCodeLength = 23;
  attribute(writable) int8u minPINCodeLength = 24;
  attribute(writable) bitmap8 credentialRulesSupport = 27;
  attribute(readonly, reportable) char_string language = 33;
  attribute(readonly, reportable) int32u autoRelockTime = 35;
  attribute(readonly, reportable) int8u soundVolume = 36;
  attribute(readonly, reportable) DlOperatingMode operatingMode = 37;
  attribute(writable) bitmap16 supportedOperatingModes = 38;
  attribute(readonly, reportable) boolean enableOneTouchLocking = 41;
  attribute(readonly, reportable) boolean enablePrivacyModeButton = 43;
  attribute(readonly, reportable) int8u wrongCodeEntryLimit = 48;
  attribute(readonly, reportable) int8u userCodeTemporaryDisableTime = 49;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct ClearCredentialRequest {
    DlCredential credential;  
  }

  request struct ClearUserRequest {
    INT16U userIndex;  
  }

  request struct GetCredentialStatusRequest {
    DlCredential credential;  
  }

  request struct GetUserRequest {
    INT16U userIndex;  
  }

  request struct LockDoorRequest {
    OCTET_STRING pinCode;  
  }

  request struct SetCredentialRequest {
    DlDataOperationType operationType;  
    DlCredential credential;  
    LONG_OCTET_STRING credentialData;  
    INT16U userIndex;  
    DlUserStatus userStatus;  
  }

  request struct SetUserRequest {
    DlDataOperationType operationType;  
    INT16U userIndex;  
    CHAR_STRING userName;  
    INT32U userUniqueId;  
    DlUserStatus userStatus;  
    DlUserType userType;  
    DlCredentialRule credentialRule;  
  }

  request struct UnlockDoorRequest {
    OCTET_STRING pinCode;  
  }

  response struct GetCredentialStatusResponse {
    boolean credentialExists;  
    INT16U userIndex;  
    INT16U nextCredentialIndex;  
  }

  response struct GetUserResponse {
    INT16U userIndex;  
    CHAR_STRING userName;  
    INT32U userUniqueId;  
    DlUserStatus userStatus;  
    DlUserType userType;  
    DlCredentialRule credentialRule;  
    DlCredential credentials;  
    fabric_idx creatorFabricIndex;  
    fabric_idx lastModifiedFabricIndex;  
    INT16U nextUserIndex;  
  }

  response struct SetCredentialResponse {
    DlStatus status;  
    INT16U userIndex;  
    INT16U nextCredentialIndex;  
  }

  command ClearCredential(ClearCredentialRequest): DefaultSuccess = 38;
  command ClearUser(ClearUserRequest): DefaultSuccess = 29;
  command GetCredentialStatus(GetCredentialStatusRequest): GetCredentialStatusResponse = 36;
  command GetUser(GetUserRequest): GetUserResponse = 27;
  command LockDoor(LockDoorRequest): DefaultSuccess = 0;
  command SetCredential(SetCredentialRequest): SetCredentialResponse = 34;
  command SetUser(SetUserRequest): DefaultSuccess = 26;
  command UnlockDoor(UnlockDoorRequest): DefaultSuccess = 1;
}

server cluster EthernetNetworkDiagnostics = 55 {
  enum PHYRateType : ENUM8 {
    k10m = 0;
    k100m = 1;
    k1000m = 2;
    k25g = 3;
    k5g = 4;
    k10g = 5;
    k40g = 6;
    k100g = 7;
    k200g = 8;
    k400g = 9;
  }

  attribute(writable, reportable) enum8 PHYRate = 0;
  attribute(writable, reportable) boolean fullDuplex = 1;
  attribute(writable, reportable) int64u packetRxCount = 2;
  attribute(writable, reportable) int64u packetTxCount = 3;
  attribute(writable, reportable) int64u txErrCount = 4;
  attribute(writable, reportable) int64u collisionCount = 5;
  attribute(writable, reportable) int64u overrunCount = 6;
  attribute(writable, reportable) boolean carrierDetect = 7;
  attribute(writable, reportable) int64u timeSinceReset = 8;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster FixedLabel = 64 {
  attribute(writable) LabelStruct labelList = 0;
  attribute(writable) int16u clusterRevision = 65533;
}

server cluster FlowMeasurement = 1028 {
  attribute(writable, reportable) int16s measuredValue = 0;
  attribute(writable, reportable) int16s minMeasuredValue = 1;
  attribute(writable, reportable) int16s maxMeasuredValue = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster GeneralCommissioning = 48 {
  enum GeneralCommissioningError : ENUM8 {
    kOk = 0;
    kValueOutsideRange = 1;
    kInvalidAuthentication = 2;
    kNotCommissioning = 3;
  }

  enum RegulatoryLocationType : ENUM8 {
    kIndoor = 0;
    kOutdoor = 1;
    kIndoorOutdoor = 2;
  }

  attribute(readonly, reportable) int64u breadcrumb = 0;
  attribute(writable, reportable) BasicCommissioningInfoType basicCommissioningInfoList = 1;
  attribute(writable) enum8 regulatoryConfig = 2;
  attribute(writable) enum8 locationCapability = 3;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct ArmFailSafeRequest {
    INT16U expiryLengthSeconds;  
    INT64U breadcrumb;  
    INT32U timeoutMs;  
  }

  request struct CommissioningCompleteRequest {
  }

  request struct SetRegulatoryConfigRequest {
    RegulatoryLocationType location;  
    CHAR_STRING countryCode;  
    INT64U breadcrumb;  
    INT32U timeoutMs;  
  }

  response struct ArmFailSafeResponse {
    GeneralCommissioningError errorCode;  
    CHAR_STRING debugText;  
  }

  response struct CommissioningCompleteResponse {
    GeneralCommissioningError errorCode;  
    CHAR_STRING debugText;  
  }

  response struct SetRegulatoryConfigResponse {
    GeneralCommissioningError errorCode;  
    CHAR_STRING debugText;  
  }

  command ArmFailSafe(ArmFailSafeRequest): ArmFailSafeResponse = 0;
  command CommissioningComplete(CommissioningCompleteRequest): CommissioningCompleteResponse = 4;
  command SetRegulatoryConfig(SetRegulatoryConfigRequest): SetRegulatoryConfigResponse = 2;
}

server cluster GeneralDiagnostics = 51 {
  enum BootReasonType : ENUM8 {
    kUnspecified = 0;
    kPowerOnReboot = 1;
    kBrownOutReset = 2;
    kSoftwareWatchdogReset = 3;
    kHardwareWatchdogReset = 4;
    kSoftwareUpdateCompleted = 5;
    kSoftwareReset = 6;
  }

  enum HardwareFaultType : ENUM8 {
    kUnspecified = 0;
    kRadio = 1;
    kSensor = 2;
    kResettableOverTemp = 3;
    kNonResettableOverTemp = 4;
    kPowerSource = 5;
    kVisualDisplayFault = 6;
    kAudioOutputFault = 7;
    kUserInterfaceFault = 8;
    kNonVolatileMemoryError = 9;
    kTamperDetected = 10;
  }

  enum InterfaceType : ENUM8 {
    kUnspecified = 0;
    kWiFi = 1;
    kEthernet = 2;
    kCellular = 3;
    kThread = 4;
  }

  enum NetworkFaultType : ENUM8 {
    kUnspecified = 0;
    kHardwareFailure = 1;
    kNetworkJammed = 2;
    kConnectionFailed = 3;
  }

  enum RadioFaultType : ENUM8 {
    kUnspecified = 0;
    kWiFiFault = 1;
    kCellularFault = 2;
    kThreadFault = 3;
    kNFCFault = 4;
    kBLEFault = 5;
    kEthernetFault = 6;
  }

  event HardwareFaultChange(critical) = 0 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event RadioFaultChange(critical) = 1 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event NetworkFaultChange(critical) = 2 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event BootReason(critical) = 3 {
    kBootReason = 0,
  }

  attribute(writable, reportable) NetworkInterfaceType networkInterfaces = 0;
  attribute(writable, reportable) int16u rebootCount = 1;
  attribute(writable, reportable) int64u upTime = 2;
  attribute(writable, reportable) int32u totalOperationalHours = 3;
  attribute(writable, reportable) enum8 bootReasons = 4;
  attribute(writable, reportable) ENUM8 activeHardwareFaults = 5;
  attribute(writable, reportable) ENUM8 activeRadioFaults = 6;
  attribute(writable, reportable) ENUM8 activeNetworkFaults = 7;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster GroupKeyManagement = 63 {
  enum GroupKeySecurityPolicy : ENUM8 {
    kStandard = 0;
    kLowLatency = 1;
  }

  attribute(writable, reportable) GroupKey groupKeyMap = 0;
  attribute(writable, reportable) GroupInfo groupTable = 1;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster Groups = 4 {
  attribute(writable, reportable) bitmap8 nameSupport = 0;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct AddGroupRequest {
    INT16U groupId;  
    CHAR_STRING groupName;  
  }

  request struct AddGroupIfIdentifyingRequest {
    INT16U groupId;  
    CHAR_STRING groupName;  
  }

  request struct GetGroupMembershipRequest {
    INT16U groupList;  
  }

  request struct RemoveAllGroupsRequest {
  }

  request struct RemoveGroupRequest {
    INT16U groupId;  
  }

  request struct ViewGroupRequest {
    INT16U groupId;  
  }

  response struct AddGroupResponse {
    ENUM8 status;  
    INT16U groupId;  
  }

  response struct GetGroupMembershipResponse {
    INT8U capacity;  
    INT16U groupList;  
  }

  response struct RemoveGroupResponse {
    ENUM8 status;  
    INT16U groupId;  
  }

  response struct ViewGroupResponse {
    ENUM8 status;  
    INT16U groupId;  
    CHAR_STRING groupName;  
  }

  command AddGroup(AddGroupRequest): AddGroupResponse = 0;
  command AddGroupIfIdentifying(AddGroupIfIdentifyingRequest): DefaultSuccess = 5;
  command GetGroupMembership(GetGroupMembershipRequest): GetGroupMembershipResponse = 2;
  command RemoveAllGroups(RemoveAllGroupsRequest): DefaultSuccess = 4;
  command RemoveGroup(RemoveGroupRequest): RemoveGroupResponse = 3;
  command ViewGroup(ViewGroupRequest): ViewGroupResponse = 1;
}

server cluster IasZone = 1280 {
  enum IasEnrollResponseCode : ENUM8 {
    kSuccess = 0;
    kNotSupported = 1;
    kNoEnrollPermit = 2;
    kTooManyZones = 3;
  }

  enum IasZoneType : ENUM16 {
    kStandardCie = 0;
    kMotionSensor = 13;
    kContactSwitch = 21;
    kFireSensor = 40;
    kWaterSensor = 42;
    kGasSensor = 43;
    kPersonalEmergencyDevice = 44;
    kVibrationMovementSensor = 45;
    kRemoteControl = 271;
    kKeyFob = 277;
    kKeypad = 541;
    kStandardWarningDevice = 549;
    kGlassBreakSensor = 550;
    kCarbonMonoxideSensor = 551;
    kSecurityRepeater = 553;
    kInvalidZoneType = 65535;
  }

  attribute(writable, reportable) enum8 zoneState = 0;
  attribute(writable, reportable) enum16 zoneType = 1;
  attribute(writable, reportable) bitmap16 zoneStatus = 2;
  attribute(readonly, reportable) node_id iasCieAddress = 16;
  attribute(writable, reportable) int8u zoneId = 17;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct ZoneEnrollRequestRequest {
    IasZoneType zoneType;  
    INT16U manufacturerCode;  
  }

  request struct ZoneStatusChangeNotificationRequest {
    IasZoneStatus zoneStatus;  
    BITMAP8 extendedStatus;  
    INT8U zoneId;  
    INT16U delay;  
  }

  response struct ZoneEnrollResponse {
    IasEnrollResponseCode enrollResponseCode;  
    INT8U zoneId;  
  }

  command ZoneEnrollRequest(ZoneEnrollRequestRequest): ZoneEnrollResponse = 1;
  command ZoneStatusChangeNotification(ZoneStatusChangeNotificationRequest): DefaultSuccess = 0;
}

server cluster Identify = 3 {
  enum IdentifyEffectIdentifier : ENUM8 {
    kBlink = 0;
    kBreathe = 1;
    kOkay = 2;
    kChannelChange = 11;
    kFinishEffect = 254;
    kStopEffect = 255;
  }

  enum IdentifyEffectVariant : ENUM8 {
    kDefault = 0;
  }

  enum IdentifyIdentifyType : ENUM8 {
    kNone = 0;
    kVisibleLight = 1;
    kVisibleLED = 2;
    kAudibleBeep = 3;
    kDisplay = 4;
    kActuator = 5;
  }

  attribute(readonly, reportable) int16u identifyTime = 0;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct IdentifyRequest {
    INT16U identifyTime;  
  }

  request struct IdentifyQueryRequest {
  }

  response struct IdentifyQueryResponse {
    INT16U timeout;  
  }

  command Identify(IdentifyRequest): DefaultSuccess = 0;
  command IdentifyQuery(IdentifyQueryRequest): IdentifyQueryResponse = 1;
}

client cluster KeypadInput = 1289 {
  enum CecKeyCode : ENUM8 {
    kSelect = 0;
    kUp = 1;
    kDown = 2;
    kLeft = 3;
    kRight = 4;
    kRightUp = 5;
    kRightDown = 6;
    kLeftUp = 7;
    kLeftDown = 8;
    kRootMenu = 9;
    kSetupMenu = 10;
    kContentsMenu = 11;
    kFavoriteMenu = 12;
    kExit = 13;
    kMediaTopMenu = 16;
    kMediaContextSensitiveMenu = 17;
    kNumberEntryMode = 29;
    kNumber11 = 30;
    kNumber12 = 31;
    kNumber0OrNumber10 = 32;
    kNumbers1 = 33;
    kNumbers2 = 34;
    kNumbers3 = 35;
    kNumbers4 = 36;
    kNumbers5 = 37;
    kNumbers6 = 38;
    kNumbers7 = 39;
    kNumbers8 = 40;
    kNumbers9 = 41;
    kDot = 42;
    kEnter = 43;
    kClear = 44;
    kNextFavorite = 47;
    kChannelUp = 48;
    kChannelDown = 49;
    kPreviousChannel = 50;
    kSoundSelect = 51;
    kInputSelect = 52;
    kDisplayInformation = 53;
    kHelp = 54;
    kPageUp = 55;
    kPageDown = 56;
    kPower = 64;
    kVolumeUp = 65;
    kVolumeDown = 66;
    kMute = 67;
    kPlay = 68;
    kStop = 69;
    kPause = 70;
    kRecord = 71;
    kRewind = 72;
    kFastForward = 73;
    kEject = 74;
    kForward = 75;
    kBackward = 76;
    kStopRecord = 77;
    kPauseRecord = 78;
    kReserved = 79;
    kAngle = 80;
    kSubPicture = 81;
    kVideoOnDemand = 82;
    kElectronicProgramGuide = 83;
    kTimerProgramming = 84;
    kInitialConfiguration = 85;
    kSelectBroadcastType = 86;
    kSelectSoundPresentation = 87;
    kPlayFunction = 96;
    kPausePlayFunction = 97;
    kRecordFunction = 98;
    kPauseRecordFunction = 99;
    kStopFunction = 100;
    kMuteFunction = 101;
    kRestoreVolumeFunction = 102;
    kTuneFunction = 103;
    kSelectMediaFunction = 104;
    kSelectAvInputFunction = 105;
    kSelectAudioInputFunction = 106;
    kPowerToggleFunction = 107;
    kPowerOffFunction = 108;
    kPowerOnFunction = 109;
    kF1Blue = 113;
    kF2Red = 114;
    kF3Green = 115;
    kF4Yellow = 116;
    kF5 = 117;
    kData = 118;
  }

  enum StatusEnum : ENUM8 {
    kSuccess = 0;
    kUnsupportedKey = 1;
    kInvalidKeyInCurrentState = 2;
  }

  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct SendKeyRequestRequest {
    CecKeyCode keyCode;  
  }

  command SendKeyRequest(SendKeyRequestRequest): SendKeyResponse = 0;
}

server cluster LevelControl = 8 {
  enum MoveMode : ENUM8 {
    kUp = 0;
    kDown = 1;
  }

  enum StepMode : ENUM8 {
    kUp = 0;
    kDown = 1;
  }

  attribute(writable, reportable) int8u currentLevel = 0;
  attribute(writable, reportable) int16u remainingTime = 1;
  attribute(writable, reportable) int8u minLevel = 2;
  attribute(writable, reportable) int8u maxLevel = 3;
  attribute(writable, reportable) int16u currentFrequency = 4;
  attribute(writable, reportable) int16u minFrequency = 5;
  attribute(writable, reportable) int16u maxFrequency = 6;
  attribute(readonly, reportable) bitmap8 options = 15;
  attribute(readonly, reportable) int16u onOffTransitionTime = 16;
  attribute(readonly, reportable) int8u onLevel = 17;
  attribute(readonly, reportable) int16u onTransitionTime = 18;
  attribute(readonly, reportable) int16u offTransitionTime = 19;
  attribute(readonly, reportable) int8u defaultMoveRate = 20;
  attribute(readonly, reportable) int8u startUpCurrentLevel = 16384;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct MoveRequest {
    MoveMode moveMode;  
    INT8U rate;  
    BITMAP8 optionMask;  
    BITMAP8 optionOverride;  
  }

  request struct MoveToLevelRequest {
    INT8U level;  
    INT16U transitionTime;  
    BITMAP8 optionMask;  
    BITMAP8 optionOverride;  
  }

  request struct MoveToLevelWithOnOffRequest {
    INT8U level;  
    INT16U transitionTime;  
  }

  request struct MoveWithOnOffRequest {
    MoveMode moveMode;  
    INT8U rate;  
  }

  request struct StepRequest {
    StepMode stepMode;  
    INT8U stepSize;  
    INT16U transitionTime;  
    BITMAP8 optionMask;  
    BITMAP8 optionOverride;  
  }

  request struct StepWithOnOffRequest {
    StepMode stepMode;  
    INT8U stepSize;  
    INT16U transitionTime;  
  }

  request struct StopRequest {
    BITMAP8 optionMask;  
    BITMAP8 optionOverride;  
  }

  request struct StopWithOnOffRequest {
  }

  command Move(MoveRequest): DefaultSuccess = 1;
  command MoveToLevel(MoveToLevelRequest): DefaultSuccess = 0;
  command MoveToLevelWithOnOff(MoveToLevelWithOnOffRequest): DefaultSuccess = 4;
  command MoveWithOnOff(MoveWithOnOffRequest): DefaultSuccess = 5;
  command Step(StepRequest): DefaultSuccess = 2;
  command StepWithOnOff(StepWithOnOffRequest): DefaultSuccess = 6;
  command Stop(StopRequest): DefaultSuccess = 3;
  command StopWithOnOff(StopWithOnOffRequest): DefaultSuccess = 7;
}

server cluster LocalizationConfiguration = 43 {
  attribute(readonly) char_string activeLocale = 1;
  attribute(writable) CHAR_STRING supportedLocales = 2;
}

client cluster MediaInput = 1287 {
  enum InputTypeEnum : ENUM8 {
    kInternal = 0;
    kAux = 1;
    kCoax = 2;
    kComposite = 3;
    kHdmi = 4;
    kInput = 5;
    kLine = 6;
    kOptical = 7;
    kVideo = 8;
    kScart = 9;
    kUsb = 10;
    kOther = 11;
  }

  attribute(writable, reportable) InputInfo mediaInputList = 0;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct HideInputStatusRequestRequest {
  }

  request struct RenameInputRequestRequest {
    INT8U index;  
    CHAR_STRING name;  
  }

  request struct SelectInputRequestRequest {
    INT8U index;  
  }

  request struct ShowInputStatusRequestRequest {
  }

  command HideInputStatusRequest(HideInputStatusRequestRequest): DefaultSuccess = 2;
  command RenameInputRequest(RenameInputRequestRequest): DefaultSuccess = 3;
  command SelectInputRequest(SelectInputRequestRequest): DefaultSuccess = 0;
  command ShowInputStatusRequest(ShowInputStatusRequestRequest): DefaultSuccess = 1;
}

client cluster MediaPlayback = 1286 {
  enum PlaybackStateEnum : ENUM8 {
    kPlaying = 0;
    kPaused = 1;
    kNotPlaying = 2;
    kBuffering = 3;
  }

  enum StatusEnum : ENUM8 {
    kSuccess = 0;
    kInvalidStateForCommand = 1;
    kNotAllowed = 2;
    kNotActive = 3;
    kSpeedOutOfRange = 4;
    kSeekOutOfRange = 5;
  }

  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct FastForwardRequestRequest {
  }

  request struct NextRequestRequest {
  }

  request struct PauseRequestRequest {
  }

  request struct PlayRequestRequest {
  }

  request struct PreviousRequestRequest {
  }

  request struct RewindRequestRequest {
  }

  request struct SeekRequestRequest {
    INT64U position;  
  }

  request struct SkipBackwardRequestRequest {
    INT64U deltaPositionMilliseconds;  
  }

  request struct SkipForwardRequestRequest {
    INT64U deltaPositionMilliseconds;  
  }

  request struct StartOverRequestRequest {
  }

  request struct StopRequestRequest {
  }

  command FastForwardRequest(FastForwardRequestRequest): PlaybackResponse = 7;
  command NextRequest(NextRequestRequest): PlaybackResponse = 5;
  command PauseRequest(PauseRequestRequest): PlaybackResponse = 1;
  command PlayRequest(PlayRequestRequest): PlaybackResponse = 0;
  command PreviousRequest(PreviousRequestRequest): PlaybackResponse = 4;
  command RewindRequest(RewindRequestRequest): PlaybackResponse = 6;
  command SeekRequest(SeekRequestRequest): PlaybackResponse = 11;
  command SkipBackwardRequest(SkipBackwardRequestRequest): PlaybackResponse = 9;
  command SkipForwardRequest(SkipForwardRequestRequest): PlaybackResponse = 8;
  command StartOverRequest(StartOverRequestRequest): PlaybackResponse = 3;
  command StopRequest(StopRequestRequest): PlaybackResponse = 2;
}

server cluster NetworkCommissioning = 49 {
  enum NetworkCommissioningStatus : ENUM8 {
    kSuccess = 0;
    kOutOfRange = 1;
    kBoundsExceeded = 2;
    kNetworkIDNotFound = 3;
    kDuplicateNetworkID = 4;
    kNetworkNotFound = 5;
    kRegulatoryError = 6;
    kAuthFailure = 7;
    kUnsupportedSecurity = 8;
    kOtherConnectionFailure = 9;
    kIPV6Failed = 10;
    kIPBindFailed = 11;
    kUnknownError = 12;
  }

  enum WiFiBand : ENUM8 {
    k2g4 = 0;
    k3g65 = 1;
    k5g = 2;
    k6g = 3;
    k60g = 4;
  }

  attribute(writable) int8u maxNetworks = 0;
  attribute(writable) NetworkInfo networks = 1;
  attribute(writable) int8u scanMaxTimeSeconds = 2;
  attribute(writable) int8u connectMaxTimeSeconds = 3;
  attribute(readonly) boolean interfaceEnabled = 4;
  attribute(writable) NetworkCommissioningStatus lastNetworkingStatus = 5;
  attribute(writable) octet_string lastNetworkID = 6;
  attribute(writable) int32u lastConnectErrorValue = 7;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct AddOrUpdateThreadNetworkRequest {
    OCTET_STRING OperationalDataset;  
    INT64U Breadcrumb;  
  }

  request struct AddOrUpdateWiFiNetworkRequest {
    OCTET_STRING SSID;  
    OCTET_STRING Credentials;  
    INT64U breadcrumb;  
  }

  request struct ConnectNetworkRequest {
    OCTET_STRING NetworkID;  
    INT64U Breadcrumb;  
  }

  request struct RemoveNetworkRequest {
    OCTET_STRING NetworkID;  
    INT64U Breadcrumb;  
  }

  request struct ReorderNetworkRequest {
    OCTET_STRING NetworkID;  
    INT8U NetworkIndex;  
    INT64U Breadcrumb;  
  }

  request struct ScanNetworksRequest {
    OCTET_STRING SSID;  
    INT64U Breadcrumb;  
  }

  response struct ConnectNetworkResponse {
    NetworkCommissioningStatus NetworkingStatus;  
    CHAR_STRING DebugText;  
    INT32S ErrorValue;  
  }

  response struct NetworkConfigResponse {
    NetworkCommissioningStatus NetworkingStatus;  
    CHAR_STRING DebugText;  
  }

  response struct ScanNetworksResponse {
    NetworkCommissioningStatus NetworkingStatus;  
    CHAR_STRING DebugText;  
    WiFiInterfaceScanResult WiFiScanResults;  
    ThreadInterfaceScanResult ThreadScanResults;  
  }

  command AddOrUpdateThreadNetwork(AddOrUpdateThreadNetworkRequest): NetworkConfigResponse = 3;
  command AddOrUpdateWiFiNetwork(AddOrUpdateWiFiNetworkRequest): NetworkConfigResponse = 2;
  command ConnectNetwork(ConnectNetworkRequest): ConnectNetworkResponse = 6;
  command RemoveNetwork(RemoveNetworkRequest): NetworkConfigResponse = 4;
  command ReorderNetwork(ReorderNetworkRequest): NetworkConfigResponse = 8;
  command ScanNetworks(ScanNetworksRequest): ScanNetworksResponse = 0;
}

server cluster OtaSoftwareUpdateProvider = 41 {
  enum OTAApplyUpdateAction : ENUM8 {
    kProceed = 0;
    kAwaitNextAction = 1;
    kDiscontinue = 2;
  }

  enum OTADownloadProtocol : ENUM8 {
    kBDXSynchronous = 0;
    kBDXAsynchronous = 1;
    kHttps = 2;
    kVendorSpecific = 3;
  }

  enum OTAQueryStatus : ENUM8 {
    kUpdateAvailable = 0;
    kBusy = 1;
    kNotAvailable = 2;
    kDownloadProtocolNotSupported = 3;
  }

  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct ApplyUpdateRequestRequest {
    OCTET_STRING updateToken;  
    INT32U newVersion;  
  }

  request struct NotifyUpdateAppliedRequest {
    OCTET_STRING updateToken;  
    INT32U softwareVersion;  
  }

  request struct QueryImageRequest {
    vendor_id vendorId;  
    INT16U productId;  
    INT32U softwareVersion;  
    OTADownloadProtocol protocolsSupported;  
    INT16U hardwareVersion;  
    CHAR_STRING location;  
    BOOLEAN requestorCanConsent;  
    OCTET_STRING metadataForProvider;  
  }

  response struct ApplyUpdateResponse {
    OTAApplyUpdateAction action;  
    INT32U delayedActionTime;  
  }

  response struct QueryImageResponse {
    OTAQueryStatus status;  
    INT32U delayedActionTime;  
    CHAR_STRING imageURI;  
    INT32U softwareVersion;  
    CHAR_STRING softwareVersionString;  
    OCTET_STRING updateToken;  
    BOOLEAN userConsentNeeded;  
    OCTET_STRING metadataForRequestor;  
  }

  command ApplyUpdateRequest(ApplyUpdateRequestRequest): ApplyUpdateResponse = 2;
  command NotifyUpdateApplied(NotifyUpdateAppliedRequest): DefaultSuccess = 4;
  command QueryImage(QueryImageRequest): QueryImageResponse = 0;
}

server cluster OccupancySensing = 1030 {
  attribute(writable, reportable) bitmap8 occupancy = 0;
  attribute(writable, reportable) enum8 occupancySensorType = 1;
  attribute(writable, reportable) bitmap8 occupancySensorTypeBitmap = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster OnOff = 6 {
  enum OnOffDelayedAllOffEffectVariant : enum8 {
    kFadeToOffIn0p8Seconds = 0;
    kNoFade = 1;
    k50PercentDimDownIn0p8SecondsThenFadeToOffIn12Seconds = 2;
  }

  enum OnOffDyingLightEffectVariant : enum8 {
    k20PercenterDimUpIn0p5SecondsThenFadeToOffIn1Second = 0;
  }

  enum OnOffEffectIdentifier : enum8 {
    kDelayedAllOff = 0;
    kDyingLight = 1;
  }

  attribute(writable, reportable) boolean onOff = 0;
  attribute(writable, reportable) boolean globalSceneControl = 16384;
  attribute(readonly, reportable) int16u onTime = 16385;
  attribute(readonly, reportable) int16u offWaitTime = 16386;
  attribute(readonly, reportable) enum8 startUpOnOff = 16387;
  attribute(writable, reportable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct OffRequest {
  }

  request struct OnRequest {
  }

  request struct ToggleRequest {
  }

  command Off(OffRequest): DefaultSuccess = 0;
  command On(OnRequest): DefaultSuccess = 1;
  command Toggle(ToggleRequest): DefaultSuccess = 2;
}

server cluster OperationalCredentials = 62 {
  enum NodeOperationalCertStatus : ENUM8 {
    kSuccess = 0;
    kInvalidPublicKey = 1;
    kInvalidNodeOpId = 2;
    kInvalidNOC = 3;
    kMissingCsr = 4;
    kTableFull = 5;
    kInsufficientPrivilege = 8;
    kFabricConflict = 9;
    kLabelConflict = 10;
    kInvalidFabricIndex = 11;
  }

  attribute(writable, reportable) FabricDescriptor fabricsList = 1;
  attribute(writable, reportable) int8u supportedFabrics = 2;
  attribute(writable, reportable) int8u commissionedFabrics = 3;
  attribute(writable, reportable) OCTET_STRING trustedRootCertificates = 4;
  attribute(writable, reportable) fabric_idx currentFabricIndex = 5;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct AddNOCRequest {
    OCTET_STRING NOCValue;  
    OCTET_STRING ICACValue;  
    OCTET_STRING IPKValue;  
    NODE_ID CaseAdminNode;  
    INT16U AdminVendorId;  
  }

  request struct AddTrustedRootCertificateRequest {
    OCTET_STRING RootCertificate;  
  }

  request struct AttestationRequestRequest {
    OCTET_STRING AttestationNonce;  
  }

  request struct CertificateChainRequestRequest {
    INT8U CertificateType;  
  }

  request struct OpCSRRequestRequest {
    OCTET_STRING CSRNonce;  
  }

  request struct RemoveFabricRequest {
    INT8U FabricIndex;  
  }

  request struct RemoveTrustedRootCertificateRequest {
    OCTET_STRING TrustedRootIdentifier;  
  }

  request struct UpdateFabricLabelRequest {
    CHAR_STRING Label;  
  }

  request struct UpdateNOCRequest {
    OCTET_STRING NOCValue;  
    OCTET_STRING ICACValue;  
  }

  response struct AttestationResponse {
    OCTET_STRING AttestationElements;  
    OCTET_STRING Signature;  
  }

  response struct CertificateChainResponse {
    OCTET_STRING Certificate;  
  }

  response struct NOCResponse {
    INT8U StatusCode;  
    INT8U FabricIndex;  
    CHAR_STRING DebugText;  
  }

  response struct OpCSRResponse {
    OCTET_STRING NOCSRElements;  
    OCTET_STRING AttestationSignature;  
  }

  command AddNOC(AddNOCRequest): NOCResponse = 6;
  command AddTrustedRootCertificate(AddTrustedRootCertificateRequest): DefaultSuccess = 11;
  command AttestationRequest(AttestationRequestRequest): AttestationResponse = 0;
  command CertificateChainRequest(CertificateChainRequestRequest): CertificateChainResponse = 2;
  command OpCSRRequest(OpCSRRequestRequest): OpCSRResponse = 4;
  command RemoveFabric(RemoveFabricRequest): NOCResponse = 10;
  command RemoveTrustedRootCertificate(RemoveTrustedRootCertificateRequest): DefaultSuccess = 12;
  command UpdateFabricLabel(UpdateFabricLabelRequest): NOCResponse = 9;
  command UpdateNOC(UpdateNOCRequest): NOCResponse = 7;
}

server cluster PressureMeasurement = 1027 {
  attribute(writable, reportable) int16s measuredValue = 0;
  attribute(writable, reportable) int16s minMeasuredValue = 1;
  attribute(writable, reportable) int16s maxMeasuredValue = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster RelativeHumidityMeasurement = 1029 {
  attribute(writable, reportable) int16u measuredValue = 0;
  attribute(writable, reportable) int16u minMeasuredValue = 1;
  attribute(writable, reportable) int16u maxMeasuredValue = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster Scenes = 5 {
  attribute(writable, reportable) int8u sceneCount = 0;
  attribute(writable, reportable) int8u currentScene = 1;
  attribute(writable, reportable) int16u currentGroup = 2;
  attribute(writable, reportable) boolean sceneValid = 3;
  attribute(writable, reportable) bitmap8 nameSupport = 4;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct AddSceneRequest {
    INT16U groupId;  
    INT8U sceneId;  
    INT16U transitionTime;  
    CHAR_STRING sceneName;  
    SceneExtensionFieldSet extensionFieldSets;  
  }

  request struct GetSceneMembershipRequest {
    INT16U groupId;  
  }

  request struct RecallSceneRequest {
    INT16U groupId;  
    INT8U sceneId;  
    INT16U transitionTime;  
  }

  request struct RemoveAllScenesRequest {
    INT16U groupId;  
  }

  request struct RemoveSceneRequest {
    INT16U groupId;  
    INT8U sceneId;  
  }

  request struct StoreSceneRequest {
    INT16U groupId;  
    INT8U sceneId;  
  }

  request struct ViewSceneRequest {
    INT16U groupId;  
    INT8U sceneId;  
  }

  response struct AddSceneResponse {
    ENUM8 status;  
    INT16U groupId;  
    INT8U sceneId;  
  }

  response struct GetSceneMembershipResponse {
    ENUM8 status;  
    INT8U capacity;  
    INT16U groupId;  
    INT8U sceneCount;  
    INT8U sceneList;  
  }

  response struct RemoveAllScenesResponse {
    ENUM8 status;  
    INT16U groupId;  
  }

  response struct RemoveSceneResponse {
    ENUM8 status;  
    INT16U groupId;  
    INT8U sceneId;  
  }

  response struct StoreSceneResponse {
    ENUM8 status;  
    INT16U groupId;  
    INT8U sceneId;  
  }

  response struct ViewSceneResponse {
    ENUM8 status;  
    INT16U groupId;  
    INT8U sceneId;  
    INT16U transitionTime;  
    CHAR_STRING sceneName;  
    SceneExtensionFieldSet extensionFieldSets;  
  }

  command AddScene(AddSceneRequest): AddSceneResponse = 0;
  command GetSceneMembership(GetSceneMembershipRequest): GetSceneMembershipResponse = 6;
  command RecallScene(RecallSceneRequest): DefaultSuccess = 5;
  command RemoveAllScenes(RemoveAllScenesRequest): RemoveAllScenesResponse = 3;
  command RemoveScene(RemoveSceneRequest): RemoveSceneResponse = 2;
  command StoreScene(StoreSceneRequest): StoreSceneResponse = 4;
  command ViewScene(ViewSceneRequest): ViewSceneResponse = 1;
}

server cluster SoftwareDiagnostics = 52 {
  event SoftwareFault(info) = 0 {
    kSoftwareFault = 0,
  }

  attribute(writable, reportable) ThreadMetrics threadMetrics = 0;
  attribute(writable, reportable) int64u currentHeapFree = 1;
  attribute(writable, reportable) int64u currentHeapUsed = 2;
  attribute(writable, reportable) int64u currentHeapHighWatermark = 3;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster Switch = 59 {
  event SwitchLatched(info) = 0 {
    kNewPosition = 0,
  }

  event InitialPress(info) = 1 {
    kNewPosition = 0,
  }

  event LongPress(info) = 2 {
    kNewPosition = 0,
  }

  event ShortRelease(info) = 3 {
    kPreviousPosition = 0,
  }

  event LongRelease(info) = 4 {
    kPreviousPosition = 0,
  }

  event MultiPressOngoing(info) = 5 {
    kNewPosition = 0,
    kCurrentNumberOfPressesCounted = 1,
  }

  event MultiPressComplete(info) = 6 {
    kNewPosition = 0,
    kTotalNumberOfPressesCounted = 1,
  }

  attribute(writable, reportable) int8u numberOfPositions = 0;
  attribute(writable, reportable) int8u currentPosition = 1;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

client cluster TargetNavigator = 1285 {
  enum StatusEnum : ENUM8 {
    kSuccess = 0;
    kAppNotAvailable = 1;
    kSystemBusy = 2;
  }

  attribute(writable, reportable) TargetInfo targetNavigatorList = 0;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct NavigateTargetRequestRequest {
    INT8U target;  
    CHAR_STRING data;  
  }

  command NavigateTargetRequest(NavigateTargetRequestRequest): NavigateTargetResponse = 0;
}

server cluster TemperatureMeasurement = 1026 {
  attribute(writable, reportable) int16s measuredValue = 0;
  attribute(writable, reportable) int16s minMeasuredValue = 1;
  attribute(writable, reportable) int16s maxMeasuredValue = 2;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster TestCluster = 1295 {
  enum SimpleEnum : ENUM8 {
    kUnspecified = 0;
    kValueA = 1;
    kValueB = 2;
    kValueC = 3;
  }

  event TestEvent(info) = 1 {
    kArg1 = 1,
    kArg2 = 2,
    kArg3 = 3,
    kArg4 = 4,
    kArg5 = 5,
    kArg6 = 6,
  }

  attribute(readonly, reportable) boolean boolean = 0;
  attribute(readonly, reportable) bitmap8 bitmap8 = 1;
  attribute(readonly, reportable) bitmap16 bitmap16 = 2;
  attribute(readonly, reportable) bitmap32 bitmap32 = 3;
  attribute(readonly, reportable) bitmap64 bitmap64 = 4;
  attribute(readonly, reportable) int8u int8u = 5;
  attribute(readonly, reportable) int16u int16u = 6;
  attribute(readonly, reportable) int32u int32u = 8;
  attribute(readonly, reportable) int64u int64u = 12;
  attribute(readonly, reportable) int8s int8s = 13;
  attribute(readonly, reportable) int16s int16s = 14;
  attribute(readonly, reportable) int32s int32s = 16;
  attribute(readonly, reportable) int64s int64s = 20;
  attribute(readonly, reportable) enum8 enum8 = 21;
  attribute(readonly, reportable) enum16 enum16 = 22;
  attribute(readonly, reportable) octet_string octetString = 25;
  attribute(readonly, reportable) INT8U listInt8u = 26;
  attribute(readonly, reportable) OCTET_STRING listOctetString = 27;
  attribute(readonly, reportable) TestListStructOctet listStructOctetString = 28;
  attribute(readonly, reportable) long_octet_string longOctetString = 29;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  request struct TestRequest {
  }

  request struct TestNotHandledRequest {
  }

  request struct TestSpecificRequest {
  }

  response struct TestSpecificResponse {
    INT8U returnValue;  
  }

  command Test(TestRequest): DefaultSuccess = 0;
  command TestNotHandled(TestNotHandledRequest): DefaultSuccess = 1;
  command TestSpecific(TestSpecificRequest): TestSpecificResponse = 2;
}

server cluster Thermostat = 513 {
  enum SetpointAdjustMode : ENUM8 {
    kHeatSetpoint = 0;
    kCoolSetpoint = 1;
    kHeatAndCoolSetpoints = 2;
  }

  attribute(writable, reportable) int16s localTemperature = 0;
  attribute(readonly, reportable) int16s occupiedCoolingSetpoint = 17;
  attribute(readonly, reportable) int16s occupiedHeatingSetpoint = 18;
  attribute(readonly, reportable) enum8 controlSequenceOfOperation = 27;
  attribute(readonly, reportable) enum8 systemMode = 28;
  attribute(writable, reportable) enum8 startOfWeek = 32;
  attribute(writable, reportable) int8u numberOfWeeklyTransitions = 33;
  attribute(writable, reportable) int8u numberOfDailyTransitions = 34;
  attribute(writable, reportable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;

  response struct GetWeeklyScheduleResponse {
    ENUM8 numberOfTransitionsForSequence;  
    DayOfWeek dayOfWeekForSequence;  
    ModeForSequence modeForSequence;  
    INT8U payload;  
  }
}

server cluster ThreadNetworkDiagnostics = 53 {
  enum NetworkFault : ENUM8 {
    kUnspecified = 0;
    kLinkDown = 1;
    kHardwareFailure = 2;
    kNetworkJammed = 3;
  }

  enum RoutingRole : ENUM8 {
    kUnspecified = 0;
    kUnassigned = 1;
    kSleepyEndDevice = 2;
    kEndDevice = 3;
    kReed = 4;
    kRouter = 5;
    kLeader = 6;
  }

  enum ThreadConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  event ConnectionStatus(info) = 0 {
    kConnectionStatus = 0,
  }

  attribute(writable, reportable) int16u channel = 0;
  attribute(writable, reportable) enum8 routingRole = 1;
  attribute(writable, reportable) octet_string networkName = 2;
  attribute(writable, reportable) int16u panId = 3;
  attribute(writable, reportable) int64u extendedPanId = 4;
  attribute(writable, reportable) octet_string meshLocalPrefix = 5;
  attribute(writable, reportable) int64u overrunCount = 6;
  attribute(writable, reportable) NeighborTable neighborTableList = 7;
  attribute(writable, reportable) RouteTable routeTableList = 8;
  attribute(writable, reportable) int32u partitionId = 9;
  attribute(writable, reportable) int8u weighting = 10;
  attribute(writable, reportable) int8u dataVersion = 11;
  attribute(writable, reportable) int8u stableDataVersion = 12;
  attribute(writable, reportable) int8u leaderRouterId = 13;
  attribute(writable, reportable) int16u detachedRoleCount = 14;
  attribute(writable, reportable) int16u childRoleCount = 15;
  attribute(writable, reportable) int16u routerRoleCount = 16;
  attribute(writable, reportable) int16u leaderRoleCount = 17;
  attribute(writable, reportable) int16u attachAttemptCount = 18;
  attribute(writable, reportable) int16u partitionIdChangeCount = 19;
  attribute(writable, reportable) int16u betterPartitionAttachAttemptCount = 20;
  attribute(writable, reportable) int16u parentChangeCount = 21;
  attribute(writable, reportable) int32u txTotalCount = 22;
  attribute(writable, reportable) int32u txUnicastCount = 23;
  attribute(writable, reportable) int32u txBroadcastCount = 24;
  attribute(writable, reportable) int32u txAckRequestedCount = 25;
  attribute(writable, reportable) int32u txAckedCount = 26;
  attribute(writable, reportable) int32u txNoAckRequestedCount = 27;
  attribute(writable, reportable) int32u txDataCount = 28;
  attribute(writable, reportable) int32u txDataPollCount = 29;
  attribute(writable, reportable) int32u txBeaconCount = 30;
  attribute(writable, reportable) int32u txBeaconRequestCount = 31;
  attribute(writable, reportable) int32u txOtherCount = 32;
  attribute(writable, reportable) int32u txRetryCount = 33;
  attribute(writable, reportable) int32u txDirectMaxRetryExpiryCount = 34;
  attribute(writable, reportable) int32u txIndirectMaxRetryExpiryCount = 35;
  attribute(writable, reportable) int32u txErrCcaCount = 36;
  attribute(writable, reportable) int32u txErrAbortCount = 37;
  attribute(writable, reportable) int32u txErrBusyChannelCount = 38;
  attribute(writable, reportable) int32u rxTotalCount = 39;
  attribute(writable, reportable) int32u rxUnicastCount = 40;
  attribute(writable, reportable) int32u rxBroadcastCount = 41;
  attribute(writable, reportable) int32u rxDataCount = 42;
  attribute(writable, reportable) int32u rxDataPollCount = 43;
  attribute(writable, reportable) int32u rxBeaconCount = 44;
  attribute(writable, reportable) int32u rxBeaconRequestCount = 45;
  attribute(writable, reportable) int32u rxOtherCount = 46;
  attribute(writable, reportable) int32u rxAddressFilteredCount = 47;
  attribute(writable, reportable) int32u rxDestAddrFilteredCount = 48;
  attribute(writable, reportable) int32u rxDuplicatedCount = 49;
  attribute(writable, reportable) int32u rxErrNoFrameCount = 50;
  attribute(writable, reportable) int32u rxErrUnknownNeighborCount = 51;
  attribute(writable, reportable) int32u rxErrInvalidSrcAddrCount = 52;
  attribute(writable, reportable) int32u rxErrSecCount = 53;
  attribute(writable, reportable) int32u rxErrFcsCount = 54;
  attribute(writable, reportable) int32u rxErrOtherCount = 55;
  attribute(writable, reportable) int64u activeTimestamp = 56;
  attribute(writable, reportable) int64u pendingTimestamp = 57;
  attribute(writable, reportable) int32u delay = 58;
  attribute(writable, reportable) SecurityPolicy securityPolicy = 59;
  attribute(writable, reportable) octet_string channelMask = 60;
  attribute(writable, reportable) OperationalDatasetComponents operationalDatasetComponents = 61;
  attribute(writable, reportable) NetworkFault activeNetworkFaultsList = 62;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster UserLabel = 65 {
  attribute(readonly) LabelStruct labelList = 0;
  attribute(writable) int16u clusterRevision = 65533;
}

server cluster WakeOnLan = 1283 {
  attribute(writable, reportable) char_string wakeOnLanMacAddress = 0;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster WiFiNetworkDiagnostics = 54 {
  enum AssociationFailureCause : ENUM8 {
    kUnknown = 0;
    kAssociationFailed = 1;
    kAuthenticationFailed = 2;
    kSsidNotFound = 3;
  }

  enum SecurityType : ENUM8 {
    kUnspecified = 0;
    kNone = 1;
    kWep = 2;
    kWpa = 3;
    kWpa2 = 4;
    kWpa3 = 5;
  }

  enum WiFiConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  enum WiFiVersionType : ENUM8 {
    k80211a = 0;
    k80211b = 1;
    k80211g = 2;
    k80211n = 3;
    k80211ac = 4;
    k80211ax = 5;
  }

  event Disconnection(info) = 0 {
    kReasonCode = 0,
  }

  event AssociationFailure(info) = 1 {
    kAssociationFailure = 0,
    kStatus = 1,
  }

  event ConnectionStatus(info) = 2 {
    kConnectionStatus = 0,
  }

  attribute(writable, reportable) octet_string bssid = 0;
  attribute(writable, reportable) enum8 securityType = 1;
  attribute(writable, reportable) enum8 wiFiVersion = 2;
  attribute(writable, reportable) int16u channelNumber = 3;
  attribute(writable, reportable) int8s rssi = 4;
  attribute(writable, reportable) int32u beaconLostCount = 5;
  attribute(writable, reportable) int32u beaconRxCount = 6;
  attribute(writable, reportable) int32u packetMulticastRxCount = 7;
  attribute(writable, reportable) int32u packetMulticastTxCount = 8;
  attribute(writable, reportable) int32u packetUnicastRxCount = 9;
  attribute(writable, reportable) int32u packetUnicastTxCount = 10;
  attribute(writable, reportable) int64u currentMaxRate = 11;
  attribute(writable, reportable) int64u overrunCount = 12;
  attribute(writable) bitmap32 featureMap = 65532;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}

server cluster WindowCovering = 258 {
  attribute(writable, reportable) enum8 type = 0;
  attribute(writable, reportable) int16u currentPositionLift = 3;
  attribute(writable, reportable) int16u currentPositionTilt = 4;
  attribute(writable, reportable) bitmap8 configStatus = 7;
  attribute(writable, reportable) Percent currentPositionLiftPercentage = 8;
  attribute(writable, reportable) Percent currentPositionTiltPercentage = 9;
  attribute(writable, reportable) bitmap8 operationalStatus = 10;
  attribute(writable, reportable) Percent100ths targetPositionLiftPercent100ths = 11;
  attribute(writable, reportable) Percent100ths targetPositionTiltPercent100ths = 12;
  attribute(writable, reportable) enum8 endProductType = 13;
  attribute(writable, reportable) Percent100ths currentPositionLiftPercent100ths = 14;
  attribute(writable, reportable) Percent100ths currentPositionTiltPercent100ths = 15;
  attribute(writable, reportable) int16u installedOpenLimitLift = 16;
  attribute(writable, reportable) int16u installedClosedLimitLift = 17;
  attribute(writable, reportable) int16u installedOpenLimitTilt = 18;
  attribute(writable, reportable) int16u installedClosedLimitTilt = 19;
  attribute(readonly, reportable) bitmap8 mode = 23;
  attribute(writable, reportable) bitmap16 safetyStatus = 26;
  attribute(writable, reportable) int16u clusterRevision = 65533;
}


endpoint 0 {
}
endpoint 1 {
}
endpoint 2 {
}
