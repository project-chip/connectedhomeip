// This IDL was generated automatically by ZAP.
// It is for view/code review purposes only.

struct LabelStruct {
  CHAR_STRING kLabel = 1;
  CHAR_STRING kValue = 2;
}

server cluster FixedLabel = 64 {
  attribute(readonly) LabelStruct labelList = 0;
  attribute(readonly) int16u clusterRevision = 65533;
}

server cluster GeneralCommissioning = 48 {
  enum GeneralCommissioningError : ENUM8 {
    kOk = 0;
    kValueOutsideRange = 1;
    kInvalidAuthentication = 2;
    kNotCommissioning = 3;
  }

  enum RegulatoryLocationType : ENUM8 {
    kIndoor = 0;
    kOutdoor = 1;
    kIndoorOutdoor = 2;
  }

  struct BasicCommissioningInfoType {
    INT32U kFailSafeExpiryLengthMs = 1;
  }

  attribute(writable, reportable) int64u breadcrumb = 0;
  attribute(readonly, reportable) BasicCommissioningInfoType basicCommissioningInfoList = 1;
  attribute(readonly) enum8 regulatoryConfig = 2;
  attribute(readonly) enum8 locationCapability = 3;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct ArmFailSafeRequest {
    INT16U expiryLengthSeconds;  
    INT64U breadcrumb;  
    INT32U timeoutMs;  
  }

  request struct CommissioningCompleteRequest {
  }

  request struct SetRegulatoryConfigRequest {
    RegulatoryLocationType location;  
    CHAR_STRING countryCode;  
    INT64U breadcrumb;  
    INT32U timeoutMs;  
  }

  response struct ArmFailSafeResponse {
    GeneralCommissioningError errorCode;  
    CHAR_STRING debugText;  
  }

  response struct CommissioningCompleteResponse {
    GeneralCommissioningError errorCode;  
    CHAR_STRING debugText;  
  }

  response struct SetRegulatoryConfigResponse {
    GeneralCommissioningError errorCode;  
    CHAR_STRING debugText;  
  }

  command ArmFailSafe(ArmFailSafeRequest): ArmFailSafeResponse = 0;
  command CommissioningComplete(CommissioningCompleteRequest): CommissioningCompleteResponse = 4;
  command SetRegulatoryConfig(SetRegulatoryConfigRequest): SetRegulatoryConfigResponse = 2;
}

server cluster LocalizationConfiguration = 43 {
  attribute(writable) char_string activeLocale = 1;
  attribute(readonly) CHAR_STRING supportedLocales = 2;
}

server cluster NetworkCommissioning = 49 {
  enum NetworkCommissioningStatus : ENUM8 {
    kSuccess = 0;
    kOutOfRange = 1;
    kBoundsExceeded = 2;
    kNetworkIDNotFound = 3;
    kDuplicateNetworkID = 4;
    kNetworkNotFound = 5;
    kRegulatoryError = 6;
    kAuthFailure = 7;
    kUnsupportedSecurity = 8;
    kOtherConnectionFailure = 9;
    kIPV6Failed = 10;
    kIPBindFailed = 11;
    kUnknownError = 12;
  }

  enum WiFiBand : ENUM8 {
    k2g4 = 0;
    k3g65 = 1;
    k5g = 2;
    k6g = 3;
    k60g = 4;
  }

  struct NetworkInfo {
    OCTET_STRING kNetworkID = 1;
    BOOLEAN kConnected = 2;
  }

  struct WiFiInterfaceScanResult {
    BITMAP8 kSecurity = 1;
    OCTET_STRING kSsid = 2;
    OCTET_STRING kBssid = 3;
    INT16U kChannel = 4;
    WiFiBand kWiFiBand = 5;
    INT8S kRssi = 6;
  }

  struct ThreadInterfaceScanResult {
    INT64U kPanId = 1;
    INT64U kExtendedPanId = 2;
    CHAR_STRING kNetworkName = 3;
    INT16U kChannel = 4;
    INT8U kVersion = 5;
    INT64U kExtendedAddress = 6;
    INT8S kRssi = 7;
    INT8U kLqi = 8;
  }

  attribute(readonly) int8u maxNetworks = 0;
  attribute(readonly) NetworkInfo networks = 1;
  attribute(readonly) int8u scanMaxTimeSeconds = 2;
  attribute(readonly) int8u connectMaxTimeSeconds = 3;
  attribute(writable) boolean interfaceEnabled = 4;
  attribute(readonly) NetworkCommissioningStatus lastNetworkingStatus = 5;
  attribute(readonly) octet_string lastNetworkID = 6;
  attribute(readonly) int32u lastConnectErrorValue = 7;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct AddOrUpdateThreadNetworkRequest {
    OCTET_STRING OperationalDataset;  
    INT64U Breadcrumb;  
  }

  request struct AddOrUpdateWiFiNetworkRequest {
    OCTET_STRING SSID;  
    OCTET_STRING Credentials;  
    INT64U breadcrumb;  
  }

  request struct ConnectNetworkRequest {
    OCTET_STRING NetworkID;  
    INT64U Breadcrumb;  
  }

  request struct RemoveNetworkRequest {
    OCTET_STRING NetworkID;  
    INT64U Breadcrumb;  
  }

  request struct ReorderNetworkRequest {
    OCTET_STRING NetworkID;  
    INT8U NetworkIndex;  
    INT64U Breadcrumb;  
  }

  request struct ScanNetworksRequest {
    OCTET_STRING SSID;  
    INT64U Breadcrumb;  
  }

  response struct ConnectNetworkResponse {
    NetworkCommissioningStatus NetworkingStatus;  
    CHAR_STRING DebugText;  
    INT32S ErrorValue;  
  }

  response struct NetworkConfigResponse {
    NetworkCommissioningStatus NetworkingStatus;  
    CHAR_STRING DebugText;  
  }

  response struct ScanNetworksResponse {
    NetworkCommissioningStatus NetworkingStatus;  
    CHAR_STRING DebugText;  
    WiFiInterfaceScanResult WiFiScanResults;  
    ThreadInterfaceScanResult ThreadScanResults;  
  }

  command AddOrUpdateThreadNetwork(AddOrUpdateThreadNetworkRequest): NetworkConfigResponse = 3;
  command AddOrUpdateWiFiNetwork(AddOrUpdateWiFiNetworkRequest): NetworkConfigResponse = 2;
  command ConnectNetwork(ConnectNetworkRequest): ConnectNetworkResponse = 6;
  command RemoveNetwork(RemoveNetworkRequest): NetworkConfigResponse = 4;
  command ReorderNetwork(ReorderNetworkRequest): NetworkConfigResponse = 8;
  command ScanNetworks(ScanNetworksRequest): ScanNetworksResponse = 0;
}

server cluster OtaSoftwareUpdateProvider = 41 {
  enum OTAApplyUpdateAction : ENUM8 {
    kProceed = 0;
    kAwaitNextAction = 1;
    kDiscontinue = 2;
  }

  enum OTADownloadProtocol : ENUM8 {
    kBDXSynchronous = 0;
    kBDXAsynchronous = 1;
    kHttps = 2;
    kVendorSpecific = 3;
  }

  enum OTAQueryStatus : ENUM8 {
    kUpdateAvailable = 0;
    kBusy = 1;
    kNotAvailable = 2;
    kDownloadProtocolNotSupported = 3;
  }

  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct ApplyUpdateRequestRequest {
    OCTET_STRING updateToken;  
    INT32U newVersion;  
  }

  request struct NotifyUpdateAppliedRequest {
    OCTET_STRING updateToken;  
    INT32U softwareVersion;  
  }

  request struct QueryImageRequest {
    vendor_id vendorId;  
    INT16U productId;  
    INT32U softwareVersion;  
    OTADownloadProtocol protocolsSupported;  
    INT16U hardwareVersion;  
    CHAR_STRING location;  
    BOOLEAN requestorCanConsent;  
    OCTET_STRING metadataForProvider;  
  }

  response struct ApplyUpdateResponse {
    OTAApplyUpdateAction action;  
    INT32U delayedActionTime;  
  }

  response struct QueryImageResponse {
    OTAQueryStatus status;  
    INT32U delayedActionTime;  
    CHAR_STRING imageURI;  
    INT32U softwareVersion;  
    CHAR_STRING softwareVersionString;  
    OCTET_STRING updateToken;  
    BOOLEAN userConsentNeeded;  
    OCTET_STRING metadataForRequestor;  
  }

  command ApplyUpdateRequest(ApplyUpdateRequestRequest): ApplyUpdateResponse = 2;
  command NotifyUpdateApplied(NotifyUpdateAppliedRequest): DefaultSuccess = 4;
  command QueryImage(QueryImageRequest): QueryImageResponse = 0;
}

server cluster OperationalCredentials = 62 {
  enum NodeOperationalCertStatus : ENUM8 {
    kSuccess = 0;
    kInvalidPublicKey = 1;
    kInvalidNodeOpId = 2;
    kInvalidNOC = 3;
    kMissingCsr = 4;
    kTableFull = 5;
    kInsufficientPrivilege = 8;
    kFabricConflict = 9;
    kLabelConflict = 10;
    kInvalidFabricIndex = 11;
  }

  struct FabricDescriptor {
    INT8U kFabricIndex = 1;
    OCTET_STRING kRootPublicKey = 2;
    INT16U kVendorId = 3;
    FABRIC_ID kFabricId = 4;
    NODE_ID kNodeId = 5;
    CHAR_STRING kLabel = 6;
  }

  attribute(readonly, reportable) FabricDescriptor fabricsList = 1;
  attribute(readonly, reportable) int8u supportedFabrics = 2;
  attribute(readonly, reportable) int8u commissionedFabrics = 3;
  attribute(readonly, reportable) OCTET_STRING trustedRootCertificates = 4;
  attribute(readonly, reportable) fabric_idx currentFabricIndex = 5;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct AddNOCRequest {
    OCTET_STRING NOCValue;  
    OCTET_STRING ICACValue;  
    OCTET_STRING IPKValue;  
    NODE_ID CaseAdminNode;  
    INT16U AdminVendorId;  
  }

  request struct AddTrustedRootCertificateRequest {
    OCTET_STRING RootCertificate;  
  }

  request struct AttestationRequestRequest {
    OCTET_STRING AttestationNonce;  
  }

  request struct CertificateChainRequestRequest {
    INT8U CertificateType;  
  }

  request struct OpCSRRequestRequest {
    OCTET_STRING CSRNonce;  
  }

  request struct RemoveFabricRequest {
    INT8U FabricIndex;  
  }

  request struct UpdateFabricLabelRequest {
    CHAR_STRING Label;  
  }

  response struct AttestationResponse {
    OCTET_STRING AttestationElements;  
    OCTET_STRING Signature;  
  }

  response struct CertificateChainResponse {
    OCTET_STRING Certificate;  
  }

  response struct NOCResponse {
    INT8U StatusCode;  
    INT8U FabricIndex;  
    CHAR_STRING DebugText;  
  }

  response struct OpCSRResponse {
    OCTET_STRING NOCSRElements;  
    OCTET_STRING AttestationSignature;  
  }

  command AddNOC(AddNOCRequest): NOCResponse = 6;
  command AddTrustedRootCertificate(AddTrustedRootCertificateRequest): DefaultSuccess = 11;
  command AttestationRequest(AttestationRequestRequest): AttestationResponse = 0;
  command CertificateChainRequest(CertificateChainRequestRequest): CertificateChainResponse = 2;
  command OpCSRRequest(OpCSRRequestRequest): OpCSRResponse = 4;
  command RemoveFabric(RemoveFabricRequest): NOCResponse = 10;
  command UpdateFabricLabel(UpdateFabricLabelRequest): NOCResponse = 9;
}

server cluster UserLabel = 65 {
  attribute(writable) LabelStruct labelList = 0;
  attribute(readonly) int16u clusterRevision = 65533;
}


endpoint 0 {
}

