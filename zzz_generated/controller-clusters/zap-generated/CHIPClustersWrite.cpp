/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include "CHIPClusters.h"

#include <app-common/zap-generated/cluster-objects.h>
#include <app-common/zap-generated/ids/Attributes.h>

namespace chip {

using namespace app::Clusters;
using namespace System;
using namespace Encoding::LittleEndian;

namespace Controller {

// AccountLogin Cluster Attributes

// AdministratorCommissioning Cluster Attributes

// ApplicationBasic Cluster Attributes

// ApplicationLauncher Cluster Attributes

// AudioOutput Cluster Attributes

// BarrierControl Cluster Attributes

// Basic Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Basic::Attributes::UserLabel::TypeInfo>(
    const chip::app::Clusters::Basic::Attributes::UserLabel::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Basic::Attributes::Location::TypeInfo>(
    const chip::app::Clusters::Basic::Attributes::Location::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Basic::Attributes::LocalConfigDisabled::TypeInfo>(
    const chip::app::Clusters::Basic::Attributes::LocalConfigDisabled::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// BinaryInputBasic Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::BinaryInputBasic::Attributes::OutOfService::TypeInfo>(
    const chip::app::Clusters::BinaryInputBasic::Attributes::OutOfService::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::BinaryInputBasic::Attributes::PresentValue::TypeInfo>(
    const chip::app::Clusters::BinaryInputBasic::Attributes::PresentValue::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// Binding Cluster Attributes

// BooleanState Cluster Attributes

// BridgedActions Cluster Attributes

// BridgedDeviceBasic Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::BridgedDeviceBasic::Attributes::UserLabel::TypeInfo>(
    const chip::app::Clusters::BridgedDeviceBasic::Attributes::UserLabel::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// ColorControl Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorControlOptions::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorControlOptions::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::WhitePointX::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::WhitePointX::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::WhitePointY::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::WhitePointY::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorPointRX::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorPointRX::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorPointRY::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorPointRY::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorPointRIntensity::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorPointRIntensity::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorPointGX::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorPointGX::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorPointGY::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorPointGY::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorPointGIntensity::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorPointGIntensity::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorPointBX::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorPointBX::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorPointBY::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorPointBY::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::ColorPointBIntensity::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::ColorPointBIntensity::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR
ClusterBase::WriteAttribute<chip::app::Clusters::ColorControl::Attributes::StartUpColorTemperatureMireds::TypeInfo>(
    const chip::app::Clusters::ColorControl::Attributes::StartUpColorTemperatureMireds::TypeInfo::Type & requestData,
    void * context, WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// ContentLauncher Cluster Attributes

// Descriptor Cluster Attributes

// DiagnosticLogs Cluster Attributes

// DoorLock Cluster Attributes

// ElectricalMeasurement Cluster Attributes

// EthernetNetworkDiagnostics Cluster Attributes

// FixedLabel Cluster Attributes

// FlowMeasurement Cluster Attributes

// GeneralCommissioning Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::GeneralCommissioning::Attributes::Breadcrumb::TypeInfo>(
    const chip::app::Clusters::GeneralCommissioning::Attributes::Breadcrumb::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// GeneralDiagnostics Cluster Attributes

// GroupKeyManagement Cluster Attributes

// Groups Cluster Attributes

// Identify Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Identify::Attributes::IdentifyTime::TypeInfo>(
    const chip::app::Clusters::Identify::Attributes::IdentifyTime::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// IlluminanceMeasurement Cluster Attributes

// KeypadInput Cluster Attributes

// LevelControl Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::LevelControl::Attributes::Options::TypeInfo>(
    const chip::app::Clusters::LevelControl::Attributes::Options::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::LevelControl::Attributes::OnOffTransitionTime::TypeInfo>(
    const chip::app::Clusters::LevelControl::Attributes::OnOffTransitionTime::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::LevelControl::Attributes::OnLevel::TypeInfo>(
    const chip::app::Clusters::LevelControl::Attributes::OnLevel::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::LevelControl::Attributes::OnTransitionTime::TypeInfo>(
    const chip::app::Clusters::LevelControl::Attributes::OnTransitionTime::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::LevelControl::Attributes::OffTransitionTime::TypeInfo>(
    const chip::app::Clusters::LevelControl::Attributes::OffTransitionTime::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::LevelControl::Attributes::DefaultMoveRate::TypeInfo>(
    const chip::app::Clusters::LevelControl::Attributes::DefaultMoveRate::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::LevelControl::Attributes::StartUpCurrentLevel::TypeInfo>(
    const chip::app::Clusters::LevelControl::Attributes::StartUpCurrentLevel::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// LowPower Cluster Attributes

// MediaInput Cluster Attributes

// MediaPlayback Cluster Attributes

// ModeSelect Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::ModeSelect::Attributes::OnMode::TypeInfo>(
    const chip::app::Clusters::ModeSelect::Attributes::OnMode::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// NetworkCommissioning Cluster Attributes

// OtaSoftwareUpdateProvider Cluster Attributes

// OtaSoftwareUpdateRequestor Cluster Attributes

template CHIP_ERROR
ClusterBase::WriteAttribute<chip::app::Clusters::OtaSoftwareUpdateRequestor::Attributes::DefaultOtaProvider::TypeInfo>(
    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Attributes::DefaultOtaProvider::TypeInfo::Type & requestData,
    void * context, WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// OccupancySensing Cluster Attributes

// OnOff Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::OnOff::Attributes::OnTime::TypeInfo>(
    const chip::app::Clusters::OnOff::Attributes::OnTime::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::OnOff::Attributes::OffWaitTime::TypeInfo>(
    const chip::app::Clusters::OnOff::Attributes::OffWaitTime::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::OnOff::Attributes::StartUpOnOff::TypeInfo>(
    const chip::app::Clusters::OnOff::Attributes::StartUpOnOff::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// OnOffSwitchConfiguration Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::OnOffSwitchConfiguration::Attributes::SwitchActions::TypeInfo>(
    const chip::app::Clusters::OnOffSwitchConfiguration::Attributes::SwitchActions::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// OperationalCredentials Cluster Attributes

// PowerSource Cluster Attributes

// PressureMeasurement Cluster Attributes

// PumpConfigurationAndControl Cluster Attributes

template CHIP_ERROR
ClusterBase::WriteAttribute<chip::app::Clusters::PumpConfigurationAndControl::Attributes::OperationMode::TypeInfo>(
    const chip::app::Clusters::PumpConfigurationAndControl::Attributes::OperationMode::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR
ClusterBase::WriteAttribute<chip::app::Clusters::PumpConfigurationAndControl::Attributes::ControlMode::TypeInfo>(
    const chip::app::Clusters::PumpConfigurationAndControl::Attributes::ControlMode::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// RelativeHumidityMeasurement Cluster Attributes

// Scenes Cluster Attributes

// SoftwareDiagnostics Cluster Attributes

// Switch Cluster Attributes

// TvChannel Cluster Attributes

// TargetNavigator Cluster Attributes

// TemperatureMeasurement Cluster Attributes

// TestCluster Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Boolean::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Boolean::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Bitmap8::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Bitmap8::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Bitmap16::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Bitmap16::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Bitmap32::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Bitmap32::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Bitmap64::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Bitmap64::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Int8u::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Int8u::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Int16u::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Int16u::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Int32u::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Int32u::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Int64u::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Int64u::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Int8s::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Int8s::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Int16s::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Int16s::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Int32s::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Int32s::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Int64s::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Int64s::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Enum8::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Enum8::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Enum16::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Enum16::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::OctetString::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::OctetString::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::LongOctetString::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::LongOctetString::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::CharString::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::CharString::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::LongCharString::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::LongCharString::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::EpochUs::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::EpochUs::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::EpochS::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::EpochS::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::VendorId::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::VendorId::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::TestCluster::Attributes::Unsupported::TypeInfo>(
    const chip::app::Clusters::TestCluster::Attributes::Unsupported::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// Thermostat Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Thermostat::Attributes::OccupiedCoolingSetpoint::TypeInfo>(
    const chip::app::Clusters::Thermostat::Attributes::OccupiedCoolingSetpoint::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Thermostat::Attributes::OccupiedHeatingSetpoint::TypeInfo>(
    const chip::app::Clusters::Thermostat::Attributes::OccupiedHeatingSetpoint::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Thermostat::Attributes::MinHeatSetpointLimit::TypeInfo>(
    const chip::app::Clusters::Thermostat::Attributes::MinHeatSetpointLimit::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Thermostat::Attributes::MaxHeatSetpointLimit::TypeInfo>(
    const chip::app::Clusters::Thermostat::Attributes::MaxHeatSetpointLimit::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Thermostat::Attributes::MinCoolSetpointLimit::TypeInfo>(
    const chip::app::Clusters::Thermostat::Attributes::MinCoolSetpointLimit::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Thermostat::Attributes::MaxCoolSetpointLimit::TypeInfo>(
    const chip::app::Clusters::Thermostat::Attributes::MaxCoolSetpointLimit::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Thermostat::Attributes::MinSetpointDeadBand::TypeInfo>(
    const chip::app::Clusters::Thermostat::Attributes::MinSetpointDeadBand::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Thermostat::Attributes::ControlSequenceOfOperation::TypeInfo>(
    const chip::app::Clusters::Thermostat::Attributes::ControlSequenceOfOperation::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::Thermostat::Attributes::SystemMode::TypeInfo>(
    const chip::app::Clusters::Thermostat::Attributes::SystemMode::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// ThermostatUserInterfaceConfiguration Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<
    chip::app::Clusters::ThermostatUserInterfaceConfiguration::Attributes::TemperatureDisplayMode::TypeInfo>(
    const chip::app::Clusters::ThermostatUserInterfaceConfiguration::Attributes::TemperatureDisplayMode::TypeInfo::Type &
        requestData,
    void * context, WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR
ClusterBase::WriteAttribute<chip::app::Clusters::ThermostatUserInterfaceConfiguration::Attributes::KeypadLockout::TypeInfo>(
    const chip::app::Clusters::ThermostatUserInterfaceConfiguration::Attributes::KeypadLockout::TypeInfo::Type & requestData,
    void * context, WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template CHIP_ERROR ClusterBase::WriteAttribute<
    chip::app::Clusters::ThermostatUserInterfaceConfiguration::Attributes::ScheduleProgrammingVisibility::TypeInfo>(
    const chip::app::Clusters::ThermostatUserInterfaceConfiguration::Attributes::ScheduleProgrammingVisibility::TypeInfo::Type &
        requestData,
    void * context, WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

// ThreadNetworkDiagnostics Cluster Attributes

// WakeOnLan Cluster Attributes

// WiFiNetworkDiagnostics Cluster Attributes

// WindowCovering Cluster Attributes

template CHIP_ERROR ClusterBase::WriteAttribute<chip::app::Clusters::WindowCovering::Attributes::Mode::TypeInfo>(
    const chip::app::Clusters::WindowCovering::Attributes::Mode::TypeInfo::Type & requestData, void * context,
    WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb);

template <typename AttributeInfo>
CHIP_ERROR ClusterBase::WriteAttribute(const typename AttributeInfo::Type & requestData, void * context,
                                       WriteResponseSuccessCallback successCb, WriteResponseFailureCallback failureCb)
{
    VerifyOrReturnError(mDevice != nullptr, CHIP_ERROR_INCORRECT_STATE);

    auto onSuccessCb = [context, successCb](const app::ConcreteAttributePath & commandPath) {
        if (successCb != nullptr)
        {
            successCb(context);
        }
    };

    auto onFailureCb = [context, failureCb](const app::ConcreteAttributePath * commandPath, app::StatusIB status,
                                            CHIP_ERROR aError) {
        if (failureCb != nullptr)
        {
            failureCb(context, app::ToEmberAfStatus(status.mStatus));
        }
    };

    return chip::Controller::WriteAttribute<AttributeInfo>(mDevice->GetExchangeManager(), mDevice->GetSecureSession().Value(),
                                                           mEndpoint, requestData, onSuccessCb, onFailureCb);
}

} // namespace Controller
} // namespace chip
