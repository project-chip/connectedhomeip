/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include "CHIPClusters.h"

#include <app-common/zap-generated/cluster-objects.h>
#include <app-common/zap-generated/ids/Attributes.h>

namespace chip {

using namespace app::Clusters;
using namespace System;
using namespace Encoding::LittleEndian;

namespace Controller {

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::AccountLogin::Commands::GetSetupPIN::Type>(
    const chip::app::Clusters::AccountLogin::Commands::GetSetupPIN::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::AccountLogin::Commands::GetSetupPIN::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::AccountLogin::Commands::Login::Type>(
    const chip::app::Clusters::AccountLogin::Commands::Login::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::AccountLogin::Commands::Login::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR
ClusterBase::InvokeCommand<chip::app::Clusters::AdministratorCommissioning::Commands::OpenBasicCommissioningWindow::Type>(
    const chip::app::Clusters::AdministratorCommissioning::Commands::OpenBasicCommissioningWindow::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::AdministratorCommissioning::Commands::OpenBasicCommissioningWindow::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR
ClusterBase::InvokeCommand<chip::app::Clusters::AdministratorCommissioning::Commands::OpenCommissioningWindow::Type>(
    const chip::app::Clusters::AdministratorCommissioning::Commands::OpenCommissioningWindow::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::AdministratorCommissioning::Commands::OpenCommissioningWindow::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR
ClusterBase::InvokeCommand<chip::app::Clusters::AdministratorCommissioning::Commands::RevokeCommissioning::Type>(
    const chip::app::Clusters::AdministratorCommissioning::Commands::RevokeCommissioning::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::AdministratorCommissioning::Commands::RevokeCommissioning::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ApplicationBasic::Commands::ChangeStatus::Type>(
    const chip::app::Clusters::ApplicationBasic::Commands::ChangeStatus::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ApplicationBasic::Commands::ChangeStatus::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ApplicationLauncher::Commands::LaunchApp::Type>(
    const chip::app::Clusters::ApplicationLauncher::Commands::LaunchApp::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ApplicationLauncher::Commands::LaunchApp::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::AudioOutput::Commands::RenameOutput::Type>(
    const chip::app::Clusters::AudioOutput::Commands::RenameOutput::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::AudioOutput::Commands::RenameOutput::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::AudioOutput::Commands::SelectOutput::Type>(
    const chip::app::Clusters::AudioOutput::Commands::SelectOutput::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::AudioOutput::Commands::SelectOutput::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BarrierControl::Commands::BarrierControlGoToPercent::Type>(
    const chip::app::Clusters::BarrierControl::Commands::BarrierControlGoToPercent::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::BarrierControl::Commands::BarrierControlGoToPercent::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BarrierControl::Commands::BarrierControlStop::Type>(
    const chip::app::Clusters::BarrierControl::Commands::BarrierControlStop::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::BarrierControl::Commands::BarrierControlStop::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Basic::Commands::MfgSpecificPing::Type>(
    const chip::app::Clusters::Basic::Commands::MfgSpecificPing::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Basic::Commands::MfgSpecificPing::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Binding::Commands::Bind::Type>(
    const chip::app::Clusters::Binding::Commands::Bind::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Binding::Commands::Bind::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Binding::Commands::Unbind::Type>(
    const chip::app::Clusters::Binding::Commands::Unbind::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Binding::Commands::Unbind::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::DisableAction::Type>(
    const chip::app::Clusters::BridgedActions::Commands::DisableAction::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::BridgedActions::Commands::DisableAction::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::DisableActionWithDuration::Type>(
    const chip::app::Clusters::BridgedActions::Commands::DisableActionWithDuration::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::BridgedActions::Commands::DisableActionWithDuration::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::EnableAction::Type>(
    const chip::app::Clusters::BridgedActions::Commands::EnableAction::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::BridgedActions::Commands::EnableAction::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::EnableActionWithDuration::Type>(
    const chip::app::Clusters::BridgedActions::Commands::EnableActionWithDuration::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::BridgedActions::Commands::EnableActionWithDuration::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::InstantAction::Type>(
    const chip::app::Clusters::BridgedActions::Commands::InstantAction::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::BridgedActions::Commands::InstantAction::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::InstantActionWithTransition::Type>(
    const chip::app::Clusters::BridgedActions::Commands::InstantActionWithTransition::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::BridgedActions::Commands::InstantActionWithTransition::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::PauseAction::Type>(
    const chip::app::Clusters::BridgedActions::Commands::PauseAction::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::BridgedActions::Commands::PauseAction::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::PauseActionWithDuration::Type>(
    const chip::app::Clusters::BridgedActions::Commands::PauseActionWithDuration::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::BridgedActions::Commands::PauseActionWithDuration::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::ResumeAction::Type>(
    const chip::app::Clusters::BridgedActions::Commands::ResumeAction::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::BridgedActions::Commands::ResumeAction::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::StartAction::Type>(
    const chip::app::Clusters::BridgedActions::Commands::StartAction::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::BridgedActions::Commands::StartAction::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::StartActionWithDuration::Type>(
    const chip::app::Clusters::BridgedActions::Commands::StartActionWithDuration::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::BridgedActions::Commands::StartActionWithDuration::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::BridgedActions::Commands::StopAction::Type>(
    const chip::app::Clusters::BridgedActions::Commands::StopAction::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::BridgedActions::Commands::StopAction::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::ColorLoopSet::Type>(
    const chip::app::Clusters::ColorControl::Commands::ColorLoopSet::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::ColorLoopSet::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::EnhancedMoveHue::Type>(
    const chip::app::Clusters::ColorControl::Commands::EnhancedMoveHue::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::EnhancedMoveHue::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHue::Type>(
    const chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHue::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHue::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHueAndSaturation::Type>(
    const chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHueAndSaturation::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHueAndSaturation::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::EnhancedStepHue::Type>(
    const chip::app::Clusters::ColorControl::Commands::EnhancedStepHue::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::EnhancedStepHue::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::MoveColor::Type>(
    const chip::app::Clusters::ColorControl::Commands::MoveColor::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::MoveColor::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::MoveColorTemperature::Type>(
    const chip::app::Clusters::ColorControl::Commands::MoveColorTemperature::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::MoveColorTemperature::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::MoveHue::Type>(
    const chip::app::Clusters::ColorControl::Commands::MoveHue::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::MoveHue::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::MoveSaturation::Type>(
    const chip::app::Clusters::ColorControl::Commands::MoveSaturation::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::MoveSaturation::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::MoveToColor::Type>(
    const chip::app::Clusters::ColorControl::Commands::MoveToColor::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::MoveToColor::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::MoveToColorTemperature::Type>(
    const chip::app::Clusters::ColorControl::Commands::MoveToColorTemperature::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::ColorControl::Commands::MoveToColorTemperature::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::MoveToHue::Type>(
    const chip::app::Clusters::ColorControl::Commands::MoveToHue::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::MoveToHue::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::MoveToHueAndSaturation::Type>(
    const chip::app::Clusters::ColorControl::Commands::MoveToHueAndSaturation::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::ColorControl::Commands::MoveToHueAndSaturation::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::MoveToSaturation::Type>(
    const chip::app::Clusters::ColorControl::Commands::MoveToSaturation::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::MoveToSaturation::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::StepColor::Type>(
    const chip::app::Clusters::ColorControl::Commands::StepColor::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::StepColor::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::StepColorTemperature::Type>(
    const chip::app::Clusters::ColorControl::Commands::StepColorTemperature::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::StepColorTemperature::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::StepHue::Type>(
    const chip::app::Clusters::ColorControl::Commands::StepHue::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::StepHue::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::StepSaturation::Type>(
    const chip::app::Clusters::ColorControl::Commands::StepSaturation::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::StepSaturation::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ColorControl::Commands::StopMoveStep::Type>(
    const chip::app::Clusters::ColorControl::Commands::StopMoveStep::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ColorControl::Commands::StopMoveStep::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ContentLauncher::Commands::LaunchContent::Type>(
    const chip::app::Clusters::ContentLauncher::Commands::LaunchContent::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ContentLauncher::Commands::LaunchContent::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ContentLauncher::Commands::LaunchURL::Type>(
    const chip::app::Clusters::ContentLauncher::Commands::LaunchURL::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ContentLauncher::Commands::LaunchURL::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsRequest::Type>(
    const chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsRequest::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::ClearAllPins::Type>(
    const chip::app::Clusters::DoorLock::Commands::ClearAllPins::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::ClearAllPins::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::ClearAllRfids::Type>(
    const chip::app::Clusters::DoorLock::Commands::ClearAllRfids::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::ClearAllRfids::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::ClearHolidaySchedule::Type>(
    const chip::app::Clusters::DoorLock::Commands::ClearHolidaySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::ClearHolidaySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::ClearPin::Type>(
    const chip::app::Clusters::DoorLock::Commands::ClearPin::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::ClearPin::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::ClearRfid::Type>(
    const chip::app::Clusters::DoorLock::Commands::ClearRfid::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::ClearRfid::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::ClearWeekdaySchedule::Type>(
    const chip::app::Clusters::DoorLock::Commands::ClearWeekdaySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::ClearWeekdaySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::ClearYeardaySchedule::Type>(
    const chip::app::Clusters::DoorLock::Commands::ClearYeardaySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::ClearYeardaySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::GetHolidaySchedule::Type>(
    const chip::app::Clusters::DoorLock::Commands::GetHolidaySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::GetHolidaySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::GetLogRecord::Type>(
    const chip::app::Clusters::DoorLock::Commands::GetLogRecord::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::GetLogRecord::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::GetPin::Type>(
    const chip::app::Clusters::DoorLock::Commands::GetPin::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::GetPin::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::GetRfid::Type>(
    const chip::app::Clusters::DoorLock::Commands::GetRfid::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::GetRfid::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::GetUserType::Type>(
    const chip::app::Clusters::DoorLock::Commands::GetUserType::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::GetUserType::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::GetWeekdaySchedule::Type>(
    const chip::app::Clusters::DoorLock::Commands::GetWeekdaySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::GetWeekdaySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::GetYeardaySchedule::Type>(
    const chip::app::Clusters::DoorLock::Commands::GetYeardaySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::GetYeardaySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::LockDoor::Type>(
    const chip::app::Clusters::DoorLock::Commands::LockDoor::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::LockDoor::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::SetHolidaySchedule::Type>(
    const chip::app::Clusters::DoorLock::Commands::SetHolidaySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::SetHolidaySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::SetPin::Type>(
    const chip::app::Clusters::DoorLock::Commands::SetPin::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::SetPin::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::SetRfid::Type>(
    const chip::app::Clusters::DoorLock::Commands::SetRfid::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::SetRfid::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::SetUserType::Type>(
    const chip::app::Clusters::DoorLock::Commands::SetUserType::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::SetUserType::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::SetWeekdaySchedule::Type>(
    const chip::app::Clusters::DoorLock::Commands::SetWeekdaySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::SetWeekdaySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::SetYeardaySchedule::Type>(
    const chip::app::Clusters::DoorLock::Commands::SetYeardaySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::SetYeardaySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::UnlockDoor::Type>(
    const chip::app::Clusters::DoorLock::Commands::UnlockDoor::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::UnlockDoor::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::DoorLock::Commands::UnlockWithTimeout::Type>(
    const chip::app::Clusters::DoorLock::Commands::UnlockWithTimeout::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::DoorLock::Commands::UnlockWithTimeout::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::EthernetNetworkDiagnostics::Commands::ResetCounts::Type>(
    const chip::app::Clusters::EthernetNetworkDiagnostics::Commands::ResetCounts::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::EthernetNetworkDiagnostics::Commands::ResetCounts::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafe::Type>(
    const chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafe::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafe::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::GeneralCommissioning::Commands::CommissioningComplete::Type>(
    const chip::app::Clusters::GeneralCommissioning::Commands::CommissioningComplete::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::GeneralCommissioning::Commands::CommissioningComplete::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfig::Type>(
    const chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfig::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfig::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Groups::Commands::AddGroup::Type>(
    const chip::app::Clusters::Groups::Commands::AddGroup::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Groups::Commands::AddGroup::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Groups::Commands::AddGroupIfIdentifying::Type>(
    const chip::app::Clusters::Groups::Commands::AddGroupIfIdentifying::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Groups::Commands::AddGroupIfIdentifying::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Groups::Commands::GetGroupMembership::Type>(
    const chip::app::Clusters::Groups::Commands::GetGroupMembership::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Groups::Commands::GetGroupMembership::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Groups::Commands::RemoveAllGroups::Type>(
    const chip::app::Clusters::Groups::Commands::RemoveAllGroups::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Groups::Commands::RemoveAllGroups::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Groups::Commands::RemoveGroup::Type>(
    const chip::app::Clusters::Groups::Commands::RemoveGroup::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Groups::Commands::RemoveGroup::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Groups::Commands::ViewGroup::Type>(
    const chip::app::Clusters::Groups::Commands::ViewGroup::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Groups::Commands::ViewGroup::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Identify::Commands::Identify::Type>(
    const chip::app::Clusters::Identify::Commands::Identify::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Identify::Commands::Identify::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Identify::Commands::IdentifyQuery::Type>(
    const chip::app::Clusters::Identify::Commands::IdentifyQuery::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Identify::Commands::IdentifyQuery::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Identify::Commands::TriggerEffect::Type>(
    const chip::app::Clusters::Identify::Commands::TriggerEffect::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Identify::Commands::TriggerEffect::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::KeypadInput::Commands::SendKey::Type>(
    const chip::app::Clusters::KeypadInput::Commands::SendKey::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::KeypadInput::Commands::SendKey::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::LevelControl::Commands::Move::Type>(
    const chip::app::Clusters::LevelControl::Commands::Move::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::LevelControl::Commands::Move::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::LevelControl::Commands::MoveToLevel::Type>(
    const chip::app::Clusters::LevelControl::Commands::MoveToLevel::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::LevelControl::Commands::MoveToLevel::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::LevelControl::Commands::MoveToLevelWithOnOff::Type>(
    const chip::app::Clusters::LevelControl::Commands::MoveToLevelWithOnOff::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::LevelControl::Commands::MoveToLevelWithOnOff::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::LevelControl::Commands::MoveWithOnOff::Type>(
    const chip::app::Clusters::LevelControl::Commands::MoveWithOnOff::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::LevelControl::Commands::MoveWithOnOff::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::LevelControl::Commands::Step::Type>(
    const chip::app::Clusters::LevelControl::Commands::Step::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::LevelControl::Commands::Step::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::LevelControl::Commands::StepWithOnOff::Type>(
    const chip::app::Clusters::LevelControl::Commands::StepWithOnOff::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::LevelControl::Commands::StepWithOnOff::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::LevelControl::Commands::Stop::Type>(
    const chip::app::Clusters::LevelControl::Commands::Stop::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::LevelControl::Commands::Stop::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::LevelControl::Commands::StopWithOnOff::Type>(
    const chip::app::Clusters::LevelControl::Commands::StopWithOnOff::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::LevelControl::Commands::StopWithOnOff::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::LowPower::Commands::Sleep::Type>(
    const chip::app::Clusters::LowPower::Commands::Sleep::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::LowPower::Commands::Sleep::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaInput::Commands::HideInputStatus::Type>(
    const chip::app::Clusters::MediaInput::Commands::HideInputStatus::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaInput::Commands::HideInputStatus::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaInput::Commands::RenameInput::Type>(
    const chip::app::Clusters::MediaInput::Commands::RenameInput::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaInput::Commands::RenameInput::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaInput::Commands::SelectInput::Type>(
    const chip::app::Clusters::MediaInput::Commands::SelectInput::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaInput::Commands::SelectInput::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaInput::Commands::ShowInputStatus::Type>(
    const chip::app::Clusters::MediaInput::Commands::ShowInputStatus::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaInput::Commands::ShowInputStatus::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaFastForward::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaFastForward::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaFastForward::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaNext::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaNext::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaNext::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaPause::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaPause::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaPause::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaPlay::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaPlay::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaPlay::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaPrevious::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaPrevious::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaPrevious::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaRewind::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaRewind::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaRewind::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaSeek::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaSeek::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaSeek::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaSkipBackward::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaSkipBackward::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaSkipBackward::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaSkipForward::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaSkipForward::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaSkipForward::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaStartOver::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaStartOver::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaStartOver::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::MediaPlayback::Commands::MediaStop::Type>(
    const chip::app::Clusters::MediaPlayback::Commands::MediaStop::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::MediaPlayback::Commands::MediaStop::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ModeSelect::Commands::ChangeToMode::Type>(
    const chip::app::Clusters::ModeSelect::Commands::ChangeToMode::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::ModeSelect::Commands::ChangeToMode::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::AddThreadNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::AddThreadNetwork::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::NetworkCommissioning::Commands::AddThreadNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::AddWiFiNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::AddWiFiNetwork::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::NetworkCommissioning::Commands::AddWiFiNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::DisableNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::DisableNetwork::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::NetworkCommissioning::Commands::DisableNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::EnableNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::EnableNetwork::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::NetworkCommissioning::Commands::EnableNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetwork::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworks::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworks::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworks::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::UpdateThreadNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::UpdateThreadNetwork::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::NetworkCommissioning::Commands::UpdateThreadNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::NetworkCommissioning::Commands::UpdateWiFiNetwork::Type>(
    const chip::app::Clusters::NetworkCommissioning::Commands::UpdateWiFiNetwork::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::NetworkCommissioning::Commands::UpdateWiFiNetwork::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateRequest::Type>(
    const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::NotifyUpdateApplied::Type>(
    const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::NotifyUpdateApplied::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::NotifyUpdateApplied::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImage::Type>(
    const chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImage::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImage::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR
ClusterBase::InvokeCommand<chip::app::Clusters::OtaSoftwareUpdateRequestor::Commands::AnnounceOtaProvider::Type>(
    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Commands::AnnounceOtaProvider::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OtaSoftwareUpdateRequestor::Commands::AnnounceOtaProvider::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OnOff::Commands::Off::Type>(
    const chip::app::Clusters::OnOff::Commands::Off::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::OnOff::Commands::Off::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OnOff::Commands::OffWithEffect::Type>(
    const chip::app::Clusters::OnOff::Commands::OffWithEffect::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::OnOff::Commands::OffWithEffect::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OnOff::Commands::On::Type>(
    const chip::app::Clusters::OnOff::Commands::On::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::OnOff::Commands::On::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OnOff::Commands::OnWithRecallGlobalScene::Type>(
    const chip::app::Clusters::OnOff::Commands::OnWithRecallGlobalScene::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::OnOff::Commands::OnWithRecallGlobalScene::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OnOff::Commands::OnWithTimedOff::Type>(
    const chip::app::Clusters::OnOff::Commands::OnWithTimedOff::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::OnOff::Commands::OnWithTimedOff::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OnOff::Commands::Toggle::Type>(
    const chip::app::Clusters::OnOff::Commands::Toggle::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::OnOff::Commands::Toggle::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::AddNOC::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::AddNOC::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::OperationalCredentials::Commands::AddNOC::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR
ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::AddTrustedRootCertificate::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::AddTrustedRootCertificate::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::AddTrustedRootCertificate::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::AttestationRequest::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::AttestationRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::AttestationRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR
ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::CertificateChainRequest::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::CertificateChainRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::CertificateChainRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::OpCSRRequest::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::OpCSRRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::OpCSRRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::RemoveFabric::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::RemoveFabric::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::RemoveFabric::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR
ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::RemoveTrustedRootCertificate::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::RemoveTrustedRootCertificate::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::RemoveTrustedRootCertificate::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::UpdateFabricLabel::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::UpdateFabricLabel::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::OperationalCredentials::Commands::UpdateFabricLabel::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::OperationalCredentials::Commands::UpdateNOC::Type>(
    const chip::app::Clusters::OperationalCredentials::Commands::UpdateNOC::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::OperationalCredentials::Commands::UpdateNOC::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Scenes::Commands::AddScene::Type>(
    const chip::app::Clusters::Scenes::Commands::AddScene::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Scenes::Commands::AddScene::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Scenes::Commands::GetSceneMembership::Type>(
    const chip::app::Clusters::Scenes::Commands::GetSceneMembership::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Scenes::Commands::GetSceneMembership::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Scenes::Commands::RecallScene::Type>(
    const chip::app::Clusters::Scenes::Commands::RecallScene::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Scenes::Commands::RecallScene::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Scenes::Commands::RemoveAllScenes::Type>(
    const chip::app::Clusters::Scenes::Commands::RemoveAllScenes::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Scenes::Commands::RemoveAllScenes::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Scenes::Commands::RemoveScene::Type>(
    const chip::app::Clusters::Scenes::Commands::RemoveScene::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Scenes::Commands::RemoveScene::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Scenes::Commands::StoreScene::Type>(
    const chip::app::Clusters::Scenes::Commands::StoreScene::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Scenes::Commands::StoreScene::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Scenes::Commands::ViewScene::Type>(
    const chip::app::Clusters::Scenes::Commands::ViewScene::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Scenes::Commands::ViewScene::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::SoftwareDiagnostics::Commands::ResetWatermarks::Type>(
    const chip::app::Clusters::SoftwareDiagnostics::Commands::ResetWatermarks::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::SoftwareDiagnostics::Commands::ResetWatermarks::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TvChannel::Commands::ChangeChannel::Type>(
    const chip::app::Clusters::TvChannel::Commands::ChangeChannel::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TvChannel::Commands::ChangeChannel::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TvChannel::Commands::ChangeChannelByNumber::Type>(
    const chip::app::Clusters::TvChannel::Commands::ChangeChannelByNumber::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TvChannel::Commands::ChangeChannelByNumber::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TvChannel::Commands::SkipChannel::Type>(
    const chip::app::Clusters::TvChannel::Commands::SkipChannel::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TvChannel::Commands::SkipChannel::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TargetNavigator::Commands::NavigateTarget::Type>(
    const chip::app::Clusters::TargetNavigator::Commands::NavigateTarget::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TargetNavigator::Commands::NavigateTarget::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::Test::Type>(
    const chip::app::Clusters::TestCluster::Commands::Test::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TestCluster::Commands::Test::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestAddArguments::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestAddArguments::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TestCluster::Commands::TestAddArguments::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestEnumsRequest::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestEnumsRequest::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TestCluster::Commands::TestEnumsRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestListInt8UArgumentRequest::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestListInt8UArgumentRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::TestCluster::Commands::TestListInt8UArgumentRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestListInt8UReverseRequest::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestListInt8UReverseRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::TestCluster::Commands::TestListInt8UReverseRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestListStructArgumentRequest::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestListStructArgumentRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::TestCluster::Commands::TestListStructArgumentRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestNotHandled::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestNotHandled::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TestCluster::Commands::TestNotHandled::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestNullableOptionalRequest::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestNullableOptionalRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::TestCluster::Commands::TestNullableOptionalRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestSpecific::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestSpecific::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TestCluster::Commands::TestSpecific::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestStructArgumentRequest::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestStructArgumentRequest::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::TestCluster::Commands::TestStructArgumentRequest::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::TestCluster::Commands::TestUnknownCommand::Type>(
    const chip::app::Clusters::TestCluster::Commands::TestUnknownCommand::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::TestCluster::Commands::TestUnknownCommand::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Thermostat::Commands::ClearWeeklySchedule::Type>(
    const chip::app::Clusters::Thermostat::Commands::ClearWeeklySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Thermostat::Commands::ClearWeeklySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Thermostat::Commands::GetRelayStatusLog::Type>(
    const chip::app::Clusters::Thermostat::Commands::GetRelayStatusLog::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Thermostat::Commands::GetRelayStatusLog::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Thermostat::Commands::GetWeeklySchedule::Type>(
    const chip::app::Clusters::Thermostat::Commands::GetWeeklySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Thermostat::Commands::GetWeeklySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Thermostat::Commands::SetWeeklySchedule::Type>(
    const chip::app::Clusters::Thermostat::Commands::SetWeeklySchedule::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Thermostat::Commands::SetWeeklySchedule::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::Thermostat::Commands::SetpointRaiseLower::Type>(
    const chip::app::Clusters::Thermostat::Commands::SetpointRaiseLower::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::Thermostat::Commands::SetpointRaiseLower::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::ThreadNetworkDiagnostics::Commands::ResetCounts::Type>(
    const chip::app::Clusters::ThreadNetworkDiagnostics::Commands::ResetCounts::Type &, void *,
    CommandResponseSuccessCallback<
        typename chip::app::Clusters::ThreadNetworkDiagnostics::Commands::ResetCounts::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::WiFiNetworkDiagnostics::Commands::ResetCounts::Type>(
    const chip::app::Clusters::WiFiNetworkDiagnostics::Commands::ResetCounts::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::WiFiNetworkDiagnostics::Commands::ResetCounts::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::WindowCovering::Commands::DownOrClose::Type>(
    const chip::app::Clusters::WindowCovering::Commands::DownOrClose::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::WindowCovering::Commands::DownOrClose::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::WindowCovering::Commands::GoToLiftPercentage::Type>(
    const chip::app::Clusters::WindowCovering::Commands::GoToLiftPercentage::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::WindowCovering::Commands::GoToLiftPercentage::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::WindowCovering::Commands::GoToLiftValue::Type>(
    const chip::app::Clusters::WindowCovering::Commands::GoToLiftValue::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::WindowCovering::Commands::GoToLiftValue::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::WindowCovering::Commands::GoToTiltPercentage::Type>(
    const chip::app::Clusters::WindowCovering::Commands::GoToTiltPercentage::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::WindowCovering::Commands::GoToTiltPercentage::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::WindowCovering::Commands::GoToTiltValue::Type>(
    const chip::app::Clusters::WindowCovering::Commands::GoToTiltValue::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::WindowCovering::Commands::GoToTiltValue::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::WindowCovering::Commands::StopMotion::Type>(
    const chip::app::Clusters::WindowCovering::Commands::StopMotion::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::WindowCovering::Commands::StopMotion::Type::ResponseType>,
    CommandResponseFailureCallback);

template CHIP_ERROR ClusterBase::InvokeCommand<chip::app::Clusters::WindowCovering::Commands::UpOrOpen::Type>(
    const chip::app::Clusters::WindowCovering::Commands::UpOrOpen::Type &, void *,
    CommandResponseSuccessCallback<typename chip::app::Clusters::WindowCovering::Commands::UpOrOpen::Type::ResponseType>,
    CommandResponseFailureCallback);

template <typename RequestDataT>
CHIP_ERROR ClusterBase::InvokeCommand(const RequestDataT & requestData, void * context,
                                      CommandResponseSuccessCallback<typename RequestDataT::ResponseType> successCb,
                                      CommandResponseFailureCallback failureCb)
{
    VerifyOrReturnError(mDevice != nullptr, CHIP_ERROR_INCORRECT_STATE);

    auto onSuccessCb = [context, successCb](const app::ConcreteCommandPath & commandPath, const app::StatusIB & aStatus,
                                            const typename RequestDataT::ResponseType & responseData) {
        successCb(context, responseData);
    };

    auto onFailureCb = [context, failureCb](const app::StatusIB & aStatus, CHIP_ERROR aError) {
        failureCb(context, app::ToEmberAfStatus(aStatus.mStatus));
    };

    return InvokeCommandRequest(mDevice->GetExchangeManager(), mDevice->GetSecureSession().Value(), mEndpoint, requestData,
                                onSuccessCb, onFailureCb);
};

} // namespace Controller
} // namespace chip
