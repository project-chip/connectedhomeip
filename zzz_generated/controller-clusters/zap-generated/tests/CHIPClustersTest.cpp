/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <zap-generated/tests/CHIPClustersTest.h>

#include <app/InteractionModelEngine.h>
#include <app/util/basic-types.h>

#include <app-common/zap-generated/cluster-objects.h>
#include <app-common/zap-generated/ids/Attributes.h>
#include <zap-generated/CHIPClientCallbacks.h>

using namespace chip::app::Clusters;
using namespace chip::System;
using namespace chip::Encoding::LittleEndian;

namespace chip {
namespace Controller {

CHIP_ERROR AccountLoginClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::AccountLogin::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::AccountLogin::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR AdministratorCommissioningClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::AdministratorCommissioning::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::AdministratorCommissioning::Attributes::ClusterRevision::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeVendorName(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::VendorName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::VendorName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeVendorId(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::VendorId::TypeInfo>(value, onSuccess->mContext,
                                                                                               onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::VendorId::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeApplicationName(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ApplicationName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ApplicationName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeProductId(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ProductId::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ProductId::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeApplicationId(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ApplicationId::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ApplicationId::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeCatalogVendorId(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::CatalogVendorId::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::CatalogVendorId::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeApplicationStatus(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ApplicationStatus::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ApplicationStatus::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationBasic::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR ApplicationLauncherClusterTest::WriteAttributeCatalogVendorId(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ApplicationLauncher::Attributes::CatalogVendorId::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationLauncher::Attributes::CatalogVendorId::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR ApplicationLauncherClusterTest::WriteAttributeApplicationId(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ApplicationLauncher::Attributes::ApplicationId::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationLauncher::Attributes::ApplicationId::TypeInfo>(value, nullptr, nullptr,
                                                                                                       nullptr);
    }
}

CHIP_ERROR ApplicationLauncherClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ApplicationLauncher::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ApplicationLauncher::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR AudioOutputClusterTest::WriteAttributeCurrentAudioOutput(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::AudioOutput::Attributes::CurrentAudioOutput::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::AudioOutput::Attributes::CurrentAudioOutput::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR AudioOutputClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::AudioOutput::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::AudioOutput::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeBarrierMovingState(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::BarrierMovingState::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::BarrierMovingState::TypeInfo>(value, nullptr, nullptr,
                                                                                                       nullptr);
    }
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeBarrierSafetyStatus(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap16
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::BarrierSafetyStatus::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::BarrierSafetyStatus::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeBarrierCapabilities(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap8
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::BarrierCapabilities::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::BarrierCapabilities::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeBarrierPosition(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::BarrierPosition::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::BarrierPosition::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BarrierControl::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeInteractionModelVersion(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Basic::Attributes::InteractionModelVersion::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::InteractionModelVersion::TypeInfo>(value, nullptr, nullptr,
                                                                                                   nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeVendorName(Callback::Cancelable * onSuccessCallback,
                                                      Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::Basic::Attributes::VendorName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::VendorName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeVendorID(Callback::Cancelable * onSuccessCallback,
                                                    Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Basic::Attributes::VendorID::TypeInfo>(value, onSuccess->mContext, onSuccess->mCall,
                                                                                    onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::VendorID::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeProductName(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::Basic::Attributes::ProductName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::ProductName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeProductID(Callback::Cancelable * onSuccessCallback,
                                                     Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Basic::Attributes::ProductID::TypeInfo>(value, onSuccess->mContext, onSuccess->mCall,
                                                                                     onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::ProductID::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeHardwareVersion(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Basic::Attributes::HardwareVersion::TypeInfo>(value, onSuccess->mContext,
                                                                                           onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::HardwareVersion::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeHardwareVersionString(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::Basic::Attributes::HardwareVersionString::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::HardwareVersionString::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeSoftwareVersion(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::Basic::Attributes::SoftwareVersion::TypeInfo>(value, onSuccess->mContext,
                                                                                           onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::SoftwareVersion::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeSoftwareVersionString(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::Basic::Attributes::SoftwareVersionString::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::SoftwareVersionString::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeManufacturingDate(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::Basic::Attributes::ManufacturingDate::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::ManufacturingDate::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributePartNumber(Callback::Cancelable * onSuccessCallback,
                                                      Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::Basic::Attributes::PartNumber::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::PartNumber::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeProductURL(Callback::Cancelable * onSuccessCallback,
                                                      Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::Basic::Attributes::ProductURL::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::ProductURL::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeProductLabel(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::Basic::Attributes::ProductLabel::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::ProductLabel::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeSerialNumber(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::Basic::Attributes::SerialNumber::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::SerialNumber::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeReachable(Callback::Cancelable * onSuccessCallback,
                                                     Callback::Cancelable * onFailureCallback, bool value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: boolean
        return WriteAttribute<app::Clusters::Basic::Attributes::Reachable::TypeInfo>(value, onSuccess->mContext, onSuccess->mCall,
                                                                                     onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::Reachable::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BasicClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Basic::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                           onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Basic::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BinaryInputBasicClusterTest::WriteAttributeStatusFlags(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap8
        return WriteAttribute<app::Clusters::BinaryInputBasic::Attributes::StatusFlags::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BinaryInputBasic::Attributes::StatusFlags::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BinaryInputBasicClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::BinaryInputBasic::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BinaryInputBasic::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR BindingClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Binding::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                             onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Binding::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeVendorName(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::VendorName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::VendorName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeVendorID(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::VendorID::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::VendorID::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeProductName(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ProductName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ProductName::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeHardwareVersion(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::HardwareVersion::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::HardwareVersion::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeHardwareVersionString(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::HardwareVersionString::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::HardwareVersionString::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeSoftwareVersion(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::SoftwareVersion::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::SoftwareVersion::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeSoftwareVersionString(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::SoftwareVersionString::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::SoftwareVersionString::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeManufacturingDate(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ManufacturingDate::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ManufacturingDate::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributePartNumber(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::PartNumber::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::PartNumber::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeProductURL(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ProductURL::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ProductURL::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeProductLabel(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ProductLabel::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ProductLabel::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeSerialNumber(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::SerialNumber::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::SerialNumber::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeReachable(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, bool value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: boolean
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::Reachable::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::Reachable::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::BridgedDeviceBasic::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCurrentHue(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CurrentHue::TypeInfo>(value, onSuccess->mContext,
                                                                                             onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CurrentHue::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCurrentSaturation(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CurrentSaturation::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CurrentSaturation::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeRemainingTime(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::RemainingTime::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::RemainingTime::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCurrentX(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CurrentX::TypeInfo>(value, onSuccess->mContext,
                                                                                           onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CurrentX::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCurrentY(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CurrentY::TypeInfo>(value, onSuccess->mContext,
                                                                                           onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CurrentY::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeDriftCompensation(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::ColorControl::Attributes::DriftCompensation::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::DriftCompensation::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCompensationText(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CompensationText::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CompensationText::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorTemperature(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorTemperature::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorTemperature::TypeInfo>(value, nullptr, nullptr,
                                                                                                   nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorMode(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorMode::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorMode::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeNumberOfPrimaries(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::NumberOfPrimaries::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::NumberOfPrimaries::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary1X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary1X::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary1X::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary1Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary1Y::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary1Y::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary1Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary1Intensity::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary1Intensity::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary2X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary2X::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary2X::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary2Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary2Y::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary2Y::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary2Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary2Intensity::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary2Intensity::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary3X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary3X::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary3X::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary3Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary3Y::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary3Y::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary3Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary3Intensity::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary3Intensity::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary4X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary4X::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary4X::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary4Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary4Y::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary4Y::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary4Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary4Intensity::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary4Intensity::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary5X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary5X::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary5X::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary5Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary5Y::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary5Y::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary5Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary5Intensity::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary5Intensity::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary6X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary6X::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary6X::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary6Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary6Y::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary6Y::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary6Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary6Intensity::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::Primary6Intensity::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeEnhancedCurrentHue(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::EnhancedCurrentHue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::EnhancedCurrentHue::TypeInfo>(value, nullptr, nullptr,
                                                                                                     nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeEnhancedColorMode(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::ColorControl::Attributes::EnhancedColorMode::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::EnhancedColorMode::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopActive(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopActive::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopActive::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopDirection(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopDirection::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopDirection::TypeInfo>(value, nullptr, nullptr,
                                                                                                     nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopTime(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopTime::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopTime::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopStartEnhancedHue(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopStartEnhancedHue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopStartEnhancedHue::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopStoredEnhancedHue(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopStoredEnhancedHue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorLoopStoredEnhancedHue::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorCapabilities(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap16
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorCapabilities::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorCapabilities::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorTempPhysicalMin(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorTempPhysicalMin::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorTempPhysicalMin::TypeInfo>(value, nullptr, nullptr,
                                                                                                       nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorTempPhysicalMax(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorTempPhysicalMax::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ColorTempPhysicalMax::TypeInfo>(value, nullptr, nullptr,
                                                                                                       nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCoupleColorTempToLevelMinMireds(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CoupleColorTempToLevelMinMireds::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::CoupleColorTempToLevelMinMireds::TypeInfo>(value, nullptr,
                                                                                                                  nullptr, nullptr);
    }
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ColorControl::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ContentLauncherClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ContentLauncher::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ContentLauncher::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                     nullptr);
    }
}

CHIP_ERROR DescriptorClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Descriptor::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Descriptor::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR DoorLockClusterTest::WriteAttributeLockState(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::DoorLock::Attributes::LockState::TypeInfo>(value, onSuccess->mContext,
                                                                                        onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::DoorLock::Attributes::LockState::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR DoorLockClusterTest::WriteAttributeLockType(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::DoorLock::Attributes::LockType::TypeInfo>(value, onSuccess->mContext, onSuccess->mCall,
                                                                                       onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::DoorLock::Attributes::LockType::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR DoorLockClusterTest::WriteAttributeActuatorEnabled(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, bool value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: boolean
        return WriteAttribute<app::Clusters::DoorLock::Attributes::ActuatorEnabled::TypeInfo>(value, onSuccess->mContext,
                                                                                              onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::DoorLock::Attributes::ActuatorEnabled::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR DoorLockClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::DoorLock::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                              onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::DoorLock::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeMeasurementType(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap32
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::MeasurementType::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::MeasurementType::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeTotalActivePower(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback, int32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32s
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::TotalActivePower::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::TotalActivePower::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsVoltage(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsVoltage::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsVoltage::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsVoltageMin(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsVoltageMin::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsVoltageMin::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsVoltageMax(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsVoltageMax::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsVoltageMax::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsCurrent(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsCurrent::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsCurrent::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsCurrentMin(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsCurrentMin::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsCurrentMin::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsCurrentMax(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsCurrentMax::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::RmsCurrentMax::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeActivePower(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::ActivePower::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::ActivePower::TypeInfo>(value, nullptr, nullptr,
                                                                                                       nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeActivePowerMin(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::ActivePowerMin::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::ActivePowerMin::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeActivePowerMax(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::ActivePowerMax::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::ActivePowerMax::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ElectricalMeasurement::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributePHYRate(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::PHYRate::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::PHYRate::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeFullDuplex(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, bool value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: boolean
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::FullDuplex::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::FullDuplex::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributePacketRxCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::PacketRxCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::PacketRxCount::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributePacketTxCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::PacketTxCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::PacketTxCount::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeTxErrCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::TxErrCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::TxErrCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeCollisionCount(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::CollisionCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::CollisionCount::TypeInfo>(value, nullptr,
                                                                                                               nullptr, nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeOverrunCount(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::OverrunCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::OverrunCount::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeCarrierDetect(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback, bool value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: boolean
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::CarrierDetect::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::CarrierDetect::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeTimeSinceReset(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::TimeSinceReset::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::TimeSinceReset::TypeInfo>(value, nullptr,
                                                                                                               nullptr, nullptr);
    }
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::EthernetNetworkDiagnostics::Attributes::ClusterRevision::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR FixedLabelClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::FixedLabel::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::FixedLabel::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR FlowMeasurementClusterTest::WriteAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::FlowMeasurement::Attributes::MeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::FlowMeasurement::Attributes::MeasuredValue::TypeInfo>(value, nullptr, nullptr,
                                                                                                   nullptr);
    }
}

CHIP_ERROR FlowMeasurementClusterTest::WriteAttributeMinMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::FlowMeasurement::Attributes::MinMeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::FlowMeasurement::Attributes::MinMeasuredValue::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR FlowMeasurementClusterTest::WriteAttributeMaxMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::FlowMeasurement::Attributes::MaxMeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::FlowMeasurement::Attributes::MaxMeasuredValue::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR FlowMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::FlowMeasurement::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::FlowMeasurement::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                     nullptr);
    }
}

CHIP_ERROR GeneralCommissioningClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::GeneralCommissioning::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::GeneralCommissioning::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR GeneralDiagnosticsClusterTest::WriteAttributeRebootCount(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::RebootCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::RebootCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR GeneralDiagnosticsClusterTest::WriteAttributeUpTime(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::UpTime::TypeInfo>(value, onSuccess->mContext,
                                                                                               onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::UpTime::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR GeneralDiagnosticsClusterTest::WriteAttributeTotalOperationalHours(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::TotalOperationalHours::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::TotalOperationalHours::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR GeneralDiagnosticsClusterTest::WriteAttributeBootReasons(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::BootReasons::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::BootReasons::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR GeneralDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::GeneralDiagnostics::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR GroupKeyManagementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::GroupKeyManagement::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::GroupKeyManagement::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR GroupsClusterTest::WriteAttributeNameSupport(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap8
        return WriteAttribute<app::Clusters::Groups::Attributes::NameSupport::TypeInfo>(value, onSuccess->mContext,
                                                                                        onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Groups::Attributes::NameSupport::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR GroupsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Groups::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Groups::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR IdentifyClusterTest::WriteAttributeIdentifyType(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::Identify::Attributes::IdentifyType::TypeInfo>(value, onSuccess->mContext,
                                                                                           onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Identify::Attributes::IdentifyType::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR IdentifyClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Identify::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                              onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Identify::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR KeypadInputClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::KeypadInput::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::KeypadInput::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeCurrentLevel(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::LevelControl::Attributes::CurrentLevel::TypeInfo>(value, onSuccess->mContext,
                                                                                               onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::LevelControl::Attributes::CurrentLevel::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeRemainingTime(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t remainingTime)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = LevelControl::Attributes::RemainingTime::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, remainingTime));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeMinLevel(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint8_t minLevel)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = LevelControl::Attributes::MinLevel::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, minLevel));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeMaxLevel(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint8_t maxLevel)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = LevelControl::Attributes::MaxLevel::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, maxLevel));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeCurrentFrequency(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback,
                                                                   uint16_t currentFrequency)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = LevelControl::Attributes::CurrentFrequency::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, currentFrequency));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeMinFrequency(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint16_t minFrequency)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = LevelControl::Attributes::MinFrequency::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, minFrequency));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeMaxFrequency(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint16_t maxFrequency)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = LevelControl::Attributes::MaxFrequency::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, maxFrequency));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::LevelControl::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::LevelControl::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR LowPowerClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::LowPower::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                              onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::LowPower::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaInputClusterTest::WriteAttributeCurrentMediaInput(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::MediaInput::Attributes::CurrentMediaInput::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaInput::Attributes::CurrentMediaInput::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaInputClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::MediaInput::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaInput::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributePlaybackState(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::PlaybackState::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::PlaybackState::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeStartTime(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::StartTime::TypeInfo>(value, onSuccess->mContext,
                                                                                             onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::StartTime::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeDuration(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::Duration::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::Duration::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributePositionUpdatedAt(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::PositionUpdatedAt::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::PositionUpdatedAt::TypeInfo>(value, nullptr, nullptr,
                                                                                                     nullptr);
    }
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributePosition(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::Position::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::Position::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributePlaybackSpeed(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::PlaybackSpeed::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::PlaybackSpeed::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeSeekRangeEnd(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::SeekRangeEnd::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::SeekRangeEnd::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeSeekRangeStart(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::SeekRangeStart::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::SeekRangeStart::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::MediaPlayback::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                   nullptr);
    }
}

CHIP_ERROR NetworkCommissioningClusterTest::WriteAttributeFeatureMap(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap32
        return WriteAttribute<app::Clusters::NetworkCommissioning::Attributes::FeatureMap::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::NetworkCommissioning::Attributes::FeatureMap::TypeInfo>(value, nullptr, nullptr,
                                                                                                     nullptr);
    }
}

CHIP_ERROR NetworkCommissioningClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::NetworkCommissioning::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::NetworkCommissioning::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR OtaSoftwareUpdateProviderClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::OtaSoftwareUpdateProvider::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OtaSoftwareUpdateProvider::Attributes::ClusterRevision::TypeInfo>(value, nullptr,
                                                                                                               nullptr, nullptr);
    }
}

CHIP_ERROR OtaSoftwareUpdateRequestorClusterTest::WriteAttributeUpdatePossible(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback, bool value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: boolean
        return WriteAttribute<app::Clusters::OtaSoftwareUpdateRequestor::Attributes::UpdatePossible::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OtaSoftwareUpdateRequestor::Attributes::UpdatePossible::TypeInfo>(value, nullptr,
                                                                                                               nullptr, nullptr);
    }
}

CHIP_ERROR OtaSoftwareUpdateRequestorClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::OtaSoftwareUpdateRequestor::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OtaSoftwareUpdateRequestor::Attributes::ClusterRevision::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR OccupancySensingClusterTest::WriteAttributeOccupancy(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap8
        return WriteAttribute<app::Clusters::OccupancySensing::Attributes::Occupancy::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OccupancySensing::Attributes::Occupancy::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR OccupancySensingClusterTest::WriteAttributeOccupancySensorType(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::OccupancySensing::Attributes::OccupancySensorType::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OccupancySensing::Attributes::OccupancySensorType::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR OccupancySensingClusterTest::WriteAttributeOccupancySensorTypeBitmap(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap8
        return WriteAttribute<app::Clusters::OccupancySensing::Attributes::OccupancySensorTypeBitmap::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OccupancySensing::Attributes::OccupancySensorTypeBitmap::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR OccupancySensingClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::OccupancySensing::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OccupancySensing::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR OnOffClusterTest::WriteAttributeOnOff(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback,
                                                 bool value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: boolean
        return WriteAttribute<app::Clusters::OnOff::Attributes::OnOff::TypeInfo>(value, onSuccess->mContext, onSuccess->mCall,
                                                                                 onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OnOff::Attributes::OnOff::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR OnOffClusterTest::WriteAttributeGlobalSceneControl(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, bool value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: boolean
        return WriteAttribute<app::Clusters::OnOff::Attributes::GlobalSceneControl::TypeInfo>(value, onSuccess->mContext,
                                                                                              onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OnOff::Attributes::GlobalSceneControl::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR OnOffClusterTest::WriteAttributeFeatureMap(Callback::Cancelable * onSuccessCallback,
                                                      Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap32
        return WriteAttribute<app::Clusters::OnOff::Attributes::FeatureMap::TypeInfo>(value, onSuccess->mContext, onSuccess->mCall,
                                                                                      onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OnOff::Attributes::FeatureMap::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR OnOffClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::OnOff::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                           onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OnOff::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR OnOffSwitchConfigurationClusterTest::WriteAttributeSwitchType(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::OnOffSwitchConfiguration::Attributes::SwitchType::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OnOffSwitchConfiguration::Attributes::SwitchType::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR OnOffSwitchConfigurationClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::OnOffSwitchConfiguration::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OnOffSwitchConfiguration::Attributes::ClusterRevision::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR OperationalCredentialsClusterTest::WriteAttributeSupportedFabrics(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::OperationalCredentials::Attributes::SupportedFabrics::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OperationalCredentials::Attributes::SupportedFabrics::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR OperationalCredentialsClusterTest::WriteAttributeCommissionedFabrics(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::OperationalCredentials::Attributes::CommissionedFabrics::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OperationalCredentials::Attributes::CommissionedFabrics::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR OperationalCredentialsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::OperationalCredentials::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::OperationalCredentials::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeStatus(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::PowerSource::Attributes::Status::TypeInfo>(value, onSuccess->mContext,
                                                                                        onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::Status::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeOrder(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::PowerSource::Attributes::Order::TypeInfo>(value, onSuccess->mContext, onSuccess->mCall,
                                                                                       onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::Order::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeDescription(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::PowerSource::Attributes::Description::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::Description::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryVoltage(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryVoltage::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryVoltage::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryPercentRemaining(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryPercentRemaining::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryPercentRemaining::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryTimeRemaining(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryTimeRemaining::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryTimeRemaining::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryChargeLevel(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryChargeLevel::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryChargeLevel::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryChargeState(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryChargeState::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::BatteryChargeState::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeFeatureMap(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap32
        return WriteAttribute<app::Clusters::PowerSource::Attributes::FeatureMap::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::FeatureMap::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::PowerSource::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PowerSource::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR PressureMeasurementClusterTest::WriteAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::PressureMeasurement::Attributes::MeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PressureMeasurement::Attributes::MeasuredValue::TypeInfo>(value, nullptr, nullptr,
                                                                                                       nullptr);
    }
}

CHIP_ERROR PressureMeasurementClusterTest::WriteAttributeMinMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::PressureMeasurement::Attributes::MinMeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PressureMeasurement::Attributes::MinMeasuredValue::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR PressureMeasurementClusterTest::WriteAttributeMaxMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::PressureMeasurement::Attributes::MaxMeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PressureMeasurement::Attributes::MaxMeasuredValue::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR PressureMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::PressureMeasurement::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PressureMeasurement::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxPressure(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::MaxPressure::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::MaxPressure::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxSpeed(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::MaxSpeed::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::MaxSpeed::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxFlow(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::MaxFlow::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::MaxFlow::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMinConstPressure(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  int16_t minConstPressure)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MinConstPressure::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, minConstPressure));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxConstPressure(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  int16_t maxConstPressure)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MaxConstPressure::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, maxConstPressure));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMinCompPressure(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 int16_t minCompPressure)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MinCompPressure::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, minCompPressure));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxCompPressure(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 int16_t maxCompPressure)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MaxCompPressure::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, maxCompPressure));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMinConstSpeed(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint16_t minConstSpeed)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MinConstSpeed::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, minConstSpeed));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxConstSpeed(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint16_t maxConstSpeed)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MaxConstSpeed::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, maxConstSpeed));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMinConstFlow(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t minConstFlow)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MinConstFlow::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, minConstFlow));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxConstFlow(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t maxConstFlow)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MaxConstFlow::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, maxConstFlow));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMinConstTemp(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              int16_t minConstTemp)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MinConstTemp::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, minConstTemp));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxConstTemp(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              int16_t maxConstTemp)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::MaxConstTemp::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, maxConstTemp));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributePumpStatus(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint16_t pumpStatus)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::PumpStatus::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, pumpStatus));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeEffectiveOperationMode(Callback::Cancelable * onSuccessCallback,
                                                                                        Callback::Cancelable * onFailureCallback,
                                                                                        uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::EffectiveOperationMode::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::EffectiveOperationMode::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeEffectiveControlMode(Callback::Cancelable * onSuccessCallback,
                                                                                      Callback::Cancelable * onFailureCallback,
                                                                                      uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::EffectiveControlMode::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::EffectiveControlMode::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeCapacity(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::Capacity::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::Capacity::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeSpeed(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback, uint16_t speed)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::Speed::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, speed));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeLifetimeEnergyConsumed(Callback::Cancelable * onSuccessCallback,
                                                                                        Callback::Cancelable * onFailureCallback,
                                                                                        uint32_t lifetimeEnergyConsumed)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::LifetimeEnergyConsumed::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, lifetimeEnergyConsumed));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeAlarmMask(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint16_t alarmMask)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::AlarmMask::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, alarmMask));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeFeatureMap(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t featureMap)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::FeatureMap::Id;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeAttributeWritePayload(attributePath, featureMap));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::PumpConfigurationAndControl::Attributes::ClusterRevision::TypeInfo>(value, nullptr,
                                                                                                                 nullptr, nullptr);
    }
}

CHIP_ERROR RelativeHumidityMeasurementClusterTest::WriteAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::RelativeHumidityMeasurement::Attributes::MeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::RelativeHumidityMeasurement::Attributes::MeasuredValue::TypeInfo>(value, nullptr,
                                                                                                               nullptr, nullptr);
    }
}

CHIP_ERROR RelativeHumidityMeasurementClusterTest::WriteAttributeMinMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::RelativeHumidityMeasurement::Attributes::MinMeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::RelativeHumidityMeasurement::Attributes::MinMeasuredValue::TypeInfo>(value, nullptr,
                                                                                                                  nullptr, nullptr);
    }
}

CHIP_ERROR RelativeHumidityMeasurementClusterTest::WriteAttributeMaxMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::RelativeHumidityMeasurement::Attributes::MaxMeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::RelativeHumidityMeasurement::Attributes::MaxMeasuredValue::TypeInfo>(value, nullptr,
                                                                                                                  nullptr, nullptr);
    }
}

CHIP_ERROR RelativeHumidityMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::RelativeHumidityMeasurement::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::RelativeHumidityMeasurement::Attributes::ClusterRevision::TypeInfo>(value, nullptr,
                                                                                                                 nullptr, nullptr);
    }
}

CHIP_ERROR ScenesClusterTest::WriteAttributeSceneCount(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::Scenes::Attributes::SceneCount::TypeInfo>(value, onSuccess->mContext, onSuccess->mCall,
                                                                                       onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Scenes::Attributes::SceneCount::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ScenesClusterTest::WriteAttributeCurrentScene(Callback::Cancelable * onSuccessCallback,
                                                         Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::Scenes::Attributes::CurrentScene::TypeInfo>(value, onSuccess->mContext,
                                                                                         onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Scenes::Attributes::CurrentScene::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ScenesClusterTest::WriteAttributeCurrentGroup(Callback::Cancelable * onSuccessCallback,
                                                         Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Scenes::Attributes::CurrentGroup::TypeInfo>(value, onSuccess->mContext,
                                                                                         onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Scenes::Attributes::CurrentGroup::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ScenesClusterTest::WriteAttributeSceneValid(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, bool value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: boolean
        return WriteAttribute<app::Clusters::Scenes::Attributes::SceneValid::TypeInfo>(value, onSuccess->mContext, onSuccess->mCall,
                                                                                       onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Scenes::Attributes::SceneValid::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ScenesClusterTest::WriteAttributeNameSupport(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap8
        return WriteAttribute<app::Clusters::Scenes::Attributes::NameSupport::TypeInfo>(value, onSuccess->mContext,
                                                                                        onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Scenes::Attributes::NameSupport::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ScenesClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Scenes::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Scenes::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR SoftwareDiagnosticsClusterTest::WriteAttributeCurrentHeapFree(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::SoftwareDiagnostics::Attributes::CurrentHeapFree::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::SoftwareDiagnostics::Attributes::CurrentHeapFree::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR SoftwareDiagnosticsClusterTest::WriteAttributeCurrentHeapUsed(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::SoftwareDiagnostics::Attributes::CurrentHeapUsed::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::SoftwareDiagnostics::Attributes::CurrentHeapUsed::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR SoftwareDiagnosticsClusterTest::WriteAttributeCurrentHeapHighWatermark(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::SoftwareDiagnostics::Attributes::CurrentHeapHighWatermark::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::SoftwareDiagnostics::Attributes::CurrentHeapHighWatermark::TypeInfo>(value, nullptr,
                                                                                                                  nullptr, nullptr);
    }
}

CHIP_ERROR SoftwareDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::SoftwareDiagnostics::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::SoftwareDiagnostics::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR SwitchClusterTest::WriteAttributeNumberOfPositions(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::Switch::Attributes::NumberOfPositions::TypeInfo>(value, onSuccess->mContext,
                                                                                              onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Switch::Attributes::NumberOfPositions::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR SwitchClusterTest::WriteAttributeCurrentPosition(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::Switch::Attributes::CurrentPosition::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Switch::Attributes::CurrentPosition::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR SwitchClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Switch::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Switch::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR TvChannelClusterTest::WriteAttributeTvChannelLineup(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: octet_string
        return WriteAttribute<app::Clusters::TvChannel::Attributes::TvChannelLineup::TypeInfo>(value, onSuccess->mContext,
                                                                                               onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::TvChannel::Attributes::TvChannelLineup::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR TvChannelClusterTest::WriteAttributeCurrentTvChannel(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: octet_string
        return WriteAttribute<app::Clusters::TvChannel::Attributes::CurrentTvChannel::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::TvChannel::Attributes::CurrentTvChannel::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR TvChannelClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::TvChannel::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                               onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::TvChannel::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR TargetNavigatorClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::TargetNavigator::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::TargetNavigator::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                     nullptr);
    }
}

CHIP_ERROR TemperatureMeasurementClusterTest::WriteAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::TemperatureMeasurement::Attributes::MeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::TemperatureMeasurement::Attributes::MeasuredValue::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR TemperatureMeasurementClusterTest::WriteAttributeMinMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::TemperatureMeasurement::Attributes::MinMeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::TemperatureMeasurement::Attributes::MinMeasuredValue::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR TemperatureMeasurementClusterTest::WriteAttributeMaxMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::TemperatureMeasurement::Attributes::MaxMeasuredValue::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::TemperatureMeasurement::Attributes::MaxMeasuredValue::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR TemperatureMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::TemperatureMeasurement::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::TemperatureMeasurement::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR TestClusterClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::TestCluster::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::TestCluster::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeLocalTemperature(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::Thermostat::Attributes::LocalTemperature::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::LocalTemperature::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeAbsMinHeatSetpointLimit(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::Thermostat::Attributes::AbsMinHeatSetpointLimit::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::AbsMinHeatSetpointLimit::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeAbsMaxHeatSetpointLimit(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::Thermostat::Attributes::AbsMaxHeatSetpointLimit::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::AbsMaxHeatSetpointLimit::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeAbsMinCoolSetpointLimit(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::Thermostat::Attributes::AbsMinCoolSetpointLimit::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::AbsMinCoolSetpointLimit::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeAbsMaxCoolSetpointLimit(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, int16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16s
        return WriteAttribute<app::Clusters::Thermostat::Attributes::AbsMaxCoolSetpointLimit::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::AbsMaxCoolSetpointLimit::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeStartOfWeek(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::Thermostat::Attributes::StartOfWeek::TypeInfo>(value, onSuccess->mContext,
                                                                                            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::StartOfWeek::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeNumberOfWeeklyTransitions(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::Thermostat::Attributes::NumberOfWeeklyTransitions::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::NumberOfWeeklyTransitions::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeNumberOfDailyTransitions(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::Thermostat::Attributes::NumberOfDailyTransitions::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::NumberOfDailyTransitions::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeFeatureMap(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap32
        return WriteAttribute<app::Clusters::Thermostat::Attributes::FeatureMap::TypeInfo>(value, onSuccess->mContext,
                                                                                           onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::FeatureMap::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::Thermostat::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                                onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::Thermostat::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThermostatUserInterfaceConfigurationClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                          Callback::Cancelable * onFailureCallback,
                                                                                          uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThermostatUserInterfaceConfiguration::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThermostatUserInterfaceConfiguration::Attributes::ClusterRevision::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeChannel(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::Channel::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::Channel::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRoutingRole(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RoutingRole::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RoutingRole::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeNetworkName(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: octet_string
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::NetworkName::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::NetworkName::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributePanId(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::PanId::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::PanId::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeExtendedPanId(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ExtendedPanId::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ExtendedPanId::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeMeshLocalPrefix(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: octet_string
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::MeshLocalPrefix::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::MeshLocalPrefix::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeOverrunCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::OverrunCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::OverrunCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributePartitionId(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::PartitionId::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::PartitionId::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeWeighting(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::Weighting::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::Weighting::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeDataVersion(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::DataVersion::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::DataVersion::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeStableDataVersion(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::StableDataVersion::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::StableDataVersion::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeLeaderRouterId(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::LeaderRouterId::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::LeaderRouterId::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeDetachedRoleCount(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::DetachedRoleCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::DetachedRoleCount::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeChildRoleCount(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ChildRoleCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ChildRoleCount::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRouterRoleCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RouterRoleCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RouterRoleCount::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeLeaderRoleCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::LeaderRoleCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::LeaderRoleCount::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeAttachAttemptCount(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::AttachAttemptCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::AttachAttemptCount::TypeInfo>(value, nullptr,
                                                                                                                 nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributePartitionIdChangeCount(Callback::Cancelable * onSuccessCallback,
                                                                                     Callback::Cancelable * onFailureCallback,
                                                                                     uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::PartitionIdChangeCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::PartitionIdChangeCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeBetterPartitionAttachAttemptCount(
    Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::BetterPartitionAttachAttemptCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::BetterPartitionAttachAttemptCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeParentChangeCount(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ParentChangeCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ParentChangeCount::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxTotalCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxTotalCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxTotalCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxUnicastCount(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxUnicastCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxUnicastCount::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxBroadcastCount(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxBroadcastCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxBroadcastCount::TypeInfo>(value, nullptr,
                                                                                                               nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxAckRequestedCount(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxAckRequestedCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxAckRequestedCount::TypeInfo>(value, nullptr,
                                                                                                                  nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxAckedCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxAckedCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxAckedCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxNoAckRequestedCount(Callback::Cancelable * onSuccessCallback,
                                                                                    Callback::Cancelable * onFailureCallback,
                                                                                    uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxNoAckRequestedCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxNoAckRequestedCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxDataCount(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxDataCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxDataCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxDataPollCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxDataPollCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxDataPollCount::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxBeaconCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxBeaconCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxBeaconCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxBeaconRequestCount(Callback::Cancelable * onSuccessCallback,
                                                                                   Callback::Cancelable * onFailureCallback,
                                                                                   uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxBeaconRequestCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxBeaconRequestCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxOtherCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxOtherCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxOtherCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxRetryCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxRetryCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxRetryCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxDirectMaxRetryExpiryCount(Callback::Cancelable * onSuccessCallback,
                                                                                          Callback::Cancelable * onFailureCallback,
                                                                                          uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxDirectMaxRetryExpiryCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxDirectMaxRetryExpiryCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxIndirectMaxRetryExpiryCount(
    Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxIndirectMaxRetryExpiryCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxIndirectMaxRetryExpiryCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxErrCcaCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxErrCcaCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxErrCcaCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxErrAbortCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxErrAbortCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxErrAbortCount::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxErrBusyChannelCount(Callback::Cancelable * onSuccessCallback,
                                                                                    Callback::Cancelable * onFailureCallback,
                                                                                    uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxErrBusyChannelCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::TxErrBusyChannelCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxTotalCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxTotalCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxTotalCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxUnicastCount(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxUnicastCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxUnicastCount::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxBroadcastCount(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxBroadcastCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxBroadcastCount::TypeInfo>(value, nullptr,
                                                                                                               nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxDataCount(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxDataCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxDataCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxDataPollCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxDataPollCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxDataPollCount::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxBeaconCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxBeaconCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxBeaconCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxBeaconRequestCount(Callback::Cancelable * onSuccessCallback,
                                                                                   Callback::Cancelable * onFailureCallback,
                                                                                   uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxBeaconRequestCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxBeaconRequestCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxOtherCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxOtherCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxOtherCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxAddressFilteredCount(Callback::Cancelable * onSuccessCallback,
                                                                                     Callback::Cancelable * onFailureCallback,
                                                                                     uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxAddressFilteredCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxAddressFilteredCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxDestAddrFilteredCount(Callback::Cancelable * onSuccessCallback,
                                                                                      Callback::Cancelable * onFailureCallback,
                                                                                      uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxDestAddrFilteredCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxDestAddrFilteredCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxDuplicatedCount(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxDuplicatedCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxDuplicatedCount::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrNoFrameCount(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrNoFrameCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrNoFrameCount::TypeInfo>(value, nullptr,
                                                                                                                nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrUnknownNeighborCount(Callback::Cancelable * onSuccessCallback,
                                                                                        Callback::Cancelable * onFailureCallback,
                                                                                        uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrUnknownNeighborCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrUnknownNeighborCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrInvalidSrcAddrCount(Callback::Cancelable * onSuccessCallback,
                                                                                       Callback::Cancelable * onFailureCallback,
                                                                                       uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrInvalidSrcAddrCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrInvalidSrcAddrCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrSecCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrSecCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrSecCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrFcsCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrFcsCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrFcsCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrOtherCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrOtherCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::RxErrOtherCount::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeActiveTimestamp(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ActiveTimestamp::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ActiveTimestamp::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributePendingTimestamp(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::PendingTimestamp::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::PendingTimestamp::TypeInfo>(value, nullptr,
                                                                                                               nullptr, nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeDelay(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::Delay::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::Delay::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeChannelMask(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: octet_string
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ChannelMask::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ChannelMask::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::ThreadNetworkDiagnostics::Attributes::ClusterRevision::TypeInfo>(value, nullptr,
                                                                                                              nullptr, nullptr);
    }
}

CHIP_ERROR WakeOnLanClusterTest::WriteAttributeWakeOnLanMacAddress(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: char_string
        return WriteAttribute<app::Clusters::WakeOnLan::Attributes::WakeOnLanMacAddress::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), onSuccess->mContext,
            onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WakeOnLan::Attributes::WakeOnLanMacAddress::TypeInfo>(
            chip::Span<const char>(reinterpret_cast<const char *>(value.data()), value.size()), nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WakeOnLanClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WakeOnLan::Attributes::ClusterRevision::TypeInfo>(value, onSuccess->mContext,
                                                                                               onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WakeOnLan::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeBssid(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, chip::ByteSpan value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: octet_string
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::Bssid::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::Bssid::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeSecurityType(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::SecurityType::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::SecurityType::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeWiFiVersion(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::WiFiVersion::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::WiFiVersion::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeChannelNumber(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::ChannelNumber::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::ChannelNumber::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeRssi(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, int8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8s
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::Rssi::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::Rssi::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeBeaconLostCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::BeaconLostCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::BeaconLostCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeBeaconRxCount(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback, uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::BeaconRxCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::BeaconRxCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                          nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributePacketMulticastRxCount(Callback::Cancelable * onSuccessCallback,
                                                                                   Callback::Cancelable * onFailureCallback,
                                                                                   uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::PacketMulticastRxCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::PacketMulticastRxCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributePacketMulticastTxCount(Callback::Cancelable * onSuccessCallback,
                                                                                   Callback::Cancelable * onFailureCallback,
                                                                                   uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::PacketMulticastTxCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::PacketMulticastTxCount::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributePacketUnicastRxCount(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::PacketUnicastRxCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::PacketUnicastRxCount::TypeInfo>(value, nullptr,
                                                                                                                 nullptr, nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributePacketUnicastTxCount(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 uint32_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int32u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::PacketUnicastTxCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::PacketUnicastTxCount::TypeInfo>(value, nullptr,
                                                                                                                 nullptr, nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeCurrentMaxRate(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::CurrentMaxRate::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::CurrentMaxRate::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeOverrunCount(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint64_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int64u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::OverrunCount::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::OverrunCount::TypeInfo>(value, nullptr, nullptr,
                                                                                                         nullptr);
    }
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WiFiNetworkDiagnostics::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                            nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeType(Callback::Cancelable * onSuccessCallback,
                                                         Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::Type::TypeInfo>(value, onSuccess->mContext,
                                                                                         onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::Type::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionLift(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionLift::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionLift::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionTilt(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionTilt::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionTilt::TypeInfo>(value, nullptr, nullptr,
                                                                                                        nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeConfigStatus(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap8
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::ConfigStatus::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::ConfigStatus::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionLiftPercentage(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionLiftPercentage::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionLiftPercentage::TypeInfo>(value, nullptr,
                                                                                                                  nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionTiltPercentage(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int8u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionTiltPercentage::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionTiltPercentage::TypeInfo>(value, nullptr,
                                                                                                                  nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeOperationalStatus(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap8
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::OperationalStatus::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::OperationalStatus::TypeInfo>(value, nullptr, nullptr,
                                                                                                      nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeTargetPositionLiftPercent100ths(Callback::Cancelable * onSuccessCallback,
                                                                                    Callback::Cancelable * onFailureCallback,
                                                                                    uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::TargetPositionLiftPercent100ths::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::TargetPositionLiftPercent100ths::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeTargetPositionTiltPercent100ths(Callback::Cancelable * onSuccessCallback,
                                                                                    Callback::Cancelable * onFailureCallback,
                                                                                    uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::TargetPositionTiltPercent100ths::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::TargetPositionTiltPercent100ths::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeEndProductType(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, uint8_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: enum8
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::EndProductType::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::EndProductType::TypeInfo>(value, nullptr, nullptr,
                                                                                                   nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionLiftPercent100ths(Callback::Cancelable * onSuccessCallback,
                                                                                     Callback::Cancelable * onFailureCallback,
                                                                                     uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionLiftPercent100ths::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionLiftPercent100ths::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionTiltPercent100ths(Callback::Cancelable * onSuccessCallback,
                                                                                     Callback::Cancelable * onFailureCallback,
                                                                                     uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionTiltPercent100ths::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::CurrentPositionTiltPercent100ths::TypeInfo>(
            value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeInstalledOpenLimitLift(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::InstalledOpenLimitLift::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::InstalledOpenLimitLift::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeInstalledClosedLimitLift(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::InstalledClosedLimitLift::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::InstalledClosedLimitLift::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeInstalledOpenLimitTilt(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::InstalledOpenLimitTilt::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::InstalledOpenLimitTilt::TypeInfo>(value, nullptr, nullptr,
                                                                                                           nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeInstalledClosedLimitTilt(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::InstalledClosedLimitTilt::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::InstalledClosedLimitTilt::TypeInfo>(value, nullptr,
                                                                                                             nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeSafetyStatus(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: bitmap16
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::SafetyStatus::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::SafetyStatus::TypeInfo>(value, nullptr, nullptr, nullptr);
    }
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint16_t value)
{
    if (onSuccessCallback != nullptr && onFailureCallback != nullptr)
    {
        auto onSuccess = Callback::Callback<WriteResponseSuccessCallback>::FromCancelable(onSuccessCallback);
        auto onFailure = Callback::Callback<WriteResponseFailureCallback>::FromCancelable(onFailureCallback);
        // TYPE: int16u
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::ClusterRevision::TypeInfo>(
            value, onSuccess->mContext, onSuccess->mCall, onFailure->mCall);
    }
    else
    {
        return WriteAttribute<app::Clusters::WindowCovering::Attributes::ClusterRevision::TypeInfo>(value, nullptr, nullptr,
                                                                                                    nullptr);
    }
}

} // namespace Controller
} // namespace chip
