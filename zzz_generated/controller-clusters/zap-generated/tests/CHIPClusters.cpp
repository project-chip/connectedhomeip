/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include "CHIPClusters.h"

#include <app/InteractionModelEngine.h>
#include <app/util/basic-types.h>

#include <app-common/zap-generated/ids/Attributes.h>
#include <zap-generated/CHIPClientCallbacks.h>

using namespace chip::app::Clusters;
using namespace chip::System;
using namespace chip::Encoding::LittleEndian;

namespace chip {
namespace Controller {

CHIP_ERROR AccountLoginClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback,
                                                                  uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR AdministratorCommissioningClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeVendorName(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback,
                                                                 chip::ByteSpan vendorName)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ApplicationBasic::Attributes::Ids::VendorName;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, vendorName));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeVendorId(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint16_t vendorId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ApplicationBasic::Attributes::Ids::VendorId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, vendorId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeApplicationName(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      chip::ByteSpan applicationName)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ApplicationBasic::Attributes::Ids::ApplicationName;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, applicationName));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeProductId(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t productId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ApplicationBasic::Attributes::Ids::ProductId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, productId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeApplicationId(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    chip::ByteSpan applicationId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ApplicationBasic::Attributes::Ids::ApplicationId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, applicationId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeCatalogVendorId(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      uint16_t catalogVendorId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ApplicationBasic::Attributes::Ids::CatalogVendorId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, catalogVendorId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeApplicationStatus(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint8_t applicationStatus)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ApplicationBasic::Attributes::Ids::ApplicationStatus;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, applicationStatus));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationBasicClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationLauncherClusterTest::WriteAttributeCatalogVendorId(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint8_t catalogVendorId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ApplicationLauncher::Attributes::Ids::CatalogVendorId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, catalogVendorId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationLauncherClusterTest::WriteAttributeApplicationId(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback,
                                                                       uint8_t applicationId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ApplicationLauncher::Attributes::Ids::ApplicationId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, applicationId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ApplicationLauncherClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR AudioOutputClusterTest::WriteAttributeCurrentAudioOutput(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t currentAudioOutput)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = AudioOutput::Attributes::Ids::CurrentAudioOutput;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentAudioOutput));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR AudioOutputClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeBarrierMovingState(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback,
                                                                       uint8_t barrierMovingState)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BarrierControl::Attributes::Ids::BarrierMovingState;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, barrierMovingState));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeBarrierSafetyStatus(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint16_t barrierSafetyStatus)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BarrierControl::Attributes::Ids::BarrierSafetyStatus;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, barrierSafetyStatus));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeBarrierCapabilities(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint8_t barrierCapabilities)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BarrierControl::Attributes::Ids::BarrierCapabilities;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, barrierCapabilities));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeBarrierPosition(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t barrierPosition)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BarrierControl::Attributes::Ids::BarrierPosition;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, barrierPosition));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BarrierControlClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeInteractionModelVersion(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback,
                                                                   uint16_t interactionModelVersion)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::InteractionModelVersion;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, interactionModelVersion));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeVendorName(Callback::Cancelable * onSuccessCallback,
                                                      Callback::Cancelable * onFailureCallback, chip::ByteSpan vendorName)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::VendorName;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, vendorName));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeVendorID(Callback::Cancelable * onSuccessCallback,
                                                    Callback::Cancelable * onFailureCallback, uint16_t vendorID)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::VendorID;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, vendorID));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeProductName(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, chip::ByteSpan productName)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::ProductName;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, productName));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeProductID(Callback::Cancelable * onSuccessCallback,
                                                     Callback::Cancelable * onFailureCallback, uint16_t productID)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::ProductID;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, productID));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeHardwareVersion(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t hardwareVersion)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::HardwareVersion;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, hardwareVersion));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeHardwareVersionString(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback,
                                                                 chip::ByteSpan hardwareVersionString)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::HardwareVersionString;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, hardwareVersionString));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeSoftwareVersion(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint32_t softwareVersion)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::SoftwareVersion;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, softwareVersion));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeSoftwareVersionString(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback,
                                                                 chip::ByteSpan softwareVersionString)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::SoftwareVersionString;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, softwareVersionString));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeManufacturingDate(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback,
                                                             chip::ByteSpan manufacturingDate)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::ManufacturingDate;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, manufacturingDate));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributePartNumber(Callback::Cancelable * onSuccessCallback,
                                                      Callback::Cancelable * onFailureCallback, chip::ByteSpan partNumber)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::PartNumber;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, partNumber));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeProductURL(Callback::Cancelable * onSuccessCallback,
                                                      Callback::Cancelable * onFailureCallback, chip::ByteSpan productURL)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::ProductURL;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, productURL));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeProductLabel(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, chip::ByteSpan productLabel)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::ProductLabel;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, productLabel));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeSerialNumber(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, chip::ByteSpan serialNumber)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::SerialNumber;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, serialNumber));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeReachable(Callback::Cancelable * onSuccessCallback,
                                                     Callback::Cancelable * onFailureCallback, bool reachable)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Basic::Attributes::Ids::Reachable;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, reachable));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BasicClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BinaryInputBasicClusterTest::WriteAttributeStatusFlags(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint8_t statusFlags)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BinaryInputBasic::Attributes::Ids::StatusFlags;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, statusFlags));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BinaryInputBasicClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BindingClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeVendorName(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback,
                                                                   chip::ByteSpan vendorName)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::VendorName;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, vendorName));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeVendorID(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t vendorID)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::VendorID;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, vendorID));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeProductName(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    chip::ByteSpan productName)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::ProductName;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, productName));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeHardwareVersion(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint16_t hardwareVersion)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::HardwareVersion;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, hardwareVersion));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeHardwareVersionString(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              chip::ByteSpan hardwareVersionString)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::HardwareVersionString;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, hardwareVersionString));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeSoftwareVersion(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint32_t softwareVersion)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::SoftwareVersion;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, softwareVersion));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeSoftwareVersionString(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              chip::ByteSpan softwareVersionString)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::SoftwareVersionString;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, softwareVersionString));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeManufacturingDate(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          chip::ByteSpan manufacturingDate)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::ManufacturingDate;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, manufacturingDate));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributePartNumber(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback,
                                                                   chip::ByteSpan partNumber)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::PartNumber;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, partNumber));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeProductURL(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback,
                                                                   chip::ByteSpan productURL)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::ProductURL;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, productURL));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeProductLabel(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback,
                                                                     chip::ByteSpan productLabel)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::ProductLabel;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, productLabel));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeSerialNumber(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback,
                                                                     chip::ByteSpan serialNumber)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::SerialNumber;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, serialNumber));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeReachable(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, bool reachable)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = BridgedDeviceBasic::Attributes::Ids::Reachable;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, reachable));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR BridgedDeviceBasicClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCurrentHue(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback, uint8_t currentHue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::CurrentHue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentHue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCurrentSaturation(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t currentSaturation)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::CurrentSaturation;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentSaturation));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeRemainingTime(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t remainingTime)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::RemainingTime;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, remainingTime));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCurrentX(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t currentX)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::CurrentX;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentX));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCurrentY(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t currentY)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::CurrentY;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentY));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeDriftCompensation(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t driftCompensation)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::DriftCompensation;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, driftCompensation));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCompensationText(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback,
                                                                   chip::ByteSpan compensationText)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::CompensationText;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, compensationText));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorTemperature(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback,
                                                                   uint16_t colorTemperature)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorTemperature;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorTemperature));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorMode(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint8_t colorMode)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorMode;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorMode));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeNumberOfPrimaries(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t numberOfPrimaries)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::NumberOfPrimaries;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, numberOfPrimaries));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary1X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary1X)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary1X;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary1X));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary1Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary1Y)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary1Y;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary1Y));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary1Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t primary1Intensity)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary1Intensity;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary1Intensity));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary2X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary2X)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary2X;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary2X));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary2Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary2Y)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary2Y;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary2Y));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary2Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t primary2Intensity)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary2Intensity;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary2Intensity));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary3X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary3X)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary3X;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary3X));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary3Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary3Y)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary3Y;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary3Y));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary3Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t primary3Intensity)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary3Intensity;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary3Intensity));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary4X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary4X)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary4X;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary4X));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary4Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary4Y)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary4Y;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary4Y));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary4Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t primary4Intensity)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary4Intensity;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary4Intensity));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary5X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary5X)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary5X;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary5X));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary5Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary5Y)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary5Y;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary5Y));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary5Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t primary5Intensity)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary5Intensity;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary5Intensity));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary6X(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary6X)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary6X;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary6X));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary6Y(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t primary6Y)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary6Y;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary6Y));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributePrimary6Intensity(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t primary6Intensity)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::Primary6Intensity;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, primary6Intensity));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeEnhancedCurrentHue(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback,
                                                                     uint16_t enhancedCurrentHue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::EnhancedCurrentHue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, enhancedCurrentHue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeEnhancedColorMode(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t enhancedColorMode)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::EnhancedColorMode;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, enhancedColorMode));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopActive(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint8_t colorLoopActive)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorLoopActive;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorLoopActive));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopDirection(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback,
                                                                     uint8_t colorLoopDirection)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorLoopDirection;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorLoopDirection));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopTime(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t colorLoopTime)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorLoopTime;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorLoopTime));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopStartEnhancedHue(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint16_t colorLoopStartEnhancedHue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorLoopStartEnhancedHue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorLoopStartEnhancedHue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorLoopStoredEnhancedHue(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint16_t colorLoopStoredEnhancedHue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorLoopStoredEnhancedHue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorLoopStoredEnhancedHue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorCapabilities(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint16_t colorCapabilities)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorCapabilities;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorCapabilities));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorTempPhysicalMin(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback,
                                                                       uint16_t colorTempPhysicalMin)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorTempPhysicalMin;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorTempPhysicalMin));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeColorTempPhysicalMax(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback,
                                                                       uint16_t colorTempPhysicalMax)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::ColorTempPhysicalMax;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, colorTempPhysicalMax));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeCoupleColorTempToLevelMinMireds(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint16_t coupleColorTempToLevelMinMireds)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ColorControl::Attributes::Ids::CoupleColorTempToLevelMinMireds;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, coupleColorTempToLevelMinMireds));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ColorControlClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback,
                                                                  uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ContentLauncherClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback,
                                                                     uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR DescriptorClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR DoorLockClusterTest::WriteAttributeLockState(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, uint8_t lockState)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = DoorLock::Attributes::Ids::LockState;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, lockState));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR DoorLockClusterTest::WriteAttributeLockType(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, uint8_t lockType)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = DoorLock::Attributes::Ids::LockType;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, lockType));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR DoorLockClusterTest::WriteAttributeActuatorEnabled(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, bool actuatorEnabled)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = DoorLock::Attributes::Ids::ActuatorEnabled;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, actuatorEnabled));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR DoorLockClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeMeasurementType(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint32_t measurementType)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::MeasurementType;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, measurementType));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeTotalActivePower(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            int32_t totalActivePower)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::TotalActivePower;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, totalActivePower));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsVoltage(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint16_t rmsVoltage)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::RmsVoltage;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rmsVoltage));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsVoltageMin(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint16_t rmsVoltageMin)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::RmsVoltageMin;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rmsVoltageMin));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsVoltageMax(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint16_t rmsVoltageMax)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::RmsVoltageMax;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rmsVoltageMax));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsCurrent(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint16_t rmsCurrent)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::RmsCurrent;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rmsCurrent));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsCurrentMin(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint16_t rmsCurrentMin)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::RmsCurrentMin;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rmsCurrentMin));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeRmsCurrentMax(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint16_t rmsCurrentMax)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::RmsCurrentMax;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rmsCurrentMax));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeActivePower(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback,
                                                                       int16_t activePower)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::ActivePower;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, activePower));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeActivePowerMin(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          int16_t activePowerMin)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::ActivePowerMin;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, activePowerMin));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeActivePowerMax(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          int16_t activePowerMax)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ElectricalMeasurement::Attributes::Ids::ActivePowerMax;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, activePowerMax));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ElectricalMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributePacketRxCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint64_t packetRxCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = EthernetNetworkDiagnostics::Attributes::Ids::PacketRxCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, packetRxCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributePacketTxCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint64_t packetTxCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = EthernetNetworkDiagnostics::Attributes::Ids::PacketTxCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, packetTxCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeTxErrCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint64_t txErrCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = EthernetNetworkDiagnostics::Attributes::Ids::TxErrCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txErrCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeCollisionCount(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint64_t collisionCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = EthernetNetworkDiagnostics::Attributes::Ids::CollisionCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, collisionCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeOverrunCount(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint64_t overrunCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = EthernetNetworkDiagnostics::Attributes::Ids::OverrunCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, overrunCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR EthernetNetworkDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR FixedLabelClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR FlowMeasurementClusterTest::WriteAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, int16_t measuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = FlowMeasurement::Attributes::Ids::MeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, measuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR FlowMeasurementClusterTest::WriteAttributeMinMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      int16_t minMeasuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = FlowMeasurement::Attributes::Ids::MinMeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, minMeasuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR FlowMeasurementClusterTest::WriteAttributeMaxMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      int16_t maxMeasuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = FlowMeasurement::Attributes::Ids::MaxMeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, maxMeasuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR FlowMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback,
                                                                     uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR GeneralCommissioningClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR GeneralDiagnosticsClusterTest::WriteAttributeRebootCount(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint16_t rebootCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = GeneralDiagnostics::Attributes::Ids::RebootCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rebootCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR GeneralDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR GroupKeyManagementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR GroupsClusterTest::WriteAttributeNameSupport(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, uint8_t nameSupport)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Groups::Attributes::Ids::NameSupport;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, nameSupport));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR GroupsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR IdentifyClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR KeypadInputClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeCurrentLevel(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint8_t currentLevel)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = LevelControl::Attributes::Ids::CurrentLevel;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentLevel));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR LevelControlClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback,
                                                                  uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR LowPowerClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaInputClusterTest::WriteAttributeCurrentMediaInput(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback,
                                                                  uint8_t currentMediaInput)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = MediaInput::Attributes::Ids::CurrentMediaInput;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentMediaInput));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaInputClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributePlaybackState(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint8_t playbackState)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = MediaPlayback::Attributes::Ids::PlaybackState;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, playbackState));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeStartTime(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback, uint64_t startTime)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = MediaPlayback::Attributes::Ids::StartTime;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, startTime));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeDuration(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint64_t duration)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = MediaPlayback::Attributes::Ids::Duration;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, duration));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributePositionUpdatedAt(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback,
                                                                     uint64_t positionUpdatedAt)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = MediaPlayback::Attributes::Ids::PositionUpdatedAt;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, positionUpdatedAt));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributePosition(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint64_t position)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = MediaPlayback::Attributes::Ids::Position;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, position));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributePlaybackSpeed(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint64_t playbackSpeed)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = MediaPlayback::Attributes::Ids::PlaybackSpeed;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, playbackSpeed));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeSeekRangeEnd(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint64_t seekRangeEnd)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = MediaPlayback::Attributes::Ids::SeekRangeEnd;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, seekRangeEnd));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeSeekRangeStart(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, uint64_t seekRangeStart)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = MediaPlayback::Attributes::Ids::SeekRangeStart;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, seekRangeStart));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR MediaPlaybackClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback,
                                                                   uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR NetworkCommissioningClusterTest::WriteAttributeFeatureMap(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback, uint32_t featureMap)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::FeatureMap;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, featureMap));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR NetworkCommissioningClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OtaSoftwareUpdateProviderClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OtaSoftwareUpdateRequestorClusterTest::WriteAttributeUpdatePossible(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               bool updatePossible)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = OtaSoftwareUpdateRequestor::Attributes::Ids::UpdatePossible;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, updatePossible));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OtaSoftwareUpdateRequestorClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OccupancySensingClusterTest::WriteAttributeOccupancy(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint8_t occupancy)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = OccupancySensing::Attributes::Ids::Occupancy;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, occupancy));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OccupancySensingClusterTest::WriteAttributeOccupancySensorType(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint8_t occupancySensorType)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = OccupancySensing::Attributes::Ids::OccupancySensorType;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, occupancySensorType));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OccupancySensingClusterTest::WriteAttributeOccupancySensorTypeBitmap(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint8_t occupancySensorTypeBitmap)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = OccupancySensing::Attributes::Ids::OccupancySensorTypeBitmap;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, occupancySensorTypeBitmap));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OccupancySensingClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OnOffClusterTest::WriteAttributeOnOff(Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback,
                                                 bool onOff)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = OnOff::Attributes::Ids::OnOff;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, onOff));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OnOffClusterTest::WriteAttributeGlobalSceneControl(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, bool globalSceneControl)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = OnOff::Attributes::Ids::GlobalSceneControl;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, globalSceneControl));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OnOffClusterTest::WriteAttributeFeatureMap(Callback::Cancelable * onSuccessCallback,
                                                      Callback::Cancelable * onFailureCallback, uint32_t featureMap)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::FeatureMap;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, featureMap));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OnOffClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OnOffSwitchConfigurationClusterTest::WriteAttributeSwitchType(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint8_t switchType)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = OnOffSwitchConfiguration::Attributes::Ids::SwitchType;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, switchType));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OnOffSwitchConfigurationClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OperationalCredentialsClusterTest::WriteAttributeSupportedFabrics(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint8_t supportedFabrics)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = OperationalCredentials::Attributes::Ids::SupportedFabrics;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, supportedFabrics));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OperationalCredentialsClusterTest::WriteAttributeCommissionedFabrics(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint8_t commissionedFabrics)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = OperationalCredentials::Attributes::Ids::CommissionedFabrics;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, commissionedFabrics));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR OperationalCredentialsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeStatus(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, uint8_t status)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PowerSource::Attributes::Ids::Status;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, status));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeOrder(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, uint8_t order)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PowerSource::Attributes::Ids::Order;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, order));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeDescription(Callback::Cancelable * onSuccessCallback,
                                                             Callback::Cancelable * onFailureCallback, chip::ByteSpan description)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PowerSource::Attributes::Ids::Description;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, description));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryVoltage(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint32_t batteryVoltage)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PowerSource::Attributes::Ids::BatteryVoltage;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, batteryVoltage));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryPercentRemaining(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint8_t batteryPercentRemaining)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PowerSource::Attributes::Ids::BatteryPercentRemaining;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, batteryPercentRemaining));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryTimeRemaining(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      uint32_t batteryTimeRemaining)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PowerSource::Attributes::Ids::BatteryTimeRemaining;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, batteryTimeRemaining));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryChargeLevel(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t batteryChargeLevel)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PowerSource::Attributes::Ids::BatteryChargeLevel;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, batteryChargeLevel));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeBatteryChargeState(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint8_t batteryChargeState)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PowerSource::Attributes::Ids::BatteryChargeState;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, batteryChargeState));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeFeatureMap(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint32_t featureMap)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::FeatureMap;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, featureMap));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PowerSourceClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PressureMeasurementClusterTest::WriteAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                       Callback::Cancelable * onFailureCallback,
                                                                       int16_t measuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PressureMeasurement::Attributes::Ids::MeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, measuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PressureMeasurementClusterTest::WriteAttributeMinMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          int16_t minMeasuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PressureMeasurement::Attributes::Ids::MinMeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, minMeasuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PressureMeasurementClusterTest::WriteAttributeMaxMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          int16_t maxMeasuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PressureMeasurement::Attributes::Ids::MaxMeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, maxMeasuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PressureMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxPressure(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             int16_t maxPressure)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::Ids::MaxPressure;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, maxPressure));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxSpeed(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint16_t maxSpeed)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::Ids::MaxSpeed;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, maxSpeed));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeMaxFlow(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback, uint16_t maxFlow)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::Ids::MaxFlow;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, maxFlow));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeEffectiveOperationMode(Callback::Cancelable * onSuccessCallback,
                                                                                        Callback::Cancelable * onFailureCallback,
                                                                                        uint8_t effectiveOperationMode)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::Ids::EffectiveOperationMode;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, effectiveOperationMode));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeEffectiveControlMode(Callback::Cancelable * onSuccessCallback,
                                                                                      Callback::Cancelable * onFailureCallback,
                                                                                      uint8_t effectiveControlMode)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::Ids::EffectiveControlMode;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, effectiveControlMode));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeCapacity(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          int16_t capacity)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = PumpConfigurationAndControl::Attributes::Ids::Capacity;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, capacity));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR PumpConfigurationAndControlClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR RelativeHumidityMeasurementClusterTest::WriteAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint16_t measuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = RelativeHumidityMeasurement::Attributes::Ids::MeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, measuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR RelativeHumidityMeasurementClusterTest::WriteAttributeMinMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint16_t minMeasuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = RelativeHumidityMeasurement::Attributes::Ids::MinMeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, minMeasuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR RelativeHumidityMeasurementClusterTest::WriteAttributeMaxMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint16_t maxMeasuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = RelativeHumidityMeasurement::Attributes::Ids::MaxMeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, maxMeasuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR RelativeHumidityMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ScenesClusterTest::WriteAttributeSceneCount(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, uint8_t sceneCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Scenes::Attributes::Ids::SceneCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, sceneCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ScenesClusterTest::WriteAttributeCurrentScene(Callback::Cancelable * onSuccessCallback,
                                                         Callback::Cancelable * onFailureCallback, uint8_t currentScene)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Scenes::Attributes::Ids::CurrentScene;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentScene));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ScenesClusterTest::WriteAttributeCurrentGroup(Callback::Cancelable * onSuccessCallback,
                                                         Callback::Cancelable * onFailureCallback, uint16_t currentGroup)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Scenes::Attributes::Ids::CurrentGroup;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentGroup));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ScenesClusterTest::WriteAttributeSceneValid(Callback::Cancelable * onSuccessCallback,
                                                       Callback::Cancelable * onFailureCallback, bool sceneValid)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Scenes::Attributes::Ids::SceneValid;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, sceneValid));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ScenesClusterTest::WriteAttributeNameSupport(Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback, uint8_t nameSupport)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Scenes::Attributes::Ids::NameSupport;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, nameSupport));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ScenesClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR SoftwareDiagnosticsClusterTest::WriteAttributeCurrentHeapHighWatermark(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint64_t currentHeapHighWatermark)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = SoftwareDiagnostics::Attributes::Ids::CurrentHeapHighWatermark;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentHeapHighWatermark));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR SoftwareDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR SwitchClusterTest::WriteAttributeNumberOfPositions(Callback::Cancelable * onSuccessCallback,
                                                              Callback::Cancelable * onFailureCallback, uint8_t numberOfPositions)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Switch::Attributes::Ids::NumberOfPositions;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, numberOfPositions));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR SwitchClusterTest::WriteAttributeCurrentPosition(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint8_t currentPosition)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Switch::Attributes::Ids::CurrentPosition;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentPosition));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR SwitchClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TvChannelClusterTest::WriteAttributeTvChannelLineup(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback,
                                                               chip::ByteSpan tvChannelLineup)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = TvChannel::Attributes::Ids::TvChannelLineup;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, tvChannelLineup));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TvChannelClusterTest::WriteAttributeCurrentTvChannel(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback,
                                                                chip::ByteSpan currentTvChannel)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = TvChannel::Attributes::Ids::CurrentTvChannel;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentTvChannel));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TvChannelClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TargetNavigatorClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                     Callback::Cancelable * onFailureCallback,
                                                                     uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TemperatureMeasurementClusterTest::WriteAttributeMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          int16_t measuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = TemperatureMeasurement::Attributes::Ids::MeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, measuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TemperatureMeasurementClusterTest::WriteAttributeMinMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             int16_t minMeasuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = TemperatureMeasurement::Attributes::Ids::MinMeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, minMeasuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TemperatureMeasurementClusterTest::WriteAttributeMaxMeasuredValue(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             int16_t maxMeasuredValue)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = TemperatureMeasurement::Attributes::Ids::MaxMeasuredValue;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, maxMeasuredValue));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TemperatureMeasurementClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR TestClusterClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeLocalTemperature(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, int16_t localTemperature)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Thermostat::Attributes::Ids::LocalTemperature;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, localTemperature));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeAbsMinHeatSetpointLimit(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        int16_t absMinHeatSetpointLimit)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Thermostat::Attributes::Ids::AbsMinHeatSetpointLimit;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, absMinHeatSetpointLimit));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeAbsMaxHeatSetpointLimit(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        int16_t absMaxHeatSetpointLimit)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Thermostat::Attributes::Ids::AbsMaxHeatSetpointLimit;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, absMaxHeatSetpointLimit));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeAbsMinCoolSetpointLimit(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        int16_t absMinCoolSetpointLimit)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Thermostat::Attributes::Ids::AbsMinCoolSetpointLimit;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, absMinCoolSetpointLimit));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeAbsMaxCoolSetpointLimit(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        int16_t absMaxCoolSetpointLimit)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Thermostat::Attributes::Ids::AbsMaxCoolSetpointLimit;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, absMaxCoolSetpointLimit));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeStartOfWeek(Callback::Cancelable * onSuccessCallback,
                                                            Callback::Cancelable * onFailureCallback, uint8_t startOfWeek)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Thermostat::Attributes::Ids::StartOfWeek;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, startOfWeek));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeNumberOfWeeklyTransitions(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint8_t numberOfWeeklyTransitions)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Thermostat::Attributes::Ids::NumberOfWeeklyTransitions;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, numberOfWeeklyTransitions));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeNumberOfDailyTransitions(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint8_t numberOfDailyTransitions)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Thermostat::Attributes::Ids::NumberOfDailyTransitions;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, numberOfDailyTransitions));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeFeatureMap(Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback, uint32_t featureMap)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::FeatureMap;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, featureMap));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThermostatUserInterfaceConfigurationClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                                          Callback::Cancelable * onFailureCallback,
                                                                                          uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeChannel(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback, uint8_t channel)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::Channel;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, channel));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRoutingRole(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint8_t routingRole)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RoutingRole;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, routingRole));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeNetworkName(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          chip::ByteSpan networkName)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::NetworkName;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, networkName));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributePanId(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint16_t panId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::PanId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, panId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeExtendedPanId(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint64_t extendedPanId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::ExtendedPanId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, extendedPanId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeMeshLocalPrefix(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              chip::ByteSpan meshLocalPrefix)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::MeshLocalPrefix;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, meshLocalPrefix));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeOverrunCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint64_t overrunCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::OverrunCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, overrunCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributePartitionId(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint32_t partitionId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::PartitionId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, partitionId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeWeighting(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback, uint8_t weighting)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::Weighting;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, weighting));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeDataVersion(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint8_t dataVersion)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::DataVersion;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, dataVersion));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeStableDataVersion(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint8_t stableDataVersion)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::StableDataVersion;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, stableDataVersion));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeLeaderRouterId(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint8_t leaderRouterId)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::LeaderRouterId;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, leaderRouterId));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeDetachedRoleCount(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t detachedRoleCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::DetachedRoleCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, detachedRoleCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeChildRoleCount(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint16_t childRoleCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::ChildRoleCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, childRoleCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRouterRoleCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t routerRoleCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RouterRoleCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, routerRoleCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeLeaderRoleCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t leaderRoleCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::LeaderRoleCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, leaderRoleCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeAttachAttemptCount(Callback::Cancelable * onSuccessCallback,
                                                                                 Callback::Cancelable * onFailureCallback,
                                                                                 uint16_t attachAttemptCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::AttachAttemptCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, attachAttemptCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributePartitionIdChangeCount(Callback::Cancelable * onSuccessCallback,
                                                                                     Callback::Cancelable * onFailureCallback,
                                                                                     uint16_t partitionIdChangeCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::PartitionIdChangeCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, partitionIdChangeCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeBetterPartitionAttachAttemptCount(
    Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback, uint16_t betterPartitionAttachAttemptCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::BetterPartitionAttachAttemptCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, betterPartitionAttachAttemptCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeParentChangeCount(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint16_t parentChangeCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::ParentChangeCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, parentChangeCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxTotalCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint32_t txTotalCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxTotalCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txTotalCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxUnicastCount(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint32_t txUnicastCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxUnicastCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txUnicastCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxBroadcastCount(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint32_t txBroadcastCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxBroadcastCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txBroadcastCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxAckRequestedCount(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint32_t txAckRequestedCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxAckRequestedCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txAckRequestedCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxAckedCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint32_t txAckedCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxAckedCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txAckedCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxNoAckRequestedCount(Callback::Cancelable * onSuccessCallback,
                                                                                    Callback::Cancelable * onFailureCallback,
                                                                                    uint32_t txNoAckRequestedCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxNoAckRequestedCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txNoAckRequestedCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxDataCount(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint32_t txDataCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxDataCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txDataCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxDataPollCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint32_t txDataPollCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxDataPollCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txDataPollCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxBeaconCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t txBeaconCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxBeaconCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txBeaconCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxBeaconRequestCount(Callback::Cancelable * onSuccessCallback,
                                                                                   Callback::Cancelable * onFailureCallback,
                                                                                   uint32_t txBeaconRequestCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxBeaconRequestCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txBeaconRequestCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxOtherCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint32_t txOtherCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxOtherCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txOtherCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxRetryCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint32_t txRetryCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxRetryCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txRetryCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxDirectMaxRetryExpiryCount(Callback::Cancelable * onSuccessCallback,
                                                                                          Callback::Cancelable * onFailureCallback,
                                                                                          uint32_t txDirectMaxRetryExpiryCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxDirectMaxRetryExpiryCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txDirectMaxRetryExpiryCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxIndirectMaxRetryExpiryCount(
    Callback::Cancelable * onSuccessCallback, Callback::Cancelable * onFailureCallback, uint32_t txIndirectMaxRetryExpiryCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxIndirectMaxRetryExpiryCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txIndirectMaxRetryExpiryCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxErrCcaCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t txErrCcaCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxErrCcaCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txErrCcaCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxErrAbortCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint32_t txErrAbortCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxErrAbortCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txErrAbortCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeTxErrBusyChannelCount(Callback::Cancelable * onSuccessCallback,
                                                                                    Callback::Cancelable * onFailureCallback,
                                                                                    uint32_t txErrBusyChannelCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::TxErrBusyChannelCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, txErrBusyChannelCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxTotalCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint32_t rxTotalCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxTotalCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxTotalCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxUnicastCount(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint32_t rxUnicastCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxUnicastCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxUnicastCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxBroadcastCount(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint32_t rxBroadcastCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxBroadcastCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxBroadcastCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxDataCount(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint32_t rxDataCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxDataCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxDataCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxDataPollCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint32_t rxDataPollCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxDataPollCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxDataPollCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxBeaconCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t rxBeaconCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxBeaconCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxBeaconCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxBeaconRequestCount(Callback::Cancelable * onSuccessCallback,
                                                                                   Callback::Cancelable * onFailureCallback,
                                                                                   uint32_t rxBeaconRequestCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxBeaconRequestCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxBeaconRequestCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxOtherCount(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint32_t rxOtherCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxOtherCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxOtherCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxAddressFilteredCount(Callback::Cancelable * onSuccessCallback,
                                                                                     Callback::Cancelable * onFailureCallback,
                                                                                     uint32_t rxAddressFilteredCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxAddressFilteredCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxAddressFilteredCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxDestAddrFilteredCount(Callback::Cancelable * onSuccessCallback,
                                                                                      Callback::Cancelable * onFailureCallback,
                                                                                      uint32_t rxDestAddrFilteredCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxDestAddrFilteredCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxDestAddrFilteredCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxDuplicatedCount(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint32_t rxDuplicatedCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxDuplicatedCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxDuplicatedCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrNoFrameCount(Callback::Cancelable * onSuccessCallback,
                                                                                Callback::Cancelable * onFailureCallback,
                                                                                uint32_t rxErrNoFrameCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxErrNoFrameCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxErrNoFrameCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrUnknownNeighborCount(Callback::Cancelable * onSuccessCallback,
                                                                                        Callback::Cancelable * onFailureCallback,
                                                                                        uint32_t rxErrUnknownNeighborCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxErrUnknownNeighborCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxErrUnknownNeighborCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrInvalidSrcAddrCount(Callback::Cancelable * onSuccessCallback,
                                                                                       Callback::Cancelable * onFailureCallback,
                                                                                       uint32_t rxErrInvalidSrcAddrCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxErrInvalidSrcAddrCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxErrInvalidSrcAddrCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrSecCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t rxErrSecCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxErrSecCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxErrSecCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrFcsCount(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint32_t rxErrFcsCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxErrFcsCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxErrFcsCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeRxErrOtherCount(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint32_t rxErrOtherCount)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::RxErrOtherCount;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rxErrOtherCount));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeActiveTimestamp(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint64_t activeTimestamp)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::ActiveTimestamp;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, activeTimestamp));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributePendingTimestamp(Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback,
                                                                               uint64_t pendingTimestamp)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::PendingTimestamp;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, pendingTimestamp));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeDelay(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback, uint32_t delay)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::Delay;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, delay));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeChannelMask(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          chip::ByteSpan channelMask)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = ThreadNetworkDiagnostics::Attributes::Ids::ChannelMask;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, channelMask));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR ThreadNetworkDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback,
                                                                              uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WakeOnLanClusterTest::WriteAttributeWakeOnLanMacAddress(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback,
                                                                   chip::ByteSpan wakeOnLanMacAddress)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WakeOnLan::Attributes::Ids::WakeOnLanMacAddress;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, wakeOnLanMacAddress));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WakeOnLanClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                               Callback::Cancelable * onFailureCallback, uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeBssid(Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback, chip::ByteSpan bssid)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WiFiNetworkDiagnostics::Attributes::Ids::Bssid;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, bssid));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeSecurityType(Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback,
                                                                         uint8_t securityType)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WiFiNetworkDiagnostics::Attributes::Ids::SecurityType;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, securityType));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeWiFiVersion(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint8_t wiFiVersion)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WiFiNetworkDiagnostics::Attributes::Ids::WiFiVersion;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, wiFiVersion));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeChannelNumber(Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback,
                                                                          uint16_t channelNumber)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WiFiNetworkDiagnostics::Attributes::Ids::ChannelNumber;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, channelNumber));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeRssi(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, int8_t rssi)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WiFiNetworkDiagnostics::Attributes::Ids::Rssi;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, rssi));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WiFiNetworkDiagnosticsClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                            Callback::Cancelable * onFailureCallback,
                                                                            uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeType(Callback::Cancelable * onSuccessCallback,
                                                         Callback::Cancelable * onFailureCallback, uint8_t type)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::Type;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, type));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionLift(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint16_t currentPositionLift)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::CurrentPositionLift;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentPositionLift));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionTilt(Callback::Cancelable * onSuccessCallback,
                                                                        Callback::Cancelable * onFailureCallback,
                                                                        uint16_t currentPositionTilt)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::CurrentPositionTilt;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentPositionTilt));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeConfigStatus(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint8_t configStatus)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::ConfigStatus;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, configStatus));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionLiftPercentage(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint8_t currentPositionLiftPercentage)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::CurrentPositionLiftPercentage;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentPositionLiftPercentage));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionTiltPercentage(Callback::Cancelable * onSuccessCallback,
                                                                                  Callback::Cancelable * onFailureCallback,
                                                                                  uint8_t currentPositionTiltPercentage)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::CurrentPositionTiltPercentage;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentPositionTiltPercentage));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeOperationalStatus(Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback,
                                                                      uint8_t operationalStatus)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::OperationalStatus;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, operationalStatus));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeTargetPositionLiftPercent100ths(Callback::Cancelable * onSuccessCallback,
                                                                                    Callback::Cancelable * onFailureCallback,
                                                                                    uint16_t targetPositionLiftPercent100ths)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::TargetPositionLiftPercent100ths;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, targetPositionLiftPercent100ths));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeTargetPositionTiltPercent100ths(Callback::Cancelable * onSuccessCallback,
                                                                                    Callback::Cancelable * onFailureCallback,
                                                                                    uint16_t targetPositionTiltPercent100ths)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::TargetPositionTiltPercent100ths;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, targetPositionTiltPercent100ths));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeEndProductType(Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback, uint8_t endProductType)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::EndProductType;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, endProductType));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionLiftPercent100ths(Callback::Cancelable * onSuccessCallback,
                                                                                     Callback::Cancelable * onFailureCallback,
                                                                                     uint16_t currentPositionLiftPercent100ths)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::CurrentPositionLiftPercent100ths;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentPositionLiftPercent100ths));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeCurrentPositionTiltPercent100ths(Callback::Cancelable * onSuccessCallback,
                                                                                     Callback::Cancelable * onFailureCallback,
                                                                                     uint16_t currentPositionTiltPercent100ths)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::CurrentPositionTiltPercent100ths;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, currentPositionTiltPercent100ths));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeInstalledOpenLimitLift(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint16_t installedOpenLimitLift)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::InstalledOpenLimitLift;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, installedOpenLimitLift));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeInstalledClosedLimitLift(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint16_t installedClosedLimitLift)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::InstalledClosedLimitLift;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, installedClosedLimitLift));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeInstalledOpenLimitTilt(Callback::Cancelable * onSuccessCallback,
                                                                           Callback::Cancelable * onFailureCallback,
                                                                           uint16_t installedOpenLimitTilt)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::InstalledOpenLimitTilt;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, installedOpenLimitTilt));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeInstalledClosedLimitTilt(Callback::Cancelable * onSuccessCallback,
                                                                             Callback::Cancelable * onFailureCallback,
                                                                             uint16_t installedClosedLimitTilt)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::InstalledClosedLimitTilt;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, installedClosedLimitTilt));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeSafetyStatus(Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback, uint16_t safetyStatus)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = WindowCovering::Attributes::Ids::SafetyStatus;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, safetyStatus));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

CHIP_ERROR WindowCoveringClusterTest::WriteAttributeClusterRevision(Callback::Cancelable * onSuccessCallback,
                                                                    Callback::Cancelable * onFailureCallback,
                                                                    uint16_t clusterRevision)
{
    app::WriteClientHandle handle;
    chip::app::AttributePathParams attributePath;
    attributePath.mNodeId     = mDevice->GetDeviceId();
    attributePath.mEndpointId = mEndpoint;
    attributePath.mClusterId  = mClusterId;
    attributePath.mFieldId    = Globals::Attributes::Ids::ClusterRevision;
    attributePath.mFlags.Set(chip::app::AttributePathParams::Flags::kFieldIdValid);

    ReturnErrorOnFailure(app::InteractionModelEngine::GetInstance()->NewWriteClient(handle));
    ReturnErrorOnFailure(handle.EncodeScalarAttributeWritePayload(attributePath, clusterRevision));

    return mDevice->SendWriteAttributeRequest(std::move(handle), onSuccessCallback, onFailureCallback);
}

} // namespace Controller
} // namespace chip
