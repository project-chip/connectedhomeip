/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <zap-generated/CHIPClientCallbacks.h>

#include <cinttypes>

#include <app-common/zap-generated/enums.h>
#include <app/Command.h>
#include <app/util/CHIPDeviceCallbacksMgr.h>
#include <app/util/af-enums.h>
#include <app/util/af.h>
#include <app/util/attribute-list-byte-span.h>
#include <app/util/basic-types.h>
#include <app/util/prepare-list.h>
#include <lib/core/CHIPEncoding.h>
#include <lib/support/SafeInt.h>
#include <lib/support/TypeTraits.h>
#include <lib/support/logging/CHIPLogging.h>

using namespace ::chip;
using namespace ::chip::app::List;

namespace {
[[maybe_unused]] constexpr uint16_t kByteSpanSizeLengthInBytes = 2;
} // namespace

#define CHECK_STATUS_WITH_RETVAL(error, retval)                                                                                    \
    if (CHIP_NO_ERROR != error)                                                                                                    \
    {                                                                                                                              \
        ChipLogError(Zcl, "CHECK_STATUS %s", ErrorStr(error));                                                                     \
        if (onFailureCallback != nullptr)                                                                                          \
        {                                                                                                                          \
            Callback::Callback<DefaultFailureCallback> * cb =                                                                      \
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);                                     \
            cb->mCall(cb->mContext, static_cast<uint8_t>(EMBER_ZCL_STATUS_INVALID_VALUE));                                         \
        }                                                                                                                          \
        return retval;                                                                                                             \
    }

#define CHECK_STATUS(error) CHECK_STATUS_WITH_RETVAL(error, true)
#define CHECK_STATUS_VOID(error) CHECK_STATUS_WITH_RETVAL(error, )

#define CHECK_MESSAGE_LENGTH_WITH_RETVAL(value, retval)                                                                            \
    if (!CanCastTo<uint16_t>(value))                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "CHECK_MESSAGE_LENGTH expects a uint16_t value, got: %d", value);                                        \
        if (onFailureCallback != nullptr)                                                                                          \
        {                                                                                                                          \
            Callback::Callback<DefaultFailureCallback> * cb =                                                                      \
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);                                     \
            cb->mCall(cb->mContext, static_cast<uint8_t>(EMBER_ZCL_STATUS_INVALID_VALUE));                                         \
        }                                                                                                                          \
        return retval;                                                                                                             \
    }                                                                                                                              \
                                                                                                                                   \
    if (messageLen < value)                                                                                                        \
    {                                                                                                                              \
        ChipLogError(Zcl, "Unexpected response length: %d", messageLen);                                                           \
        if (onFailureCallback != nullptr)                                                                                          \
        {                                                                                                                          \
            Callback::Callback<DefaultFailureCallback> * cb =                                                                      \
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);                                     \
            cb->mCall(cb->mContext, static_cast<uint8_t>(EMBER_ZCL_STATUS_INVALID_VALUE));                                         \
        }                                                                                                                          \
        return retval;                                                                                                             \
    }                                                                                                                              \
                                                                                                                                   \
    messageLen = static_cast<uint16_t>(messageLen - static_cast<uint16_t>(value));

#define CHECK_MESSAGE_LENGTH(value) CHECK_MESSAGE_LENGTH_WITH_RETVAL(value, true)
#define CHECK_MESSAGE_LENGTH_VOID(value) CHECK_MESSAGE_LENGTH_WITH_RETVAL(value, )

#define GET_RESPONSE_CALLBACKS(name)                                                                                               \
    Callback::Cancelable * onSuccessCallback = nullptr;                                                                            \
    Callback::Cancelable * onFailureCallback = nullptr;                                                                            \
    NodeId sourceId                          = emberAfCurrentCommand()->SourceNodeId();                                            \
    uint8_t sequenceNumber                   = emberAfCurrentCommand()->seqNum;                                                    \
    CHIP_ERROR err = gCallbacks.GetResponseCallback(sourceId, sequenceNumber, &onSuccessCallback, &onFailureCallback);             \
                                                                                                                                   \
    if (CHIP_NO_ERROR != err)                                                                                                      \
    {                                                                                                                              \
        if (onSuccessCallback == nullptr)                                                                                          \
        {                                                                                                                          \
            ChipLogDetail(Zcl, "%s: Missing success callback", name);                                                              \
        }                                                                                                                          \
                                                                                                                                   \
        if (onFailureCallback == nullptr)                                                                                          \
        {                                                                                                                          \
            ChipLogDetail(Zcl, "%s: Missing failure callback", name);                                                              \
        }                                                                                                                          \
                                                                                                                                   \
        return true;                                                                                                               \
    }

#define GET_CLUSTER_RESPONSE_CALLBACKS(name)                                                                                       \
    Callback::Cancelable * onSuccessCallback = nullptr;                                                                            \
    Callback::Cancelable * onFailureCallback = nullptr;                                                                            \
    NodeId sourceIdentifier                  = reinterpret_cast<NodeId>(commandObj);                                               \
    /* #6559: Currently, we only have one commands for the IMInvokeCommands and to a device, so the seqNum is always set to 0. */  \
    CHIP_ERROR err = gCallbacks.GetResponseCallback(sourceIdentifier, 0, &onSuccessCallback, &onFailureCallback);                  \
                                                                                                                                   \
    if (CHIP_NO_ERROR != err)                                                                                                      \
    {                                                                                                                              \
        if (onSuccessCallback == nullptr)                                                                                          \
        {                                                                                                                          \
            ChipLogDetail(Zcl, "%s: Missing success callback", name);                                                              \
        }                                                                                                                          \
                                                                                                                                   \
        if (onFailureCallback == nullptr)                                                                                          \
        {                                                                                                                          \
            ChipLogDetail(Zcl, "%s: Missing failure callback", name);                                                              \
        }                                                                                                                          \
                                                                                                                                   \
        return true;                                                                                                               \
    }

#define GET_ATTRIBUTE_RESPONSE_CALLBACKS(name)

#define GET_REPORT_CALLBACK(name)                                                                                                  \
    Callback::Cancelable * onReportCallback = nullptr;                                                                             \
    CHIP_ERROR err = gCallbacks.GetReportCallback(sourceId, endpointId, clusterId, attributeId, &onReportCallback);                \
                                                                                                                                   \
    if (CHIP_NO_ERROR != err)                                                                                                      \
    {                                                                                                                              \
        if (onReportCallback == nullptr)                                                                                           \
        {                                                                                                                          \
            ChipLogDetail(Zcl, "%s: Missing report callback", name);                                                               \
        }                                                                                                                          \
                                                                                                                                   \
        return true;                                                                                                               \
    }

// TODO: These IM related callbacks contains small or no generated code, should be put into seperate file to reduce the size of
// template. Singleton instance of the callbacks manager

app::CHIPDeviceCallbacksMgr & gCallbacks = app::CHIPDeviceCallbacksMgr::GetInstance();

bool emberAfConfigureReportingResponseCallback(ClusterId clusterId, uint8_t * message, uint16_t messageLen)
{
    ChipLogProgress(Zcl, "ConfigureReportingResponseCallback:");
    ChipLogProgress(Zcl, "  ClusterId: " ChipLogFormatMEI, ChipLogValueMEI(clusterId));

    GET_RESPONSE_CALLBACKS("emberAfConfigureReportingResponseCallback");

    // struct configureReportingResponseRecord[]
    while (messageLen)
    {
        CHECK_MESSAGE_LENGTH(1);
        uint8_t status = Encoding::Read8(message); // zclStatus
        LogStatus(status);

        if (status == EMBER_ZCL_STATUS_SUCCESS)
        {
            Callback::Callback<DefaultSuccessCallback> * cb =
                Callback::Callback<DefaultSuccessCallback>::FromCancelable(onSuccessCallback);
            cb->mCall(cb->mContext);
        }
        else
        {
            CHECK_MESSAGE_LENGTH(1);
            uint8_t direction = Encoding::Read8(message); // reportingRole
            ChipLogProgress(Zcl, "  direction: 0x%02x", direction);
            // Silence unused var warning if progress logging is disabled.  Note
            // that we _do_ want to call Read8 unconditionally here, because we
            // want to advance the 'message' pointer even if we don't use
            // direction.
            UNUSED_VAR(direction);

            CHECK_MESSAGE_LENGTH(4);
            AttributeId attributeId = Encoding::LittleEndian::Read32(message); // attribId
            ChipLogProgress(Zcl, "  attributeId: " ChipLogFormatMEI, ChipLogValueMEI(attributeId));
            // Silence unused var warning if progress logging is disabled.  Note
            // that we _do_ want to call Read32 unconditionally here, because we
            // want to advance the 'message' pointer even if we don't use
            // direction.
            UNUSED_VAR(attributeId);

            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, status);
        }

        // The current code is written matching the current API where there is a single attribute report
        // per configure command. So if multiple attributes are configured at the same time, something is wrong
        // somewhere.
        if (messageLen)
        {
            ChipLogError(Zcl, "Multiple attributes reports configured at the same time. Something went wrong.");
            break;
        }
    }

    return true;
}

bool emberAfReadReportingConfigurationResponseCallback(ClusterId clusterId, uint8_t * message, uint16_t messageLen)
{
    ChipLogProgress(Zcl, "ReadReportingConfigurationResponse:");
    ChipLogProgress(Zcl, "  ClusterId: " ChipLogFormatMEI, ChipLogValueMEI(clusterId));

    GET_RESPONSE_CALLBACKS("emberAfReadReportingConfigurationResponseCallback");

    // struct readReportingConfigurationResponseRecord[]
    while (messageLen)
    {
        CHECK_MESSAGE_LENGTH(1);
        uint8_t direction = Encoding::Read8(message); // reportingRole
        ChipLogProgress(Zcl, "  direction: 0x%02x", direction);

        CHECK_MESSAGE_LENGTH(4);
        AttributeId attributeId = Encoding::LittleEndian::Read32(message); // attribId
        ChipLogProgress(Zcl, "  attributeId: " ChipLogFormatMEI, ChipLogValueMEI(attributeId));
        // Silence unused var warning if progress logging is disabled.  Note
        // that we _do_ want to call Read32 unconditionally here, because we
        // want to advance the 'message' pointer even if we don't use
        // attributeId.
        UNUSED_VAR(attributeId);

        if (direction == EMBER_ZCL_REPORTING_DIRECTION_REPORTED)
        {
            CHECK_MESSAGE_LENGTH(1);
            uint8_t attributeType = Encoding::Read8(message); // zclType
            ChipLogProgress(Zcl, "  attributeType: 0x%02x", attributeType);
            // Silence unused var warning if progress logging is disabled.  Note
            // that we _do_ want to call Read8 unconditionally here, because we
            // want to advance the 'message' pointer even if we don't use
            // attributeType.
            UNUSED_VAR(attributeType);

            CHECK_MESSAGE_LENGTH(2);
            uint16_t minimumReportingInterval = Encoding::LittleEndian::Read16(message); // uint16
            ChipLogProgress(Zcl, "  minimumReportingInterval: %" PRIu16, minimumReportingInterval);

            CHECK_MESSAGE_LENGTH(2);
            uint16_t maximumReportingInterval = Encoding::LittleEndian::Read16(message); // uint16
            ChipLogProgress(Zcl, "  maximumReportingInterval: %" PRIu16, maximumReportingInterval);

            // FIXME: unk is not supported yet.

            Callback::Callback<ReadReportingConfigurationReportedCallback> * cb =
                Callback::Callback<ReadReportingConfigurationReportedCallback>::FromCancelable(onSuccessCallback);
            cb->mCall(cb->mContext, minimumReportingInterval, maximumReportingInterval);
        }
        else
        {
            CHECK_MESSAGE_LENGTH(2);
            uint16_t timeout = Encoding::LittleEndian::Read16(message); // uint16
            ChipLogProgress(Zcl, "  timeout: %" PRIu16, timeout);

            Callback::Callback<ReadReportingConfigurationReceivedCallback> * cb =
                Callback::Callback<ReadReportingConfigurationReceivedCallback>::FromCancelable(onSuccessCallback);
            cb->mCall(cb->mContext, timeout);
        }
    }

    return true;
}

bool emberAfDiscoverAttributesResponseCallback(ClusterId clusterId, bool discoveryComplete, uint8_t * message, uint16_t messageLen,
                                               bool extended)
{
    ChipLogProgress(Zcl, "DiscoverAttributesResponse:");
    ChipLogProgress(Zcl, "  ClusterId: " ChipLogFormatMEI, ChipLogValueMEI(clusterId));
    ChipLogProgress(Zcl, "  discoveryComplete: %d", discoveryComplete);
    ChipLogProgress(Zcl, "  extended: %d", extended);

    GET_RESPONSE_CALLBACKS("emberAfDiscoverAttributesCallback");

    // struct discoverAttributesResponseRecord[]
    while (messageLen)
    {
        CHECK_MESSAGE_LENGTH(4);
        AttributeId attributeId = Encoding::LittleEndian::Read32(message); // attribId
        ChipLogProgress(Zcl, "  attributeId: " ChipLogFormatMEI, ChipLogValueMEI(attributeId));
        // Silence unused var warning if progress logging is disabled.  Note
        // that we _do_ want to call Read32 unconditionally here, because we
        // want to advance the 'message' pointer even if we don't use
        // attributeId.
        UNUSED_VAR(attributeId);

        CHECK_MESSAGE_LENGTH(1);
        uint8_t attributeType = Encoding::Read8(message); // zclType
        ChipLogProgress(Zcl, "  attributeType: 0x%02x", attributeType);
        // Silence unused var warning if progress logging is disabled.  Note
        // that we _do_ want to call Read8 unconditionally here, because we want
        // to advance the 'message' pointer even if we don't use attributeType.
        UNUSED_VAR(attributeType);
    }

    Callback::Callback<DefaultSuccessCallback> * cb = Callback::Callback<DefaultSuccessCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext);
    return true;
}

bool emberAfDiscoverCommandsGeneratedResponseCallback(ClusterId clusterId, uint16_t manufacturerCode, bool discoveryComplete,
                                                      CommandId * commandIds, uint16_t commandIdCount)
{
    ChipLogProgress(Zcl, "DiscoverCommandsGeneratedResponse:");
    ChipLogProgress(Zcl, "  ClusterId: " ChipLogFormatMEI, ChipLogValueMEI(clusterId));
    ChipLogProgress(Zcl, "  manufacturerCode: 0x%04x", manufacturerCode);
    ChipLogProgress(Zcl, "  discoveryComplete: %d", discoveryComplete);
    ChipLogProgress(Zcl, "  commandIdCount: %" PRIu16, commandIdCount);

    for (uint16_t i = 0; i < commandIdCount; i++)
    {
        ChipLogProgress(Zcl, "  commandId: " ChipLogFormatMEI, ChipLogValueMEI(*commandIds));
        commandIds++;
    }

    GET_RESPONSE_CALLBACKS("emberAfDiscoverCommandsGeneratedResponseCallback");
    Callback::Callback<DefaultSuccessCallback> * cb = Callback::Callback<DefaultSuccessCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext);
    return true;
}

bool emberAfDiscoverCommandsReceivedResponseCallback(ClusterId clusterId, uint16_t manufacturerCode, bool discoveryComplete,
                                                     CommandId * commandIds, uint16_t commandIdCount)
{
    ChipLogProgress(Zcl, "DiscoverCommandsReceivedResponse:");
    ChipLogProgress(Zcl, "  ClusterId: " ChipLogFormatMEI, ChipLogValueMEI(clusterId));
    ChipLogProgress(Zcl, "  manufacturerCode: 0x%04x", manufacturerCode);
    ChipLogProgress(Zcl, "  discoveryComplete: %d", discoveryComplete);
    ChipLogProgress(Zcl, "  commandIdCount: %" PRIu16, commandIdCount);

    for (uint16_t i = 0; i < commandIdCount; i++)
    {
        ChipLogProgress(Zcl, "  commandId: " ChipLogFormatMEI, ChipLogValueMEI(*commandIds));
        commandIds++;
    }

    GET_RESPONSE_CALLBACKS("emberAfDiscoverCommandsGeneratedResponseCallback");
    Callback::Callback<DefaultSuccessCallback> * cb = Callback::Callback<DefaultSuccessCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext);
    return true;
}

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void ApplicationLauncherClusterApplicationLauncherListListAttributeFilter(TLV::TLVReader * tlvData,
                                                                          Callback::Cancelable * onSuccessCallback,
                                                                          Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    uint16_t data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i] = emberAfGetInt16u(message, 0, 2);
        message += 2;
    }
    Callback::Callback<ApplicationLauncherApplicationLauncherListListAttributeCallback> * cb =
        Callback::Callback<ApplicationLauncherApplicationLauncherListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void AudioOutputClusterAudioOutputListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                          Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _AudioOutputInfo data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].index = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].outputType = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].name));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
    }
    Callback::Callback<AudioOutputAudioOutputListListAttributeCallback> * cb =
        Callback::Callback<AudioOutputAudioOutputListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void ContentLauncherClusterAcceptsHeaderListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    chip::ByteSpan data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_STATUS_VOID(ReadByteSpan(message, messageLen, &data[i]));
        uint16_t entryLength = static_cast<uint16_t>(data[i].size() + kByteSpanSizeLengthInBytes);
        messageLen           = static_cast<uint16_t>(messageLen - entryLength);
        message += entryLength;
    }
    Callback::Callback<ContentLauncherAcceptsHeaderListListAttributeCallback> * cb =
        Callback::Callback<ContentLauncherAcceptsHeaderListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void ContentLauncherClusterSupportedStreamingTypesListAttributeFilter(TLV::TLVReader * tlvData,
                                                                      Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    uint8_t data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i] = emberAfGetInt8u(message, 0, 1);
        message += 1;
    }
    Callback::Callback<ContentLauncherSupportedStreamingTypesListAttributeCallback> * cb =
        Callback::Callback<ContentLauncherSupportedStreamingTypesListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void DescriptorClusterDeviceListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                    Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _DeviceType data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(4);
        data[i].type = emberAfGetInt32u(message, 0, 4);
        message += 4;
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].revision = emberAfGetInt16u(message, 0, 2);
        message += 2;
    }
    Callback::Callback<DescriptorDeviceListListAttributeCallback> * cb =
        Callback::Callback<DescriptorDeviceListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void DescriptorClusterServerListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                    Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    chip::ClusterId data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(4);
        data[i] = emberAfGetInt32u(message, 0, 4);
        message += 4;
    }
    Callback::Callback<DescriptorServerListListAttributeCallback> * cb =
        Callback::Callback<DescriptorServerListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void DescriptorClusterClientListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                    Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    chip::ClusterId data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(4);
        data[i] = emberAfGetInt32u(message, 0, 4);
        message += 4;
    }
    Callback::Callback<DescriptorClientListListAttributeCallback> * cb =
        Callback::Callback<DescriptorClientListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void DescriptorClusterPartsListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                   Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    chip::EndpointId data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i] = emberAfGetInt16u(message, 0, 2);
        message += 2;
    }
    Callback::Callback<DescriptorPartsListListAttributeCallback> * cb =
        Callback::Callback<DescriptorPartsListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void FixedLabelClusterLabelListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                   Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _LabelStruct data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_STATUS_VOID(ReadByteSpan(message, 18, &data[i].label));
        messageLen = static_cast<uint16_t>(messageLen - 18);
        message += 18;
        CHECK_STATUS_VOID(ReadByteSpan(message, 18, &data[i].value));
        messageLen = static_cast<uint16_t>(messageLen - 18);
        message += 18;
    }
    Callback::Callback<FixedLabelLabelListListAttributeCallback> * cb =
        Callback::Callback<FixedLabelLabelListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void GeneralCommissioningClusterBasicCommissioningInfoListListAttributeFilter(TLV::TLVReader * tlvData,
                                                                              Callback::Cancelable * onSuccessCallback,
                                                                              Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _BasicCommissioningInfoType data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(4);
        data[i].FailSafeExpiryLengthMs = emberAfGetInt32u(message, 0, 4);
        message += 4;
    }
    Callback::Callback<GeneralCommissioningBasicCommissioningInfoListListAttributeCallback> * cb =
        Callback::Callback<GeneralCommissioningBasicCommissioningInfoListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void GeneralDiagnosticsClusterNetworkInterfacesListAttributeFilter(TLV::TLVReader * tlvData,
                                                                   Callback::Cancelable * onSuccessCallback,
                                                                   Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _NetworkInterfaceType data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].Name));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].FabricConnected = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].OffPremiseServicesReachableIPv4 = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].OffPremiseServicesReachableIPv6 = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_STATUS_VOID(ReadByteSpan(message, 10, &data[i].HardwareAddress));
        messageLen = static_cast<uint16_t>(messageLen - 10);
        message += 10;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].Type = emberAfGetInt8u(message, 0, 1);
        message += 1;
    }
    Callback::Callback<GeneralDiagnosticsNetworkInterfacesListAttributeCallback> * cb =
        Callback::Callback<GeneralDiagnosticsNetworkInterfacesListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void GroupKeyManagementClusterGroupsListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _GroupState data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].VendorId = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].VendorGroupId = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].GroupKeySetIndex = emberAfGetInt16u(message, 0, 2);
        message += 2;
    }
    Callback::Callback<GroupKeyManagementGroupsListAttributeCallback> * cb =
        Callback::Callback<GroupKeyManagementGroupsListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void GroupKeyManagementClusterGroupKeysListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                           Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _GroupKey data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].VendorId = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].GroupKeyIndex = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_STATUS_VOID(ReadByteSpan(message, 18, &data[i].GroupKeyRoot));
        messageLen = static_cast<uint16_t>(messageLen - 18);
        message += 18;
        CHECK_MESSAGE_LENGTH_VOID(8);
        data[i].GroupKeyEpochStartTime = emberAfGetInt64u(message, 0, 8);
        message += 8;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].GroupKeySecurityPolicy = emberAfGetInt8u(message, 0, 1);
        message += 1;
    }
    Callback::Callback<GroupKeyManagementGroupKeysListAttributeCallback> * cb =
        Callback::Callback<GroupKeyManagementGroupKeysListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void MediaInputClusterMediaInputListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                        Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _MediaInputInfo data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].index = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].inputType = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].name));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].description));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
    }
    Callback::Callback<MediaInputMediaInputListListAttributeCallback> * cb =
        Callback::Callback<MediaInputMediaInputListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void OperationalCredentialsClusterFabricsListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                                 Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _FabricDescriptor data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].FabricIndex = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_STATUS_VOID(ReadByteSpan(message, 67, &data[i].RootPublicKey));
        messageLen = static_cast<uint16_t>(messageLen - 67);
        message += 67;
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].VendorId = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_MESSAGE_LENGTH_VOID(8);
        data[i].FabricId = emberAfGetInt64u(message, 0, 8);
        message += 8;
        CHECK_MESSAGE_LENGTH_VOID(8);
        data[i].NodeId = emberAfGetInt64u(message, 0, 8);
        message += 8;
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].Label));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
    }
    Callback::Callback<OperationalCredentialsFabricsListListAttributeCallback> * cb =
        Callback::Callback<OperationalCredentialsFabricsListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void TvChannelClusterTvChannelListListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                      Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _TvChannelInfo data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].majorNumber = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].minorNumber = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].name));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].callSign));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].affiliateCallSign));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
    }
    Callback::Callback<TvChannelTvChannelListListAttributeCallback> * cb =
        Callback::Callback<TvChannelTvChannelListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void TargetNavigatorClusterTargetNavigatorListListAttributeFilter(TLV::TLVReader * tlvData,
                                                                  Callback::Cancelable * onSuccessCallback,
                                                                  Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _NavigateTargetTargetInfo data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].identifier = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].name));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
    }
    Callback::Callback<TargetNavigatorTargetNavigatorListListAttributeCallback> * cb =
        Callback::Callback<TargetNavigatorTargetNavigatorListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void TestClusterClusterListInt8uListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                    Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    uint8_t data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i] = emberAfGetInt8u(message, 0, 1);
        message += 1;
    }
    Callback::Callback<TestClusterListInt8uListAttributeCallback> * cb =
        Callback::Callback<TestClusterListInt8uListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void TestClusterClusterListOctetStringListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                          Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    chip::ByteSpan data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_STATUS_VOID(ReadByteSpan(message, messageLen, &data[i]));
        uint16_t entryLength = static_cast<uint16_t>(data[i].size() + kByteSpanSizeLengthInBytes);
        messageLen           = static_cast<uint16_t>(messageLen - entryLength);
        message += entryLength;
    }
    Callback::Callback<TestClusterListOctetStringListAttributeCallback> * cb =
        Callback::Callback<TestClusterListOctetStringListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void TestClusterClusterListStructOctetStringListAttributeFilter(TLV::TLVReader * tlvData, Callback::Cancelable * onSuccessCallback,
                                                                Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _TestListStructOctet data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(8);
        data[i].fabricIndex = emberAfGetInt64u(message, 0, 8);
        message += 8;
        CHECK_STATUS_VOID(ReadByteSpan(message, 34, &data[i].operationalCert));
        messageLen = static_cast<uint16_t>(messageLen - 34);
        message += 34;
    }
    Callback::Callback<TestClusterListStructOctetStringListAttributeCallback> * cb =
        Callback::Callback<TestClusterListStructOctetStringListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void ThreadNetworkDiagnosticsClusterNeighborTableListListAttributeFilter(TLV::TLVReader * tlvData,
                                                                         Callback::Cancelable * onSuccessCallback,
                                                                         Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _NeighborTable data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(8);
        data[i].ExtAddress = emberAfGetInt64u(message, 0, 8);
        message += 8;
        CHECK_MESSAGE_LENGTH_VOID(4);
        data[i].Age = emberAfGetInt32u(message, 0, 4);
        message += 4;
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].Rloc16 = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_MESSAGE_LENGTH_VOID(4);
        data[i].LinkFrameCounter = emberAfGetInt32u(message, 0, 4);
        message += 4;
        CHECK_MESSAGE_LENGTH_VOID(4);
        data[i].MleFrameCounter = emberAfGetInt32u(message, 0, 4);
        message += 4;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].LQI = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].AverageRssi = emberAfGetInt8s(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].LastRssi = emberAfGetInt8s(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].FrameErrorRate = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].MessageErrorRate = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].RxOnWhenIdle = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].FullThreadDevice = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].FullNetworkData = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].IsChild = emberAfGetInt8u(message, 0, 1);
        message += 1;
    }
    Callback::Callback<ThreadNetworkDiagnosticsNeighborTableListListAttributeCallback> * cb =
        Callback::Callback<ThreadNetworkDiagnosticsNeighborTableListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void ThreadNetworkDiagnosticsClusterRouteTableListListAttributeFilter(TLV::TLVReader * tlvData,
                                                                      Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _RouteTable data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(8);
        data[i].ExtAddress = emberAfGetInt64u(message, 0, 8);
        message += 8;
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].Rloc16 = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].RouterId = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].NextHop = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].PathCost = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].LQIIn = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].LQIOut = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].Age = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].Allocated = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].LinkEstablished = emberAfGetInt8u(message, 0, 1);
        message += 1;
    }
    Callback::Callback<ThreadNetworkDiagnosticsRouteTableListListAttributeCallback> * cb =
        Callback::Callback<ThreadNetworkDiagnosticsRouteTableListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void ThreadNetworkDiagnosticsClusterSecurityPolicyListAttributeFilter(TLV::TLVReader * tlvData,
                                                                      Callback::Cancelable * onSuccessCallback,
                                                                      Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _SecurityPolicy data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(2);
        data[i].RotationTime = emberAfGetInt16u(message, 0, 2);
        message += 2;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].Flags = emberAfGetInt8u(message, 0, 1);
        message += 1;
    }
    Callback::Callback<ThreadNetworkDiagnosticsSecurityPolicyListAttributeCallback> * cb =
        Callback::Callback<ThreadNetworkDiagnosticsSecurityPolicyListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void ThreadNetworkDiagnosticsClusterOperationalDatasetComponentsListAttributeFilter(TLV::TLVReader * tlvData,
                                                                                    Callback::Cancelable * onSuccessCallback,
                                                                                    Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    _OperationalDatasetComponents data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].ActiveTimestampPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].PendingTimestampPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].MasterKeyPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].NetworkNamePresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].ExtendedPanIdPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].MeshLocalPrefixPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].DelayPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].PanIdPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].ChannelPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].PskcPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].SecurityPolicyPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i].ChannelMaskPresent = emberAfGetInt8u(message, 0, 1);
        message += 1;
    }
    Callback::Callback<ThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallback> * cb =
        Callback::Callback<ThreadNetworkDiagnosticsOperationalDatasetComponentsListAttributeCallback>::FromCancelable(
            onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

#if !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstack-usage="
#endif // __clang__
void ThreadNetworkDiagnosticsClusterActiveNetworkFaultsListListAttributeFilter(TLV::TLVReader * tlvData,
                                                                               Callback::Cancelable * onSuccessCallback,
                                                                               Callback::Cancelable * onFailureCallback)
{
    // TODO: Add actual support for array and lists.
    const uint8_t * message = nullptr;
    uint16_t messageLen     = 0;
    EmberAfStatus res       = PrepareListFromTLV(tlvData, message, messageLen);
    if (res != EMBER_ZCL_STATUS_SUCCESS)
    {
        if (onFailureCallback != nullptr)
        {
            Callback::Callback<DefaultFailureCallback> * cb =
                Callback::Callback<DefaultFailureCallback>::FromCancelable(onFailureCallback);
            cb->mCall(cb->mContext, res);
        }
        return;
    }

    CHECK_MESSAGE_LENGTH_VOID(2);
    uint16_t count = Encoding::LittleEndian::Read16(message);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvla"
    uint8_t data[count];
#pragma GCC diagnostic pop
    for (size_t i = 0; i < count; i++)
    {
        CHECK_MESSAGE_LENGTH_VOID(1);
        data[i] = emberAfGetInt8u(message, 0, 1);
        message += 1;
    }
    Callback::Callback<ThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallback> * cb =
        Callback::Callback<ThreadNetworkDiagnosticsActiveNetworkFaultsListListAttributeCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, count, data);
}
#if !defined(__clang__)
#pragma GCC diagnostic pop
#endif // __clang__

bool emberAfAccountLoginClusterGetSetupPINResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t * setupPIN)
{
    ChipLogProgress(Zcl, "GetSetupPINResponse:");
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  setupPIN: %.*s", setupPIN.size(), setupPIN.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("AccountLoginClusterGetSetupPINResponseCallback");

    Callback::Callback<AccountLoginClusterGetSetupPINResponseCallback> * cb =
        Callback::Callback<AccountLoginClusterGetSetupPINResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, setupPIN);
    return true;
}

bool emberAfApplicationLauncherClusterLaunchAppResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                uint8_t status, uint8_t * data)
{
    ChipLogProgress(Zcl, "LaunchAppResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  data: %.*s", data.size(), data.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("ApplicationLauncherClusterLaunchAppResponseCallback");

    Callback::Callback<ApplicationLauncherClusterLaunchAppResponseCallback> * cb =
        Callback::Callback<ApplicationLauncherClusterLaunchAppResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, data);
    return true;
}

bool emberAfContentLauncherClusterLaunchContentResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                uint8_t * data, uint8_t contentLaunchStatus)
{
    ChipLogProgress(Zcl, "LaunchContentResponse:");
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  data: %.*s", data.size(), data.data());
    ChipLogProgress(Zcl, "  contentLaunchStatus: %" PRIu8 "", contentLaunchStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("ContentLauncherClusterLaunchContentResponseCallback");

    Callback::Callback<ContentLauncherClusterLaunchContentResponseCallback> * cb =
        Callback::Callback<ContentLauncherClusterLaunchContentResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, data, contentLaunchStatus);
    return true;
}

bool emberAfContentLauncherClusterLaunchURLResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t * data,
                                                            uint8_t contentLaunchStatus)
{
    ChipLogProgress(Zcl, "LaunchURLResponse:");
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  data: %.*s", data.size(), data.data());
    ChipLogProgress(Zcl, "  contentLaunchStatus: %" PRIu8 "", contentLaunchStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("ContentLauncherClusterLaunchURLResponseCallback");

    Callback::Callback<ContentLauncherClusterLaunchURLResponseCallback> * cb =
        Callback::Callback<ContentLauncherClusterLaunchURLResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, data, contentLaunchStatus);
    return true;
}

bool emberAfDoorLockClusterClearAllPinsResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "ClearAllPinsResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterClearAllPinsResponseCallback");

    Callback::Callback<DoorLockClusterClearAllPinsResponseCallback> * cb =
        Callback::Callback<DoorLockClusterClearAllPinsResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterClearAllRfidsResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "ClearAllRfidsResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterClearAllRfidsResponseCallback");

    Callback::Callback<DoorLockClusterClearAllRfidsResponseCallback> * cb =
        Callback::Callback<DoorLockClusterClearAllRfidsResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterClearHolidayScheduleResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                uint8_t status)
{
    ChipLogProgress(Zcl, "ClearHolidayScheduleResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterClearHolidayScheduleResponseCallback");

    Callback::Callback<DoorLockClusterClearHolidayScheduleResponseCallback> * cb =
        Callback::Callback<DoorLockClusterClearHolidayScheduleResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterClearPinResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "ClearPinResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterClearPinResponseCallback");

    Callback::Callback<DoorLockClusterClearPinResponseCallback> * cb =
        Callback::Callback<DoorLockClusterClearPinResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterClearRfidResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "ClearRfidResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterClearRfidResponseCallback");

    Callback::Callback<DoorLockClusterClearRfidResponseCallback> * cb =
        Callback::Callback<DoorLockClusterClearRfidResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterClearWeekdayScheduleResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                uint8_t status)
{
    ChipLogProgress(Zcl, "ClearWeekdayScheduleResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterClearWeekdayScheduleResponseCallback");

    Callback::Callback<DoorLockClusterClearWeekdayScheduleResponseCallback> * cb =
        Callback::Callback<DoorLockClusterClearWeekdayScheduleResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterClearYeardayScheduleResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                uint8_t status)
{
    ChipLogProgress(Zcl, "ClearYeardayScheduleResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterClearYeardayScheduleResponseCallback");

    Callback::Callback<DoorLockClusterClearYeardayScheduleResponseCallback> * cb =
        Callback::Callback<DoorLockClusterClearYeardayScheduleResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterGetHolidayScheduleResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                              uint8_t scheduleId, uint8_t status, uint32_t localStartTime,
                                                              uint32_t localEndTime, uint8_t operatingModeDuringHoliday)
{
    ChipLogProgress(Zcl, "GetHolidayScheduleResponse:");
    ChipLogProgress(Zcl, "  scheduleId: %" PRIu8 "", scheduleId);
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  localStartTime: %" PRIu32 "", localStartTime);
    ChipLogProgress(Zcl, "  localEndTime: %" PRIu32 "", localEndTime);
    ChipLogProgress(Zcl, "  operatingModeDuringHoliday: %" PRIu8 "", operatingModeDuringHoliday);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterGetHolidayScheduleResponseCallback");

    Callback::Callback<DoorLockClusterGetHolidayScheduleResponseCallback> * cb =
        Callback::Callback<DoorLockClusterGetHolidayScheduleResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, scheduleId, status, localStartTime, localEndTime, operatingModeDuringHoliday);
    return true;
}

bool emberAfDoorLockClusterGetLogRecordResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint16_t logEntryId,
                                                        uint32_t timestamp, uint8_t eventType, uint8_t source,
                                                        uint8_t eventIdOrAlarmCode, uint16_t userId, uint8_t * pin)
{
    ChipLogProgress(Zcl, "GetLogRecordResponse:");
    ChipLogProgress(Zcl, "  logEntryId: %" PRIu16 "", logEntryId);
    ChipLogProgress(Zcl, "  timestamp: %" PRIu32 "", timestamp);
    ChipLogProgress(Zcl, "  eventType: %" PRIu8 "", eventType);
    ChipLogProgress(Zcl, "  source: %" PRIu8 "", source);
    ChipLogProgress(Zcl, "  eventIdOrAlarmCode: %" PRIu8 "", eventIdOrAlarmCode);
    ChipLogProgress(Zcl, "  userId: %" PRIu16 "", userId);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  pin: %.*s", pin.size(), pin.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterGetLogRecordResponseCallback");

    Callback::Callback<DoorLockClusterGetLogRecordResponseCallback> * cb =
        Callback::Callback<DoorLockClusterGetLogRecordResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, logEntryId, timestamp, eventType, source, eventIdOrAlarmCode, userId, pin);
    return true;
}

bool emberAfDoorLockClusterGetPinResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint16_t userId,
                                                  uint8_t userStatus, uint8_t userType, uint8_t * pin)
{
    ChipLogProgress(Zcl, "GetPinResponse:");
    ChipLogProgress(Zcl, "  userId: %" PRIu16 "", userId);
    ChipLogProgress(Zcl, "  userStatus: %" PRIu8 "", userStatus);
    ChipLogProgress(Zcl, "  userType: %" PRIu8 "", userType);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  pin: %.*s", pin.size(), pin.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterGetPinResponseCallback");

    Callback::Callback<DoorLockClusterGetPinResponseCallback> * cb =
        Callback::Callback<DoorLockClusterGetPinResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, userId, userStatus, userType, pin);
    return true;
}

bool emberAfDoorLockClusterGetRfidResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint16_t userId,
                                                   uint8_t userStatus, uint8_t userType, uint8_t * rfid)
{
    ChipLogProgress(Zcl, "GetRfidResponse:");
    ChipLogProgress(Zcl, "  userId: %" PRIu16 "", userId);
    ChipLogProgress(Zcl, "  userStatus: %" PRIu8 "", userStatus);
    ChipLogProgress(Zcl, "  userType: %" PRIu8 "", userType);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  rfid: %.*s", rfid.size(), rfid.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterGetRfidResponseCallback");

    Callback::Callback<DoorLockClusterGetRfidResponseCallback> * cb =
        Callback::Callback<DoorLockClusterGetRfidResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, userId, userStatus, userType, rfid);
    return true;
}

bool emberAfDoorLockClusterGetUserTypeResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint16_t userId,
                                                       uint8_t userType)
{
    ChipLogProgress(Zcl, "GetUserTypeResponse:");
    ChipLogProgress(Zcl, "  userId: %" PRIu16 "", userId);
    ChipLogProgress(Zcl, "  userType: %" PRIu8 "", userType);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterGetUserTypeResponseCallback");

    Callback::Callback<DoorLockClusterGetUserTypeResponseCallback> * cb =
        Callback::Callback<DoorLockClusterGetUserTypeResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, userId, userType);
    return true;
}

bool emberAfDoorLockClusterGetWeekdayScheduleResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                              uint8_t scheduleId, uint16_t userId, uint8_t status, uint8_t daysMask,
                                                              uint8_t startHour, uint8_t startMinute, uint8_t endHour,
                                                              uint8_t endMinute)
{
    ChipLogProgress(Zcl, "GetWeekdayScheduleResponse:");
    ChipLogProgress(Zcl, "  scheduleId: %" PRIu8 "", scheduleId);
    ChipLogProgress(Zcl, "  userId: %" PRIu16 "", userId);
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  daysMask: %" PRIu8 "", daysMask);
    ChipLogProgress(Zcl, "  startHour: %" PRIu8 "", startHour);
    ChipLogProgress(Zcl, "  startMinute: %" PRIu8 "", startMinute);
    ChipLogProgress(Zcl, "  endHour: %" PRIu8 "", endHour);
    ChipLogProgress(Zcl, "  endMinute: %" PRIu8 "", endMinute);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterGetWeekdayScheduleResponseCallback");

    Callback::Callback<DoorLockClusterGetWeekdayScheduleResponseCallback> * cb =
        Callback::Callback<DoorLockClusterGetWeekdayScheduleResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, scheduleId, userId, status, daysMask, startHour, startMinute, endHour, endMinute);
    return true;
}

bool emberAfDoorLockClusterGetYeardayScheduleResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                              uint8_t scheduleId, uint16_t userId, uint8_t status,
                                                              uint32_t localStartTime, uint32_t localEndTime)
{
    ChipLogProgress(Zcl, "GetYeardayScheduleResponse:");
    ChipLogProgress(Zcl, "  scheduleId: %" PRIu8 "", scheduleId);
    ChipLogProgress(Zcl, "  userId: %" PRIu16 "", userId);
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  localStartTime: %" PRIu32 "", localStartTime);
    ChipLogProgress(Zcl, "  localEndTime: %" PRIu32 "", localEndTime);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterGetYeardayScheduleResponseCallback");

    Callback::Callback<DoorLockClusterGetYeardayScheduleResponseCallback> * cb =
        Callback::Callback<DoorLockClusterGetYeardayScheduleResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, scheduleId, userId, status, localStartTime, localEndTime);
    return true;
}

bool emberAfDoorLockClusterLockDoorResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "LockDoorResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterLockDoorResponseCallback");

    Callback::Callback<DoorLockClusterLockDoorResponseCallback> * cb =
        Callback::Callback<DoorLockClusterLockDoorResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterSetHolidayScheduleResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "SetHolidayScheduleResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterSetHolidayScheduleResponseCallback");

    Callback::Callback<DoorLockClusterSetHolidayScheduleResponseCallback> * cb =
        Callback::Callback<DoorLockClusterSetHolidayScheduleResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterSetPinResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "SetPinResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterSetPinResponseCallback");

    Callback::Callback<DoorLockClusterSetPinResponseCallback> * cb =
        Callback::Callback<DoorLockClusterSetPinResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterSetRfidResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "SetRfidResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterSetRfidResponseCallback");

    Callback::Callback<DoorLockClusterSetRfidResponseCallback> * cb =
        Callback::Callback<DoorLockClusterSetRfidResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterSetUserTypeResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "SetUserTypeResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterSetUserTypeResponseCallback");

    Callback::Callback<DoorLockClusterSetUserTypeResponseCallback> * cb =
        Callback::Callback<DoorLockClusterSetUserTypeResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterSetWeekdayScheduleResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "SetWeekdayScheduleResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterSetWeekdayScheduleResponseCallback");

    Callback::Callback<DoorLockClusterSetWeekdayScheduleResponseCallback> * cb =
        Callback::Callback<DoorLockClusterSetWeekdayScheduleResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterSetYeardayScheduleResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "SetYeardayScheduleResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterSetYeardayScheduleResponseCallback");

    Callback::Callback<DoorLockClusterSetYeardayScheduleResponseCallback> * cb =
        Callback::Callback<DoorLockClusterSetYeardayScheduleResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterUnlockDoorResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "UnlockDoorResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterUnlockDoorResponseCallback");

    Callback::Callback<DoorLockClusterUnlockDoorResponseCallback> * cb =
        Callback::Callback<DoorLockClusterUnlockDoorResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfDoorLockClusterUnlockWithTimeoutResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "UnlockWithTimeoutResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("DoorLockClusterUnlockWithTimeoutResponseCallback");

    Callback::Callback<DoorLockClusterUnlockWithTimeoutResponseCallback> * cb =
        Callback::Callback<DoorLockClusterUnlockWithTimeoutResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfGeneralCommissioningClusterArmFailSafeResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                   uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "ArmFailSafeResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("GeneralCommissioningClusterArmFailSafeResponseCallback");

    Callback::Callback<GeneralCommissioningClusterArmFailSafeResponseCallback> * cb =
        Callback::Callback<GeneralCommissioningClusterArmFailSafeResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfGeneralCommissioningClusterCommissioningCompleteResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                             uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "CommissioningCompleteResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("GeneralCommissioningClusterCommissioningCompleteResponseCallback");

    Callback::Callback<GeneralCommissioningClusterCommissioningCompleteResponseCallback> * cb =
        Callback::Callback<GeneralCommissioningClusterCommissioningCompleteResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfGeneralCommissioningClusterSetRegulatoryConfigResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                           uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "SetRegulatoryConfigResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("GeneralCommissioningClusterSetRegulatoryConfigResponseCallback");

    Callback::Callback<GeneralCommissioningClusterSetRegulatoryConfigResponseCallback> * cb =
        Callback::Callback<GeneralCommissioningClusterSetRegulatoryConfigResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfGroupsClusterAddGroupResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status,
                                                  uint16_t groupId)
{
    ChipLogProgress(Zcl, "AddGroupResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  groupId: %" PRIu16 "", groupId);

    GET_CLUSTER_RESPONSE_CALLBACKS("GroupsClusterAddGroupResponseCallback");

    Callback::Callback<GroupsClusterAddGroupResponseCallback> * cb =
        Callback::Callback<GroupsClusterAddGroupResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, groupId);
    return true;
}

bool emberAfGroupsClusterGetGroupMembershipResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t capacity,
                                                            uint8_t groupCount,
                                                            /* TYPE WARNING: array array defaults to */ uint8_t * groupList)
{
    ChipLogProgress(Zcl, "GetGroupMembershipResponse:");
    ChipLogProgress(Zcl, "  capacity: %" PRIu8 "", capacity);
    ChipLogProgress(Zcl, "  groupCount: %" PRIu8 "", groupCount);
    ChipLogProgress(Zcl, "  groupList: %p", groupList);

    GET_CLUSTER_RESPONSE_CALLBACKS("GroupsClusterGetGroupMembershipResponseCallback");

    Callback::Callback<GroupsClusterGetGroupMembershipResponseCallback> * cb =
        Callback::Callback<GroupsClusterGetGroupMembershipResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, capacity, groupCount, groupList);
    return true;
}

bool emberAfGroupsClusterRemoveGroupResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status,
                                                     uint16_t groupId)
{
    ChipLogProgress(Zcl, "RemoveGroupResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  groupId: %" PRIu16 "", groupId);

    GET_CLUSTER_RESPONSE_CALLBACKS("GroupsClusterRemoveGroupResponseCallback");

    Callback::Callback<GroupsClusterRemoveGroupResponseCallback> * cb =
        Callback::Callback<GroupsClusterRemoveGroupResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, groupId);
    return true;
}

bool emberAfGroupsClusterViewGroupResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status,
                                                   uint16_t groupId, uint8_t * groupName)
{
    ChipLogProgress(Zcl, "ViewGroupResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  groupId: %" PRIu16 "", groupId);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  groupName: %.*s", groupName.size(), groupName.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("GroupsClusterViewGroupResponseCallback");

    Callback::Callback<GroupsClusterViewGroupResponseCallback> * cb =
        Callback::Callback<GroupsClusterViewGroupResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, groupId, groupName);
    return true;
}

bool emberAfIdentifyClusterIdentifyQueryResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint16_t timeout)
{
    ChipLogProgress(Zcl, "IdentifyQueryResponse:");
    ChipLogProgress(Zcl, "  timeout: %" PRIu16 "", timeout);

    GET_CLUSTER_RESPONSE_CALLBACKS("IdentifyClusterIdentifyQueryResponseCallback");

    Callback::Callback<IdentifyClusterIdentifyQueryResponseCallback> * cb =
        Callback::Callback<IdentifyClusterIdentifyQueryResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, timeout);
    return true;
}

bool emberAfKeypadInputClusterSendKeyResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status)
{
    ChipLogProgress(Zcl, "SendKeyResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);

    GET_CLUSTER_RESPONSE_CALLBACKS("KeypadInputClusterSendKeyResponseCallback");

    Callback::Callback<KeypadInputClusterSendKeyResponseCallback> * cb =
        Callback::Callback<KeypadInputClusterSendKeyResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status);
    return true;
}

bool emberAfMediaPlaybackClusterMediaFastForwardResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                 uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaFastForwardResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaFastForwardResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaFastForwardResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaFastForwardResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaNextResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                          uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaNextResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaNextResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaNextResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaNextResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaPauseResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                           uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaPauseResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaPauseResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaPauseResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaPauseResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaPlayResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                          uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaPlayResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaPlayResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaPlayResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaPlayResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaPreviousResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                              uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaPreviousResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaPreviousResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaPreviousResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaPreviousResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaRewindResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                            uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaRewindResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaRewindResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaRewindResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaRewindResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaSeekResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                          uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaSeekResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaSeekResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaSeekResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaSeekResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaSkipBackwardResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                  uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaSkipBackwardResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaSkipBackwardResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaSkipBackwardResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaSkipBackwardResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaSkipForwardResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                 uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaSkipForwardResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaSkipForwardResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaSkipForwardResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaSkipForwardResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaStartOverResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                               uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaStartOverResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaStartOverResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaStartOverResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaStartOverResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfMediaPlaybackClusterMediaStopResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                          uint8_t mediaPlaybackStatus)
{
    ChipLogProgress(Zcl, "MediaStopResponse:");
    ChipLogProgress(Zcl, "  mediaPlaybackStatus: %" PRIu8 "", mediaPlaybackStatus);

    GET_CLUSTER_RESPONSE_CALLBACKS("MediaPlaybackClusterMediaStopResponseCallback");

    Callback::Callback<MediaPlaybackClusterMediaStopResponseCallback> * cb =
        Callback::Callback<MediaPlaybackClusterMediaStopResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, mediaPlaybackStatus);
    return true;
}

bool emberAfNetworkCommissioningClusterAddThreadNetworkResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                        uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "AddThreadNetworkResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("NetworkCommissioningClusterAddThreadNetworkResponseCallback");

    Callback::Callback<NetworkCommissioningClusterAddThreadNetworkResponseCallback> * cb =
        Callback::Callback<NetworkCommissioningClusterAddThreadNetworkResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfNetworkCommissioningClusterAddWiFiNetworkResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                      uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "AddWiFiNetworkResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("NetworkCommissioningClusterAddWiFiNetworkResponseCallback");

    Callback::Callback<NetworkCommissioningClusterAddWiFiNetworkResponseCallback> * cb =
        Callback::Callback<NetworkCommissioningClusterAddWiFiNetworkResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfNetworkCommissioningClusterDisableNetworkResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                      uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "DisableNetworkResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("NetworkCommissioningClusterDisableNetworkResponseCallback");

    Callback::Callback<NetworkCommissioningClusterDisableNetworkResponseCallback> * cb =
        Callback::Callback<NetworkCommissioningClusterDisableNetworkResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfNetworkCommissioningClusterEnableNetworkResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                     uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "EnableNetworkResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("NetworkCommissioningClusterEnableNetworkResponseCallback");

    Callback::Callback<NetworkCommissioningClusterEnableNetworkResponseCallback> * cb =
        Callback::Callback<NetworkCommissioningClusterEnableNetworkResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfNetworkCommissioningClusterRemoveNetworkResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                     uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "RemoveNetworkResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("NetworkCommissioningClusterRemoveNetworkResponseCallback");

    Callback::Callback<NetworkCommissioningClusterRemoveNetworkResponseCallback> * cb =
        Callback::Callback<NetworkCommissioningClusterRemoveNetworkResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfNetworkCommissioningClusterScanNetworksResponseCallback(
    EndpointId endpoint, app::CommandSender * commandObj, uint8_t errorCode, uint8_t * debugText,
    /* TYPE WARNING: array array defaults to */ uint8_t * wifiScanResults,
    /* TYPE WARNING: array array defaults to */ uint8_t * threadScanResults)
{
    ChipLogProgress(Zcl, "ScanNetworksResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());
    ChipLogProgress(Zcl, "  wifiScanResults: %p", wifiScanResults);
    ChipLogProgress(Zcl, "  threadScanResults: %p", threadScanResults);

    GET_CLUSTER_RESPONSE_CALLBACKS("NetworkCommissioningClusterScanNetworksResponseCallback");

    Callback::Callback<NetworkCommissioningClusterScanNetworksResponseCallback> * cb =
        Callback::Callback<NetworkCommissioningClusterScanNetworksResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText, wifiScanResults, threadScanResults);
    return true;
}

bool emberAfNetworkCommissioningClusterUpdateThreadNetworkResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                           uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "UpdateThreadNetworkResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("NetworkCommissioningClusterUpdateThreadNetworkResponseCallback");

    Callback::Callback<NetworkCommissioningClusterUpdateThreadNetworkResponseCallback> * cb =
        Callback::Callback<NetworkCommissioningClusterUpdateThreadNetworkResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfNetworkCommissioningClusterUpdateWiFiNetworkResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                         uint8_t errorCode, uint8_t * debugText)
{
    ChipLogProgress(Zcl, "UpdateWiFiNetworkResponse:");
    ChipLogProgress(Zcl, "  errorCode: %" PRIu8 "", errorCode);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  debugText: %.*s", debugText.size(), debugText.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("NetworkCommissioningClusterUpdateWiFiNetworkResponseCallback");

    Callback::Callback<NetworkCommissioningClusterUpdateWiFiNetworkResponseCallback> * cb =
        Callback::Callback<NetworkCommissioningClusterUpdateWiFiNetworkResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, errorCode, debugText);
    return true;
}

bool emberAfOtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                               uint8_t action, uint32_t delayedActionTime)
{
    ChipLogProgress(Zcl, "ApplyUpdateRequestResponse:");
    ChipLogProgress(Zcl, "  action: %" PRIu8 "", action);
    ChipLogProgress(Zcl, "  delayedActionTime: %" PRIu32 "", delayedActionTime);

    GET_CLUSTER_RESPONSE_CALLBACKS("OtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallback");

    Callback::Callback<OtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallback> * cb =
        Callback::Callback<OtaSoftwareUpdateProviderClusterApplyUpdateRequestResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, action, delayedActionTime);
    return true;
}

bool emberAfOtaSoftwareUpdateProviderClusterQueryImageResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                       uint8_t status, uint32_t delayedActionTime,
                                                                       uint8_t * imageURI, uint32_t softwareVersion,
                                                                       chip::ByteSpan updateToken, bool userConsentNeeded,
                                                                       chip::ByteSpan metadataForRequestor)
{
    ChipLogProgress(Zcl, "QueryImageResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  delayedActionTime: %" PRIu32 "", delayedActionTime);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  imageURI: %.*s", imageURI.size(), imageURI.data());
    ChipLogProgress(Zcl, "  softwareVersion: %" PRIu32 "", softwareVersion);
    ChipLogProgress(Zcl, "  updateToken: %zu", updateToken.size());
    ChipLogProgress(Zcl, "  userConsentNeeded: %d", userConsentNeeded);
    ChipLogProgress(Zcl, "  metadataForRequestor: %zu", metadataForRequestor.size());

    GET_CLUSTER_RESPONSE_CALLBACKS("OtaSoftwareUpdateProviderClusterQueryImageResponseCallback");

    Callback::Callback<OtaSoftwareUpdateProviderClusterQueryImageResponseCallback> * cb =
        Callback::Callback<OtaSoftwareUpdateProviderClusterQueryImageResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, delayedActionTime, imageURI, softwareVersion, updateToken, userConsentNeeded,
              metadataForRequestor);
    return true;
}

bool emberAfOperationalCredentialsClusterNOCResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                             uint8_t StatusCode, uint8_t FabricIndex, chip::ByteSpan DebugText)
{
    ChipLogProgress(Zcl, "NOCResponse:");
    ChipLogProgress(Zcl, "  StatusCode: %" PRIu8 "", StatusCode);
    ChipLogProgress(Zcl, "  FabricIndex: %" PRIu8 "", FabricIndex);
    ChipLogProgress(Zcl, "  DebugText: %zu", DebugText.size());

    GET_CLUSTER_RESPONSE_CALLBACKS("OperationalCredentialsClusterNOCResponseCallback");

    Callback::Callback<OperationalCredentialsClusterNOCResponseCallback> * cb =
        Callback::Callback<OperationalCredentialsClusterNOCResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, StatusCode, FabricIndex, DebugText);
    return true;
}

bool emberAfOperationalCredentialsClusterOpCSRResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                               chip::ByteSpan NOCSRElements, chip::ByteSpan AttestationSignature)
{
    ChipLogProgress(Zcl, "OpCSRResponse:");
    ChipLogProgress(Zcl, "  NOCSRElements: %zu", NOCSRElements.size());
    ChipLogProgress(Zcl, "  AttestationSignature: %zu", AttestationSignature.size());

    GET_CLUSTER_RESPONSE_CALLBACKS("OperationalCredentialsClusterOpCSRResponseCallback");

    Callback::Callback<OperationalCredentialsClusterOpCSRResponseCallback> * cb =
        Callback::Callback<OperationalCredentialsClusterOpCSRResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, NOCSRElements, AttestationSignature);
    return true;
}

bool emberAfScenesClusterAddSceneResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status,
                                                  uint16_t groupId, uint8_t sceneId)
{
    ChipLogProgress(Zcl, "AddSceneResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  groupId: %" PRIu16 "", groupId);
    ChipLogProgress(Zcl, "  sceneId: %" PRIu8 "", sceneId);

    GET_CLUSTER_RESPONSE_CALLBACKS("ScenesClusterAddSceneResponseCallback");

    Callback::Callback<ScenesClusterAddSceneResponseCallback> * cb =
        Callback::Callback<ScenesClusterAddSceneResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, groupId, sceneId);
    return true;
}

bool emberAfScenesClusterGetSceneMembershipResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status,
                                                            uint8_t capacity, uint16_t groupId, uint8_t sceneCount,
                                                            /* TYPE WARNING: array array defaults to */ uint8_t * sceneList)
{
    ChipLogProgress(Zcl, "GetSceneMembershipResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  capacity: %" PRIu8 "", capacity);
    ChipLogProgress(Zcl, "  groupId: %" PRIu16 "", groupId);
    ChipLogProgress(Zcl, "  sceneCount: %" PRIu8 "", sceneCount);
    ChipLogProgress(Zcl, "  sceneList: %p", sceneList);

    GET_CLUSTER_RESPONSE_CALLBACKS("ScenesClusterGetSceneMembershipResponseCallback");

    Callback::Callback<ScenesClusterGetSceneMembershipResponseCallback> * cb =
        Callback::Callback<ScenesClusterGetSceneMembershipResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, capacity, groupId, sceneCount, sceneList);
    return true;
}

bool emberAfScenesClusterRemoveAllScenesResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status,
                                                         uint16_t groupId)
{
    ChipLogProgress(Zcl, "RemoveAllScenesResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  groupId: %" PRIu16 "", groupId);

    GET_CLUSTER_RESPONSE_CALLBACKS("ScenesClusterRemoveAllScenesResponseCallback");

    Callback::Callback<ScenesClusterRemoveAllScenesResponseCallback> * cb =
        Callback::Callback<ScenesClusterRemoveAllScenesResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, groupId);
    return true;
}

bool emberAfScenesClusterRemoveSceneResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status,
                                                     uint16_t groupId, uint8_t sceneId)
{
    ChipLogProgress(Zcl, "RemoveSceneResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  groupId: %" PRIu16 "", groupId);
    ChipLogProgress(Zcl, "  sceneId: %" PRIu8 "", sceneId);

    GET_CLUSTER_RESPONSE_CALLBACKS("ScenesClusterRemoveSceneResponseCallback");

    Callback::Callback<ScenesClusterRemoveSceneResponseCallback> * cb =
        Callback::Callback<ScenesClusterRemoveSceneResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, groupId, sceneId);
    return true;
}

bool emberAfScenesClusterStoreSceneResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status,
                                                    uint16_t groupId, uint8_t sceneId)
{
    ChipLogProgress(Zcl, "StoreSceneResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  groupId: %" PRIu16 "", groupId);
    ChipLogProgress(Zcl, "  sceneId: %" PRIu8 "", sceneId);

    GET_CLUSTER_RESPONSE_CALLBACKS("ScenesClusterStoreSceneResponseCallback");

    Callback::Callback<ScenesClusterStoreSceneResponseCallback> * cb =
        Callback::Callback<ScenesClusterStoreSceneResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, groupId, sceneId);
    return true;
}

bool emberAfScenesClusterViewSceneResponseCallback(EndpointId endpoint, app::CommandSender * commandObj, uint8_t status,
                                                   uint16_t groupId, uint8_t sceneId, uint16_t transitionTime, uint8_t * sceneName,
                                                   /* TYPE WARNING: array array defaults to */ uint8_t * extensionFieldSets)
{
    ChipLogProgress(Zcl, "ViewSceneResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    ChipLogProgress(Zcl, "  groupId: %" PRIu16 "", groupId);
    ChipLogProgress(Zcl, "  sceneId: %" PRIu8 "", sceneId);
    ChipLogProgress(Zcl, "  transitionTime: %" PRIu16 "", transitionTime);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  sceneName: %.*s", sceneName.size(), sceneName.data());
    ChipLogProgress(Zcl, "  extensionFieldSets: %p", extensionFieldSets);

    GET_CLUSTER_RESPONSE_CALLBACKS("ScenesClusterViewSceneResponseCallback");

    Callback::Callback<ScenesClusterViewSceneResponseCallback> * cb =
        Callback::Callback<ScenesClusterViewSceneResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, groupId, sceneId, transitionTime, sceneName, extensionFieldSets);
    return true;
}

bool emberAfTvChannelClusterChangeChannelResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                          /* TYPE WARNING: array array defaults to */ uint8_t * ChannelMatch,
                                                          uint8_t ErrorType)
{
    ChipLogProgress(Zcl, "ChangeChannelResponse:");
    ChipLogProgress(Zcl, "  ChannelMatch: %p", ChannelMatch);
    ChipLogProgress(Zcl, "  ErrorType: %" PRIu8 "", ErrorType);

    GET_CLUSTER_RESPONSE_CALLBACKS("TvChannelClusterChangeChannelResponseCallback");

    Callback::Callback<TvChannelClusterChangeChannelResponseCallback> * cb =
        Callback::Callback<TvChannelClusterChangeChannelResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, ChannelMatch, ErrorType);
    return true;
}

bool emberAfTargetNavigatorClusterNavigateTargetResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                                 uint8_t status, uint8_t * data)
{
    ChipLogProgress(Zcl, "NavigateTargetResponse:");
    ChipLogProgress(Zcl, "  status: %" PRIu8 "", status);
    // Currently the generated code emits `uint8_t *` for CHAR_STRING, it needs to emits ByteSpan
    // ChipLogProgress(Zcl, "  data: %.*s", data.size(), data.data());

    GET_CLUSTER_RESPONSE_CALLBACKS("TargetNavigatorClusterNavigateTargetResponseCallback");

    Callback::Callback<TargetNavigatorClusterNavigateTargetResponseCallback> * cb =
        Callback::Callback<TargetNavigatorClusterNavigateTargetResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, status, data);
    return true;
}

bool emberAfTestClusterClusterTestAddArgumentsResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                               uint8_t returnValue)
{
    ChipLogProgress(Zcl, "TestAddArgumentsResponse:");
    ChipLogProgress(Zcl, "  returnValue: %" PRIu8 "", returnValue);

    GET_CLUSTER_RESPONSE_CALLBACKS("TestClusterClusterTestAddArgumentsResponseCallback");

    Callback::Callback<TestClusterClusterTestAddArgumentsResponseCallback> * cb =
        Callback::Callback<TestClusterClusterTestAddArgumentsResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, returnValue);
    return true;
}

bool emberAfTestClusterClusterTestSpecificResponseCallback(EndpointId endpoint, app::CommandSender * commandObj,
                                                           uint8_t returnValue)
{
    ChipLogProgress(Zcl, "TestSpecificResponse:");
    ChipLogProgress(Zcl, "  returnValue: %" PRIu8 "", returnValue);

    GET_CLUSTER_RESPONSE_CALLBACKS("TestClusterClusterTestSpecificResponseCallback");

    Callback::Callback<TestClusterClusterTestSpecificResponseCallback> * cb =
        Callback::Callback<TestClusterClusterTestSpecificResponseCallback>::FromCancelable(onSuccessCallback);
    cb->mCall(cb->mContext, returnValue);
    return true;
}
