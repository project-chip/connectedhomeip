// This IDL was generated automatically by ZAP.
// It is for view/code review purposes only.

struct LabelStruct {
  CHAR_STRING label = 1;
  CHAR_STRING value = 2;
}

server cluster AdministratorCommissioning = 60 {
  enum CommissioningWindowStatus : ENUM8 {
    kWindowNotOpen = 0;
    kEnhancedWindowOpen = 1;
    kBasicWindowOpen = 2;
  }

  enum StatusCode : ENUM8 {
    kBusy = 1;
    kPAKEParameterError = 2;
    kWindowNotOpen = 3;
  }

  attribute(readonly) int8u windowStatus = 0;
  attribute(readonly) fabric_idx adminFabricIndex = 1;
  attribute(readonly) int16u adminVendorId = 2;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct OpenBasicCommissioningWindowRequest {
    INT16U CommissioningTimeout;
  }

  request struct OpenCommissioningWindowRequest {
    INT16U CommissioningTimeout;
    OCTET_STRING PAKEVerifier;
    INT16U Discriminator;
    INT32U Iterations;
    OCTET_STRING Salt;
    INT16U PasscodeID;
  }

  request struct RevokeCommissioningRequest {
  }

  command OpenBasicCommissioningWindow(OpenBasicCommissioningWindowRequest): DefaultSuccess = 1;
  command OpenCommissioningWindow(OpenCommissioningWindowRequest): DefaultSuccess = 0;
  command RevokeCommissioning(RevokeCommissioningRequest): DefaultSuccess = 2;
}

server cluster Basic = 40 {
  critical event StartUp = 0 {
    INT32U softwareVersion = 0;
  }

  critical event ShutDown = 1 {
  }

  info event Leave = 2 {
  }

  info event ReachableChanged = 3 {
    boolean reachableNewValue = 0;
  }

  attribute(readonly, reportable) int16u interactionModelVersion = 0;
  attribute(readonly, reportable) char_string vendorName = 1;
  attribute(readonly, reportable) vendor_id vendorID = 2;
  attribute(readonly, reportable) char_string productName = 3;
  attribute(readonly, reportable) int16u productID = 4;
  attribute(writable, reportable) char_string nodeLabel = 5;
  attribute(writable, reportable) char_string location = 6;
  attribute(readonly, reportable) int16u hardwareVersion = 7;
  attribute(readonly, reportable) char_string hardwareVersionString = 8;
  attribute(readonly, reportable) int32u softwareVersion = 9;
  attribute(readonly, reportable) char_string softwareVersionString = 10;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct MfgSpecificPingRequest {
  }

  command MfgSpecificPing(MfgSpecificPingRequest): DefaultSuccess = 0;
}

server cluster Descriptor = 29 {
  struct DeviceType {
    DEVTYPE_ID type = 1;
    INT16U revision = 2;
  }

  attribute(readonly, reportable) DeviceType deviceList[] = 0;
  attribute(readonly, reportable) CLUSTER_ID serverList[] = 1;
  attribute(readonly, reportable) CLUSTER_ID clientList[] = 2;
  attribute(readonly, reportable) ENDPOINT_NO partsList[] = 3;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster DiagnosticLogs = 50 {
  enum LogsIntent : ENUM8 {
    kEndUserSupport = 0;
    kNetworkDiag = 1;
    kCrashLogs = 2;
  }

  enum LogsStatus : ENUM8 {
    kSuccess = 0;
    kExhausted = 1;
    kNoLogs = 2;
    kBusy = 3;
    kDenied = 4;
  }

  enum LogsTransferProtocol : ENUM8 {
    kResponsePayload = 0;
    kBdx = 1;
  }


  request struct RetrieveLogsRequestRequest {
    LogsIntent intent;
    LogsTransferProtocol requestedProtocol;
    OCTET_STRING transferFileDesignator;
  }

  command RetrieveLogsRequest(RetrieveLogsRequestRequest): RetrieveLogsResponse = 0;
}

server cluster FixedLabel = 64 {
  attribute(readonly) LabelStruct labelList[] = 0;
  attribute(readonly) int16u clusterRevision = 65533;
}

client cluster FlowMeasurement = 1028 {
  attribute(readonly, reportable) int16s measuredValue = 0;
  attribute(readonly, reportable) int16s minMeasuredValue = 1;
  attribute(readonly, reportable) int16s maxMeasuredValue = 2;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster FlowMeasurement = 1028 {
  attribute(readonly, reportable) int16s measuredValue = 0;
  attribute(readonly, reportable) int16s minMeasuredValue = 1;
  attribute(readonly, reportable) int16s maxMeasuredValue = 2;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster GeneralCommissioning = 48 {
  enum GeneralCommissioningError : ENUM8 {
    kOk = 0;
    kValueOutsideRange = 1;
    kInvalidAuthentication = 2;
    kNotCommissioning = 3;
  }

  enum RegulatoryLocationType : ENUM8 {
    kIndoor = 0;
    kOutdoor = 1;
    kIndoorOutdoor = 2;
  }

  struct BasicCommissioningInfoType {
    INT32U failSafeExpiryLengthMs = 1;
  }

  attribute(writable, reportable) int64u breadcrumb = 0;
  attribute(readonly, reportable) BasicCommissioningInfoType basicCommissioningInfoList[] = 1;
  attribute(readonly) enum8 regulatoryConfig = 2;
  attribute(readonly) enum8 locationCapability = 3;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct ArmFailSafeRequest {
    INT16U expiryLengthSeconds;
    INT64U breadcrumb;
    INT32U timeoutMs;
  }

  request struct CommissioningCompleteRequest {
  }

  request struct SetRegulatoryConfigRequest {
    RegulatoryLocationType location;
    CHAR_STRING countryCode;
    INT64U breadcrumb;
    INT32U timeoutMs;
  }

  response struct ArmFailSafeResponse {
    GeneralCommissioningError errorCode;
    CHAR_STRING debugText;
  }

  response struct CommissioningCompleteResponse {
    GeneralCommissioningError errorCode;
    CHAR_STRING debugText;
  }

  response struct SetRegulatoryConfigResponse {
    GeneralCommissioningError errorCode;
    CHAR_STRING debugText;
  }

  command ArmFailSafe(ArmFailSafeRequest): ArmFailSafeResponse = 0;
  command CommissioningComplete(CommissioningCompleteRequest): CommissioningCompleteResponse = 4;
  command SetRegulatoryConfig(SetRegulatoryConfigRequest): SetRegulatoryConfigResponse = 2;
}

server cluster GeneralDiagnostics = 51 {
  enum BootReasonType : ENUM8 {
    kUnspecified = 0;
    kPowerOnReboot = 1;
    kBrownOutReset = 2;
    kSoftwareWatchdogReset = 3;
    kHardwareWatchdogReset = 4;
    kSoftwareUpdateCompleted = 5;
    kSoftwareReset = 6;
  }

  enum HardwareFaultType : ENUM8 {
    kUnspecified = 0;
    kRadio = 1;
    kSensor = 2;
    kResettableOverTemp = 3;
    kNonResettableOverTemp = 4;
    kPowerSource = 5;
    kVisualDisplayFault = 6;
    kAudioOutputFault = 7;
    kUserInterfaceFault = 8;
    kNonVolatileMemoryError = 9;
    kTamperDetected = 10;
  }

  enum InterfaceType : ENUM8 {
    kUnspecified = 0;
    kWiFi = 1;
    kEthernet = 2;
    kCellular = 3;
    kThread = 4;
  }

  enum NetworkFaultType : ENUM8 {
    kUnspecified = 0;
    kHardwareFailure = 1;
    kNetworkJammed = 2;
    kConnectionFailed = 3;
  }

  enum RadioFaultType : ENUM8 {
    kUnspecified = 0;
    kWiFiFault = 1;
    kCellularFault = 2;
    kThreadFault = 3;
    kNFCFault = 4;
    kBLEFault = 5;
    kEthernetFault = 6;
  }

  struct NetworkInterfaceType {
    CHAR_STRING name = 1;
    BOOLEAN fabricConnected = 2;
    BOOLEAN offPremiseServicesReachableIPv4 = 3;
    BOOLEAN offPremiseServicesReachableIPv6 = 4;
    OCTET_STRING hardwareAddress = 5;
    InterfaceType type = 6;
  }

  critical event HardwareFaultChange = 0 {
    HardwareFaultType current[] = 0;
    HardwareFaultType previous[] = 1;
  }

  critical event RadioFaultChange = 1 {
    RadioFaultType current[] = 0;
    RadioFaultType previous[] = 1;
  }

  critical event NetworkFaultChange = 2 {
    NetworkFaultType current[] = 0;
    NetworkFaultType previous[] = 1;
  }

  critical event BootReason = 3 {
    BootReasonType bootReason = 0;
  }

  attribute(readonly, reportable) NetworkInterfaceType networkInterfaces[] = 0;
  attribute(readonly, reportable) int16u rebootCount = 1;
  attribute(readonly, reportable) int64u upTime = 2;
  attribute(readonly, reportable) int32u totalOperationalHours = 3;
  attribute(readonly, reportable) enum8 bootReasons = 4;
  attribute(readonly, reportable) ENUM8 activeHardwareFaults[] = 5;
  attribute(readonly, reportable) ENUM8 activeRadioFaults[] = 6;
  attribute(readonly, reportable) ENUM8 activeNetworkFaults[] = 7;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster LevelControl = 8 {
  enum MoveMode : ENUM8 {
    kUp = 0;
    kDown = 1;
  }

  enum StepMode : ENUM8 {
    kUp = 0;
    kDown = 1;
  }

  attribute(readonly, reportable) int8u currentLevel = 0;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct MoveRequest {
    MoveMode moveMode;
    INT8U rate;
    BITMAP8 optionMask;
    BITMAP8 optionOverride;
  }

  request struct MoveToLevelRequest {
    INT8U level;
    INT16U transitionTime;
    BITMAP8 optionMask;
    BITMAP8 optionOverride;
  }

  request struct MoveToLevelWithOnOffRequest {
    INT8U level;
    INT16U transitionTime;
  }

  request struct MoveWithOnOffRequest {
    MoveMode moveMode;
    INT8U rate;
  }

  request struct StepRequest {
    StepMode stepMode;
    INT8U stepSize;
    INT16U transitionTime;
    BITMAP8 optionMask;
    BITMAP8 optionOverride;
  }

  request struct StepWithOnOffRequest {
    StepMode stepMode;
    INT8U stepSize;
    INT16U transitionTime;
  }

  request struct StopRequest {
    BITMAP8 optionMask;
    BITMAP8 optionOverride;
  }

  request struct StopWithOnOffRequest {
  }

  command Move(MoveRequest): DefaultSuccess = 1;
  command MoveToLevel(MoveToLevelRequest): DefaultSuccess = 0;
  command MoveToLevelWithOnOff(MoveToLevelWithOnOffRequest): DefaultSuccess = 4;
  command MoveWithOnOff(MoveWithOnOffRequest): DefaultSuccess = 5;
  command Step(StepRequest): DefaultSuccess = 2;
  command StepWithOnOff(StepWithOnOffRequest): DefaultSuccess = 6;
  command Stop(StopRequest): DefaultSuccess = 3;
  command StopWithOnOff(StopWithOnOffRequest): DefaultSuccess = 7;
}

server cluster LocalizationConfiguration = 43 {
  attribute(writable) char_string activeLocale = 1;
  attribute(readonly) CHAR_STRING supportedLocales[] = 2;
}

server cluster NetworkCommissioning = 49 {
  enum NetworkCommissioningStatus : ENUM8 {
    kSuccess = 0;
    kOutOfRange = 1;
    kBoundsExceeded = 2;
    kNetworkIDNotFound = 3;
    kDuplicateNetworkID = 4;
    kNetworkNotFound = 5;
    kRegulatoryError = 6;
    kAuthFailure = 7;
    kUnsupportedSecurity = 8;
    kOtherConnectionFailure = 9;
    kIPV6Failed = 10;
    kIPBindFailed = 11;
    kUnknownError = 12;
  }

  enum WiFiBand : ENUM8 {
    k2g4 = 0;
    k3g65 = 1;
    k5g = 2;
    k6g = 3;
    k60g = 4;
  }

  struct NetworkInfo {
    OCTET_STRING networkID = 1;
    BOOLEAN connected = 2;
  }

  struct WiFiInterfaceScanResult {
    BITMAP8 security = 1;
    OCTET_STRING ssid = 2;
    OCTET_STRING bssid = 3;
    INT16U channel = 4;
    WiFiBand wiFiBand = 5;
    INT8S rssi = 6;
  }

  struct ThreadInterfaceScanResult {
    INT64U panId = 1;
    INT64U extendedPanId = 2;
    CHAR_STRING networkName = 3;
    INT16U channel = 4;
    INT8U version = 5;
    INT64U extendedAddress = 6;
    INT8S rssi = 7;
    INT8U lqi = 8;
  }

  attribute(readonly) int8u maxNetworks = 0;
  attribute(readonly) NetworkInfo networks[] = 1;
  attribute(readonly) int8u scanMaxTimeSeconds = 2;
  attribute(readonly) int8u connectMaxTimeSeconds = 3;
  attribute(writable) boolean interfaceEnabled = 4;
  attribute(readonly) NetworkCommissioningStatus lastNetworkingStatus = 5;
  attribute(readonly) octet_string lastNetworkID = 6;
  attribute(readonly) int32u lastConnectErrorValue = 7;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct AddOrUpdateThreadNetworkRequest {
    OCTET_STRING OperationalDataset;
    INT64U Breadcrumb;
  }

  request struct AddOrUpdateWiFiNetworkRequest {
    OCTET_STRING SSID;
    OCTET_STRING Credentials;
    INT64U breadcrumb;
  }

  request struct ConnectNetworkRequest {
    OCTET_STRING NetworkID;
    INT64U Breadcrumb;
  }

  request struct RemoveNetworkRequest {
    OCTET_STRING NetworkID;
    INT64U Breadcrumb;
  }

  request struct ReorderNetworkRequest {
    OCTET_STRING NetworkID;
    INT8U NetworkIndex;
    INT64U Breadcrumb;
  }

  request struct ScanNetworksRequest {
    OCTET_STRING SSID;
    INT64U Breadcrumb;
  }

  response struct ConnectNetworkResponse {
    NetworkCommissioningStatus NetworkingStatus;
    CHAR_STRING DebugText;
    INT32S ErrorValue;
  }

  response struct NetworkConfigResponse {
    NetworkCommissioningStatus NetworkingStatus;
    CHAR_STRING DebugText;
  }

  response struct ScanNetworksResponse {
    NetworkCommissioningStatus NetworkingStatus;
    CHAR_STRING DebugText;
    optional WiFiInterfaceScanResult WiFiScanResults;
    optional ThreadInterfaceScanResult ThreadScanResults;
  }

  command AddOrUpdateThreadNetwork(AddOrUpdateThreadNetworkRequest): NetworkConfigResponse = 3;
  command AddOrUpdateWiFiNetwork(AddOrUpdateWiFiNetworkRequest): NetworkConfigResponse = 2;
  command ConnectNetwork(ConnectNetworkRequest): ConnectNetworkResponse = 6;
  command RemoveNetwork(RemoveNetworkRequest): NetworkConfigResponse = 4;
  command ReorderNetwork(ReorderNetworkRequest): NetworkConfigResponse = 8;
  command ScanNetworks(ScanNetworksRequest): ScanNetworksResponse = 0;
}

server cluster OnOff = 6 {
  enum OnOffDelayedAllOffEffectVariant : enum8 {
    kFadeToOffIn0p8Seconds = 0;
    kNoFade = 1;
    k50PercentDimDownIn0p8SecondsThenFadeToOffIn12Seconds = 2;
  }

  enum OnOffDyingLightEffectVariant : enum8 {
    k20PercenterDimUpIn0p5SecondsThenFadeToOffIn1Second = 0;
  }

  enum OnOffEffectIdentifier : enum8 {
    kDelayedAllOff = 0;
    kDyingLight = 1;
  }

  attribute(readonly, reportable) boolean onOff = 0;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct OffRequest {
  }

  request struct OnRequest {
  }

  request struct ToggleRequest {
  }

  command Off(OffRequest): DefaultSuccess = 0;
  command On(OnRequest): DefaultSuccess = 1;
  command Toggle(ToggleRequest): DefaultSuccess = 2;
}

server cluster OperationalCredentials = 62 {
  enum NodeOperationalCertStatus : ENUM8 {
    kSuccess = 0;
    kInvalidPublicKey = 1;
    kInvalidNodeOpId = 2;
    kInvalidNOC = 3;
    kMissingCsr = 4;
    kTableFull = 5;
    kInsufficientPrivilege = 8;
    kFabricConflict = 9;
    kLabelConflict = 10;
    kInvalidFabricIndex = 11;
  }

  struct FabricDescriptor {
    INT8U fabricIndex = 1;
    OCTET_STRING rootPublicKey = 2;
    INT16U vendorId = 3;
    FABRIC_ID fabricId = 4;
    NODE_ID nodeId = 5;
    CHAR_STRING label = 6;
  }

  attribute(readonly, reportable) FabricDescriptor fabricsList[] = 1;
  attribute(readonly, reportable) int8u supportedFabrics = 2;
  attribute(readonly, reportable) int8u commissionedFabrics = 3;
  attribute(readonly, reportable) OCTET_STRING trustedRootCertificates[] = 4;
  attribute(readonly, reportable) fabric_idx currentFabricIndex = 5;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct AddNOCRequest {
    OCTET_STRING NOCValue;
    optional OCTET_STRING ICACValue;
    OCTET_STRING IPKValue;
    NODE_ID CaseAdminNode;
    INT16U AdminVendorId;
  }

  request struct AddTrustedRootCertificateRequest {
    OCTET_STRING RootCertificate;
  }

  request struct AttestationRequestRequest {
    OCTET_STRING AttestationNonce;
  }

  request struct CertificateChainRequestRequest {
    INT8U CertificateType;
  }

  request struct OpCSRRequestRequest {
    OCTET_STRING CSRNonce;
  }

  request struct RemoveFabricRequest {
    INT8U FabricIndex;
  }

  request struct RemoveTrustedRootCertificateRequest {
    OCTET_STRING TrustedRootIdentifier;
  }

  request struct UpdateFabricLabelRequest {
    CHAR_STRING Label;
  }

  request struct UpdateNOCRequest {
    OCTET_STRING NOCValue;
    optional OCTET_STRING ICACValue;
  }

  response struct AttestationResponse {
    OCTET_STRING AttestationElements;
    OCTET_STRING Signature;
  }

  response struct CertificateChainResponse {
    OCTET_STRING Certificate;
  }

  response struct NOCResponse {
    INT8U StatusCode;
    INT8U FabricIndex;
    CHAR_STRING DebugText;
  }

  response struct OpCSRResponse {
    OCTET_STRING NOCSRElements;
    OCTET_STRING AttestationSignature;
  }

  command AddNOC(AddNOCRequest): NOCResponse = 6;
  command AddTrustedRootCertificate(AddTrustedRootCertificateRequest): DefaultSuccess = 11;
  command AttestationRequest(AttestationRequestRequest): AttestationResponse = 0;
  command CertificateChainRequest(CertificateChainRequestRequest): CertificateChainResponse = 2;
  command OpCSRRequest(OpCSRRequestRequest): OpCSRResponse = 4;
  command RemoveFabric(RemoveFabricRequest): NOCResponse = 10;
  command RemoveTrustedRootCertificate(RemoveTrustedRootCertificateRequest): DefaultSuccess = 12;
  command UpdateFabricLabel(UpdateFabricLabelRequest): NOCResponse = 9;
  command UpdateNOC(UpdateNOCRequest): NOCResponse = 7;
}

client cluster PressureMeasurement = 1027 {
  attribute(readonly, reportable) int16s measuredValue = 0;
  attribute(readonly, reportable) int16s minMeasuredValue = 1;
  attribute(readonly, reportable) int16s maxMeasuredValue = 2;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster PressureMeasurement = 1027 {
  attribute(readonly, reportable) int16s measuredValue = 0;
  attribute(readonly, reportable) int16s minMeasuredValue = 1;
  attribute(readonly, reportable) int16s maxMeasuredValue = 2;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster PumpConfigurationAndControl = 512 {
  enum PumpControlMode : ENUM8 {
    kConstantSpeed = 0;
    kConstantPressure = 1;
    kProportionalPressure = 2;
    kConstantFlow = 3;
    kConstantTemperature = 5;
    kAutomatic = 7;
  }

  enum PumpOperationMode : ENUM8 {
    kNormal = 0;
    kMinimum = 1;
    kMaximum = 2;
    kLocal = 3;
  }

  info event SupplyVoltageLow = 0 {
  }

  info event SupplyVoltageHigh = 1 {
  }

  info event PowerMissingPhase = 2 {
  }

  info event SystemPressureLow = 3 {
  }

  info event SystemPressureHigh = 4 {
  }

  critical event DryRunning = 5 {
  }

  info event MotorTemperatureHigh = 6 {
  }

  critical event PumpMotorFatalFailure = 7 {
  }

  info event ElectronicTemperatureHigh = 8 {
  }

  critical event PumpBlocked = 9 {
  }

  info event SensorFailure = 10 {
  }

  info event ElectronicNonFatalFailure = 11 {
  }

  critical event ElectronicFatalFailure = 12 {
  }

  info event GeneralFault = 13 {
  }

  info event Leakage = 14 {
  }

  info event AirDetection = 15 {
  }

  info event TurbineOperation = 16 {
  }

  attribute(readonly, reportable) int16s maxPressure = 0;
  attribute(readonly, reportable) int16u maxSpeed = 1;
  attribute(readonly, reportable) int16u maxFlow = 2;
  attribute(readonly, reportable) int16s minConstPressure = 3;
  attribute(readonly, reportable) int16s maxConstPressure = 4;
  attribute(readonly, reportable) int16s minCompPressure = 5;
  attribute(readonly, reportable) int16s maxCompPressure = 6;
  attribute(readonly, reportable) int16u minConstSpeed = 7;
  attribute(readonly, reportable) int16u maxConstSpeed = 8;
  attribute(readonly, reportable) int16u minConstFlow = 9;
  attribute(readonly, reportable) int16u maxConstFlow = 10;
  attribute(readonly, reportable) int16s minConstTemp = 11;
  attribute(readonly, reportable) int16s maxConstTemp = 12;
  attribute(readonly, reportable) bitmap16 pumpStatus = 16;
  attribute(readonly, reportable) enum8 effectiveOperationMode = 17;
  attribute(readonly, reportable) enum8 effectiveControlMode = 18;
  attribute(readonly, reportable) int16s capacity = 19;
  attribute(readonly, reportable) int16u speed = 20;
  attribute(writable, reportable) int24u lifetimeRunningHours = 21;
  attribute(readonly, reportable) int24u power = 22;
  attribute(writable, reportable) int32u lifetimeEnergyConsumed = 23;
  attribute(writable, reportable) enum8 operationMode = 32;
  attribute(writable, reportable) enum8 controlMode = 33;
  attribute(readonly, reportable) bitmap16 alarmMask = 34;
  attribute(readonly, reportable) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster SoftwareDiagnostics = 52 {
  struct ThreadMetrics {
    INT64U id = 1;
    CHAR_STRING name = 2;
    INT32U stackFreeCurrent = 3;
    INT32U stackFreeMinimum = 4;
    INT32U stackSize = 5;
  }

  info event SoftwareFault = 0 {
    SoftwareFault softwareFault = 0;
  }

  attribute(readonly, reportable) ThreadMetrics threadMetrics[] = 0;
  attribute(readonly, reportable) int64u currentHeapFree = 1;
  attribute(readonly, reportable) int64u currentHeapUsed = 2;
  attribute(readonly, reportable) int64u currentHeapHighWatermark = 3;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

client cluster TemperatureMeasurement = 1026 {
  attribute(readonly, reportable) int16s measuredValue = 0;
  attribute(readonly, reportable) int16s minMeasuredValue = 1;
  attribute(readonly, reportable) int16s maxMeasuredValue = 2;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster TemperatureMeasurement = 1026 {
  attribute(readonly, reportable) int16s measuredValue = 0;
  attribute(readonly, reportable) int16s minMeasuredValue = 1;
  attribute(readonly, reportable) int16s maxMeasuredValue = 2;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster ThreadNetworkDiagnostics = 53 {
  enum NetworkFault : ENUM8 {
    kUnspecified = 0;
    kLinkDown = 1;
    kHardwareFailure = 2;
    kNetworkJammed = 3;
  }

  enum RoutingRole : ENUM8 {
    kUnspecified = 0;
    kUnassigned = 1;
    kSleepyEndDevice = 2;
    kEndDevice = 3;
    kReed = 4;
    kRouter = 5;
    kLeader = 6;
  }

  enum ThreadConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  struct NeighborTable {
    INT64U extAddress = 1;
    INT32U age = 2;
    INT16U rloc16 = 3;
    INT32U linkFrameCounter = 4;
    INT32U mleFrameCounter = 5;
    INT8U lqi = 6;
    INT8S averageRssi = 7;
    INT8S lastRssi = 8;
    INT8U frameErrorRate = 9;
    INT8U messageErrorRate = 10;
    BOOLEAN rxOnWhenIdle = 11;
    BOOLEAN fullThreadDevice = 12;
    BOOLEAN fullNetworkData = 13;
    BOOLEAN isChild = 14;
  }

  struct RouteTable {
    INT64U extAddress = 1;
    INT16U rloc16 = 2;
    INT8U routerId = 3;
    INT8U nextHop = 4;
    INT8U pathCost = 5;
    INT8U LQIIn = 6;
    INT8U LQIOut = 7;
    INT8U age = 8;
    BOOLEAN allocated = 9;
    BOOLEAN linkEstablished = 10;
  }

  struct SecurityPolicy {
    INT16U rotationTime = 1;
    BITMAP16 flags = 2;
  }

  struct OperationalDatasetComponents {
    BOOLEAN activeTimestampPresent = 1;
    BOOLEAN pendingTimestampPresent = 2;
    BOOLEAN masterKeyPresent = 3;
    BOOLEAN networkNamePresent = 4;
    BOOLEAN extendedPanIdPresent = 5;
    BOOLEAN meshLocalPrefixPresent = 6;
    BOOLEAN delayPresent = 7;
    BOOLEAN panIdPresent = 8;
    BOOLEAN channelPresent = 9;
    BOOLEAN pskcPresent = 10;
    BOOLEAN securityPolicyPresent = 11;
    BOOLEAN channelMaskPresent = 12;
  }

  info event ConnectionStatus = 0 {
    ThreadConnectionStatus connectionStatus = 0;
  }

  attribute(readonly, reportable) int16u channel = 0;
  attribute(readonly, reportable) enum8 routingRole = 1;
  attribute(readonly, reportable) octet_string networkName = 2;
  attribute(readonly, reportable) int16u panId = 3;
  attribute(readonly, reportable) int64u extendedPanId = 4;
  attribute(readonly, reportable) octet_string meshLocalPrefix = 5;
  attribute(readonly, reportable) int64u overrunCount = 6;
  attribute(readonly, reportable) NeighborTable neighborTableList[] = 7;
  attribute(readonly, reportable) RouteTable routeTableList[] = 8;
  attribute(readonly, reportable) int32u partitionId = 9;
  attribute(readonly, reportable) int8u weighting = 10;
  attribute(readonly, reportable) int8u dataVersion = 11;
  attribute(readonly, reportable) int8u stableDataVersion = 12;
  attribute(readonly, reportable) int8u leaderRouterId = 13;
  attribute(readonly, reportable) int16u detachedRoleCount = 14;
  attribute(readonly, reportable) int16u childRoleCount = 15;
  attribute(readonly, reportable) int16u routerRoleCount = 16;
  attribute(readonly, reportable) int16u leaderRoleCount = 17;
  attribute(readonly, reportable) int16u attachAttemptCount = 18;
  attribute(readonly, reportable) int16u partitionIdChangeCount = 19;
  attribute(readonly, reportable) int16u betterPartitionAttachAttemptCount = 20;
  attribute(readonly, reportable) int16u parentChangeCount = 21;
  attribute(readonly, reportable) int32u txTotalCount = 22;
  attribute(readonly, reportable) int32u txUnicastCount = 23;
  attribute(readonly, reportable) int32u txBroadcastCount = 24;
  attribute(readonly, reportable) int32u txAckRequestedCount = 25;
  attribute(readonly, reportable) int32u txAckedCount = 26;
  attribute(readonly, reportable) int32u txNoAckRequestedCount = 27;
  attribute(readonly, reportable) int32u txDataCount = 28;
  attribute(readonly, reportable) int32u txDataPollCount = 29;
  attribute(readonly, reportable) int32u txBeaconCount = 30;
  attribute(readonly, reportable) int32u txBeaconRequestCount = 31;
  attribute(readonly, reportable) int32u txOtherCount = 32;
  attribute(readonly, reportable) int32u txRetryCount = 33;
  attribute(readonly, reportable) int32u txDirectMaxRetryExpiryCount = 34;
  attribute(readonly, reportable) int32u txIndirectMaxRetryExpiryCount = 35;
  attribute(readonly, reportable) int32u txErrCcaCount = 36;
  attribute(readonly, reportable) int32u txErrAbortCount = 37;
  attribute(readonly, reportable) int32u txErrBusyChannelCount = 38;
  attribute(readonly, reportable) int32u rxTotalCount = 39;
  attribute(readonly, reportable) int32u rxUnicastCount = 40;
  attribute(readonly, reportable) int32u rxBroadcastCount = 41;
  attribute(readonly, reportable) int32u rxDataCount = 42;
  attribute(readonly, reportable) int32u rxDataPollCount = 43;
  attribute(readonly, reportable) int32u rxBeaconCount = 44;
  attribute(readonly, reportable) int32u rxBeaconRequestCount = 45;
  attribute(readonly, reportable) int32u rxOtherCount = 46;
  attribute(readonly, reportable) int32u rxAddressFilteredCount = 47;
  attribute(readonly, reportable) int32u rxDestAddrFilteredCount = 48;
  attribute(readonly, reportable) int32u rxDuplicatedCount = 49;
  attribute(readonly, reportable) int32u rxErrNoFrameCount = 50;
  attribute(readonly, reportable) int32u rxErrUnknownNeighborCount = 51;
  attribute(readonly, reportable) int32u rxErrInvalidSrcAddrCount = 52;
  attribute(readonly, reportable) int32u rxErrSecCount = 53;
  attribute(readonly, reportable) int32u rxErrFcsCount = 54;
  attribute(readonly, reportable) int32u rxErrOtherCount = 55;
  attribute(readonly, reportable) int64u activeTimestamp = 56;
  attribute(readonly, reportable) int64u pendingTimestamp = 57;
  attribute(readonly, reportable) int32u delay = 58;
  attribute(readonly, reportable) SecurityPolicy securityPolicy[] = 59;
  attribute(readonly, reportable) octet_string channelMask = 60;
  attribute(readonly, reportable) OperationalDatasetComponents operationalDatasetComponents[] = 61;
  attribute(readonly, reportable) NetworkFault activeNetworkFaultsList[] = 62;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster UserLabel = 65 {
  attribute(writable) LabelStruct labelList[] = 0;
  attribute(readonly) int16u clusterRevision = 65533;
}


endpoint 0 {
}

endpoint 1 {
}

