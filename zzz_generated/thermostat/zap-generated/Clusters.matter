// This IDL was generated automatically by ZAP.
// It is for view/code review purposes only.

struct LabelStruct {
  CHAR_STRING kLabel = 1;
  CHAR_STRING kValue = 2;
}

server cluster AdministratorCommissioning = 60 {
  enum CommissioningWindowStatus : ENUM8 {
    kWindowNotOpen = 0;
    kEnhancedWindowOpen = 1;
    kBasicWindowOpen = 2;
  }

  enum StatusCode : ENUM8 {
    kBusy = 1;
    kPAKEParameterError = 2;
    kWindowNotOpen = 3;
  }

  attribute(readonly) int8u windowStatus = 0;
  attribute(readonly) fabric_idx adminFabricIndex = 1;
  attribute(readonly) int16u adminVendorId = 2;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct OpenBasicCommissioningWindowRequest {
    INT16U CommissioningTimeout;
  }

  request struct OpenCommissioningWindowRequest {
    INT16U CommissioningTimeout;
    OCTET_STRING PAKEVerifier;
    INT16U Discriminator;
    INT32U Iterations;
    OCTET_STRING Salt;
    INT16U PasscodeID;
  }

  request struct RevokeCommissioningRequest {
  }

  command OpenBasicCommissioningWindow(OpenBasicCommissioningWindowRequest): DefaultSuccess = 1;
  command OpenCommissioningWindow(OpenCommissioningWindowRequest): DefaultSuccess = 0;
  command RevokeCommissioning(RevokeCommissioningRequest): DefaultSuccess = 2;
}

server cluster Basic = 40 {
  event StartUp(critical) = 0 {
    kSoftwareVersion = 0,
  }

  event ShutDown(critical) = 1 {
  }

  event Leave(info) = 2 {
  }

  event ReachableChanged(info) = 3 {
    kReachableNewValue = 0,
  }

  attribute(readonly, reportable) int16u interactionModelVersion = 0;
  attribute(readonly, reportable) char_string vendorName = 1;
  attribute(readonly, reportable) vendor_id vendorID = 2;
  attribute(readonly, reportable) char_string productName = 3;
  attribute(readonly, reportable) int16u productID = 4;
  attribute(writable, reportable) char_string nodeLabel = 5;
  attribute(writable, reportable) char_string location = 6;
  attribute(readonly, reportable) int16u hardwareVersion = 7;
  attribute(readonly, reportable) char_string hardwareVersionString = 8;
  attribute(readonly, reportable) int32u softwareVersion = 9;
  attribute(readonly, reportable) char_string softwareVersionString = 10;
  attribute(readonly, reportable) char_string manufacturingDate = 11;
  attribute(readonly, reportable) char_string partNumber = 12;
  attribute(readonly, reportable) long_char_string productURL = 13;
  attribute(readonly, reportable) char_string productLabel = 14;
  attribute(readonly, reportable) char_string serialNumber = 15;
  attribute(writable, reportable) boolean localConfigDisabled = 16;
  attribute(readonly, reportable) boolean reachable = 17;
  attribute(readonly) char_string uniqueID = 18;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct MfgSpecificPingRequest {
  }

  command MfgSpecificPing(MfgSpecificPingRequest): DefaultSuccess = 0;
}

server cluster Binding = 30 {
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct BindRequest {
    NODE_ID nodeId;
    GROUP_ID groupId;
    ENDPOINT_NO endpointId;
    CLUSTER_ID clusterId;
  }

  request struct UnbindRequest {
    NODE_ID nodeId;
    GROUP_ID groupId;
    ENDPOINT_NO endpointId;
    CLUSTER_ID clusterId;
  }

  command Bind(BindRequest): DefaultSuccess = 0;
  command Unbind(UnbindRequest): DefaultSuccess = 1;
}

server cluster Descriptor = 29 {
  struct DeviceType {
    DEVTYPE_ID kType = 1;
    INT16U kRevision = 2;
  }

  attribute(readonly, reportable) DeviceType deviceList[] = 0;
  attribute(readonly, reportable) CLUSTER_ID serverList[] = 1;
  attribute(readonly, reportable) CLUSTER_ID clientList[] = 2;
  attribute(readonly, reportable) ENDPOINT_NO partsList[] = 3;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster DiagnosticLogs = 50 {
  enum LogsIntent : ENUM8 {
    kEndUserSupport = 0;
    kNetworkDiag = 1;
    kCrashLogs = 2;
  }

  enum LogsStatus : ENUM8 {
    kSuccess = 0;
    kExhausted = 1;
    kNoLogs = 2;
    kBusy = 3;
    kDenied = 4;
  }

  enum LogsTransferProtocol : ENUM8 {
    kResponsePayload = 0;
    kBdx = 1;
  }


  request struct RetrieveLogsRequestRequest {
    LogsIntent intent;
    LogsTransferProtocol requestedProtocol;
    OCTET_STRING transferFileDesignator;
  }

  command RetrieveLogsRequest(RetrieveLogsRequestRequest): RetrieveLogsResponse = 0;
}

server cluster EthernetNetworkDiagnostics = 55 {
  enum PHYRateType : ENUM8 {
    k10m = 0;
    k100m = 1;
    k1000m = 2;
    k25g = 3;
    k5g = 4;
    k10g = 5;
    k40g = 6;
    k100g = 7;
    k200g = 8;
    k400g = 9;
  }

  attribute(readonly, reportable) enum8 PHYRate = 0;
  attribute(readonly, reportable) boolean fullDuplex = 1;
  attribute(readonly, reportable) int64u packetRxCount = 2;
  attribute(readonly, reportable) int64u packetTxCount = 3;
  attribute(readonly, reportable) int64u txErrCount = 4;
  attribute(readonly, reportable) int64u collisionCount = 5;
  attribute(readonly, reportable) int64u overrunCount = 6;
  attribute(readonly, reportable) boolean carrierDetect = 7;
  attribute(readonly, reportable) int64u timeSinceReset = 8;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster FixedLabel = 64 {
  attribute(readonly) LabelStruct labelList[] = 0;
  attribute(readonly) int16u clusterRevision = 65533;
}

server cluster GeneralCommissioning = 48 {
  enum GeneralCommissioningError : ENUM8 {
    kOk = 0;
    kValueOutsideRange = 1;
    kInvalidAuthentication = 2;
    kNotCommissioning = 3;
  }

  enum RegulatoryLocationType : ENUM8 {
    kIndoor = 0;
    kOutdoor = 1;
    kIndoorOutdoor = 2;
  }

  struct BasicCommissioningInfoType {
    INT32U kFailSafeExpiryLengthMs = 1;
  }

  attribute(writable, reportable) int64u breadcrumb = 0;
  attribute(readonly, reportable) BasicCommissioningInfoType basicCommissioningInfoList[] = 1;
  attribute(readonly) enum8 regulatoryConfig = 2;
  attribute(readonly) enum8 locationCapability = 3;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct ArmFailSafeRequest {
    INT16U expiryLengthSeconds;
    INT64U breadcrumb;
    INT32U timeoutMs;
  }

  request struct CommissioningCompleteRequest {
  }

  request struct SetRegulatoryConfigRequest {
    RegulatoryLocationType location;
    CHAR_STRING countryCode;
    INT64U breadcrumb;
    INT32U timeoutMs;
  }

  response struct ArmFailSafeResponse {
    GeneralCommissioningError errorCode;
    CHAR_STRING debugText;
  }

  response struct CommissioningCompleteResponse {
    GeneralCommissioningError errorCode;
    CHAR_STRING debugText;
  }

  response struct SetRegulatoryConfigResponse {
    GeneralCommissioningError errorCode;
    CHAR_STRING debugText;
  }

  command ArmFailSafe(ArmFailSafeRequest): ArmFailSafeResponse = 0;
  command CommissioningComplete(CommissioningCompleteRequest): CommissioningCompleteResponse = 4;
  command SetRegulatoryConfig(SetRegulatoryConfigRequest): SetRegulatoryConfigResponse = 2;
}

server cluster GeneralDiagnostics = 51 {
  enum BootReasonType : ENUM8 {
    kUnspecified = 0;
    kPowerOnReboot = 1;
    kBrownOutReset = 2;
    kSoftwareWatchdogReset = 3;
    kHardwareWatchdogReset = 4;
    kSoftwareUpdateCompleted = 5;
    kSoftwareReset = 6;
  }

  enum HardwareFaultType : ENUM8 {
    kUnspecified = 0;
    kRadio = 1;
    kSensor = 2;
    kResettableOverTemp = 3;
    kNonResettableOverTemp = 4;
    kPowerSource = 5;
    kVisualDisplayFault = 6;
    kAudioOutputFault = 7;
    kUserInterfaceFault = 8;
    kNonVolatileMemoryError = 9;
    kTamperDetected = 10;
  }

  enum InterfaceType : ENUM8 {
    kUnspecified = 0;
    kWiFi = 1;
    kEthernet = 2;
    kCellular = 3;
    kThread = 4;
  }

  enum NetworkFaultType : ENUM8 {
    kUnspecified = 0;
    kHardwareFailure = 1;
    kNetworkJammed = 2;
    kConnectionFailed = 3;
  }

  enum RadioFaultType : ENUM8 {
    kUnspecified = 0;
    kWiFiFault = 1;
    kCellularFault = 2;
    kThreadFault = 3;
    kNFCFault = 4;
    kBLEFault = 5;
    kEthernetFault = 6;
  }

  struct NetworkInterfaceType {
    CHAR_STRING kName = 1;
    BOOLEAN kFabricConnected = 2;
    BOOLEAN kOffPremiseServicesReachableIPv4 = 3;
    BOOLEAN kOffPremiseServicesReachableIPv6 = 4;
    OCTET_STRING kHardwareAddress = 5;
    InterfaceType kType = 6;
  }

  event HardwareFaultChange(critical) = 0 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event RadioFaultChange(critical) = 1 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event NetworkFaultChange(critical) = 2 {
    kCurrent = 0,
    kPrevious = 1,
  }

  event BootReason(critical) = 3 {
    kBootReason = 0,
  }

  attribute(readonly, reportable) NetworkInterfaceType networkInterfaces[] = 0;
  attribute(readonly, reportable) int16u rebootCount = 1;
  attribute(readonly, reportable) int64u upTime = 2;
  attribute(readonly, reportable) int32u totalOperationalHours = 3;
  attribute(readonly, reportable) enum8 bootReasons = 4;
  attribute(readonly, reportable) ENUM8 activeHardwareFaults[] = 5;
  attribute(readonly, reportable) ENUM8 activeRadioFaults[] = 6;
  attribute(readonly, reportable) ENUM8 activeNetworkFaults[] = 7;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster GroupKeyManagement = 63 {
  enum GroupKeySecurityPolicy : ENUM8 {
    kStandard = 0;
    kLowLatency = 1;
  }

  struct GroupKey {
    fabric_idx kFabricIndex = 0;
    INT16U kGroupId = 1;
    INT16U kGroupKeySetID = 2;
  }

  struct GroupInfo {
    INT16U kFabricIndex = 0;
    INT16U kGroupId = 1;
    INT16U kEndpoints[] = 2;
    CHAR_STRING kGroupName = 3;
  }

  attribute(readonly, reportable) GroupKey groupKeyMap[] = 0;
  attribute(readonly, reportable) GroupInfo groupTable[] = 1;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster Groups = 4 {
  attribute(readonly, reportable) bitmap8 nameSupport = 0;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct AddGroupRequest {
    INT16U groupId;
    CHAR_STRING groupName;
  }

  request struct AddGroupIfIdentifyingRequest {
    INT16U groupId;
    CHAR_STRING groupName;
  }

  request struct GetGroupMembershipRequest {
    INT16U groupList;
  }

  request struct RemoveAllGroupsRequest {
  }

  request struct RemoveGroupRequest {
    INT16U groupId;
  }

  request struct ViewGroupRequest {
    INT16U groupId;
  }

  response struct AddGroupResponse {
    ENUM8 status;
    INT16U groupId;
  }

  response struct GetGroupMembershipResponse {
    INT8U capacity;
    INT16U groupList;
  }

  response struct RemoveGroupResponse {
    ENUM8 status;
    INT16U groupId;
  }

  response struct ViewGroupResponse {
    ENUM8 status;
    INT16U groupId;
    CHAR_STRING groupName;
  }

  command AddGroup(AddGroupRequest): AddGroupResponse = 0;
  command AddGroupIfIdentifying(AddGroupIfIdentifyingRequest): DefaultSuccess = 5;
  command GetGroupMembership(GetGroupMembershipRequest): GetGroupMembershipResponse = 2;
  command RemoveAllGroups(RemoveAllGroupsRequest): DefaultSuccess = 4;
  command RemoveGroup(RemoveGroupRequest): RemoveGroupResponse = 3;
  command ViewGroup(ViewGroupRequest): ViewGroupResponse = 1;
}

client cluster Identify = 3 {
  enum IdentifyEffectIdentifier : ENUM8 {
    kBlink = 0;
    kBreathe = 1;
    kOkay = 2;
    kChannelChange = 11;
    kFinishEffect = 254;
    kStopEffect = 255;
  }

  enum IdentifyEffectVariant : ENUM8 {
    kDefault = 0;
  }

  enum IdentifyIdentifyType : ENUM8 {
    kNone = 0;
    kVisibleLight = 1;
    kVisibleLED = 2;
    kAudibleBeep = 3;
    kDisplay = 4;
    kActuator = 5;
  }

  attribute(writable, reportable) int16u identifyTime = 0;
  attribute(readonly, reportable) enum8 identifyType = 1;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct IdentifyRequest {
    INT16U identifyTime;
  }

  request struct IdentifyQueryRequest {
  }

  response struct IdentifyQueryResponse {
    INT16U timeout;
  }

  command Identify(IdentifyRequest): DefaultSuccess = 0;
  command IdentifyQuery(IdentifyQueryRequest): IdentifyQueryResponse = 1;
}

server cluster Identify = 3 {
  enum IdentifyEffectIdentifier : ENUM8 {
    kBlink = 0;
    kBreathe = 1;
    kOkay = 2;
    kChannelChange = 11;
    kFinishEffect = 254;
    kStopEffect = 255;
  }

  enum IdentifyEffectVariant : ENUM8 {
    kDefault = 0;
  }

  enum IdentifyIdentifyType : ENUM8 {
    kNone = 0;
    kVisibleLight = 1;
    kVisibleLED = 2;
    kAudibleBeep = 3;
    kDisplay = 4;
    kActuator = 5;
  }

  attribute(writable, reportable) int16u identifyTime = 0;
  attribute(readonly, reportable) enum8 identifyType = 1;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct IdentifyRequest {
    INT16U identifyTime;
  }

  request struct IdentifyQueryRequest {
  }

  response struct IdentifyQueryResponse {
    INT16U timeout;
  }

  command Identify(IdentifyRequest): DefaultSuccess = 0;
  command IdentifyQuery(IdentifyQueryRequest): IdentifyQueryResponse = 1;
}

server cluster LocalizationConfiguration = 43 {
  attribute(writable) char_string activeLocale = 1;
  attribute(readonly) CHAR_STRING supportedLocales[] = 2;
}

server cluster NetworkCommissioning = 49 {
  enum NetworkCommissioningStatus : ENUM8 {
    kSuccess = 0;
    kOutOfRange = 1;
    kBoundsExceeded = 2;
    kNetworkIDNotFound = 3;
    kDuplicateNetworkID = 4;
    kNetworkNotFound = 5;
    kRegulatoryError = 6;
    kAuthFailure = 7;
    kUnsupportedSecurity = 8;
    kOtherConnectionFailure = 9;
    kIPV6Failed = 10;
    kIPBindFailed = 11;
    kUnknownError = 12;
  }

  enum WiFiBand : ENUM8 {
    k2g4 = 0;
    k3g65 = 1;
    k5g = 2;
    k6g = 3;
    k60g = 4;
  }

  struct NetworkInfo {
    OCTET_STRING kNetworkID = 1;
    BOOLEAN kConnected = 2;
  }

  struct WiFiInterfaceScanResult {
    BITMAP8 kSecurity = 1;
    OCTET_STRING kSsid = 2;
    OCTET_STRING kBssid = 3;
    INT16U kChannel = 4;
    WiFiBand kWiFiBand = 5;
    INT8S kRssi = 6;
  }

  struct ThreadInterfaceScanResult {
    INT64U kPanId = 1;
    INT64U kExtendedPanId = 2;
    CHAR_STRING kNetworkName = 3;
    INT16U kChannel = 4;
    INT8U kVersion = 5;
    INT64U kExtendedAddress = 6;
    INT8S kRssi = 7;
    INT8U kLqi = 8;
  }

  attribute(readonly) int8u maxNetworks = 0;
  attribute(readonly) NetworkInfo networks[] = 1;
  attribute(readonly) int8u scanMaxTimeSeconds = 2;
  attribute(readonly) int8u connectMaxTimeSeconds = 3;
  attribute(writable) boolean interfaceEnabled = 4;
  attribute(readonly) NetworkCommissioningStatus lastNetworkingStatus = 5;
  attribute(readonly) octet_string lastNetworkID = 6;
  attribute(readonly) int32u lastConnectErrorValue = 7;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct AddOrUpdateThreadNetworkRequest {
    OCTET_STRING OperationalDataset;
    INT64U Breadcrumb;
  }

  request struct AddOrUpdateWiFiNetworkRequest {
    OCTET_STRING SSID;
    OCTET_STRING Credentials;
    INT64U breadcrumb;
  }

  request struct ConnectNetworkRequest {
    OCTET_STRING NetworkID;
    INT64U Breadcrumb;
  }

  request struct RemoveNetworkRequest {
    OCTET_STRING NetworkID;
    INT64U Breadcrumb;
  }

  request struct ReorderNetworkRequest {
    OCTET_STRING NetworkID;
    INT8U NetworkIndex;
    INT64U Breadcrumb;
  }

  request struct ScanNetworksRequest {
    OCTET_STRING SSID;
    INT64U Breadcrumb;
  }

  response struct ConnectNetworkResponse {
    NetworkCommissioningStatus NetworkingStatus;
    CHAR_STRING DebugText;
    INT32S ErrorValue;
  }

  response struct NetworkConfigResponse {
    NetworkCommissioningStatus NetworkingStatus;
    CHAR_STRING DebugText;
  }

  response struct ScanNetworksResponse {
    NetworkCommissioningStatus NetworkingStatus;
    CHAR_STRING DebugText;
    optional WiFiInterfaceScanResult WiFiScanResults;
    optional ThreadInterfaceScanResult ThreadScanResults;
  }

  command AddOrUpdateThreadNetwork(AddOrUpdateThreadNetworkRequest): NetworkConfigResponse = 3;
  command AddOrUpdateWiFiNetwork(AddOrUpdateWiFiNetworkRequest): NetworkConfigResponse = 2;
  command ConnectNetwork(ConnectNetworkRequest): ConnectNetworkResponse = 6;
  command RemoveNetwork(RemoveNetworkRequest): NetworkConfigResponse = 4;
  command ReorderNetwork(ReorderNetworkRequest): NetworkConfigResponse = 8;
  command ScanNetworks(ScanNetworksRequest): ScanNetworksResponse = 0;
}

server cluster OtaSoftwareUpdateProvider = 41 {
  enum OTAApplyUpdateAction : ENUM8 {
    kProceed = 0;
    kAwaitNextAction = 1;
    kDiscontinue = 2;
  }

  enum OTADownloadProtocol : ENUM8 {
    kBDXSynchronous = 0;
    kBDXAsynchronous = 1;
    kHttps = 2;
    kVendorSpecific = 3;
  }

  enum OTAQueryStatus : ENUM8 {
    kUpdateAvailable = 0;
    kBusy = 1;
    kNotAvailable = 2;
    kDownloadProtocolNotSupported = 3;
  }

  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct ApplyUpdateRequestRequest {
    OCTET_STRING updateToken;
    INT32U newVersion;
  }

  request struct NotifyUpdateAppliedRequest {
    OCTET_STRING updateToken;
    INT32U softwareVersion;
  }

  request struct QueryImageRequest {
    vendor_id vendorId;
    INT16U productId;
    INT32U softwareVersion;
    OTADownloadProtocol protocolsSupported;
    optional INT16U hardwareVersion;
    optional CHAR_STRING location;
    optional BOOLEAN requestorCanConsent;
    optional OCTET_STRING metadataForProvider;
  }

  response struct ApplyUpdateResponse {
    OTAApplyUpdateAction action;
    INT32U delayedActionTime;
  }

  response struct QueryImageResponse {
    OTAQueryStatus status;
    optional INT32U delayedActionTime;
    optional CHAR_STRING imageURI;
    optional INT32U softwareVersion;
    optional CHAR_STRING softwareVersionString;
    optional OCTET_STRING updateToken;
    optional BOOLEAN userConsentNeeded;
    optional OCTET_STRING metadataForRequestor;
  }

  command ApplyUpdateRequest(ApplyUpdateRequestRequest): ApplyUpdateResponse = 2;
  command NotifyUpdateApplied(NotifyUpdateAppliedRequest): DefaultSuccess = 4;
  command QueryImage(QueryImageRequest): QueryImageResponse = 0;
}

server cluster OperationalCredentials = 62 {
  enum NodeOperationalCertStatus : ENUM8 {
    kSuccess = 0;
    kInvalidPublicKey = 1;
    kInvalidNodeOpId = 2;
    kInvalidNOC = 3;
    kMissingCsr = 4;
    kTableFull = 5;
    kInsufficientPrivilege = 8;
    kFabricConflict = 9;
    kLabelConflict = 10;
    kInvalidFabricIndex = 11;
  }

  struct FabricDescriptor {
    INT8U kFabricIndex = 1;
    OCTET_STRING kRootPublicKey = 2;
    INT16U kVendorId = 3;
    FABRIC_ID kFabricId = 4;
    NODE_ID kNodeId = 5;
    CHAR_STRING kLabel = 6;
  }

  attribute(readonly, reportable) FabricDescriptor fabricsList[] = 1;
  attribute(readonly, reportable) int8u supportedFabrics = 2;
  attribute(readonly, reportable) int8u commissionedFabrics = 3;
  attribute(readonly, reportable) OCTET_STRING trustedRootCertificates[] = 4;
  attribute(readonly, reportable) fabric_idx currentFabricIndex = 5;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct AddNOCRequest {
    OCTET_STRING NOCValue;
    optional OCTET_STRING ICACValue;
    OCTET_STRING IPKValue;
    NODE_ID CaseAdminNode;
    INT16U AdminVendorId;
  }

  request struct AddTrustedRootCertificateRequest {
    OCTET_STRING RootCertificate;
  }

  request struct AttestationRequestRequest {
    OCTET_STRING AttestationNonce;
  }

  request struct CertificateChainRequestRequest {
    INT8U CertificateType;
  }

  request struct OpCSRRequestRequest {
    OCTET_STRING CSRNonce;
  }

  request struct RemoveFabricRequest {
    INT8U FabricIndex;
  }

  request struct RemoveTrustedRootCertificateRequest {
    OCTET_STRING TrustedRootIdentifier;
  }

  request struct UpdateFabricLabelRequest {
    CHAR_STRING Label;
  }

  request struct UpdateNOCRequest {
    OCTET_STRING NOCValue;
    optional OCTET_STRING ICACValue;
  }

  response struct AttestationResponse {
    OCTET_STRING AttestationElements;
    OCTET_STRING Signature;
  }

  response struct CertificateChainResponse {
    OCTET_STRING Certificate;
  }

  response struct NOCResponse {
    INT8U StatusCode;
    INT8U FabricIndex;
    CHAR_STRING DebugText;
  }

  response struct OpCSRResponse {
    OCTET_STRING NOCSRElements;
    OCTET_STRING AttestationSignature;
  }

  command AddNOC(AddNOCRequest): NOCResponse = 6;
  command AddTrustedRootCertificate(AddTrustedRootCertificateRequest): DefaultSuccess = 11;
  command AttestationRequest(AttestationRequestRequest): AttestationResponse = 0;
  command CertificateChainRequest(CertificateChainRequestRequest): CertificateChainResponse = 2;
  command OpCSRRequest(OpCSRRequestRequest): OpCSRResponse = 4;
  command RemoveFabric(RemoveFabricRequest): NOCResponse = 10;
  command RemoveTrustedRootCertificate(RemoveTrustedRootCertificateRequest): DefaultSuccess = 12;
  command UpdateFabricLabel(UpdateFabricLabelRequest): NOCResponse = 9;
  command UpdateNOC(UpdateNOCRequest): NOCResponse = 7;
}

server cluster Scenes = 5 {
  struct SceneExtensionFieldSet {
    CLUSTER_ID kClusterId = 1;
    INT8U kLength = 2;
    INT8U kValue = 3;
  }

  attribute(readonly, reportable) int8u sceneCount = 0;
  attribute(readonly, reportable) int8u currentScene = 1;
  attribute(readonly, reportable) int16u currentGroup = 2;
  attribute(readonly, reportable) boolean sceneValid = 3;
  attribute(readonly, reportable) bitmap8 nameSupport = 4;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct AddSceneRequest {
    INT16U groupId;
    INT8U sceneId;
    INT16U transitionTime;
    CHAR_STRING sceneName;
    SceneExtensionFieldSet extensionFieldSets;
  }

  request struct GetSceneMembershipRequest {
    INT16U groupId;
  }

  request struct RecallSceneRequest {
    INT16U groupId;
    INT8U sceneId;
    INT16U transitionTime;
  }

  request struct RemoveAllScenesRequest {
    INT16U groupId;
  }

  request struct RemoveSceneRequest {
    INT16U groupId;
    INT8U sceneId;
  }

  request struct StoreSceneRequest {
    INT16U groupId;
    INT8U sceneId;
  }

  request struct ViewSceneRequest {
    INT16U groupId;
    INT8U sceneId;
  }

  response struct AddSceneResponse {
    ENUM8 status;
    INT16U groupId;
    INT8U sceneId;
  }

  response struct GetSceneMembershipResponse {
    ENUM8 status;
    INT8U capacity;
    INT16U groupId;
    INT8U sceneCount;
    INT8U sceneList;
  }

  response struct RemoveAllScenesResponse {
    ENUM8 status;
    INT16U groupId;
  }

  response struct RemoveSceneResponse {
    ENUM8 status;
    INT16U groupId;
    INT8U sceneId;
  }

  response struct StoreSceneResponse {
    ENUM8 status;
    INT16U groupId;
    INT8U sceneId;
  }

  response struct ViewSceneResponse {
    ENUM8 status;
    INT16U groupId;
    INT8U sceneId;
    INT16U transitionTime;
    CHAR_STRING sceneName;
    SceneExtensionFieldSet extensionFieldSets;
  }

  command AddScene(AddSceneRequest): AddSceneResponse = 0;
  command GetSceneMembership(GetSceneMembershipRequest): GetSceneMembershipResponse = 6;
  command RecallScene(RecallSceneRequest): DefaultSuccess = 5;
  command RemoveAllScenes(RemoveAllScenesRequest): RemoveAllScenesResponse = 3;
  command RemoveScene(RemoveSceneRequest): RemoveSceneResponse = 2;
  command StoreScene(StoreSceneRequest): StoreSceneResponse = 4;
  command ViewScene(ViewSceneRequest): ViewSceneResponse = 1;
}

server cluster SoftwareDiagnostics = 52 {
  struct ThreadMetrics {
    INT64U kId = 1;
    CHAR_STRING kName = 2;
    INT32U kStackFreeCurrent = 3;
    INT32U kStackFreeMinimum = 4;
    INT32U kStackSize = 5;
  }

  event SoftwareFault(info) = 0 {
    kSoftwareFault = 0,
  }

  attribute(readonly, reportable) ThreadMetrics threadMetrics[] = 0;
  attribute(readonly, reportable) int64u currentHeapFree = 1;
  attribute(readonly, reportable) int64u currentHeapUsed = 2;
  attribute(readonly, reportable) int64u currentHeapHighWatermark = 3;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster Thermostat = 513 {
  enum SetpointAdjustMode : ENUM8 {
    kHeatSetpoint = 0;
    kCoolSetpoint = 1;
    kHeatAndCoolSetpoints = 2;
  }

  attribute(readonly, reportable) int16s localTemperature = 0;
  attribute(readonly, reportable) int16s absMinHeatSetpointLimit = 3;
  attribute(readonly, reportable) int16s absMaxHeatSetpointLimit = 4;
  attribute(readonly, reportable) int16s absMinCoolSetpointLimit = 5;
  attribute(readonly, reportable) int16s absMaxCoolSetpointLimit = 6;
  attribute(writable, reportable) int16s occupiedCoolingSetpoint = 17;
  attribute(writable, reportable) int16s occupiedHeatingSetpoint = 18;
  attribute(writable, reportable) int16s minHeatSetpointLimit = 21;
  attribute(writable, reportable) int16s maxHeatSetpointLimit = 22;
  attribute(writable, reportable) int16s minCoolSetpointLimit = 23;
  attribute(writable, reportable) int16s maxCoolSetpointLimit = 24;
  attribute(writable, reportable) int8s minSetpointDeadBand = 25;
  attribute(writable, reportable) enum8 controlSequenceOfOperation = 27;
  attribute(writable, reportable) enum8 systemMode = 28;
  attribute(readonly, reportable) enum8 startOfWeek = 32;
  attribute(readonly, reportable) int8u numberOfWeeklyTransitions = 33;
  attribute(readonly, reportable) int8u numberOfDailyTransitions = 34;
  attribute(readonly, reportable) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;

  request struct ClearWeeklyScheduleRequest {
  }

  request struct GetRelayStatusLogRequest {
  }

  request struct GetWeeklyScheduleRequest {
    DayOfWeek daysToReturn;
    ModeForSequence modeToReturn;
  }

  request struct SetWeeklyScheduleRequest {
    ENUM8 numberOfTransitionsForSequence;
    DayOfWeek dayOfWeekForSequence;
    ModeForSequence modeForSequence;
    INT8U payload;
  }

  request struct SetpointRaiseLowerRequest {
    SetpointAdjustMode mode;
    INT8S amount;
  }

  response struct GetRelayStatusLogResponse {
    INT16U timeOfDay;
    BITMAP16 relayStatus;
    INT16S localTemperature;
    INT8U humidityInPercentage;
    INT16S setpoint;
    INT16U unreadEntries;
  }

  response struct GetWeeklyScheduleResponse {
    ENUM8 numberOfTransitionsForSequence;
    DayOfWeek dayOfWeekForSequence;
    ModeForSequence modeForSequence;
    INT8U payload;
  }

  command ClearWeeklySchedule(ClearWeeklyScheduleRequest): DefaultSuccess = 3;
  command GetRelayStatusLog(GetRelayStatusLogRequest): GetRelayStatusLogResponse = 4;
  command GetWeeklySchedule(GetWeeklyScheduleRequest): GetWeeklyScheduleResponse = 2;
  command SetWeeklySchedule(SetWeeklyScheduleRequest): DefaultSuccess = 1;
  command SetpointRaiseLower(SetpointRaiseLowerRequest): DefaultSuccess = 0;
}

server cluster ThreadNetworkDiagnostics = 53 {
  enum NetworkFault : ENUM8 {
    kUnspecified = 0;
    kLinkDown = 1;
    kHardwareFailure = 2;
    kNetworkJammed = 3;
  }

  enum RoutingRole : ENUM8 {
    kUnspecified = 0;
    kUnassigned = 1;
    kSleepyEndDevice = 2;
    kEndDevice = 3;
    kReed = 4;
    kRouter = 5;
    kLeader = 6;
  }

  enum ThreadConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  struct NeighborTable {
    INT64U kExtAddress = 1;
    INT32U kAge = 2;
    INT16U kRloc16 = 3;
    INT32U kLinkFrameCounter = 4;
    INT32U kMleFrameCounter = 5;
    INT8U kLqi = 6;
    INT8S kAverageRssi = 7;
    INT8S kLastRssi = 8;
    INT8U kFrameErrorRate = 9;
    INT8U kMessageErrorRate = 10;
    BOOLEAN kRxOnWhenIdle = 11;
    BOOLEAN kFullThreadDevice = 12;
    BOOLEAN kFullNetworkData = 13;
    BOOLEAN kIsChild = 14;
  }

  struct RouteTable {
    INT64U kExtAddress = 1;
    INT16U kRloc16 = 2;
    INT8U kRouterId = 3;
    INT8U kNextHop = 4;
    INT8U kPathCost = 5;
    INT8U kLQIIn = 6;
    INT8U kLQIOut = 7;
    INT8U kAge = 8;
    BOOLEAN kAllocated = 9;
    BOOLEAN kLinkEstablished = 10;
  }

  struct SecurityPolicy {
    INT16U kRotationTime = 1;
    BITMAP16 kFlags = 2;
  }

  struct OperationalDatasetComponents {
    BOOLEAN kActiveTimestampPresent = 1;
    BOOLEAN kPendingTimestampPresent = 2;
    BOOLEAN kMasterKeyPresent = 3;
    BOOLEAN kNetworkNamePresent = 4;
    BOOLEAN kExtendedPanIdPresent = 5;
    BOOLEAN kMeshLocalPrefixPresent = 6;
    BOOLEAN kDelayPresent = 7;
    BOOLEAN kPanIdPresent = 8;
    BOOLEAN kChannelPresent = 9;
    BOOLEAN kPskcPresent = 10;
    BOOLEAN kSecurityPolicyPresent = 11;
    BOOLEAN kChannelMaskPresent = 12;
  }

  event ConnectionStatus(info) = 0 {
    kConnectionStatus = 0,
  }

  attribute(readonly, reportable) int16u channel = 0;
  attribute(readonly, reportable) enum8 routingRole = 1;
  attribute(readonly, reportable) octet_string networkName = 2;
  attribute(readonly, reportable) int16u panId = 3;
  attribute(readonly, reportable) int64u extendedPanId = 4;
  attribute(readonly, reportable) octet_string meshLocalPrefix = 5;
  attribute(readonly, reportable) int64u overrunCount = 6;
  attribute(readonly, reportable) NeighborTable neighborTableList[] = 7;
  attribute(readonly, reportable) RouteTable routeTableList[] = 8;
  attribute(readonly, reportable) int32u partitionId = 9;
  attribute(readonly, reportable) int8u weighting = 10;
  attribute(readonly, reportable) int8u dataVersion = 11;
  attribute(readonly, reportable) int8u stableDataVersion = 12;
  attribute(readonly, reportable) int8u leaderRouterId = 13;
  attribute(readonly, reportable) int16u detachedRoleCount = 14;
  attribute(readonly, reportable) int16u childRoleCount = 15;
  attribute(readonly, reportable) int16u routerRoleCount = 16;
  attribute(readonly, reportable) int16u leaderRoleCount = 17;
  attribute(readonly, reportable) int16u attachAttemptCount = 18;
  attribute(readonly, reportable) int16u partitionIdChangeCount = 19;
  attribute(readonly, reportable) int16u betterPartitionAttachAttemptCount = 20;
  attribute(readonly, reportable) int16u parentChangeCount = 21;
  attribute(readonly, reportable) int32u txTotalCount = 22;
  attribute(readonly, reportable) int32u txUnicastCount = 23;
  attribute(readonly, reportable) int32u txBroadcastCount = 24;
  attribute(readonly, reportable) int32u txAckRequestedCount = 25;
  attribute(readonly, reportable) int32u txAckedCount = 26;
  attribute(readonly, reportable) int32u txNoAckRequestedCount = 27;
  attribute(readonly, reportable) int32u txDataCount = 28;
  attribute(readonly, reportable) int32u txDataPollCount = 29;
  attribute(readonly, reportable) int32u txBeaconCount = 30;
  attribute(readonly, reportable) int32u txBeaconRequestCount = 31;
  attribute(readonly, reportable) int32u txOtherCount = 32;
  attribute(readonly, reportable) int32u txRetryCount = 33;
  attribute(readonly, reportable) int32u txDirectMaxRetryExpiryCount = 34;
  attribute(readonly, reportable) int32u txIndirectMaxRetryExpiryCount = 35;
  attribute(readonly, reportable) int32u txErrCcaCount = 36;
  attribute(readonly, reportable) int32u txErrAbortCount = 37;
  attribute(readonly, reportable) int32u txErrBusyChannelCount = 38;
  attribute(readonly, reportable) int32u rxTotalCount = 39;
  attribute(readonly, reportable) int32u rxUnicastCount = 40;
  attribute(readonly, reportable) int32u rxBroadcastCount = 41;
  attribute(readonly, reportable) int32u rxDataCount = 42;
  attribute(readonly, reportable) int32u rxDataPollCount = 43;
  attribute(readonly, reportable) int32u rxBeaconCount = 44;
  attribute(readonly, reportable) int32u rxBeaconRequestCount = 45;
  attribute(readonly, reportable) int32u rxOtherCount = 46;
  attribute(readonly, reportable) int32u rxAddressFilteredCount = 47;
  attribute(readonly, reportable) int32u rxDestAddrFilteredCount = 48;
  attribute(readonly, reportable) int32u rxDuplicatedCount = 49;
  attribute(readonly, reportable) int32u rxErrNoFrameCount = 50;
  attribute(readonly, reportable) int32u rxErrUnknownNeighborCount = 51;
  attribute(readonly, reportable) int32u rxErrInvalidSrcAddrCount = 52;
  attribute(readonly, reportable) int32u rxErrSecCount = 53;
  attribute(readonly, reportable) int32u rxErrFcsCount = 54;
  attribute(readonly, reportable) int32u rxErrOtherCount = 55;
  attribute(readonly, reportable) int64u activeTimestamp = 56;
  attribute(readonly, reportable) int64u pendingTimestamp = 57;
  attribute(readonly, reportable) int32u delay = 58;
  attribute(readonly, reportable) SecurityPolicy securityPolicy[] = 59;
  attribute(readonly, reportable) octet_string channelMask = 60;
  attribute(readonly, reportable) OperationalDatasetComponents operationalDatasetComponents[] = 61;
  attribute(readonly, reportable) NetworkFault activeNetworkFaultsList[] = 62;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}

server cluster UserLabel = 65 {
  attribute(writable) LabelStruct labelList[] = 0;
  attribute(readonly) int16u clusterRevision = 65533;
}

server cluster WiFiNetworkDiagnostics = 54 {
  enum AssociationFailureCause : ENUM8 {
    kUnknown = 0;
    kAssociationFailed = 1;
    kAuthenticationFailed = 2;
    kSsidNotFound = 3;
  }

  enum SecurityType : ENUM8 {
    kUnspecified = 0;
    kNone = 1;
    kWep = 2;
    kWpa = 3;
    kWpa2 = 4;
    kWpa3 = 5;
  }

  enum WiFiConnectionStatus : ENUM8 {
    kConnected = 0;
    kNotConnected = 1;
  }

  enum WiFiVersionType : ENUM8 {
    k80211a = 0;
    k80211b = 1;
    k80211g = 2;
    k80211n = 3;
    k80211ac = 4;
    k80211ax = 5;
  }

  event Disconnection(info) = 0 {
    kReasonCode = 0,
  }

  event AssociationFailure(info) = 1 {
    kAssociationFailure = 0,
    kStatus = 1,
  }

  event ConnectionStatus(info) = 2 {
    kConnectionStatus = 0,
  }

  attribute(readonly, reportable) octet_string bssid = 0;
  attribute(readonly, reportable) enum8 securityType = 1;
  attribute(readonly, reportable) enum8 wiFiVersion = 2;
  attribute(readonly, reportable) int16u channelNumber = 3;
  attribute(readonly, reportable) int8s rssi = 4;
  attribute(readonly, reportable) int32u beaconLostCount = 5;
  attribute(readonly, reportable) int32u beaconRxCount = 6;
  attribute(readonly, reportable) int32u packetMulticastRxCount = 7;
  attribute(readonly, reportable) int32u packetMulticastTxCount = 8;
  attribute(readonly, reportable) int32u packetUnicastRxCount = 9;
  attribute(readonly, reportable) int32u packetUnicastTxCount = 10;
  attribute(readonly, reportable) int64u currentMaxRate = 11;
  attribute(readonly, reportable) int64u overrunCount = 12;
  attribute(readonly) bitmap32 featureMap = 65532;
  attribute(readonly, reportable) int16u clusterRevision = 65533;
}


endpoint 0 {
}

endpoint 1 {
}

