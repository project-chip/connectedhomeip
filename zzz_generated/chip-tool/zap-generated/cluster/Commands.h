/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#pragma once

#include <cstdint>
#include <string>
#include <type_traits>

#include <app-common/zap-generated/cluster-objects.h>
#include <commands/clusters/ClusterCommand.h>
#include <commands/clusters/ComplexArgument.h>
#include <commands/clusters/ReportCommand.h>
#include <commands/clusters/WriteAttributeCommand.h>

/*----------------------------------------------------------------------------*\
| Cluster Name                                                        |   ID   |
|---------------------------------------------------------------------+--------|
| AccessControl                                                       | 0x001F |
| AccountLogin                                                        | 0x050E |
| AdministratorCommissioning                                          | 0x003C |
| ApplicationBasic                                                    | 0x050D |
| ApplicationLauncher                                                 | 0x050C |
| AudioOutput                                                         | 0x050B |
| BarrierControl                                                      | 0x0103 |
| Basic                                                               | 0x0028 |
| BinaryInputBasic                                                    | 0x000F |
| Binding                                                             | 0x001E |
| BooleanState                                                        | 0x0045 |
| BridgedActions                                                      | 0x0025 |
| BridgedDeviceBasic                                                  | 0x0039 |
| Channel                                                             | 0x0504 |
| ColorControl                                                        | 0x0300 |
| ContentLauncher                                                     | 0x050A |
| Descriptor                                                          | 0x001D |
| DiagnosticLogs                                                      | 0x0032 |
| DoorLock                                                            | 0x0101 |
| ElectricalMeasurement                                               | 0x0B04 |
| EthernetNetworkDiagnostics                                          | 0x0037 |
| FixedLabel                                                          | 0x0040 |
| FlowMeasurement                                                     | 0x0404 |
| GeneralCommissioning                                                | 0x0030 |
| GeneralDiagnostics                                                  | 0x0033 |
| GroupKeyManagement                                                  | 0x003F |
| Groups                                                              | 0x0004 |
| Identify                                                            | 0x0003 |
| IlluminanceMeasurement                                              | 0x0400 |
| KeypadInput                                                         | 0x0509 |
| LevelControl                                                        | 0x0008 |
| LocalizationConfiguration                                           | 0x002B |
| LowPower                                                            | 0x0508 |
| MediaInput                                                          | 0x0507 |
| MediaPlayback                                                       | 0x0506 |
| ModeSelect                                                          | 0x0050 |
| NetworkCommissioning                                                | 0x0031 |
| OtaSoftwareUpdateProvider                                           | 0x0029 |
| OtaSoftwareUpdateRequestor                                          | 0x002A |
| OccupancySensing                                                    | 0x0406 |
| OnOff                                                               | 0x0006 |
| OnOffSwitchConfiguration                                            | 0x0007 |
| OperationalCredentials                                              | 0x003E |
| PowerSource                                                         | 0x002F |
| PowerSourceConfiguration                                            | 0x002E |
| PressureMeasurement                                                 | 0x0403 |
| PumpConfigurationAndControl                                         | 0x0200 |
| RelativeHumidityMeasurement                                         | 0x0405 |
| Scenes                                                              | 0x0005 |
| SoftwareDiagnostics                                                 | 0x0034 |
| Switch                                                              | 0x003B |
| TargetNavigator                                                     | 0x0505 |
| TemperatureMeasurement                                              | 0x0402 |
| TestCluster                                                         | 0x050F |
| Thermostat                                                          | 0x0201 |
| ThermostatUserInterfaceConfiguration                                | 0x0204 |
| ThreadNetworkDiagnostics                                            | 0x0035 |
| TimeFormatLocalization                                              | 0x002C |
| UnitLocalization                                                    | 0x002D |
| UserLabel                                                           | 0x0041 |
| WakeOnLan                                                           | 0x0503 |
| WiFiNetworkDiagnostics                                              | 0x0036 |
| WindowCovering                                                      | 0x0102 |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster AccessControl                                               | 0x001F |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * Acl                                                               | 0x0000 |
| * Extension                                                         | 0x0001 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * AccessControlEntryChanged                                         | 0x0000 |
| * AccessControlExtensionChanged                                     | 0x0001 |
\*----------------------------------------------------------------------------*/

class WriteAccessControlAcl : public WriteAttribute
{
public:
    WriteAccessControlAcl() : WriteAttribute("Acl"), mComplex(&mValue)
    {
        AddArgument("attr-name", "acl");
        AddArgument("attr-value", &mComplex);
        WriteAttribute::AddArguments();
    }

    ~WriteAccessControlAcl() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000001F, 0x00000000, mValue);
    }

private:
    chip::app::DataModel::List<const chip::app::Clusters::AccessControl::Structs::AccessControlEntry::Type> mValue;
    TypedComplexArgument<chip::app::DataModel::List<const chip::app::Clusters::AccessControl::Structs::AccessControlEntry::Type>>
        mComplex;
};

class WriteAccessControlExtension : public WriteAttribute
{
public:
    WriteAccessControlExtension() : WriteAttribute("Extension"), mComplex(&mValue)
    {
        AddArgument("attr-name", "extension");
        AddArgument("attr-value", &mComplex);
        WriteAttribute::AddArguments();
    }

    ~WriteAccessControlExtension() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000001F, 0x00000001, mValue);
    }

private:
    chip::app::DataModel::List<const chip::app::Clusters::AccessControl::Structs::ExtensionEntry::Type> mValue;
    TypedComplexArgument<chip::app::DataModel::List<const chip::app::Clusters::AccessControl::Structs::ExtensionEntry::Type>>
        mComplex;
};

/*----------------------------------------------------------------------------*\
| Cluster AccountLogin                                                | 0x050E |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * GetSetupPINRequest                                                |   0x00 |
| * LoginRequest                                                      |   0x02 |
| * LogoutRequest                                                     |   0x03 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command GetSetupPINRequest
 */
class AccountLoginGetSetupPINRequest : public ClusterCommand
{
public:
    AccountLoginGetSetupPINRequest() : ClusterCommand("get-setup-pinrequest")
    {
        AddArgument("TempAccountIdentifier", &mRequest.tempAccountIdentifier);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050E) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050E, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::AccountLogin::Commands::GetSetupPINRequest::Type mRequest;
};

/*
 * Command LoginRequest
 */
class AccountLoginLoginRequest : public ClusterCommand
{
public:
    AccountLoginLoginRequest() : ClusterCommand("login-request")
    {
        AddArgument("TempAccountIdentifier", &mRequest.tempAccountIdentifier);
        AddArgument("SetupPIN", &mRequest.setupPIN);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050E) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050E, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::AccountLogin::Commands::LoginRequest::Type mRequest;
};

/*
 * Command LogoutRequest
 */
class AccountLoginLogoutRequest : public ClusterCommand
{
public:
    AccountLoginLogoutRequest() : ClusterCommand("logout-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050E) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050E, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::AccountLogin::Commands::LogoutRequest::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster AdministratorCommissioning                                  | 0x003C |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * OpenBasicCommissioningWindow                                      |   0x01 |
| * OpenCommissioningWindow                                           |   0x00 |
| * RevokeCommissioning                                               |   0x02 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * WindowStatus                                                      | 0x0000 |
| * AdminFabricIndex                                                  | 0x0001 |
| * AdminVendorId                                                     | 0x0002 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command OpenBasicCommissioningWindow
 */
class AdministratorCommissioningOpenBasicCommissioningWindow : public ClusterCommand
{
public:
    AdministratorCommissioningOpenBasicCommissioningWindow() : ClusterCommand("open-basic-commissioning-window")
    {
        AddArgument("CommissioningTimeout", 0, UINT16_MAX, &mRequest.commissioningTimeout);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003C) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003C, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::AdministratorCommissioning::Commands::OpenBasicCommissioningWindow::Type mRequest;
};

/*
 * Command OpenCommissioningWindow
 */
class AdministratorCommissioningOpenCommissioningWindow : public ClusterCommand
{
public:
    AdministratorCommissioningOpenCommissioningWindow() : ClusterCommand("open-commissioning-window")
    {
        AddArgument("CommissioningTimeout", 0, UINT16_MAX, &mRequest.commissioningTimeout);
        AddArgument("PAKEVerifier", &mRequest.PAKEVerifier);
        AddArgument("Discriminator", 0, UINT16_MAX, &mRequest.discriminator);
        AddArgument("Iterations", 0, UINT32_MAX, &mRequest.iterations);
        AddArgument("Salt", &mRequest.salt);
        AddArgument("PasscodeID", 0, UINT16_MAX, &mRequest.passcodeID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003C) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003C, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::AdministratorCommissioning::Commands::OpenCommissioningWindow::Type mRequest;
};

/*
 * Command RevokeCommissioning
 */
class AdministratorCommissioningRevokeCommissioning : public ClusterCommand
{
public:
    AdministratorCommissioningRevokeCommissioning() : ClusterCommand("revoke-commissioning") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003C) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003C, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::AdministratorCommissioning::Commands::RevokeCommissioning::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster ApplicationBasic                                            | 0x050D |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * VendorName                                                        | 0x0000 |
| * VendorId                                                          | 0x0001 |
| * ApplicationName                                                   | 0x0002 |
| * ProductId                                                         | 0x0003 |
| * ApplicationApp                                                    | 0x0004 |
| * ApplicationStatus                                                 | 0x0005 |
| * ApplicationVersion                                                | 0x0006 |
| * AllowedVendorList                                                 | 0x0007 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster ApplicationLauncher                                         | 0x050C |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * HideAppRequest                                                    |   0x02 |
| * LaunchAppRequest                                                  |   0x00 |
| * StopAppRequest                                                    |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * ApplicationLauncherList                                           | 0x0000 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command HideAppRequest
 */
class ApplicationLauncherHideAppRequest : public ClusterCommand
{
public:
    ApplicationLauncherHideAppRequest() : ClusterCommand("hide-app-request"), mComplex_Application(&mRequest.application)
    {
        AddArgument("Application", &mComplex_Application);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050C) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050C, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::ApplicationLauncher::Commands::HideAppRequest::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::ApplicationLauncher::Structs::ApplicationLauncherApplication::Type>
        mComplex_Application;
};

/*
 * Command LaunchAppRequest
 */
class ApplicationLauncherLaunchAppRequest : public ClusterCommand
{
public:
    ApplicationLauncherLaunchAppRequest() : ClusterCommand("launch-app-request"), mComplex_Application(&mRequest.application)
    {
        AddArgument("Data", &mRequest.data);
        AddArgument("Application", &mComplex_Application);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050C) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050C, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::ApplicationLauncher::Commands::LaunchAppRequest::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::ApplicationLauncher::Structs::ApplicationLauncherApplication::Type>
        mComplex_Application;
};

/*
 * Command StopAppRequest
 */
class ApplicationLauncherStopAppRequest : public ClusterCommand
{
public:
    ApplicationLauncherStopAppRequest() : ClusterCommand("stop-app-request"), mComplex_Application(&mRequest.application)
    {
        AddArgument("Application", &mComplex_Application);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050C) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050C, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::ApplicationLauncher::Commands::StopAppRequest::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::ApplicationLauncher::Structs::ApplicationLauncherApplication::Type>
        mComplex_Application;
};

/*----------------------------------------------------------------------------*\
| Cluster AudioOutput                                                 | 0x050B |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * RenameOutputRequest                                               |   0x01 |
| * SelectOutputRequest                                               |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * AudioOutputList                                                   | 0x0000 |
| * CurrentAudioOutput                                                | 0x0001 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command RenameOutputRequest
 */
class AudioOutputRenameOutputRequest : public ClusterCommand
{
public:
    AudioOutputRenameOutputRequest() : ClusterCommand("rename-output-request")
    {
        AddArgument("Index", 0, UINT8_MAX, &mRequest.index);
        AddArgument("Name", &mRequest.name);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050B) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050B, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::AudioOutput::Commands::RenameOutputRequest::Type mRequest;
};

/*
 * Command SelectOutputRequest
 */
class AudioOutputSelectOutputRequest : public ClusterCommand
{
public:
    AudioOutputSelectOutputRequest() : ClusterCommand("select-output-request")
    {
        AddArgument("Index", 0, UINT8_MAX, &mRequest.index);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050B) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050B, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::AudioOutput::Commands::SelectOutputRequest::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster BarrierControl                                              | 0x0103 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * BarrierControlGoToPercent                                         |   0x00 |
| * BarrierControlStop                                                |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * BarrierMovingState                                                | 0x0001 |
| * BarrierSafetyStatus                                               | 0x0002 |
| * BarrierCapabilities                                               | 0x0003 |
| * BarrierPosition                                                   | 0x000A |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command BarrierControlGoToPercent
 */
class BarrierControlBarrierControlGoToPercent : public ClusterCommand
{
public:
    BarrierControlBarrierControlGoToPercent() : ClusterCommand("barrier-control-go-to-percent")
    {
        AddArgument("PercentOpen", 0, UINT8_MAX, &mRequest.percentOpen);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000103) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000103, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::BarrierControl::Commands::BarrierControlGoToPercent::Type mRequest;
};

/*
 * Command BarrierControlStop
 */
class BarrierControlBarrierControlStop : public ClusterCommand
{
public:
    BarrierControlBarrierControlStop() : ClusterCommand("barrier-control-stop") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000103) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000103, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::BarrierControl::Commands::BarrierControlStop::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster Basic                                                       | 0x0028 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * InteractionModelVersion                                           | 0x0000 |
| * VendorName                                                        | 0x0001 |
| * VendorID                                                          | 0x0002 |
| * ProductName                                                       | 0x0003 |
| * ProductID                                                         | 0x0004 |
| * NodeLabel                                                         | 0x0005 |
| * Location                                                          | 0x0006 |
| * HardwareVersion                                                   | 0x0007 |
| * HardwareVersionString                                             | 0x0008 |
| * SoftwareVersion                                                   | 0x0009 |
| * SoftwareVersionString                                             | 0x000A |
| * ManufacturingDate                                                 | 0x000B |
| * PartNumber                                                        | 0x000C |
| * ProductURL                                                        | 0x000D |
| * ProductLabel                                                      | 0x000E |
| * SerialNumber                                                      | 0x000F |
| * LocalConfigDisabled                                               | 0x0010 |
| * Reachable                                                         | 0x0011 |
| * UniqueID                                                          | 0x0012 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * StartUp                                                           | 0x0000 |
| * ShutDown                                                          | 0x0001 |
| * Leave                                                             | 0x0002 |
| * ReachableChanged                                                  | 0x0003 |
\*----------------------------------------------------------------------------*/

class WriteBasicNodeLabel : public WriteAttribute
{
public:
    WriteBasicNodeLabel() : WriteAttribute("NodeLabel")
    {
        AddArgument("attr-name", "node-label");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteBasicNodeLabel() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000028, 0x00000005, mValue);
    }

private:
    chip::CharSpan mValue;
};

class WriteBasicLocation : public WriteAttribute
{
public:
    WriteBasicLocation() : WriteAttribute("Location")
    {
        AddArgument("attr-name", "location");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteBasicLocation() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000028, 0x00000006, mValue);
    }

private:
    chip::CharSpan mValue;
};

class WriteBasicLocalConfigDisabled : public WriteAttribute
{
public:
    WriteBasicLocalConfigDisabled() : WriteAttribute("LocalConfigDisabled")
    {
        AddArgument("attr-name", "local-config-disabled");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteBasicLocalConfigDisabled() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000028, 0x00000010, mValue);
    }

private:
    bool mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster BinaryInputBasic                                            | 0x000F |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * OutOfService                                                      | 0x0051 |
| * PresentValue                                                      | 0x0055 |
| * StatusFlags                                                       | 0x006F |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

class WriteBinaryInputBasicOutOfService : public WriteAttribute
{
public:
    WriteBinaryInputBasicOutOfService() : WriteAttribute("OutOfService")
    {
        AddArgument("attr-name", "out-of-service");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteBinaryInputBasicOutOfService() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000000F, 0x00000051, mValue);
    }

private:
    bool mValue;
};

class WriteBinaryInputBasicPresentValue : public WriteAttribute
{
public:
    WriteBinaryInputBasicPresentValue() : WriteAttribute("PresentValue")
    {
        AddArgument("attr-name", "present-value");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteBinaryInputBasicPresentValue() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000000F, 0x00000055, mValue);
    }

private:
    bool mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster Binding                                                     | 0x001E |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * Bind                                                              |   0x00 |
| * Unbind                                                            |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command Bind
 */
class BindingBind : public ClusterCommand
{
public:
    BindingBind() : ClusterCommand("bind")
    {
        AddArgument("NodeId", 0, UINT64_MAX, &mRequest.nodeId);
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        AddArgument("EndpointId", 0, UINT16_MAX, &mRequest.endpointId);
        AddArgument("ClusterId", 0, UINT32_MAX, &mRequest.clusterId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000001E) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000001E, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::Binding::Commands::Bind::Type mRequest;
};

/*
 * Command Unbind
 */
class BindingUnbind : public ClusterCommand
{
public:
    BindingUnbind() : ClusterCommand("unbind")
    {
        AddArgument("NodeId", 0, UINT64_MAX, &mRequest.nodeId);
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        AddArgument("EndpointId", 0, UINT16_MAX, &mRequest.endpointId);
        AddArgument("ClusterId", 0, UINT32_MAX, &mRequest.clusterId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000001E) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000001E, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::Binding::Commands::Unbind::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster BooleanState                                                | 0x0045 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * StateValue                                                        | 0x0000 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * StateChange                                                       | 0x0000 |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster BridgedActions                                              | 0x0025 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * DisableAction                                                     |   0x0A |
| * DisableActionWithDuration                                         |   0x0B |
| * EnableAction                                                      |   0x08 |
| * EnableActionWithDuration                                          |   0x09 |
| * InstantAction                                                     |   0x00 |
| * InstantActionWithTransition                                       |   0x01 |
| * PauseAction                                                       |   0x05 |
| * PauseActionWithDuration                                           |   0x06 |
| * ResumeAction                                                      |   0x07 |
| * StartAction                                                       |   0x02 |
| * StartActionWithDuration                                           |   0x03 |
| * StopAction                                                        |   0x04 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * ActionList                                                        | 0x0000 |
| * EndpointList                                                      | 0x0001 |
| * SetupUrl                                                          | 0x0002 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * StateChanged                                                      | 0x0000 |
| * ActionFailed                                                      | 0x0001 |
\*----------------------------------------------------------------------------*/

/*
 * Command DisableAction
 */
class BridgedActionsDisableAction : public ClusterCommand
{
public:
    BridgedActionsDisableAction() : ClusterCommand("disable-action")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x0000000A) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x0000000A, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::DisableAction::Type mRequest;
};

/*
 * Command DisableActionWithDuration
 */
class BridgedActionsDisableActionWithDuration : public ClusterCommand
{
public:
    BridgedActionsDisableActionWithDuration() : ClusterCommand("disable-action-with-duration")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        AddArgument("Duration", 0, UINT32_MAX, &mRequest.duration);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x0000000B) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x0000000B, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::DisableActionWithDuration::Type mRequest;
};

/*
 * Command EnableAction
 */
class BridgedActionsEnableAction : public ClusterCommand
{
public:
    BridgedActionsEnableAction() : ClusterCommand("enable-action")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000008) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000008, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::EnableAction::Type mRequest;
};

/*
 * Command EnableActionWithDuration
 */
class BridgedActionsEnableActionWithDuration : public ClusterCommand
{
public:
    BridgedActionsEnableActionWithDuration() : ClusterCommand("enable-action-with-duration")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        AddArgument("Duration", 0, UINT32_MAX, &mRequest.duration);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000009) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000009, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::EnableActionWithDuration::Type mRequest;
};

/*
 * Command InstantAction
 */
class BridgedActionsInstantAction : public ClusterCommand
{
public:
    BridgedActionsInstantAction() : ClusterCommand("instant-action")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::InstantAction::Type mRequest;
};

/*
 * Command InstantActionWithTransition
 */
class BridgedActionsInstantActionWithTransition : public ClusterCommand
{
public:
    BridgedActionsInstantActionWithTransition() : ClusterCommand("instant-action-with-transition")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::InstantActionWithTransition::Type mRequest;
};

/*
 * Command PauseAction
 */
class BridgedActionsPauseAction : public ClusterCommand
{
public:
    BridgedActionsPauseAction() : ClusterCommand("pause-action")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000005) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000005, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::PauseAction::Type mRequest;
};

/*
 * Command PauseActionWithDuration
 */
class BridgedActionsPauseActionWithDuration : public ClusterCommand
{
public:
    BridgedActionsPauseActionWithDuration() : ClusterCommand("pause-action-with-duration")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        AddArgument("Duration", 0, UINT32_MAX, &mRequest.duration);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000006) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000006, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::PauseActionWithDuration::Type mRequest;
};

/*
 * Command ResumeAction
 */
class BridgedActionsResumeAction : public ClusterCommand
{
public:
    BridgedActionsResumeAction() : ClusterCommand("resume-action")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000007) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000007, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::ResumeAction::Type mRequest;
};

/*
 * Command StartAction
 */
class BridgedActionsStartAction : public ClusterCommand
{
public:
    BridgedActionsStartAction() : ClusterCommand("start-action")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::StartAction::Type mRequest;
};

/*
 * Command StartActionWithDuration
 */
class BridgedActionsStartActionWithDuration : public ClusterCommand
{
public:
    BridgedActionsStartActionWithDuration() : ClusterCommand("start-action-with-duration")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        AddArgument("Duration", 0, UINT32_MAX, &mRequest.duration);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::StartActionWithDuration::Type mRequest;
};

/*
 * Command StopAction
 */
class BridgedActionsStopAction : public ClusterCommand
{
public:
    BridgedActionsStopAction() : ClusterCommand("stop-action")
    {
        AddArgument("ActionID", 0, UINT16_MAX, &mRequest.actionID);
        AddArgument("InvokeID", 0, UINT32_MAX, &mRequest.invokeID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000025) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000025, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::BridgedActions::Commands::StopAction::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster BridgedDeviceBasic                                          | 0x0039 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster Channel                                                     | 0x0504 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ChangeChannelByNumberRequest                                      |   0x02 |
| * ChangeChannelRequest                                              |   0x00 |
| * SkipChannelRequest                                                |   0x03 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * ChannelList                                                       | 0x0000 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command ChangeChannelByNumberRequest
 */
class ChannelChangeChannelByNumberRequest : public ClusterCommand
{
public:
    ChannelChangeChannelByNumberRequest() : ClusterCommand("change-channel-by-number-request")
    {
        AddArgument("MajorNumber", 0, UINT16_MAX, &mRequest.majorNumber);
        AddArgument("MinorNumber", 0, UINT16_MAX, &mRequest.minorNumber);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000504) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000504, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::Channel::Commands::ChangeChannelByNumberRequest::Type mRequest;
};

/*
 * Command ChangeChannelRequest
 */
class ChannelChangeChannelRequest : public ClusterCommand
{
public:
    ChannelChangeChannelRequest() : ClusterCommand("change-channel-request")
    {
        AddArgument("Match", &mRequest.match);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000504) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000504, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::Channel::Commands::ChangeChannelRequest::Type mRequest;
};

/*
 * Command SkipChannelRequest
 */
class ChannelSkipChannelRequest : public ClusterCommand
{
public:
    ChannelSkipChannelRequest() : ClusterCommand("skip-channel-request")
    {
        AddArgument("Count", 0, UINT16_MAX, &mRequest.count);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000504) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000504, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::Channel::Commands::SkipChannelRequest::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster ColorControl                                                | 0x0300 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ColorLoopSet                                                      |   0x44 |
| * EnhancedMoveHue                                                   |   0x41 |
| * EnhancedMoveToHue                                                 |   0x40 |
| * EnhancedMoveToHueAndSaturation                                    |   0x43 |
| * EnhancedStepHue                                                   |   0x42 |
| * MoveColor                                                         |   0x08 |
| * MoveColorTemperature                                              |   0x4B |
| * MoveHue                                                           |   0x01 |
| * MoveSaturation                                                    |   0x04 |
| * MoveToColor                                                       |   0x07 |
| * MoveToColorTemperature                                            |   0x0A |
| * MoveToHue                                                         |   0x00 |
| * MoveToHueAndSaturation                                            |   0x06 |
| * MoveToSaturation                                                  |   0x03 |
| * StepColor                                                         |   0x09 |
| * StepColorTemperature                                              |   0x4C |
| * StepHue                                                           |   0x02 |
| * StepSaturation                                                    |   0x05 |
| * StopMoveStep                                                      |   0x47 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * CurrentHue                                                        | 0x0000 |
| * CurrentSaturation                                                 | 0x0001 |
| * RemainingTime                                                     | 0x0002 |
| * CurrentX                                                          | 0x0003 |
| * CurrentY                                                          | 0x0004 |
| * DriftCompensation                                                 | 0x0005 |
| * CompensationText                                                  | 0x0006 |
| * ColorTemperature                                                  | 0x0007 |
| * ColorMode                                                         | 0x0008 |
| * ColorControlOptions                                               | 0x000F |
| * NumberOfPrimaries                                                 | 0x0010 |
| * Primary1X                                                         | 0x0011 |
| * Primary1Y                                                         | 0x0012 |
| * Primary1Intensity                                                 | 0x0013 |
| * Primary2X                                                         | 0x0015 |
| * Primary2Y                                                         | 0x0016 |
| * Primary2Intensity                                                 | 0x0017 |
| * Primary3X                                                         | 0x0019 |
| * Primary3Y                                                         | 0x001A |
| * Primary3Intensity                                                 | 0x001B |
| * Primary4X                                                         | 0x0020 |
| * Primary4Y                                                         | 0x0021 |
| * Primary4Intensity                                                 | 0x0022 |
| * Primary5X                                                         | 0x0024 |
| * Primary5Y                                                         | 0x0025 |
| * Primary5Intensity                                                 | 0x0026 |
| * Primary6X                                                         | 0x0028 |
| * Primary6Y                                                         | 0x0029 |
| * Primary6Intensity                                                 | 0x002A |
| * WhitePointX                                                       | 0x0030 |
| * WhitePointY                                                       | 0x0031 |
| * ColorPointRX                                                      | 0x0032 |
| * ColorPointRY                                                      | 0x0033 |
| * ColorPointRIntensity                                              | 0x0034 |
| * ColorPointGX                                                      | 0x0036 |
| * ColorPointGY                                                      | 0x0037 |
| * ColorPointGIntensity                                              | 0x0038 |
| * ColorPointBX                                                      | 0x003A |
| * ColorPointBY                                                      | 0x003B |
| * ColorPointBIntensity                                              | 0x003C |
| * EnhancedCurrentHue                                                | 0x4000 |
| * EnhancedColorMode                                                 | 0x4001 |
| * ColorLoopActive                                                   | 0x4002 |
| * ColorLoopDirection                                                | 0x4003 |
| * ColorLoopTime                                                     | 0x4004 |
| * ColorLoopStartEnhancedHue                                         | 0x4005 |
| * ColorLoopStoredEnhancedHue                                        | 0x4006 |
| * ColorCapabilities                                                 | 0x400A |
| * ColorTempPhysicalMin                                              | 0x400B |
| * ColorTempPhysicalMax                                              | 0x400C |
| * CoupleColorTempToLevelMinMireds                                   | 0x400D |
| * StartUpColorTemperatureMireds                                     | 0x4010 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command ColorLoopSet
 */
class ColorControlColorLoopSet : public ClusterCommand
{
public:
    ColorControlColorLoopSet() : ClusterCommand("color-loop-set")
    {
        AddArgument("UpdateFlags", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<chip::app::Clusters::ColorControl::ColorLoopUpdateFlags> *>(
                        &mRequest.updateFlags));
        AddArgument("Action", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.action)> *>(&mRequest.action));
        AddArgument("Direction", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.direction)> *>(&mRequest.direction));
        AddArgument("Time", 0, UINT16_MAX, &mRequest.time);
        AddArgument("StartHue", 0, UINT16_MAX, &mRequest.startHue);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000044) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000044, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::ColorLoopSet::Type mRequest;
};

/*
 * Command EnhancedMoveHue
 */
class ColorControlEnhancedMoveHue : public ClusterCommand
{
public:
    ColorControlEnhancedMoveHue() : ClusterCommand("enhanced-move-hue")
    {
        AddArgument("MoveMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.moveMode)> *>(&mRequest.moveMode));
        AddArgument("Rate", 0, UINT16_MAX, &mRequest.rate);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000041) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000041, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::EnhancedMoveHue::Type mRequest;
};

/*
 * Command EnhancedMoveToHue
 */
class ColorControlEnhancedMoveToHue : public ClusterCommand
{
public:
    ColorControlEnhancedMoveToHue() : ClusterCommand("enhanced-move-to-hue")
    {
        AddArgument("EnhancedHue", 0, UINT16_MAX, &mRequest.enhancedHue);
        AddArgument("Direction", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.direction)> *>(&mRequest.direction));
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000040) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000040, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHue::Type mRequest;
};

/*
 * Command EnhancedMoveToHueAndSaturation
 */
class ColorControlEnhancedMoveToHueAndSaturation : public ClusterCommand
{
public:
    ColorControlEnhancedMoveToHueAndSaturation() : ClusterCommand("enhanced-move-to-hue-and-saturation")
    {
        AddArgument("EnhancedHue", 0, UINT16_MAX, &mRequest.enhancedHue);
        AddArgument("Saturation", 0, UINT8_MAX, &mRequest.saturation);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000043) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000043, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::EnhancedMoveToHueAndSaturation::Type mRequest;
};

/*
 * Command EnhancedStepHue
 */
class ColorControlEnhancedStepHue : public ClusterCommand
{
public:
    ColorControlEnhancedStepHue() : ClusterCommand("enhanced-step-hue")
    {
        AddArgument("StepMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.stepMode)> *>(&mRequest.stepMode));
        AddArgument("StepSize", 0, UINT16_MAX, &mRequest.stepSize);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000042) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000042, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::EnhancedStepHue::Type mRequest;
};

/*
 * Command MoveColor
 */
class ColorControlMoveColor : public ClusterCommand
{
public:
    ColorControlMoveColor() : ClusterCommand("move-color")
    {
        AddArgument("RateX", INT16_MIN, INT16_MAX, &mRequest.rateX);
        AddArgument("RateY", INT16_MIN, INT16_MAX, &mRequest.rateY);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000008) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000008, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::MoveColor::Type mRequest;
};

/*
 * Command MoveColorTemperature
 */
class ColorControlMoveColorTemperature : public ClusterCommand
{
public:
    ColorControlMoveColorTemperature() : ClusterCommand("move-color-temperature")
    {
        AddArgument("MoveMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.moveMode)> *>(&mRequest.moveMode));
        AddArgument("Rate", 0, UINT16_MAX, &mRequest.rate);
        AddArgument("ColorTemperatureMinimum", 0, UINT16_MAX, &mRequest.colorTemperatureMinimum);
        AddArgument("ColorTemperatureMaximum", 0, UINT16_MAX, &mRequest.colorTemperatureMaximum);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x0000004B) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x0000004B, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::MoveColorTemperature::Type mRequest;
};

/*
 * Command MoveHue
 */
class ColorControlMoveHue : public ClusterCommand
{
public:
    ColorControlMoveHue() : ClusterCommand("move-hue")
    {
        AddArgument("MoveMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.moveMode)> *>(&mRequest.moveMode));
        AddArgument("Rate", 0, UINT8_MAX, &mRequest.rate);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::MoveHue::Type mRequest;
};

/*
 * Command MoveSaturation
 */
class ColorControlMoveSaturation : public ClusterCommand
{
public:
    ColorControlMoveSaturation() : ClusterCommand("move-saturation")
    {
        AddArgument("MoveMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.moveMode)> *>(&mRequest.moveMode));
        AddArgument("Rate", 0, UINT8_MAX, &mRequest.rate);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::MoveSaturation::Type mRequest;
};

/*
 * Command MoveToColor
 */
class ColorControlMoveToColor : public ClusterCommand
{
public:
    ColorControlMoveToColor() : ClusterCommand("move-to-color")
    {
        AddArgument("ColorX", 0, UINT16_MAX, &mRequest.colorX);
        AddArgument("ColorY", 0, UINT16_MAX, &mRequest.colorY);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000007) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000007, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::MoveToColor::Type mRequest;
};

/*
 * Command MoveToColorTemperature
 */
class ColorControlMoveToColorTemperature : public ClusterCommand
{
public:
    ColorControlMoveToColorTemperature() : ClusterCommand("move-to-color-temperature")
    {
        AddArgument("ColorTemperature", 0, UINT16_MAX, &mRequest.colorTemperature);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x0000000A) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x0000000A, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::MoveToColorTemperature::Type mRequest;
};

/*
 * Command MoveToHue
 */
class ColorControlMoveToHue : public ClusterCommand
{
public:
    ColorControlMoveToHue() : ClusterCommand("move-to-hue")
    {
        AddArgument("Hue", 0, UINT8_MAX, &mRequest.hue);
        AddArgument("Direction", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.direction)> *>(&mRequest.direction));
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::MoveToHue::Type mRequest;
};

/*
 * Command MoveToHueAndSaturation
 */
class ColorControlMoveToHueAndSaturation : public ClusterCommand
{
public:
    ColorControlMoveToHueAndSaturation() : ClusterCommand("move-to-hue-and-saturation")
    {
        AddArgument("Hue", 0, UINT8_MAX, &mRequest.hue);
        AddArgument("Saturation", 0, UINT8_MAX, &mRequest.saturation);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000006) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000006, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::MoveToHueAndSaturation::Type mRequest;
};

/*
 * Command MoveToSaturation
 */
class ColorControlMoveToSaturation : public ClusterCommand
{
public:
    ColorControlMoveToSaturation() : ClusterCommand("move-to-saturation")
    {
        AddArgument("Saturation", 0, UINT8_MAX, &mRequest.saturation);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::MoveToSaturation::Type mRequest;
};

/*
 * Command StepColor
 */
class ColorControlStepColor : public ClusterCommand
{
public:
    ColorControlStepColor() : ClusterCommand("step-color")
    {
        AddArgument("StepX", INT16_MIN, INT16_MAX, &mRequest.stepX);
        AddArgument("StepY", INT16_MIN, INT16_MAX, &mRequest.stepY);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000009) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000009, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::StepColor::Type mRequest;
};

/*
 * Command StepColorTemperature
 */
class ColorControlStepColorTemperature : public ClusterCommand
{
public:
    ColorControlStepColorTemperature() : ClusterCommand("step-color-temperature")
    {
        AddArgument("StepMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.stepMode)> *>(&mRequest.stepMode));
        AddArgument("StepSize", 0, UINT16_MAX, &mRequest.stepSize);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("ColorTemperatureMinimum", 0, UINT16_MAX, &mRequest.colorTemperatureMinimum);
        AddArgument("ColorTemperatureMaximum", 0, UINT16_MAX, &mRequest.colorTemperatureMaximum);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x0000004C) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x0000004C, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::StepColorTemperature::Type mRequest;
};

/*
 * Command StepHue
 */
class ColorControlStepHue : public ClusterCommand
{
public:
    ColorControlStepHue() : ClusterCommand("step-hue")
    {
        AddArgument("StepMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.stepMode)> *>(&mRequest.stepMode));
        AddArgument("StepSize", 0, UINT8_MAX, &mRequest.stepSize);
        AddArgument("TransitionTime", 0, UINT8_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::StepHue::Type mRequest;
};

/*
 * Command StepSaturation
 */
class ColorControlStepSaturation : public ClusterCommand
{
public:
    ColorControlStepSaturation() : ClusterCommand("step-saturation")
    {
        AddArgument("StepMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.stepMode)> *>(&mRequest.stepMode));
        AddArgument("StepSize", 0, UINT8_MAX, &mRequest.stepSize);
        AddArgument("TransitionTime", 0, UINT8_MAX, &mRequest.transitionTime);
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000005) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000005, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::StepSaturation::Type mRequest;
};

/*
 * Command StopMoveStep
 */
class ColorControlStopMoveStep : public ClusterCommand
{
public:
    ColorControlStopMoveStep() : ClusterCommand("stop-move-step")
    {
        AddArgument("OptionsMask", 0, UINT8_MAX, &mRequest.optionsMask);
        AddArgument("OptionsOverride", 0, UINT8_MAX, &mRequest.optionsOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000300) command (0x00000047) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000300, 0x00000047, mRequest);
    }

private:
    chip::app::Clusters::ColorControl::Commands::StopMoveStep::Type mRequest;
};

class WriteColorControlColorControlOptions : public WriteAttribute
{
public:
    WriteColorControlColorControlOptions() : WriteAttribute("ColorControlOptions")
    {
        AddArgument("attr-name", "color-control-options");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorControlOptions() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x0000000F, mValue);
    }

private:
    uint8_t mValue;
};

class WriteColorControlWhitePointX : public WriteAttribute
{
public:
    WriteColorControlWhitePointX() : WriteAttribute("WhitePointX")
    {
        AddArgument("attr-name", "white-point-x");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlWhitePointX() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x00000030, mValue);
    }

private:
    uint16_t mValue;
};

class WriteColorControlWhitePointY : public WriteAttribute
{
public:
    WriteColorControlWhitePointY() : WriteAttribute("WhitePointY")
    {
        AddArgument("attr-name", "white-point-y");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlWhitePointY() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x00000031, mValue);
    }

private:
    uint16_t mValue;
};

class WriteColorControlColorPointRX : public WriteAttribute
{
public:
    WriteColorControlColorPointRX() : WriteAttribute("ColorPointRX")
    {
        AddArgument("attr-name", "color-point-rx");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorPointRX() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x00000032, mValue);
    }

private:
    uint16_t mValue;
};

class WriteColorControlColorPointRY : public WriteAttribute
{
public:
    WriteColorControlColorPointRY() : WriteAttribute("ColorPointRY")
    {
        AddArgument("attr-name", "color-point-ry");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorPointRY() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x00000033, mValue);
    }

private:
    uint16_t mValue;
};

class WriteColorControlColorPointRIntensity : public WriteAttribute
{
public:
    WriteColorControlColorPointRIntensity() : WriteAttribute("ColorPointRIntensity")
    {
        AddArgument("attr-name", "color-point-rintensity");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorPointRIntensity() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x00000034, mValue);
    }

private:
    uint8_t mValue;
};

class WriteColorControlColorPointGX : public WriteAttribute
{
public:
    WriteColorControlColorPointGX() : WriteAttribute("ColorPointGX")
    {
        AddArgument("attr-name", "color-point-gx");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorPointGX() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x00000036, mValue);
    }

private:
    uint16_t mValue;
};

class WriteColorControlColorPointGY : public WriteAttribute
{
public:
    WriteColorControlColorPointGY() : WriteAttribute("ColorPointGY")
    {
        AddArgument("attr-name", "color-point-gy");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorPointGY() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x00000037, mValue);
    }

private:
    uint16_t mValue;
};

class WriteColorControlColorPointGIntensity : public WriteAttribute
{
public:
    WriteColorControlColorPointGIntensity() : WriteAttribute("ColorPointGIntensity")
    {
        AddArgument("attr-name", "color-point-gintensity");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorPointGIntensity() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x00000038, mValue);
    }

private:
    uint8_t mValue;
};

class WriteColorControlColorPointBX : public WriteAttribute
{
public:
    WriteColorControlColorPointBX() : WriteAttribute("ColorPointBX")
    {
        AddArgument("attr-name", "color-point-bx");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorPointBX() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x0000003A, mValue);
    }

private:
    uint16_t mValue;
};

class WriteColorControlColorPointBY : public WriteAttribute
{
public:
    WriteColorControlColorPointBY() : WriteAttribute("ColorPointBY")
    {
        AddArgument("attr-name", "color-point-by");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorPointBY() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x0000003B, mValue);
    }

private:
    uint16_t mValue;
};

class WriteColorControlColorPointBIntensity : public WriteAttribute
{
public:
    WriteColorControlColorPointBIntensity() : WriteAttribute("ColorPointBIntensity")
    {
        AddArgument("attr-name", "color-point-bintensity");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlColorPointBIntensity() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x0000003C, mValue);
    }

private:
    uint8_t mValue;
};

class WriteColorControlStartUpColorTemperatureMireds : public WriteAttribute
{
public:
    WriteColorControlStartUpColorTemperatureMireds() : WriteAttribute("StartUpColorTemperatureMireds")
    {
        AddArgument("attr-name", "start-up-color-temperature-mireds");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteColorControlStartUpColorTemperatureMireds() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000300, 0x00004010, mValue);
    }

private:
    uint16_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster ContentLauncher                                             | 0x050A |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * LaunchContentRequest                                              |   0x00 |
| * LaunchURLRequest                                                  |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * AcceptHeaderList                                                  | 0x0000 |
| * SupportedStreamingProtocols                                       | 0x0001 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command LaunchContentRequest
 */
class ContentLauncherLaunchContentRequest : public ClusterCommand
{
public:
    ContentLauncherLaunchContentRequest() : ClusterCommand("launch-content-request"), mComplex_Search(&mRequest.search)
    {
        AddArgument("AutoPlay", 0, 1, &mRequest.autoPlay);
        AddArgument("Data", &mRequest.data);
        AddArgument("Search", &mComplex_Search);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050A) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050A, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::ContentLauncher::Commands::LaunchContentRequest::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const chip::app::Clusters::ContentLauncher::Structs::ContentSearch::Type>>
        mComplex_Search;
};

/*
 * Command LaunchURLRequest
 */
class ContentLauncherLaunchURLRequest : public ClusterCommand
{
public:
    ContentLauncherLaunchURLRequest() :
        ClusterCommand("launch-urlrequest"), mComplex_BrandingInformation(&mRequest.brandingInformation)
    {
        AddArgument("ContentURL", &mRequest.contentURL);
        AddArgument("DisplayString", &mRequest.displayString);
        AddArgument("BrandingInformation", &mComplex_BrandingInformation);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050A) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050A, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::ContentLauncher::Commands::LaunchURLRequest::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::ContentLauncher::Structs::BrandingInformation::Type> mComplex_BrandingInformation;
};

class WriteContentLauncherSupportedStreamingProtocols : public WriteAttribute
{
public:
    WriteContentLauncherSupportedStreamingProtocols() : WriteAttribute("SupportedStreamingProtocols")
    {
        AddArgument("attr-name", "supported-streaming-protocols");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteContentLauncherSupportedStreamingProtocols() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050A, 0x00000001, mValue);
    }

private:
    uint32_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster Descriptor                                                  | 0x001D |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * DeviceList                                                        | 0x0000 |
| * ServerList                                                        | 0x0001 |
| * ClientList                                                        | 0x0002 |
| * PartsList                                                         | 0x0003 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster DiagnosticLogs                                              | 0x0032 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * RetrieveLogsRequest                                               |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * AttributeList                                                     | 0xFFFB |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command RetrieveLogsRequest
 */
class DiagnosticLogsRetrieveLogsRequest : public ClusterCommand
{
public:
    DiagnosticLogsRetrieveLogsRequest() : ClusterCommand("retrieve-logs-request")
    {
        AddArgument("Intent", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.intent)> *>(&mRequest.intent));
        AddArgument("RequestedProtocol", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.requestedProtocol)> *>(&mRequest.requestedProtocol));
        AddArgument("TransferFileDesignator", &mRequest.transferFileDesignator);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000032) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000032, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::DiagnosticLogs::Commands::RetrieveLogsRequest::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster DoorLock                                                    | 0x0101 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ClearCredential                                                   |   0x26 |
| * ClearUser                                                         |   0x1D |
| * GetCredentialStatus                                               |   0x24 |
| * GetUser                                                           |   0x1B |
| * LockDoor                                                          |   0x00 |
| * SetCredential                                                     |   0x22 |
| * SetUser                                                           |   0x1A |
| * UnlockDoor                                                        |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * LockState                                                         | 0x0000 |
| * LockType                                                          | 0x0001 |
| * ActuatorEnabled                                                   | 0x0002 |
| * DoorState                                                         | 0x0003 |
| * NumberOfTotalUsersSupported                                       | 0x0011 |
| * NumberOfPINUsersSupported                                         | 0x0012 |
| * NumberOfRFIDUsersSupported                                        | 0x0013 |
| * MaxPINCodeLength                                                  | 0x0017 |
| * MinPINCodeLength                                                  | 0x0018 |
| * MaxRFIDCodeLength                                                 | 0x0019 |
| * MinRFIDCodeLength                                                 | 0x001A |
| * Language                                                          | 0x0021 |
| * AutoRelockTime                                                    | 0x0023 |
| * SoundVolume                                                       | 0x0024 |
| * OperatingMode                                                     | 0x0025 |
| * SupportedOperatingModes                                           | 0x0026 |
| * EnableOneTouchLocking                                             | 0x0029 |
| * EnablePrivacyModeButton                                           | 0x002B |
| * WrongCodeEntryLimit                                               | 0x0030 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * DoorLockAlarm                                                     | 0x0000 |
| * DoorStateChange                                                   | 0x0001 |
| * LockOperation                                                     | 0x0002 |
| * LockOperationError                                                | 0x0003 |
| * LockUserChange                                                    | 0x0004 |
\*----------------------------------------------------------------------------*/

/*
 * Command ClearCredential
 */
class DoorLockClearCredential : public ClusterCommand
{
public:
    DoorLockClearCredential() : ClusterCommand("clear-credential"), mComplex_Credential(&mRequest.credential)
    {
        AddArgument("Credential", &mComplex_Credential);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000101) command (0x00000026) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000101, 0x00000026, mRequest);
    }

private:
    chip::app::Clusters::DoorLock::Commands::ClearCredential::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::Structs::DlCredential::Type>>
        mComplex_Credential;
};

/*
 * Command ClearUser
 */
class DoorLockClearUser : public ClusterCommand
{
public:
    DoorLockClearUser() : ClusterCommand("clear-user")
    {
        AddArgument("UserIndex", 0, UINT16_MAX, &mRequest.userIndex);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000101) command (0x0000001D) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000101, 0x0000001D, mRequest);
    }

private:
    chip::app::Clusters::DoorLock::Commands::ClearUser::Type mRequest;
};

/*
 * Command GetCredentialStatus
 */
class DoorLockGetCredentialStatus : public ClusterCommand
{
public:
    DoorLockGetCredentialStatus() : ClusterCommand("get-credential-status"), mComplex_Credential(&mRequest.credential)
    {
        AddArgument("Credential", &mComplex_Credential);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000101) command (0x00000024) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000101, 0x00000024, mRequest);
    }

private:
    chip::app::Clusters::DoorLock::Commands::GetCredentialStatus::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::DoorLock::Structs::DlCredential::Type> mComplex_Credential;
};

/*
 * Command GetUser
 */
class DoorLockGetUser : public ClusterCommand
{
public:
    DoorLockGetUser() : ClusterCommand("get-user")
    {
        AddArgument("UserIndex", 0, UINT16_MAX, &mRequest.userIndex);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000101) command (0x0000001B) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000101, 0x0000001B, mRequest);
    }

private:
    chip::app::Clusters::DoorLock::Commands::GetUser::Type mRequest;
};

/*
 * Command LockDoor
 */
class DoorLockLockDoor : public ClusterCommand
{
public:
    DoorLockLockDoor() : ClusterCommand("lock-door")
    {
        AddArgument("PinCode", &mRequest.pinCode);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000101) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000101, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::DoorLock::Commands::LockDoor::Type mRequest;
};

/*
 * Command SetCredential
 */
class DoorLockSetCredential : public ClusterCommand
{
public:
    DoorLockSetCredential() : ClusterCommand("set-credential"), mComplex_Credential(&mRequest.credential)
    {
        AddArgument("OperationType", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.operationType)> *>(&mRequest.operationType));
        AddArgument("Credential", &mComplex_Credential);
        AddArgument("CredentialData", &mRequest.credentialData);
        AddArgument("UserIndex", 0, UINT16_MAX, &mRequest.userIndex);
        AddArgument("UserStatus", 0, UINT8_MAX, &mRequest.userStatus);
        AddArgument("UserType", 0, UINT8_MAX, &mRequest.userType);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000101) command (0x00000022) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000101, 0x00000022, mRequest);
    }

private:
    chip::app::Clusters::DoorLock::Commands::SetCredential::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::DoorLock::Structs::DlCredential::Type> mComplex_Credential;
};

/*
 * Command SetUser
 */
class DoorLockSetUser : public ClusterCommand
{
public:
    DoorLockSetUser() : ClusterCommand("set-user")
    {
        AddArgument("OperationType", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.operationType)> *>(&mRequest.operationType));
        AddArgument("UserIndex", 0, UINT16_MAX, &mRequest.userIndex);
        AddArgument("UserName", &mRequest.userName);
        AddArgument("UserUniqueId", 0, UINT32_MAX, &mRequest.userUniqueId);
        AddArgument("UserStatus", 0, UINT8_MAX, &mRequest.userStatus);
        AddArgument("UserType", 0, UINT8_MAX, &mRequest.userType);
        AddArgument("CredentialRule", 0, UINT8_MAX, &mRequest.credentialRule);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000101) command (0x0000001A) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000101, 0x0000001A, mRequest);
    }

private:
    chip::app::Clusters::DoorLock::Commands::SetUser::Type mRequest;
};

/*
 * Command UnlockDoor
 */
class DoorLockUnlockDoor : public ClusterCommand
{
public:
    DoorLockUnlockDoor() : ClusterCommand("unlock-door")
    {
        AddArgument("PinCode", &mRequest.pinCode);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000101) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000101, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::DoorLock::Commands::UnlockDoor::Type mRequest;
};

class WriteDoorLockLanguage : public WriteAttribute
{
public:
    WriteDoorLockLanguage() : WriteAttribute("Language")
    {
        AddArgument("attr-name", "language");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteDoorLockLanguage() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000101, 0x00000021, mValue);
    }

private:
    chip::CharSpan mValue;
};

class WriteDoorLockAutoRelockTime : public WriteAttribute
{
public:
    WriteDoorLockAutoRelockTime() : WriteAttribute("AutoRelockTime")
    {
        AddArgument("attr-name", "auto-relock-time");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteDoorLockAutoRelockTime() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000101, 0x00000023, mValue);
    }

private:
    uint32_t mValue;
};

class WriteDoorLockSoundVolume : public WriteAttribute
{
public:
    WriteDoorLockSoundVolume() : WriteAttribute("SoundVolume")
    {
        AddArgument("attr-name", "sound-volume");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteDoorLockSoundVolume() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000101, 0x00000024, mValue);
    }

private:
    uint8_t mValue;
};

class WriteDoorLockOperatingMode : public WriteAttribute
{
public:
    WriteDoorLockOperatingMode() : WriteAttribute("OperatingMode")
    {
        AddArgument("attr-name", "operating-mode");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteDoorLockOperatingMode() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000101, 0x00000025, mValue);
    }

private:
    chip::app::Clusters::DoorLock::DlOperatingMode mValue;
};

class WriteDoorLockEnableOneTouchLocking : public WriteAttribute
{
public:
    WriteDoorLockEnableOneTouchLocking() : WriteAttribute("EnableOneTouchLocking")
    {
        AddArgument("attr-name", "enable-one-touch-locking");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteDoorLockEnableOneTouchLocking() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000101, 0x00000029, mValue);
    }

private:
    bool mValue;
};

class WriteDoorLockEnablePrivacyModeButton : public WriteAttribute
{
public:
    WriteDoorLockEnablePrivacyModeButton() : WriteAttribute("EnablePrivacyModeButton")
    {
        AddArgument("attr-name", "enable-privacy-mode-button");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteDoorLockEnablePrivacyModeButton() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000101, 0x0000002B, mValue);
    }

private:
    bool mValue;
};

class WriteDoorLockWrongCodeEntryLimit : public WriteAttribute
{
public:
    WriteDoorLockWrongCodeEntryLimit() : WriteAttribute("WrongCodeEntryLimit")
    {
        AddArgument("attr-name", "wrong-code-entry-limit");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteDoorLockWrongCodeEntryLimit() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000101, 0x00000030, mValue);
    }

private:
    uint8_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster ElectricalMeasurement                                       | 0x0B04 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MeasurementType                                                   | 0x0000 |
| * TotalActivePower                                                  | 0x0304 |
| * RmsVoltage                                                        | 0x0505 |
| * RmsVoltageMin                                                     | 0x0506 |
| * RmsVoltageMax                                                     | 0x0507 |
| * RmsCurrent                                                        | 0x0508 |
| * RmsCurrentMin                                                     | 0x0509 |
| * RmsCurrentMax                                                     | 0x050A |
| * ActivePower                                                       | 0x050B |
| * ActivePowerMin                                                    | 0x050C |
| * ActivePowerMax                                                    | 0x050D |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster EthernetNetworkDiagnostics                                  | 0x0037 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ResetCounts                                                       |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * PHYRate                                                           | 0x0000 |
| * FullDuplex                                                        | 0x0001 |
| * PacketRxCount                                                     | 0x0002 |
| * PacketTxCount                                                     | 0x0003 |
| * TxErrCount                                                        | 0x0004 |
| * CollisionCount                                                    | 0x0005 |
| * OverrunCount                                                      | 0x0006 |
| * CarrierDetect                                                     | 0x0007 |
| * TimeSinceReset                                                    | 0x0008 |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command ResetCounts
 */
class EthernetNetworkDiagnosticsResetCounts : public ClusterCommand
{
public:
    EthernetNetworkDiagnosticsResetCounts() : ClusterCommand("reset-counts") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000037) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000037, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::EthernetNetworkDiagnostics::Commands::ResetCounts::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster FixedLabel                                                  | 0x0040 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * LabelList                                                         | 0x0000 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster FlowMeasurement                                             | 0x0404 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MeasuredValue                                                     | 0x0000 |
| * MinMeasuredValue                                                  | 0x0001 |
| * MaxMeasuredValue                                                  | 0x0002 |
| * Tolerance                                                         | 0x0003 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster GeneralCommissioning                                        | 0x0030 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ArmFailSafe                                                       |   0x00 |
| * CommissioningComplete                                             |   0x04 |
| * SetRegulatoryConfig                                               |   0x02 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * Breadcrumb                                                        | 0x0000 |
| * BasicCommissioningInfoList                                        | 0x0001 |
| * RegulatoryConfig                                                  | 0x0002 |
| * LocationCapability                                                | 0x0003 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command ArmFailSafe
 */
class GeneralCommissioningArmFailSafe : public ClusterCommand
{
public:
    GeneralCommissioningArmFailSafe() : ClusterCommand("arm-fail-safe")
    {
        AddArgument("ExpiryLengthSeconds", 0, UINT16_MAX, &mRequest.expiryLengthSeconds);
        AddArgument("Breadcrumb", 0, UINT64_MAX, &mRequest.breadcrumb);
        AddArgument("TimeoutMs", 0, UINT32_MAX, &mRequest.timeoutMs);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000030) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000030, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::GeneralCommissioning::Commands::ArmFailSafe::Type mRequest;
};

/*
 * Command CommissioningComplete
 */
class GeneralCommissioningCommissioningComplete : public ClusterCommand
{
public:
    GeneralCommissioningCommissioningComplete() : ClusterCommand("commissioning-complete") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000030) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000030, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::GeneralCommissioning::Commands::CommissioningComplete::Type mRequest;
};

/*
 * Command SetRegulatoryConfig
 */
class GeneralCommissioningSetRegulatoryConfig : public ClusterCommand
{
public:
    GeneralCommissioningSetRegulatoryConfig() : ClusterCommand("set-regulatory-config")
    {
        AddArgument("Location", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.location)> *>(&mRequest.location));
        AddArgument("CountryCode", &mRequest.countryCode);
        AddArgument("Breadcrumb", 0, UINT64_MAX, &mRequest.breadcrumb);
        AddArgument("TimeoutMs", 0, UINT32_MAX, &mRequest.timeoutMs);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000030) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000030, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::GeneralCommissioning::Commands::SetRegulatoryConfig::Type mRequest;
};

class WriteGeneralCommissioningBreadcrumb : public WriteAttribute
{
public:
    WriteGeneralCommissioningBreadcrumb() : WriteAttribute("Breadcrumb")
    {
        AddArgument("attr-name", "breadcrumb");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteGeneralCommissioningBreadcrumb() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000030, 0x00000000, mValue);
    }

private:
    uint64_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster GeneralDiagnostics                                          | 0x0033 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * NetworkInterfaces                                                 | 0x0000 |
| * RebootCount                                                       | 0x0001 |
| * UpTime                                                            | 0x0002 |
| * TotalOperationalHours                                             | 0x0003 |
| * BootReasons                                                       | 0x0004 |
| * ActiveHardwareFaults                                              | 0x0005 |
| * ActiveRadioFaults                                                 | 0x0006 |
| * ActiveNetworkFaults                                               | 0x0007 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * HardwareFaultChange                                               | 0x0000 |
| * RadioFaultChange                                                  | 0x0001 |
| * NetworkFaultChange                                                | 0x0002 |
| * BootReason                                                        | 0x0003 |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster GroupKeyManagement                                          | 0x003F |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * KeySetRead                                                        |   0x01 |
| * KeySetReadAllIndices                                              |   0x04 |
| * KeySetRemove                                                      |   0x03 |
| * KeySetWrite                                                       |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * GroupKeyMap                                                       | 0x0000 |
| * GroupTable                                                        | 0x0001 |
| * MaxGroupsPerFabric                                                | 0x0002 |
| * MaxGroupKeysPerFabric                                             | 0x0003 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command KeySetRead
 */
class GroupKeyManagementKeySetRead : public ClusterCommand
{
public:
    GroupKeyManagementKeySetRead() : ClusterCommand("key-set-read")
    {
        AddArgument("GroupKeySetID", 0, UINT16_MAX, &mRequest.groupKeySetID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003F) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003F, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::GroupKeyManagement::Commands::KeySetRead::Type mRequest;
};

/*
 * Command KeySetReadAllIndices
 */
class GroupKeyManagementKeySetReadAllIndices : public ClusterCommand
{
public:
    GroupKeyManagementKeySetReadAllIndices() :
        ClusterCommand("key-set-read-all-indices"), mComplex_GroupKeySetIDs(&mRequest.groupKeySetIDs)
    {
        AddArgument("GroupKeySetIDs", &mComplex_GroupKeySetIDs);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003F) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003F, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::GroupKeyManagement::Commands::KeySetReadAllIndices::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const uint16_t>> mComplex_GroupKeySetIDs;
};

/*
 * Command KeySetRemove
 */
class GroupKeyManagementKeySetRemove : public ClusterCommand
{
public:
    GroupKeyManagementKeySetRemove() : ClusterCommand("key-set-remove")
    {
        AddArgument("GroupKeySetID", 0, UINT16_MAX, &mRequest.groupKeySetID);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003F) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003F, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::GroupKeyManagement::Commands::KeySetRemove::Type mRequest;
};

/*
 * Command KeySetWrite
 */
class GroupKeyManagementKeySetWrite : public ClusterCommand
{
public:
    GroupKeyManagementKeySetWrite() : ClusterCommand("key-set-write"), mComplex_GroupKeySet(&mRequest.groupKeySet)
    {
        AddArgument("GroupKeySet", &mComplex_GroupKeySet);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003F) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003F, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::GroupKeyManagement::Commands::KeySetWrite::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::GroupKeyManagement::Structs::GroupKeySet::Type> mComplex_GroupKeySet;
};

/*----------------------------------------------------------------------------*\
| Cluster Groups                                                      | 0x0004 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AddGroup                                                          |   0x00 |
| * AddGroupIfIdentifying                                             |   0x05 |
| * GetGroupMembership                                                |   0x02 |
| * RemoveAllGroups                                                   |   0x04 |
| * RemoveGroup                                                       |   0x03 |
| * ViewGroup                                                         |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * NameSupport                                                       | 0x0000 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command AddGroup
 */
class GroupsAddGroup : public ClusterCommand
{
public:
    GroupsAddGroup() : ClusterCommand("add-group")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        AddArgument("GroupName", &mRequest.groupName);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000004) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000004, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::Groups::Commands::AddGroup::Type mRequest;
};

/*
 * Command AddGroupIfIdentifying
 */
class GroupsAddGroupIfIdentifying : public ClusterCommand
{
public:
    GroupsAddGroupIfIdentifying() : ClusterCommand("add-group-if-identifying")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        AddArgument("GroupName", &mRequest.groupName);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000004) command (0x00000005) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000004, 0x00000005, mRequest);
    }

private:
    chip::app::Clusters::Groups::Commands::AddGroupIfIdentifying::Type mRequest;
};

/*
 * Command GetGroupMembership
 */
class GroupsGetGroupMembership : public ClusterCommand
{
public:
    GroupsGetGroupMembership() : ClusterCommand("get-group-membership"), mComplex_GroupList(&mRequest.groupList)
    {
        AddArgument("GroupList", &mComplex_GroupList);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000004) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000004, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::Groups::Commands::GetGroupMembership::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const uint16_t>> mComplex_GroupList;
};

/*
 * Command RemoveAllGroups
 */
class GroupsRemoveAllGroups : public ClusterCommand
{
public:
    GroupsRemoveAllGroups() : ClusterCommand("remove-all-groups") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000004) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000004, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::Groups::Commands::RemoveAllGroups::Type mRequest;
};

/*
 * Command RemoveGroup
 */
class GroupsRemoveGroup : public ClusterCommand
{
public:
    GroupsRemoveGroup() : ClusterCommand("remove-group")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000004) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000004, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::Groups::Commands::RemoveGroup::Type mRequest;
};

/*
 * Command ViewGroup
 */
class GroupsViewGroup : public ClusterCommand
{
public:
    GroupsViewGroup() : ClusterCommand("view-group")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000004) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000004, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::Groups::Commands::ViewGroup::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster Identify                                                    | 0x0003 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * Identify                                                          |   0x00 |
| * IdentifyQuery                                                     |   0x01 |
| * TriggerEffect                                                     |   0x40 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * IdentifyTime                                                      | 0x0000 |
| * IdentifyType                                                      | 0x0001 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command Identify
 */
class IdentifyIdentify : public ClusterCommand
{
public:
    IdentifyIdentify() : ClusterCommand("identify")
    {
        AddArgument("IdentifyTime", 0, UINT16_MAX, &mRequest.identifyTime);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000003) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000003, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::Identify::Commands::Identify::Type mRequest;
};

/*
 * Command IdentifyQuery
 */
class IdentifyIdentifyQuery : public ClusterCommand
{
public:
    IdentifyIdentifyQuery() : ClusterCommand("identify-query") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000003) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000003, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::Identify::Commands::IdentifyQuery::Type mRequest;
};

/*
 * Command TriggerEffect
 */
class IdentifyTriggerEffect : public ClusterCommand
{
public:
    IdentifyTriggerEffect() : ClusterCommand("trigger-effect")
    {
        AddArgument("EffectIdentifier", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.effectIdentifier)> *>(&mRequest.effectIdentifier));
        AddArgument("EffectVariant", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.effectVariant)> *>(&mRequest.effectVariant));
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000003) command (0x00000040) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000003, 0x00000040, mRequest);
    }

private:
    chip::app::Clusters::Identify::Commands::TriggerEffect::Type mRequest;
};

class WriteIdentifyIdentifyTime : public WriteAttribute
{
public:
    WriteIdentifyIdentifyTime() : WriteAttribute("IdentifyTime")
    {
        AddArgument("attr-name", "identify-time");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteIdentifyIdentifyTime() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000003, 0x00000000, mValue);
    }

private:
    uint16_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster IlluminanceMeasurement                                      | 0x0400 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MeasuredValue                                                     | 0x0000 |
| * MinMeasuredValue                                                  | 0x0001 |
| * MaxMeasuredValue                                                  | 0x0002 |
| * Tolerance                                                         | 0x0003 |
| * LightSensorType                                                   | 0x0004 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster KeypadInput                                                 | 0x0509 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * SendKeyRequest                                                    |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command SendKeyRequest
 */
class KeypadInputSendKeyRequest : public ClusterCommand
{
public:
    KeypadInputSendKeyRequest() : ClusterCommand("send-key-request")
    {
        AddArgument("KeyCode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.keyCode)> *>(&mRequest.keyCode));
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000509) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000509, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::KeypadInput::Commands::SendKeyRequest::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster LevelControl                                                | 0x0008 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * Move                                                              |   0x01 |
| * MoveToLevel                                                       |   0x00 |
| * MoveToLevelWithOnOff                                              |   0x04 |
| * MoveWithOnOff                                                     |   0x05 |
| * Step                                                              |   0x02 |
| * StepWithOnOff                                                     |   0x06 |
| * Stop                                                              |   0x03 |
| * StopWithOnOff                                                     |   0x07 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * CurrentLevel                                                      | 0x0000 |
| * RemainingTime                                                     | 0x0001 |
| * MinLevel                                                          | 0x0002 |
| * MaxLevel                                                          | 0x0003 |
| * CurrentFrequency                                                  | 0x0004 |
| * MinFrequency                                                      | 0x0005 |
| * MaxFrequency                                                      | 0x0006 |
| * Options                                                           | 0x000F |
| * OnOffTransitionTime                                               | 0x0010 |
| * OnLevel                                                           | 0x0011 |
| * OnTransitionTime                                                  | 0x0012 |
| * OffTransitionTime                                                 | 0x0013 |
| * DefaultMoveRate                                                   | 0x0014 |
| * StartUpCurrentLevel                                               | 0x4000 |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command Move
 */
class LevelControlMove : public ClusterCommand
{
public:
    LevelControlMove() : ClusterCommand("move")
    {
        AddArgument("MoveMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.moveMode)> *>(&mRequest.moveMode));
        AddArgument("Rate", 0, UINT8_MAX, &mRequest.rate);
        AddArgument("OptionMask", 0, UINT8_MAX, &mRequest.optionMask);
        AddArgument("OptionOverride", 0, UINT8_MAX, &mRequest.optionOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000008) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000008, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::LevelControl::Commands::Move::Type mRequest;
};

/*
 * Command MoveToLevel
 */
class LevelControlMoveToLevel : public ClusterCommand
{
public:
    LevelControlMoveToLevel() : ClusterCommand("move-to-level")
    {
        AddArgument("Level", 0, UINT8_MAX, &mRequest.level);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionMask", 0, UINT8_MAX, &mRequest.optionMask);
        AddArgument("OptionOverride", 0, UINT8_MAX, &mRequest.optionOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000008) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000008, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::LevelControl::Commands::MoveToLevel::Type mRequest;
};

/*
 * Command MoveToLevelWithOnOff
 */
class LevelControlMoveToLevelWithOnOff : public ClusterCommand
{
public:
    LevelControlMoveToLevelWithOnOff() : ClusterCommand("move-to-level-with-on-off")
    {
        AddArgument("Level", 0, UINT8_MAX, &mRequest.level);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000008) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000008, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::LevelControl::Commands::MoveToLevelWithOnOff::Type mRequest;
};

/*
 * Command MoveWithOnOff
 */
class LevelControlMoveWithOnOff : public ClusterCommand
{
public:
    LevelControlMoveWithOnOff() : ClusterCommand("move-with-on-off")
    {
        AddArgument("MoveMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.moveMode)> *>(&mRequest.moveMode));
        AddArgument("Rate", 0, UINT8_MAX, &mRequest.rate);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000008) command (0x00000005) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000008, 0x00000005, mRequest);
    }

private:
    chip::app::Clusters::LevelControl::Commands::MoveWithOnOff::Type mRequest;
};

/*
 * Command Step
 */
class LevelControlStep : public ClusterCommand
{
public:
    LevelControlStep() : ClusterCommand("step")
    {
        AddArgument("StepMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.stepMode)> *>(&mRequest.stepMode));
        AddArgument("StepSize", 0, UINT8_MAX, &mRequest.stepSize);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("OptionMask", 0, UINT8_MAX, &mRequest.optionMask);
        AddArgument("OptionOverride", 0, UINT8_MAX, &mRequest.optionOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000008) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000008, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::LevelControl::Commands::Step::Type mRequest;
};

/*
 * Command StepWithOnOff
 */
class LevelControlStepWithOnOff : public ClusterCommand
{
public:
    LevelControlStepWithOnOff() : ClusterCommand("step-with-on-off")
    {
        AddArgument("StepMode", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.stepMode)> *>(&mRequest.stepMode));
        AddArgument("StepSize", 0, UINT8_MAX, &mRequest.stepSize);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000008) command (0x00000006) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000008, 0x00000006, mRequest);
    }

private:
    chip::app::Clusters::LevelControl::Commands::StepWithOnOff::Type mRequest;
};

/*
 * Command Stop
 */
class LevelControlStop : public ClusterCommand
{
public:
    LevelControlStop() : ClusterCommand("stop")
    {
        AddArgument("OptionMask", 0, UINT8_MAX, &mRequest.optionMask);
        AddArgument("OptionOverride", 0, UINT8_MAX, &mRequest.optionOverride);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000008) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000008, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::LevelControl::Commands::Stop::Type mRequest;
};

/*
 * Command StopWithOnOff
 */
class LevelControlStopWithOnOff : public ClusterCommand
{
public:
    LevelControlStopWithOnOff() : ClusterCommand("stop-with-on-off") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000008) command (0x00000007) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000008, 0x00000007, mRequest);
    }

private:
    chip::app::Clusters::LevelControl::Commands::StopWithOnOff::Type mRequest;
};

class WriteLevelControlOptions : public WriteAttribute
{
public:
    WriteLevelControlOptions() : WriteAttribute("Options")
    {
        AddArgument("attr-name", "options");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteLevelControlOptions() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000008, 0x0000000F, mValue);
    }

private:
    uint8_t mValue;
};

class WriteLevelControlOnOffTransitionTime : public WriteAttribute
{
public:
    WriteLevelControlOnOffTransitionTime() : WriteAttribute("OnOffTransitionTime")
    {
        AddArgument("attr-name", "on-off-transition-time");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteLevelControlOnOffTransitionTime() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000008, 0x00000010, mValue);
    }

private:
    uint16_t mValue;
};

class WriteLevelControlOnLevel : public WriteAttribute
{
public:
    WriteLevelControlOnLevel() : WriteAttribute("OnLevel")
    {
        AddArgument("attr-name", "on-level");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteLevelControlOnLevel() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000008, 0x00000011, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint8_t> mValue;
};

class WriteLevelControlOnTransitionTime : public WriteAttribute
{
public:
    WriteLevelControlOnTransitionTime() : WriteAttribute("OnTransitionTime")
    {
        AddArgument("attr-name", "on-transition-time");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteLevelControlOnTransitionTime() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000008, 0x00000012, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint16_t> mValue;
};

class WriteLevelControlOffTransitionTime : public WriteAttribute
{
public:
    WriteLevelControlOffTransitionTime() : WriteAttribute("OffTransitionTime")
    {
        AddArgument("attr-name", "off-transition-time");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteLevelControlOffTransitionTime() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000008, 0x00000013, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint16_t> mValue;
};

class WriteLevelControlDefaultMoveRate : public WriteAttribute
{
public:
    WriteLevelControlDefaultMoveRate() : WriteAttribute("DefaultMoveRate")
    {
        AddArgument("attr-name", "default-move-rate");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteLevelControlDefaultMoveRate() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000008, 0x00000014, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint8_t> mValue;
};

class WriteLevelControlStartUpCurrentLevel : public WriteAttribute
{
public:
    WriteLevelControlStartUpCurrentLevel() : WriteAttribute("StartUpCurrentLevel")
    {
        AddArgument("attr-name", "start-up-current-level");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteLevelControlStartUpCurrentLevel() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000008, 0x00004000, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint8_t> mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster LocalizationConfiguration                                   | 0x002B |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * ActiveLocale                                                      | 0x0001 |
| * SupportedLocales                                                  | 0x0002 |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

class WriteLocalizationConfigurationActiveLocale : public WriteAttribute
{
public:
    WriteLocalizationConfigurationActiveLocale() : WriteAttribute("ActiveLocale")
    {
        AddArgument("attr-name", "active-locale");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteLocalizationConfigurationActiveLocale() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000002B, 0x00000001, mValue);
    }

private:
    chip::CharSpan mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster LowPower                                                    | 0x0508 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * Sleep                                                             |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command Sleep
 */
class LowPowerSleep : public ClusterCommand
{
public:
    LowPowerSleep() : ClusterCommand("sleep") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000508) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000508, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::LowPower::Commands::Sleep::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster MediaInput                                                  | 0x0507 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * HideInputStatusRequest                                            |   0x02 |
| * RenameInputRequest                                                |   0x03 |
| * SelectInputRequest                                                |   0x00 |
| * ShowInputStatusRequest                                            |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MediaInputList                                                    | 0x0000 |
| * CurrentMediaInput                                                 | 0x0001 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command HideInputStatusRequest
 */
class MediaInputHideInputStatusRequest : public ClusterCommand
{
public:
    MediaInputHideInputStatusRequest() : ClusterCommand("hide-input-status-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000507) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000507, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::MediaInput::Commands::HideInputStatusRequest::Type mRequest;
};

/*
 * Command RenameInputRequest
 */
class MediaInputRenameInputRequest : public ClusterCommand
{
public:
    MediaInputRenameInputRequest() : ClusterCommand("rename-input-request")
    {
        AddArgument("Index", 0, UINT8_MAX, &mRequest.index);
        AddArgument("Name", &mRequest.name);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000507) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000507, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::MediaInput::Commands::RenameInputRequest::Type mRequest;
};

/*
 * Command SelectInputRequest
 */
class MediaInputSelectInputRequest : public ClusterCommand
{
public:
    MediaInputSelectInputRequest() : ClusterCommand("select-input-request")
    {
        AddArgument("Index", 0, UINT8_MAX, &mRequest.index);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000507) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000507, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::MediaInput::Commands::SelectInputRequest::Type mRequest;
};

/*
 * Command ShowInputStatusRequest
 */
class MediaInputShowInputStatusRequest : public ClusterCommand
{
public:
    MediaInputShowInputStatusRequest() : ClusterCommand("show-input-status-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000507) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000507, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::MediaInput::Commands::ShowInputStatusRequest::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster MediaPlayback                                               | 0x0506 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * FastForwardRequest                                                |   0x07 |
| * NextRequest                                                       |   0x05 |
| * PauseRequest                                                      |   0x01 |
| * PlayRequest                                                       |   0x00 |
| * PreviousRequest                                                   |   0x04 |
| * RewindRequest                                                     |   0x06 |
| * SeekRequest                                                       |   0x0B |
| * SkipBackwardRequest                                               |   0x09 |
| * SkipForwardRequest                                                |   0x08 |
| * StartOverRequest                                                  |   0x03 |
| * StopRequest                                                       |   0x02 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * PlaybackState                                                     | 0x0000 |
| * StartTime                                                         | 0x0001 |
| * Duration                                                          | 0x0002 |
| * PlaybackSpeed                                                     | 0x0004 |
| * SeekRangeEnd                                                      | 0x0005 |
| * SeekRangeStart                                                    | 0x0006 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command FastForwardRequest
 */
class MediaPlaybackFastForwardRequest : public ClusterCommand
{
public:
    MediaPlaybackFastForwardRequest() : ClusterCommand("fast-forward-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000007) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000007, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::FastForwardRequest::Type mRequest;
};

/*
 * Command NextRequest
 */
class MediaPlaybackNextRequest : public ClusterCommand
{
public:
    MediaPlaybackNextRequest() : ClusterCommand("next-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000005) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000005, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::NextRequest::Type mRequest;
};

/*
 * Command PauseRequest
 */
class MediaPlaybackPauseRequest : public ClusterCommand
{
public:
    MediaPlaybackPauseRequest() : ClusterCommand("pause-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::PauseRequest::Type mRequest;
};

/*
 * Command PlayRequest
 */
class MediaPlaybackPlayRequest : public ClusterCommand
{
public:
    MediaPlaybackPlayRequest() : ClusterCommand("play-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::PlayRequest::Type mRequest;
};

/*
 * Command PreviousRequest
 */
class MediaPlaybackPreviousRequest : public ClusterCommand
{
public:
    MediaPlaybackPreviousRequest() : ClusterCommand("previous-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::PreviousRequest::Type mRequest;
};

/*
 * Command RewindRequest
 */
class MediaPlaybackRewindRequest : public ClusterCommand
{
public:
    MediaPlaybackRewindRequest() : ClusterCommand("rewind-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000006) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000006, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::RewindRequest::Type mRequest;
};

/*
 * Command SeekRequest
 */
class MediaPlaybackSeekRequest : public ClusterCommand
{
public:
    MediaPlaybackSeekRequest() : ClusterCommand("seek-request")
    {
        AddArgument("Position", 0, UINT64_MAX, &mRequest.position);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x0000000B) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x0000000B, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::SeekRequest::Type mRequest;
};

/*
 * Command SkipBackwardRequest
 */
class MediaPlaybackSkipBackwardRequest : public ClusterCommand
{
public:
    MediaPlaybackSkipBackwardRequest() : ClusterCommand("skip-backward-request")
    {
        AddArgument("DeltaPositionMilliseconds", 0, UINT64_MAX, &mRequest.deltaPositionMilliseconds);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000009) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000009, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::SkipBackwardRequest::Type mRequest;
};

/*
 * Command SkipForwardRequest
 */
class MediaPlaybackSkipForwardRequest : public ClusterCommand
{
public:
    MediaPlaybackSkipForwardRequest() : ClusterCommand("skip-forward-request")
    {
        AddArgument("DeltaPositionMilliseconds", 0, UINT64_MAX, &mRequest.deltaPositionMilliseconds);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000008) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000008, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::SkipForwardRequest::Type mRequest;
};

/*
 * Command StartOverRequest
 */
class MediaPlaybackStartOverRequest : public ClusterCommand
{
public:
    MediaPlaybackStartOverRequest() : ClusterCommand("start-over-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::StartOverRequest::Type mRequest;
};

/*
 * Command StopRequest
 */
class MediaPlaybackStopRequest : public ClusterCommand
{
public:
    MediaPlaybackStopRequest() : ClusterCommand("stop-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000506) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000506, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::MediaPlayback::Commands::StopRequest::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster ModeSelect                                                  | 0x0050 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ChangeToMode                                                      |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * CurrentMode                                                       | 0x0000 |
| * SupportedModes                                                    | 0x0001 |
| * OnMode                                                            | 0x0002 |
| * StartUpMode                                                       | 0x0003 |
| * Description                                                       | 0x0004 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command ChangeToMode
 */
class ModeSelectChangeToMode : public ClusterCommand
{
public:
    ModeSelectChangeToMode() : ClusterCommand("change-to-mode")
    {
        AddArgument("NewMode", 0, UINT8_MAX, &mRequest.newMode);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000050) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000050, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::ModeSelect::Commands::ChangeToMode::Type mRequest;
};

class WriteModeSelectOnMode : public WriteAttribute
{
public:
    WriteModeSelectOnMode() : WriteAttribute("OnMode")
    {
        AddArgument("attr-name", "on-mode");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteModeSelectOnMode() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000050, 0x00000002, mValue);
    }

private:
    uint8_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster NetworkCommissioning                                        | 0x0031 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AddOrUpdateThreadNetwork                                          |   0x03 |
| * AddOrUpdateWiFiNetwork                                            |   0x02 |
| * ConnectNetwork                                                    |   0x06 |
| * RemoveNetwork                                                     |   0x04 |
| * ReorderNetwork                                                    |   0x08 |
| * ScanNetworks                                                      |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MaxNetworks                                                       | 0x0000 |
| * Networks                                                          | 0x0001 |
| * ScanMaxTimeSeconds                                                | 0x0002 |
| * ConnectMaxTimeSeconds                                             | 0x0003 |
| * InterfaceEnabled                                                  | 0x0004 |
| * LastNetworkingStatus                                              | 0x0005 |
| * LastNetworkID                                                     | 0x0006 |
| * LastConnectErrorValue                                             | 0x0007 |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command AddOrUpdateThreadNetwork
 */
class NetworkCommissioningAddOrUpdateThreadNetwork : public ClusterCommand
{
public:
    NetworkCommissioningAddOrUpdateThreadNetwork() : ClusterCommand("add-or-update-thread-network")
    {
        AddArgument("OperationalDataset", &mRequest.operationalDataset);
        AddArgument("Breadcrumb", 0, UINT64_MAX, &mRequest.breadcrumb);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000031) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000031, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::NetworkCommissioning::Commands::AddOrUpdateThreadNetwork::Type mRequest;
};

/*
 * Command AddOrUpdateWiFiNetwork
 */
class NetworkCommissioningAddOrUpdateWiFiNetwork : public ClusterCommand
{
public:
    NetworkCommissioningAddOrUpdateWiFiNetwork() : ClusterCommand("add-or-update-wi-fi-network")
    {
        AddArgument("Ssid", &mRequest.ssid);
        AddArgument("Credentials", &mRequest.credentials);
        AddArgument("Breadcrumb", 0, UINT64_MAX, &mRequest.breadcrumb);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000031) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000031, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::NetworkCommissioning::Commands::AddOrUpdateWiFiNetwork::Type mRequest;
};

/*
 * Command ConnectNetwork
 */
class NetworkCommissioningConnectNetwork : public ClusterCommand
{
public:
    NetworkCommissioningConnectNetwork() : ClusterCommand("connect-network")
    {
        AddArgument("NetworkID", &mRequest.networkID);
        AddArgument("Breadcrumb", 0, UINT64_MAX, &mRequest.breadcrumb);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000031) command (0x00000006) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000031, 0x00000006, mRequest);
    }

private:
    chip::app::Clusters::NetworkCommissioning::Commands::ConnectNetwork::Type mRequest;
};

/*
 * Command RemoveNetwork
 */
class NetworkCommissioningRemoveNetwork : public ClusterCommand
{
public:
    NetworkCommissioningRemoveNetwork() : ClusterCommand("remove-network")
    {
        AddArgument("NetworkID", &mRequest.networkID);
        AddArgument("Breadcrumb", 0, UINT64_MAX, &mRequest.breadcrumb);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000031) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000031, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::NetworkCommissioning::Commands::RemoveNetwork::Type mRequest;
};

/*
 * Command ReorderNetwork
 */
class NetworkCommissioningReorderNetwork : public ClusterCommand
{
public:
    NetworkCommissioningReorderNetwork() : ClusterCommand("reorder-network")
    {
        AddArgument("NetworkID", &mRequest.networkID);
        AddArgument("NetworkIndex", 0, UINT8_MAX, &mRequest.networkIndex);
        AddArgument("Breadcrumb", 0, UINT64_MAX, &mRequest.breadcrumb);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000031) command (0x00000008) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000031, 0x00000008, mRequest);
    }

private:
    chip::app::Clusters::NetworkCommissioning::Commands::ReorderNetwork::Type mRequest;
};

/*
 * Command ScanNetworks
 */
class NetworkCommissioningScanNetworks : public ClusterCommand
{
public:
    NetworkCommissioningScanNetworks() : ClusterCommand("scan-networks")
    {
        AddArgument("Ssid", &mRequest.ssid);
        AddArgument("Breadcrumb", 0, UINT64_MAX, &mRequest.breadcrumb);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000031) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000031, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::NetworkCommissioning::Commands::ScanNetworks::Type mRequest;
};

class WriteNetworkCommissioningInterfaceEnabled : public WriteAttribute
{
public:
    WriteNetworkCommissioningInterfaceEnabled() : WriteAttribute("InterfaceEnabled")
    {
        AddArgument("attr-name", "interface-enabled");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteNetworkCommissioningInterfaceEnabled() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000031, 0x00000004, mValue);
    }

private:
    bool mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster OtaSoftwareUpdateProvider                                   | 0x0029 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ApplyUpdateRequest                                                |   0x02 |
| * NotifyUpdateApplied                                               |   0x04 |
| * QueryImage                                                        |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command ApplyUpdateRequest
 */
class OtaSoftwareUpdateProviderApplyUpdateRequest : public ClusterCommand
{
public:
    OtaSoftwareUpdateProviderApplyUpdateRequest() : ClusterCommand("apply-update-request")
    {
        AddArgument("UpdateToken", &mRequest.updateToken);
        AddArgument("NewVersion", 0, UINT32_MAX, &mRequest.newVersion);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000029) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000029, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::ApplyUpdateRequest::Type mRequest;
};

/*
 * Command NotifyUpdateApplied
 */
class OtaSoftwareUpdateProviderNotifyUpdateApplied : public ClusterCommand
{
public:
    OtaSoftwareUpdateProviderNotifyUpdateApplied() : ClusterCommand("notify-update-applied")
    {
        AddArgument("UpdateToken", &mRequest.updateToken);
        AddArgument("SoftwareVersion", 0, UINT32_MAX, &mRequest.softwareVersion);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000029) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000029, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::NotifyUpdateApplied::Type mRequest;
};

/*
 * Command QueryImage
 */
class OtaSoftwareUpdateProviderQueryImage : public ClusterCommand
{
public:
    OtaSoftwareUpdateProviderQueryImage() : ClusterCommand("query-image"), mComplex_ProtocolsSupported(&mRequest.protocolsSupported)
    {
        AddArgument("VendorId", 0, UINT16_MAX, &mRequest.vendorId);
        AddArgument("ProductId", 0, UINT16_MAX, &mRequest.productId);
        AddArgument("SoftwareVersion", 0, UINT32_MAX, &mRequest.softwareVersion);
        AddArgument("ProtocolsSupported", &mComplex_ProtocolsSupported);
        AddArgument("HardwareVersion", 0, UINT16_MAX, &mRequest.hardwareVersion);
        AddArgument("Location", &mRequest.location);
        AddArgument("RequestorCanConsent", 0, 1, &mRequest.requestorCanConsent);
        AddArgument("MetadataForProvider", &mRequest.metadataForProvider);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000029) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000029, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::OtaSoftwareUpdateProvider::Commands::QueryImage::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const chip::app::Clusters::OtaSoftwareUpdateProvider::OTADownloadProtocol>>
        mComplex_ProtocolsSupported;
};

/*----------------------------------------------------------------------------*\
| Cluster OtaSoftwareUpdateRequestor                                  | 0x002A |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AnnounceOtaProvider                                               |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * DefaultOtaProviders                                               | 0x0000 |
| * UpdatePossible                                                    | 0x0001 |
| * UpdateState                                                       | 0x0002 |
| * UpdateStateProgress                                               | 0x0003 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * StateTransition                                                   | 0x0000 |
| * VersionApplied                                                    | 0x0001 |
| * DownloadError                                                     | 0x0002 |
\*----------------------------------------------------------------------------*/

/*
 * Command AnnounceOtaProvider
 */
class OtaSoftwareUpdateRequestorAnnounceOtaProvider : public ClusterCommand
{
public:
    OtaSoftwareUpdateRequestorAnnounceOtaProvider() : ClusterCommand("announce-ota-provider")
    {
        AddArgument("ProviderNodeId", 0, UINT64_MAX, &mRequest.providerNodeId);
        AddArgument("VendorId", 0, UINT16_MAX, &mRequest.vendorId);
        AddArgument(
            "AnnouncementReason", 0, UINT8_MAX,
            reinterpret_cast<std::underlying_type_t<decltype(mRequest.announcementReason)> *>(&mRequest.announcementReason));
        AddArgument("MetadataForNode", &mRequest.metadataForNode);
        AddArgument("Endpoint", 0, UINT16_MAX, &mRequest.endpoint);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000002A) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000002A, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::OtaSoftwareUpdateRequestor::Commands::AnnounceOtaProvider::Type mRequest;
};

class WriteOtaSoftwareUpdateRequestorDefaultOtaProviders : public WriteAttribute
{
public:
    WriteOtaSoftwareUpdateRequestorDefaultOtaProviders() : WriteAttribute("DefaultOtaProviders"), mComplex(&mValue)
    {
        AddArgument("attr-name", "default-ota-providers");
        AddArgument("attr-value", &mComplex);
        WriteAttribute::AddArguments();
    }

    ~WriteOtaSoftwareUpdateRequestorDefaultOtaProviders() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000002A, 0x00000000, mValue);
    }

private:
    chip::app::DataModel::List<const chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::Type> mValue;
    TypedComplexArgument<
        chip::app::DataModel::List<const chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::Type>>
        mComplex;
};

/*----------------------------------------------------------------------------*\
| Cluster OccupancySensing                                            | 0x0406 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * Occupancy                                                         | 0x0000 |
| * OccupancySensorType                                               | 0x0001 |
| * OccupancySensorTypeBitmap                                         | 0x0002 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster OnOff                                                       | 0x0006 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * Off                                                               |   0x00 |
| * OffWithEffect                                                     |   0x40 |
| * On                                                                |   0x01 |
| * OnWithRecallGlobalScene                                           |   0x41 |
| * OnWithTimedOff                                                    |   0x42 |
| * Toggle                                                            |   0x02 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * OnOff                                                             | 0x0000 |
| * GlobalSceneControl                                                | 0x4000 |
| * OnTime                                                            | 0x4001 |
| * OffWaitTime                                                       | 0x4002 |
| * StartUpOnOff                                                      | 0x4003 |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command Off
 */
class OnOffOff : public ClusterCommand
{
public:
    OnOffOff() : ClusterCommand("off") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000006) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000006, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::OnOff::Commands::Off::Type mRequest;
};

/*
 * Command OffWithEffect
 */
class OnOffOffWithEffect : public ClusterCommand
{
public:
    OnOffOffWithEffect() : ClusterCommand("off-with-effect")
    {
        AddArgument("EffectId", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.effectId)> *>(&mRequest.effectId));
        AddArgument("EffectVariant", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<decltype(mRequest.effectVariant)> *>(&mRequest.effectVariant));
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000006) command (0x00000040) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000006, 0x00000040, mRequest);
    }

private:
    chip::app::Clusters::OnOff::Commands::OffWithEffect::Type mRequest;
};

/*
 * Command On
 */
class OnOffOn : public ClusterCommand
{
public:
    OnOffOn() : ClusterCommand("on") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000006) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000006, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::OnOff::Commands::On::Type mRequest;
};

/*
 * Command OnWithRecallGlobalScene
 */
class OnOffOnWithRecallGlobalScene : public ClusterCommand
{
public:
    OnOffOnWithRecallGlobalScene() : ClusterCommand("on-with-recall-global-scene") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000006) command (0x00000041) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000006, 0x00000041, mRequest);
    }

private:
    chip::app::Clusters::OnOff::Commands::OnWithRecallGlobalScene::Type mRequest;
};

/*
 * Command OnWithTimedOff
 */
class OnOffOnWithTimedOff : public ClusterCommand
{
public:
    OnOffOnWithTimedOff() : ClusterCommand("on-with-timed-off")
    {
        AddArgument("OnOffControl", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<chip::app::Clusters::OnOff::OnOffControl> *>(&mRequest.onOffControl));
        AddArgument("OnTime", 0, UINT16_MAX, &mRequest.onTime);
        AddArgument("OffWaitTime", 0, UINT16_MAX, &mRequest.offWaitTime);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000006) command (0x00000042) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000006, 0x00000042, mRequest);
    }

private:
    chip::app::Clusters::OnOff::Commands::OnWithTimedOff::Type mRequest;
};

/*
 * Command Toggle
 */
class OnOffToggle : public ClusterCommand
{
public:
    OnOffToggle() : ClusterCommand("toggle") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000006) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000006, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::OnOff::Commands::Toggle::Type mRequest;
};

class WriteOnOffOnTime : public WriteAttribute
{
public:
    WriteOnOffOnTime() : WriteAttribute("OnTime")
    {
        AddArgument("attr-name", "on-time");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteOnOffOnTime() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000006, 0x00004001, mValue);
    }

private:
    uint16_t mValue;
};

class WriteOnOffOffWaitTime : public WriteAttribute
{
public:
    WriteOnOffOffWaitTime() : WriteAttribute("OffWaitTime")
    {
        AddArgument("attr-name", "off-wait-time");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteOnOffOffWaitTime() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000006, 0x00004002, mValue);
    }

private:
    uint16_t mValue;
};

class WriteOnOffStartUpOnOff : public WriteAttribute
{
public:
    WriteOnOffStartUpOnOff() : WriteAttribute("StartUpOnOff")
    {
        AddArgument("attr-name", "start-up-on-off");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteOnOffStartUpOnOff() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000006, 0x00004003, mValue);
    }

private:
    uint8_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster OnOffSwitchConfiguration                                    | 0x0007 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * SwitchType                                                        | 0x0000 |
| * SwitchActions                                                     | 0x0010 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

class WriteOnOffSwitchConfigurationSwitchActions : public WriteAttribute
{
public:
    WriteOnOffSwitchConfigurationSwitchActions() : WriteAttribute("SwitchActions")
    {
        AddArgument("attr-name", "switch-actions");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteOnOffSwitchConfigurationSwitchActions() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000007, 0x00000010, mValue);
    }

private:
    uint8_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster OperationalCredentials                                      | 0x003E |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AddNOC                                                            |   0x06 |
| * AddTrustedRootCertificate                                         |   0x0B |
| * AttestationRequest                                                |   0x00 |
| * CertificateChainRequest                                           |   0x02 |
| * OpCSRRequest                                                      |   0x04 |
| * RemoveFabric                                                      |   0x0A |
| * RemoveTrustedRootCertificate                                      |   0x0C |
| * UpdateFabricLabel                                                 |   0x09 |
| * UpdateNOC                                                         |   0x07 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * NOCs                                                              | 0x0000 |
| * FabricsList                                                       | 0x0001 |
| * SupportedFabrics                                                  | 0x0002 |
| * CommissionedFabrics                                               | 0x0003 |
| * TrustedRootCertificates                                           | 0x0004 |
| * CurrentFabricIndex                                                | 0x0005 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command AddNOC
 */
class OperationalCredentialsAddNOC : public ClusterCommand
{
public:
    OperationalCredentialsAddNOC() : ClusterCommand("add-noc")
    {
        AddArgument("NOCValue", &mRequest.NOCValue);
        AddArgument("ICACValue", &mRequest.ICACValue);
        AddArgument("IPKValue", &mRequest.IPKValue);
        AddArgument("CaseAdminNode", 0, UINT64_MAX, &mRequest.caseAdminNode);
        AddArgument("AdminVendorId", 0, UINT16_MAX, &mRequest.adminVendorId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003E) command (0x00000006) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003E, 0x00000006, mRequest);
    }

private:
    chip::app::Clusters::OperationalCredentials::Commands::AddNOC::Type mRequest;
};

/*
 * Command AddTrustedRootCertificate
 */
class OperationalCredentialsAddTrustedRootCertificate : public ClusterCommand
{
public:
    OperationalCredentialsAddTrustedRootCertificate() : ClusterCommand("add-trusted-root-certificate")
    {
        AddArgument("RootCertificate", &mRequest.rootCertificate);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003E) command (0x0000000B) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003E, 0x0000000B, mRequest);
    }

private:
    chip::app::Clusters::OperationalCredentials::Commands::AddTrustedRootCertificate::Type mRequest;
};

/*
 * Command AttestationRequest
 */
class OperationalCredentialsAttestationRequest : public ClusterCommand
{
public:
    OperationalCredentialsAttestationRequest() : ClusterCommand("attestation-request")
    {
        AddArgument("AttestationNonce", &mRequest.attestationNonce);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003E) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003E, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::OperationalCredentials::Commands::AttestationRequest::Type mRequest;
};

/*
 * Command CertificateChainRequest
 */
class OperationalCredentialsCertificateChainRequest : public ClusterCommand
{
public:
    OperationalCredentialsCertificateChainRequest() : ClusterCommand("certificate-chain-request")
    {
        AddArgument("CertificateType", 0, UINT8_MAX, &mRequest.certificateType);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003E) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003E, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::OperationalCredentials::Commands::CertificateChainRequest::Type mRequest;
};

/*
 * Command OpCSRRequest
 */
class OperationalCredentialsOpCSRRequest : public ClusterCommand
{
public:
    OperationalCredentialsOpCSRRequest() : ClusterCommand("op-csrrequest")
    {
        AddArgument("CSRNonce", &mRequest.CSRNonce);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003E) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003E, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::OperationalCredentials::Commands::OpCSRRequest::Type mRequest;
};

/*
 * Command RemoveFabric
 */
class OperationalCredentialsRemoveFabric : public ClusterCommand
{
public:
    OperationalCredentialsRemoveFabric() : ClusterCommand("remove-fabric")
    {
        AddArgument("FabricIndex", 0, UINT8_MAX, &mRequest.fabricIndex);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003E) command (0x0000000A) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003E, 0x0000000A, mRequest);
    }

private:
    chip::app::Clusters::OperationalCredentials::Commands::RemoveFabric::Type mRequest;
};

/*
 * Command RemoveTrustedRootCertificate
 */
class OperationalCredentialsRemoveTrustedRootCertificate : public ClusterCommand
{
public:
    OperationalCredentialsRemoveTrustedRootCertificate() : ClusterCommand("remove-trusted-root-certificate")
    {
        AddArgument("TrustedRootIdentifier", &mRequest.trustedRootIdentifier);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003E) command (0x0000000C) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003E, 0x0000000C, mRequest);
    }

private:
    chip::app::Clusters::OperationalCredentials::Commands::RemoveTrustedRootCertificate::Type mRequest;
};

/*
 * Command UpdateFabricLabel
 */
class OperationalCredentialsUpdateFabricLabel : public ClusterCommand
{
public:
    OperationalCredentialsUpdateFabricLabel() : ClusterCommand("update-fabric-label")
    {
        AddArgument("Label", &mRequest.label);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003E) command (0x00000009) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003E, 0x00000009, mRequest);
    }

private:
    chip::app::Clusters::OperationalCredentials::Commands::UpdateFabricLabel::Type mRequest;
};

/*
 * Command UpdateNOC
 */
class OperationalCredentialsUpdateNOC : public ClusterCommand
{
public:
    OperationalCredentialsUpdateNOC() : ClusterCommand("update-noc")
    {
        AddArgument("NOCValue", &mRequest.NOCValue);
        AddArgument("ICACValue", &mRequest.ICACValue);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000003E) command (0x00000007) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000003E, 0x00000007, mRequest);
    }

private:
    chip::app::Clusters::OperationalCredentials::Commands::UpdateNOC::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster PowerSource                                                 | 0x002F |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * Status                                                            | 0x0000 |
| * Order                                                             | 0x0001 |
| * Description                                                       | 0x0002 |
| * BatteryVoltage                                                    | 0x000B |
| * BatteryPercentRemaining                                           | 0x000C |
| * BatteryTimeRemaining                                              | 0x000D |
| * BatteryChargeLevel                                                | 0x000E |
| * ActiveBatteryFaults                                               | 0x0012 |
| * BatteryChargeState                                                | 0x001A |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster PowerSourceConfiguration                                    | 0x002E |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * Sources                                                           | 0x0000 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster PressureMeasurement                                         | 0x0403 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MeasuredValue                                                     | 0x0000 |
| * MinMeasuredValue                                                  | 0x0001 |
| * MaxMeasuredValue                                                  | 0x0002 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster PumpConfigurationAndControl                                 | 0x0200 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MaxPressure                                                       | 0x0000 |
| * MaxSpeed                                                          | 0x0001 |
| * MaxFlow                                                           | 0x0002 |
| * MinConstPressure                                                  | 0x0003 |
| * MaxConstPressure                                                  | 0x0004 |
| * MinCompPressure                                                   | 0x0005 |
| * MaxCompPressure                                                   | 0x0006 |
| * MinConstSpeed                                                     | 0x0007 |
| * MaxConstSpeed                                                     | 0x0008 |
| * MinConstFlow                                                      | 0x0009 |
| * MaxConstFlow                                                      | 0x000A |
| * MinConstTemp                                                      | 0x000B |
| * MaxConstTemp                                                      | 0x000C |
| * PumpStatus                                                        | 0x0010 |
| * EffectiveOperationMode                                            | 0x0011 |
| * EffectiveControlMode                                              | 0x0012 |
| * Capacity                                                          | 0x0013 |
| * Speed                                                             | 0x0014 |
| * LifetimeRunningHours                                              | 0x0015 |
| * Power                                                             | 0x0016 |
| * LifetimeEnergyConsumed                                            | 0x0017 |
| * OperationMode                                                     | 0x0020 |
| * ControlMode                                                       | 0x0021 |
| * AlarmMask                                                         | 0x0022 |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * SupplyVoltageLow                                                  | 0x0000 |
| * SupplyVoltageHigh                                                 | 0x0001 |
| * PowerMissingPhase                                                 | 0x0002 |
| * SystemPressureLow                                                 | 0x0003 |
| * SystemPressureHigh                                                | 0x0004 |
| * DryRunning                                                        | 0x0005 |
| * MotorTemperatureHigh                                              | 0x0006 |
| * PumpMotorFatalFailure                                             | 0x0007 |
| * ElectronicTemperatureHigh                                         | 0x0008 |
| * PumpBlocked                                                       | 0x0009 |
| * SensorFailure                                                     | 0x000A |
| * ElectronicNonFatalFailure                                         | 0x000B |
| * ElectronicFatalFailure                                            | 0x000C |
| * GeneralFault                                                      | 0x000D |
| * Leakage                                                           | 0x000E |
| * AirDetection                                                      | 0x000F |
| * TurbineOperation                                                  | 0x0010 |
\*----------------------------------------------------------------------------*/

class WritePumpConfigurationAndControlLifetimeRunningHours : public WriteAttribute
{
public:
    WritePumpConfigurationAndControlLifetimeRunningHours() : WriteAttribute("LifetimeRunningHours")
    {
        AddArgument("attr-name", "lifetime-running-hours");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WritePumpConfigurationAndControlLifetimeRunningHours() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000200, 0x00000015, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint32_t> mValue;
};

class WritePumpConfigurationAndControlLifetimeEnergyConsumed : public WriteAttribute
{
public:
    WritePumpConfigurationAndControlLifetimeEnergyConsumed() : WriteAttribute("LifetimeEnergyConsumed")
    {
        AddArgument("attr-name", "lifetime-energy-consumed");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WritePumpConfigurationAndControlLifetimeEnergyConsumed() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000200, 0x00000017, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint32_t> mValue;
};

class WritePumpConfigurationAndControlOperationMode : public WriteAttribute
{
public:
    WritePumpConfigurationAndControlOperationMode() : WriteAttribute("OperationMode")
    {
        AddArgument("attr-name", "operation-mode");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WritePumpConfigurationAndControlOperationMode() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000200, 0x00000020, mValue);
    }

private:
    uint8_t mValue;
};

class WritePumpConfigurationAndControlControlMode : public WriteAttribute
{
public:
    WritePumpConfigurationAndControlControlMode() : WriteAttribute("ControlMode")
    {
        AddArgument("attr-name", "control-mode");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WritePumpConfigurationAndControlControlMode() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000200, 0x00000021, mValue);
    }

private:
    uint8_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster RelativeHumidityMeasurement                                 | 0x0405 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MeasuredValue                                                     | 0x0000 |
| * MinMeasuredValue                                                  | 0x0001 |
| * MaxMeasuredValue                                                  | 0x0002 |
| * Tolerance                                                         | 0x0003 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster Scenes                                                      | 0x0005 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * AddScene                                                          |   0x00 |
| * GetSceneMembership                                                |   0x06 |
| * RecallScene                                                       |   0x05 |
| * RemoveAllScenes                                                   |   0x03 |
| * RemoveScene                                                       |   0x02 |
| * StoreScene                                                        |   0x04 |
| * ViewScene                                                         |   0x01 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * SceneCount                                                        | 0x0000 |
| * CurrentScene                                                      | 0x0001 |
| * CurrentGroup                                                      | 0x0002 |
| * SceneValid                                                        | 0x0003 |
| * NameSupport                                                       | 0x0004 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command AddScene
 */
class ScenesAddScene : public ClusterCommand
{
public:
    ScenesAddScene() : ClusterCommand("add-scene"), mComplex_ExtensionFieldSets(&mRequest.extensionFieldSets)
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        AddArgument("SceneId", 0, UINT8_MAX, &mRequest.sceneId);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        AddArgument("SceneName", &mRequest.sceneName);
        AddArgument("ExtensionFieldSets", &mComplex_ExtensionFieldSets);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000005) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000005, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::Scenes::Commands::AddScene::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const chip::app::Clusters::Scenes::Structs::SceneExtensionFieldSet::Type>>
        mComplex_ExtensionFieldSets;
};

/*
 * Command GetSceneMembership
 */
class ScenesGetSceneMembership : public ClusterCommand
{
public:
    ScenesGetSceneMembership() : ClusterCommand("get-scene-membership")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000005) command (0x00000006) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000005, 0x00000006, mRequest);
    }

private:
    chip::app::Clusters::Scenes::Commands::GetSceneMembership::Type mRequest;
};

/*
 * Command RecallScene
 */
class ScenesRecallScene : public ClusterCommand
{
public:
    ScenesRecallScene() : ClusterCommand("recall-scene")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        AddArgument("SceneId", 0, UINT8_MAX, &mRequest.sceneId);
        AddArgument("TransitionTime", 0, UINT16_MAX, &mRequest.transitionTime);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000005) command (0x00000005) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000005, 0x00000005, mRequest);
    }

private:
    chip::app::Clusters::Scenes::Commands::RecallScene::Type mRequest;
};

/*
 * Command RemoveAllScenes
 */
class ScenesRemoveAllScenes : public ClusterCommand
{
public:
    ScenesRemoveAllScenes() : ClusterCommand("remove-all-scenes")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000005) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000005, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::Scenes::Commands::RemoveAllScenes::Type mRequest;
};

/*
 * Command RemoveScene
 */
class ScenesRemoveScene : public ClusterCommand
{
public:
    ScenesRemoveScene() : ClusterCommand("remove-scene")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        AddArgument("SceneId", 0, UINT8_MAX, &mRequest.sceneId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000005) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000005, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::Scenes::Commands::RemoveScene::Type mRequest;
};

/*
 * Command StoreScene
 */
class ScenesStoreScene : public ClusterCommand
{
public:
    ScenesStoreScene() : ClusterCommand("store-scene")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        AddArgument("SceneId", 0, UINT8_MAX, &mRequest.sceneId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000005) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000005, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::Scenes::Commands::StoreScene::Type mRequest;
};

/*
 * Command ViewScene
 */
class ScenesViewScene : public ClusterCommand
{
public:
    ScenesViewScene() : ClusterCommand("view-scene")
    {
        AddArgument("GroupId", 0, UINT16_MAX, &mRequest.groupId);
        AddArgument("SceneId", 0, UINT8_MAX, &mRequest.sceneId);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000005) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000005, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::Scenes::Commands::ViewScene::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster SoftwareDiagnostics                                         | 0x0034 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ResetWatermarks                                                   |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * ThreadMetrics                                                     | 0x0000 |
| * CurrentHeapFree                                                   | 0x0001 |
| * CurrentHeapUsed                                                   | 0x0002 |
| * CurrentHeapHighWatermark                                          | 0x0003 |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * SoftwareFault                                                     | 0x0000 |
\*----------------------------------------------------------------------------*/

/*
 * Command ResetWatermarks
 */
class SoftwareDiagnosticsResetWatermarks : public ClusterCommand
{
public:
    SoftwareDiagnosticsResetWatermarks() : ClusterCommand("reset-watermarks") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000034) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000034, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::SoftwareDiagnostics::Commands::ResetWatermarks::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster Switch                                                      | 0x003B |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * NumberOfPositions                                                 | 0x0000 |
| * CurrentPosition                                                   | 0x0001 |
| * MultiPressMax                                                     | 0x0002 |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * SwitchLatched                                                     | 0x0000 |
| * InitialPress                                                      | 0x0001 |
| * LongPress                                                         | 0x0002 |
| * ShortRelease                                                      | 0x0003 |
| * LongRelease                                                       | 0x0004 |
| * MultiPressOngoing                                                 | 0x0005 |
| * MultiPressComplete                                                | 0x0006 |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster TargetNavigator                                             | 0x0505 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * NavigateTargetRequest                                             |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * TargetNavigatorList                                               | 0x0000 |
| * CurrentNavigatorTarget                                            | 0x0001 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command NavigateTargetRequest
 */
class TargetNavigatorNavigateTargetRequest : public ClusterCommand
{
public:
    TargetNavigatorNavigateTargetRequest() : ClusterCommand("navigate-target-request")
    {
        AddArgument("Target", 0, UINT8_MAX, &mRequest.target);
        AddArgument("Data", &mRequest.data);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000505) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000505, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::TargetNavigator::Commands::NavigateTargetRequest::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster TemperatureMeasurement                                      | 0x0402 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * MeasuredValue                                                     | 0x0000 |
| * MinMeasuredValue                                                  | 0x0001 |
| * MaxMeasuredValue                                                  | 0x0002 |
| * Tolerance                                                         | 0x0003 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster TestCluster                                                 | 0x050F |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * SimpleStructEchoRequest                                           |   0x11 |
| * Test                                                              |   0x00 |
| * TestAddArguments                                                  |   0x04 |
| * TestEmitTestEventRequest                                          |   0x14 |
| * TestEnumsRequest                                                  |   0x0E |
| * TestListInt8UArgumentRequest                                      |   0x0A |
| * TestListInt8UReverseRequest                                       |   0x0D |
| * TestListNestedStructListArgumentRequest                           |   0x0C |
| * TestListStructArgumentRequest                                     |   0x09 |
| * TestNestedStructArgumentRequest                                   |   0x08 |
| * TestNestedStructListArgumentRequest                               |   0x0B |
| * TestNotHandled                                                    |   0x01 |
| * TestNullableOptionalRequest                                       |   0x0F |
| * TestSimpleOptionalArgumentRequest                                 |   0x13 |
| * TestSpecific                                                      |   0x02 |
| * TestStructArgumentRequest                                         |   0x07 |
| * TestUnknownCommand                                                |   0x03 |
| * TimedInvokeRequest                                                |   0x12 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * Boolean                                                           | 0x0000 |
| * Bitmap8                                                           | 0x0001 |
| * Bitmap16                                                          | 0x0002 |
| * Bitmap32                                                          | 0x0003 |
| * Bitmap64                                                          | 0x0004 |
| * Int8u                                                             | 0x0005 |
| * Int16u                                                            | 0x0006 |
| * Int24u                                                            | 0x0007 |
| * Int32u                                                            | 0x0008 |
| * Int40u                                                            | 0x0009 |
| * Int48u                                                            | 0x000A |
| * Int56u                                                            | 0x000B |
| * Int64u                                                            | 0x000C |
| * Int8s                                                             | 0x000D |
| * Int16s                                                            | 0x000E |
| * Int24s                                                            | 0x000F |
| * Int32s                                                            | 0x0010 |
| * Int40s                                                            | 0x0011 |
| * Int48s                                                            | 0x0012 |
| * Int56s                                                            | 0x0013 |
| * Int64s                                                            | 0x0014 |
| * Enum8                                                             | 0x0015 |
| * Enum16                                                            | 0x0016 |
| * FloatSingle                                                       | 0x0017 |
| * FloatDouble                                                       | 0x0018 |
| * OctetString                                                       | 0x0019 |
| * ListInt8u                                                         | 0x001A |
| * ListOctetString                                                   | 0x001B |
| * ListStructOctetString                                             | 0x001C |
| * LongOctetString                                                   | 0x001D |
| * CharString                                                        | 0x001E |
| * LongCharString                                                    | 0x001F |
| * EpochUs                                                           | 0x0020 |
| * EpochS                                                            | 0x0021 |
| * VendorId                                                          | 0x0022 |
| * ListNullablesAndOptionalsStruct                                   | 0x0023 |
| * EnumAttr                                                          | 0x0024 |
| * StructAttr                                                        | 0x0025 |
| * RangeRestrictedInt8u                                              | 0x0026 |
| * RangeRestrictedInt8s                                              | 0x0027 |
| * RangeRestrictedInt16u                                             | 0x0028 |
| * RangeRestrictedInt16s                                             | 0x0029 |
| * ListLongOctetString                                               | 0x002A |
| * TimedWriteBoolean                                                 | 0x0030 |
| * GeneralErrorBoolean                                               | 0x0031 |
| * ClusterErrorBoolean                                               | 0x0032 |
| * Unsupported                                                       | 0x00FF |
| * NullableBoolean                                                   | 0x8000 |
| * NullableBitmap8                                                   | 0x8001 |
| * NullableBitmap16                                                  | 0x8002 |
| * NullableBitmap32                                                  | 0x8003 |
| * NullableBitmap64                                                  | 0x8004 |
| * NullableInt8u                                                     | 0x8005 |
| * NullableInt16u                                                    | 0x8006 |
| * NullableInt24u                                                    | 0x8007 |
| * NullableInt32u                                                    | 0x8008 |
| * NullableInt40u                                                    | 0x8009 |
| * NullableInt48u                                                    | 0x800A |
| * NullableInt56u                                                    | 0x800B |
| * NullableInt64u                                                    | 0x800C |
| * NullableInt8s                                                     | 0x800D |
| * NullableInt16s                                                    | 0x800E |
| * NullableInt24s                                                    | 0x800F |
| * NullableInt32s                                                    | 0x8010 |
| * NullableInt40s                                                    | 0x8011 |
| * NullableInt48s                                                    | 0x8012 |
| * NullableInt56s                                                    | 0x8013 |
| * NullableInt64s                                                    | 0x8014 |
| * NullableEnum8                                                     | 0x8015 |
| * NullableEnum16                                                    | 0x8016 |
| * NullableFloatSingle                                               | 0x8017 |
| * NullableFloatDouble                                               | 0x8018 |
| * NullableOctetString                                               | 0x8019 |
| * NullableCharString                                                | 0x801E |
| * NullableEnumAttr                                                  | 0x8024 |
| * NullableStruct                                                    | 0x8025 |
| * NullableRangeRestrictedInt8u                                      | 0x8026 |
| * NullableRangeRestrictedInt8s                                      | 0x8027 |
| * NullableRangeRestrictedInt16u                                     | 0x8028 |
| * NullableRangeRestrictedInt16s                                     | 0x8029 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * TestEvent                                                         | 0x0001 |
| * TestFabricScopedEvent                                             | 0x0002 |
\*----------------------------------------------------------------------------*/

/*
 * Command SimpleStructEchoRequest
 */
class TestClusterSimpleStructEchoRequest : public ClusterCommand
{
public:
    TestClusterSimpleStructEchoRequest() : ClusterCommand("simple-struct-echo-request"), mComplex_Arg1(&mRequest.arg1)
    {
        AddArgument("Arg1", &mComplex_Arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000011) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000011, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::SimpleStructEchoRequest::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::TestCluster::Structs::SimpleStruct::Type> mComplex_Arg1;
};

/*
 * Command Test
 */
class TestClusterTest : public ClusterCommand
{
public:
    TestClusterTest() : ClusterCommand("test") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::Test::Type mRequest;
};

/*
 * Command TestAddArguments
 */
class TestClusterTestAddArguments : public ClusterCommand
{
public:
    TestClusterTestAddArguments() : ClusterCommand("test-add-arguments")
    {
        AddArgument("Arg1", 0, UINT8_MAX, &mRequest.arg1);
        AddArgument("Arg2", 0, UINT8_MAX, &mRequest.arg2);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestAddArguments::Type mRequest;
};

/*
 * Command TestEmitTestEventRequest
 */
class TestClusterTestEmitTestEventRequest : public ClusterCommand
{
public:
    TestClusterTestEmitTestEventRequest() : ClusterCommand("test-emit-test-event-request")
    {
        AddArgument("Arg1", 0, UINT8_MAX, &mRequest.arg1);
        AddArgument("Arg2", 0, UINT8_MAX, reinterpret_cast<std::underlying_type_t<decltype(mRequest.arg2)> *>(&mRequest.arg2));
        AddArgument("Arg3", 0, 1, &mRequest.arg3);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000014) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000014, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestEmitTestEventRequest::Type mRequest;
};

/*
 * Command TestEnumsRequest
 */
class TestClusterTestEnumsRequest : public ClusterCommand
{
public:
    TestClusterTestEnumsRequest() : ClusterCommand("test-enums-request")
    {
        AddArgument("Arg1", 0, UINT16_MAX, &mRequest.arg1);
        AddArgument("Arg2", 0, UINT8_MAX, reinterpret_cast<std::underlying_type_t<decltype(mRequest.arg2)> *>(&mRequest.arg2));
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x0000000E) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x0000000E, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestEnumsRequest::Type mRequest;
};

/*
 * Command TestListInt8UArgumentRequest
 */
class TestClusterTestListInt8UArgumentRequest : public ClusterCommand
{
public:
    TestClusterTestListInt8UArgumentRequest() : ClusterCommand("test-list-int8uargument-request"), mComplex_Arg1(&mRequest.arg1)
    {
        AddArgument("Arg1", &mComplex_Arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x0000000A) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x0000000A, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestListInt8UArgumentRequest::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const uint8_t>> mComplex_Arg1;
};

/*
 * Command TestListInt8UReverseRequest
 */
class TestClusterTestListInt8UReverseRequest : public ClusterCommand
{
public:
    TestClusterTestListInt8UReverseRequest() : ClusterCommand("test-list-int8ureverse-request"), mComplex_Arg1(&mRequest.arg1)
    {
        AddArgument("Arg1", &mComplex_Arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x0000000D) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x0000000D, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestListInt8UReverseRequest::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const uint8_t>> mComplex_Arg1;
};

/*
 * Command TestListNestedStructListArgumentRequest
 */
class TestClusterTestListNestedStructListArgumentRequest : public ClusterCommand
{
public:
    TestClusterTestListNestedStructListArgumentRequest() :
        ClusterCommand("test-list-nested-struct-list-argument-request"), mComplex_Arg1(&mRequest.arg1)
    {
        AddArgument("Arg1", &mComplex_Arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x0000000C) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x0000000C, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestListNestedStructListArgumentRequest::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const chip::app::Clusters::TestCluster::Structs::NestedStructList::Type>>
        mComplex_Arg1;
};

/*
 * Command TestListStructArgumentRequest
 */
class TestClusterTestListStructArgumentRequest : public ClusterCommand
{
public:
    TestClusterTestListStructArgumentRequest() : ClusterCommand("test-list-struct-argument-request"), mComplex_Arg1(&mRequest.arg1)
    {
        AddArgument("Arg1", &mComplex_Arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000009) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000009, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestListStructArgumentRequest::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const chip::app::Clusters::TestCluster::Structs::SimpleStruct::Type>>
        mComplex_Arg1;
};

/*
 * Command TestNestedStructArgumentRequest
 */
class TestClusterTestNestedStructArgumentRequest : public ClusterCommand
{
public:
    TestClusterTestNestedStructArgumentRequest() :
        ClusterCommand("test-nested-struct-argument-request"), mComplex_Arg1(&mRequest.arg1)
    {
        AddArgument("Arg1", &mComplex_Arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000008) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000008, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestNestedStructArgumentRequest::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::TestCluster::Structs::NestedStruct::Type> mComplex_Arg1;
};

/*
 * Command TestNestedStructListArgumentRequest
 */
class TestClusterTestNestedStructListArgumentRequest : public ClusterCommand
{
public:
    TestClusterTestNestedStructListArgumentRequest() :
        ClusterCommand("test-nested-struct-list-argument-request"), mComplex_Arg1(&mRequest.arg1)
    {
        AddArgument("Arg1", &mComplex_Arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x0000000B) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x0000000B, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestNestedStructListArgumentRequest::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::TestCluster::Structs::NestedStructList::Type> mComplex_Arg1;
};

/*
 * Command TestNotHandled
 */
class TestClusterTestNotHandled : public ClusterCommand
{
public:
    TestClusterTestNotHandled() : ClusterCommand("test-not-handled") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestNotHandled::Type mRequest;
};

/*
 * Command TestNullableOptionalRequest
 */
class TestClusterTestNullableOptionalRequest : public ClusterCommand
{
public:
    TestClusterTestNullableOptionalRequest() : ClusterCommand("test-nullable-optional-request")
    {
        AddArgument("Arg1", 0, UINT8_MAX, &mRequest.arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x0000000F) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x0000000F, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestNullableOptionalRequest::Type mRequest;
};

/*
 * Command TestSimpleOptionalArgumentRequest
 */
class TestClusterTestSimpleOptionalArgumentRequest : public ClusterCommand
{
public:
    TestClusterTestSimpleOptionalArgumentRequest() : ClusterCommand("test-simple-optional-argument-request")
    {
        AddArgument("Arg1", 0, 1, &mRequest.arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000013) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000013, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestSimpleOptionalArgumentRequest::Type mRequest;
};

/*
 * Command TestSpecific
 */
class TestClusterTestSpecific : public ClusterCommand
{
public:
    TestClusterTestSpecific() : ClusterCommand("test-specific") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestSpecific::Type mRequest;
};

/*
 * Command TestStructArgumentRequest
 */
class TestClusterTestStructArgumentRequest : public ClusterCommand
{
public:
    TestClusterTestStructArgumentRequest() : ClusterCommand("test-struct-argument-request"), mComplex_Arg1(&mRequest.arg1)
    {
        AddArgument("Arg1", &mComplex_Arg1);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000007) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000007, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestStructArgumentRequest::Type mRequest;
    TypedComplexArgument<chip::app::Clusters::TestCluster::Structs::SimpleStruct::Type> mComplex_Arg1;
};

/*
 * Command TestUnknownCommand
 */
class TestClusterTestUnknownCommand : public ClusterCommand
{
public:
    TestClusterTestUnknownCommand() : ClusterCommand("test-unknown-command") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TestUnknownCommand::Type mRequest;
};

/*
 * Command TimedInvokeRequest
 */
class TestClusterTimedInvokeRequest : public ClusterCommand
{
public:
    TestClusterTimedInvokeRequest() : ClusterCommand("timed-invoke-request") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x0000050F) command (0x00000012) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x0000050F, 0x00000012, mRequest);
    }

private:
    chip::app::Clusters::TestCluster::Commands::TimedInvokeRequest::Type mRequest;
};

class WriteTestClusterBoolean : public WriteAttribute
{
public:
    WriteTestClusterBoolean() : WriteAttribute("Boolean")
    {
        AddArgument("attr-name", "boolean");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterBoolean() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000000, mValue);
    }

private:
    bool mValue;
};

class WriteTestClusterBitmap8 : public WriteAttribute
{
public:
    WriteTestClusterBitmap8() : WriteAttribute("Bitmap8")
    {
        AddArgument("attr-name", "bitmap8");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterBitmap8() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000001, mValue);
    }

private:
    uint8_t mValue;
};

class WriteTestClusterBitmap16 : public WriteAttribute
{
public:
    WriteTestClusterBitmap16() : WriteAttribute("Bitmap16")
    {
        AddArgument("attr-name", "bitmap16");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterBitmap16() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000002, mValue);
    }

private:
    uint16_t mValue;
};

class WriteTestClusterBitmap32 : public WriteAttribute
{
public:
    WriteTestClusterBitmap32() : WriteAttribute("Bitmap32")
    {
        AddArgument("attr-name", "bitmap32");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterBitmap32() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000003, mValue);
    }

private:
    uint32_t mValue;
};

class WriteTestClusterBitmap64 : public WriteAttribute
{
public:
    WriteTestClusterBitmap64() : WriteAttribute("Bitmap64")
    {
        AddArgument("attr-name", "bitmap64");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterBitmap64() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000004, mValue);
    }

private:
    uint64_t mValue;
};

class WriteTestClusterInt8u : public WriteAttribute
{
public:
    WriteTestClusterInt8u() : WriteAttribute("Int8u")
    {
        AddArgument("attr-name", "int8u");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt8u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000005, mValue);
    }

private:
    uint8_t mValue;
};

class WriteTestClusterInt16u : public WriteAttribute
{
public:
    WriteTestClusterInt16u() : WriteAttribute("Int16u")
    {
        AddArgument("attr-name", "int16u");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt16u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000006, mValue);
    }

private:
    uint16_t mValue;
};

class WriteTestClusterInt24u : public WriteAttribute
{
public:
    WriteTestClusterInt24u() : WriteAttribute("Int24u")
    {
        AddArgument("attr-name", "int24u");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt24u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000007, mValue);
    }

private:
    uint32_t mValue;
};

class WriteTestClusterInt32u : public WriteAttribute
{
public:
    WriteTestClusterInt32u() : WriteAttribute("Int32u")
    {
        AddArgument("attr-name", "int32u");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt32u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000008, mValue);
    }

private:
    uint32_t mValue;
};

class WriteTestClusterInt40u : public WriteAttribute
{
public:
    WriteTestClusterInt40u() : WriteAttribute("Int40u")
    {
        AddArgument("attr-name", "int40u");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt40u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000009, mValue);
    }

private:
    uint64_t mValue;
};

class WriteTestClusterInt48u : public WriteAttribute
{
public:
    WriteTestClusterInt48u() : WriteAttribute("Int48u")
    {
        AddArgument("attr-name", "int48u");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt48u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000000A, mValue);
    }

private:
    uint64_t mValue;
};

class WriteTestClusterInt56u : public WriteAttribute
{
public:
    WriteTestClusterInt56u() : WriteAttribute("Int56u")
    {
        AddArgument("attr-name", "int56u");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt56u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000000B, mValue);
    }

private:
    uint64_t mValue;
};

class WriteTestClusterInt64u : public WriteAttribute
{
public:
    WriteTestClusterInt64u() : WriteAttribute("Int64u")
    {
        AddArgument("attr-name", "int64u");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt64u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000000C, mValue);
    }

private:
    uint64_t mValue;
};

class WriteTestClusterInt8s : public WriteAttribute
{
public:
    WriteTestClusterInt8s() : WriteAttribute("Int8s")
    {
        AddArgument("attr-name", "int8s");
        AddArgument("attr-value", INT8_MIN, INT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt8s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000000D, mValue);
    }

private:
    int8_t mValue;
};

class WriteTestClusterInt16s : public WriteAttribute
{
public:
    WriteTestClusterInt16s() : WriteAttribute("Int16s")
    {
        AddArgument("attr-name", "int16s");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt16s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000000E, mValue);
    }

private:
    int16_t mValue;
};

class WriteTestClusterInt24s : public WriteAttribute
{
public:
    WriteTestClusterInt24s() : WriteAttribute("Int24s")
    {
        AddArgument("attr-name", "int24s");
        AddArgument("attr-value", INT32_MIN, INT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt24s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000000F, mValue);
    }

private:
    int32_t mValue;
};

class WriteTestClusterInt32s : public WriteAttribute
{
public:
    WriteTestClusterInt32s() : WriteAttribute("Int32s")
    {
        AddArgument("attr-name", "int32s");
        AddArgument("attr-value", INT32_MIN, INT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt32s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000010, mValue);
    }

private:
    int32_t mValue;
};

class WriteTestClusterInt40s : public WriteAttribute
{
public:
    WriteTestClusterInt40s() : WriteAttribute("Int40s")
    {
        AddArgument("attr-name", "int40s");
        AddArgument("attr-value", INT64_MIN, INT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt40s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000011, mValue);
    }

private:
    int64_t mValue;
};

class WriteTestClusterInt48s : public WriteAttribute
{
public:
    WriteTestClusterInt48s() : WriteAttribute("Int48s")
    {
        AddArgument("attr-name", "int48s");
        AddArgument("attr-value", INT64_MIN, INT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt48s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000012, mValue);
    }

private:
    int64_t mValue;
};

class WriteTestClusterInt56s : public WriteAttribute
{
public:
    WriteTestClusterInt56s() : WriteAttribute("Int56s")
    {
        AddArgument("attr-name", "int56s");
        AddArgument("attr-value", INT64_MIN, INT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt56s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000013, mValue);
    }

private:
    int64_t mValue;
};

class WriteTestClusterInt64s : public WriteAttribute
{
public:
    WriteTestClusterInt64s() : WriteAttribute("Int64s")
    {
        AddArgument("attr-name", "int64s");
        AddArgument("attr-value", INT64_MIN, INT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterInt64s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000014, mValue);
    }

private:
    int64_t mValue;
};

class WriteTestClusterEnum8 : public WriteAttribute
{
public:
    WriteTestClusterEnum8() : WriteAttribute("Enum8")
    {
        AddArgument("attr-name", "enum8");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterEnum8() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000015, mValue);
    }

private:
    uint8_t mValue;
};

class WriteTestClusterEnum16 : public WriteAttribute
{
public:
    WriteTestClusterEnum16() : WriteAttribute("Enum16")
    {
        AddArgument("attr-name", "enum16");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterEnum16() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000016, mValue);
    }

private:
    uint16_t mValue;
};

class WriteTestClusterFloatSingle : public WriteAttribute
{
public:
    WriteTestClusterFloatSingle() : WriteAttribute("FloatSingle")
    {
        AddArgument("attr-name", "float-single");
        AddArgument("attr-value", -std::numeric_limits<float>::infinity(), std::numeric_limits<float>::infinity(), &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterFloatSingle() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000017, mValue);
    }

private:
    float mValue;
};

class WriteTestClusterFloatDouble : public WriteAttribute
{
public:
    WriteTestClusterFloatDouble() : WriteAttribute("FloatDouble")
    {
        AddArgument("attr-name", "float-double");
        AddArgument("attr-value", -std::numeric_limits<double>::infinity(), std::numeric_limits<double>::infinity(), &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterFloatDouble() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000018, mValue);
    }

private:
    double mValue;
};

class WriteTestClusterOctetString : public WriteAttribute
{
public:
    WriteTestClusterOctetString() : WriteAttribute("OctetString")
    {
        AddArgument("attr-name", "octet-string");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterOctetString() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000019, mValue);
    }

private:
    chip::ByteSpan mValue;
};

class WriteTestClusterListInt8u : public WriteAttribute
{
public:
    WriteTestClusterListInt8u() : WriteAttribute("ListInt8u"), mComplex(&mValue)
    {
        AddArgument("attr-name", "list-int8u");
        AddArgument("attr-value", &mComplex);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterListInt8u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000001A, mValue);
    }

private:
    chip::app::DataModel::List<const uint8_t> mValue;
    TypedComplexArgument<chip::app::DataModel::List<const uint8_t>> mComplex;
};

class WriteTestClusterListOctetString : public WriteAttribute
{
public:
    WriteTestClusterListOctetString() : WriteAttribute("ListOctetString"), mComplex(&mValue)
    {
        AddArgument("attr-name", "list-octet-string");
        AddArgument("attr-value", &mComplex);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterListOctetString() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000001B, mValue);
    }

private:
    chip::app::DataModel::List<const chip::ByteSpan> mValue;
    TypedComplexArgument<chip::app::DataModel::List<const chip::ByteSpan>> mComplex;
};

class WriteTestClusterListStructOctetString : public WriteAttribute
{
public:
    WriteTestClusterListStructOctetString() : WriteAttribute("ListStructOctetString"), mComplex(&mValue)
    {
        AddArgument("attr-name", "list-struct-octet-string");
        AddArgument("attr-value", &mComplex);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterListStructOctetString() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000001C, mValue);
    }

private:
    chip::app::DataModel::List<const chip::app::Clusters::TestCluster::Structs::TestListStructOctet::Type> mValue;
    TypedComplexArgument<chip::app::DataModel::List<const chip::app::Clusters::TestCluster::Structs::TestListStructOctet::Type>>
        mComplex;
};

class WriteTestClusterLongOctetString : public WriteAttribute
{
public:
    WriteTestClusterLongOctetString() : WriteAttribute("LongOctetString")
    {
        AddArgument("attr-name", "long-octet-string");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterLongOctetString() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000001D, mValue);
    }

private:
    chip::ByteSpan mValue;
};

class WriteTestClusterCharString : public WriteAttribute
{
public:
    WriteTestClusterCharString() : WriteAttribute("CharString")
    {
        AddArgument("attr-name", "char-string");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterCharString() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000001E, mValue);
    }

private:
    chip::CharSpan mValue;
};

class WriteTestClusterLongCharString : public WriteAttribute
{
public:
    WriteTestClusterLongCharString() : WriteAttribute("LongCharString")
    {
        AddArgument("attr-name", "long-char-string");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterLongCharString() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000001F, mValue);
    }

private:
    chip::CharSpan mValue;
};

class WriteTestClusterEpochUs : public WriteAttribute
{
public:
    WriteTestClusterEpochUs() : WriteAttribute("EpochUs")
    {
        AddArgument("attr-name", "epoch-us");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterEpochUs() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000020, mValue);
    }

private:
    uint64_t mValue;
};

class WriteTestClusterEpochS : public WriteAttribute
{
public:
    WriteTestClusterEpochS() : WriteAttribute("EpochS")
    {
        AddArgument("attr-name", "epoch-s");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterEpochS() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000021, mValue);
    }

private:
    uint32_t mValue;
};

class WriteTestClusterVendorId : public WriteAttribute
{
public:
    WriteTestClusterVendorId() : WriteAttribute("VendorId")
    {
        AddArgument("attr-name", "vendor-id");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterVendorId() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000022, mValue);
    }

private:
    chip::VendorId mValue;
};

class WriteTestClusterListNullablesAndOptionalsStruct : public WriteAttribute
{
public:
    WriteTestClusterListNullablesAndOptionalsStruct() : WriteAttribute("ListNullablesAndOptionalsStruct"), mComplex(&mValue)
    {
        AddArgument("attr-name", "list-nullables-and-optionals-struct");
        AddArgument("attr-value", &mComplex);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterListNullablesAndOptionalsStruct() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000023, mValue);
    }

private:
    chip::app::DataModel::List<const chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::Type> mValue;
    TypedComplexArgument<
        chip::app::DataModel::List<const chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::Type>>
        mComplex;
};

class WriteTestClusterEnumAttr : public WriteAttribute
{
public:
    WriteTestClusterEnumAttr() : WriteAttribute("EnumAttr")
    {
        AddArgument("attr-name", "enum-attr");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterEnumAttr() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000024, mValue);
    }

private:
    chip::app::Clusters::TestCluster::SimpleEnum mValue;
};

class WriteTestClusterRangeRestrictedInt8u : public WriteAttribute
{
public:
    WriteTestClusterRangeRestrictedInt8u() : WriteAttribute("RangeRestrictedInt8u")
    {
        AddArgument("attr-name", "range-restricted-int8u");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterRangeRestrictedInt8u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000026, mValue);
    }

private:
    uint8_t mValue;
};

class WriteTestClusterRangeRestrictedInt8s : public WriteAttribute
{
public:
    WriteTestClusterRangeRestrictedInt8s() : WriteAttribute("RangeRestrictedInt8s")
    {
        AddArgument("attr-name", "range-restricted-int8s");
        AddArgument("attr-value", INT8_MIN, INT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterRangeRestrictedInt8s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000027, mValue);
    }

private:
    int8_t mValue;
};

class WriteTestClusterRangeRestrictedInt16u : public WriteAttribute
{
public:
    WriteTestClusterRangeRestrictedInt16u() : WriteAttribute("RangeRestrictedInt16u")
    {
        AddArgument("attr-name", "range-restricted-int16u");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterRangeRestrictedInt16u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000028, mValue);
    }

private:
    uint16_t mValue;
};

class WriteTestClusterRangeRestrictedInt16s : public WriteAttribute
{
public:
    WriteTestClusterRangeRestrictedInt16s() : WriteAttribute("RangeRestrictedInt16s")
    {
        AddArgument("attr-name", "range-restricted-int16s");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterRangeRestrictedInt16s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000029, mValue);
    }

private:
    int16_t mValue;
};

class WriteTestClusterTimedWriteBoolean : public WriteAttribute
{
public:
    WriteTestClusterTimedWriteBoolean() : WriteAttribute("TimedWriteBoolean")
    {
        AddArgument("attr-name", "timed-write-boolean");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterTimedWriteBoolean() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000030, mValue);
    }

private:
    bool mValue;
};

class WriteTestClusterGeneralErrorBoolean : public WriteAttribute
{
public:
    WriteTestClusterGeneralErrorBoolean() : WriteAttribute("GeneralErrorBoolean")
    {
        AddArgument("attr-name", "general-error-boolean");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterGeneralErrorBoolean() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000031, mValue);
    }

private:
    bool mValue;
};

class WriteTestClusterClusterErrorBoolean : public WriteAttribute
{
public:
    WriteTestClusterClusterErrorBoolean() : WriteAttribute("ClusterErrorBoolean")
    {
        AddArgument("attr-name", "cluster-error-boolean");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterClusterErrorBoolean() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00000032, mValue);
    }

private:
    bool mValue;
};

class WriteTestClusterUnsupported : public WriteAttribute
{
public:
    WriteTestClusterUnsupported() : WriteAttribute("Unsupported")
    {
        AddArgument("attr-name", "unsupported");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterUnsupported() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x000000FF, mValue);
    }

private:
    bool mValue;
};

class WriteTestClusterNullableBoolean : public WriteAttribute
{
public:
    WriteTestClusterNullableBoolean() : WriteAttribute("NullableBoolean")
    {
        AddArgument("attr-name", "nullable-boolean");
        AddArgument("attr-value", 0, 1, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableBoolean() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008000, mValue);
    }

private:
    chip::app::DataModel::Nullable<bool> mValue;
};

class WriteTestClusterNullableBitmap8 : public WriteAttribute
{
public:
    WriteTestClusterNullableBitmap8() : WriteAttribute("NullableBitmap8")
    {
        AddArgument("attr-name", "nullable-bitmap8");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableBitmap8() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008001, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint8_t> mValue;
};

class WriteTestClusterNullableBitmap16 : public WriteAttribute
{
public:
    WriteTestClusterNullableBitmap16() : WriteAttribute("NullableBitmap16")
    {
        AddArgument("attr-name", "nullable-bitmap16");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableBitmap16() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008002, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint16_t> mValue;
};

class WriteTestClusterNullableBitmap32 : public WriteAttribute
{
public:
    WriteTestClusterNullableBitmap32() : WriteAttribute("NullableBitmap32")
    {
        AddArgument("attr-name", "nullable-bitmap32");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableBitmap32() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008003, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint32_t> mValue;
};

class WriteTestClusterNullableBitmap64 : public WriteAttribute
{
public:
    WriteTestClusterNullableBitmap64() : WriteAttribute("NullableBitmap64")
    {
        AddArgument("attr-name", "nullable-bitmap64");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableBitmap64() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008004, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint64_t> mValue;
};

class WriteTestClusterNullableInt8u : public WriteAttribute
{
public:
    WriteTestClusterNullableInt8u() : WriteAttribute("NullableInt8u")
    {
        AddArgument("attr-name", "nullable-int8u");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt8u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008005, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint8_t> mValue;
};

class WriteTestClusterNullableInt16u : public WriteAttribute
{
public:
    WriteTestClusterNullableInt16u() : WriteAttribute("NullableInt16u")
    {
        AddArgument("attr-name", "nullable-int16u");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt16u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008006, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint16_t> mValue;
};

class WriteTestClusterNullableInt24u : public WriteAttribute
{
public:
    WriteTestClusterNullableInt24u() : WriteAttribute("NullableInt24u")
    {
        AddArgument("attr-name", "nullable-int24u");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt24u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008007, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint32_t> mValue;
};

class WriteTestClusterNullableInt32u : public WriteAttribute
{
public:
    WriteTestClusterNullableInt32u() : WriteAttribute("NullableInt32u")
    {
        AddArgument("attr-name", "nullable-int32u");
        AddArgument("attr-value", 0, UINT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt32u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008008, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint32_t> mValue;
};

class WriteTestClusterNullableInt40u : public WriteAttribute
{
public:
    WriteTestClusterNullableInt40u() : WriteAttribute("NullableInt40u")
    {
        AddArgument("attr-name", "nullable-int40u");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt40u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008009, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint64_t> mValue;
};

class WriteTestClusterNullableInt48u : public WriteAttribute
{
public:
    WriteTestClusterNullableInt48u() : WriteAttribute("NullableInt48u")
    {
        AddArgument("attr-name", "nullable-int48u");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt48u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000800A, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint64_t> mValue;
};

class WriteTestClusterNullableInt56u : public WriteAttribute
{
public:
    WriteTestClusterNullableInt56u() : WriteAttribute("NullableInt56u")
    {
        AddArgument("attr-name", "nullable-int56u");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt56u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000800B, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint64_t> mValue;
};

class WriteTestClusterNullableInt64u : public WriteAttribute
{
public:
    WriteTestClusterNullableInt64u() : WriteAttribute("NullableInt64u")
    {
        AddArgument("attr-name", "nullable-int64u");
        AddArgument("attr-value", 0, UINT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt64u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000800C, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint64_t> mValue;
};

class WriteTestClusterNullableInt8s : public WriteAttribute
{
public:
    WriteTestClusterNullableInt8s() : WriteAttribute("NullableInt8s")
    {
        AddArgument("attr-name", "nullable-int8s");
        AddArgument("attr-value", INT8_MIN, INT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt8s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000800D, mValue);
    }

private:
    chip::app::DataModel::Nullable<int8_t> mValue;
};

class WriteTestClusterNullableInt16s : public WriteAttribute
{
public:
    WriteTestClusterNullableInt16s() : WriteAttribute("NullableInt16s")
    {
        AddArgument("attr-name", "nullable-int16s");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt16s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000800E, mValue);
    }

private:
    chip::app::DataModel::Nullable<int16_t> mValue;
};

class WriteTestClusterNullableInt24s : public WriteAttribute
{
public:
    WriteTestClusterNullableInt24s() : WriteAttribute("NullableInt24s")
    {
        AddArgument("attr-name", "nullable-int24s");
        AddArgument("attr-value", INT32_MIN, INT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt24s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000800F, mValue);
    }

private:
    chip::app::DataModel::Nullable<int32_t> mValue;
};

class WriteTestClusterNullableInt32s : public WriteAttribute
{
public:
    WriteTestClusterNullableInt32s() : WriteAttribute("NullableInt32s")
    {
        AddArgument("attr-name", "nullable-int32s");
        AddArgument("attr-value", INT32_MIN, INT32_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt32s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008010, mValue);
    }

private:
    chip::app::DataModel::Nullable<int32_t> mValue;
};

class WriteTestClusterNullableInt40s : public WriteAttribute
{
public:
    WriteTestClusterNullableInt40s() : WriteAttribute("NullableInt40s")
    {
        AddArgument("attr-name", "nullable-int40s");
        AddArgument("attr-value", INT64_MIN, INT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt40s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008011, mValue);
    }

private:
    chip::app::DataModel::Nullable<int64_t> mValue;
};

class WriteTestClusterNullableInt48s : public WriteAttribute
{
public:
    WriteTestClusterNullableInt48s() : WriteAttribute("NullableInt48s")
    {
        AddArgument("attr-name", "nullable-int48s");
        AddArgument("attr-value", INT64_MIN, INT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt48s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008012, mValue);
    }

private:
    chip::app::DataModel::Nullable<int64_t> mValue;
};

class WriteTestClusterNullableInt56s : public WriteAttribute
{
public:
    WriteTestClusterNullableInt56s() : WriteAttribute("NullableInt56s")
    {
        AddArgument("attr-name", "nullable-int56s");
        AddArgument("attr-value", INT64_MIN, INT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt56s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008013, mValue);
    }

private:
    chip::app::DataModel::Nullable<int64_t> mValue;
};

class WriteTestClusterNullableInt64s : public WriteAttribute
{
public:
    WriteTestClusterNullableInt64s() : WriteAttribute("NullableInt64s")
    {
        AddArgument("attr-name", "nullable-int64s");
        AddArgument("attr-value", INT64_MIN, INT64_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableInt64s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008014, mValue);
    }

private:
    chip::app::DataModel::Nullable<int64_t> mValue;
};

class WriteTestClusterNullableEnum8 : public WriteAttribute
{
public:
    WriteTestClusterNullableEnum8() : WriteAttribute("NullableEnum8")
    {
        AddArgument("attr-name", "nullable-enum8");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableEnum8() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008015, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint8_t> mValue;
};

class WriteTestClusterNullableEnum16 : public WriteAttribute
{
public:
    WriteTestClusterNullableEnum16() : WriteAttribute("NullableEnum16")
    {
        AddArgument("attr-name", "nullable-enum16");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableEnum16() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008016, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint16_t> mValue;
};

class WriteTestClusterNullableFloatSingle : public WriteAttribute
{
public:
    WriteTestClusterNullableFloatSingle() : WriteAttribute("NullableFloatSingle")
    {
        AddArgument("attr-name", "nullable-float-single");
        AddArgument("attr-value", -std::numeric_limits<float>::infinity(), std::numeric_limits<float>::infinity(), &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableFloatSingle() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008017, mValue);
    }

private:
    chip::app::DataModel::Nullable<float> mValue;
};

class WriteTestClusterNullableFloatDouble : public WriteAttribute
{
public:
    WriteTestClusterNullableFloatDouble() : WriteAttribute("NullableFloatDouble")
    {
        AddArgument("attr-name", "nullable-float-double");
        AddArgument("attr-value", -std::numeric_limits<double>::infinity(), std::numeric_limits<double>::infinity(), &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableFloatDouble() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008018, mValue);
    }

private:
    chip::app::DataModel::Nullable<double> mValue;
};

class WriteTestClusterNullableOctetString : public WriteAttribute
{
public:
    WriteTestClusterNullableOctetString() : WriteAttribute("NullableOctetString")
    {
        AddArgument("attr-name", "nullable-octet-string");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableOctetString() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008019, mValue);
    }

private:
    chip::app::DataModel::Nullable<chip::ByteSpan> mValue;
};

class WriteTestClusterNullableCharString : public WriteAttribute
{
public:
    WriteTestClusterNullableCharString() : WriteAttribute("NullableCharString")
    {
        AddArgument("attr-name", "nullable-char-string");
        AddArgument("attr-value", &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableCharString() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x0000801E, mValue);
    }

private:
    chip::app::DataModel::Nullable<chip::CharSpan> mValue;
};

class WriteTestClusterNullableEnumAttr : public WriteAttribute
{
public:
    WriteTestClusterNullableEnumAttr() : WriteAttribute("NullableEnumAttr")
    {
        AddArgument("attr-name", "nullable-enum-attr");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableEnumAttr() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008024, mValue);
    }

private:
    chip::app::DataModel::Nullable<chip::app::Clusters::TestCluster::SimpleEnum> mValue;
};

class WriteTestClusterNullableRangeRestrictedInt8u : public WriteAttribute
{
public:
    WriteTestClusterNullableRangeRestrictedInt8u() : WriteAttribute("NullableRangeRestrictedInt8u")
    {
        AddArgument("attr-name", "nullable-range-restricted-int8u");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableRangeRestrictedInt8u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008026, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint8_t> mValue;
};

class WriteTestClusterNullableRangeRestrictedInt8s : public WriteAttribute
{
public:
    WriteTestClusterNullableRangeRestrictedInt8s() : WriteAttribute("NullableRangeRestrictedInt8s")
    {
        AddArgument("attr-name", "nullable-range-restricted-int8s");
        AddArgument("attr-value", INT8_MIN, INT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableRangeRestrictedInt8s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008027, mValue);
    }

private:
    chip::app::DataModel::Nullable<int8_t> mValue;
};

class WriteTestClusterNullableRangeRestrictedInt16u : public WriteAttribute
{
public:
    WriteTestClusterNullableRangeRestrictedInt16u() : WriteAttribute("NullableRangeRestrictedInt16u")
    {
        AddArgument("attr-name", "nullable-range-restricted-int16u");
        AddArgument("attr-value", 0, UINT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableRangeRestrictedInt16u() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008028, mValue);
    }

private:
    chip::app::DataModel::Nullable<uint16_t> mValue;
};

class WriteTestClusterNullableRangeRestrictedInt16s : public WriteAttribute
{
public:
    WriteTestClusterNullableRangeRestrictedInt16s() : WriteAttribute("NullableRangeRestrictedInt16s")
    {
        AddArgument("attr-name", "nullable-range-restricted-int16s");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTestClusterNullableRangeRestrictedInt16s() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000050F, 0x00008029, mValue);
    }

private:
    chip::app::DataModel::Nullable<int16_t> mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster Thermostat                                                  | 0x0201 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ClearWeeklySchedule                                               |   0x03 |
| * GetRelayStatusLog                                                 |   0x04 |
| * GetWeeklySchedule                                                 |   0x02 |
| * SetWeeklySchedule                                                 |   0x01 |
| * SetpointRaiseLower                                                |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * LocalTemperature                                                  | 0x0000 |
| * AbsMinHeatSetpointLimit                                           | 0x0003 |
| * AbsMaxHeatSetpointLimit                                           | 0x0004 |
| * AbsMinCoolSetpointLimit                                           | 0x0005 |
| * AbsMaxCoolSetpointLimit                                           | 0x0006 |
| * OccupiedCoolingSetpoint                                           | 0x0011 |
| * OccupiedHeatingSetpoint                                           | 0x0012 |
| * MinHeatSetpointLimit                                              | 0x0015 |
| * MaxHeatSetpointLimit                                              | 0x0016 |
| * MinCoolSetpointLimit                                              | 0x0017 |
| * MaxCoolSetpointLimit                                              | 0x0018 |
| * MinSetpointDeadBand                                               | 0x0019 |
| * ControlSequenceOfOperation                                        | 0x001B |
| * SystemMode                                                        | 0x001C |
| * StartOfWeek                                                       | 0x0020 |
| * NumberOfWeeklyTransitions                                         | 0x0021 |
| * NumberOfDailyTransitions                                          | 0x0022 |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command ClearWeeklySchedule
 */
class ThermostatClearWeeklySchedule : public ClusterCommand
{
public:
    ThermostatClearWeeklySchedule() : ClusterCommand("clear-weekly-schedule") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000201) command (0x00000003) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000201, 0x00000003, mRequest);
    }

private:
    chip::app::Clusters::Thermostat::Commands::ClearWeeklySchedule::Type mRequest;
};

/*
 * Command GetRelayStatusLog
 */
class ThermostatGetRelayStatusLog : public ClusterCommand
{
public:
    ThermostatGetRelayStatusLog() : ClusterCommand("get-relay-status-log") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000201) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000201, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::Thermostat::Commands::GetRelayStatusLog::Type mRequest;
};

/*
 * Command GetWeeklySchedule
 */
class ThermostatGetWeeklySchedule : public ClusterCommand
{
public:
    ThermostatGetWeeklySchedule() : ClusterCommand("get-weekly-schedule")
    {
        AddArgument("DaysToReturn", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<chip::app::Clusters::Thermostat::DayOfWeek> *>(&mRequest.daysToReturn));
        AddArgument(
            "ModeToReturn", 0, UINT8_MAX,
            reinterpret_cast<std::underlying_type_t<chip::app::Clusters::Thermostat::ModeForSequence> *>(&mRequest.modeToReturn));
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000201) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000201, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::Thermostat::Commands::GetWeeklySchedule::Type mRequest;
};

/*
 * Command SetWeeklySchedule
 */
class ThermostatSetWeeklySchedule : public ClusterCommand
{
public:
    ThermostatSetWeeklySchedule() : ClusterCommand("set-weekly-schedule"), mComplex_Payload(&mRequest.payload)
    {
        AddArgument("NumberOfTransitionsForSequence", 0, UINT8_MAX, &mRequest.numberOfTransitionsForSequence);
        AddArgument(
            "DayOfWeekForSequence", 0, UINT8_MAX,
            reinterpret_cast<std::underlying_type_t<chip::app::Clusters::Thermostat::DayOfWeek> *>(&mRequest.dayOfWeekForSequence));
        AddArgument("ModeForSequence", 0, UINT8_MAX,
                    reinterpret_cast<std::underlying_type_t<chip::app::Clusters::Thermostat::ModeForSequence> *>(
                        &mRequest.modeForSequence));
        AddArgument("Payload", &mComplex_Payload);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000201) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000201, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::Thermostat::Commands::SetWeeklySchedule::Type mRequest;
    TypedComplexArgument<chip::app::DataModel::List<const uint8_t>> mComplex_Payload;
};

/*
 * Command SetpointRaiseLower
 */
class ThermostatSetpointRaiseLower : public ClusterCommand
{
public:
    ThermostatSetpointRaiseLower() : ClusterCommand("setpoint-raise-lower")
    {
        AddArgument("Mode", 0, UINT8_MAX, reinterpret_cast<std::underlying_type_t<decltype(mRequest.mode)> *>(&mRequest.mode));
        AddArgument("Amount", INT8_MIN, INT8_MAX, &mRequest.amount);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000201) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000201, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::Thermostat::Commands::SetpointRaiseLower::Type mRequest;
};

class WriteThermostatOccupiedCoolingSetpoint : public WriteAttribute
{
public:
    WriteThermostatOccupiedCoolingSetpoint() : WriteAttribute("OccupiedCoolingSetpoint")
    {
        AddArgument("attr-name", "occupied-cooling-setpoint");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatOccupiedCoolingSetpoint() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000201, 0x00000011, mValue);
    }

private:
    int16_t mValue;
};

class WriteThermostatOccupiedHeatingSetpoint : public WriteAttribute
{
public:
    WriteThermostatOccupiedHeatingSetpoint() : WriteAttribute("OccupiedHeatingSetpoint")
    {
        AddArgument("attr-name", "occupied-heating-setpoint");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatOccupiedHeatingSetpoint() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000201, 0x00000012, mValue);
    }

private:
    int16_t mValue;
};

class WriteThermostatMinHeatSetpointLimit : public WriteAttribute
{
public:
    WriteThermostatMinHeatSetpointLimit() : WriteAttribute("MinHeatSetpointLimit")
    {
        AddArgument("attr-name", "min-heat-setpoint-limit");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatMinHeatSetpointLimit() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000201, 0x00000015, mValue);
    }

private:
    int16_t mValue;
};

class WriteThermostatMaxHeatSetpointLimit : public WriteAttribute
{
public:
    WriteThermostatMaxHeatSetpointLimit() : WriteAttribute("MaxHeatSetpointLimit")
    {
        AddArgument("attr-name", "max-heat-setpoint-limit");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatMaxHeatSetpointLimit() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000201, 0x00000016, mValue);
    }

private:
    int16_t mValue;
};

class WriteThermostatMinCoolSetpointLimit : public WriteAttribute
{
public:
    WriteThermostatMinCoolSetpointLimit() : WriteAttribute("MinCoolSetpointLimit")
    {
        AddArgument("attr-name", "min-cool-setpoint-limit");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatMinCoolSetpointLimit() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000201, 0x00000017, mValue);
    }

private:
    int16_t mValue;
};

class WriteThermostatMaxCoolSetpointLimit : public WriteAttribute
{
public:
    WriteThermostatMaxCoolSetpointLimit() : WriteAttribute("MaxCoolSetpointLimit")
    {
        AddArgument("attr-name", "max-cool-setpoint-limit");
        AddArgument("attr-value", INT16_MIN, INT16_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatMaxCoolSetpointLimit() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000201, 0x00000018, mValue);
    }

private:
    int16_t mValue;
};

class WriteThermostatMinSetpointDeadBand : public WriteAttribute
{
public:
    WriteThermostatMinSetpointDeadBand() : WriteAttribute("MinSetpointDeadBand")
    {
        AddArgument("attr-name", "min-setpoint-dead-band");
        AddArgument("attr-value", INT8_MIN, INT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatMinSetpointDeadBand() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000201, 0x00000019, mValue);
    }

private:
    int8_t mValue;
};

class WriteThermostatControlSequenceOfOperation : public WriteAttribute
{
public:
    WriteThermostatControlSequenceOfOperation() : WriteAttribute("ControlSequenceOfOperation")
    {
        AddArgument("attr-name", "control-sequence-of-operation");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatControlSequenceOfOperation() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000201, 0x0000001B, mValue);
    }

private:
    uint8_t mValue;
};

class WriteThermostatSystemMode : public WriteAttribute
{
public:
    WriteThermostatSystemMode() : WriteAttribute("SystemMode")
    {
        AddArgument("attr-name", "system-mode");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatSystemMode() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000201, 0x0000001C, mValue);
    }

private:
    uint8_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster ThermostatUserInterfaceConfiguration                        | 0x0204 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * TemperatureDisplayMode                                            | 0x0000 |
| * KeypadLockout                                                     | 0x0001 |
| * ScheduleProgrammingVisibility                                     | 0x0002 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

class WriteThermostatUserInterfaceConfigurationTemperatureDisplayMode : public WriteAttribute
{
public:
    WriteThermostatUserInterfaceConfigurationTemperatureDisplayMode() : WriteAttribute("TemperatureDisplayMode")
    {
        AddArgument("attr-name", "temperature-display-mode");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatUserInterfaceConfigurationTemperatureDisplayMode() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000204, 0x00000000, mValue);
    }

private:
    uint8_t mValue;
};

class WriteThermostatUserInterfaceConfigurationKeypadLockout : public WriteAttribute
{
public:
    WriteThermostatUserInterfaceConfigurationKeypadLockout() : WriteAttribute("KeypadLockout")
    {
        AddArgument("attr-name", "keypad-lockout");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatUserInterfaceConfigurationKeypadLockout() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000204, 0x00000001, mValue);
    }

private:
    uint8_t mValue;
};

class WriteThermostatUserInterfaceConfigurationScheduleProgrammingVisibility : public WriteAttribute
{
public:
    WriteThermostatUserInterfaceConfigurationScheduleProgrammingVisibility() : WriteAttribute("ScheduleProgrammingVisibility")
    {
        AddArgument("attr-name", "schedule-programming-visibility");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteThermostatUserInterfaceConfigurationScheduleProgrammingVisibility() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000204, 0x00000002, mValue);
    }

private:
    uint8_t mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster ThreadNetworkDiagnostics                                    | 0x0035 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ResetCounts                                                       |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * Channel                                                           | 0x0000 |
| * RoutingRole                                                       | 0x0001 |
| * NetworkName                                                       | 0x0002 |
| * PanId                                                             | 0x0003 |
| * ExtendedPanId                                                     | 0x0004 |
| * MeshLocalPrefix                                                   | 0x0005 |
| * OverrunCount                                                      | 0x0006 |
| * NeighborTableList                                                 | 0x0007 |
| * RouteTableList                                                    | 0x0008 |
| * PartitionId                                                       | 0x0009 |
| * Weighting                                                         | 0x000A |
| * DataVersion                                                       | 0x000B |
| * StableDataVersion                                                 | 0x000C |
| * LeaderRouterId                                                    | 0x000D |
| * DetachedRoleCount                                                 | 0x000E |
| * ChildRoleCount                                                    | 0x000F |
| * RouterRoleCount                                                   | 0x0010 |
| * LeaderRoleCount                                                   | 0x0011 |
| * AttachAttemptCount                                                | 0x0012 |
| * PartitionIdChangeCount                                            | 0x0013 |
| * BetterPartitionAttachAttemptCount                                 | 0x0014 |
| * ParentChangeCount                                                 | 0x0015 |
| * TxTotalCount                                                      | 0x0016 |
| * TxUnicastCount                                                    | 0x0017 |
| * TxBroadcastCount                                                  | 0x0018 |
| * TxAckRequestedCount                                               | 0x0019 |
| * TxAckedCount                                                      | 0x001A |
| * TxNoAckRequestedCount                                             | 0x001B |
| * TxDataCount                                                       | 0x001C |
| * TxDataPollCount                                                   | 0x001D |
| * TxBeaconCount                                                     | 0x001E |
| * TxBeaconRequestCount                                              | 0x001F |
| * TxOtherCount                                                      | 0x0020 |
| * TxRetryCount                                                      | 0x0021 |
| * TxDirectMaxRetryExpiryCount                                       | 0x0022 |
| * TxIndirectMaxRetryExpiryCount                                     | 0x0023 |
| * TxErrCcaCount                                                     | 0x0024 |
| * TxErrAbortCount                                                   | 0x0025 |
| * TxErrBusyChannelCount                                             | 0x0026 |
| * RxTotalCount                                                      | 0x0027 |
| * RxUnicastCount                                                    | 0x0028 |
| * RxBroadcastCount                                                  | 0x0029 |
| * RxDataCount                                                       | 0x002A |
| * RxDataPollCount                                                   | 0x002B |
| * RxBeaconCount                                                     | 0x002C |
| * RxBeaconRequestCount                                              | 0x002D |
| * RxOtherCount                                                      | 0x002E |
| * RxAddressFilteredCount                                            | 0x002F |
| * RxDestAddrFilteredCount                                           | 0x0030 |
| * RxDuplicatedCount                                                 | 0x0031 |
| * RxErrNoFrameCount                                                 | 0x0032 |
| * RxErrUnknownNeighborCount                                         | 0x0033 |
| * RxErrInvalidSrcAddrCount                                          | 0x0034 |
| * RxErrSecCount                                                     | 0x0035 |
| * RxErrFcsCount                                                     | 0x0036 |
| * RxErrOtherCount                                                   | 0x0037 |
| * ActiveTimestamp                                                   | 0x0038 |
| * PendingTimestamp                                                  | 0x0039 |
| * Delay                                                             | 0x003A |
| * SecurityPolicy                                                    | 0x003B |
| * ChannelMask                                                       | 0x003C |
| * OperationalDatasetComponents                                      | 0x003D |
| * ActiveNetworkFaultsList                                           | 0x003E |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * ConnectionStatus                                                  | 0x0000 |
\*----------------------------------------------------------------------------*/

/*
 * Command ResetCounts
 */
class ThreadNetworkDiagnosticsResetCounts : public ClusterCommand
{
public:
    ThreadNetworkDiagnosticsResetCounts() : ClusterCommand("reset-counts") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000035) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000035, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::ThreadNetworkDiagnostics::Commands::ResetCounts::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster TimeFormatLocalization                                      | 0x002C |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * HourFormat                                                        | 0x0000 |
| * ActiveCalendarType                                                | 0x0001 |
| * SupportedCalendarTypes                                            | 0x0002 |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

class WriteTimeFormatLocalizationHourFormat : public WriteAttribute
{
public:
    WriteTimeFormatLocalizationHourFormat() : WriteAttribute("HourFormat")
    {
        AddArgument("attr-name", "hour-format");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTimeFormatLocalizationHourFormat() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000002C, 0x00000000, mValue);
    }

private:
    chip::app::Clusters::TimeFormatLocalization::HourFormat mValue;
};

class WriteTimeFormatLocalizationActiveCalendarType : public WriteAttribute
{
public:
    WriteTimeFormatLocalizationActiveCalendarType() : WriteAttribute("ActiveCalendarType")
    {
        AddArgument("attr-name", "active-calendar-type");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteTimeFormatLocalizationActiveCalendarType() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000002C, 0x00000001, mValue);
    }

private:
    chip::app::Clusters::TimeFormatLocalization::CalendarType mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster UnitLocalization                                            | 0x002D |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * TemperatureUnit                                                   | 0x0000 |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

class WriteUnitLocalizationTemperatureUnit : public WriteAttribute
{
public:
    WriteUnitLocalizationTemperatureUnit() : WriteAttribute("TemperatureUnit")
    {
        AddArgument("attr-name", "temperature-unit");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteUnitLocalizationTemperatureUnit() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x0000002D, 0x00000000, mValue);
    }

private:
    chip::app::Clusters::UnitLocalization::TempUnit mValue;
};

/*----------------------------------------------------------------------------*\
| Cluster UserLabel                                                   | 0x0041 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * LabelList                                                         | 0x0000 |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

class WriteUserLabelLabelList : public WriteAttribute
{
public:
    WriteUserLabelLabelList() : WriteAttribute("LabelList"), mComplex(&mValue)
    {
        AddArgument("attr-name", "label-list");
        AddArgument("attr-value", &mComplex);
        WriteAttribute::AddArguments();
    }

    ~WriteUserLabelLabelList() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000041, 0x00000000, mValue);
    }

private:
    chip::app::DataModel::List<const chip::app::Clusters::UserLabel::Structs::LabelStruct::Type> mValue;
    TypedComplexArgument<chip::app::DataModel::List<const chip::app::Clusters::UserLabel::Structs::LabelStruct::Type>> mComplex;
};

/*----------------------------------------------------------------------------*\
| Cluster WakeOnLan                                                   | 0x0503 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * WakeOnLanMacAddress                                               | 0x0000 |
| * AttributeList                                                     | 0xFFFB |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*\
| Cluster WiFiNetworkDiagnostics                                      | 0x0036 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * ResetCounts                                                       |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * Bssid                                                             | 0x0000 |
| * SecurityType                                                      | 0x0001 |
| * WiFiVersion                                                       | 0x0002 |
| * ChannelNumber                                                     | 0x0003 |
| * Rssi                                                              | 0x0004 |
| * BeaconLostCount                                                   | 0x0005 |
| * BeaconRxCount                                                     | 0x0006 |
| * PacketMulticastRxCount                                            | 0x0007 |
| * PacketMulticastTxCount                                            | 0x0008 |
| * PacketUnicastRxCount                                              | 0x0009 |
| * PacketUnicastTxCount                                              | 0x000A |
| * CurrentMaxRate                                                    | 0x000B |
| * OverrunCount                                                      | 0x000C |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
| * Disconnection                                                     | 0x0000 |
| * AssociationFailure                                                | 0x0001 |
| * ConnectionStatus                                                  | 0x0002 |
\*----------------------------------------------------------------------------*/

/*
 * Command ResetCounts
 */
class WiFiNetworkDiagnosticsResetCounts : public ClusterCommand
{
public:
    WiFiNetworkDiagnosticsResetCounts() : ClusterCommand("reset-counts") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000036) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000036, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::WiFiNetworkDiagnostics::Commands::ResetCounts::Type mRequest;
};

/*----------------------------------------------------------------------------*\
| Cluster WindowCovering                                              | 0x0102 |
|------------------------------------------------------------------------------|
| Commands:                                                           |        |
| * DownOrClose                                                       |   0x01 |
| * GoToLiftPercentage                                                |   0x05 |
| * GoToLiftValue                                                     |   0x04 |
| * GoToTiltPercentage                                                |   0x08 |
| * GoToTiltValue                                                     |   0x07 |
| * StopMotion                                                        |   0x02 |
| * UpOrOpen                                                          |   0x00 |
|------------------------------------------------------------------------------|
| Attributes:                                                         |        |
| * Type                                                              | 0x0000 |
| * CurrentPositionLift                                               | 0x0003 |
| * CurrentPositionTilt                                               | 0x0004 |
| * ConfigStatus                                                      | 0x0007 |
| * CurrentPositionLiftPercentage                                     | 0x0008 |
| * CurrentPositionTiltPercentage                                     | 0x0009 |
| * OperationalStatus                                                 | 0x000A |
| * TargetPositionLiftPercent100ths                                   | 0x000B |
| * TargetPositionTiltPercent100ths                                   | 0x000C |
| * EndProductType                                                    | 0x000D |
| * CurrentPositionLiftPercent100ths                                  | 0x000E |
| * CurrentPositionTiltPercent100ths                                  | 0x000F |
| * InstalledOpenLimitLift                                            | 0x0010 |
| * InstalledClosedLimitLift                                          | 0x0011 |
| * InstalledOpenLimitTilt                                            | 0x0012 |
| * InstalledClosedLimitTilt                                          | 0x0013 |
| * Mode                                                              | 0x0017 |
| * SafetyStatus                                                      | 0x001A |
| * AttributeList                                                     | 0xFFFB |
| * FeatureMap                                                        | 0xFFFC |
| * ClusterRevision                                                   | 0xFFFD |
|------------------------------------------------------------------------------|
| Events:                                                             |        |
\*----------------------------------------------------------------------------*/

/*
 * Command DownOrClose
 */
class WindowCoveringDownOrClose : public ClusterCommand
{
public:
    WindowCoveringDownOrClose() : ClusterCommand("down-or-close") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000102) command (0x00000001) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000102, 0x00000001, mRequest);
    }

private:
    chip::app::Clusters::WindowCovering::Commands::DownOrClose::Type mRequest;
};

/*
 * Command GoToLiftPercentage
 */
class WindowCoveringGoToLiftPercentage : public ClusterCommand
{
public:
    WindowCoveringGoToLiftPercentage() : ClusterCommand("go-to-lift-percentage")
    {
        AddArgument("LiftPercentageValue", 0, UINT8_MAX, &mRequest.liftPercentageValue);
        AddArgument("LiftPercent100thsValue", 0, UINT16_MAX, &mRequest.liftPercent100thsValue);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000102) command (0x00000005) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000102, 0x00000005, mRequest);
    }

private:
    chip::app::Clusters::WindowCovering::Commands::GoToLiftPercentage::Type mRequest;
};

/*
 * Command GoToLiftValue
 */
class WindowCoveringGoToLiftValue : public ClusterCommand
{
public:
    WindowCoveringGoToLiftValue() : ClusterCommand("go-to-lift-value")
    {
        AddArgument("LiftValue", 0, UINT16_MAX, &mRequest.liftValue);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000102) command (0x00000004) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000102, 0x00000004, mRequest);
    }

private:
    chip::app::Clusters::WindowCovering::Commands::GoToLiftValue::Type mRequest;
};

/*
 * Command GoToTiltPercentage
 */
class WindowCoveringGoToTiltPercentage : public ClusterCommand
{
public:
    WindowCoveringGoToTiltPercentage() : ClusterCommand("go-to-tilt-percentage")
    {
        AddArgument("TiltPercentageValue", 0, UINT8_MAX, &mRequest.tiltPercentageValue);
        AddArgument("TiltPercent100thsValue", 0, UINT16_MAX, &mRequest.tiltPercent100thsValue);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000102) command (0x00000008) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000102, 0x00000008, mRequest);
    }

private:
    chip::app::Clusters::WindowCovering::Commands::GoToTiltPercentage::Type mRequest;
};

/*
 * Command GoToTiltValue
 */
class WindowCoveringGoToTiltValue : public ClusterCommand
{
public:
    WindowCoveringGoToTiltValue() : ClusterCommand("go-to-tilt-value")
    {
        AddArgument("TiltValue", 0, UINT16_MAX, &mRequest.tiltValue);
        ClusterCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000102) command (0x00000007) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000102, 0x00000007, mRequest);
    }

private:
    chip::app::Clusters::WindowCovering::Commands::GoToTiltValue::Type mRequest;
};

/*
 * Command StopMotion
 */
class WindowCoveringStopMotion : public ClusterCommand
{
public:
    WindowCoveringStopMotion() : ClusterCommand("stop-motion") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000102) command (0x00000002) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000102, 0x00000002, mRequest);
    }

private:
    chip::app::Clusters::WindowCovering::Commands::StopMotion::Type mRequest;
};

/*
 * Command UpOrOpen
 */
class WindowCoveringUpOrOpen : public ClusterCommand
{
public:
    WindowCoveringUpOrOpen() : ClusterCommand("up-or-open") { ClusterCommand::AddArguments(); }

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster (0x00000102) command (0x00000000) on endpoint %" PRIu16, endpointId);

        return ClusterCommand::SendCommand(device, endpointId, 0x00000102, 0x00000000, mRequest);
    }

private:
    chip::app::Clusters::WindowCovering::Commands::UpOrOpen::Type mRequest;
};

class WriteWindowCoveringMode : public WriteAttribute
{
public:
    WriteWindowCoveringMode() : WriteAttribute("Mode")
    {
        AddArgument("attr-name", "mode");
        AddArgument("attr-value", 0, UINT8_MAX, &mValue);
        WriteAttribute::AddArguments();
    }

    ~WriteWindowCoveringMode() {}

    CHIP_ERROR SendCommand(ChipDevice * device, chip::EndpointId endpointId) override
    {
        return WriteAttribute::SendCommand(device, endpointId, 0x00000102, 0x00000017, mValue);
    }

private:
    uint8_t mValue;
};

/*----------------------------------------------------------------------------*\
| Register all Clusters commands                                               |
\*----------------------------------------------------------------------------*/
void registerClusterAccessControl(Commands & commands)
{
    using namespace chip::app::Clusters::AccessControl;

    const char * clusterName = "AccessControl";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "acl", Attributes::Acl::Id),                               //
        make_unique<ReadAttribute>(Id, "extension", Attributes::Extension::Id),                   //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<WriteAccessControlAcl>(),                                                     //
        make_unique<WriteAccessControlExtension>(),                                               //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "acl", Attributes::Acl::Id),                          //
        make_unique<SubscribeAttribute>(Id, "extension", Attributes::Extension::Id),              //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                                                     //
        make_unique<ReadEvent>(Id, "access-control-entry-changed", Events::AccessControlEntryChanged::Id),              //
        make_unique<ReadEvent>(Id, "access-control-extension-changed", Events::AccessControlExtensionChanged::Id),      //
        make_unique<SubscribeEvent>(Id),                                                                                //
        make_unique<SubscribeEvent>(Id, "access-control-entry-changed", Events::AccessControlEntryChanged::Id),         //
        make_unique<SubscribeEvent>(Id, "access-control-extension-changed", Events::AccessControlExtensionChanged::Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterAccountLogin(Commands & commands)
{
    using namespace chip::app::Clusters::AccountLogin;

    const char * clusterName = "AccountLogin";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),               //
        make_unique<AccountLoginGetSetupPINRequest>(), //
        make_unique<AccountLoginLoginRequest>(),       //
        make_unique<AccountLoginLogoutRequest>(),      //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterAdministratorCommissioning(Commands & commands)
{
    using namespace chip::app::Clusters::AdministratorCommissioning;

    const char * clusterName = "AdministratorCommissioning";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                                       //
        make_unique<AdministratorCommissioningOpenBasicCommissioningWindow>(), //
        make_unique<AdministratorCommissioningOpenCommissioningWindow>(),      //
        make_unique<AdministratorCommissioningRevokeCommissioning>(),          //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                              //
        make_unique<ReadAttribute>(Id, "window-status", Attributes::WindowStatus::Id),               //
        make_unique<ReadAttribute>(Id, "admin-fabric-index", Attributes::AdminFabricIndex::Id),      //
        make_unique<ReadAttribute>(Id, "admin-vendor-id", Attributes::AdminVendorId::Id),            //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),             //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),         //
        make_unique<WriteAttribute>(Id),                                                             //
        make_unique<SubscribeAttribute>(Id),                                                         //
        make_unique<SubscribeAttribute>(Id, "window-status", Attributes::WindowStatus::Id),          //
        make_unique<SubscribeAttribute>(Id, "admin-fabric-index", Attributes::AdminFabricIndex::Id), //
        make_unique<SubscribeAttribute>(Id, "admin-vendor-id", Attributes::AdminVendorId::Id),       //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),        //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),    //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterApplicationBasic(Commands & commands)
{
    using namespace chip::app::Clusters::ApplicationBasic;

    const char * clusterName = "ApplicationBasic";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                 //
        make_unique<ReadAttribute>(Id, "vendor-name", Attributes::VendorName::Id),                      //
        make_unique<ReadAttribute>(Id, "vendor-id", Attributes::VendorId::Id),                          //
        make_unique<ReadAttribute>(Id, "application-name", Attributes::ApplicationName::Id),            //
        make_unique<ReadAttribute>(Id, "product-id", Attributes::ProductId::Id),                        //
        make_unique<ReadAttribute>(Id, "application-app", Attributes::ApplicationApp::Id),              //
        make_unique<ReadAttribute>(Id, "application-status", Attributes::ApplicationStatus::Id),        //
        make_unique<ReadAttribute>(Id, "application-version", Attributes::ApplicationVersion::Id),      //
        make_unique<ReadAttribute>(Id, "allowed-vendor-list", Attributes::AllowedVendorList::Id),       //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),            //
        make_unique<WriteAttribute>(Id),                                                                //
        make_unique<SubscribeAttribute>(Id),                                                            //
        make_unique<SubscribeAttribute>(Id, "vendor-name", Attributes::VendorName::Id),                 //
        make_unique<SubscribeAttribute>(Id, "vendor-id", Attributes::VendorId::Id),                     //
        make_unique<SubscribeAttribute>(Id, "application-name", Attributes::ApplicationName::Id),       //
        make_unique<SubscribeAttribute>(Id, "product-id", Attributes::ProductId::Id),                   //
        make_unique<SubscribeAttribute>(Id, "application-app", Attributes::ApplicationApp::Id),         //
        make_unique<SubscribeAttribute>(Id, "application-status", Attributes::ApplicationStatus::Id),   //
        make_unique<SubscribeAttribute>(Id, "application-version", Attributes::ApplicationVersion::Id), //
        make_unique<SubscribeAttribute>(Id, "allowed-vendor-list", Attributes::AllowedVendorList::Id),  //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),           //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),       //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterApplicationLauncher(Commands & commands)
{
    using namespace chip::app::Clusters::ApplicationLauncher;

    const char * clusterName = "ApplicationLauncher";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                    //
        make_unique<ApplicationLauncherHideAppRequest>(),   //
        make_unique<ApplicationLauncherLaunchAppRequest>(), //
        make_unique<ApplicationLauncherStopAppRequest>(),   //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                            //
        make_unique<ReadAttribute>(Id, "application-launcher-list", Attributes::ApplicationLauncherList::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                           //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                       //
        make_unique<WriteAttribute>(Id),                                                                           //
        make_unique<SubscribeAttribute>(Id),                                                                       //
        make_unique<SubscribeAttribute>(Id, "application-launcher-list", Attributes::ApplicationLauncherList::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                      //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                  //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterAudioOutput(Commands & commands)
{
    using namespace chip::app::Clusters::AudioOutput;

    const char * clusterName = "AudioOutput";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),               //
        make_unique<AudioOutputRenameOutputRequest>(), //
        make_unique<AudioOutputSelectOutputRequest>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                  //
        make_unique<ReadAttribute>(Id, "audio-output-list", Attributes::AudioOutputList::Id),            //
        make_unique<ReadAttribute>(Id, "current-audio-output", Attributes::CurrentAudioOutput::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                 //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),             //
        make_unique<WriteAttribute>(Id),                                                                 //
        make_unique<SubscribeAttribute>(Id),                                                             //
        make_unique<SubscribeAttribute>(Id, "audio-output-list", Attributes::AudioOutputList::Id),       //
        make_unique<SubscribeAttribute>(Id, "current-audio-output", Attributes::CurrentAudioOutput::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),            //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),        //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterBarrierControl(Commands & commands)
{
    using namespace chip::app::Clusters::BarrierControl;

    const char * clusterName = "BarrierControl";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                        //
        make_unique<BarrierControlBarrierControlGoToPercent>(), //
        make_unique<BarrierControlBarrierControlStop>(),        //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                    //
        make_unique<ReadAttribute>(Id, "barrier-moving-state", Attributes::BarrierMovingState::Id),        //
        make_unique<ReadAttribute>(Id, "barrier-safety-status", Attributes::BarrierSafetyStatus::Id),      //
        make_unique<ReadAttribute>(Id, "barrier-capabilities", Attributes::BarrierCapabilities::Id),       //
        make_unique<ReadAttribute>(Id, "barrier-position", Attributes::BarrierPosition::Id),               //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                   //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),               //
        make_unique<WriteAttribute>(Id),                                                                   //
        make_unique<SubscribeAttribute>(Id),                                                               //
        make_unique<SubscribeAttribute>(Id, "barrier-moving-state", Attributes::BarrierMovingState::Id),   //
        make_unique<SubscribeAttribute>(Id, "barrier-safety-status", Attributes::BarrierSafetyStatus::Id), //
        make_unique<SubscribeAttribute>(Id, "barrier-capabilities", Attributes::BarrierCapabilities::Id),  //
        make_unique<SubscribeAttribute>(Id, "barrier-position", Attributes::BarrierPosition::Id),          //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),              //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),          //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterBasic(Commands & commands)
{
    using namespace chip::app::Clusters::Basic;

    const char * clusterName = "Basic";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                            //
        make_unique<ReadAttribute>(Id, "interaction-model-version", Attributes::InteractionModelVersion::Id),      //
        make_unique<ReadAttribute>(Id, "vendor-name", Attributes::VendorName::Id),                                 //
        make_unique<ReadAttribute>(Id, "vendor-id", Attributes::VendorID::Id),                                     //
        make_unique<ReadAttribute>(Id, "product-name", Attributes::ProductName::Id),                               //
        make_unique<ReadAttribute>(Id, "product-id", Attributes::ProductID::Id),                                   //
        make_unique<ReadAttribute>(Id, "node-label", Attributes::NodeLabel::Id),                                   //
        make_unique<ReadAttribute>(Id, "location", Attributes::Location::Id),                                      //
        make_unique<ReadAttribute>(Id, "hardware-version", Attributes::HardwareVersion::Id),                       //
        make_unique<ReadAttribute>(Id, "hardware-version-string", Attributes::HardwareVersionString::Id),          //
        make_unique<ReadAttribute>(Id, "software-version", Attributes::SoftwareVersion::Id),                       //
        make_unique<ReadAttribute>(Id, "software-version-string", Attributes::SoftwareVersionString::Id),          //
        make_unique<ReadAttribute>(Id, "manufacturing-date", Attributes::ManufacturingDate::Id),                   //
        make_unique<ReadAttribute>(Id, "part-number", Attributes::PartNumber::Id),                                 //
        make_unique<ReadAttribute>(Id, "product-url", Attributes::ProductURL::Id),                                 //
        make_unique<ReadAttribute>(Id, "product-label", Attributes::ProductLabel::Id),                             //
        make_unique<ReadAttribute>(Id, "serial-number", Attributes::SerialNumber::Id),                             //
        make_unique<ReadAttribute>(Id, "local-config-disabled", Attributes::LocalConfigDisabled::Id),              //
        make_unique<ReadAttribute>(Id, "reachable", Attributes::Reachable::Id),                                    //
        make_unique<ReadAttribute>(Id, "unique-id", Attributes::UniqueID::Id),                                     //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                           //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                       //
        make_unique<WriteAttribute>(Id),                                                                           //
        make_unique<WriteBasicNodeLabel>(),                                                                        //
        make_unique<WriteBasicLocation>(),                                                                         //
        make_unique<WriteBasicLocalConfigDisabled>(),                                                              //
        make_unique<SubscribeAttribute>(Id),                                                                       //
        make_unique<SubscribeAttribute>(Id, "interaction-model-version", Attributes::InteractionModelVersion::Id), //
        make_unique<SubscribeAttribute>(Id, "vendor-name", Attributes::VendorName::Id),                            //
        make_unique<SubscribeAttribute>(Id, "vendor-id", Attributes::VendorID::Id),                                //
        make_unique<SubscribeAttribute>(Id, "product-name", Attributes::ProductName::Id),                          //
        make_unique<SubscribeAttribute>(Id, "product-id", Attributes::ProductID::Id),                              //
        make_unique<SubscribeAttribute>(Id, "node-label", Attributes::NodeLabel::Id),                              //
        make_unique<SubscribeAttribute>(Id, "location", Attributes::Location::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "hardware-version", Attributes::HardwareVersion::Id),                  //
        make_unique<SubscribeAttribute>(Id, "hardware-version-string", Attributes::HardwareVersionString::Id),     //
        make_unique<SubscribeAttribute>(Id, "software-version", Attributes::SoftwareVersion::Id),                  //
        make_unique<SubscribeAttribute>(Id, "software-version-string", Attributes::SoftwareVersionString::Id),     //
        make_unique<SubscribeAttribute>(Id, "manufacturing-date", Attributes::ManufacturingDate::Id),              //
        make_unique<SubscribeAttribute>(Id, "part-number", Attributes::PartNumber::Id),                            //
        make_unique<SubscribeAttribute>(Id, "product-url", Attributes::ProductURL::Id),                            //
        make_unique<SubscribeAttribute>(Id, "product-label", Attributes::ProductLabel::Id),                        //
        make_unique<SubscribeAttribute>(Id, "serial-number", Attributes::SerialNumber::Id),                        //
        make_unique<SubscribeAttribute>(Id, "local-config-disabled", Attributes::LocalConfigDisabled::Id),         //
        make_unique<SubscribeAttribute>(Id, "reachable", Attributes::Reachable::Id),                               //
        make_unique<SubscribeAttribute>(Id, "unique-id", Attributes::UniqueID::Id),                                //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                      //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                  //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                         //
        make_unique<ReadEvent>(Id, "start-up", Events::StartUp::Id),                        //
        make_unique<ReadEvent>(Id, "shut-down", Events::ShutDown::Id),                      //
        make_unique<ReadEvent>(Id, "leave", Events::Leave::Id),                             //
        make_unique<ReadEvent>(Id, "reachable-changed", Events::ReachableChanged::Id),      //
        make_unique<SubscribeEvent>(Id),                                                    //
        make_unique<SubscribeEvent>(Id, "start-up", Events::StartUp::Id),                   //
        make_unique<SubscribeEvent>(Id, "shut-down", Events::ShutDown::Id),                 //
        make_unique<SubscribeEvent>(Id, "leave", Events::Leave::Id),                        //
        make_unique<SubscribeEvent>(Id, "reachable-changed", Events::ReachableChanged::Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterBinaryInputBasic(Commands & commands)
{
    using namespace chip::app::Clusters::BinaryInputBasic;

    const char * clusterName = "BinaryInputBasic";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "out-of-service", Attributes::OutOfService::Id),           //
        make_unique<ReadAttribute>(Id, "present-value", Attributes::PresentValue::Id),            //
        make_unique<ReadAttribute>(Id, "status-flags", Attributes::StatusFlags::Id),              //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<WriteBinaryInputBasicOutOfService>(),                                         //
        make_unique<WriteBinaryInputBasicPresentValue>(),                                         //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "out-of-service", Attributes::OutOfService::Id),      //
        make_unique<SubscribeAttribute>(Id, "present-value", Attributes::PresentValue::Id),       //
        make_unique<SubscribeAttribute>(Id, "status-flags", Attributes::StatusFlags::Id),         //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterBinding(Commands & commands)
{
    using namespace chip::app::Clusters::Binding;

    const char * clusterName = "Binding";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        make_unique<BindingBind>(),      //
        make_unique<BindingUnbind>(),    //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterBooleanState(Commands & commands)
{
    using namespace chip::app::Clusters::BooleanState;

    const char * clusterName = "BooleanState";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "state-value", Attributes::StateValue::Id),                //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "state-value", Attributes::StateValue::Id),           //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                               //
        make_unique<ReadEvent>(Id, "state-change", Events::StateChange::Id),      //
        make_unique<SubscribeEvent>(Id),                                          //
        make_unique<SubscribeEvent>(Id, "state-change", Events::StateChange::Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterBridgedActions(Commands & commands)
{
    using namespace chip::app::Clusters::BridgedActions;

    const char * clusterName = "BridgedActions";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                          //
        make_unique<BridgedActionsDisableAction>(),               //
        make_unique<BridgedActionsDisableActionWithDuration>(),   //
        make_unique<BridgedActionsEnableAction>(),                //
        make_unique<BridgedActionsEnableActionWithDuration>(),    //
        make_unique<BridgedActionsInstantAction>(),               //
        make_unique<BridgedActionsInstantActionWithTransition>(), //
        make_unique<BridgedActionsPauseAction>(),                 //
        make_unique<BridgedActionsPauseActionWithDuration>(),     //
        make_unique<BridgedActionsResumeAction>(),                //
        make_unique<BridgedActionsStartAction>(),                 //
        make_unique<BridgedActionsStartActionWithDuration>(),     //
        make_unique<BridgedActionsStopAction>(),                  //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "action-list", Attributes::ActionList::Id),                //
        make_unique<ReadAttribute>(Id, "endpoint-list", Attributes::EndpointList::Id),            //
        make_unique<ReadAttribute>(Id, "setup-url", Attributes::SetupUrl::Id),                    //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "action-list", Attributes::ActionList::Id),           //
        make_unique<SubscribeAttribute>(Id, "endpoint-list", Attributes::EndpointList::Id),       //
        make_unique<SubscribeAttribute>(Id, "setup-url", Attributes::SetupUrl::Id),               //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                 //
        make_unique<ReadEvent>(Id, "state-changed", Events::StateChanged::Id),      //
        make_unique<ReadEvent>(Id, "action-failed", Events::ActionFailed::Id),      //
        make_unique<SubscribeEvent>(Id),                                            //
        make_unique<SubscribeEvent>(Id, "state-changed", Events::StateChanged::Id), //
        make_unique<SubscribeEvent>(Id, "action-failed", Events::ActionFailed::Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterBridgedDeviceBasic(Commands & commands)
{
    using namespace chip::app::Clusters::BridgedDeviceBasic;

    const char * clusterName = "BridgedDeviceBasic";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterChannel(Commands & commands)
{
    using namespace chip::app::Clusters::Channel;

    const char * clusterName = "Channel";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                    //
        make_unique<ChannelChangeChannelByNumberRequest>(), //
        make_unique<ChannelChangeChannelRequest>(),         //
        make_unique<ChannelSkipChannelRequest>(),           //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "channel-list", Attributes::ChannelList::Id),              //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "channel-list", Attributes::ChannelList::Id),         //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterColorControl(Commands & commands)
{
    using namespace chip::app::Clusters::ColorControl;

    const char * clusterName = "ColorControl";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                           //
        make_unique<ColorControlColorLoopSet>(),                   //
        make_unique<ColorControlEnhancedMoveHue>(),                //
        make_unique<ColorControlEnhancedMoveToHue>(),              //
        make_unique<ColorControlEnhancedMoveToHueAndSaturation>(), //
        make_unique<ColorControlEnhancedStepHue>(),                //
        make_unique<ColorControlMoveColor>(),                      //
        make_unique<ColorControlMoveColorTemperature>(),           //
        make_unique<ColorControlMoveHue>(),                        //
        make_unique<ColorControlMoveSaturation>(),                 //
        make_unique<ColorControlMoveToColor>(),                    //
        make_unique<ColorControlMoveToColorTemperature>(),         //
        make_unique<ColorControlMoveToHue>(),                      //
        make_unique<ColorControlMoveToHueAndSaturation>(),         //
        make_unique<ColorControlMoveToSaturation>(),               //
        make_unique<ColorControlStepColor>(),                      //
        make_unique<ColorControlStepColorTemperature>(),           //
        make_unique<ColorControlStepHue>(),                        //
        make_unique<ColorControlStepSaturation>(),                 //
        make_unique<ColorControlStopMoveStep>(),                   //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                                           //
        make_unique<ReadAttribute>(Id, "current-hue", Attributes::CurrentHue::Id),                                                //
        make_unique<ReadAttribute>(Id, "current-saturation", Attributes::CurrentSaturation::Id),                                  //
        make_unique<ReadAttribute>(Id, "remaining-time", Attributes::RemainingTime::Id),                                          //
        make_unique<ReadAttribute>(Id, "current-x", Attributes::CurrentX::Id),                                                    //
        make_unique<ReadAttribute>(Id, "current-y", Attributes::CurrentY::Id),                                                    //
        make_unique<ReadAttribute>(Id, "drift-compensation", Attributes::DriftCompensation::Id),                                  //
        make_unique<ReadAttribute>(Id, "compensation-text", Attributes::CompensationText::Id),                                    //
        make_unique<ReadAttribute>(Id, "color-temperature", Attributes::ColorTemperature::Id),                                    //
        make_unique<ReadAttribute>(Id, "color-mode", Attributes::ColorMode::Id),                                                  //
        make_unique<ReadAttribute>(Id, "color-control-options", Attributes::ColorControlOptions::Id),                             //
        make_unique<ReadAttribute>(Id, "number-of-primaries", Attributes::NumberOfPrimaries::Id),                                 //
        make_unique<ReadAttribute>(Id, "primary1x", Attributes::Primary1X::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary1y", Attributes::Primary1Y::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary1intensity", Attributes::Primary1Intensity::Id),                                   //
        make_unique<ReadAttribute>(Id, "primary2x", Attributes::Primary2X::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary2y", Attributes::Primary2Y::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary2intensity", Attributes::Primary2Intensity::Id),                                   //
        make_unique<ReadAttribute>(Id, "primary3x", Attributes::Primary3X::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary3y", Attributes::Primary3Y::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary3intensity", Attributes::Primary3Intensity::Id),                                   //
        make_unique<ReadAttribute>(Id, "primary4x", Attributes::Primary4X::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary4y", Attributes::Primary4Y::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary4intensity", Attributes::Primary4Intensity::Id),                                   //
        make_unique<ReadAttribute>(Id, "primary5x", Attributes::Primary5X::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary5y", Attributes::Primary5Y::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary5intensity", Attributes::Primary5Intensity::Id),                                   //
        make_unique<ReadAttribute>(Id, "primary6x", Attributes::Primary6X::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary6y", Attributes::Primary6Y::Id),                                                   //
        make_unique<ReadAttribute>(Id, "primary6intensity", Attributes::Primary6Intensity::Id),                                   //
        make_unique<ReadAttribute>(Id, "white-point-x", Attributes::WhitePointX::Id),                                             //
        make_unique<ReadAttribute>(Id, "white-point-y", Attributes::WhitePointY::Id),                                             //
        make_unique<ReadAttribute>(Id, "color-point-rx", Attributes::ColorPointRX::Id),                                           //
        make_unique<ReadAttribute>(Id, "color-point-ry", Attributes::ColorPointRY::Id),                                           //
        make_unique<ReadAttribute>(Id, "color-point-rintensity", Attributes::ColorPointRIntensity::Id),                           //
        make_unique<ReadAttribute>(Id, "color-point-gx", Attributes::ColorPointGX::Id),                                           //
        make_unique<ReadAttribute>(Id, "color-point-gy", Attributes::ColorPointGY::Id),                                           //
        make_unique<ReadAttribute>(Id, "color-point-gintensity", Attributes::ColorPointGIntensity::Id),                           //
        make_unique<ReadAttribute>(Id, "color-point-bx", Attributes::ColorPointBX::Id),                                           //
        make_unique<ReadAttribute>(Id, "color-point-by", Attributes::ColorPointBY::Id),                                           //
        make_unique<ReadAttribute>(Id, "color-point-bintensity", Attributes::ColorPointBIntensity::Id),                           //
        make_unique<ReadAttribute>(Id, "enhanced-current-hue", Attributes::EnhancedCurrentHue::Id),                               //
        make_unique<ReadAttribute>(Id, "enhanced-color-mode", Attributes::EnhancedColorMode::Id),                                 //
        make_unique<ReadAttribute>(Id, "color-loop-active", Attributes::ColorLoopActive::Id),                                     //
        make_unique<ReadAttribute>(Id, "color-loop-direction", Attributes::ColorLoopDirection::Id),                               //
        make_unique<ReadAttribute>(Id, "color-loop-time", Attributes::ColorLoopTime::Id),                                         //
        make_unique<ReadAttribute>(Id, "color-loop-start-enhanced-hue", Attributes::ColorLoopStartEnhancedHue::Id),               //
        make_unique<ReadAttribute>(Id, "color-loop-stored-enhanced-hue", Attributes::ColorLoopStoredEnhancedHue::Id),             //
        make_unique<ReadAttribute>(Id, "color-capabilities", Attributes::ColorCapabilities::Id),                                  //
        make_unique<ReadAttribute>(Id, "color-temp-physical-min", Attributes::ColorTempPhysicalMin::Id),                          //
        make_unique<ReadAttribute>(Id, "color-temp-physical-max", Attributes::ColorTempPhysicalMax::Id),                          //
        make_unique<ReadAttribute>(Id, "couple-color-temp-to-level-min-mireds", Attributes::CoupleColorTempToLevelMinMireds::Id), //
        make_unique<ReadAttribute>(Id, "start-up-color-temperature-mireds", Attributes::StartUpColorTemperatureMireds::Id),       //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                                      //
        make_unique<WriteAttribute>(Id),                                                                                          //
        make_unique<WriteColorControlColorControlOptions>(),                                                                      //
        make_unique<WriteColorControlWhitePointX>(),                                                                              //
        make_unique<WriteColorControlWhitePointY>(),                                                                              //
        make_unique<WriteColorControlColorPointRX>(),                                                                             //
        make_unique<WriteColorControlColorPointRY>(),                                                                             //
        make_unique<WriteColorControlColorPointRIntensity>(),                                                                     //
        make_unique<WriteColorControlColorPointGX>(),                                                                             //
        make_unique<WriteColorControlColorPointGY>(),                                                                             //
        make_unique<WriteColorControlColorPointGIntensity>(),                                                                     //
        make_unique<WriteColorControlColorPointBX>(),                                                                             //
        make_unique<WriteColorControlColorPointBY>(),                                                                             //
        make_unique<WriteColorControlColorPointBIntensity>(),                                                                     //
        make_unique<WriteColorControlStartUpColorTemperatureMireds>(),                                                            //
        make_unique<SubscribeAttribute>(Id),                                                                                      //
        make_unique<SubscribeAttribute>(Id, "current-hue", Attributes::CurrentHue::Id),                                           //
        make_unique<SubscribeAttribute>(Id, "current-saturation", Attributes::CurrentSaturation::Id),                             //
        make_unique<SubscribeAttribute>(Id, "remaining-time", Attributes::RemainingTime::Id),                                     //
        make_unique<SubscribeAttribute>(Id, "current-x", Attributes::CurrentX::Id),                                               //
        make_unique<SubscribeAttribute>(Id, "current-y", Attributes::CurrentY::Id),                                               //
        make_unique<SubscribeAttribute>(Id, "drift-compensation", Attributes::DriftCompensation::Id),                             //
        make_unique<SubscribeAttribute>(Id, "compensation-text", Attributes::CompensationText::Id),                               //
        make_unique<SubscribeAttribute>(Id, "color-temperature", Attributes::ColorTemperature::Id),                               //
        make_unique<SubscribeAttribute>(Id, "color-mode", Attributes::ColorMode::Id),                                             //
        make_unique<SubscribeAttribute>(Id, "color-control-options", Attributes::ColorControlOptions::Id),                        //
        make_unique<SubscribeAttribute>(Id, "number-of-primaries", Attributes::NumberOfPrimaries::Id),                            //
        make_unique<SubscribeAttribute>(Id, "primary1x", Attributes::Primary1X::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary1y", Attributes::Primary1Y::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary1intensity", Attributes::Primary1Intensity::Id),                              //
        make_unique<SubscribeAttribute>(Id, "primary2x", Attributes::Primary2X::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary2y", Attributes::Primary2Y::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary2intensity", Attributes::Primary2Intensity::Id),                              //
        make_unique<SubscribeAttribute>(Id, "primary3x", Attributes::Primary3X::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary3y", Attributes::Primary3Y::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary3intensity", Attributes::Primary3Intensity::Id),                              //
        make_unique<SubscribeAttribute>(Id, "primary4x", Attributes::Primary4X::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary4y", Attributes::Primary4Y::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary4intensity", Attributes::Primary4Intensity::Id),                              //
        make_unique<SubscribeAttribute>(Id, "primary5x", Attributes::Primary5X::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary5y", Attributes::Primary5Y::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary5intensity", Attributes::Primary5Intensity::Id),                              //
        make_unique<SubscribeAttribute>(Id, "primary6x", Attributes::Primary6X::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary6y", Attributes::Primary6Y::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "primary6intensity", Attributes::Primary6Intensity::Id),                              //
        make_unique<SubscribeAttribute>(Id, "white-point-x", Attributes::WhitePointX::Id),                                        //
        make_unique<SubscribeAttribute>(Id, "white-point-y", Attributes::WhitePointY::Id),                                        //
        make_unique<SubscribeAttribute>(Id, "color-point-rx", Attributes::ColorPointRX::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "color-point-ry", Attributes::ColorPointRY::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "color-point-rintensity", Attributes::ColorPointRIntensity::Id),                      //
        make_unique<SubscribeAttribute>(Id, "color-point-gx", Attributes::ColorPointGX::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "color-point-gy", Attributes::ColorPointGY::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "color-point-gintensity", Attributes::ColorPointGIntensity::Id),                      //
        make_unique<SubscribeAttribute>(Id, "color-point-bx", Attributes::ColorPointBX::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "color-point-by", Attributes::ColorPointBY::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "color-point-bintensity", Attributes::ColorPointBIntensity::Id),                      //
        make_unique<SubscribeAttribute>(Id, "enhanced-current-hue", Attributes::EnhancedCurrentHue::Id),                          //
        make_unique<SubscribeAttribute>(Id, "enhanced-color-mode", Attributes::EnhancedColorMode::Id),                            //
        make_unique<SubscribeAttribute>(Id, "color-loop-active", Attributes::ColorLoopActive::Id),                                //
        make_unique<SubscribeAttribute>(Id, "color-loop-direction", Attributes::ColorLoopDirection::Id),                          //
        make_unique<SubscribeAttribute>(Id, "color-loop-time", Attributes::ColorLoopTime::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "color-loop-start-enhanced-hue", Attributes::ColorLoopStartEnhancedHue::Id),          //
        make_unique<SubscribeAttribute>(Id, "color-loop-stored-enhanced-hue", Attributes::ColorLoopStoredEnhancedHue::Id),        //
        make_unique<SubscribeAttribute>(Id, "color-capabilities", Attributes::ColorCapabilities::Id),                             //
        make_unique<SubscribeAttribute>(Id, "color-temp-physical-min", Attributes::ColorTempPhysicalMin::Id),                     //
        make_unique<SubscribeAttribute>(Id, "color-temp-physical-max", Attributes::ColorTempPhysicalMax::Id),                     //
        make_unique<SubscribeAttribute>(Id, "couple-color-temp-to-level-min-mireds",
                                        Attributes::CoupleColorTempToLevelMinMireds::Id),                                        //
        make_unique<SubscribeAttribute>(Id, "start-up-color-temperature-mireds", Attributes::StartUpColorTemperatureMireds::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                                //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterContentLauncher(Commands & commands)
{
    using namespace chip::app::Clusters::ContentLauncher;

    const char * clusterName = "ContentLauncher";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                    //
        make_unique<ContentLauncherLaunchContentRequest>(), //
        make_unique<ContentLauncherLaunchURLRequest>(),     //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                                    //
        make_unique<ReadAttribute>(Id, "accept-header-list", Attributes::AcceptHeaderList::Id),                            //
        make_unique<ReadAttribute>(Id, "supported-streaming-protocols", Attributes::SupportedStreamingProtocols::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                   //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                               //
        make_unique<WriteAttribute>(Id),                                                                                   //
        make_unique<WriteContentLauncherSupportedStreamingProtocols>(),                                                    //
        make_unique<SubscribeAttribute>(Id),                                                                               //
        make_unique<SubscribeAttribute>(Id, "accept-header-list", Attributes::AcceptHeaderList::Id),                       //
        make_unique<SubscribeAttribute>(Id, "supported-streaming-protocols", Attributes::SupportedStreamingProtocols::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                              //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                          //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterDescriptor(Commands & commands)
{
    using namespace chip::app::Clusters::Descriptor;

    const char * clusterName = "Descriptor";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "device-list", Attributes::DeviceList::Id),                //
        make_unique<ReadAttribute>(Id, "server-list", Attributes::ServerList::Id),                //
        make_unique<ReadAttribute>(Id, "client-list", Attributes::ClientList::Id),                //
        make_unique<ReadAttribute>(Id, "parts-list", Attributes::PartsList::Id),                  //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "device-list", Attributes::DeviceList::Id),           //
        make_unique<SubscribeAttribute>(Id, "server-list", Attributes::ServerList::Id),           //
        make_unique<SubscribeAttribute>(Id, "client-list", Attributes::ClientList::Id),           //
        make_unique<SubscribeAttribute>(Id, "parts-list", Attributes::PartsList::Id),             //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterDiagnosticLogs(Commands & commands)
{
    using namespace chip::app::Clusters::DiagnosticLogs;

    const char * clusterName = "DiagnosticLogs";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                  //
        make_unique<DiagnosticLogsRetrieveLogsRequest>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                       //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),      //
        make_unique<WriteAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterDoorLock(Commands & commands)
{
    using namespace chip::app::Clusters::DoorLock;

    const char * clusterName = "DoorLock";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),            //
        make_unique<DoorLockClearCredential>(),     //
        make_unique<DoorLockClearUser>(),           //
        make_unique<DoorLockGetCredentialStatus>(), //
        make_unique<DoorLockGetUser>(),             //
        make_unique<DoorLockLockDoor>(),            //
        make_unique<DoorLockSetCredential>(),       //
        make_unique<DoorLockSetUser>(),             //
        make_unique<DoorLockUnlockDoor>(),          //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                                      //
        make_unique<ReadAttribute>(Id, "lock-state", Attributes::LockState::Id),                                             //
        make_unique<ReadAttribute>(Id, "lock-type", Attributes::LockType::Id),                                               //
        make_unique<ReadAttribute>(Id, "actuator-enabled", Attributes::ActuatorEnabled::Id),                                 //
        make_unique<ReadAttribute>(Id, "door-state", Attributes::DoorState::Id),                                             //
        make_unique<ReadAttribute>(Id, "number-of-total-users-supported", Attributes::NumberOfTotalUsersSupported::Id),      //
        make_unique<ReadAttribute>(Id, "number-of-pinusers-supported", Attributes::NumberOfPINUsersSupported::Id),           //
        make_unique<ReadAttribute>(Id, "number-of-rfidusers-supported", Attributes::NumberOfRFIDUsersSupported::Id),         //
        make_unique<ReadAttribute>(Id, "max-pincode-length", Attributes::MaxPINCodeLength::Id),                              //
        make_unique<ReadAttribute>(Id, "min-pincode-length", Attributes::MinPINCodeLength::Id),                              //
        make_unique<ReadAttribute>(Id, "max-rfidcode-length", Attributes::MaxRFIDCodeLength::Id),                            //
        make_unique<ReadAttribute>(Id, "min-rfidcode-length", Attributes::MinRFIDCodeLength::Id),                            //
        make_unique<ReadAttribute>(Id, "language", Attributes::Language::Id),                                                //
        make_unique<ReadAttribute>(Id, "auto-relock-time", Attributes::AutoRelockTime::Id),                                  //
        make_unique<ReadAttribute>(Id, "sound-volume", Attributes::SoundVolume::Id),                                         //
        make_unique<ReadAttribute>(Id, "operating-mode", Attributes::OperatingMode::Id),                                     //
        make_unique<ReadAttribute>(Id, "supported-operating-modes", Attributes::SupportedOperatingModes::Id),                //
        make_unique<ReadAttribute>(Id, "enable-one-touch-locking", Attributes::EnableOneTouchLocking::Id),                   //
        make_unique<ReadAttribute>(Id, "enable-privacy-mode-button", Attributes::EnablePrivacyModeButton::Id),               //
        make_unique<ReadAttribute>(Id, "wrong-code-entry-limit", Attributes::WrongCodeEntryLimit::Id),                       //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                     //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                                 //
        make_unique<WriteAttribute>(Id),                                                                                     //
        make_unique<WriteDoorLockLanguage>(),                                                                                //
        make_unique<WriteDoorLockAutoRelockTime>(),                                                                          //
        make_unique<WriteDoorLockSoundVolume>(),                                                                             //
        make_unique<WriteDoorLockOperatingMode>(),                                                                           //
        make_unique<WriteDoorLockEnableOneTouchLocking>(),                                                                   //
        make_unique<WriteDoorLockEnablePrivacyModeButton>(),                                                                 //
        make_unique<WriteDoorLockWrongCodeEntryLimit>(),                                                                     //
        make_unique<SubscribeAttribute>(Id),                                                                                 //
        make_unique<SubscribeAttribute>(Id, "lock-state", Attributes::LockState::Id),                                        //
        make_unique<SubscribeAttribute>(Id, "lock-type", Attributes::LockType::Id),                                          //
        make_unique<SubscribeAttribute>(Id, "actuator-enabled", Attributes::ActuatorEnabled::Id),                            //
        make_unique<SubscribeAttribute>(Id, "door-state", Attributes::DoorState::Id),                                        //
        make_unique<SubscribeAttribute>(Id, "number-of-total-users-supported", Attributes::NumberOfTotalUsersSupported::Id), //
        make_unique<SubscribeAttribute>(Id, "number-of-pinusers-supported", Attributes::NumberOfPINUsersSupported::Id),      //
        make_unique<SubscribeAttribute>(Id, "number-of-rfidusers-supported", Attributes::NumberOfRFIDUsersSupported::Id),    //
        make_unique<SubscribeAttribute>(Id, "max-pincode-length", Attributes::MaxPINCodeLength::Id),                         //
        make_unique<SubscribeAttribute>(Id, "min-pincode-length", Attributes::MinPINCodeLength::Id),                         //
        make_unique<SubscribeAttribute>(Id, "max-rfidcode-length", Attributes::MaxRFIDCodeLength::Id),                       //
        make_unique<SubscribeAttribute>(Id, "min-rfidcode-length", Attributes::MinRFIDCodeLength::Id),                       //
        make_unique<SubscribeAttribute>(Id, "language", Attributes::Language::Id),                                           //
        make_unique<SubscribeAttribute>(Id, "auto-relock-time", Attributes::AutoRelockTime::Id),                             //
        make_unique<SubscribeAttribute>(Id, "sound-volume", Attributes::SoundVolume::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "operating-mode", Attributes::OperatingMode::Id),                                //
        make_unique<SubscribeAttribute>(Id, "supported-operating-modes", Attributes::SupportedOperatingModes::Id),           //
        make_unique<SubscribeAttribute>(Id, "enable-one-touch-locking", Attributes::EnableOneTouchLocking::Id),              //
        make_unique<SubscribeAttribute>(Id, "enable-privacy-mode-button", Attributes::EnablePrivacyModeButton::Id),          //
        make_unique<SubscribeAttribute>(Id, "wrong-code-entry-limit", Attributes::WrongCodeEntryLimit::Id),                  //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                            //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                              //
        make_unique<ReadEvent>(Id, "door-lock-alarm", Events::DoorLockAlarm::Id),                //
        make_unique<ReadEvent>(Id, "door-state-change", Events::DoorStateChange::Id),            //
        make_unique<ReadEvent>(Id, "lock-operation", Events::LockOperation::Id),                 //
        make_unique<ReadEvent>(Id, "lock-operation-error", Events::LockOperationError::Id),      //
        make_unique<ReadEvent>(Id, "lock-user-change", Events::LockUserChange::Id),              //
        make_unique<SubscribeEvent>(Id),                                                         //
        make_unique<SubscribeEvent>(Id, "door-lock-alarm", Events::DoorLockAlarm::Id),           //
        make_unique<SubscribeEvent>(Id, "door-state-change", Events::DoorStateChange::Id),       //
        make_unique<SubscribeEvent>(Id, "lock-operation", Events::LockOperation::Id),            //
        make_unique<SubscribeEvent>(Id, "lock-operation-error", Events::LockOperationError::Id), //
        make_unique<SubscribeEvent>(Id, "lock-user-change", Events::LockUserChange::Id),         //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterElectricalMeasurement(Commands & commands)
{
    using namespace chip::app::Clusters::ElectricalMeasurement;

    const char * clusterName = "ElectricalMeasurement";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                              //
        make_unique<ReadAttribute>(Id, "measurement-type", Attributes::MeasurementType::Id),         //
        make_unique<ReadAttribute>(Id, "total-active-power", Attributes::TotalActivePower::Id),      //
        make_unique<ReadAttribute>(Id, "rms-voltage", Attributes::RmsVoltage::Id),                   //
        make_unique<ReadAttribute>(Id, "rms-voltage-min", Attributes::RmsVoltageMin::Id),            //
        make_unique<ReadAttribute>(Id, "rms-voltage-max", Attributes::RmsVoltageMax::Id),            //
        make_unique<ReadAttribute>(Id, "rms-current", Attributes::RmsCurrent::Id),                   //
        make_unique<ReadAttribute>(Id, "rms-current-min", Attributes::RmsCurrentMin::Id),            //
        make_unique<ReadAttribute>(Id, "rms-current-max", Attributes::RmsCurrentMax::Id),            //
        make_unique<ReadAttribute>(Id, "active-power", Attributes::ActivePower::Id),                 //
        make_unique<ReadAttribute>(Id, "active-power-min", Attributes::ActivePowerMin::Id),          //
        make_unique<ReadAttribute>(Id, "active-power-max", Attributes::ActivePowerMax::Id),          //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),             //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),         //
        make_unique<WriteAttribute>(Id),                                                             //
        make_unique<SubscribeAttribute>(Id),                                                         //
        make_unique<SubscribeAttribute>(Id, "measurement-type", Attributes::MeasurementType::Id),    //
        make_unique<SubscribeAttribute>(Id, "total-active-power", Attributes::TotalActivePower::Id), //
        make_unique<SubscribeAttribute>(Id, "rms-voltage", Attributes::RmsVoltage::Id),              //
        make_unique<SubscribeAttribute>(Id, "rms-voltage-min", Attributes::RmsVoltageMin::Id),       //
        make_unique<SubscribeAttribute>(Id, "rms-voltage-max", Attributes::RmsVoltageMax::Id),       //
        make_unique<SubscribeAttribute>(Id, "rms-current", Attributes::RmsCurrent::Id),              //
        make_unique<SubscribeAttribute>(Id, "rms-current-min", Attributes::RmsCurrentMin::Id),       //
        make_unique<SubscribeAttribute>(Id, "rms-current-max", Attributes::RmsCurrentMax::Id),       //
        make_unique<SubscribeAttribute>(Id, "active-power", Attributes::ActivePower::Id),            //
        make_unique<SubscribeAttribute>(Id, "active-power-min", Attributes::ActivePowerMin::Id),     //
        make_unique<SubscribeAttribute>(Id, "active-power-max", Attributes::ActivePowerMax::Id),     //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),        //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),    //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterEthernetNetworkDiagnostics(Commands & commands)
{
    using namespace chip::app::Clusters::EthernetNetworkDiagnostics;

    const char * clusterName = "EthernetNetworkDiagnostics";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                      //
        make_unique<EthernetNetworkDiagnosticsResetCounts>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "phyrate", Attributes::PHYRate::Id),                       //
        make_unique<ReadAttribute>(Id, "full-duplex", Attributes::FullDuplex::Id),                //
        make_unique<ReadAttribute>(Id, "packet-rx-count", Attributes::PacketRxCount::Id),         //
        make_unique<ReadAttribute>(Id, "packet-tx-count", Attributes::PacketTxCount::Id),         //
        make_unique<ReadAttribute>(Id, "tx-err-count", Attributes::TxErrCount::Id),               //
        make_unique<ReadAttribute>(Id, "collision-count", Attributes::CollisionCount::Id),        //
        make_unique<ReadAttribute>(Id, "overrun-count", Attributes::OverrunCount::Id),            //
        make_unique<ReadAttribute>(Id, "carrier-detect", Attributes::CarrierDetect::Id),          //
        make_unique<ReadAttribute>(Id, "time-since-reset", Attributes::TimeSinceReset::Id),       //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "phyrate", Attributes::PHYRate::Id),                  //
        make_unique<SubscribeAttribute>(Id, "full-duplex", Attributes::FullDuplex::Id),           //
        make_unique<SubscribeAttribute>(Id, "packet-rx-count", Attributes::PacketRxCount::Id),    //
        make_unique<SubscribeAttribute>(Id, "packet-tx-count", Attributes::PacketTxCount::Id),    //
        make_unique<SubscribeAttribute>(Id, "tx-err-count", Attributes::TxErrCount::Id),          //
        make_unique<SubscribeAttribute>(Id, "collision-count", Attributes::CollisionCount::Id),   //
        make_unique<SubscribeAttribute>(Id, "overrun-count", Attributes::OverrunCount::Id),       //
        make_unique<SubscribeAttribute>(Id, "carrier-detect", Attributes::CarrierDetect::Id),     //
        make_unique<SubscribeAttribute>(Id, "time-since-reset", Attributes::TimeSinceReset::Id),  //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),           //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterFixedLabel(Commands & commands)
{
    using namespace chip::app::Clusters::FixedLabel;

    const char * clusterName = "FixedLabel";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "label-list", Attributes::LabelList::Id),                  //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "label-list", Attributes::LabelList::Id),             //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterFlowMeasurement(Commands & commands)
{
    using namespace chip::app::Clusters::FlowMeasurement;

    const char * clusterName = "FlowMeasurement";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                              //
        make_unique<ReadAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),             //
        make_unique<ReadAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "tolerance", Attributes::Tolerance::Id),                      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),             //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),         //
        make_unique<WriteAttribute>(Id),                                                             //
        make_unique<SubscribeAttribute>(Id),                                                         //
        make_unique<SubscribeAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),        //
        make_unique<SubscribeAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "tolerance", Attributes::Tolerance::Id),                 //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),        //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),    //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterGeneralCommissioning(Commands & commands)
{
    using namespace chip::app::Clusters::GeneralCommissioning;

    const char * clusterName = "GeneralCommissioning";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                          //
        make_unique<GeneralCommissioningArmFailSafe>(),           //
        make_unique<GeneralCommissioningCommissioningComplete>(), //
        make_unique<GeneralCommissioningSetRegulatoryConfig>(),   //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                                   //
        make_unique<ReadAttribute>(Id, "breadcrumb", Attributes::Breadcrumb::Id),                                         //
        make_unique<ReadAttribute>(Id, "basic-commissioning-info-list", Attributes::BasicCommissioningInfoList::Id),      //
        make_unique<ReadAttribute>(Id, "regulatory-config", Attributes::RegulatoryConfig::Id),                            //
        make_unique<ReadAttribute>(Id, "location-capability", Attributes::LocationCapability::Id),                        //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                  //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                              //
        make_unique<WriteAttribute>(Id),                                                                                  //
        make_unique<WriteGeneralCommissioningBreadcrumb>(),                                                               //
        make_unique<SubscribeAttribute>(Id),                                                                              //
        make_unique<SubscribeAttribute>(Id, "breadcrumb", Attributes::Breadcrumb::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "basic-commissioning-info-list", Attributes::BasicCommissioningInfoList::Id), //
        make_unique<SubscribeAttribute>(Id, "regulatory-config", Attributes::RegulatoryConfig::Id),                       //
        make_unique<SubscribeAttribute>(Id, "location-capability", Attributes::LocationCapability::Id),                   //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                             //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                         //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterGeneralDiagnostics(Commands & commands)
{
    using namespace chip::app::Clusters::GeneralDiagnostics;

    const char * clusterName = "GeneralDiagnostics";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                        //
        make_unique<ReadAttribute>(Id, "network-interfaces", Attributes::NetworkInterfaces::Id),               //
        make_unique<ReadAttribute>(Id, "reboot-count", Attributes::RebootCount::Id),                           //
        make_unique<ReadAttribute>(Id, "up-time", Attributes::UpTime::Id),                                     //
        make_unique<ReadAttribute>(Id, "total-operational-hours", Attributes::TotalOperationalHours::Id),      //
        make_unique<ReadAttribute>(Id, "boot-reasons", Attributes::BootReasons::Id),                           //
        make_unique<ReadAttribute>(Id, "active-hardware-faults", Attributes::ActiveHardwareFaults::Id),        //
        make_unique<ReadAttribute>(Id, "active-radio-faults", Attributes::ActiveRadioFaults::Id),              //
        make_unique<ReadAttribute>(Id, "active-network-faults", Attributes::ActiveNetworkFaults::Id),          //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                       //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                   //
        make_unique<WriteAttribute>(Id),                                                                       //
        make_unique<SubscribeAttribute>(Id),                                                                   //
        make_unique<SubscribeAttribute>(Id, "network-interfaces", Attributes::NetworkInterfaces::Id),          //
        make_unique<SubscribeAttribute>(Id, "reboot-count", Attributes::RebootCount::Id),                      //
        make_unique<SubscribeAttribute>(Id, "up-time", Attributes::UpTime::Id),                                //
        make_unique<SubscribeAttribute>(Id, "total-operational-hours", Attributes::TotalOperationalHours::Id), //
        make_unique<SubscribeAttribute>(Id, "boot-reasons", Attributes::BootReasons::Id),                      //
        make_unique<SubscribeAttribute>(Id, "active-hardware-faults", Attributes::ActiveHardwareFaults::Id),   //
        make_unique<SubscribeAttribute>(Id, "active-radio-faults", Attributes::ActiveRadioFaults::Id),         //
        make_unique<SubscribeAttribute>(Id, "active-network-faults", Attributes::ActiveNetworkFaults::Id),     //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                  //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),              //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                                //
        make_unique<ReadEvent>(Id, "hardware-fault-change", Events::HardwareFaultChange::Id),      //
        make_unique<ReadEvent>(Id, "radio-fault-change", Events::RadioFaultChange::Id),            //
        make_unique<ReadEvent>(Id, "network-fault-change", Events::NetworkFaultChange::Id),        //
        make_unique<ReadEvent>(Id, "boot-reason", Events::BootReason::Id),                         //
        make_unique<SubscribeEvent>(Id),                                                           //
        make_unique<SubscribeEvent>(Id, "hardware-fault-change", Events::HardwareFaultChange::Id), //
        make_unique<SubscribeEvent>(Id, "radio-fault-change", Events::RadioFaultChange::Id),       //
        make_unique<SubscribeEvent>(Id, "network-fault-change", Events::NetworkFaultChange::Id),   //
        make_unique<SubscribeEvent>(Id, "boot-reason", Events::BootReason::Id),                    //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterGroupKeyManagement(Commands & commands)
{
    using namespace chip::app::Clusters::GroupKeyManagement;

    const char * clusterName = "GroupKeyManagement";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                       //
        make_unique<GroupKeyManagementKeySetRead>(),           //
        make_unique<GroupKeyManagementKeySetReadAllIndices>(), //
        make_unique<GroupKeyManagementKeySetRemove>(),         //
        make_unique<GroupKeyManagementKeySetWrite>(),          //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                          //
        make_unique<ReadAttribute>(Id, "group-key-map", Attributes::GroupKeyMap::Id),                            //
        make_unique<ReadAttribute>(Id, "group-table", Attributes::GroupTable::Id),                               //
        make_unique<ReadAttribute>(Id, "max-groups-per-fabric", Attributes::MaxGroupsPerFabric::Id),             //
        make_unique<ReadAttribute>(Id, "max-group-keys-per-fabric", Attributes::MaxGroupKeysPerFabric::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                         //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                     //
        make_unique<WriteAttribute>(Id),                                                                         //
        make_unique<SubscribeAttribute>(Id),                                                                     //
        make_unique<SubscribeAttribute>(Id, "group-key-map", Attributes::GroupKeyMap::Id),                       //
        make_unique<SubscribeAttribute>(Id, "group-table", Attributes::GroupTable::Id),                          //
        make_unique<SubscribeAttribute>(Id, "max-groups-per-fabric", Attributes::MaxGroupsPerFabric::Id),        //
        make_unique<SubscribeAttribute>(Id, "max-group-keys-per-fabric", Attributes::MaxGroupKeysPerFabric::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                    //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterGroups(Commands & commands)
{
    using namespace chip::app::Clusters::Groups;

    const char * clusterName = "Groups";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),            //
        make_unique<GroupsAddGroup>(),              //
        make_unique<GroupsAddGroupIfIdentifying>(), //
        make_unique<GroupsGetGroupMembership>(),    //
        make_unique<GroupsRemoveAllGroups>(),       //
        make_unique<GroupsRemoveGroup>(),           //
        make_unique<GroupsViewGroup>(),             //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "name-support", Attributes::NameSupport::Id),              //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "name-support", Attributes::NameSupport::Id),         //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterIdentify(Commands & commands)
{
    using namespace chip::app::Clusters::Identify;

    const char * clusterName = "Identify";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),      //
        make_unique<IdentifyIdentify>(),      //
        make_unique<IdentifyIdentifyQuery>(), //
        make_unique<IdentifyTriggerEffect>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "identify-time", Attributes::IdentifyTime::Id),            //
        make_unique<ReadAttribute>(Id, "identify-type", Attributes::IdentifyType::Id),            //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<WriteIdentifyIdentifyTime>(),                                                 //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "identify-time", Attributes::IdentifyTime::Id),       //
        make_unique<SubscribeAttribute>(Id, "identify-type", Attributes::IdentifyType::Id),       //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterIlluminanceMeasurement(Commands & commands)
{
    using namespace chip::app::Clusters::IlluminanceMeasurement;

    const char * clusterName = "IlluminanceMeasurement";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                              //
        make_unique<ReadAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),             //
        make_unique<ReadAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "tolerance", Attributes::Tolerance::Id),                      //
        make_unique<ReadAttribute>(Id, "light-sensor-type", Attributes::LightSensorType::Id),        //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),             //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),         //
        make_unique<WriteAttribute>(Id),                                                             //
        make_unique<SubscribeAttribute>(Id),                                                         //
        make_unique<SubscribeAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),        //
        make_unique<SubscribeAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "tolerance", Attributes::Tolerance::Id),                 //
        make_unique<SubscribeAttribute>(Id, "light-sensor-type", Attributes::LightSensorType::Id),   //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),        //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),    //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterKeypadInput(Commands & commands)
{
    using namespace chip::app::Clusters::KeypadInput;

    const char * clusterName = "KeypadInput";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),          //
        make_unique<KeypadInputSendKeyRequest>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterLevelControl(Commands & commands)
{
    using namespace chip::app::Clusters::LevelControl;

    const char * clusterName = "LevelControl";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                 //
        make_unique<LevelControlMove>(),                 //
        make_unique<LevelControlMoveToLevel>(),          //
        make_unique<LevelControlMoveToLevelWithOnOff>(), //
        make_unique<LevelControlMoveWithOnOff>(),        //
        make_unique<LevelControlStep>(),                 //
        make_unique<LevelControlStepWithOnOff>(),        //
        make_unique<LevelControlStop>(),                 //
        make_unique<LevelControlStopWithOnOff>(),        //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                     //
        make_unique<ReadAttribute>(Id, "current-level", Attributes::CurrentLevel::Id),                      //
        make_unique<ReadAttribute>(Id, "remaining-time", Attributes::RemainingTime::Id),                    //
        make_unique<ReadAttribute>(Id, "min-level", Attributes::MinLevel::Id),                              //
        make_unique<ReadAttribute>(Id, "max-level", Attributes::MaxLevel::Id),                              //
        make_unique<ReadAttribute>(Id, "current-frequency", Attributes::CurrentFrequency::Id),              //
        make_unique<ReadAttribute>(Id, "min-frequency", Attributes::MinFrequency::Id),                      //
        make_unique<ReadAttribute>(Id, "max-frequency", Attributes::MaxFrequency::Id),                      //
        make_unique<ReadAttribute>(Id, "options", Attributes::Options::Id),                                 //
        make_unique<ReadAttribute>(Id, "on-off-transition-time", Attributes::OnOffTransitionTime::Id),      //
        make_unique<ReadAttribute>(Id, "on-level", Attributes::OnLevel::Id),                                //
        make_unique<ReadAttribute>(Id, "on-transition-time", Attributes::OnTransitionTime::Id),             //
        make_unique<ReadAttribute>(Id, "off-transition-time", Attributes::OffTransitionTime::Id),           //
        make_unique<ReadAttribute>(Id, "default-move-rate", Attributes::DefaultMoveRate::Id),               //
        make_unique<ReadAttribute>(Id, "start-up-current-level", Attributes::StartUpCurrentLevel::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                    //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                //
        make_unique<WriteAttribute>(Id),                                                                    //
        make_unique<WriteLevelControlOptions>(),                                                            //
        make_unique<WriteLevelControlOnOffTransitionTime>(),                                                //
        make_unique<WriteLevelControlOnLevel>(),                                                            //
        make_unique<WriteLevelControlOnTransitionTime>(),                                                   //
        make_unique<WriteLevelControlOffTransitionTime>(),                                                  //
        make_unique<WriteLevelControlDefaultMoveRate>(),                                                    //
        make_unique<WriteLevelControlStartUpCurrentLevel>(),                                                //
        make_unique<SubscribeAttribute>(Id),                                                                //
        make_unique<SubscribeAttribute>(Id, "current-level", Attributes::CurrentLevel::Id),                 //
        make_unique<SubscribeAttribute>(Id, "remaining-time", Attributes::RemainingTime::Id),               //
        make_unique<SubscribeAttribute>(Id, "min-level", Attributes::MinLevel::Id),                         //
        make_unique<SubscribeAttribute>(Id, "max-level", Attributes::MaxLevel::Id),                         //
        make_unique<SubscribeAttribute>(Id, "current-frequency", Attributes::CurrentFrequency::Id),         //
        make_unique<SubscribeAttribute>(Id, "min-frequency", Attributes::MinFrequency::Id),                 //
        make_unique<SubscribeAttribute>(Id, "max-frequency", Attributes::MaxFrequency::Id),                 //
        make_unique<SubscribeAttribute>(Id, "options", Attributes::Options::Id),                            //
        make_unique<SubscribeAttribute>(Id, "on-off-transition-time", Attributes::OnOffTransitionTime::Id), //
        make_unique<SubscribeAttribute>(Id, "on-level", Attributes::OnLevel::Id),                           //
        make_unique<SubscribeAttribute>(Id, "on-transition-time", Attributes::OnTransitionTime::Id),        //
        make_unique<SubscribeAttribute>(Id, "off-transition-time", Attributes::OffTransitionTime::Id),      //
        make_unique<SubscribeAttribute>(Id, "default-move-rate", Attributes::DefaultMoveRate::Id),          //
        make_unique<SubscribeAttribute>(Id, "start-up-current-level", Attributes::StartUpCurrentLevel::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),               //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),           //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterLocalizationConfiguration(Commands & commands)
{
    using namespace chip::app::Clusters::LocalizationConfiguration;

    const char * clusterName = "LocalizationConfiguration";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                             //
        make_unique<ReadAttribute>(Id, "active-locale", Attributes::ActiveLocale::Id),              //
        make_unique<ReadAttribute>(Id, "supported-locales", Attributes::SupportedLocales::Id),      //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),        //
        make_unique<WriteAttribute>(Id),                                                            //
        make_unique<WriteLocalizationConfigurationActiveLocale>(),                                  //
        make_unique<SubscribeAttribute>(Id),                                                        //
        make_unique<SubscribeAttribute>(Id, "active-locale", Attributes::ActiveLocale::Id),         //
        make_unique<SubscribeAttribute>(Id, "supported-locales", Attributes::SupportedLocales::Id), //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),   //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterLowPower(Commands & commands)
{
    using namespace chip::app::Clusters::LowPower;

    const char * clusterName = "LowPower";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        make_unique<LowPowerSleep>(),    //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterMediaInput(Commands & commands)
{
    using namespace chip::app::Clusters::MediaInput;

    const char * clusterName = "MediaInput";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                 //
        make_unique<MediaInputHideInputStatusRequest>(), //
        make_unique<MediaInputRenameInputRequest>(),     //
        make_unique<MediaInputSelectInputRequest>(),     //
        make_unique<MediaInputShowInputStatusRequest>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                //
        make_unique<ReadAttribute>(Id, "media-input-list", Attributes::MediaInputList::Id),            //
        make_unique<ReadAttribute>(Id, "current-media-input", Attributes::CurrentMediaInput::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),               //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),           //
        make_unique<WriteAttribute>(Id),                                                               //
        make_unique<SubscribeAttribute>(Id),                                                           //
        make_unique<SubscribeAttribute>(Id, "media-input-list", Attributes::MediaInputList::Id),       //
        make_unique<SubscribeAttribute>(Id, "current-media-input", Attributes::CurrentMediaInput::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterMediaPlayback(Commands & commands)
{
    using namespace chip::app::Clusters::MediaPlayback;

    const char * clusterName = "MediaPlayback";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                 //
        make_unique<MediaPlaybackFastForwardRequest>(),  //
        make_unique<MediaPlaybackNextRequest>(),         //
        make_unique<MediaPlaybackPauseRequest>(),        //
        make_unique<MediaPlaybackPlayRequest>(),         //
        make_unique<MediaPlaybackPreviousRequest>(),     //
        make_unique<MediaPlaybackRewindRequest>(),       //
        make_unique<MediaPlaybackSeekRequest>(),         //
        make_unique<MediaPlaybackSkipBackwardRequest>(), //
        make_unique<MediaPlaybackSkipForwardRequest>(),  //
        make_unique<MediaPlaybackStartOverRequest>(),    //
        make_unique<MediaPlaybackStopRequest>(),         //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "playback-state", Attributes::PlaybackState::Id),          //
        make_unique<ReadAttribute>(Id, "start-time", Attributes::StartTime::Id),                  //
        make_unique<ReadAttribute>(Id, "duration", Attributes::Duration::Id),                     //
        make_unique<ReadAttribute>(Id, "playback-speed", Attributes::PlaybackSpeed::Id),          //
        make_unique<ReadAttribute>(Id, "seek-range-end", Attributes::SeekRangeEnd::Id),           //
        make_unique<ReadAttribute>(Id, "seek-range-start", Attributes::SeekRangeStart::Id),       //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "playback-state", Attributes::PlaybackState::Id),     //
        make_unique<SubscribeAttribute>(Id, "start-time", Attributes::StartTime::Id),             //
        make_unique<SubscribeAttribute>(Id, "duration", Attributes::Duration::Id),                //
        make_unique<SubscribeAttribute>(Id, "playback-speed", Attributes::PlaybackSpeed::Id),     //
        make_unique<SubscribeAttribute>(Id, "seek-range-end", Attributes::SeekRangeEnd::Id),      //
        make_unique<SubscribeAttribute>(Id, "seek-range-start", Attributes::SeekRangeStart::Id),  //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterModeSelect(Commands & commands)
{
    using namespace chip::app::Clusters::ModeSelect;

    const char * clusterName = "ModeSelect";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),       //
        make_unique<ModeSelectChangeToMode>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "current-mode", Attributes::CurrentMode::Id),              //
        make_unique<ReadAttribute>(Id, "supported-modes", Attributes::SupportedModes::Id),        //
        make_unique<ReadAttribute>(Id, "on-mode", Attributes::OnMode::Id),                        //
        make_unique<ReadAttribute>(Id, "start-up-mode", Attributes::StartUpMode::Id),             //
        make_unique<ReadAttribute>(Id, "description", Attributes::Description::Id),               //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<WriteModeSelectOnMode>(),                                                     //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "current-mode", Attributes::CurrentMode::Id),         //
        make_unique<SubscribeAttribute>(Id, "supported-modes", Attributes::SupportedModes::Id),   //
        make_unique<SubscribeAttribute>(Id, "on-mode", Attributes::OnMode::Id),                   //
        make_unique<SubscribeAttribute>(Id, "start-up-mode", Attributes::StartUpMode::Id),        //
        make_unique<SubscribeAttribute>(Id, "description", Attributes::Description::Id),          //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterNetworkCommissioning(Commands & commands)
{
    using namespace chip::app::Clusters::NetworkCommissioning;

    const char * clusterName = "NetworkCommissioning";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                             //
        make_unique<NetworkCommissioningAddOrUpdateThreadNetwork>(), //
        make_unique<NetworkCommissioningAddOrUpdateWiFiNetwork>(),   //
        make_unique<NetworkCommissioningConnectNetwork>(),           //
        make_unique<NetworkCommissioningRemoveNetwork>(),            //
        make_unique<NetworkCommissioningReorderNetwork>(),           //
        make_unique<NetworkCommissioningScanNetworks>(),             //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                         //
        make_unique<ReadAttribute>(Id, "max-networks", Attributes::MaxNetworks::Id),                            //
        make_unique<ReadAttribute>(Id, "networks", Attributes::Networks::Id),                                   //
        make_unique<ReadAttribute>(Id, "scan-max-time-seconds", Attributes::ScanMaxTimeSeconds::Id),            //
        make_unique<ReadAttribute>(Id, "connect-max-time-seconds", Attributes::ConnectMaxTimeSeconds::Id),      //
        make_unique<ReadAttribute>(Id, "interface-enabled", Attributes::InterfaceEnabled::Id),                  //
        make_unique<ReadAttribute>(Id, "last-networking-status", Attributes::LastNetworkingStatus::Id),         //
        make_unique<ReadAttribute>(Id, "last-network-id", Attributes::LastNetworkID::Id),                       //
        make_unique<ReadAttribute>(Id, "last-connect-error-value", Attributes::LastConnectErrorValue::Id),      //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                              //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                    //
        make_unique<WriteAttribute>(Id),                                                                        //
        make_unique<WriteNetworkCommissioningInterfaceEnabled>(),                                               //
        make_unique<SubscribeAttribute>(Id),                                                                    //
        make_unique<SubscribeAttribute>(Id, "max-networks", Attributes::MaxNetworks::Id),                       //
        make_unique<SubscribeAttribute>(Id, "networks", Attributes::Networks::Id),                              //
        make_unique<SubscribeAttribute>(Id, "scan-max-time-seconds", Attributes::ScanMaxTimeSeconds::Id),       //
        make_unique<SubscribeAttribute>(Id, "connect-max-time-seconds", Attributes::ConnectMaxTimeSeconds::Id), //
        make_unique<SubscribeAttribute>(Id, "interface-enabled", Attributes::InterfaceEnabled::Id),             //
        make_unique<SubscribeAttribute>(Id, "last-networking-status", Attributes::LastNetworkingStatus::Id),    //
        make_unique<SubscribeAttribute>(Id, "last-network-id", Attributes::LastNetworkID::Id),                  //
        make_unique<SubscribeAttribute>(Id, "last-connect-error-value", Attributes::LastConnectErrorValue::Id), //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                         //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),               //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterOtaSoftwareUpdateProvider(Commands & commands)
{
    using namespace chip::app::Clusters::OtaSoftwareUpdateProvider;

    const char * clusterName = "OtaSoftwareUpdateProvider";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                             //
        make_unique<OtaSoftwareUpdateProviderApplyUpdateRequest>(),  //
        make_unique<OtaSoftwareUpdateProviderNotifyUpdateApplied>(), //
        make_unique<OtaSoftwareUpdateProviderQueryImage>(),          //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterOtaSoftwareUpdateRequestor(Commands & commands)
{
    using namespace chip::app::Clusters::OtaSoftwareUpdateRequestor;

    const char * clusterName = "OtaSoftwareUpdateRequestor";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                              //
        make_unique<OtaSoftwareUpdateRequestorAnnounceOtaProvider>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                    //
        make_unique<ReadAttribute>(Id, "default-ota-providers", Attributes::DefaultOtaProviders::Id),      //
        make_unique<ReadAttribute>(Id, "update-possible", Attributes::UpdatePossible::Id),                 //
        make_unique<ReadAttribute>(Id, "update-state", Attributes::UpdateState::Id),                       //
        make_unique<ReadAttribute>(Id, "update-state-progress", Attributes::UpdateStateProgress::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                   //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),               //
        make_unique<WriteAttribute>(Id),                                                                   //
        make_unique<WriteOtaSoftwareUpdateRequestorDefaultOtaProviders>(),                                 //
        make_unique<SubscribeAttribute>(Id),                                                               //
        make_unique<SubscribeAttribute>(Id, "default-ota-providers", Attributes::DefaultOtaProviders::Id), //
        make_unique<SubscribeAttribute>(Id, "update-possible", Attributes::UpdatePossible::Id),            //
        make_unique<SubscribeAttribute>(Id, "update-state", Attributes::UpdateState::Id),                  //
        make_unique<SubscribeAttribute>(Id, "update-state-progress", Attributes::UpdateStateProgress::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),              //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),          //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                       //
        make_unique<ReadEvent>(Id, "state-transition", Events::StateTransition::Id),      //
        make_unique<ReadEvent>(Id, "version-applied", Events::VersionApplied::Id),        //
        make_unique<ReadEvent>(Id, "download-error", Events::DownloadError::Id),          //
        make_unique<SubscribeEvent>(Id),                                                  //
        make_unique<SubscribeEvent>(Id, "state-transition", Events::StateTransition::Id), //
        make_unique<SubscribeEvent>(Id, "version-applied", Events::VersionApplied::Id),   //
        make_unique<SubscribeEvent>(Id, "download-error", Events::DownloadError::Id),     //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterOccupancySensing(Commands & commands)
{
    using namespace chip::app::Clusters::OccupancySensing;

    const char * clusterName = "OccupancySensing";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                                 //
        make_unique<ReadAttribute>(Id, "occupancy", Attributes::Occupancy::Id),                                         //
        make_unique<ReadAttribute>(Id, "occupancy-sensor-type", Attributes::OccupancySensorType::Id),                   //
        make_unique<ReadAttribute>(Id, "occupancy-sensor-type-bitmap", Attributes::OccupancySensorTypeBitmap::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                            //
        make_unique<WriteAttribute>(Id),                                                                                //
        make_unique<SubscribeAttribute>(Id),                                                                            //
        make_unique<SubscribeAttribute>(Id, "occupancy", Attributes::Occupancy::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "occupancy-sensor-type", Attributes::OccupancySensorType::Id),              //
        make_unique<SubscribeAttribute>(Id, "occupancy-sensor-type-bitmap", Attributes::OccupancySensorTypeBitmap::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                           //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                       //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterOnOff(Commands & commands)
{
    using namespace chip::app::Clusters::OnOff;

    const char * clusterName = "OnOff";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),             //
        make_unique<OnOffOff>(),                     //
        make_unique<OnOffOffWithEffect>(),           //
        make_unique<OnOffOn>(),                      //
        make_unique<OnOffOnWithRecallGlobalScene>(), //
        make_unique<OnOffOnWithTimedOff>(),          //
        make_unique<OnOffToggle>(),                  //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                  //
        make_unique<ReadAttribute>(Id, "on-off", Attributes::OnOff::Id),                                 //
        make_unique<ReadAttribute>(Id, "global-scene-control", Attributes::GlobalSceneControl::Id),      //
        make_unique<ReadAttribute>(Id, "on-time", Attributes::OnTime::Id),                               //
        make_unique<ReadAttribute>(Id, "off-wait-time", Attributes::OffWaitTime::Id),                    //
        make_unique<ReadAttribute>(Id, "start-up-on-off", Attributes::StartUpOnOff::Id),                 //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                 //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                       //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),             //
        make_unique<WriteAttribute>(Id),                                                                 //
        make_unique<WriteOnOffOnTime>(),                                                                 //
        make_unique<WriteOnOffOffWaitTime>(),                                                            //
        make_unique<WriteOnOffStartUpOnOff>(),                                                           //
        make_unique<SubscribeAttribute>(Id),                                                             //
        make_unique<SubscribeAttribute>(Id, "on-off", Attributes::OnOff::Id),                            //
        make_unique<SubscribeAttribute>(Id, "global-scene-control", Attributes::GlobalSceneControl::Id), //
        make_unique<SubscribeAttribute>(Id, "on-time", Attributes::OnTime::Id),                          //
        make_unique<SubscribeAttribute>(Id, "off-wait-time", Attributes::OffWaitTime::Id),               //
        make_unique<SubscribeAttribute>(Id, "start-up-on-off", Attributes::StartUpOnOff::Id),            //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),            //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                  //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),        //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterOnOffSwitchConfiguration(Commands & commands)
{
    using namespace chip::app::Clusters::OnOffSwitchConfiguration;

    const char * clusterName = "OnOffSwitchConfiguration";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "switch-type", Attributes::SwitchType::Id),                //
        make_unique<ReadAttribute>(Id, "switch-actions", Attributes::SwitchActions::Id),          //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<WriteOnOffSwitchConfigurationSwitchActions>(),                                //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "switch-type", Attributes::SwitchType::Id),           //
        make_unique<SubscribeAttribute>(Id, "switch-actions", Attributes::SwitchActions::Id),     //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterOperationalCredentials(Commands & commands)
{
    using namespace chip::app::Clusters::OperationalCredentials;

    const char * clusterName = "OperationalCredentials";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                                   //
        make_unique<OperationalCredentialsAddNOC>(),                       //
        make_unique<OperationalCredentialsAddTrustedRootCertificate>(),    //
        make_unique<OperationalCredentialsAttestationRequest>(),           //
        make_unique<OperationalCredentialsCertificateChainRequest>(),      //
        make_unique<OperationalCredentialsOpCSRRequest>(),                 //
        make_unique<OperationalCredentialsRemoveFabric>(),                 //
        make_unique<OperationalCredentialsRemoveTrustedRootCertificate>(), //
        make_unique<OperationalCredentialsUpdateFabricLabel>(),            //
        make_unique<OperationalCredentialsUpdateNOC>(),                    //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                            //
        make_unique<ReadAttribute>(Id, "nocs", Attributes::NOCs::Id),                                              //
        make_unique<ReadAttribute>(Id, "fabrics-list", Attributes::FabricsList::Id),                               //
        make_unique<ReadAttribute>(Id, "supported-fabrics", Attributes::SupportedFabrics::Id),                     //
        make_unique<ReadAttribute>(Id, "commissioned-fabrics", Attributes::CommissionedFabrics::Id),               //
        make_unique<ReadAttribute>(Id, "trusted-root-certificates", Attributes::TrustedRootCertificates::Id),      //
        make_unique<ReadAttribute>(Id, "current-fabric-index", Attributes::CurrentFabricIndex::Id),                //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                           //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                       //
        make_unique<WriteAttribute>(Id),                                                                           //
        make_unique<SubscribeAttribute>(Id),                                                                       //
        make_unique<SubscribeAttribute>(Id, "nocs", Attributes::NOCs::Id),                                         //
        make_unique<SubscribeAttribute>(Id, "fabrics-list", Attributes::FabricsList::Id),                          //
        make_unique<SubscribeAttribute>(Id, "supported-fabrics", Attributes::SupportedFabrics::Id),                //
        make_unique<SubscribeAttribute>(Id, "commissioned-fabrics", Attributes::CommissionedFabrics::Id),          //
        make_unique<SubscribeAttribute>(Id, "trusted-root-certificates", Attributes::TrustedRootCertificates::Id), //
        make_unique<SubscribeAttribute>(Id, "current-fabric-index", Attributes::CurrentFabricIndex::Id),           //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                      //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                  //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterPowerSource(Commands & commands)
{
    using namespace chip::app::Clusters::PowerSource;

    const char * clusterName = "PowerSource";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                            //
        make_unique<ReadAttribute>(Id, "status", Attributes::Status::Id),                                          //
        make_unique<ReadAttribute>(Id, "order", Attributes::Order::Id),                                            //
        make_unique<ReadAttribute>(Id, "description", Attributes::Description::Id),                                //
        make_unique<ReadAttribute>(Id, "battery-voltage", Attributes::BatteryVoltage::Id),                         //
        make_unique<ReadAttribute>(Id, "battery-percent-remaining", Attributes::BatteryPercentRemaining::Id),      //
        make_unique<ReadAttribute>(Id, "battery-time-remaining", Attributes::BatteryTimeRemaining::Id),            //
        make_unique<ReadAttribute>(Id, "battery-charge-level", Attributes::BatteryChargeLevel::Id),                //
        make_unique<ReadAttribute>(Id, "active-battery-faults", Attributes::ActiveBatteryFaults::Id),              //
        make_unique<ReadAttribute>(Id, "battery-charge-state", Attributes::BatteryChargeState::Id),                //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                           //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                                 //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                       //
        make_unique<WriteAttribute>(Id),                                                                           //
        make_unique<SubscribeAttribute>(Id),                                                                       //
        make_unique<SubscribeAttribute>(Id, "status", Attributes::Status::Id),                                     //
        make_unique<SubscribeAttribute>(Id, "order", Attributes::Order::Id),                                       //
        make_unique<SubscribeAttribute>(Id, "description", Attributes::Description::Id),                           //
        make_unique<SubscribeAttribute>(Id, "battery-voltage", Attributes::BatteryVoltage::Id),                    //
        make_unique<SubscribeAttribute>(Id, "battery-percent-remaining", Attributes::BatteryPercentRemaining::Id), //
        make_unique<SubscribeAttribute>(Id, "battery-time-remaining", Attributes::BatteryTimeRemaining::Id),       //
        make_unique<SubscribeAttribute>(Id, "battery-charge-level", Attributes::BatteryChargeLevel::Id),           //
        make_unique<SubscribeAttribute>(Id, "active-battery-faults", Attributes::ActiveBatteryFaults::Id),         //
        make_unique<SubscribeAttribute>(Id, "battery-charge-state", Attributes::BatteryChargeState::Id),           //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                      //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                            //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                  //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterPowerSourceConfiguration(Commands & commands)
{
    using namespace chip::app::Clusters::PowerSourceConfiguration;

    const char * clusterName = "PowerSourceConfiguration";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "sources", Attributes::Sources::Id),                       //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "sources", Attributes::Sources::Id),                  //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterPressureMeasurement(Commands & commands)
{
    using namespace chip::app::Clusters::PressureMeasurement;

    const char * clusterName = "PressureMeasurement";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                              //
        make_unique<ReadAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),             //
        make_unique<ReadAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),             //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),         //
        make_unique<WriteAttribute>(Id),                                                             //
        make_unique<SubscribeAttribute>(Id),                                                         //
        make_unique<SubscribeAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),        //
        make_unique<SubscribeAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),        //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),    //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterPumpConfigurationAndControl(Commands & commands)
{
    using namespace chip::app::Clusters::PumpConfigurationAndControl;

    const char * clusterName = "PumpConfigurationAndControl";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                          //
        make_unique<ReadAttribute>(Id, "max-pressure", Attributes::MaxPressure::Id),                             //
        make_unique<ReadAttribute>(Id, "max-speed", Attributes::MaxSpeed::Id),                                   //
        make_unique<ReadAttribute>(Id, "max-flow", Attributes::MaxFlow::Id),                                     //
        make_unique<ReadAttribute>(Id, "min-const-pressure", Attributes::MinConstPressure::Id),                  //
        make_unique<ReadAttribute>(Id, "max-const-pressure", Attributes::MaxConstPressure::Id),                  //
        make_unique<ReadAttribute>(Id, "min-comp-pressure", Attributes::MinCompPressure::Id),                    //
        make_unique<ReadAttribute>(Id, "max-comp-pressure", Attributes::MaxCompPressure::Id),                    //
        make_unique<ReadAttribute>(Id, "min-const-speed", Attributes::MinConstSpeed::Id),                        //
        make_unique<ReadAttribute>(Id, "max-const-speed", Attributes::MaxConstSpeed::Id),                        //
        make_unique<ReadAttribute>(Id, "min-const-flow", Attributes::MinConstFlow::Id),                          //
        make_unique<ReadAttribute>(Id, "max-const-flow", Attributes::MaxConstFlow::Id),                          //
        make_unique<ReadAttribute>(Id, "min-const-temp", Attributes::MinConstTemp::Id),                          //
        make_unique<ReadAttribute>(Id, "max-const-temp", Attributes::MaxConstTemp::Id),                          //
        make_unique<ReadAttribute>(Id, "pump-status", Attributes::PumpStatus::Id),                               //
        make_unique<ReadAttribute>(Id, "effective-operation-mode", Attributes::EffectiveOperationMode::Id),      //
        make_unique<ReadAttribute>(Id, "effective-control-mode", Attributes::EffectiveControlMode::Id),          //
        make_unique<ReadAttribute>(Id, "capacity", Attributes::Capacity::Id),                                    //
        make_unique<ReadAttribute>(Id, "speed", Attributes::Speed::Id),                                          //
        make_unique<ReadAttribute>(Id, "lifetime-running-hours", Attributes::LifetimeRunningHours::Id),          //
        make_unique<ReadAttribute>(Id, "power", Attributes::Power::Id),                                          //
        make_unique<ReadAttribute>(Id, "lifetime-energy-consumed", Attributes::LifetimeEnergyConsumed::Id),      //
        make_unique<ReadAttribute>(Id, "operation-mode", Attributes::OperationMode::Id),                         //
        make_unique<ReadAttribute>(Id, "control-mode", Attributes::ControlMode::Id),                             //
        make_unique<ReadAttribute>(Id, "alarm-mask", Attributes::AlarmMask::Id),                                 //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                         //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                               //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                     //
        make_unique<WriteAttribute>(Id),                                                                         //
        make_unique<WritePumpConfigurationAndControlLifetimeRunningHours>(),                                     //
        make_unique<WritePumpConfigurationAndControlLifetimeEnergyConsumed>(),                                   //
        make_unique<WritePumpConfigurationAndControlOperationMode>(),                                            //
        make_unique<WritePumpConfigurationAndControlControlMode>(),                                              //
        make_unique<SubscribeAttribute>(Id),                                                                     //
        make_unique<SubscribeAttribute>(Id, "max-pressure", Attributes::MaxPressure::Id),                        //
        make_unique<SubscribeAttribute>(Id, "max-speed", Attributes::MaxSpeed::Id),                              //
        make_unique<SubscribeAttribute>(Id, "max-flow", Attributes::MaxFlow::Id),                                //
        make_unique<SubscribeAttribute>(Id, "min-const-pressure", Attributes::MinConstPressure::Id),             //
        make_unique<SubscribeAttribute>(Id, "max-const-pressure", Attributes::MaxConstPressure::Id),             //
        make_unique<SubscribeAttribute>(Id, "min-comp-pressure", Attributes::MinCompPressure::Id),               //
        make_unique<SubscribeAttribute>(Id, "max-comp-pressure", Attributes::MaxCompPressure::Id),               //
        make_unique<SubscribeAttribute>(Id, "min-const-speed", Attributes::MinConstSpeed::Id),                   //
        make_unique<SubscribeAttribute>(Id, "max-const-speed", Attributes::MaxConstSpeed::Id),                   //
        make_unique<SubscribeAttribute>(Id, "min-const-flow", Attributes::MinConstFlow::Id),                     //
        make_unique<SubscribeAttribute>(Id, "max-const-flow", Attributes::MaxConstFlow::Id),                     //
        make_unique<SubscribeAttribute>(Id, "min-const-temp", Attributes::MinConstTemp::Id),                     //
        make_unique<SubscribeAttribute>(Id, "max-const-temp", Attributes::MaxConstTemp::Id),                     //
        make_unique<SubscribeAttribute>(Id, "pump-status", Attributes::PumpStatus::Id),                          //
        make_unique<SubscribeAttribute>(Id, "effective-operation-mode", Attributes::EffectiveOperationMode::Id), //
        make_unique<SubscribeAttribute>(Id, "effective-control-mode", Attributes::EffectiveControlMode::Id),     //
        make_unique<SubscribeAttribute>(Id, "capacity", Attributes::Capacity::Id),                               //
        make_unique<SubscribeAttribute>(Id, "speed", Attributes::Speed::Id),                                     //
        make_unique<SubscribeAttribute>(Id, "lifetime-running-hours", Attributes::LifetimeRunningHours::Id),     //
        make_unique<SubscribeAttribute>(Id, "power", Attributes::Power::Id),                                     //
        make_unique<SubscribeAttribute>(Id, "lifetime-energy-consumed", Attributes::LifetimeEnergyConsumed::Id), //
        make_unique<SubscribeAttribute>(Id, "operation-mode", Attributes::OperationMode::Id),                    //
        make_unique<SubscribeAttribute>(Id, "control-mode", Attributes::ControlMode::Id),                        //
        make_unique<SubscribeAttribute>(Id, "alarm-mask", Attributes::AlarmMask::Id),                            //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                    //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                          //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                                             //
        make_unique<ReadEvent>(Id, "supply-voltage-low", Events::SupplyVoltageLow::Id),                         //
        make_unique<ReadEvent>(Id, "supply-voltage-high", Events::SupplyVoltageHigh::Id),                       //
        make_unique<ReadEvent>(Id, "power-missing-phase", Events::PowerMissingPhase::Id),                       //
        make_unique<ReadEvent>(Id, "system-pressure-low", Events::SystemPressureLow::Id),                       //
        make_unique<ReadEvent>(Id, "system-pressure-high", Events::SystemPressureHigh::Id),                     //
        make_unique<ReadEvent>(Id, "dry-running", Events::DryRunning::Id),                                      //
        make_unique<ReadEvent>(Id, "motor-temperature-high", Events::MotorTemperatureHigh::Id),                 //
        make_unique<ReadEvent>(Id, "pump-motor-fatal-failure", Events::PumpMotorFatalFailure::Id),              //
        make_unique<ReadEvent>(Id, "electronic-temperature-high", Events::ElectronicTemperatureHigh::Id),       //
        make_unique<ReadEvent>(Id, "pump-blocked", Events::PumpBlocked::Id),                                    //
        make_unique<ReadEvent>(Id, "sensor-failure", Events::SensorFailure::Id),                                //
        make_unique<ReadEvent>(Id, "electronic-non-fatal-failure", Events::ElectronicNonFatalFailure::Id),      //
        make_unique<ReadEvent>(Id, "electronic-fatal-failure", Events::ElectronicFatalFailure::Id),             //
        make_unique<ReadEvent>(Id, "general-fault", Events::GeneralFault::Id),                                  //
        make_unique<ReadEvent>(Id, "leakage", Events::Leakage::Id),                                             //
        make_unique<ReadEvent>(Id, "air-detection", Events::AirDetection::Id),                                  //
        make_unique<ReadEvent>(Id, "turbine-operation", Events::TurbineOperation::Id),                          //
        make_unique<SubscribeEvent>(Id),                                                                        //
        make_unique<SubscribeEvent>(Id, "supply-voltage-low", Events::SupplyVoltageLow::Id),                    //
        make_unique<SubscribeEvent>(Id, "supply-voltage-high", Events::SupplyVoltageHigh::Id),                  //
        make_unique<SubscribeEvent>(Id, "power-missing-phase", Events::PowerMissingPhase::Id),                  //
        make_unique<SubscribeEvent>(Id, "system-pressure-low", Events::SystemPressureLow::Id),                  //
        make_unique<SubscribeEvent>(Id, "system-pressure-high", Events::SystemPressureHigh::Id),                //
        make_unique<SubscribeEvent>(Id, "dry-running", Events::DryRunning::Id),                                 //
        make_unique<SubscribeEvent>(Id, "motor-temperature-high", Events::MotorTemperatureHigh::Id),            //
        make_unique<SubscribeEvent>(Id, "pump-motor-fatal-failure", Events::PumpMotorFatalFailure::Id),         //
        make_unique<SubscribeEvent>(Id, "electronic-temperature-high", Events::ElectronicTemperatureHigh::Id),  //
        make_unique<SubscribeEvent>(Id, "pump-blocked", Events::PumpBlocked::Id),                               //
        make_unique<SubscribeEvent>(Id, "sensor-failure", Events::SensorFailure::Id),                           //
        make_unique<SubscribeEvent>(Id, "electronic-non-fatal-failure", Events::ElectronicNonFatalFailure::Id), //
        make_unique<SubscribeEvent>(Id, "electronic-fatal-failure", Events::ElectronicFatalFailure::Id),        //
        make_unique<SubscribeEvent>(Id, "general-fault", Events::GeneralFault::Id),                             //
        make_unique<SubscribeEvent>(Id, "leakage", Events::Leakage::Id),                                        //
        make_unique<SubscribeEvent>(Id, "air-detection", Events::AirDetection::Id),                             //
        make_unique<SubscribeEvent>(Id, "turbine-operation", Events::TurbineOperation::Id),                     //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterRelativeHumidityMeasurement(Commands & commands)
{
    using namespace chip::app::Clusters::RelativeHumidityMeasurement;

    const char * clusterName = "RelativeHumidityMeasurement";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                              //
        make_unique<ReadAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),             //
        make_unique<ReadAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "tolerance", Attributes::Tolerance::Id),                      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),             //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),         //
        make_unique<WriteAttribute>(Id),                                                             //
        make_unique<SubscribeAttribute>(Id),                                                         //
        make_unique<SubscribeAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),        //
        make_unique<SubscribeAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "tolerance", Attributes::Tolerance::Id),                 //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),        //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),    //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterScenes(Commands & commands)
{
    using namespace chip::app::Clusters::Scenes;

    const char * clusterName = "Scenes";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),         //
        make_unique<ScenesAddScene>(),           //
        make_unique<ScenesGetSceneMembership>(), //
        make_unique<ScenesRecallScene>(),        //
        make_unique<ScenesRemoveAllScenes>(),    //
        make_unique<ScenesRemoveScene>(),        //
        make_unique<ScenesStoreScene>(),         //
        make_unique<ScenesViewScene>(),          //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "scene-count", Attributes::SceneCount::Id),                //
        make_unique<ReadAttribute>(Id, "current-scene", Attributes::CurrentScene::Id),            //
        make_unique<ReadAttribute>(Id, "current-group", Attributes::CurrentGroup::Id),            //
        make_unique<ReadAttribute>(Id, "scene-valid", Attributes::SceneValid::Id),                //
        make_unique<ReadAttribute>(Id, "name-support", Attributes::NameSupport::Id),              //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "scene-count", Attributes::SceneCount::Id),           //
        make_unique<SubscribeAttribute>(Id, "current-scene", Attributes::CurrentScene::Id),       //
        make_unique<SubscribeAttribute>(Id, "current-group", Attributes::CurrentGroup::Id),       //
        make_unique<SubscribeAttribute>(Id, "scene-valid", Attributes::SceneValid::Id),           //
        make_unique<SubscribeAttribute>(Id, "name-support", Attributes::NameSupport::Id),         //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),     //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterSoftwareDiagnostics(Commands & commands)
{
    using namespace chip::app::Clusters::SoftwareDiagnostics;

    const char * clusterName = "SoftwareDiagnostics";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                   //
        make_unique<SoftwareDiagnosticsResetWatermarks>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                               //
        make_unique<ReadAttribute>(Id, "thread-metrics", Attributes::ThreadMetrics::Id),                              //
        make_unique<ReadAttribute>(Id, "current-heap-free", Attributes::CurrentHeapFree::Id),                         //
        make_unique<ReadAttribute>(Id, "current-heap-used", Attributes::CurrentHeapUsed::Id),                         //
        make_unique<ReadAttribute>(Id, "current-heap-high-watermark", Attributes::CurrentHeapHighWatermark::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                              //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                                    //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                          //
        make_unique<WriteAttribute>(Id),                                                                              //
        make_unique<SubscribeAttribute>(Id),                                                                          //
        make_unique<SubscribeAttribute>(Id, "thread-metrics", Attributes::ThreadMetrics::Id),                         //
        make_unique<SubscribeAttribute>(Id, "current-heap-free", Attributes::CurrentHeapFree::Id),                    //
        make_unique<SubscribeAttribute>(Id, "current-heap-used", Attributes::CurrentHeapUsed::Id),                    //
        make_unique<SubscribeAttribute>(Id, "current-heap-high-watermark", Attributes::CurrentHeapHighWatermark::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                         //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                               //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                     //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                   //
        make_unique<ReadEvent>(Id, "software-fault", Events::SoftwareFault::Id),      //
        make_unique<SubscribeEvent>(Id),                                              //
        make_unique<SubscribeEvent>(Id, "software-fault", Events::SoftwareFault::Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterSwitch(Commands & commands)
{
    using namespace chip::app::Clusters::Switch;

    const char * clusterName = "Switch";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                //
        make_unique<ReadAttribute>(Id, "number-of-positions", Attributes::NumberOfPositions::Id),      //
        make_unique<ReadAttribute>(Id, "current-position", Attributes::CurrentPosition::Id),           //
        make_unique<ReadAttribute>(Id, "multi-press-max", Attributes::MultiPressMax::Id),              //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),               //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                     //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),           //
        make_unique<WriteAttribute>(Id),                                                               //
        make_unique<SubscribeAttribute>(Id),                                                           //
        make_unique<SubscribeAttribute>(Id, "number-of-positions", Attributes::NumberOfPositions::Id), //
        make_unique<SubscribeAttribute>(Id, "current-position", Attributes::CurrentPosition::Id),      //
        make_unique<SubscribeAttribute>(Id, "multi-press-max", Attributes::MultiPressMax::Id),         //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),          //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                              //
        make_unique<ReadEvent>(Id, "switch-latched", Events::SwitchLatched::Id),                 //
        make_unique<ReadEvent>(Id, "initial-press", Events::InitialPress::Id),                   //
        make_unique<ReadEvent>(Id, "long-press", Events::LongPress::Id),                         //
        make_unique<ReadEvent>(Id, "short-release", Events::ShortRelease::Id),                   //
        make_unique<ReadEvent>(Id, "long-release", Events::LongRelease::Id),                     //
        make_unique<ReadEvent>(Id, "multi-press-ongoing", Events::MultiPressOngoing::Id),        //
        make_unique<ReadEvent>(Id, "multi-press-complete", Events::MultiPressComplete::Id),      //
        make_unique<SubscribeEvent>(Id),                                                         //
        make_unique<SubscribeEvent>(Id, "switch-latched", Events::SwitchLatched::Id),            //
        make_unique<SubscribeEvent>(Id, "initial-press", Events::InitialPress::Id),              //
        make_unique<SubscribeEvent>(Id, "long-press", Events::LongPress::Id),                    //
        make_unique<SubscribeEvent>(Id, "short-release", Events::ShortRelease::Id),              //
        make_unique<SubscribeEvent>(Id, "long-release", Events::LongRelease::Id),                //
        make_unique<SubscribeEvent>(Id, "multi-press-ongoing", Events::MultiPressOngoing::Id),   //
        make_unique<SubscribeEvent>(Id, "multi-press-complete", Events::MultiPressComplete::Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterTargetNavigator(Commands & commands)
{
    using namespace chip::app::Clusters::TargetNavigator;

    const char * clusterName = "TargetNavigator";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                     //
        make_unique<TargetNavigatorNavigateTargetRequest>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                          //
        make_unique<ReadAttribute>(Id, "target-navigator-list", Attributes::TargetNavigatorList::Id),            //
        make_unique<ReadAttribute>(Id, "current-navigator-target", Attributes::CurrentNavigatorTarget::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                         //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                     //
        make_unique<WriteAttribute>(Id),                                                                         //
        make_unique<SubscribeAttribute>(Id),                                                                     //
        make_unique<SubscribeAttribute>(Id, "target-navigator-list", Attributes::TargetNavigatorList::Id),       //
        make_unique<SubscribeAttribute>(Id, "current-navigator-target", Attributes::CurrentNavigatorTarget::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                    //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterTemperatureMeasurement(Commands & commands)
{
    using namespace chip::app::Clusters::TemperatureMeasurement;

    const char * clusterName = "TemperatureMeasurement";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                              //
        make_unique<ReadAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),             //
        make_unique<ReadAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id),      //
        make_unique<ReadAttribute>(Id, "tolerance", Attributes::Tolerance::Id),                      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),             //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),         //
        make_unique<WriteAttribute>(Id),                                                             //
        make_unique<SubscribeAttribute>(Id),                                                         //
        make_unique<SubscribeAttribute>(Id, "measured-value", Attributes::MeasuredValue::Id),        //
        make_unique<SubscribeAttribute>(Id, "min-measured-value", Attributes::MinMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "max-measured-value", Attributes::MaxMeasuredValue::Id), //
        make_unique<SubscribeAttribute>(Id, "tolerance", Attributes::Tolerance::Id),                 //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),        //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),    //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterTestCluster(Commands & commands)
{
    using namespace chip::app::Clusters::TestCluster;

    const char * clusterName = "TestCluster";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                                   //
        make_unique<TestClusterSimpleStructEchoRequest>(),                 //
        make_unique<TestClusterTest>(),                                    //
        make_unique<TestClusterTestAddArguments>(),                        //
        make_unique<TestClusterTestEmitTestEventRequest>(),                //
        make_unique<TestClusterTestEnumsRequest>(),                        //
        make_unique<TestClusterTestListInt8UArgumentRequest>(),            //
        make_unique<TestClusterTestListInt8UReverseRequest>(),             //
        make_unique<TestClusterTestListNestedStructListArgumentRequest>(), //
        make_unique<TestClusterTestListStructArgumentRequest>(),           //
        make_unique<TestClusterTestNestedStructArgumentRequest>(),         //
        make_unique<TestClusterTestNestedStructListArgumentRequest>(),     //
        make_unique<TestClusterTestNotHandled>(),                          //
        make_unique<TestClusterTestNullableOptionalRequest>(),             //
        make_unique<TestClusterTestSimpleOptionalArgumentRequest>(),       //
        make_unique<TestClusterTestSpecific>(),                            //
        make_unique<TestClusterTestStructArgumentRequest>(),               //
        make_unique<TestClusterTestUnknownCommand>(),                      //
        make_unique<TestClusterTimedInvokeRequest>(),                      //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                                         //
        make_unique<ReadAttribute>(Id, "boolean", Attributes::Boolean::Id),                                                     //
        make_unique<ReadAttribute>(Id, "bitmap8", Attributes::Bitmap8::Id),                                                     //
        make_unique<ReadAttribute>(Id, "bitmap16", Attributes::Bitmap16::Id),                                                   //
        make_unique<ReadAttribute>(Id, "bitmap32", Attributes::Bitmap32::Id),                                                   //
        make_unique<ReadAttribute>(Id, "bitmap64", Attributes::Bitmap64::Id),                                                   //
        make_unique<ReadAttribute>(Id, "int8u", Attributes::Int8u::Id),                                                         //
        make_unique<ReadAttribute>(Id, "int16u", Attributes::Int16u::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int24u", Attributes::Int24u::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int32u", Attributes::Int32u::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int40u", Attributes::Int40u::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int48u", Attributes::Int48u::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int56u", Attributes::Int56u::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int64u", Attributes::Int64u::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int8s", Attributes::Int8s::Id),                                                         //
        make_unique<ReadAttribute>(Id, "int16s", Attributes::Int16s::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int24s", Attributes::Int24s::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int32s", Attributes::Int32s::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int40s", Attributes::Int40s::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int48s", Attributes::Int48s::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int56s", Attributes::Int56s::Id),                                                       //
        make_unique<ReadAttribute>(Id, "int64s", Attributes::Int64s::Id),                                                       //
        make_unique<ReadAttribute>(Id, "enum8", Attributes::Enum8::Id),                                                         //
        make_unique<ReadAttribute>(Id, "enum16", Attributes::Enum16::Id),                                                       //
        make_unique<ReadAttribute>(Id, "float-single", Attributes::FloatSingle::Id),                                            //
        make_unique<ReadAttribute>(Id, "float-double", Attributes::FloatDouble::Id),                                            //
        make_unique<ReadAttribute>(Id, "octet-string", Attributes::OctetString::Id),                                            //
        make_unique<ReadAttribute>(Id, "list-int8u", Attributes::ListInt8u::Id),                                                //
        make_unique<ReadAttribute>(Id, "list-octet-string", Attributes::ListOctetString::Id),                                   //
        make_unique<ReadAttribute>(Id, "list-struct-octet-string", Attributes::ListStructOctetString::Id),                      //
        make_unique<ReadAttribute>(Id, "long-octet-string", Attributes::LongOctetString::Id),                                   //
        make_unique<ReadAttribute>(Id, "char-string", Attributes::CharString::Id),                                              //
        make_unique<ReadAttribute>(Id, "long-char-string", Attributes::LongCharString::Id),                                     //
        make_unique<ReadAttribute>(Id, "epoch-us", Attributes::EpochUs::Id),                                                    //
        make_unique<ReadAttribute>(Id, "epoch-s", Attributes::EpochS::Id),                                                      //
        make_unique<ReadAttribute>(Id, "vendor-id", Attributes::VendorId::Id),                                                  //
        make_unique<ReadAttribute>(Id, "list-nullables-and-optionals-struct", Attributes::ListNullablesAndOptionalsStruct::Id), //
        make_unique<ReadAttribute>(Id, "enum-attr", Attributes::EnumAttr::Id),                                                  //
        make_unique<ReadAttribute>(Id, "struct-attr", Attributes::StructAttr::Id),                                              //
        make_unique<ReadAttribute>(Id, "range-restricted-int8u", Attributes::RangeRestrictedInt8u::Id),                         //
        make_unique<ReadAttribute>(Id, "range-restricted-int8s", Attributes::RangeRestrictedInt8s::Id),                         //
        make_unique<ReadAttribute>(Id, "range-restricted-int16u", Attributes::RangeRestrictedInt16u::Id),                       //
        make_unique<ReadAttribute>(Id, "range-restricted-int16s", Attributes::RangeRestrictedInt16s::Id),                       //
        make_unique<ReadAttribute>(Id, "list-long-octet-string", Attributes::ListLongOctetString::Id),                          //
        make_unique<ReadAttribute>(Id, "timed-write-boolean", Attributes::TimedWriteBoolean::Id),                               //
        make_unique<ReadAttribute>(Id, "general-error-boolean", Attributes::GeneralErrorBoolean::Id),                           //
        make_unique<ReadAttribute>(Id, "cluster-error-boolean", Attributes::ClusterErrorBoolean::Id),                           //
        make_unique<ReadAttribute>(Id, "unsupported", Attributes::Unsupported::Id),                                             //
        make_unique<ReadAttribute>(Id, "nullable-boolean", Attributes::NullableBoolean::Id),                                    //
        make_unique<ReadAttribute>(Id, "nullable-bitmap8", Attributes::NullableBitmap8::Id),                                    //
        make_unique<ReadAttribute>(Id, "nullable-bitmap16", Attributes::NullableBitmap16::Id),                                  //
        make_unique<ReadAttribute>(Id, "nullable-bitmap32", Attributes::NullableBitmap32::Id),                                  //
        make_unique<ReadAttribute>(Id, "nullable-bitmap64", Attributes::NullableBitmap64::Id),                                  //
        make_unique<ReadAttribute>(Id, "nullable-int8u", Attributes::NullableInt8u::Id),                                        //
        make_unique<ReadAttribute>(Id, "nullable-int16u", Attributes::NullableInt16u::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int24u", Attributes::NullableInt24u::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int32u", Attributes::NullableInt32u::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int40u", Attributes::NullableInt40u::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int48u", Attributes::NullableInt48u::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int56u", Attributes::NullableInt56u::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int64u", Attributes::NullableInt64u::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int8s", Attributes::NullableInt8s::Id),                                        //
        make_unique<ReadAttribute>(Id, "nullable-int16s", Attributes::NullableInt16s::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int24s", Attributes::NullableInt24s::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int32s", Attributes::NullableInt32s::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int40s", Attributes::NullableInt40s::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int48s", Attributes::NullableInt48s::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int56s", Attributes::NullableInt56s::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-int64s", Attributes::NullableInt64s::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-enum8", Attributes::NullableEnum8::Id),                                        //
        make_unique<ReadAttribute>(Id, "nullable-enum16", Attributes::NullableEnum16::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-float-single", Attributes::NullableFloatSingle::Id),                           //
        make_unique<ReadAttribute>(Id, "nullable-float-double", Attributes::NullableFloatDouble::Id),                           //
        make_unique<ReadAttribute>(Id, "nullable-octet-string", Attributes::NullableOctetString::Id),                           //
        make_unique<ReadAttribute>(Id, "nullable-char-string", Attributes::NullableCharString::Id),                             //
        make_unique<ReadAttribute>(Id, "nullable-enum-attr", Attributes::NullableEnumAttr::Id),                                 //
        make_unique<ReadAttribute>(Id, "nullable-struct", Attributes::NullableStruct::Id),                                      //
        make_unique<ReadAttribute>(Id, "nullable-range-restricted-int8u", Attributes::NullableRangeRestrictedInt8u::Id),        //
        make_unique<ReadAttribute>(Id, "nullable-range-restricted-int8s", Attributes::NullableRangeRestrictedInt8s::Id),        //
        make_unique<ReadAttribute>(Id, "nullable-range-restricted-int16u", Attributes::NullableRangeRestrictedInt16u::Id),      //
        make_unique<ReadAttribute>(Id, "nullable-range-restricted-int16s", Attributes::NullableRangeRestrictedInt16s::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                        //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                                    //
        make_unique<WriteAttribute>(Id),                                                                                        //
        make_unique<WriteTestClusterBoolean>(),                                                                                 //
        make_unique<WriteTestClusterBitmap8>(),                                                                                 //
        make_unique<WriteTestClusterBitmap16>(),                                                                                //
        make_unique<WriteTestClusterBitmap32>(),                                                                                //
        make_unique<WriteTestClusterBitmap64>(),                                                                                //
        make_unique<WriteTestClusterInt8u>(),                                                                                   //
        make_unique<WriteTestClusterInt16u>(),                                                                                  //
        make_unique<WriteTestClusterInt24u>(),                                                                                  //
        make_unique<WriteTestClusterInt32u>(),                                                                                  //
        make_unique<WriteTestClusterInt40u>(),                                                                                  //
        make_unique<WriteTestClusterInt48u>(),                                                                                  //
        make_unique<WriteTestClusterInt56u>(),                                                                                  //
        make_unique<WriteTestClusterInt64u>(),                                                                                  //
        make_unique<WriteTestClusterInt8s>(),                                                                                   //
        make_unique<WriteTestClusterInt16s>(),                                                                                  //
        make_unique<WriteTestClusterInt24s>(),                                                                                  //
        make_unique<WriteTestClusterInt32s>(),                                                                                  //
        make_unique<WriteTestClusterInt40s>(),                                                                                  //
        make_unique<WriteTestClusterInt48s>(),                                                                                  //
        make_unique<WriteTestClusterInt56s>(),                                                                                  //
        make_unique<WriteTestClusterInt64s>(),                                                                                  //
        make_unique<WriteTestClusterEnum8>(),                                                                                   //
        make_unique<WriteTestClusterEnum16>(),                                                                                  //
        make_unique<WriteTestClusterFloatSingle>(),                                                                             //
        make_unique<WriteTestClusterFloatDouble>(),                                                                             //
        make_unique<WriteTestClusterOctetString>(),                                                                             //
        make_unique<WriteTestClusterListInt8u>(),                                                                               //
        make_unique<WriteTestClusterListOctetString>(),                                                                         //
        make_unique<WriteTestClusterListStructOctetString>(),                                                                   //
        make_unique<WriteTestClusterLongOctetString>(),                                                                         //
        make_unique<WriteTestClusterCharString>(),                                                                              //
        make_unique<WriteTestClusterLongCharString>(),                                                                          //
        make_unique<WriteTestClusterEpochUs>(),                                                                                 //
        make_unique<WriteTestClusterEpochS>(),                                                                                  //
        make_unique<WriteTestClusterVendorId>(),                                                                                //
        make_unique<WriteTestClusterListNullablesAndOptionalsStruct>(),                                                         //
        make_unique<WriteTestClusterEnumAttr>(),                                                                                //
        make_unique<WriteTestClusterRangeRestrictedInt8u>(),                                                                    //
        make_unique<WriteTestClusterRangeRestrictedInt8s>(),                                                                    //
        make_unique<WriteTestClusterRangeRestrictedInt16u>(),                                                                   //
        make_unique<WriteTestClusterRangeRestrictedInt16s>(),                                                                   //
        make_unique<WriteTestClusterTimedWriteBoolean>(),                                                                       //
        make_unique<WriteTestClusterGeneralErrorBoolean>(),                                                                     //
        make_unique<WriteTestClusterClusterErrorBoolean>(),                                                                     //
        make_unique<WriteTestClusterUnsupported>(),                                                                             //
        make_unique<WriteTestClusterNullableBoolean>(),                                                                         //
        make_unique<WriteTestClusterNullableBitmap8>(),                                                                         //
        make_unique<WriteTestClusterNullableBitmap16>(),                                                                        //
        make_unique<WriteTestClusterNullableBitmap32>(),                                                                        //
        make_unique<WriteTestClusterNullableBitmap64>(),                                                                        //
        make_unique<WriteTestClusterNullableInt8u>(),                                                                           //
        make_unique<WriteTestClusterNullableInt16u>(),                                                                          //
        make_unique<WriteTestClusterNullableInt24u>(),                                                                          //
        make_unique<WriteTestClusterNullableInt32u>(),                                                                          //
        make_unique<WriteTestClusterNullableInt40u>(),                                                                          //
        make_unique<WriteTestClusterNullableInt48u>(),                                                                          //
        make_unique<WriteTestClusterNullableInt56u>(),                                                                          //
        make_unique<WriteTestClusterNullableInt64u>(),                                                                          //
        make_unique<WriteTestClusterNullableInt8s>(),                                                                           //
        make_unique<WriteTestClusterNullableInt16s>(),                                                                          //
        make_unique<WriteTestClusterNullableInt24s>(),                                                                          //
        make_unique<WriteTestClusterNullableInt32s>(),                                                                          //
        make_unique<WriteTestClusterNullableInt40s>(),                                                                          //
        make_unique<WriteTestClusterNullableInt48s>(),                                                                          //
        make_unique<WriteTestClusterNullableInt56s>(),                                                                          //
        make_unique<WriteTestClusterNullableInt64s>(),                                                                          //
        make_unique<WriteTestClusterNullableEnum8>(),                                                                           //
        make_unique<WriteTestClusterNullableEnum16>(),                                                                          //
        make_unique<WriteTestClusterNullableFloatSingle>(),                                                                     //
        make_unique<WriteTestClusterNullableFloatDouble>(),                                                                     //
        make_unique<WriteTestClusterNullableOctetString>(),                                                                     //
        make_unique<WriteTestClusterNullableCharString>(),                                                                      //
        make_unique<WriteTestClusterNullableEnumAttr>(),                                                                        //
        make_unique<WriteTestClusterNullableRangeRestrictedInt8u>(),                                                            //
        make_unique<WriteTestClusterNullableRangeRestrictedInt8s>(),                                                            //
        make_unique<WriteTestClusterNullableRangeRestrictedInt16u>(),                                                           //
        make_unique<WriteTestClusterNullableRangeRestrictedInt16s>(),                                                           //
        make_unique<SubscribeAttribute>(Id),                                                                                    //
        make_unique<SubscribeAttribute>(Id, "boolean", Attributes::Boolean::Id),                                                //
        make_unique<SubscribeAttribute>(Id, "bitmap8", Attributes::Bitmap8::Id),                                                //
        make_unique<SubscribeAttribute>(Id, "bitmap16", Attributes::Bitmap16::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "bitmap32", Attributes::Bitmap32::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "bitmap64", Attributes::Bitmap64::Id),                                              //
        make_unique<SubscribeAttribute>(Id, "int8u", Attributes::Int8u::Id),                                                    //
        make_unique<SubscribeAttribute>(Id, "int16u", Attributes::Int16u::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int24u", Attributes::Int24u::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int32u", Attributes::Int32u::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int40u", Attributes::Int40u::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int48u", Attributes::Int48u::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int56u", Attributes::Int56u::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int64u", Attributes::Int64u::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int8s", Attributes::Int8s::Id),                                                    //
        make_unique<SubscribeAttribute>(Id, "int16s", Attributes::Int16s::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int24s", Attributes::Int24s::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int32s", Attributes::Int32s::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int40s", Attributes::Int40s::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int48s", Attributes::Int48s::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int56s", Attributes::Int56s::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "int64s", Attributes::Int64s::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "enum8", Attributes::Enum8::Id),                                                    //
        make_unique<SubscribeAttribute>(Id, "enum16", Attributes::Enum16::Id),                                                  //
        make_unique<SubscribeAttribute>(Id, "float-single", Attributes::FloatSingle::Id),                                       //
        make_unique<SubscribeAttribute>(Id, "float-double", Attributes::FloatDouble::Id),                                       //
        make_unique<SubscribeAttribute>(Id, "octet-string", Attributes::OctetString::Id),                                       //
        make_unique<SubscribeAttribute>(Id, "list-int8u", Attributes::ListInt8u::Id),                                           //
        make_unique<SubscribeAttribute>(Id, "list-octet-string", Attributes::ListOctetString::Id),                              //
        make_unique<SubscribeAttribute>(Id, "list-struct-octet-string", Attributes::ListStructOctetString::Id),                 //
        make_unique<SubscribeAttribute>(Id, "long-octet-string", Attributes::LongOctetString::Id),                              //
        make_unique<SubscribeAttribute>(Id, "char-string", Attributes::CharString::Id),                                         //
        make_unique<SubscribeAttribute>(Id, "long-char-string", Attributes::LongCharString::Id),                                //
        make_unique<SubscribeAttribute>(Id, "epoch-us", Attributes::EpochUs::Id),                                               //
        make_unique<SubscribeAttribute>(Id, "epoch-s", Attributes::EpochS::Id),                                                 //
        make_unique<SubscribeAttribute>(Id, "vendor-id", Attributes::VendorId::Id),                                             //
        make_unique<SubscribeAttribute>(Id, "list-nullables-and-optionals-struct",
                                        Attributes::ListNullablesAndOptionalsStruct::Id),                                       //
        make_unique<SubscribeAttribute>(Id, "enum-attr", Attributes::EnumAttr::Id),                                             //
        make_unique<SubscribeAttribute>(Id, "struct-attr", Attributes::StructAttr::Id),                                         //
        make_unique<SubscribeAttribute>(Id, "range-restricted-int8u", Attributes::RangeRestrictedInt8u::Id),                    //
        make_unique<SubscribeAttribute>(Id, "range-restricted-int8s", Attributes::RangeRestrictedInt8s::Id),                    //
        make_unique<SubscribeAttribute>(Id, "range-restricted-int16u", Attributes::RangeRestrictedInt16u::Id),                  //
        make_unique<SubscribeAttribute>(Id, "range-restricted-int16s", Attributes::RangeRestrictedInt16s::Id),                  //
        make_unique<SubscribeAttribute>(Id, "list-long-octet-string", Attributes::ListLongOctetString::Id),                     //
        make_unique<SubscribeAttribute>(Id, "timed-write-boolean", Attributes::TimedWriteBoolean::Id),                          //
        make_unique<SubscribeAttribute>(Id, "general-error-boolean", Attributes::GeneralErrorBoolean::Id),                      //
        make_unique<SubscribeAttribute>(Id, "cluster-error-boolean", Attributes::ClusterErrorBoolean::Id),                      //
        make_unique<SubscribeAttribute>(Id, "unsupported", Attributes::Unsupported::Id),                                        //
        make_unique<SubscribeAttribute>(Id, "nullable-boolean", Attributes::NullableBoolean::Id),                               //
        make_unique<SubscribeAttribute>(Id, "nullable-bitmap8", Attributes::NullableBitmap8::Id),                               //
        make_unique<SubscribeAttribute>(Id, "nullable-bitmap16", Attributes::NullableBitmap16::Id),                             //
        make_unique<SubscribeAttribute>(Id, "nullable-bitmap32", Attributes::NullableBitmap32::Id),                             //
        make_unique<SubscribeAttribute>(Id, "nullable-bitmap64", Attributes::NullableBitmap64::Id),                             //
        make_unique<SubscribeAttribute>(Id, "nullable-int8u", Attributes::NullableInt8u::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "nullable-int16u", Attributes::NullableInt16u::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int24u", Attributes::NullableInt24u::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int32u", Attributes::NullableInt32u::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int40u", Attributes::NullableInt40u::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int48u", Attributes::NullableInt48u::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int56u", Attributes::NullableInt56u::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int64u", Attributes::NullableInt64u::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int8s", Attributes::NullableInt8s::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "nullable-int16s", Attributes::NullableInt16s::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int24s", Attributes::NullableInt24s::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int32s", Attributes::NullableInt32s::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int40s", Attributes::NullableInt40s::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int48s", Attributes::NullableInt48s::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int56s", Attributes::NullableInt56s::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-int64s", Attributes::NullableInt64s::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-enum8", Attributes::NullableEnum8::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "nullable-enum16", Attributes::NullableEnum16::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-float-single", Attributes::NullableFloatSingle::Id),                      //
        make_unique<SubscribeAttribute>(Id, "nullable-float-double", Attributes::NullableFloatDouble::Id),                      //
        make_unique<SubscribeAttribute>(Id, "nullable-octet-string", Attributes::NullableOctetString::Id),                      //
        make_unique<SubscribeAttribute>(Id, "nullable-char-string", Attributes::NullableCharString::Id),                        //
        make_unique<SubscribeAttribute>(Id, "nullable-enum-attr", Attributes::NullableEnumAttr::Id),                            //
        make_unique<SubscribeAttribute>(Id, "nullable-struct", Attributes::NullableStruct::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "nullable-range-restricted-int8u", Attributes::NullableRangeRestrictedInt8u::Id),   //
        make_unique<SubscribeAttribute>(Id, "nullable-range-restricted-int8s", Attributes::NullableRangeRestrictedInt8s::Id),   //
        make_unique<SubscribeAttribute>(Id, "nullable-range-restricted-int16u", Attributes::NullableRangeRestrictedInt16u::Id), //
        make_unique<SubscribeAttribute>(Id, "nullable-range-restricted-int16s", Attributes::NullableRangeRestrictedInt16s::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                               //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                                     //
        make_unique<ReadEvent>(Id, "test-event", Events::TestEvent::Id),                                //
        make_unique<ReadEvent>(Id, "test-fabric-scoped-event", Events::TestFabricScopedEvent::Id),      //
        make_unique<SubscribeEvent>(Id),                                                                //
        make_unique<SubscribeEvent>(Id, "test-event", Events::TestEvent::Id),                           //
        make_unique<SubscribeEvent>(Id, "test-fabric-scoped-event", Events::TestFabricScopedEvent::Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterThermostat(Commands & commands)
{
    using namespace chip::app::Clusters::Thermostat;

    const char * clusterName = "Thermostat";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),              //
        make_unique<ThermostatClearWeeklySchedule>(), //
        make_unique<ThermostatGetRelayStatusLog>(),   //
        make_unique<ThermostatGetWeeklySchedule>(),   //
        make_unique<ThermostatSetWeeklySchedule>(),   //
        make_unique<ThermostatSetpointRaiseLower>(),  //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                                   //
        make_unique<ReadAttribute>(Id, "local-temperature", Attributes::LocalTemperature::Id),                            //
        make_unique<ReadAttribute>(Id, "abs-min-heat-setpoint-limit", Attributes::AbsMinHeatSetpointLimit::Id),           //
        make_unique<ReadAttribute>(Id, "abs-max-heat-setpoint-limit", Attributes::AbsMaxHeatSetpointLimit::Id),           //
        make_unique<ReadAttribute>(Id, "abs-min-cool-setpoint-limit", Attributes::AbsMinCoolSetpointLimit::Id),           //
        make_unique<ReadAttribute>(Id, "abs-max-cool-setpoint-limit", Attributes::AbsMaxCoolSetpointLimit::Id),           //
        make_unique<ReadAttribute>(Id, "occupied-cooling-setpoint", Attributes::OccupiedCoolingSetpoint::Id),             //
        make_unique<ReadAttribute>(Id, "occupied-heating-setpoint", Attributes::OccupiedHeatingSetpoint::Id),             //
        make_unique<ReadAttribute>(Id, "min-heat-setpoint-limit", Attributes::MinHeatSetpointLimit::Id),                  //
        make_unique<ReadAttribute>(Id, "max-heat-setpoint-limit", Attributes::MaxHeatSetpointLimit::Id),                  //
        make_unique<ReadAttribute>(Id, "min-cool-setpoint-limit", Attributes::MinCoolSetpointLimit::Id),                  //
        make_unique<ReadAttribute>(Id, "max-cool-setpoint-limit", Attributes::MaxCoolSetpointLimit::Id),                  //
        make_unique<ReadAttribute>(Id, "min-setpoint-dead-band", Attributes::MinSetpointDeadBand::Id),                    //
        make_unique<ReadAttribute>(Id, "control-sequence-of-operation", Attributes::ControlSequenceOfOperation::Id),      //
        make_unique<ReadAttribute>(Id, "system-mode", Attributes::SystemMode::Id),                                        //
        make_unique<ReadAttribute>(Id, "start-of-week", Attributes::StartOfWeek::Id),                                     //
        make_unique<ReadAttribute>(Id, "number-of-weekly-transitions", Attributes::NumberOfWeeklyTransitions::Id),        //
        make_unique<ReadAttribute>(Id, "number-of-daily-transitions", Attributes::NumberOfDailyTransitions::Id),          //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                  //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                                        //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                              //
        make_unique<WriteAttribute>(Id),                                                                                  //
        make_unique<WriteThermostatOccupiedCoolingSetpoint>(),                                                            //
        make_unique<WriteThermostatOccupiedHeatingSetpoint>(),                                                            //
        make_unique<WriteThermostatMinHeatSetpointLimit>(),                                                               //
        make_unique<WriteThermostatMaxHeatSetpointLimit>(),                                                               //
        make_unique<WriteThermostatMinCoolSetpointLimit>(),                                                               //
        make_unique<WriteThermostatMaxCoolSetpointLimit>(),                                                               //
        make_unique<WriteThermostatMinSetpointDeadBand>(),                                                                //
        make_unique<WriteThermostatControlSequenceOfOperation>(),                                                         //
        make_unique<WriteThermostatSystemMode>(),                                                                         //
        make_unique<SubscribeAttribute>(Id),                                                                              //
        make_unique<SubscribeAttribute>(Id, "local-temperature", Attributes::LocalTemperature::Id),                       //
        make_unique<SubscribeAttribute>(Id, "abs-min-heat-setpoint-limit", Attributes::AbsMinHeatSetpointLimit::Id),      //
        make_unique<SubscribeAttribute>(Id, "abs-max-heat-setpoint-limit", Attributes::AbsMaxHeatSetpointLimit::Id),      //
        make_unique<SubscribeAttribute>(Id, "abs-min-cool-setpoint-limit", Attributes::AbsMinCoolSetpointLimit::Id),      //
        make_unique<SubscribeAttribute>(Id, "abs-max-cool-setpoint-limit", Attributes::AbsMaxCoolSetpointLimit::Id),      //
        make_unique<SubscribeAttribute>(Id, "occupied-cooling-setpoint", Attributes::OccupiedCoolingSetpoint::Id),        //
        make_unique<SubscribeAttribute>(Id, "occupied-heating-setpoint", Attributes::OccupiedHeatingSetpoint::Id),        //
        make_unique<SubscribeAttribute>(Id, "min-heat-setpoint-limit", Attributes::MinHeatSetpointLimit::Id),             //
        make_unique<SubscribeAttribute>(Id, "max-heat-setpoint-limit", Attributes::MaxHeatSetpointLimit::Id),             //
        make_unique<SubscribeAttribute>(Id, "min-cool-setpoint-limit", Attributes::MinCoolSetpointLimit::Id),             //
        make_unique<SubscribeAttribute>(Id, "max-cool-setpoint-limit", Attributes::MaxCoolSetpointLimit::Id),             //
        make_unique<SubscribeAttribute>(Id, "min-setpoint-dead-band", Attributes::MinSetpointDeadBand::Id),               //
        make_unique<SubscribeAttribute>(Id, "control-sequence-of-operation", Attributes::ControlSequenceOfOperation::Id), //
        make_unique<SubscribeAttribute>(Id, "system-mode", Attributes::SystemMode::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "start-of-week", Attributes::StartOfWeek::Id),                                //
        make_unique<SubscribeAttribute>(Id, "number-of-weekly-transitions", Attributes::NumberOfWeeklyTransitions::Id),   //
        make_unique<SubscribeAttribute>(Id, "number-of-daily-transitions", Attributes::NumberOfDailyTransitions::Id),     //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                             //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                         //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterThermostatUserInterfaceConfiguration(Commands & commands)
{
    using namespace chip::app::Clusters::ThermostatUserInterfaceConfiguration;

    const char * clusterName = "ThermostatUserInterfaceConfiguration";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                                        //
        make_unique<ReadAttribute>(Id, "temperature-display-mode", Attributes::TemperatureDisplayMode::Id),                    //
        make_unique<ReadAttribute>(Id, "keypad-lockout", Attributes::KeypadLockout::Id),                                       //
        make_unique<ReadAttribute>(Id, "schedule-programming-visibility", Attributes::ScheduleProgrammingVisibility::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                       //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                                   //
        make_unique<WriteAttribute>(Id),                                                                                       //
        make_unique<WriteThermostatUserInterfaceConfigurationTemperatureDisplayMode>(),                                        //
        make_unique<WriteThermostatUserInterfaceConfigurationKeypadLockout>(),                                                 //
        make_unique<WriteThermostatUserInterfaceConfigurationScheduleProgrammingVisibility>(),                                 //
        make_unique<SubscribeAttribute>(Id),                                                                                   //
        make_unique<SubscribeAttribute>(Id, "temperature-display-mode", Attributes::TemperatureDisplayMode::Id),               //
        make_unique<SubscribeAttribute>(Id, "keypad-lockout", Attributes::KeypadLockout::Id),                                  //
        make_unique<SubscribeAttribute>(Id, "schedule-programming-visibility", Attributes::ScheduleProgrammingVisibility::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                  //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                              //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterThreadNetworkDiagnostics(Commands & commands)
{
    using namespace chip::app::Clusters::ThreadNetworkDiagnostics;

    const char * clusterName = "ThreadNetworkDiagnostics";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                    //
        make_unique<ThreadNetworkDiagnosticsResetCounts>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                      //
        make_unique<ReadAttribute>(Id, "channel", Attributes::Channel::Id),                                  //
        make_unique<ReadAttribute>(Id, "routing-role", Attributes::RoutingRole::Id),                         //
        make_unique<ReadAttribute>(Id, "network-name", Attributes::NetworkName::Id),                         //
        make_unique<ReadAttribute>(Id, "pan-id", Attributes::PanId::Id),                                     //
        make_unique<ReadAttribute>(Id, "extended-pan-id", Attributes::ExtendedPanId::Id),                    //
        make_unique<ReadAttribute>(Id, "mesh-local-prefix", Attributes::MeshLocalPrefix::Id),                //
        make_unique<ReadAttribute>(Id, "overrun-count", Attributes::OverrunCount::Id),                       //
        make_unique<ReadAttribute>(Id, "neighbor-table-list", Attributes::NeighborTableList::Id),            //
        make_unique<ReadAttribute>(Id, "route-table-list", Attributes::RouteTableList::Id),                  //
        make_unique<ReadAttribute>(Id, "partition-id", Attributes::PartitionId::Id),                         //
        make_unique<ReadAttribute>(Id, "weighting", Attributes::Weighting::Id),                              //
        make_unique<ReadAttribute>(Id, "data-version", Attributes::DataVersion::Id),                         //
        make_unique<ReadAttribute>(Id, "stable-data-version", Attributes::StableDataVersion::Id),            //
        make_unique<ReadAttribute>(Id, "leader-router-id", Attributes::LeaderRouterId::Id),                  //
        make_unique<ReadAttribute>(Id, "detached-role-count", Attributes::DetachedRoleCount::Id),            //
        make_unique<ReadAttribute>(Id, "child-role-count", Attributes::ChildRoleCount::Id),                  //
        make_unique<ReadAttribute>(Id, "router-role-count", Attributes::RouterRoleCount::Id),                //
        make_unique<ReadAttribute>(Id, "leader-role-count", Attributes::LeaderRoleCount::Id),                //
        make_unique<ReadAttribute>(Id, "attach-attempt-count", Attributes::AttachAttemptCount::Id),          //
        make_unique<ReadAttribute>(Id, "partition-id-change-count", Attributes::PartitionIdChangeCount::Id), //
        make_unique<ReadAttribute>(Id, "better-partition-attach-attempt-count",
                                   Attributes::BetterPartitionAttachAttemptCount::Id),                                       //
        make_unique<ReadAttribute>(Id, "parent-change-count", Attributes::ParentChangeCount::Id),                            //
        make_unique<ReadAttribute>(Id, "tx-total-count", Attributes::TxTotalCount::Id),                                      //
        make_unique<ReadAttribute>(Id, "tx-unicast-count", Attributes::TxUnicastCount::Id),                                  //
        make_unique<ReadAttribute>(Id, "tx-broadcast-count", Attributes::TxBroadcastCount::Id),                              //
        make_unique<ReadAttribute>(Id, "tx-ack-requested-count", Attributes::TxAckRequestedCount::Id),                       //
        make_unique<ReadAttribute>(Id, "tx-acked-count", Attributes::TxAckedCount::Id),                                      //
        make_unique<ReadAttribute>(Id, "tx-no-ack-requested-count", Attributes::TxNoAckRequestedCount::Id),                  //
        make_unique<ReadAttribute>(Id, "tx-data-count", Attributes::TxDataCount::Id),                                        //
        make_unique<ReadAttribute>(Id, "tx-data-poll-count", Attributes::TxDataPollCount::Id),                               //
        make_unique<ReadAttribute>(Id, "tx-beacon-count", Attributes::TxBeaconCount::Id),                                    //
        make_unique<ReadAttribute>(Id, "tx-beacon-request-count", Attributes::TxBeaconRequestCount::Id),                     //
        make_unique<ReadAttribute>(Id, "tx-other-count", Attributes::TxOtherCount::Id),                                      //
        make_unique<ReadAttribute>(Id, "tx-retry-count", Attributes::TxRetryCount::Id),                                      //
        make_unique<ReadAttribute>(Id, "tx-direct-max-retry-expiry-count", Attributes::TxDirectMaxRetryExpiryCount::Id),     //
        make_unique<ReadAttribute>(Id, "tx-indirect-max-retry-expiry-count", Attributes::TxIndirectMaxRetryExpiryCount::Id), //
        make_unique<ReadAttribute>(Id, "tx-err-cca-count", Attributes::TxErrCcaCount::Id),                                   //
        make_unique<ReadAttribute>(Id, "tx-err-abort-count", Attributes::TxErrAbortCount::Id),                               //
        make_unique<ReadAttribute>(Id, "tx-err-busy-channel-count", Attributes::TxErrBusyChannelCount::Id),                  //
        make_unique<ReadAttribute>(Id, "rx-total-count", Attributes::RxTotalCount::Id),                                      //
        make_unique<ReadAttribute>(Id, "rx-unicast-count", Attributes::RxUnicastCount::Id),                                  //
        make_unique<ReadAttribute>(Id, "rx-broadcast-count", Attributes::RxBroadcastCount::Id),                              //
        make_unique<ReadAttribute>(Id, "rx-data-count", Attributes::RxDataCount::Id),                                        //
        make_unique<ReadAttribute>(Id, "rx-data-poll-count", Attributes::RxDataPollCount::Id),                               //
        make_unique<ReadAttribute>(Id, "rx-beacon-count", Attributes::RxBeaconCount::Id),                                    //
        make_unique<ReadAttribute>(Id, "rx-beacon-request-count", Attributes::RxBeaconRequestCount::Id),                     //
        make_unique<ReadAttribute>(Id, "rx-other-count", Attributes::RxOtherCount::Id),                                      //
        make_unique<ReadAttribute>(Id, "rx-address-filtered-count", Attributes::RxAddressFilteredCount::Id),                 //
        make_unique<ReadAttribute>(Id, "rx-dest-addr-filtered-count", Attributes::RxDestAddrFilteredCount::Id),              //
        make_unique<ReadAttribute>(Id, "rx-duplicated-count", Attributes::RxDuplicatedCount::Id),                            //
        make_unique<ReadAttribute>(Id, "rx-err-no-frame-count", Attributes::RxErrNoFrameCount::Id),                          //
        make_unique<ReadAttribute>(Id, "rx-err-unknown-neighbor-count", Attributes::RxErrUnknownNeighborCount::Id),          //
        make_unique<ReadAttribute>(Id, "rx-err-invalid-src-addr-count", Attributes::RxErrInvalidSrcAddrCount::Id),           //
        make_unique<ReadAttribute>(Id, "rx-err-sec-count", Attributes::RxErrSecCount::Id),                                   //
        make_unique<ReadAttribute>(Id, "rx-err-fcs-count", Attributes::RxErrFcsCount::Id),                                   //
        make_unique<ReadAttribute>(Id, "rx-err-other-count", Attributes::RxErrOtherCount::Id),                               //
        make_unique<ReadAttribute>(Id, "active-timestamp", Attributes::ActiveTimestamp::Id),                                 //
        make_unique<ReadAttribute>(Id, "pending-timestamp", Attributes::PendingTimestamp::Id),                               //
        make_unique<ReadAttribute>(Id, "delay", Attributes::Delay::Id),                                                      //
        make_unique<ReadAttribute>(Id, "security-policy", Attributes::SecurityPolicy::Id),                                   //
        make_unique<ReadAttribute>(Id, "channel-mask", Attributes::ChannelMask::Id),                                         //
        make_unique<ReadAttribute>(Id, "operational-dataset-components", Attributes::OperationalDatasetComponents::Id),      //
        make_unique<ReadAttribute>(Id, "active-network-faults-list", Attributes::ActiveNetworkFaultsList::Id),               //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                     //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                                           //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                                 //
        make_unique<WriteAttribute>(Id),                                                                                     //
        make_unique<SubscribeAttribute>(Id),                                                                                 //
        make_unique<SubscribeAttribute>(Id, "channel", Attributes::Channel::Id),                                             //
        make_unique<SubscribeAttribute>(Id, "routing-role", Attributes::RoutingRole::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "network-name", Attributes::NetworkName::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "pan-id", Attributes::PanId::Id),                                                //
        make_unique<SubscribeAttribute>(Id, "extended-pan-id", Attributes::ExtendedPanId::Id),                               //
        make_unique<SubscribeAttribute>(Id, "mesh-local-prefix", Attributes::MeshLocalPrefix::Id),                           //
        make_unique<SubscribeAttribute>(Id, "overrun-count", Attributes::OverrunCount::Id),                                  //
        make_unique<SubscribeAttribute>(Id, "neighbor-table-list", Attributes::NeighborTableList::Id),                       //
        make_unique<SubscribeAttribute>(Id, "route-table-list", Attributes::RouteTableList::Id),                             //
        make_unique<SubscribeAttribute>(Id, "partition-id", Attributes::PartitionId::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "weighting", Attributes::Weighting::Id),                                         //
        make_unique<SubscribeAttribute>(Id, "data-version", Attributes::DataVersion::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "stable-data-version", Attributes::StableDataVersion::Id),                       //
        make_unique<SubscribeAttribute>(Id, "leader-router-id", Attributes::LeaderRouterId::Id),                             //
        make_unique<SubscribeAttribute>(Id, "detached-role-count", Attributes::DetachedRoleCount::Id),                       //
        make_unique<SubscribeAttribute>(Id, "child-role-count", Attributes::ChildRoleCount::Id),                             //
        make_unique<SubscribeAttribute>(Id, "router-role-count", Attributes::RouterRoleCount::Id),                           //
        make_unique<SubscribeAttribute>(Id, "leader-role-count", Attributes::LeaderRoleCount::Id),                           //
        make_unique<SubscribeAttribute>(Id, "attach-attempt-count", Attributes::AttachAttemptCount::Id),                     //
        make_unique<SubscribeAttribute>(Id, "partition-id-change-count", Attributes::PartitionIdChangeCount::Id),            //
        make_unique<SubscribeAttribute>(Id, "better-partition-attach-attempt-count",
                                        Attributes::BetterPartitionAttachAttemptCount::Id),                                       //
        make_unique<SubscribeAttribute>(Id, "parent-change-count", Attributes::ParentChangeCount::Id),                            //
        make_unique<SubscribeAttribute>(Id, "tx-total-count", Attributes::TxTotalCount::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "tx-unicast-count", Attributes::TxUnicastCount::Id),                                  //
        make_unique<SubscribeAttribute>(Id, "tx-broadcast-count", Attributes::TxBroadcastCount::Id),                              //
        make_unique<SubscribeAttribute>(Id, "tx-ack-requested-count", Attributes::TxAckRequestedCount::Id),                       //
        make_unique<SubscribeAttribute>(Id, "tx-acked-count", Attributes::TxAckedCount::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "tx-no-ack-requested-count", Attributes::TxNoAckRequestedCount::Id),                  //
        make_unique<SubscribeAttribute>(Id, "tx-data-count", Attributes::TxDataCount::Id),                                        //
        make_unique<SubscribeAttribute>(Id, "tx-data-poll-count", Attributes::TxDataPollCount::Id),                               //
        make_unique<SubscribeAttribute>(Id, "tx-beacon-count", Attributes::TxBeaconCount::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "tx-beacon-request-count", Attributes::TxBeaconRequestCount::Id),                     //
        make_unique<SubscribeAttribute>(Id, "tx-other-count", Attributes::TxOtherCount::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "tx-retry-count", Attributes::TxRetryCount::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "tx-direct-max-retry-expiry-count", Attributes::TxDirectMaxRetryExpiryCount::Id),     //
        make_unique<SubscribeAttribute>(Id, "tx-indirect-max-retry-expiry-count", Attributes::TxIndirectMaxRetryExpiryCount::Id), //
        make_unique<SubscribeAttribute>(Id, "tx-err-cca-count", Attributes::TxErrCcaCount::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "tx-err-abort-count", Attributes::TxErrAbortCount::Id),                               //
        make_unique<SubscribeAttribute>(Id, "tx-err-busy-channel-count", Attributes::TxErrBusyChannelCount::Id),                  //
        make_unique<SubscribeAttribute>(Id, "rx-total-count", Attributes::RxTotalCount::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "rx-unicast-count", Attributes::RxUnicastCount::Id),                                  //
        make_unique<SubscribeAttribute>(Id, "rx-broadcast-count", Attributes::RxBroadcastCount::Id),                              //
        make_unique<SubscribeAttribute>(Id, "rx-data-count", Attributes::RxDataCount::Id),                                        //
        make_unique<SubscribeAttribute>(Id, "rx-data-poll-count", Attributes::RxDataPollCount::Id),                               //
        make_unique<SubscribeAttribute>(Id, "rx-beacon-count", Attributes::RxBeaconCount::Id),                                    //
        make_unique<SubscribeAttribute>(Id, "rx-beacon-request-count", Attributes::RxBeaconRequestCount::Id),                     //
        make_unique<SubscribeAttribute>(Id, "rx-other-count", Attributes::RxOtherCount::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "rx-address-filtered-count", Attributes::RxAddressFilteredCount::Id),                 //
        make_unique<SubscribeAttribute>(Id, "rx-dest-addr-filtered-count", Attributes::RxDestAddrFilteredCount::Id),              //
        make_unique<SubscribeAttribute>(Id, "rx-duplicated-count", Attributes::RxDuplicatedCount::Id),                            //
        make_unique<SubscribeAttribute>(Id, "rx-err-no-frame-count", Attributes::RxErrNoFrameCount::Id),                          //
        make_unique<SubscribeAttribute>(Id, "rx-err-unknown-neighbor-count", Attributes::RxErrUnknownNeighborCount::Id),          //
        make_unique<SubscribeAttribute>(Id, "rx-err-invalid-src-addr-count", Attributes::RxErrInvalidSrcAddrCount::Id),           //
        make_unique<SubscribeAttribute>(Id, "rx-err-sec-count", Attributes::RxErrSecCount::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "rx-err-fcs-count", Attributes::RxErrFcsCount::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "rx-err-other-count", Attributes::RxErrOtherCount::Id),                               //
        make_unique<SubscribeAttribute>(Id, "active-timestamp", Attributes::ActiveTimestamp::Id),                                 //
        make_unique<SubscribeAttribute>(Id, "pending-timestamp", Attributes::PendingTimestamp::Id),                               //
        make_unique<SubscribeAttribute>(Id, "delay", Attributes::Delay::Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "security-policy", Attributes::SecurityPolicy::Id),                                   //
        make_unique<SubscribeAttribute>(Id, "channel-mask", Attributes::ChannelMask::Id),                                         //
        make_unique<SubscribeAttribute>(Id, "operational-dataset-components", Attributes::OperationalDatasetComponents::Id),      //
        make_unique<SubscribeAttribute>(Id, "active-network-faults-list", Attributes::ActiveNetworkFaultsList::Id),               //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                     //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                                           //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                                 //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                         //
        make_unique<ReadEvent>(Id, "connection-status", Events::ConnectionStatus::Id),      //
        make_unique<SubscribeEvent>(Id),                                                    //
        make_unique<SubscribeEvent>(Id, "connection-status", Events::ConnectionStatus::Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterTimeFormatLocalization(Commands & commands)
{
    using namespace chip::app::Clusters::TimeFormatLocalization;

    const char * clusterName = "TimeFormatLocalization";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                          //
        make_unique<ReadAttribute>(Id, "hour-format", Attributes::HourFormat::Id),                               //
        make_unique<ReadAttribute>(Id, "active-calendar-type", Attributes::ActiveCalendarType::Id),              //
        make_unique<ReadAttribute>(Id, "supported-calendar-types", Attributes::SupportedCalendarTypes::Id),      //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                     //
        make_unique<WriteAttribute>(Id),                                                                         //
        make_unique<WriteTimeFormatLocalizationHourFormat>(),                                                    //
        make_unique<WriteTimeFormatLocalizationActiveCalendarType>(),                                            //
        make_unique<SubscribeAttribute>(Id),                                                                     //
        make_unique<SubscribeAttribute>(Id, "hour-format", Attributes::HourFormat::Id),                          //
        make_unique<SubscribeAttribute>(Id, "active-calendar-type", Attributes::ActiveCalendarType::Id),         //
        make_unique<SubscribeAttribute>(Id, "supported-calendar-types", Attributes::SupportedCalendarTypes::Id), //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterUnitLocalization(Commands & commands)
{
    using namespace chip::app::Clusters::UnitLocalization;

    const char * clusterName = "UnitLocalization";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "temperature-unit", Attributes::TemperatureUnit::Id),      //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<WriteUnitLocalizationTemperatureUnit>(),                                      //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "temperature-unit", Attributes::TemperatureUnit::Id), //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),           //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterUserLabel(Commands & commands)
{
    using namespace chip::app::Clusters::UserLabel;

    const char * clusterName = "UserLabel";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                           //
        make_unique<ReadAttribute>(Id, "label-list", Attributes::LabelList::Id),                  //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),      //
        make_unique<WriteAttribute>(Id),                                                          //
        make_unique<WriteUserLabelLabelList>(),                                                   //
        make_unique<SubscribeAttribute>(Id),                                                      //
        make_unique<SubscribeAttribute>(Id, "label-list", Attributes::LabelList::Id),             //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id), //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterWakeOnLan(Commands & commands)
{
    using namespace chip::app::Clusters::WakeOnLan;

    const char * clusterName = "WakeOnLan";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                      //
        make_unique<ReadAttribute>(Id, "wake-on-lan-mac-address", Attributes::WakeOnLanMacAddress::Id),      //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                     //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                 //
        make_unique<WriteAttribute>(Id),                                                                     //
        make_unique<SubscribeAttribute>(Id),                                                                 //
        make_unique<SubscribeAttribute>(Id, "wake-on-lan-mac-address", Attributes::WakeOnLanMacAddress::Id), //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),            //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterWiFiNetworkDiagnostics(Commands & commands)
{
    using namespace chip::app::Clusters::WiFiNetworkDiagnostics;

    const char * clusterName = "WiFiNetworkDiagnostics";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                  //
        make_unique<WiFiNetworkDiagnosticsResetCounts>(), //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                           //
        make_unique<ReadAttribute>(Id, "bssid", Attributes::Bssid::Id),                                           //
        make_unique<ReadAttribute>(Id, "security-type", Attributes::SecurityType::Id),                            //
        make_unique<ReadAttribute>(Id, "wi-fi-version", Attributes::WiFiVersion::Id),                             //
        make_unique<ReadAttribute>(Id, "channel-number", Attributes::ChannelNumber::Id),                          //
        make_unique<ReadAttribute>(Id, "rssi", Attributes::Rssi::Id),                                             //
        make_unique<ReadAttribute>(Id, "beacon-lost-count", Attributes::BeaconLostCount::Id),                     //
        make_unique<ReadAttribute>(Id, "beacon-rx-count", Attributes::BeaconRxCount::Id),                         //
        make_unique<ReadAttribute>(Id, "packet-multicast-rx-count", Attributes::PacketMulticastRxCount::Id),      //
        make_unique<ReadAttribute>(Id, "packet-multicast-tx-count", Attributes::PacketMulticastTxCount::Id),      //
        make_unique<ReadAttribute>(Id, "packet-unicast-rx-count", Attributes::PacketUnicastRxCount::Id),          //
        make_unique<ReadAttribute>(Id, "packet-unicast-tx-count", Attributes::PacketUnicastTxCount::Id),          //
        make_unique<ReadAttribute>(Id, "current-max-rate", Attributes::CurrentMaxRate::Id),                       //
        make_unique<ReadAttribute>(Id, "overrun-count", Attributes::OverrunCount::Id),                            //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                          //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                                //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                      //
        make_unique<WriteAttribute>(Id),                                                                          //
        make_unique<SubscribeAttribute>(Id),                                                                      //
        make_unique<SubscribeAttribute>(Id, "bssid", Attributes::Bssid::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "security-type", Attributes::SecurityType::Id),                       //
        make_unique<SubscribeAttribute>(Id, "wi-fi-version", Attributes::WiFiVersion::Id),                        //
        make_unique<SubscribeAttribute>(Id, "channel-number", Attributes::ChannelNumber::Id),                     //
        make_unique<SubscribeAttribute>(Id, "rssi", Attributes::Rssi::Id),                                        //
        make_unique<SubscribeAttribute>(Id, "beacon-lost-count", Attributes::BeaconLostCount::Id),                //
        make_unique<SubscribeAttribute>(Id, "beacon-rx-count", Attributes::BeaconRxCount::Id),                    //
        make_unique<SubscribeAttribute>(Id, "packet-multicast-rx-count", Attributes::PacketMulticastRxCount::Id), //
        make_unique<SubscribeAttribute>(Id, "packet-multicast-tx-count", Attributes::PacketMulticastTxCount::Id), //
        make_unique<SubscribeAttribute>(Id, "packet-unicast-rx-count", Attributes::PacketUnicastRxCount::Id),     //
        make_unique<SubscribeAttribute>(Id, "packet-unicast-tx-count", Attributes::PacketUnicastTxCount::Id),     //
        make_unique<SubscribeAttribute>(Id, "current-max-rate", Attributes::CurrentMaxRate::Id),                  //
        make_unique<SubscribeAttribute>(Id, "overrun-count", Attributes::OverrunCount::Id),                       //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                     //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                           //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                 //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),                                                             //
        make_unique<ReadEvent>(Id, "disconnection", Events::Disconnection::Id),                 //
        make_unique<ReadEvent>(Id, "association-failure", Events::AssociationFailure::Id),      //
        make_unique<ReadEvent>(Id, "connection-status", Events::ConnectionStatus::Id),          //
        make_unique<SubscribeEvent>(Id),                                                        //
        make_unique<SubscribeEvent>(Id, "disconnection", Events::Disconnection::Id),            //
        make_unique<SubscribeEvent>(Id, "association-failure", Events::AssociationFailure::Id), //
        make_unique<SubscribeEvent>(Id, "connection-status", Events::ConnectionStatus::Id),     //
    };

    commands.Register(clusterName, clusterCommands);
}
void registerClusterWindowCovering(Commands & commands)
{
    using namespace chip::app::Clusters::WindowCovering;

    const char * clusterName = "WindowCovering";

    commands_list clusterCommands = {
        //
        // Commands
        //
        make_unique<ClusterCommand>(Id),                 //
        make_unique<WindowCoveringDownOrClose>(),        //
        make_unique<WindowCoveringGoToLiftPercentage>(), //
        make_unique<WindowCoveringGoToLiftValue>(),      //
        make_unique<WindowCoveringGoToTiltPercentage>(), //
        make_unique<WindowCoveringGoToTiltValue>(),      //
        make_unique<WindowCoveringStopMotion>(),         //
        make_unique<WindowCoveringUpOrOpen>(),           //
        //
        // Attributes
        //
        make_unique<ReadAttribute>(Id),                                                                                          //
        make_unique<ReadAttribute>(Id, "type", Attributes::Type::Id),                                                            //
        make_unique<ReadAttribute>(Id, "current-position-lift", Attributes::CurrentPositionLift::Id),                            //
        make_unique<ReadAttribute>(Id, "current-position-tilt", Attributes::CurrentPositionTilt::Id),                            //
        make_unique<ReadAttribute>(Id, "config-status", Attributes::ConfigStatus::Id),                                           //
        make_unique<ReadAttribute>(Id, "current-position-lift-percentage", Attributes::CurrentPositionLiftPercentage::Id),       //
        make_unique<ReadAttribute>(Id, "current-position-tilt-percentage", Attributes::CurrentPositionTiltPercentage::Id),       //
        make_unique<ReadAttribute>(Id, "operational-status", Attributes::OperationalStatus::Id),                                 //
        make_unique<ReadAttribute>(Id, "target-position-lift-percent100ths", Attributes::TargetPositionLiftPercent100ths::Id),   //
        make_unique<ReadAttribute>(Id, "target-position-tilt-percent100ths", Attributes::TargetPositionTiltPercent100ths::Id),   //
        make_unique<ReadAttribute>(Id, "end-product-type", Attributes::EndProductType::Id),                                      //
        make_unique<ReadAttribute>(Id, "current-position-lift-percent100ths", Attributes::CurrentPositionLiftPercent100ths::Id), //
        make_unique<ReadAttribute>(Id, "current-position-tilt-percent100ths", Attributes::CurrentPositionTiltPercent100ths::Id), //
        make_unique<ReadAttribute>(Id, "installed-open-limit-lift", Attributes::InstalledOpenLimitLift::Id),                     //
        make_unique<ReadAttribute>(Id, "installed-closed-limit-lift", Attributes::InstalledClosedLimitLift::Id),                 //
        make_unique<ReadAttribute>(Id, "installed-open-limit-tilt", Attributes::InstalledOpenLimitTilt::Id),                     //
        make_unique<ReadAttribute>(Id, "installed-closed-limit-tilt", Attributes::InstalledClosedLimitTilt::Id),                 //
        make_unique<ReadAttribute>(Id, "mode", Attributes::Mode::Id),                                                            //
        make_unique<ReadAttribute>(Id, "safety-status", Attributes::SafetyStatus::Id),                                           //
        make_unique<ReadAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                                         //
        make_unique<ReadAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                                               //
        make_unique<ReadAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                                     //
        make_unique<WriteAttribute>(Id),                                                                                         //
        make_unique<WriteWindowCoveringMode>(),                                                                                  //
        make_unique<SubscribeAttribute>(Id),                                                                                     //
        make_unique<SubscribeAttribute>(Id, "type", Attributes::Type::Id),                                                       //
        make_unique<SubscribeAttribute>(Id, "current-position-lift", Attributes::CurrentPositionLift::Id),                       //
        make_unique<SubscribeAttribute>(Id, "current-position-tilt", Attributes::CurrentPositionTilt::Id),                       //
        make_unique<SubscribeAttribute>(Id, "config-status", Attributes::ConfigStatus::Id),                                      //
        make_unique<SubscribeAttribute>(Id, "current-position-lift-percentage", Attributes::CurrentPositionLiftPercentage::Id),  //
        make_unique<SubscribeAttribute>(Id, "current-position-tilt-percentage", Attributes::CurrentPositionTiltPercentage::Id),  //
        make_unique<SubscribeAttribute>(Id, "operational-status", Attributes::OperationalStatus::Id),                            //
        make_unique<SubscribeAttribute>(Id, "target-position-lift-percent100ths",
                                        Attributes::TargetPositionLiftPercent100ths::Id), //
        make_unique<SubscribeAttribute>(Id, "target-position-tilt-percent100ths",
                                        Attributes::TargetPositionTiltPercent100ths::Id),        //
        make_unique<SubscribeAttribute>(Id, "end-product-type", Attributes::EndProductType::Id), //
        make_unique<SubscribeAttribute>(Id, "current-position-lift-percent100ths",
                                        Attributes::CurrentPositionLiftPercent100ths::Id), //
        make_unique<SubscribeAttribute>(Id, "current-position-tilt-percent100ths",
                                        Attributes::CurrentPositionTiltPercent100ths::Id),                            //
        make_unique<SubscribeAttribute>(Id, "installed-open-limit-lift", Attributes::InstalledOpenLimitLift::Id),     //
        make_unique<SubscribeAttribute>(Id, "installed-closed-limit-lift", Attributes::InstalledClosedLimitLift::Id), //
        make_unique<SubscribeAttribute>(Id, "installed-open-limit-tilt", Attributes::InstalledOpenLimitTilt::Id),     //
        make_unique<SubscribeAttribute>(Id, "installed-closed-limit-tilt", Attributes::InstalledClosedLimitTilt::Id), //
        make_unique<SubscribeAttribute>(Id, "mode", Attributes::Mode::Id),                                            //
        make_unique<SubscribeAttribute>(Id, "safety-status", Attributes::SafetyStatus::Id),                           //
        make_unique<SubscribeAttribute>(Id, "attribute-list", Attributes::AttributeList::Id),                         //
        make_unique<SubscribeAttribute>(Id, "feature-map", Attributes::FeatureMap::Id),                               //
        make_unique<SubscribeAttribute>(Id, "cluster-revision", Attributes::ClusterRevision::Id),                     //
        //
        // Events
        //
        make_unique<ReadEvent>(Id),      //
        make_unique<SubscribeEvent>(Id), //
    };

    commands.Register(clusterName, clusterCommands);
}

void registerClusterAny(Commands & commands)
{
    const char * clusterName = "Any";

    commands_list clusterCommands = {
        make_unique<ClusterCommand>(),     //
        make_unique<ReadAttribute>(),      //
        make_unique<WriteAttribute>(),     //
        make_unique<SubscribeAttribute>(), //
        make_unique<ReadEvent>(),          //
        make_unique<SubscribeEvent>(),     //
    };

    commands.Register(clusterName, clusterCommands);
}

void registerClusters(Commands & commands)
{
    registerClusterAny(commands);
    registerClusterAccessControl(commands);
    registerClusterAccountLogin(commands);
    registerClusterAdministratorCommissioning(commands);
    registerClusterApplicationBasic(commands);
    registerClusterApplicationLauncher(commands);
    registerClusterAudioOutput(commands);
    registerClusterBarrierControl(commands);
    registerClusterBasic(commands);
    registerClusterBinaryInputBasic(commands);
    registerClusterBinding(commands);
    registerClusterBooleanState(commands);
    registerClusterBridgedActions(commands);
    registerClusterBridgedDeviceBasic(commands);
    registerClusterChannel(commands);
    registerClusterColorControl(commands);
    registerClusterContentLauncher(commands);
    registerClusterDescriptor(commands);
    registerClusterDiagnosticLogs(commands);
    registerClusterDoorLock(commands);
    registerClusterElectricalMeasurement(commands);
    registerClusterEthernetNetworkDiagnostics(commands);
    registerClusterFixedLabel(commands);
    registerClusterFlowMeasurement(commands);
    registerClusterGeneralCommissioning(commands);
    registerClusterGeneralDiagnostics(commands);
    registerClusterGroupKeyManagement(commands);
    registerClusterGroups(commands);
    registerClusterIdentify(commands);
    registerClusterIlluminanceMeasurement(commands);
    registerClusterKeypadInput(commands);
    registerClusterLevelControl(commands);
    registerClusterLocalizationConfiguration(commands);
    registerClusterLowPower(commands);
    registerClusterMediaInput(commands);
    registerClusterMediaPlayback(commands);
    registerClusterModeSelect(commands);
    registerClusterNetworkCommissioning(commands);
    registerClusterOtaSoftwareUpdateProvider(commands);
    registerClusterOtaSoftwareUpdateRequestor(commands);
    registerClusterOccupancySensing(commands);
    registerClusterOnOff(commands);
    registerClusterOnOffSwitchConfiguration(commands);
    registerClusterOperationalCredentials(commands);
    registerClusterPowerSource(commands);
    registerClusterPowerSourceConfiguration(commands);
    registerClusterPressureMeasurement(commands);
    registerClusterPumpConfigurationAndControl(commands);
    registerClusterRelativeHumidityMeasurement(commands);
    registerClusterScenes(commands);
    registerClusterSoftwareDiagnostics(commands);
    registerClusterSwitch(commands);
    registerClusterTargetNavigator(commands);
    registerClusterTemperatureMeasurement(commands);
    registerClusterTestCluster(commands);
    registerClusterThermostat(commands);
    registerClusterThermostatUserInterfaceConfiguration(commands);
    registerClusterThreadNetworkDiagnostics(commands);
    registerClusterTimeFormatLocalization(commands);
    registerClusterUnitLocalization(commands);
    registerClusterUserLabel(commands);
    registerClusterWakeOnLan(commands);
    registerClusterWiFiNetworkDiagnostics(commands);
    registerClusterWindowCovering(commands);
}
