# Copyright (c) 2023 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/scm1612s.gni")
import("${scm1612s_sdk_build_root}/scm1612s_sdk.gni")

declare_args() {
  # Build target to use for scm1612s SDK. Use this to set global SDK defines.
  scm1612s_target_project = ""
}

assert(scm1612s_target_project != "", "scm1612s_target_project must be specified")

crtbegin_dir = exec_script("find_gcc_lib_dir.py", [ "riscv32-elf-gcc" ], "value")
crtbegin_o = "${crtbegin_dir}/crtbegin.o"
crtend_o = "${crtbegin_dir}/crtend.o"

# Add includes, cflags, asmflags, etc in config
config("scm1612s_sdk_config") {
    include_dirs = [
      "${scm1612s_sdk_root}/api/include",
      "${scm1612s_sdk_root}/include",
      "${scm1612s_sdk_root}/include/generated",
      "${scm1612s_sdk_root}/include/hal/ndsv5",
      "${scm1612s_sdk_root}/include/cli",
      "${scm1612s_sdk_root}/include/freebsd",
      "${scm1612s_sdk_root}/include/FreeRTOS",
      "${scm1612s_sdk_root}/hal/soc/scm2010",
      "${scm1612s_sdk_root}/hal/soc/scm2010/freertos",
      "${scm1612s_sdk_root}/hal/soc/scm2010/freertos/V10.2.1",
      "${scm1612s_sdk_root}/lib/lwip/src/include",
      "${scm1612s_sdk_root}/lib/lwip/ports/freertos/include",
      "${scm1612s_sdk_root}/lib/mbedtls-2.28.10/include",
      "${scm1612s_sdk_root}/lib/ble/nimble/mynewt-nimble/nimble/include",
      "${scm1612s_sdk_root}/lib/ble/nimble/mynewt-nimble/nimble/host/include",
      "${scm1612s_sdk_root}/lib/ble/nimble/mynewt-nimble/nimble/host/util/include",
      "${scm1612s_sdk_root}/lib/ble/nimble/mynewt-nimble/nimble/transport/include",
      "${scm1612s_sdk_root}/lib/ble/nimble/mynewt-nimble/porting/nimble/include",
      "${scm1612s_sdk_root}/lib/ble/nimble/mynewt-nimble/porting/npl/wise/include",
      "${scm1612s_sdk_root}/lib/ble/nimble/mynewt-nimble/nimble/host/services/gap/include",
      "${scm1612s_sdk_root}/lib/ble/nimble/mynewt-nimble/nimble/host/services/gatt/include",
      "${scm1612s_sdk_root}/lib/tinycrypt/lib/include",
    ]

    cflags = [
      "-matomic",
      "-mno-execit",
      "-mcmodel=medany",
      "-fno-builtin",
      "--specs=nosys.specs",
      #"-v", #debug
      "-Wno-error=absolute-value",
      "-Wno-unused-but-set-variable",
      "-Wno-unused-variable",
      "-Wno-unused-function",
      "-Wno-conversion",
      "-Wno-sign-compare",
      "-Wno-clobbered",
      "-Wno-implicit-fallthrough",
      "-fno-optimize-strlen",
      "-Wno-format-nonliteral",
      "-Wno-error=shadow",
      "-Wno-error=type-limits",
      "-D__WISE__",
      "-D__USE_NATIVE_HEADER__", # Don't refer to standard headers within wise-sdk
      "-DSCM2010",
      "-DNIMBLE_CFG_CONTROLLER",
      "-DNIMBLE_CFG_HOST",
      "-include" + rebase_path("${scm1612s_sdk_root}/include/generated/autoconf.h", root_build_dir),
      "-include" + rebase_path("${scm1612s_sdk_root}/include/rom/fixedconf.h", root_build_dir),
    ]

    ldflags = [
      #"-v", #debug
      "-T" + rebase_path("${scm1612s_sdk_root}/wise.lds", root_build_dir),
      "-T" + rebase_path("${scm1612s_sdk_root}/hal/soc/scm2010/wise.rom_v2.ld", root_build_dir),
      #"-Wl,-nostdlib",
      "-nostartfiles",
      "-Wl,--mno-execit",
      "-Wl,--no-relax",
      "-Wl,-Bstatic",
      "-matomic",
      "-Wl,--no-dynamic-linker",
      # Link options that provide a replacement for dynamic memory operations in standard
      # library with the FreeRTOS malloc in platform code.
      "-Wl,--wrap=malloc",
      "-Wl,--wrap=free",
      "-Wl,--wrap=realloc",
      "-Wl,--wrap=calloc",
      "-Wl,--wrap=vsnprintf",
      "-Wl,--wrap=vsprintf",
      "-Wl,--wrap=printf",
      "-Wl,--wrap=vprintf",
      "-Wl,--wrap=sprintf",
      "-Wl," + crtbegin_o,
      "-Wl," + crtend_o,
    ]

    # Pull out static libs (.a files) from SDK
    libs = [
      "${scm1612s_sdk_root}/kernel/kernel.a",
      "${scm1612s_sdk_root}/api/api.a",
      #"${scm1612s_sdk_root}/app/app.a",
      "${scm1612s_sdk_root}/kernel/FreeRTOS/kernel-FreeRTOS.a",
      "${scm1612s_sdk_root}/kernel/FreeRTOS-ext/kernel-FreeRTOS-ext.a",
      "${scm1612s_sdk_root}/kernel/cmsis-freertos/kernel-cmsis-freertos.a",
      "${scm1612s_sdk_root}/kernel/freebsd/kernel-freebsd.a",
      "${scm1612s_sdk_root}/hal/arch/ndsv5/hal-arch-ndsv5.a",
      "${scm1612s_sdk_root}/hal/soc/scm2010/hal-soc-scm2010.a",
      "${scm1612s_sdk_root}/hal/board/scm2010-evb-qfn40/hal-board-scm2010-evb-qfn40.a",
      "${scm1612s_sdk_root}/hal/drivers/spi-flash/hal-drivers-spi-flash.a",
      "${scm1612s_sdk_root}/hal/drivers/wlan/hal-drivers-wlan.a",
      "${scm1612s_sdk_root}/hal/drivers/wlan/senscomm/prv/hal-drivers-wlan-senscomm-prv.a",
      "${scm1612s_sdk_root}/hal/drivers/rf/hal-drivers-rf.a",
      "${scm1612s_sdk_root}/hal/drivers/watchdog/hal-drivers-watchdog.a",
      "${scm1612s_sdk_root}/lib/cli/lib-cli.a",
      "${scm1612s_sdk_root}/lib/stdlib-ext/lib-stdlib-ext.a",
      "${scm1612s_sdk_root}/lib/proc/lib-proc.a",
      "${scm1612s_sdk_root}/lib/serial/lib-serial.a",
      "${scm1612s_sdk_root}/lib/net/lib-net.a",
      "${scm1612s_sdk_root}/lib/fs/lib-fs.a",
      "${scm1612s_sdk_root}/lib/lwip/lib-lwip.a",
      "${scm1612s_sdk_root}/lib/net80211/lib-net80211.a",
      "${scm1612s_sdk_root}/lib/ifconfig/lib-ifconfig.a",
      "${scm1612s_sdk_root}/lib/libifconfig/lib-libifconfig.a",
      "${scm1612s_sdk_root}/lib/cjson/lib-cjson.a",
      "${scm1612s_sdk_root}/lib/hostap/wpa_supplicant/lib-hostap-wpa_supplicant.a",
      "${scm1612s_sdk_root}/lib/mbedtls-2.28.10/library/lib-mbedtls-2.28.10-library.a",
      "${scm1612s_sdk_root}/lib/ble/nimble_port/lib-ble-nimble_port.a",
      "${scm1612s_sdk_root}/lib/ble/nimble_host/lib-ble-nimble_host.a",
      "${scm1612s_sdk_root}/lib/tinycrypt/lib-tinycrypt.a",
      "${scm1612s_sdk_root}/lib/scm_mcuboot/lib-scm_mcuboot.a",
      "${scm1612s_sdk_root}/lib/net/freebsd/mbuf/lib-net-freebsd-mbuf.a",
      "${scm1612s_sdk_root}/lib/net/freebsd/lib-net-freebsd.a",
      "${scm1612s_sdk_root}/hal/core/hal-core.a",
      "${scm1612s_sdk_root}/hal/proc/hal-proc.a",
      "${scm1612s_sdk_root}/hal/drivers/core/hal-drivers-core.a",
      "${scm1612s_sdk_root}/hal/fs/hal-fs.a",
      "${scm1612s_sdk_root}/hal/fs/patch/hal-fs-patch.a",
      "${scm1612s_sdk_root}/hal/drivers/serial/hal-drivers-serial.a",
      "${scm1612s_sdk_root}/hal/drivers/rtc/hal-drivers-rtc.a",
      "${scm1612s_sdk_root}/hal/drivers/clk/hal-drivers-clk.a",
      "${scm1612s_sdk_root}/hal/drivers/pinctrl/hal-drivers-pinctrl.a",
      "${scm1612s_sdk_root}/hal/drivers/ble/hal-drivers-ble.a",
      "${scm1612s_sdk_root}/hal/drivers/ble/priv/hal-drivers-ble-priv.a",
      "${scm1612s_sdk_root}/hal/drivers/crypto/hal-drivers-crypto.a",
      "${scm1612s_sdk_root}/hal/drivers/efuse/hal-drivers-efuse.a",
      "${scm1612s_sdk_root}/hal/drivers/systimer/hal-drivers-systimer.a",
      "${scm1612s_sdk_root}/hal/drivers/pta/hal-drivers-pta.a",
    ]
}

#source_set("syscalls_stub") {
#  sources = [ "syscalls_stubs.cpp" ]
#}

group("scm1612s_build") {
  public_configs = [ ":scm1612s_sdk_config" ]
  public_deps = [ scm1612s_target_project ]
#  deps = [ ":syscalls_stub" ]
}
