# Copyright (c) 2021 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/mbedtls.gni")
import("//build_overrides/scm1612s.gni")
import("${chip_root}/src/platform/device.gni")
import("scm1612s_board.gni")

# TODO: Don't hardcode config/toolchain
# TODO: Convert to GN action?
if (is_debug) {
  debug_str = "Debug"
} else {
  debug_str = "Release"
}

template("scm1612s_sdk_sources") {
  if (defined(invoker.scm1612s_project_dir)) {
    scm1612s_project_dir = invoker.scm1612s_project_dir
  }

#  if (defined(invoker.chip_enable_ota_requestor)) {
#    if (invoker.chip_enable_ota_requestor) {
#      chip_enable_ota_requestor = true
#    }
#  }

  # While most scm1612s sdk includes come from the scm1612s_sdk_config config (in
  # BUILD.gn), this template gets instantiated by each project each of which
  # provides a few extra includes/defines. Handle those here.
  config("project_configs") {
    include_dirs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }
    include_dirs += [ "${scm1612s_project_dir}/include" ]

    defines = []
    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
  }

  sdk_target_name = target_name

  # Add sources here
  source_set(sdk_target_name) {
    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }

    # Build wise-sdk in-place with specified menuconfig.
    exec_script("${scm1612s_sdk_build_root}/build-wise-sdk.py",
            [ rebase_path("${scm1612s_sdk_build_root}", root_build_dir),
              "scm1612s_matter_defconfig",
            ])

    public_deps = []
    if (defined(invoker.public_deps)) {
      public_deps += invoker.public_deps
    }

#    public_deps += [ "${chip_root}/src/lwip:lwip" ]

    public_configs = [ ":project_configs" ]
    if (defined(invoker.public_configs)) {
      public_configs += invoker.public_configs
    }
  }
}
