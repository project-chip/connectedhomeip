# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/efr32_sdk.gni")

declare_args() {
  # Location of the efr32 SDK.
  efr32_sdk_root = ""

  # EFR32 board used
  efr32_board = ""

  # EFR32 chip family
  efr32_family = ""

  # EFR32 MCU
  efr32_mcu = ""
}

if (efr32_board == "") {
  efr32_board = getenv("EFR32_BOARD")
}

assert(efr32_board != "", "The EFR32_BOARD env must be specified")

if (efr32_sdk_root == "") {
  efr32_sdk_root = getenv("EFR32_SDK_ROOT")
}

assert(efr32_sdk_root != "", "efr32_sdk_root must be specified")



# Differentiate between boards
# - BRD4304A / SLWSTK6000B / MGM12P Module / 2.4GHz@19dBm
# - BRD4161A / SLWSTK6000B / Wireless Starter Kit / 2.4GHz@19dBm
# - BRD4166A / SLTB004A    / Thunderboard Sense 2 / 2.4GHz@10dBm
# - BRD4170A / SLWSTK6000B / Multiband Wireless Starter Kit / 2.4GHz@19dBm, 915MHz@19dBm, 868MHz@19dBm
# - BRD4180A / SLWSTK6006A / MG21 Module / 2.4GHz@20dBm

if (efr32_board == "BRD4304A") {
  efr32_family = "efr32mg12"
  efr32_mcu = "EFR32MG12P432F1024GM48"
} else if (efr32_board == "BRD4161A") {
  efr32_family = "efr32mg12"
  efr32_mcu = "EFR32MG12P432F1024GL125"
} else if (efr32_board == "BRD4166A") {
  efr32_family = "efr32mg12"
  efr32_mcu = "EFR32MG12P332F1024GL125"
} else if (efr32_board == "BRD4170A") {
  efr32_family = "efr32mg12"
  efr32_mcu = "EFR32MG12P433F1024GM68"
} else if (efr32_board == "BRD4180A") {
  efr32_family = "efr32mg21"
  efr32_mcu = "EFR32MG21A020F1024IM32"
}else {
  print("Please provide a value for BOARD env variable e.g BOARD=BRD4161A (currently supported BRD4304A, BRD4161A, BRD4166A, BRD4170A or BRD4180A)")
  assert(false, "The board ${efr32_board} is unsupported as for now.")
}


# Defines an efr32 SDK build target.
#
# Parameters:
#   efr32_sdk_root - The location of the erf32 SDK.
#   sources - The sources files to build.
template("efr32_sdk") {
  if (defined(invoker.efr32_sdk_root)) {
    efr32_sdk_root = invoker.efr32_sdk_root
  }

  assert(efr32_sdk_root != "", "efr32_sdk_root must be specified")

  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    libs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }
    include_dirs += [
        "${efr32_sdk_root}",
        "${efr32_sdk_root}/util/third_party/freertos/Source/include",
        "${efr32_sdk_root}/platform/radio/rail_lib/hal",
        "${efr32_sdk_root}/platform/radio/rail_lib/hal/efr32",
        "${efr32_sdk_root}/hardware/kit/common/bsp",
        "${efr32_sdk_root}/hardware/kit/common/drivers",
        "${efr32_sdk_root}/platform/base/",
        "${efr32_sdk_root}/platform/base/hal",
        "${efr32_sdk_root}/platform/base/hal/micro/cortexm3/compiler",
        "${efr32_sdk_root}/platform/base/hal/micro/cortexm3/efm32",
        "${efr32_sdk_root}/platform/base/hal/micro/cortexm3/efm32/config",
        "${efr32_sdk_root}/platform/base/hal/plugin",
        "${efr32_sdk_root}/platform/CMSIS/Include",
        "${efr32_sdk_root}/platform/emdrv/common/inc",
        "${efr32_sdk_root}/platform/emdrv/gpiointerrupt/inc",
        "${efr32_sdk_root}/platform/emdrv/uartdrv/inc",
        "${efr32_sdk_root}/platform/emdrv/uartdrv/config",
        "${efr32_sdk_root}/platform/emdrv/ustimer/inc",
        "${efr32_sdk_root}/platform/emdrv/dmadrv/config",
        "${efr32_sdk_root}/platform/emdrv/dmadrv/inc",
        "${efr32_sdk_root}/platform/emdrv/nvm3/inc",
        "${efr32_sdk_root}/platform/emdrv/rtcdrv/inc",
        "${efr32_sdk_root}/platform/emdrv/sleep/inc",
        "${efr32_sdk_root}/platform/emlib/inc",
        "${efr32_sdk_root}/platform/halconfig/inc/hal-config",
        "${efr32_sdk_root}/platform/radio/rail_lib/common",
        "${efr32_sdk_root}/platform/radio/rail_lib/chip/efr32",
        "${efr32_sdk_root}/platform/radio/rail_lib/protocol/ieee802154",
        "${efr32_sdk_root}/platform/radio/rail_lib/chip/efr32/rf/common/cortex",
        "${efr32_sdk_root}/platform/radio/rail_lib/plugin/pa-conversions",
        "${efr32_sdk_root}/util/third_party/segger/systemview/SEGGER",
        "${efr32_sdk_root}/util/third_party/segger/systemview/Config/",
        "${efr32_sdk_root}/util/plugin/plugin-common/fem-control",
        "${efr32_sdk_root}/protocol/bluetooth/ble_stack/inc/soc",
        "${efr32_sdk_root}/protocol/bluetooth/ble_stack/inc/common",
        "${efr32_sdk_root}/app/bluetooth/common/util",
        "${efr32_sdk_root}/util/third_party/freertos/Source/include/",
    ]

    if (efr32_family == "efr32mg12") {
      include_dirs += [
        "${efr32_sdk_root}/hardware/kit/EFR32MG12_${efr32_board}/config",
        "${efr32_sdk_root}/platform/Device/SiliconLabs/EFR32MG12P/Include",
        "${efr32_sdk_root}/platform/radio/rail_lib/chip/efr32/efr32xg1x",
        "${efr32_sdk_root}/util/third_party/freertos/Source/portable/GCC/ARM_CM3",
      ]

      libs += [
        "${efr32_sdk_root}/protocol/bluetooth/lib/EFR32MG12P/GCC/libbluetooth.a",
        "${efr32_sdk_root}/platform/radio/rail_lib/autogen/librail_release/librail_multiprotocol_efr32xg12_gcc_release.a",
        "${efr32_sdk_root}/platform/emdrv/nvm3/lib/libnvm3_CM4_gcc.a",
        "${efr32_sdk_root}/protocol/bluetooth/lib/EFR32MG12P/GCC/libmbedtls.a"
      ]
    } else if (efr32_family == "efr32mg21") {
      include_dirs += [
        "${efr32_sdk_root}/hardware/kit/EFR32MG12_${efr32_board}/config",
        "${efr32_sdk_root}/platform/Device/SiliconLabs/EFR32MG21/Include",
        "${efr32_sdk_root}/platform/radio/rail_lib/chip/efr32/efr32xg2x",
        "${efr32_sdk_root}/util/third_party/freertos/Source/portable/GCC/ARM_CM4F",
      ]

      libs += [
        "${efr32_sdk_root}/protocol/bluetooth/lib/EFR32MG21/GCC/libbluetooth.a",
        "${efr32_sdk_root}/platform/radio/rail_lib/autogen/librail_release/librail_multiprotocol_efr32xg12_gcc_release.a",
        "${efr32_sdk_root}/platform/emdrv/nvm3/lib/libnvm3_CM4_gcc.a",
        "${efr32_sdk_root}/protocol/bluetooth/lib/EFR32MG21/GCC/libmbedtls.a"
      ]
    }

    defines = [
        "HARD_FAULT_LOG_ENABLE",
        "RETARGET_VCOM",
        "RETARGET_USART0",
        "PLATFORM_HEADER='<hal/micro/cortexm3/compiler/gcc.h>'",
        "CORTEXM3_EFM32_MICRO",
        "CHIP_ERROR_LOGGING=1",
        "CHIP_PROGRESS_LOGGING=1",
        "CHIP_DETAIL_LOGGING=1",
        "EFR32_LOG_ENABLED=1",
        "NVM3_DEFAULT_NVM_SIZE=40960",
        "${efr32_mcu}"
    ]
    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
  }

  static_library(sdk_target_name) {
    sources = [
          "${efr32_sdk_root}/util/third_party/segger/systemview/SEGGER/SEGGER_RTT.c",
          "${efr32_sdk_root}/util/third_party/freertos/Source/croutine.c",
          "${efr32_sdk_root}/util/third_party/freertos/Source/event_groups.c",
          "${efr32_sdk_root}/util/third_party/freertos/Source/list.c",
          "${efr32_sdk_root}/util/third_party/freertos/Source/queue.c",
          "${efr32_sdk_root}/util/third_party/freertos/Source/tasks.c",
          "${efr32_sdk_root}/util/third_party/freertos/Source/timers.c",
          "${efr32_sdk_root}/util/third_party/freertos/Source/portable/MemMang/heap_3.c",
    ]

    if (efr32_family == "efr32mg12") {
      sources += [
        "${efr32_sdk_root}/platform/Device/SiliconLabs/EFR32MG12P/Source/system_efr32mg12p.c",
        "${efr32_sdk_root}/platform/Device/SiliconLabs/EFR32MG12P/Source/GCC/startup_efr32mg12p.c",
        "${efr32_sdk_root}/util/third_party/freertos/Source/portable/GCC/ARM_CM4F/port.c",
      ]
    } else if (efr32_family == "efr32mg21") {
      sources += [
        "${efr32_sdk_root}/platform/Device/SiliconLabs/EFR32MG21/Source/system_efr32mg21.c",
        "${efr32_sdk_root}/platform/Device/SiliconLabs/EFR32MG21/Source/GCC/startup_efr32mg21.c",
        "${efr32_sdk_root}/util/third_party/freertos/Source/portable/GCC/ARM_CM3/port.c",
      ]
    }

    if (defined(invoker.sources)) {
      sources += invoker.sources
    }

    public_configs = [ ":${sdk_target_name}_config" ]
  }
}
