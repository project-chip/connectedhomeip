# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/efr32_sdk.gni")
import("//build_overrides/jlink.gni")
import("//build_overrides/mbedtls.gni")
import("${efr32_sdk_build_root}/efr32_sdk.gni")

import("${chip_root}/src/app/icd/icd.gni")
import("${chip_root}/src/lib/lib.gni")
import("silabs_board.gni")

declare_args() {
  wifi_sdk_root = "${chip_root}/third_party/silabs/wifi_sdk"
  examples_plat_dir = "${chip_root}/examples/platform/silabs/SiWx917"

  if (silabs_board == "BRD4338A") {
    sdk_support_board = "BRD4338A"
  } else {
    sdk_support_board = "BRD4325x"
  }
}

# Defines an siwx917 SDK build target.
#
# Parameters:
#   wifi_sdk_root - The location of the wifi SDK.
#   sources - The sources files to build.
template("siwx917_sdk") {
  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    libs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    # Treat these includes as system includes, so warnings in them are not fatal.
    _include_dirs = [
      "${chip_root}",
      "${chip_root}/examples/platform/silabs/SiWx917/SiWx917",
      "${sdk_support_root}/matter/si91x/siwx917/${sdk_support_board}/support/hal",
      "${efr32_sdk_root}/platform/emdrv/nvm3/inc",
      "${efr32_sdk_root}/platform/emdrv/common/inc",
      "${efr32_sdk_root}/platform/service/device_init/inc",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/inc",
      "${sdk_support_root}/matter/si91x/siwx917/${sdk_support_board}/autogen",
      "${sdk_support_root}/matter/si91x/siwx917/${sdk_support_board}/config",
      "${chip_root}/third_party/mbedtls/repo/include",
      "${chip_root}/third_party/mbedtls/repo/library",

      "${chip_root}/src/platform/silabs/rs911x",

      # ble component
      "${wifi_sdk_root}/components/si91x/ble/inc",

      # si91x component
      "${wifi_sdk_root}/components/si91x/inc",
      "${wifi_sdk_root}/components/si91x/memory",
      "${wifi_sdk_root}/components/si91x/sl_net/inc",

      # siwx917_soc component
      "${wifi_sdk_root}/components/siwx917_soc/boards/config/${silabs_board_lower}",
      "${wifi_sdk_root}/components/siwx917_soc/boards/inc",
      "${wifi_sdk_root}/components/siwx917_soc/core/chip/inc",
      "${wifi_sdk_root}/components/siwx917_soc/core/config",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/cmsis_driver",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/cmsis_driver/config",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/cmsis_driver/CMSIS/Driver/Include",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/service/nvm3/inc",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/systemlevel/inc",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/peripheral_drivers/inc",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/rom_driver/inc",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/unified_api/inc",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/unified_api/config",
      "${wifi_sdk_root}/components/siwx917_soc/hal/inc",
      "${wifi_sdk_root}/components/siwx917_soc/platform_connectivity/inc",
      "${wifi_sdk_root}/components/siwx917_soc/platform_connectivity/wifi_inc",

      # wifi component
      "${wifi_sdk_root}/components/protocol/wifi/inc",

      # si91x_support component
      "${wifi_sdk_root}/components/si91x_support/inc",

      # wifi_resources component
      "${wifi_sdk_root}/resources/certificates",
      "${wifi_sdk_root}/resources/defaults",
      "${wifi_sdk_root}/resources/other",

      # network_manager component
      "${wifi_sdk_root}/components/service/network_manager/inc",

      # nvm3
      "${wifi_sdk_root}/components/siwx917_soc/drivers/middleware/nvm3/inc",
      "${efr32_sdk_root}/platform/common/inc",
      "${efr32_sdk_root}/platform/emlib/inc",
      "${efr32_sdk_root}/platform/service/system/inc",
      "${efr32_sdk_root}/platform/CMSIS/RTOS2/Include",
      "${efr32_sdk_root}/platform/CMSIS/Core/Include",
      "${efr32_sdk_root}/util/third_party/freertos/cmsis/Include",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/include",
      "${wifi_sdk_root}/components/protocol/wifi/si91x",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/portable/GCC/ARM_CM4F",
      "${sdk_support_root}/matter/si91x/siwx917/${sdk_support_board}/support/inc",
    ]

    # Note that we're setting the mbedTLS and PSA configuration files through a
    # define. This means the build system by default does not pick up changes in
    # the content of these, only when changing the filename itself.
    # To fix this, these files are also manually depended upon in the source set
    # declared in siwx917_mbedtls_config further down this file.
    defines = [
      "MBEDTLS_CONFIG_FILE=\"siwx917-chip-mbedtls-config.h\"",
      "__STARTUP_CLEAR_BSS",
      "HARD_FAULT_LOG_ENABLE",
      "SILABS_LOG_ENABLED=${silabs_log_enabled}",
      "SL_HEAP_SIZE=32768",
      "SL_WIFI=1",
      "CCP_SI917_BRINGUP",
      "SL_COMPONENT_CATALOG_PRESENT",
      "RS911X_WIFI",
      "RSI_WLAN_ENABLE",
      "RSI_WITH_OS",
      "RSI_M4_INTERFACE",  #Enable CCP bus Interface
      "RSI_WLAN_API_ENABLE",
      "LITTLE_ENDIAN_ORDER",
      "_CHIP_9118",
      "NVM3_DEFAULT_NVM_SIZE=40960",
      "NVM3_DEFAULT_MAX_OBJECT_SIZE=4092",
      "KVS_MAX_ENTRIES=${kvs_max_entries}",
      "${silabs_mcu}=1",
      "${silabs_board}=1",
      "SL_BOARD_NAME=${silabs_board}",
      "__HEAP_SIZE=0",
      "PLATFORM_HEADER=\"platform-header.h\"",
      "USE_NVM3=1",
      "RSI_ARM_CM4F",
      "SIWX_917",
      "CHIP_9117",
      "BLE_ENABLE=1",
      "RSI_LITTLE_ENDIAN=1",
      "TINYCRYPT_PRIMITIVES",
      "OPTIMIZE_TINYCRYPT_ASM",
      "__error_t_defined",
      "RSI_SAMPLE_HAL",
      "ENABLE_IPMU_APIS",
      "ROM_BYPASS",
      "DEBUG_UART",
      "FLASH_BASED_EXECUTION_ENABLE",
      "TA_DEEP_SLEEP_COMMON_FLASH",
      "SL_WIFI_COMPONENT_INCLUDED",
      "CHIP_917=1",
      "ROMDRIVER_PRESENT",
      "SL_CATALOG_FREERTOS_KERNEL_PRESENT=1",
      "SL_PLATFORM_EXAMPLES_ENABLE",
      "SI91X_DEVICE",
      "SI917_RADIO_BOARD",
      "FLASH_PAGE_SIZE",
      "SL_NVM3_PRESENT",
      "ROM_WIRELESS",
      "BRD4325A",  #TODO: should be removed after SoC macro clean-up
    ]

    if (silabs_board == "BRD4325B") {
      defines += [ "DUAL_FLASH_EN" ]
    }
    if (wifi_soc_common_flash) {
      defines += [
        "CHIP_917B0 = 1",
        "COMMON_FLASH_EN=1",
        "EXECUTION_FROM_RAM",
      ]
      if (silabs_board == "BRD4338A") {
        defines += [ "SI917_RADIO_BOARD_V2=1" ]
      }
    }

    if (chip_build_libshell) {
      defines += [ "ENABLE_CHIP_SHELL" ]
    }

    import("${chip_root}/src/platform/silabs/wifi_args.gni")
    defines += [ "LWIP_NETIF_API=1" ]
    if (lwip_ipv4) {
      defines += [
        "LWIP_IPV4=1",

        # adds following options to provide
        # them to .cpp source files
        # flags ported from lwipopts file
        # TODO: move lwipopts to one location
        "LWIP_ARP=1",
        "LWIP_ICMP=1",
        "LWIP_IGMP=1",
        "LWIP_DHCP=1",
      ]
    } else {
      defines += [ "LWIP_IPV4=0" ]
    }
    if (lwip_ipv6) {
      defines += [ "LWIP_IPV6=1" ]
    } else {
      defines += [ "LWIP_IPV6=0" ]
    }

    defines += board_defines

    if (chip_enable_wifi_ipv4) {
      defines += [ "CHIP_DEVICE_CONFIG_ENABLE_IPV4=1" ]
    }
    if (invoker.enable_dic) {
      _include_dirs += [ "${chip_root}/third_party/silabs/mqtt/stack" ]
    }

    # Enabling led interface
    if (use_wstk_leds) {
      defines += [ "ENABLE_WSTK_LEDS" ]
    }

    if (chip_enable_icd_server) {
      defines += [
        "SL_CATALOG_POWER_MANAGER_PRESENT",
        "SL_CATALOG_SLEEPTIMER_PRESENT",
      ]
    }

    if (chip_build_libshell) {  # matter shell
      defines += [ "ENABLE_CHIP_SHELL" ]
    }

    if (enable_dic) {
      defines += [ "DIC_ENABLE=1" ]
    }

    if (aws_sdk_ota) {
      defines += [ "ENABLE_AWS_OTA_FEAT=1" ]
    }

    libs += [ "${sdk_support_root}/platform/emdrv/nvm3/lib/libnvm3_CM4_gcc.a" ]

    cflags = []
    foreach(include_dir, _include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }

    cflags += [
      "-Wno-maybe-uninitialized",
      "-Wno-shadow",
      "-Wno-empty-body",
      "-Wno-cpp",
      "-Wno-missing-braces",
      "-Wno-sign-compare",
      "-Wno-error",
      "-Wno-unknown-warning-option",
      "-Wno-unused-variable",
      "-Wno-unused-function",
    ]

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
  }

  source_set("siwx917_mbedtls_config") {
    # We're setting the mbedTLS config flags here as the siwx917_sdk target
    # acts as the mbedTLS target for SiWx917 builds. We need this for the build
    # system to recompile mbedTLS (= the SDK) when the mbedTLS config gets
    # edited.
    sources = [
      "${chip_root}/src/platform/silabs/SiWx917/siwx917-chip-mbedtls-config.h",
    ]

    public_deps = [ "${chip_root}/src/crypto:crypto_buildconfig" ]
  }

  source_set(sdk_target_name) {
    sources = [
      # si91x component
      "${efr32_sdk_root}/platform/CMSIS/RTOS2/Source/os_systick.c",
      "${efr32_sdk_root}/platform/common/src/sl_assert.c",
      "${efr32_sdk_root}/platform/common/src/sl_slist.c",
      "${efr32_sdk_root}/util/third_party/freertos/cmsis/Source/cmsis_os2.c",
      "${wifi_sdk_root}/components/protocol/wifi/si91x/sl_wifi.c",

      # wifi component
      "${wifi_sdk_root}/components/protocol/wifi/src/sl_wifi_callback_framework.c",
      "${wifi_sdk_root}/components/service/network_manager/src/sl_net.c",

      # network_manager component
      "${wifi_sdk_root}/components/service/network_manager/src/sl_net_basic_certificate_store.c",

      # basic_network_manager component
      "${wifi_sdk_root}/components/service/network_manager/src/sl_net_basic_credentials.c",
      "${wifi_sdk_root}/components/service/network_manager/src/sl_net_basic_profiles.c",

      # ble component
      "${wifi_sdk_root}/components/si91x/ble/src/rsi_ble_gap_apis.c",
      "${wifi_sdk_root}/components/si91x/ble/src/rsi_ble_gatt_apis.c",
      "${wifi_sdk_root}/components/si91x/ble/src/rsi_bt_ble.c",
      "${wifi_sdk_root}/components/si91x/ble/src/rsi_bt_common_apis.c",
      "${wifi_sdk_root}/components/si91x/ble/src/rsi_common_apis.c",
      "${wifi_sdk_root}/components/si91x/ble/src/rsi_utils.c",
      "${wifi_sdk_root}/components/si91x/ble/src/sl_si91x_ble.c",

      # si91x_basic_buffers component
      "${wifi_sdk_root}/components/si91x/memory/malloc_buffers.c",
      "${wifi_sdk_root}/components/si91x/platforms/siwx917_soc/siwx917_soc_ncp_host.c",
      "${wifi_sdk_root}/components/si91x/sl_net/src/sl_net_rsi_utility.c",
      "${wifi_sdk_root}/components/si91x/sl_net/src/sl_net_si91x.c",
      "${wifi_sdk_root}/components/si91x/sl_net/src/sl_net_si91x_integration_handler.c",
      "${wifi_sdk_root}/components/si91x/src/sl_rsi_utility.c",
      "${wifi_sdk_root}/components/si91x/src/sl_si91x_callback_framework.c",
      "${wifi_sdk_root}/components/si91x/src/sl_si91x_driver.c",
      "${wifi_sdk_root}/components/si91x/threading/sli_si91x_multithreaded.c",

      # si91x_support component
      "${wifi_sdk_root}/components/si91x_support/src/sl_utility.c",
      "${wifi_sdk_root}/components/siwx917_soc/boards/src/rsi_board.c",
      "${wifi_sdk_root}/components/siwx917_soc/core/chip/src/rsi_deepsleep_soc.c",
      "${wifi_sdk_root}/components/siwx917_soc/core/chip/src/rsi_system_config.c",
      "${wifi_sdk_root}/components/siwx917_soc/core/chip/src/system_si91x.c",
      "${wifi_sdk_root}/components/siwx917_soc/core/config/src/rsi_nvic_priorities_config.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/cmsis_driver/UDMA.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/cmsis_driver/USART.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/peripheral_drivers/src/clock_update.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/peripheral_drivers/src/rsi_egpio.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/peripheral_drivers/src/rsi_udma.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/peripheral_drivers/src/rsi_udma_wrapper.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/peripheral_drivers/src/rsi_usart.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/systemlevel/src/rsi_ipmu.c",

      # siwx917_soc component
      "${wifi_sdk_root}/components/siwx917_soc/drivers/systemlevel/src/rsi_pll.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/systemlevel/src/rsi_power_save.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/systemlevel/src/rsi_temp_sensor.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/systemlevel/src/rsi_ulpss_clk.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/unified_api/src/sl_si91x_usart.c",
      "${wifi_sdk_root}/components/siwx917_soc/platform_connectivity/rsi_hal_mcu_m4_ram.c",
      "${wifi_sdk_root}/components/siwx917_soc/platform_connectivity/rsi_hal_mcu_m4_rom.c",
      "${wifi_sdk_root}/components/siwx917_soc/platform_connectivity/sl_platform.c",
      "${wifi_sdk_root}/components/siwx917_soc/platform_connectivity/sl_platform_wireless.c",
      "${wifi_sdk_root}/components/siwx917_soc/platform_connectivity/sl_si91x_bus.c",
      "${wifi_sdk_root}/components/siwx917_soc/platform_connectivity/sl_si91x_timer.c",
      "${wifi_sdk_root}/components/siwx917_soc/platform_connectivity/sli_siwx917_soc.c",

      # modified hal
      "${efr32_sdk_root}/platform/emdrv/nvm3/src/nvm3_default_common_linker.c",
      "${efr32_sdk_root}/platform/emdrv/nvm3/src/nvm3_lock.c",
      "${efr32_sdk_root}/platform/emlib/src/em_core.c",
      "${efr32_sdk_root}/platform/service/device_init/src/sl_device_init_nvic.c",
      "${efr32_sdk_root}/platform/service/system/src/sl_system_init.c",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/croutine.c",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/event_groups.c",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/list.c",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/portable/GCC/ARM_CM4F/port.c",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/queue.c",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/stream_buffer.c",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/tasks.c",
      "${efr32_sdk_root}/util/third_party/freertos/kernel/timers.c",
      "${sdk_support_root}/matter/si91x/siwx917/${sdk_support_board}/autogen/sl_event_handler.c",
      "${sdk_support_root}/matter/si91x/siwx917/${sdk_support_board}/support/hal/rsi_hal_mcu_m4.c",
      "${sdk_support_root}/matter/si91x/siwx917/${sdk_support_board}/support/hal/rsi_hal_mcu_platform_init.c",
      "${wifi_sdk_root}/components/siwx917_soc/drivers/service/nvm3/src/sl_si91x_nvm3_hal_flash.c",

      # mbedtls
      "${chip_root}/third_party/mbedtls/repo/library/aes.c",
      "${chip_root}/third_party/mbedtls/repo/library/asn1parse.c",
      "${chip_root}/third_party/mbedtls/repo/library/asn1write.c",
      "${chip_root}/third_party/mbedtls/repo/library/bignum.c",
      "${chip_root}/third_party/mbedtls/repo/library/ccm.c",
      "${chip_root}/third_party/mbedtls/repo/library/cipher.c",
      "${chip_root}/third_party/mbedtls/repo/library/cipher_wrap.c",
      "${chip_root}/third_party/mbedtls/repo/library/constant_time.c",
      "${chip_root}/third_party/mbedtls/repo/library/ctr_drbg.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecdh.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecdsa.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecp.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecp_curves.c",
      "${chip_root}/third_party/mbedtls/repo/library/entropy.c",
      "${chip_root}/third_party/mbedtls/repo/library/hkdf.c",
      "${chip_root}/third_party/mbedtls/repo/library/hmac_drbg.c",
      "${chip_root}/third_party/mbedtls/repo/library/md.c",
      "${chip_root}/third_party/mbedtls/repo/library/pkcs5.c",
      "${chip_root}/third_party/mbedtls/repo/library/platform.c",
      "${chip_root}/third_party/mbedtls/repo/library/sha256.c",
      "${chip_root}/third_party/mbedtls/repo/library/sha512.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509_create.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/ecc.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/ecc_dh.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/ecc_dsa.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/error.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/oid.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/pk.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/pk_wrap.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/pkparse.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/pkwrite.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/platform_util.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/x509_crt.c",
      "${sdk_support_root}/matter/mbedtls/tinycrypt/src/x509write_csr.c",
    ]

    # nvm3 ans startup
    if (silabs_board == "BRD4325B") {
      sources += [
        "${sdk_support_root}/matter/si91x/siwx917/${sdk_support_board}/support/src/startup_RS1xxxx.c",
        "${wifi_sdk_root}/components/siwx917_soc/drivers/service/nvm3/src/sl_si91x_dual_flash_intf.c",
      ]
    }

    if (wifi_soc_common_flash) {
      sources += [
        "${sdk_support_root}/matter/si91x/siwx917/${sdk_support_board}/support/src/startup_common_RS1xxxx.c",
        "${wifi_sdk_root}/components/siwx917_soc/drivers/service/nvm3/src/sl_si91x_common_flash_intf.c",
      ]
    }

    public_deps = [
      ":siwx917_mbedtls_config",
      "${segger_rtt_root}:segger_rtt",
      "${segger_rtt_root}:segger_rtt_printf",
      "${segger_rtt_root}:segger_rtt_syscalls",
    ]

    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    if (invoker.enable_dic) {
      sources += [
        "${chip_root}/third_party/mbedtls/repo/library/base64.c",
        "${chip_root}/third_party/mbedtls/repo/library/debug.c",
        "${chip_root}/third_party/mbedtls/repo/library/ecjpake.c",
        "${chip_root}/third_party/mbedtls/repo/library/pem.c",
        "${chip_root}/third_party/mbedtls/repo/library/rsa.c",
        "${chip_root}/third_party/mbedtls/repo/library/rsa_internal.c",
        "${chip_root}/third_party/mbedtls/repo/library/sha1.c",
        "${chip_root}/third_party/mbedtls/repo/library/ssl_ciphersuites.c",
        "${chip_root}/third_party/mbedtls/repo/library/ssl_cli.c",
        "${chip_root}/third_party/mbedtls/repo/library/ssl_msg.c",
        "${chip_root}/third_party/mbedtls/repo/library/ssl_srv.c",
        "${chip_root}/third_party/mbedtls/repo/library/ssl_tls.c",
        "${chip_root}/third_party/mbedtls/repo/library/x509.c",
        "${chip_root}/third_party/silabs/mqtt/stack/mqtt.c",
      ]
    }

    public_configs = [ ":${sdk_target_name}_config" ]
  }
}
