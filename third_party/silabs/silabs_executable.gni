# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("${build_root}/toolchain/flashable_executable.gni")
import("silabs_board.gni")

template("generate_rps_file") {
  forward_variables_from(invoker,
                         [
                           "conversion_input",
                           "conversion_output",
                           "deps",
                         ])
  action(target_name) {
    # Check if variables exist
    commander_path = getenv("COMMANDER_PATH")
    if (commander_path == "") {
      commander_path = "commander"
    }

    inputs = [ conversion_input ]
    outputs = [ conversion_output ]

    args = [
      commander_path,
      "rps",
      "create",
      rebase_path(conversion_output, root_build_dir),
      "--app",
      rebase_path(conversion_input, root_build_dir),
    ]
    script = "${build_root}/gn_run_binary.py"
  }
}

template("silabs_executable") {
  # output_dir is optional and will default to root_out_dir
  if (!defined(invoker.output_dir)) {
    invoker.output_dir = root_out_dir
  }

  # output_name is optional and will default to "$target_name.bin"
  if (!defined(invoker.output_name)) {
    invoker.output_name = target_name + ".bin"
  }

  output_base_name = get_path_info(invoker.output_name, "name")
  objcopy_image_name = output_base_name + ".s37"
  objcopy_image_format = "srec"
  objcopy = "arm-none-eabi-objcopy"

  if (use_rps_extension) {
    flashing_image_name = output_base_name + ".rps"
  }

  # flashable_executable calls a generator script to do the following:
  # Create a flash.py script with the name of the binary hardcoded in it.
  # Copy flashing dependencies to the output directory so that the output
  # is collectively self-contained; this allows flashing to work reliably
  # even if the build and flashing steps take place on different machines
  # or in different containers.
  # Create *.flashbundle.txt with a list of all files needed for flashing

  flashing_script_generator =
      "${chip_root}/scripts/flashing/gen_flashing_script.py"
  flashing_script_name = output_base_name + ".flash.py"
  _flashbundle_file = "${invoker.output_dir}/${target_name}.flashbundle.txt"
  _platform_firmware_utils =
      "${chip_root}/scripts/flashing/silabs_firmware_utils.py"
  _firmware_utils = "${chip_root}/scripts/flashing/firmware_utils.py"
  flashing_options = [
    # Use module "{platform}_firmware_utils.py"
    "silabs",

    # flashbundle.txt file to create.
    "--flashbundle-file",
    rebase_path(_flashbundle_file, root_build_dir),

    # Platform-specific firmware module to copy.
    "--platform-firmware-utils",
    rebase_path(_platform_firmware_utils, root_build_dir),

    # General firmware module to copy.
    "--firmware-utils",
    rebase_path(_firmware_utils, root_build_dir),
  ]
  flashing_script_inputs = [
    _platform_firmware_utils,
    _firmware_utils,
  ]
  flashbundle_name = ""  # Stop flashable_executable from making flashbundle.

  # Target to generate the s37 file, flashing script, and flashbundle.
  flash_target_name = target_name + ".flash_executable"
  flashable_executable(flash_target_name) {
    forward_variables_from(invoker, "*")
  }

  # Target to generate the hex file.
  executable_target = "$flash_target_name.executable"
  hex_image_name = output_base_name + ".hex"
  hex_target_name = target_name + ".hex"
  objcopy_convert(hex_target_name) {
    conversion_input = "${invoker.output_dir}/${invoker.output_name}"
    conversion_output = "${invoker.output_dir}/${hex_image_name}"
    conversion_target_format = "ihex"
    deps = [ ":$executable_target" ]
  }

  # Target to generate the rps file.
  if (use_rps_extension) {
    rps_target_name = target_name + ".rps"
    generate_rps_file(rps_target_name) {
      conversion_input = "${invoker.output_dir}/${objcopy_image_name}"
      conversion_output = "${invoker.output_dir}/${flashing_image_name}"
      deps = [
        ":$executable_target",
        ":$flash_target_name.image",
      ]
    }
  }

  # Main target that deps the targets defined above.
  group(target_name) {
    deps = [
      ":$flash_target_name",
      ":$hex_target_name",
    ]

    if (use_rps_extension) {
      deps += [ ":$rps_target_name" ]
    }
  }
}
