# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/efr32_sdk.gni")
import("${efr32_sdk_build_root}/efr32_sdk.gni")
import("${efr32_sdk_build_root}/ot-efr32-libs.gni")
import("//build_overrides/jlink.gni")

declare_args() {
  # Build target to use for efr32 SDK. Use this to set global SDK defines.
  efr32_sdk_target = ""
}

assert(efr32_sdk_target != "", "efr32_sdk_target must be specified")

group("efr32_sdk") {
  public_deps = [ efr32_sdk_target ]
}

if (use_thread_cert_lib)
{
  config("libopenthread-platform_config") {
    include_dirs = [ "${sl_openthread_root}/examples/platforms" ]
  }

  copy("copy_openthread_system") {
    sources = [ "${sl_openthread_root}/examples/platforms/openthread-system.h" ]

    outputs =
        [ "${root_gen_dir}/include/openthread/platform/{{source_file_part}}" ]
  }

  source_set("openthread_system") {
    sources =
        [ "${root_gen_dir}/include/openthread/platform/openthread-system.h" ]
    deps = [ ":copy_openthread_system" ]
  }

  source_set("libopenthread-platform") {
    sources = [ "${sl_openthread_root}/examples/platforms/openthread-system.h" ]

    public_deps = [ ":openthread_system" ]

    public_configs = [ ":libopenthread-platform_config" ]
  }

  config("openthread_efr32_config") {
    defines = [
      "RADIO_CONFIG_DMP_SUPPORT=1",
      "${efr32_board}=1",
      "${efr32_mcu}",
      "USE_SL_THREAD_CERT_LIB",
      "OPENTHREAD_CORE_CONFIG_PLATFORM_CHECK_FILE=\"openthread-core-efr32-config-check.h\"",
    ]

    include_dirs = [
      "${chip_root}/examples/platform/efr32",
      "${sdk_support_root}/matter/efr32/${efr32_family}/${efr32_board}",
      "${sl_ot_efr32_root}/src/",
      "${sl_ot_efr32_root}/src/cli",
      "${sl_ot_efr32_root}/src/src",
    ]

  }

  source_set("openthread_core_config_efr32") {
    sources = [
      "${sl_ot_efr32_root}/src/src/openthread-core-efr32-config-check.h",
      "${sl_ot_efr32_root}/src/src/openthread-core-efr32-config.h",
      "${sl_openthread_root}/src/cli/cli_config.h",
    ]

    public_deps = [ "${efr32_sdk_build_root}:efr32_sdk", ":libopenthread-platform", ]

    public_configs = [ ":openthread_efr32_config" ]
  }


  source_set("ot-efr32-cert")
  {
    include_dirs = [
      #"${sl_openthread_root}/src",
      #"${sl_openthread_root}/src/cli",
      #"${sl_openthread_root}/src/core",
      #"${sl_openthread_root}/src/core/border_router",
      #"${sl_openthread_root}/src/core/coap",
      #"${sl_openthread_root}/src/core/common",
      #"${sl_openthread_root}/src/core/config",
      #"${sl_openthread_root}/src/core/crypto",
      #"${sl_openthread_root}/src/core/diags",
      #"${sl_openthread_root}/src/core/mac",
      #"${sl_openthread_root}/src/core/meshcop",
      #"${sl_openthread_root}/src/core/net",
      #"${sl_openthread_root}/src/core/radio",
      #"${sl_openthread_root}/src/core/thread",
      #"${sl_openthread_root}/include/openthread",
      #"${sl_openthread_root}/include/openthread/platform",
      #"${sl_openthread_root}/examples/platforms",
    ]

    sources = [
      #"${sl_openthread_root}/src/core/openthread-core-config.h",
      #"${sl_openthread_root}/src/core/config/announce_sender.h",
      #"${sl_openthread_root}/src/core/config/backbone_router.h",
      #"${sl_openthread_root}/src/core/config/border_router.h"
      #"${sl_openthread_root}/examples/platforms/openthread-system.h",
      #"${sl_openthread_root}/examples/platforms/utils/code_utils.h",
      #"${sl_openthread_root}/examples/platforms/utils/encoding.h",
      #"${sl_openthread_root}/examples/platforms/utils/logging_rtt.h",
      #"${sl_openthread_root}/examples/platforms/utils/mac_frame.h",
      #"${sl_openthread_root}/examples/platforms/utils/settings.h",
      #"${sl_openthread_root}/examples/platforms/utils/soft_source_match_table.h",
      #"${sl_openthread_root}/examples/platforms/utils/uart.h",
      #"${sl_openthread_root}/examples/apps/cli/cli_uart.cpp",
      #"${sl_openthread_root}/src/cli/cli_config.h",
      #"${sl_openthread_root}/src/cli/cli.cpp",
      #"${sl_openthread_root}/src/cli/cli.hpp",
    ]

    public_configs = [ 
      ":openthread_efr32_config",
      ":libopenthread-platform_config",
    ]

    public_deps = [
      ":openthread_core_config_efr32",
      ":libopenthread-platform", 
      "${sl_openthread_root}/src/core/:libopenthread_core_headers",
      "${segger_rtt_root}:segger_rtt",
    ]

    deps = [ 
      "${efr32_sdk_build_root}:efr32_sdk",
    ]

    # selected thread device type FTD or MTD
    XTD = "ftd"

    libs = [
      "${sl_ot_efr32_root}/libs/libsl_ot_stack_${XTD}_${efr32_family}_gcc.a",
      "${sl_ot_efr32_root}/libs/libsl_platform_${XTD}_${efr32_family}_gcc.a",
    ]
  }
}