/*
** ###################################################################
**     Processor:           88MW320_A0_NAPC
**     Compilers:           GNU C Compiler
**                          IAR ANSI C/C++ Compiler for ARM
**                          Keil ARM C/C++ Compiler
**                          MCUXpresso Compiler
**
**     Reference manual:    88MW320-88MW322, Rev.3, July 2020
**     Version:             rev. 1.0, 2020-09-07
**     Build:               b201223
**
**     Abstract:
**         CMSIS Peripheral Access Layer for 88MW320
**
**     Copyright 1997-2016 Freescale Semiconductor, Inc.
**     Copyright 2016-2020 NXP
**     All rights reserved.
**
**     SPDX-License-Identifier: BSD-3-Clause
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
**     Revisions:
**     - rev. 1.0 (2020-09-07)
**         Initial version.
**
** ###################################################################
*/

/*!
 * @file 88MW320.h
 * @version 1.0
 * @date 2020-09-07
 * @brief CMSIS Peripheral Access Layer for 88MW320
 *
 * CMSIS Peripheral Access Layer for 88MW320
 */

#ifndef _88MW320_H_
#define _88MW320_H_ /**< Symbol preventing repeated inclusion */

/** Memory map major version (memory maps with equal major version number are
 * compatible) */
#define MCU_MEM_MAP_VERSION 0x0100U
/** Memory map minor version */
#define MCU_MEM_MAP_VERSION_MINOR 0x0000U

/* ----------------------------------------------------------------------------
   -- Interrupt vector numbers
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
 * @{
 */

/** Interrupt Number Definitions */
#define NUMBER_OF_INT_VECTORS 79 /**< Number of interrupts in the Vector table */

typedef enum IRQn
{
    /* Auxiliary constants */
    NotAvail_IRQn = -128, /**< Not available device specific interrupt */

    /* Core interrupts */
    NonMaskableInt_IRQn   = -14, /**< Non Maskable Interrupt */
    HardFault_IRQn        = -13, /**< Cortex-M4 SV Hard Fault Interrupt */
    MemoryManagement_IRQn = -12, /**< Cortex-M4 Memory Management Interrupt */
    BusFault_IRQn         = -11, /**< Cortex-M4 Bus Fault Interrupt */
    UsageFault_IRQn       = -10, /**< Cortex-M4 Usage Fault Interrupt */
    SVCall_IRQn           = -5,  /**< Cortex-M4 SV Call Interrupt */
    DebugMonitor_IRQn     = -4,  /**< Cortex-M4 Debug Monitor Interrupt */
    PendSV_IRQn           = -2,  /**< Cortex-M4 Pend SV Interrupt */
    SysTick_IRQn          = -1,  /**< Cortex-M4 System Tick Interrupt */

    /* Device specific interrupts */
    EXTPIN0_IRQn      = 0,  /**< Ext. Pin 0 */
    EXTPIN1_IRQn      = 1,  /**< Ext. Pin 1 */
    RTC_IRQn          = 2,  /**< RTC INT */
    CRC_IRQn          = 3,  /**< CRC INT */
    AES_IRQn          = 4,  /**< AES INT */
    I2C0_IRQn         = 5,  /**< I2C0 INT */
    I2C1_IRQn         = 6,  /**< I2C1 INT */
    Reserved23_IRQn   = 7,  /**< Reserved interrupt */
    DMAC_IRQn         = 8,  /**< DMAC INT */
    GPIO_IRQn         = 9,  /**< GPIO INT */
    SSP0_IRQn         = 10, /**< SSP0 INT */
    SSP1_IRQn         = 11, /**< SSP1 INT */
    SSP2_IRQn         = 12, /**< SSP2 INT */
    QSPI_IRQn         = 13, /**< QSPI INT */
    GPT0_IRQn         = 14, /**< GPT0 INT */
    GPT1_IRQn         = 15, /**< GPT1 INT */
    GPT2_IRQn         = 16, /**< GPT2 INT */
    GPT3_IRQn         = 17, /**< GPT3 INT */
    UART0_IRQn        = 18, /**< UART0 INT */
    UART1_IRQn        = 19, /**< UART1 INT */
    UART2_IRQn        = 20, /**< UART2 INT */
    Reserved37_IRQn   = 21, /**< Reserved interrupt */
    WDT_IRQn          = 22, /**< WDT INT */
    Reserved39_IRQn   = 23, /**< Reserved interrupt */
    ADC0_IRQn         = 24, /**< ADC0 INT */
    DAC_IRQn          = 25, /**< DAC INT */
    ACOMP_WAKEUP_IRQn = 26, /**< ACOMP Wake-up INT */
    ACOMP_IRQn        = 27, /**< ACOMP INT */
    SDIO_IRQn         = 28, /**< SDIO INT */
    USB_IRQn          = 29, /**< USB INT */
    Reserved46_IRQn   = 30, /**< Reserved interrupt */
    PLL_IRQn          = 31, /**< PLL INT */
    Reserved48_IRQn   = 32, /**< Reserved interrupt */
    RC32M_IRQn        = 33, /**< RC32M INT FUNC */
    GPIO_0_1_IRQn     = 34, /**< External Pin 0 selected by PMU.EXT_SEL_REG */
    GPIO_2_3_IRQn     = 35, /**< External Pin 1 selected by PMU.EXT_SEL_REG */
    GPIO_4_5_IRQn     = 36, /**< External Pin 2 selected by PMU.EXT_SEL_REG */
    GPIO_6_7_IRQn     = 37, /**< External Pin 3 selected by PMU.EXT_SEL_REG */
    GPIO_8_9_IRQn     = 38, /**< External Pin 4 selected by PMU.EXT_SEL_REG */
    GPIO_10_11_IRQn   = 39, /**< External Pin 5 selected by PMU.EXT_SEL_REG */
    GPIO_12_13_IRQn   = 40, /**< External Pin 6 selected by PMU.EXT_SEL_REG */
    GPIO_14_15_IRQn   = 41, /**< External Pin 7 selected by PMU.EXT_SEL_REG */
    GPIO_16_17_IRQn   = 42, /**< External Pin 8 selected by PMU.EXT_SEL_REG */
    GPIO_18_19_IRQn   = 43, /**< External Pin 9 selected by PMU.EXT_SEL_REG */
    GPIO_20_21_IRQn   = 44, /**< External Pin 10 selected by PMU.EXT_SEL_REG */
    GPIO_22_23_IRQn   = 45, /**< External Pin 11 selected by PMU.EXT_SEL_REG */
    GPIO_24_25_IRQn   = 46, /**< External Pin 12 selected by PMU.EXT_SEL_REG */
    GPIO_26_27_IRQn   = 47, /**< External Pin 13 selected by PMU.EXT_SEL_REG */
    GPIO_28_29_IRQn   = 48, /**< External Pin 14 selected by PMU.EXT_SEL_REG */
    GPIO_30_31_IRQn   = 49, /**< External Pin 15 selected by PMU.EXT_SEL_REG */
    GPIO_32_33_IRQn   = 50, /**< External Pin 16 selected by PMU.EXT_SEL_REG */
    GPIO_34_35_IRQn   = 51, /**< External Pin 17 selected by PMU.EXT_SEL_REG */
    GPIO_36_37_IRQn   = 52, /**< External Pin 18 selected by PMU.EXT_SEL_REG */
    GPIO_38_39_IRQn   = 53, /**< External Pin 19 selected by PMU.EXT_SEL_REG */
    GPIO_40_41_IRQn   = 54, /**< External Pin 20 selected by PMU.EXT_SEL_REG */
    GPIO_42_43_IRQn   = 55, /**< External Pin 21 selected by PMU.EXT_SEL_REG */
    GPIO_44_45_IRQn   = 56, /**< External Pin 22 selected by PMU.EXT_SEL_REG */
    GPIO_46_47_IRQn   = 57, /**< External Pin 23 selected by PMU.EXT_SEL_REG */
    GPIO_48_49_IRQn   = 58, /**< External Pin 24 selected by PMU.EXT_SEL_REG */
    Reserved75_IRQn   = 59, /**< Reserved interrupt */
    PMU_IRQn          = 60, /**< ULP COMP */
    BRNOUT_IRQn       = 61, /**< Brnout INT */
    WIFIWKUP_IRQn     = 62  /**< WiFi Wakeup INT */
} IRQn_Type;

/*!
 * @}
 */ /* end of group Interrupt_vector_numbers */

/* ----------------------------------------------------------------------------
   -- Cortex M4 Core Configuration
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Cortex_Core_Configuration Cortex M4 Core Configuration
 * @{
 */

#define __MPU_PRESENT 1          /**< Defines if an MPU is present or not */
#define __NVIC_PRIO_BITS 3       /**< Number of priority bits implemented in the NVIC */
#define __Vendor_SysTickConfig 0 /**< Vendor specific implementation of SysTickConfig is defined */
#define __FPU_PRESENT 1          /**< Defines if an FPU is present or not */

#include "core_cm4.h"       /* Core Peripheral Access Layer */
#include "system_88MW320.h" /* Device specific configuration file */

/*!
 * @}
 */ /* end of group Cortex_Core_Configuration */

/* ----------------------------------------------------------------------------
   -- Mapping Information
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Mapping_Information Mapping Information
 * @{
 */

/** Mapping Information */
/*!
 * @addtogroup dmac_peripheral_number
 * @{ */

/*******************************************************************************
 * Definitions
 *******************************************************************************/

/*!
 * @brief Enumeration for the DMAC peripheral request number
 *
 * Defines the enumeration for the DMAC peripheral request number collections.
 */
typedef enum _dmac_peripheral_number
{
    kDMAC_PeriphNum_None       = 0xFFU, /**< Invalid peripheral number */
    kDMAC_PeriphNum_GPT0_0     = 0x00U, /**< PER0 GPT0 CH0 mapping */
    kDMAC_PeriphNum_GPT0_1     = 0x01U, /**< PER1 GPT0 CH1 mapping */
    kDMAC_PeriphNum_GPT1_0     = 0x02U, /**< PER2 GPT1 CH0 mapping */
    kDMAC_PeriphNum_GPT1_1     = 0x03U, /**< PER3 GPT1 CH1 mapping */
    kDMAC_PeriphNum_I2C0_Rx    = 0x04U, /**< PER4 I2C0 RX mapping */
    kDMAC_PeriphNum_I2C0_Tx    = 0x05U, /**< PER5 I2C0 TX mapping */
    kDMAC_PeriphNum_QSPI0_Rx   = 0x06U, /**< PER6 QSPI0 RX mapping */
    kDMAC_PeriphNum_QSPI0_Tx   = 0x07U, /**< PER7 QSPI0 TX mapping */
    kDMAC_PeriphNum_SSP0_Rx    = 0x0AU, /**< PER10 SSP0 RX mapping */
    kDMAC_PeriphNum_SSP0_Tx    = 0x0BU, /**< PER11 SSP0 TX mapping */
    kDMAC_PeriphNum_SSP1_Rx    = 0x0CU, /**< PER12 SSP1 RX mapping */
    kDMAC_PeriphNum_SSP1_Tx    = 0x0DU, /**< PER13 SSP1 TX mapping */
    kDMAC_PeriphNum_UART0_Rx   = 0x0EU, /**< PER14 UART0 RX mapping */
    kDMAC_PeriphNum_UART0_Tx   = 0x0FU, /**< PER15 UART0 TX mapping */
    kDMAC_PeriphNum_UART1_Rx   = 0x10U, /**< PER16 UART1 RX mapping */
    kDMAC_PeriphNum_UART1_Tx   = 0x11U, /**< PER17 UART1 TX mapping */
    kDMAC_PeriphNum_ADC0       = 0x18U, /**< PER24 ADC0 mapping */
    kDMAC_PeriphNum_DAC0       = 0x1AU, /**< PER26 DAC0 mapping */
    kDMAC_PeriphNum_DAC1       = 0x1BU, /**< PER27 DAC1 mapping */
    kDMAC_PeriphNum_GPT2_0     = 0x20U, /**< PER32 GPT2 CH0 mapping */
    kDMAC_PeriphNum_GPT2_1     = 0x21U, /**< PER33 GPT2 CH1 mapping */
    kDMAC_PeriphNum_GPT3_0     = 0x22U, /**< PER34 GPT3 CH0 mapping */
    kDMAC_PeriphNum_GPT3_1     = 0x23U, /**< PER35 GPT3 CH1 mapping */
    kDMAC_PeriphNum_I2C1_Rx    = 0x24U, /**< PER36 I2C1 RX mapping */
    kDMAC_PeriphNum_I2C1_Tx    = 0x25U, /**< PER37 I2C1 TX mapping */
    kDMAC_PeriphNum_I2C2_Rx    = 0x26U, /**< PER38 I2C2 RX mapping */
    kDMAC_PeriphNum_I2C2_Tx    = 0x27U, /**< PER39 I2C2 TX mapping */
    kDMAC_PeriphNum_SSP2_Rx    = 0x28U, /**< PER40 SSP2 RX mapping */
    kDMAC_PeriphNum_SSP2_Tx    = 0x29U, /**< PER41 SSP2 TX mapping */
    kDMAC_PeriphNum_UART2_Rx   = 0x2AU, /**< PER42 UART2 RX mapping */
    kDMAC_PeriphNum_UART2_Tx   = 0x2BU, /**< PER43 UART2 TX mapping */
    kDMAC_PeriphNum_AES_CrcIn  = 0x38U, /**< PER56 AES CRC IN mapping */
    kDMAC_PeriphNum_AES_CrcOut = 0x39U, /**< PER57 AES CRC OUT mapping */
} dmac_peripheral_number_t;

/* @} */

/*!
 * @}
 */ /* end of group Mapping_Information */

/* ----------------------------------------------------------------------------
   -- Device Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Peripheral_access_layer Device Peripheral Access Layer
 * @{
 */

/*
** Start of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
#if (__ARMCC_VERSION >= 6010050)
#pragma clang diagnostic push
#else
#pragma push
#pragma anon_unions
#endif
#elif defined(__GNUC__)
/* anonymous unions are enabled by default */
#elif defined(__IAR_SYSTEMS_ICC__)
#pragma language = extended
#else
#error Not supported compiler type
#endif

/* ----------------------------------------------------------------------------
   -- ACOMP Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ACOMP_Peripheral_Access_Layer ACOMP Peripheral Access Layer
 * @{
 */

/** ACOMP - Register Layout Typedef */
typedef struct
{
    __IO uint32_t CTRL0;  /**< ACOMP0 Control Register, offset: 0x0 */
    __IO uint32_t CTRL1;  /**< ACOMP1 Control Register, offset: 0x4 */
    __I uint32_t STATUS0; /**< ACOMP0 Status Register, offset: 0x8 */
    __I uint32_t STATUS1; /**< ACOMP1 Status Register, offset: 0xC */
    __IO uint32_t ROUTE0; /**< ACOMP0 Route Register, offset: 0x10 */
    __IO uint32_t ROUTE1; /**< ACOMP1 Route Register, offset: 0x14 */
    __I uint32_t ISR0;    /**< ACOMP0 Interrupt Status Register, offset: 0x18 */
    __I uint32_t ISR1;    /**< ACOMP1 Interrupt Status Register, offset: 0x1C */
    __IO uint32_t IMR0;   /**< ACOMP0 Interrupt Mask Register, offset: 0x20 */
    __IO uint32_t IMR1;   /**< ACOMP1 Interrupt Mask Register, offset: 0x24 */
    __I uint32_t IRSR0;   /**< ACOMP0 Interrupt Raw Status Register, offset: 0x28 */
    __I uint32_t IRSR1;   /**< ACOMP1 Interrupt Raw Status Register, offset: 0x2C */
    __IO uint32_t ICR0;   /**< ACOMP0 Interrupt Clear Register, offset: 0x30 */
    __IO uint32_t ICR1;   /**< ACOMP1 Interrupt Clear Register, offset: 0x34 */
    __IO uint32_t RST0;   /**< ACOMP0 Soft Reset Register, offset: 0x38 */
    __IO uint32_t RST1;   /**< ACOMP1 Soft Reset Register, offset: 0x3C */
    uint8_t RESERVED_0[8];
    __IO uint32_t CLK; /**< Clock Register, offset: 0x48 */
} ACOMP_Type;

/* ----------------------------------------------------------------------------
   -- ACOMP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ACOMP_Register_Masks ACOMP Register Masks
 * @{
 */

/*! @name CTRL0 - ACOMP0 Control Register */
/*! @{ */
#define ACOMP_CTRL0_EN_MASK (0x1U)
#define ACOMP_CTRL0_EN_SHIFT (0U)
/*! en - ACOMP0 enable
 *  0b0..
 *  0b1..
 */
#define ACOMP_CTRL0_EN(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_EN_SHIFT)) & ACOMP_CTRL0_EN_MASK)
#define ACOMP_CTRL0_GPIOINV_MASK (0x2U)
#define ACOMP_CTRL0_GPIOINV_SHIFT (1U)
/*! gpioinv - Enable/Disable inversion of ACOMP0 output to GPIO.
 *  0b0..do not invert ACOMP0 output
 *  0b1..invert ACOMP0 output
 */
#define ACOMP_CTRL0_GPIOINV(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_GPIOINV_SHIFT)) & ACOMP_CTRL0_GPIOINV_MASK)
#define ACOMP_CTRL0_WARMTIME_MASK (0xCU)
#define ACOMP_CTRL0_WARMTIME_SHIFT (2U)
/*! warmtime - Set ACOMP0 Warm-Up time
 *  0b00..1 us
 *  0b01..2 us
 *  0b10..4 us
 *  0b11..8 us
 */
#define ACOMP_CTRL0_WARMTIME(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_WARMTIME_SHIFT)) & ACOMP_CTRL0_WARMTIME_MASK)
#define ACOMP_CTRL0_HYST_SELN_MASK (0x70U)
#define ACOMP_CTRL0_HYST_SELN_SHIFT (4U)
/*! hyst_seln - Select ACOMP0 negative hysteresis voltage level.
 *  0b000..no hysteresis
 *  0b001..-10 mV hysteresis
 *  0b010..-20 mV hysteresis
 *  0b011..-30 mV hysteresis
 *  0b100..-40 mV hysteresis
 *  0b101..-50 mV hysteresis
 *  0b110..-60 mV hysteresis
 *  0b111..-70 mV hysteresis
 */
#define ACOMP_CTRL0_HYST_SELN(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_HYST_SELN_SHIFT)) & ACOMP_CTRL0_HYST_SELN_MASK)
#define ACOMP_CTRL0_HYST_SELP_MASK (0x380U)
#define ACOMP_CTRL0_HYST_SELP_SHIFT (7U)
/*! hyst_selp - Select ACOMP0 positive hysteresis voltage level.
 *  0b000..No hysteresis
 *  0b001..+10 mV hysteresis
 *  0b010..+20 mV hysteresis
 *  0b011..+30 mV hysteresis
 *  0b100..+40 mV hysteresis
 *  0b101..+50 mV hysteresis
 *  0b110..+60 mV hysteresis
 *  0b111..+70 mV hysteresis
 */
#define ACOMP_CTRL0_HYST_SELP(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_HYST_SELP_SHIFT)) & ACOMP_CTRL0_HYST_SELP_MASK)
#define ACOMP_CTRL0_BIAS_PROG_MASK (0xC00U)
#define ACOMP_CTRL0_BIAS_PROG_SHIFT (10U)
/*! bias_prog - ACOMP0 bias current control bits or response time control bits.
 *  0b00..power mode1 (slow response mode)
 *  0b01..power mode2 (medium response mode)
 *  0b10..power mode3 (fast response mode)
 *  0b11..Reserved
 */
#define ACOMP_CTRL0_BIAS_PROG(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_BIAS_PROG_SHIFT)) & ACOMP_CTRL0_BIAS_PROG_MASK)
#define ACOMP_CTRL0_LEVEL_SEL_MASK (0x3F000U)
#define ACOMP_CTRL0_LEVEL_SEL_SHIFT (12U)
/*! level_sel - Scaling factor select bits for VIO reference level.
 *  0b000000..Scaling factor=0.25
 *  0b010000..Scaling factor= 0.5
 *  0b100000..Scaling factor= 0.75
 *  0b110000..Scaling factor= 1
 */
#define ACOMP_CTRL0_LEVEL_SEL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_LEVEL_SEL_SHIFT)) & ACOMP_CTRL0_LEVEL_SEL_MASK)
#define ACOMP_CTRL0_NEG_SEL_MASK (0x3C0000U)
#define ACOMP_CTRL0_NEG_SEL_SHIFT (18U)
/*! neg_sel - ACOMP0 negative input select bits.
 *  0b0000..acomp_ch<0>
 *  0b0001..acomp_ch<1>
 *  0b0010..acomp_ch<2>
 *  0b0011..acomp_ch<3>
 *  0b0100..acomp_ch<4>
 *  0b0101..acomp_ch<5>
 *  0b0110..acomp_ch<6>
 *  0b0111..acomp_ch<7>
 *  0b1000..
 *  0b1001..
 *  0b1010..
 *  0b1011..
 *  0b1100..vio*scaling factor
 *  0b1101..vio*scaling factor
 *  0b1110..vio*scaling factor
 *  0b1111..vio*scaling factor
 */
#define ACOMP_CTRL0_NEG_SEL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_NEG_SEL_SHIFT)) & ACOMP_CTRL0_NEG_SEL_MASK)
#define ACOMP_CTRL0_POS_SEL_MASK (0x3C00000U)
#define ACOMP_CTRL0_POS_SEL_SHIFT (22U)
/*! pos_sel - ACOMP0 positive input select bits.
 *  0b0000..acomp_ch<0>
 *  0b0001..acomp_ch<1>
 *  0b0010..acomp_ch<2>
 *  0b0011..acomp_ch<3>
 *  0b0100..acomp_ch<4>
 *  0b0101..acomp_ch<5>
 *  0b0110..acomp_ch<6>
 *  0b0111..acomp_ch<7>
 *  0b1000..
 *  0b1001..
 */
#define ACOMP_CTRL0_POS_SEL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_POS_SEL_SHIFT)) & ACOMP_CTRL0_POS_SEL_MASK)
#define ACOMP_CTRL0_MUXEN_MASK (0x4000000U)
#define ACOMP_CTRL0_MUXEN_SHIFT (26U)
/*! muxen - ACOMP0 input MUX enable bit.
 *  0b0..disable input mux
 *  0b1..enable input mux
 */
#define ACOMP_CTRL0_MUXEN(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_MUXEN_SHIFT)) & ACOMP_CTRL0_MUXEN_MASK)
#define ACOMP_CTRL0_INACT_VAL_MASK (0x8000000U)
#define ACOMP_CTRL0_INACT_VAL_SHIFT (27U)
/*! inact_val - Set output value when ACOMP0 is inactive.
 *  0b0..output 0 when ACOMP0 is inactive
 *  0b1..output 1 when ACOMP0 is inactive
 */
#define ACOMP_CTRL0_INACT_VAL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_INACT_VAL_SHIFT)) & ACOMP_CTRL0_INACT_VAL_MASK)
#define ACOMP_CTRL0_RIE_MASK (0x10000000U)
#define ACOMP_CTRL0_RIE_SHIFT (28U)
/*! rie - ACOMP0 enable/disable rising edge triggered edge pulse.
 *  0b0..
 *  0b1..
 */
#define ACOMP_CTRL0_RIE(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_RIE_SHIFT)) & ACOMP_CTRL0_RIE_MASK)
#define ACOMP_CTRL0_FIE_MASK (0x20000000U)
#define ACOMP_CTRL0_FIE_SHIFT (29U)
/*! fie - ACOMP0 enable/disable falling edge triggered edge pulse.
 *  0b0..
 *  0b1..
 */
#define ACOMP_CTRL0_FIE(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_FIE_SHIFT)) & ACOMP_CTRL0_FIE_MASK)
#define ACOMP_CTRL0_INT_ACT_HI_MASK (0x40000000U)
#define ACOMP_CTRL0_INT_ACT_HI_SHIFT (30U)
/*! int_act_hi - ACOMP0 interrupt active mode select.
 *  0b0..Low level or falling edge triggered interrupt
 *  0b1..High level or rising edge triggered interrupt
 */
#define ACOMP_CTRL0_INT_ACT_HI(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_INT_ACT_HI_SHIFT)) & ACOMP_CTRL0_INT_ACT_HI_MASK)
#define ACOMP_CTRL0_EDGE_LEVL_SEL_MASK (0x80000000U)
#define ACOMP_CTRL0_EDGE_LEVL_SEL_SHIFT (31U)
/*! edge_levl_sel - ACOMP0 interrupt type select.
 *  0b0..level triggered interrupt
 *  0b1..edge triggered interrupt
 */
#define ACOMP_CTRL0_EDGE_LEVL_SEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL0_EDGE_LEVL_SEL_SHIFT)) & ACOMP_CTRL0_EDGE_LEVL_SEL_MASK)
/*! @} */

/*! @name CTRL1 - ACOMP1 Control Register */
/*! @{ */
#define ACOMP_CTRL1_EN_MASK (0x1U)
#define ACOMP_CTRL1_EN_SHIFT (0U)
/*! en - ACOMP1 enable bit.
 *  0b0..
 *  0b1..
 */
#define ACOMP_CTRL1_EN(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_EN_SHIFT)) & ACOMP_CTRL1_EN_MASK)
#define ACOMP_CTRL1_GPIOINV_MASK (0x2U)
#define ACOMP_CTRL1_GPIOINV_SHIFT (1U)
/*! gpioinv - Enable/disable inversion of ACOMP1 output to GPIO.
 *  0b0..do not invert ACOMP1 output
 *  0b1..invert ACOMP1 output
 */
#define ACOMP_CTRL1_GPIOINV(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_GPIOINV_SHIFT)) & ACOMP_CTRL1_GPIOINV_MASK)
#define ACOMP_CTRL1_WARMTIME_MASK (0xCU)
#define ACOMP_CTRL1_WARMTIME_SHIFT (2U)
/*! warmtime - Set ACOMP1 warm-up time.
 *  0b00..1 us
 *  0b01..2 us
 *  0b10..4 us
 *  0b11..8 us
 */
#define ACOMP_CTRL1_WARMTIME(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_WARMTIME_SHIFT)) & ACOMP_CTRL1_WARMTIME_MASK)
#define ACOMP_CTRL1_HYST_SELN_MASK (0x70U)
#define ACOMP_CTRL1_HYST_SELN_SHIFT (4U)
/*! hyst_seln - Select ACOMP1 negative hysteresis voltage level.
 *  0b000..No hysteresis
 *  0b001..-10 mV hysteresis
 *  0b010..-20 mV hysteresis
 *  0b011..-30 mV hysteresis
 *  0b100..-40 mV hysteresis
 *  0b101..-50 mV hysteresis
 *  0b110..-60 mV hysteresis
 *  0b111..-70 mV hysteresis
 */
#define ACOMP_CTRL1_HYST_SELN(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_HYST_SELN_SHIFT)) & ACOMP_CTRL1_HYST_SELN_MASK)
#define ACOMP_CTRL1_HYST_SELP_MASK (0x380U)
#define ACOMP_CTRL1_HYST_SELP_SHIFT (7U)
/*! hyst_selp - Select ACOMP1 positive hysteresis voltage level.
 *  0b000..No hysteresis
 *  0b001..+10 mV hysteresis
 *  0b010..+20 mV hysteresis
 *  0b011..+30 mV hysteresis
 *  0b100..+40 mV hysteresis
 *  0b101..+50 mV hysteresis
 *  0b110..+60 mV hysteresis
 *  0b111..+70 mV hysteresis
 */
#define ACOMP_CTRL1_HYST_SELP(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_HYST_SELP_SHIFT)) & ACOMP_CTRL1_HYST_SELP_MASK)
#define ACOMP_CTRL1_BIAS_PROG_MASK (0xC00U)
#define ACOMP_CTRL1_BIAS_PROG_SHIFT (10U)
/*! bias_prog - ACOMP1 bias current control bits Or response time control bits.
 *  0b00..power mode1 (Slow response mode)
 *  0b01..power mode2 (Medium response mode)
 *  0b10..power mode3 (Fast response mode)
 *  0b11..Reserved
 */
#define ACOMP_CTRL1_BIAS_PROG(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_BIAS_PROG_SHIFT)) & ACOMP_CTRL1_BIAS_PROG_MASK)
#define ACOMP_CTRL1_LEVEL_SEL_MASK (0x3F000U)
#define ACOMP_CTRL1_LEVEL_SEL_SHIFT (12U)
/*! level_sel - Scaling factor select bits for vio reference level.
 *  0b000000..Scaling factor=0.25
 *  0b010000..Scaling factor= 0.5
 *  0b100000..Scaling factor= 0.75
 *  0b110000..Scaling factor= 1
 */
#define ACOMP_CTRL1_LEVEL_SEL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_LEVEL_SEL_SHIFT)) & ACOMP_CTRL1_LEVEL_SEL_MASK)
#define ACOMP_CTRL1_NEG_SEL_MASK (0x3C0000U)
#define ACOMP_CTRL1_NEG_SEL_SHIFT (18U)
/*! neg_sel - ACOMP1 negative input select
 *  0b0000..acomp_ch<0>
 *  0b0001..acomp_ch<1>
 *  0b0010..acomp_ch<2>
 *  0b0011..acomp_ch<3>
 *  0b0100..acomp_ch<4>
 *  0b0101..acomp_ch<5>
 *  0b0110..acomp_ch<6>
 *  0b0111..acomp_ch<7>
 *  0b1000..
 *  0b1001..
 *  0b1010..
 *  0b1011..
 *  0b1100..vio*scaling factor
 *  0b1101..vio*scaling factor
 *  0b1110..vio*scaling factor
 *  0b1111..vio*scaling factor
 */
#define ACOMP_CTRL1_NEG_SEL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_NEG_SEL_SHIFT)) & ACOMP_CTRL1_NEG_SEL_MASK)
#define ACOMP_CTRL1_POS_SEL_MASK (0x3C00000U)
#define ACOMP_CTRL1_POS_SEL_SHIFT (22U)
/*! pos_sel - ACOMP1 positive input select
 *  0b0000..acomp_ch<0>
 *  0b0001..acomp_ch<1>
 *  0b0010..acomp_ch<2>
 *  0b0011..acomp_ch<3>
 *  0b0100..acomp_ch<4>
 *  0b0101..acomp_ch<5>
 *  0b0110..acomp_ch<6>
 *  0b0111..acomp_ch<7>
 *  0b1000..
 *  0b1001..
 */
#define ACOMP_CTRL1_POS_SEL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_POS_SEL_SHIFT)) & ACOMP_CTRL1_POS_SEL_MASK)
#define ACOMP_CTRL1_MUXEN_MASK (0x4000000U)
#define ACOMP_CTRL1_MUXEN_SHIFT (26U)
/*! muxen - ACOMP1 input MUX enable
 *  0b0..disable input mux
 *  0b1..enable input mux
 */
#define ACOMP_CTRL1_MUXEN(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_MUXEN_SHIFT)) & ACOMP_CTRL1_MUXEN_MASK)
#define ACOMP_CTRL1_INACT_VAL_MASK (0x8000000U)
#define ACOMP_CTRL1_INACT_VAL_SHIFT (27U)
/*! inact_val - Set output value when ACOMP1 is inactive.
 *  0b0..output 0 when ACOMP1 is inactive
 *  0b1..output 1 when ACOMP1 is inactive
 */
#define ACOMP_CTRL1_INACT_VAL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_INACT_VAL_SHIFT)) & ACOMP_CTRL1_INACT_VAL_MASK)
#define ACOMP_CTRL1_RIE_MASK (0x10000000U)
#define ACOMP_CTRL1_RIE_SHIFT (28U)
/*! rie - ACOMP1 enable/disable rising edge triggered edge pulse.
 *  0b0..
 *  0b1..
 */
#define ACOMP_CTRL1_RIE(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_RIE_SHIFT)) & ACOMP_CTRL1_RIE_MASK)
#define ACOMP_CTRL1_FIE_MASK (0x20000000U)
#define ACOMP_CTRL1_FIE_SHIFT (29U)
/*! fie - ACOMP1 enable/disable falling edge triggered edge pulse.
 *  0b0..
 *  0b1..
 */
#define ACOMP_CTRL1_FIE(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_FIE_SHIFT)) & ACOMP_CTRL1_FIE_MASK)
#define ACOMP_CTRL1_INT_ACT_HI_MASK (0x40000000U)
#define ACOMP_CTRL1_INT_ACT_HI_SHIFT (30U)
/*! int_act_hi - ACOMP1 interrupt active mode select.
 *  0b0..Low level or falling edge triggered interrupt
 *  0b1..High level or rising edge triggered interrupt
 */
#define ACOMP_CTRL1_INT_ACT_HI(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_INT_ACT_HI_SHIFT)) & ACOMP_CTRL1_INT_ACT_HI_MASK)
#define ACOMP_CTRL1_EDGE_LEVL_SEL_MASK (0x80000000U)
#define ACOMP_CTRL1_EDGE_LEVL_SEL_SHIFT (31U)
/*! edge_levl_sel - ACOMP1 interrupt type select.
 *  0b0..level triggered interrupt
 *  0b1..edge triggered interrupt
 */
#define ACOMP_CTRL1_EDGE_LEVL_SEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << ACOMP_CTRL1_EDGE_LEVL_SEL_SHIFT)) & ACOMP_CTRL1_EDGE_LEVL_SEL_MASK)
/*! @} */

/*! @name STATUS0 - ACOMP0 Status Register */
/*! @{ */
#define ACOMP_STATUS0_ACT_MASK (0x1U)
#define ACOMP_STATUS0_ACT_SHIFT (0U)
/*! act - ACOMP0 active status.
 *  0b0..ACOMP0 is inactive
 *  0b1..ACOMP0 is active
 */
#define ACOMP_STATUS0_ACT(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_STATUS0_ACT_SHIFT)) & ACOMP_STATUS0_ACT_MASK)
#define ACOMP_STATUS0_OUT_MASK (0x2U)
#define ACOMP_STATUS0_OUT_SHIFT (1U)
/*! out - ACOMP0 comparison output value.
 */
#define ACOMP_STATUS0_OUT(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_STATUS0_OUT_SHIFT)) & ACOMP_STATUS0_OUT_MASK)
/*! @} */

/*! @name STATUS1 - ACOMP1 Status Register */
/*! @{ */
#define ACOMP_STATUS1_ACT_MASK (0x1U)
#define ACOMP_STATUS1_ACT_SHIFT (0U)
/*! act - ACOMP1 active status.
 *  0b0..ACOMP1 is inactive
 *  0b1..ACOMP1 is active
 */
#define ACOMP_STATUS1_ACT(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_STATUS1_ACT_SHIFT)) & ACOMP_STATUS1_ACT_MASK)
#define ACOMP_STATUS1_OUT_MASK (0x2U)
#define ACOMP_STATUS1_OUT_SHIFT (1U)
/*! out - ACOMP1 comparison output value.
 */
#define ACOMP_STATUS1_OUT(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_STATUS1_OUT_SHIFT)) & ACOMP_STATUS1_OUT_MASK)
/*! @} */

/*! @name ROUTE0 - ACOMP0 Route Register */
/*! @{ */
#define ACOMP_ROUTE0_OUTSEL_MASK (0x1U)
#define ACOMP_ROUTE0_OUTSEL_SHIFT (0U)
/*! outsel - Select ACOMP0 synchronous or asynchronous output to pin.
 *  0b0..Synchronous output
 *  0b1..Asynchronous output
 */
#define ACOMP_ROUTE0_OUTSEL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ROUTE0_OUTSEL_SHIFT)) & ACOMP_ROUTE0_OUTSEL_MASK)
#define ACOMP_ROUTE0_PE_MASK (0x2U)
#define ACOMP_ROUTE0_PE_SHIFT (1U)
/*! pe - Enable/disable ACOMP0 output to pin.
 *  0b0..
 *  0b1..
 */
#define ACOMP_ROUTE0_PE(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ROUTE0_PE_SHIFT)) & ACOMP_ROUTE0_PE_MASK)
/*! @} */

/*! @name ROUTE1 - ACOMP1 Route Register */
/*! @{ */
#define ACOMP_ROUTE1_OUTSEL_MASK (0x1U)
#define ACOMP_ROUTE1_OUTSEL_SHIFT (0U)
/*! outsel - Select ACOMP1 synchronous or asynchronous output to pin
 *  0b0..Synchronous output
 *  0b1..Asynchronous output
 */
#define ACOMP_ROUTE1_OUTSEL(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ROUTE1_OUTSEL_SHIFT)) & ACOMP_ROUTE1_OUTSEL_MASK)
#define ACOMP_ROUTE1_PE_MASK (0x2U)
#define ACOMP_ROUTE1_PE_SHIFT (1U)
/*! pe - Enable/disable ACOMP1 output to pin
 *  0b0..
 *  0b1..
 */
#define ACOMP_ROUTE1_PE(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ROUTE1_PE_SHIFT)) & ACOMP_ROUTE1_PE_MASK)
/*! @} */

/*! @name ISR0 - ACOMP0 Interrupt Status Register */
/*! @{ */
#define ACOMP_ISR0_OUT_INT_MASK (0x1U)
#define ACOMP_ISR0_OUT_INT_SHIFT (0U)
/*! out_int - ACOMP0 Synchronized Output Interrupt
 */
#define ACOMP_ISR0_OUT_INT(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ISR0_OUT_INT_SHIFT)) & ACOMP_ISR0_OUT_INT_MASK)
#define ACOMP_ISR0_OUTA_INT_MASK (0x2U)
#define ACOMP_ISR0_OUTA_INT_SHIFT (1U)
/*! outa_int - ACOMP0 Asynchronized Output Interrupt
 */
#define ACOMP_ISR0_OUTA_INT(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ISR0_OUTA_INT_SHIFT)) & ACOMP_ISR0_OUTA_INT_MASK)
/*! @} */

/*! @name ISR1 - ACOMP1 Interrupt Status Register */
/*! @{ */
#define ACOMP_ISR1_OUT_INT_MASK (0x1U)
#define ACOMP_ISR1_OUT_INT_SHIFT (0U)
/*! out_int - ACOMP1 Synchronized Output Interrupt
 */
#define ACOMP_ISR1_OUT_INT(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ISR1_OUT_INT_SHIFT)) & ACOMP_ISR1_OUT_INT_MASK)
#define ACOMP_ISR1_OUTA_INT_MASK (0x2U)
#define ACOMP_ISR1_OUTA_INT_SHIFT (1U)
/*! outa_int - ACOMP1 Asynchronized Output Interrupt
 */
#define ACOMP_ISR1_OUTA_INT(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ISR1_OUTA_INT_SHIFT)) & ACOMP_ISR1_OUTA_INT_MASK)
/*! @} */

/*! @name IMR0 - ACOMP0 Interrupt Mask Register */
/*! @{ */
#define ACOMP_IMR0_OUT_INT_MASK_MASK (0x1U)
#define ACOMP_IMR0_OUT_INT_MASK_SHIFT (0U)
/*! out_int_mask - Mask Synchronized Interrupt
 */
#define ACOMP_IMR0_OUT_INT_MASK(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_IMR0_OUT_INT_MASK_SHIFT)) & ACOMP_IMR0_OUT_INT_MASK_MASK)
#define ACOMP_IMR0_OUTA_INT_MASK_MASK (0x2U)
#define ACOMP_IMR0_OUTA_INT_MASK_SHIFT (1U)
/*! outa_int_mask - Mask Asynchronized Interrupt
 */
#define ACOMP_IMR0_OUTA_INT_MASK(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ACOMP_IMR0_OUTA_INT_MASK_SHIFT)) & ACOMP_IMR0_OUTA_INT_MASK_MASK)
/*! @} */

/*! @name IMR1 - ACOMP1 Interrupt Mask Register */
/*! @{ */
#define ACOMP_IMR1_OUT_INT_MASK_MASK (0x1U)
#define ACOMP_IMR1_OUT_INT_MASK_SHIFT (0U)
/*! out_int_mask - Mask Synchronized Interrupt
 */
#define ACOMP_IMR1_OUT_INT_MASK(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_IMR1_OUT_INT_MASK_SHIFT)) & ACOMP_IMR1_OUT_INT_MASK_MASK)
#define ACOMP_IMR1_OUTA_INT_MASK_MASK (0x2U)
#define ACOMP_IMR1_OUTA_INT_MASK_SHIFT (1U)
/*! outa_int_mask - Mask Asynchronized Interrupt
 */
#define ACOMP_IMR1_OUTA_INT_MASK(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ACOMP_IMR1_OUTA_INT_MASK_SHIFT)) & ACOMP_IMR1_OUTA_INT_MASK_MASK)
/*! @} */

/*! @name IRSR0 - ACOMP0 Interrupt Raw Status Register */
/*! @{ */
#define ACOMP_IRSR0_OUT_INT_RAW_MASK (0x1U)
#define ACOMP_IRSR0_OUT_INT_RAW_SHIFT (0U)
/*! out_int_raw - Raw Mask Synchronized Interrupt
 */
#define ACOMP_IRSR0_OUT_INT_RAW(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_IRSR0_OUT_INT_RAW_SHIFT)) & ACOMP_IRSR0_OUT_INT_RAW_MASK)
#define ACOMP_IRSR0_OUTA_INT_RAW_MASK (0x2U)
#define ACOMP_IRSR0_OUTA_INT_RAW_SHIFT (1U)
/*! outa_int_raw - Raw Mask Asynchronized Interrupt
 */
#define ACOMP_IRSR0_OUTA_INT_RAW(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ACOMP_IRSR0_OUTA_INT_RAW_SHIFT)) & ACOMP_IRSR0_OUTA_INT_RAW_MASK)
/*! @} */

/*! @name IRSR1 - ACOMP1 Interrupt Raw Status Register */
/*! @{ */
#define ACOMP_IRSR1_OUT_INT_RAW_MASK (0x1U)
#define ACOMP_IRSR1_OUT_INT_RAW_SHIFT (0U)
/*! out_int_raw - Raw Mask Synchronized Interrupt
 */
#define ACOMP_IRSR1_OUT_INT_RAW(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_IRSR1_OUT_INT_RAW_SHIFT)) & ACOMP_IRSR1_OUT_INT_RAW_MASK)
#define ACOMP_IRSR1_OUTA_INT_RAW_MASK (0x2U)
#define ACOMP_IRSR1_OUTA_INT_RAW_SHIFT (1U)
/*! outa_int_raw - Raw Mask Asynchronized Interrupt
 */
#define ACOMP_IRSR1_OUTA_INT_RAW(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ACOMP_IRSR1_OUTA_INT_RAW_SHIFT)) & ACOMP_IRSR1_OUTA_INT_RAW_MASK)
/*! @} */

/*! @name ICR0 - ACOMP0 Interrupt Clear Register */
/*! @{ */
#define ACOMP_ICR0_OUT_INT_CLR_MASK (0x1U)
#define ACOMP_ICR0_OUT_INT_CLR_SHIFT (0U)
/*! out_int_clr - ACOMP0 syncrhonized output interrupt flag clear signal.
 */
#define ACOMP_ICR0_OUT_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ICR0_OUT_INT_CLR_SHIFT)) & ACOMP_ICR0_OUT_INT_CLR_MASK)
#define ACOMP_ICR0_OUTA_INT_CLR_MASK (0x2U)
#define ACOMP_ICR0_OUTA_INT_CLR_SHIFT (1U)
/*! outa_int_clr - ACOMP0 asyncrhonized output interrupt flag clear signal.
 */
#define ACOMP_ICR0_OUTA_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ICR0_OUTA_INT_CLR_SHIFT)) & ACOMP_ICR0_OUTA_INT_CLR_MASK)
/*! @} */

/*! @name ICR1 - ACOMP1 Interrupt Clear Register */
/*! @{ */
#define ACOMP_ICR1_OUT_INT_CLR_MASK (0x1U)
#define ACOMP_ICR1_OUT_INT_CLR_SHIFT (0U)
/*! out_int_clr - ACOMP1 syncrhonized output interrupt flag clear signal.
 */
#define ACOMP_ICR1_OUT_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ICR1_OUT_INT_CLR_SHIFT)) & ACOMP_ICR1_OUT_INT_CLR_MASK)
#define ACOMP_ICR1_OUTA_INT_CLR_MASK (0x2U)
#define ACOMP_ICR1_OUTA_INT_CLR_SHIFT (1U)
/*! outa_int_clr - ACOMP1 asyncrhonized output interrupt flag clear signal.
 */
#define ACOMP_ICR1_OUTA_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_ICR1_OUTA_INT_CLR_SHIFT)) & ACOMP_ICR1_OUTA_INT_CLR_MASK)
/*! @} */

/*! @name RST0 - ACOMP0 Soft Reset Register */
/*! @{ */
#define ACOMP_RST0_SOFT_RST_MASK (0x1U)
#define ACOMP_RST0_SOFT_RST_SHIFT (0U)
/*! soft_rst - Soft Reset for ACOMP0 (active high)
 *  0b0..no action
 *  0b1..
 */
#define ACOMP_RST0_SOFT_RST(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_RST0_SOFT_RST_SHIFT)) & ACOMP_RST0_SOFT_RST_MASK)
/*! @} */

/*! @name RST1 - ACOMP1 Soft Reset Register */
/*! @{ */
#define ACOMP_RST1_SOFT_RST_MASK (0x1U)
#define ACOMP_RST1_SOFT_RST_SHIFT (0U)
/*! soft_rst - Soft Reset for ACOMP1 (active high)
 *  0b0..no action
 *  0b1..
 */
#define ACOMP_RST1_SOFT_RST(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_RST1_SOFT_RST_SHIFT)) & ACOMP_RST1_SOFT_RST_MASK)
/*! @} */

/*! @name CLK - Clock Register */
/*! @{ */
#define ACOMP_CLK_SOFT_CLK_RST_MASK (0x2U)
#define ACOMP_CLK_SOFT_CLK_RST_SHIFT (1U)
/*! soft_clk_rst - soft reset for clock divider
 *  0b0..no action
 *  0b1..
 */
#define ACOMP_CLK_SOFT_CLK_RST(x) (((uint32_t)(((uint32_t)(x)) << ACOMP_CLK_SOFT_CLK_RST_SHIFT)) & ACOMP_CLK_SOFT_CLK_RST_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group ACOMP_Register_Masks */

/* ACOMP - Peripheral instance base addresses */
/** Peripheral ACOMP base address */
#define ACOMP_BASE (0x460B0400u)
/** Peripheral ACOMP base pointer */
#define ACOMP ((ACOMP_Type *) ACOMP_BASE)
/** Array initializer of ACOMP peripheral base addresses */
#define ACOMP_BASE_ADDRS                                                                                                           \
    {                                                                                                                              \
        ACOMP_BASE                                                                                                                 \
    }
/** Array initializer of ACOMP peripheral base pointers */
#define ACOMP_BASE_PTRS                                                                                                            \
    {                                                                                                                              \
        ACOMP                                                                                                                      \
    }
/** Interrupt vectors for the ACOMP peripheral type */
#define ACOMP_FUNC_IRQS                                                                                                            \
    {                                                                                                                              \
        ACOMP_IRQn                                                                                                                 \
    }
#define ACOMP_WAKE_IRQS                                                                                                            \
    {                                                                                                                              \
        ACOMP_WAKEUP_IRQn                                                                                                          \
    }

/*!
 * @}
 */ /* end of group ACOMP_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- ADC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Peripheral_Access_Layer ADC Peripheral Access Layer
 * @{
 */

/** ADC - Register Layout Typedef */
typedef struct
{
    __IO uint32_t ADC_REG_CMD;      /**< , offset: 0x0 */
    __IO uint32_t ADC_REG_GENERAL;  /**< , offset: 0x4 */
    __IO uint32_t ADC_REG_CONFIG;   /**< , offset: 0x8 */
    __IO uint32_t ADC_REG_INTERVAL; /**< , offset: 0xC */
    __IO uint32_t ADC_REG_ANA;      /**< , offset: 0x10 */
    uint8_t RESERVED_0[4];
    __IO uint32_t ADC_REG_SCN1;       /**< adc converation sequence 1, offset: 0x18 */
    __IO uint32_t ADC_REG_SCN2;       /**< adc converation sequence 2, offset: 0x1C */
    __IO uint32_t ADC_REG_RESULT_BUF; /**< , offset: 0x20 */
    uint8_t RESERVED_1[4];
    __IO uint32_t ADC_REG_DMAR;  /**< , offset: 0x28 */
    __I uint32_t ADC_REG_STATUS; /**< , offset: 0x2C */
    __I uint32_t ADC_REG_ISR;    /**< , offset: 0x30 */
    __IO uint32_t ADC_REG_IMR;   /**< , offset: 0x34 */
    __I uint32_t ADC_REG_IRSR;   /**< , offset: 0x38 */
    __IO uint32_t ADC_REG_ICR;   /**< , offset: 0x3C */
    uint8_t RESERVED_2[4];
    __I uint32_t ADC_REG_RESULT;      /**< , offset: 0x44 */
    __I uint32_t ADC_REG_RAW_RESULT;  /**< , offset: 0x48 */
    __IO uint32_t ADC_REG_OFFSET_CAL; /**< , offset: 0x4C */
    __IO uint32_t ADC_REG_GAIN_CAL;   /**< , offset: 0x50 */
    __IO uint32_t ADC_REG_TEST;       /**< , offset: 0x54 */
    __IO uint32_t ADC_REG_AUDIO;      /**< , offset: 0x58 */
    __IO uint32_t ADC_REG_VOICE_DET;  /**< , offset: 0x5C */
    __IO uint32_t ADC_REG_RSVD;       /**< , offset: 0x60 */
} ADC_Type;

/* ----------------------------------------------------------------------------
   -- ADC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ADC_Register_Masks ADC Register Masks
 * @{
 */

/*! @name ADC_REG_CMD -  */
/*! @{ */
#define ADC_ADC_REG_CMD_CONV_START_MASK (0x1U)
#define ADC_ADC_REG_CMD_CONV_START_SHIFT (0U)
/*! conv_start - converaion control bit.
 *  0b0..stop converation
 *  0b1..start converation. This will clear the FIFO.
 */
#define ADC_ADC_REG_CMD_CONV_START(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CMD_CONV_START_SHIFT)) & ADC_ADC_REG_CMD_CONV_START_MASK)
#define ADC_ADC_REG_CMD_SOFT_RST_MASK (0x2U)
#define ADC_ADC_REG_CMD_SOFT_RST_SHIFT (1U)
/*! soft_rst - user reset the whole block
 */
#define ADC_ADC_REG_CMD_SOFT_RST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CMD_SOFT_RST_SHIFT)) & ADC_ADC_REG_CMD_SOFT_RST_MASK)
#define ADC_ADC_REG_CMD_SOFT_CLK_RST_MASK (0x4U)
#define ADC_ADC_REG_CMD_SOFT_CLK_RST_SHIFT (2U)
/*! soft_clk_rst - user reset clock
 */
#define ADC_ADC_REG_CMD_SOFT_CLK_RST(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CMD_SOFT_CLK_RST_SHIFT)) & ADC_ADC_REG_CMD_SOFT_CLK_RST_MASK)
/*! @} */

/*! @name ADC_REG_GENERAL -  */
/*! @{ */
#define ADC_ADC_REG_GENERAL_GPADC_MASTER_MASK (0x1U)
#define ADC_ADC_REG_GENERAL_GPADC_MASTER_SHIFT (0U)
/*! gpadc_master - play as master or slave in dual mode, master is the only controller of when slave start
 *  0b0..ADC is slave
 *  0b1..ADC is master
 */
#define ADC_ADC_REG_GENERAL_GPADC_MASTER(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_GENERAL_GPADC_MASTER_SHIFT)) & ADC_ADC_REG_GENERAL_GPADC_MASTER_MASK)
#define ADC_ADC_REG_GENERAL_GLOBAL_EN_MASK (0x2U)
#define ADC_ADC_REG_GENERAL_GLOBAL_EN_SHIFT (1U)
/*! global_en - ADC enable/disable
 */
#define ADC_ADC_REG_GENERAL_GLOBAL_EN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_GENERAL_GLOBAL_EN_SHIFT)) & ADC_ADC_REG_GENERAL_GLOBAL_EN_MASK)
#define ADC_ADC_REG_GENERAL_FORCE_CLK_ON_MASK (0x4U)
#define ADC_ADC_REG_GENERAL_FORCE_CLK_ON_SHIFT (2U)
/*! force_clk_on - override the gpadc_mclk_en from outside
 *  0b0..clock disable
 *  0b1..clock enable
 */
#define ADC_ADC_REG_GENERAL_FORCE_CLK_ON(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_GENERAL_FORCE_CLK_ON_SHIFT)) & ADC_ADC_REG_GENERAL_FORCE_CLK_ON_MASK)
#define ADC_ADC_REG_GENERAL_CLK_ANA64M_INV_MASK (0x8U)
#define ADC_ADC_REG_GENERAL_CLK_ANA64M_INV_SHIFT (3U)
/*! clk_ana64M_inv - analog clock 64M inverted
 */
#define ADC_ADC_REG_GENERAL_CLK_ANA64M_INV(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_GENERAL_CLK_ANA64M_INV_SHIFT)) & ADC_ADC_REG_GENERAL_CLK_ANA64M_INV_MASK)
#define ADC_ADC_REG_GENERAL_CLK_ANA2M_INV_MASK (0x10U)
#define ADC_ADC_REG_GENERAL_CLK_ANA2M_INV_SHIFT (4U)
/*! clk_ana2M_inv - analog clock 2M inverted
 */
#define ADC_ADC_REG_GENERAL_CLK_ANA2M_INV(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_GENERAL_CLK_ANA2M_INV_SHIFT)) & ADC_ADC_REG_GENERAL_CLK_ANA2M_INV_MASK)
#define ADC_ADC_REG_GENERAL_ADC_CAL_EN_MASK (0x20U)
#define ADC_ADC_REG_GENERAL_ADC_CAL_EN_SHIFT (5U)
/*! adc_cal_en - calibration enable, auto cleared after calibration done
 */
#define ADC_ADC_REG_GENERAL_ADC_CAL_EN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_GENERAL_ADC_CAL_EN_SHIFT)) & ADC_ADC_REG_GENERAL_ADC_CAL_EN_MASK)
#define ADC_ADC_REG_GENERAL_CLK_DIV_RATIO_MASK (0x3F00U)
#define ADC_ADC_REG_GENERAL_CLK_DIV_RATIO_SHIFT (8U)
/*! clk_div_ratio - analog 64M clock division ratio
 */
#define ADC_ADC_REG_GENERAL_CLK_DIV_RATIO(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_GENERAL_CLK_DIV_RATIO_SHIFT)) & ADC_ADC_REG_GENERAL_CLK_DIV_RATIO_MASK)
/*! @} */

/*! @name ADC_REG_CONFIG -  */
/*! @{ */
#define ADC_ADC_REG_CONFIG_TRIGGER_SEL_MASK (0xFU)
#define ADC_ADC_REG_CONFIG_TRIGGER_SEL_SHIFT (0U)
/*! trigger_sel - External trigger source select bits
 */
#define ADC_ADC_REG_CONFIG_TRIGGER_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_TRIGGER_SEL_SHIFT)) & ADC_ADC_REG_CONFIG_TRIGGER_SEL_MASK)
#define ADC_ADC_REG_CONFIG_TRIGGER_EN_MASK (0x10U)
#define ADC_ADC_REG_CONFIG_TRIGGER_EN_SHIFT (4U)
/*! trigger_en - External elevel trigger enable bit, support gpadc_trigger/gpadc_data_valid handshake
 *  0b0..
 *  0b1..conversion start further controlled by external level signal
 */
#define ADC_ADC_REG_CONFIG_TRIGGER_EN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_TRIGGER_EN_SHIFT)) & ADC_ADC_REG_CONFIG_TRIGGER_EN_MASK)
#define ADC_ADC_REG_CONFIG_DUAL_MODE_MASK (0x20U)
#define ADC_ADC_REG_CONFIG_DUAL_MODE_SHIFT (5U)
/*! dual_mode - dual mode select
 *  0b0..simultaneous mode
 *  0b1..interleave mode
 */
#define ADC_ADC_REG_CONFIG_DUAL_MODE(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_DUAL_MODE_SHIFT)) & ADC_ADC_REG_CONFIG_DUAL_MODE_MASK)
#define ADC_ADC_REG_CONFIG_SINGLE_DUAL_MASK (0x40U)
#define ADC_ADC_REG_CONFIG_SINGLE_DUAL_SHIFT (6U)
/*! single_dual - work mode select
 *  0b0..independent mode
 *  0b1..dual mode
 */
#define ADC_ADC_REG_CONFIG_SINGLE_DUAL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_SINGLE_DUAL_SHIFT)) & ADC_ADC_REG_CONFIG_SINGLE_DUAL_MASK)
#define ADC_ADC_REG_CONFIG_CONT_CONV_EN_MASK (0x100U)
#define ADC_ADC_REG_CONFIG_CONT_CONV_EN_SHIFT (8U)
/*! cont_conv_en - To enable continuous conversion
 *  0b0..one shot conversion
 *  0b1..continuous conversion
 */
#define ADC_ADC_REG_CONFIG_CONT_CONV_EN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_CONT_CONV_EN_SHIFT)) & ADC_ADC_REG_CONFIG_CONT_CONV_EN_MASK)
#define ADC_ADC_REG_CONFIG_DATA_FORMAT_SEL_MASK (0x200U)
#define ADC_ADC_REG_CONFIG_DATA_FORMAT_SEL_SHIFT (9U)
/*! data_format_sel - set data format for the final data
 *  0b0..signed differential code in two's complement
 *  0b1..unsigned single-end code
 */
#define ADC_ADC_REG_CONFIG_DATA_FORMAT_SEL(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_DATA_FORMAT_SEL_SHIFT)) & ADC_ADC_REG_CONFIG_DATA_FORMAT_SEL_MASK)
#define ADC_ADC_REG_CONFIG_CAL_VREF_SEL_MASK (0x400U)
#define ADC_ADC_REG_CONFIG_CAL_VREF_SEL_SHIFT (10U)
/*! cal_vref_sel - select input reference channel for gain calibration
 *  0b0..select internal vref as input for calibration
 *  0b1..select external vref as input for calibration
 */
#define ADC_ADC_REG_CONFIG_CAL_VREF_SEL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_CAL_VREF_SEL_SHIFT)) & ADC_ADC_REG_CONFIG_CAL_VREF_SEL_MASK)
#define ADC_ADC_REG_CONFIG_CAL_DATA_RST_MASK (0x800U)
#define ADC_ADC_REG_CONFIG_CAL_DATA_RST_SHIFT (11U)
/*! cal_data_rst - reset the self calibration data.
 *  0b0..no reset
 *  0b1..
 */
#define ADC_ADC_REG_CONFIG_CAL_DATA_RST(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_CAL_DATA_RST_SHIFT)) & ADC_ADC_REG_CONFIG_CAL_DATA_RST_MASK)
#define ADC_ADC_REG_CONFIG_CAL_DATA_SEL_MASK (0x1000U)
#define ADC_ADC_REG_CONFIG_CAL_DATA_SEL_SHIFT (12U)
/*! cal_data_sel - select calibration data source.
 *  0b0..use self calibration data
 *  0b1..user user defined calibration data
 */
#define ADC_ADC_REG_CONFIG_CAL_DATA_SEL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_CAL_DATA_SEL_SHIFT)) & ADC_ADC_REG_CONFIG_CAL_DATA_SEL_MASK)
#define ADC_ADC_REG_CONFIG_AVG_SEL_MASK (0xE000U)
#define ADC_ADC_REG_CONFIG_AVG_SEL_SHIFT (13U)
/*! avg_sel - moving average length
 */
#define ADC_ADC_REG_CONFIG_AVG_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_AVG_SEL_SHIFT)) & ADC_ADC_REG_CONFIG_AVG_SEL_MASK)
#define ADC_ADC_REG_CONFIG_SCAN_LENGTH_MASK (0xF0000U)
#define ADC_ADC_REG_CONFIG_SCAN_LENGTH_SHIFT (16U)
/*! scan_length - scan converation length, actual length is scan_length+1.
 */
#define ADC_ADC_REG_CONFIG_SCAN_LENGTH(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_SCAN_LENGTH_SHIFT)) & ADC_ADC_REG_CONFIG_SCAN_LENGTH_MASK)
#define ADC_ADC_REG_CONFIG_PWR_MODE_MASK (0x100000U)
#define ADC_ADC_REG_CONFIG_PWR_MODE_SHIFT (20U)
/*! pwr_mode - ADC power mode select.
 *  0b0..Power mode 0. Analog biasing and reference block are powered up when both global_en and gpadc_conv_start is 1
 *  0b1..Power mode 1. Analog biasing and reference block are powered up once gpadc_global_en is 1
 */
#define ADC_ADC_REG_CONFIG_PWR_MODE(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_CONFIG_PWR_MODE_SHIFT)) & ADC_ADC_REG_CONFIG_PWR_MODE_MASK)
/*! @} */

/*! @name ADC_REG_INTERVAL -  */
/*! @{ */
#define ADC_ADC_REG_INTERVAL_WARMUP_TIME_MASK (0x1FU)
#define ADC_ADC_REG_INTERVAL_WARMUP_TIME_SHIFT (0U)
/*! Warmup_time - warmup time, should be set equal to or higher than 1uS.
 *  0b00000..ADC warm-up is 1us
 *  0b11111..ADC warm-up is 32us
 */
#define ADC_ADC_REG_INTERVAL_WARMUP_TIME(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_INTERVAL_WARMUP_TIME_SHIFT)) & ADC_ADC_REG_INTERVAL_WARMUP_TIME_MASK)
#define ADC_ADC_REG_INTERVAL_BYPASS_WARMUP_MASK (0x20U)
#define ADC_ADC_REG_INTERVAL_BYPASS_WARMUP_SHIFT (5U)
/*! bypass_warmup - Bypass warmup state inside adc.
 *  0b0..adc warmup state enabled (warmup period is controlled by warmup time)
 *  0b1..adc warmup state bypassed
 */
#define ADC_ADC_REG_INTERVAL_BYPASS_WARMUP(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_INTERVAL_BYPASS_WARMUP_SHIFT)) & ADC_ADC_REG_INTERVAL_BYPASS_WARMUP_MASK)
/*! @} */

/*! @name ADC_REG_ANA -  */
/*! @{ */
#define ADC_ADC_REG_ANA_TSEXT_SEL_MASK (0x1U)
#define ADC_ADC_REG_ANA_TSEXT_SEL_SHIFT (0U)
/*! tsext_sel - temperature sensor diode select
 *  0b0..internal diode mode
 *  0b1..external diode mode
 */
#define ADC_ADC_REG_ANA_TSEXT_SEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_TSEXT_SEL_SHIFT)) & ADC_ADC_REG_ANA_TSEXT_SEL_MASK)
#define ADC_ADC_REG_ANA_TS_EN_MASK (0x2U)
#define ADC_ADC_REG_ANA_TS_EN_SHIFT (1U)
/*! ts_en - temperature sensor enable, only enable when channel source is temperature sensor
 *  0b0..
 *  0b1..
 */
#define ADC_ADC_REG_ANA_TS_EN(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_TS_EN_SHIFT)) & ADC_ADC_REG_ANA_TS_EN_MASK)
#define ADC_ADC_REG_ANA_VREF_SCF_BYPASS_MASK (0x4U)
#define ADC_ADC_REG_ANA_VREF_SCF_BYPASS_SHIFT (2U)
/*! vref_scf_bypass - adc voltage reference buffer sc-filter bypass
 *  0b0..not bypass sc-filter
 *  0b1..bypass sc-filter
 */
#define ADC_ADC_REG_ANA_VREF_SCF_BYPASS(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_VREF_SCF_BYPASS_SHIFT)) & ADC_ADC_REG_ANA_VREF_SCF_BYPASS_MASK)
#define ADC_ADC_REG_ANA_VREF_CHOP_EN_MASK (0x8U)
#define ADC_ADC_REG_ANA_VREF_CHOP_EN_SHIFT (3U)
/*! vref_chop_en - adc voltage reference buffer chopper enable
 *  0b0..disable chopper
 *  0b1..enable chopper
 */
#define ADC_ADC_REG_ANA_VREF_CHOP_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_VREF_CHOP_EN_SHIFT)) & ADC_ADC_REG_ANA_VREF_CHOP_EN_MASK)
#define ADC_ADC_REG_ANA_VREF_SEL_MASK (0x30U)
#define ADC_ADC_REG_ANA_VREF_SEL_SHIFT (4U)
/*! vref_sel - adc reference voltage select.
 *  0b00..Internal 1.8V vaa
 *  0b01..Internal 1.2V bandgap
 *  0b10..External single-ended reference (gpadc_ch[3])
 *  0b11..Internal 1.2V bandgap with external bypass pin (gpadc_ch[3])
 */
#define ADC_ADC_REG_ANA_VREF_SEL(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_VREF_SEL_SHIFT)) & ADC_ADC_REG_ANA_VREF_SEL_MASK)
#define ADC_ADC_REG_ANA_SINGLEDIFF_MASK (0x400U)
#define ADC_ADC_REG_ANA_SINGLEDIFF_SHIFT (10U)
/*! Singlediff - Select single ended or differential input.
 *  0b0..Single-ended input
 *  0b1..Differential input
 */
#define ADC_ADC_REG_ANA_SINGLEDIFF(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_SINGLEDIFF_SHIFT)) & ADC_ADC_REG_ANA_SINGLEDIFF_MASK)
#define ADC_ADC_REG_ANA_INBUF_GAIN_MASK (0x1800U)
#define ADC_ADC_REG_ANA_INBUF_GAIN_SHIFT (11U)
/*! inbuf_gain - adc gain control. Also select input voltage range.
 *  0b00..PGA gain is 0.5. Input voltage range is 2*vref
 *  0b01..PGA gain is 1. Input voltage range is vref
 *  0b10..PGA gain is 2. Input voltage range is 0.5*vref
 *  0b11..reserved
 */
#define ADC_ADC_REG_ANA_INBUF_GAIN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_INBUF_GAIN_SHIFT)) & ADC_ADC_REG_ANA_INBUF_GAIN_MASK)
#define ADC_ADC_REG_ANA_INBUF_CHOP_EN_MASK (0x2000U)
#define ADC_ADC_REG_ANA_INBUF_CHOP_EN_SHIFT (13U)
/*! inbuf_chop_en - Input buffer chopper enable
 *  0b0..disable chopper
 *  0b1..enable chopper
 */
#define ADC_ADC_REG_ANA_INBUF_CHOP_EN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_INBUF_CHOP_EN_SHIFT)) & ADC_ADC_REG_ANA_INBUF_CHOP_EN_MASK)
#define ADC_ADC_REG_ANA_INBUF_EN_MASK (0x4000U)
#define ADC_ADC_REG_ANA_INBUF_EN_SHIFT (14U)
/*! inbuf_en - gpadc input gain buffer enable bit.
 *  0b0..input gain buffer disabled
 *  0b1..input gain buffer enabled
 */
#define ADC_ADC_REG_ANA_INBUF_EN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_INBUF_EN_SHIFT)) & ADC_ADC_REG_ANA_INBUF_EN_MASK)
#define ADC_ADC_REG_ANA_CHOP_EN_MASK (0x8000U)
#define ADC_ADC_REG_ANA_CHOP_EN_SHIFT (15U)
/*! chop_en - adc chopper/auto-zero(only in 12bit mode) enable
 *  0b0..disable chopper
 *  0b1..enable chopper
 */
#define ADC_ADC_REG_ANA_CHOP_EN(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_CHOP_EN_SHIFT)) & ADC_ADC_REG_ANA_CHOP_EN_MASK)
#define ADC_ADC_REG_ANA_BIAS_SEL_MASK (0x10000U)
#define ADC_ADC_REG_ANA_BIAS_SEL_SHIFT (16U)
/*! bias_sel - adc analog portion low power mode select. Half the biasing current for modulator when enabled.
 *  0b0..Full biasing current
 *  0b1..Half biasing current
 */
#define ADC_ADC_REG_ANA_BIAS_SEL(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_BIAS_SEL_SHIFT)) & ADC_ADC_REG_ANA_BIAS_SEL_MASK)
#define ADC_ADC_REG_ANA_RES_SEL_MASK (0x60000U)
#define ADC_ADC_REG_ANA_RES_SEL_SHIFT (17U)
/*! res_sel - adc resolution/data rate select
 */
#define ADC_ADC_REG_ANA_RES_SEL(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ANA_RES_SEL_SHIFT)) & ADC_ADC_REG_ANA_RES_SEL_MASK)
/*! @} */

/*! @name ADC_REG_SCN1 - adc converation sequence 1 */
/*! @{ */
#define ADC_ADC_REG_SCN1_SCAN_CH_0_MASK (0xFU)
#define ADC_ADC_REG_SCN1_SCAN_CH_0_SHIFT (0U)
/*! scan_ch_0 - amux source 0
 */
#define ADC_ADC_REG_SCN1_SCAN_CH_0(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN1_SCAN_CH_0_SHIFT)) & ADC_ADC_REG_SCN1_SCAN_CH_0_MASK)
#define ADC_ADC_REG_SCN1_SCAN_CH_1_MASK (0xF0U)
#define ADC_ADC_REG_SCN1_SCAN_CH_1_SHIFT (4U)
/*! scan_ch_1 - amux source 1
 */
#define ADC_ADC_REG_SCN1_SCAN_CH_1(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN1_SCAN_CH_1_SHIFT)) & ADC_ADC_REG_SCN1_SCAN_CH_1_MASK)
#define ADC_ADC_REG_SCN1_SCAN_CH_2_MASK (0xF00U)
#define ADC_ADC_REG_SCN1_SCAN_CH_2_SHIFT (8U)
/*! scan_ch_2 - amux source 2
 */
#define ADC_ADC_REG_SCN1_SCAN_CH_2(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN1_SCAN_CH_2_SHIFT)) & ADC_ADC_REG_SCN1_SCAN_CH_2_MASK)
#define ADC_ADC_REG_SCN1_SCAN_CH_3_MASK (0xF000U)
#define ADC_ADC_REG_SCN1_SCAN_CH_3_SHIFT (12U)
/*! scan_ch_3 - amux source 3
 */
#define ADC_ADC_REG_SCN1_SCAN_CH_3(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN1_SCAN_CH_3_SHIFT)) & ADC_ADC_REG_SCN1_SCAN_CH_3_MASK)
#define ADC_ADC_REG_SCN1_SCAN_CH_4_MASK (0xF0000U)
#define ADC_ADC_REG_SCN1_SCAN_CH_4_SHIFT (16U)
/*! scan_ch_4 - amux source 4
 */
#define ADC_ADC_REG_SCN1_SCAN_CH_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN1_SCAN_CH_4_SHIFT)) & ADC_ADC_REG_SCN1_SCAN_CH_4_MASK)
#define ADC_ADC_REG_SCN1_SCAN_CH_5_MASK (0xF00000U)
#define ADC_ADC_REG_SCN1_SCAN_CH_5_SHIFT (20U)
/*! scan_ch_5 - amux source 5
 */
#define ADC_ADC_REG_SCN1_SCAN_CH_5(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN1_SCAN_CH_5_SHIFT)) & ADC_ADC_REG_SCN1_SCAN_CH_5_MASK)
#define ADC_ADC_REG_SCN1_SCAN_CH_6_MASK (0xF000000U)
#define ADC_ADC_REG_SCN1_SCAN_CH_6_SHIFT (24U)
/*! scan_ch_6 - amux source 6
 */
#define ADC_ADC_REG_SCN1_SCAN_CH_6(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN1_SCAN_CH_6_SHIFT)) & ADC_ADC_REG_SCN1_SCAN_CH_6_MASK)
#define ADC_ADC_REG_SCN1_SCAN_CH_7_MASK (0xF0000000U)
#define ADC_ADC_REG_SCN1_SCAN_CH_7_SHIFT (28U)
/*! scan_ch_7 - amux source 7
 */
#define ADC_ADC_REG_SCN1_SCAN_CH_7(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN1_SCAN_CH_7_SHIFT)) & ADC_ADC_REG_SCN1_SCAN_CH_7_MASK)
/*! @} */

/*! @name ADC_REG_SCN2 - adc converation sequence 2 */
/*! @{ */
#define ADC_ADC_REG_SCN2_SCAN_CH_8_MASK (0xFU)
#define ADC_ADC_REG_SCN2_SCAN_CH_8_SHIFT (0U)
/*! scan_ch_8 - amux source 8
 */
#define ADC_ADC_REG_SCN2_SCAN_CH_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN2_SCAN_CH_8_SHIFT)) & ADC_ADC_REG_SCN2_SCAN_CH_8_MASK)
#define ADC_ADC_REG_SCN2_SCAN_CH_9_MASK (0xF0U)
#define ADC_ADC_REG_SCN2_SCAN_CH_9_SHIFT (4U)
/*! scan_ch_9 - amux source 9
 */
#define ADC_ADC_REG_SCN2_SCAN_CH_9(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN2_SCAN_CH_9_SHIFT)) & ADC_ADC_REG_SCN2_SCAN_CH_9_MASK)
#define ADC_ADC_REG_SCN2_SCAN_CH_10_MASK (0xF00U)
#define ADC_ADC_REG_SCN2_SCAN_CH_10_SHIFT (8U)
/*! scan_ch_10 - amux source 10
 */
#define ADC_ADC_REG_SCN2_SCAN_CH_10(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN2_SCAN_CH_10_SHIFT)) & ADC_ADC_REG_SCN2_SCAN_CH_10_MASK)
#define ADC_ADC_REG_SCN2_SCAN_CH_11_MASK (0xF000U)
#define ADC_ADC_REG_SCN2_SCAN_CH_11_SHIFT (12U)
/*! scan_ch_11 - amux source 11
 */
#define ADC_ADC_REG_SCN2_SCAN_CH_11(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN2_SCAN_CH_11_SHIFT)) & ADC_ADC_REG_SCN2_SCAN_CH_11_MASK)
#define ADC_ADC_REG_SCN2_SCAN_CH_12_MASK (0xF0000U)
#define ADC_ADC_REG_SCN2_SCAN_CH_12_SHIFT (16U)
/*! scan_ch_12 - amux source 12
 */
#define ADC_ADC_REG_SCN2_SCAN_CH_12(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN2_SCAN_CH_12_SHIFT)) & ADC_ADC_REG_SCN2_SCAN_CH_12_MASK)
#define ADC_ADC_REG_SCN2_SCAN_CH_13_MASK (0xF00000U)
#define ADC_ADC_REG_SCN2_SCAN_CH_13_SHIFT (20U)
/*! scan_ch_13 - amux source 13
 */
#define ADC_ADC_REG_SCN2_SCAN_CH_13(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN2_SCAN_CH_13_SHIFT)) & ADC_ADC_REG_SCN2_SCAN_CH_13_MASK)
#define ADC_ADC_REG_SCN2_SCAN_CH_14_MASK (0xF000000U)
#define ADC_ADC_REG_SCN2_SCAN_CH_14_SHIFT (24U)
/*! scan_ch_14 - amux source 14
 */
#define ADC_ADC_REG_SCN2_SCAN_CH_14(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN2_SCAN_CH_14_SHIFT)) & ADC_ADC_REG_SCN2_SCAN_CH_14_MASK)
#define ADC_ADC_REG_SCN2_SCAN_CH_15_MASK (0xF0000000U)
#define ADC_ADC_REG_SCN2_SCAN_CH_15_SHIFT (28U)
/*! scan_ch_15 - amux source 15
 */
#define ADC_ADC_REG_SCN2_SCAN_CH_15(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_SCN2_SCAN_CH_15_SHIFT)) & ADC_ADC_REG_SCN2_SCAN_CH_15_MASK)
/*! @} */

/*! @name ADC_REG_RESULT_BUF -  */
/*! @{ */
#define ADC_ADC_REG_RESULT_BUF_WIDTH_SEL_MASK (0x1U)
#define ADC_ADC_REG_RESULT_BUF_WIDTH_SEL_SHIFT (0U)
/*! width_sel - adc finial result fifo data packed format select, must set scan_length as even when choose 32-bits
 *  0b0..16-bits and adc_reg_result fifo is lower 16-bits effective
 *  0b1..32-bits and adc_reg_result fifo is 32-bits effective
 */
#define ADC_ADC_REG_RESULT_BUF_WIDTH_SEL(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_RESULT_BUF_WIDTH_SEL_SHIFT)) & ADC_ADC_REG_RESULT_BUF_WIDTH_SEL_MASK)
/*! @} */

/*! @name ADC_REG_DMAR -  */
/*! @{ */
#define ADC_ADC_REG_DMAR_DMA_EN_MASK (0x1U)
#define ADC_ADC_REG_DMAR_DMA_EN_SHIFT (0U)
/*! dma_en - dma enbale
 *  0b0..disable dma handshake. This will also clear remaining dma request to system dmac
 *  0b1..enable dma handshake. Must enable after conv_start is asserted to ensure FIFO is cleared.
 */
#define ADC_ADC_REG_DMAR_DMA_EN(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_DMAR_DMA_EN_SHIFT)) & ADC_ADC_REG_DMAR_DMA_EN_MASK)
#define ADC_ADC_REG_DMAR_FIFO_THL_MASK (0x6U)
#define ADC_ADC_REG_DMAR_FIFO_THL_SHIFT (1U)
/*! fifo_thl - fifo threshold
 *  0b00..1 data
 *  0b01..4 data
 *  0b10..8 data
 *  0b11..16 data
 */
#define ADC_ADC_REG_DMAR_FIFO_THL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_DMAR_FIFO_THL_SHIFT)) & ADC_ADC_REG_DMAR_FIFO_THL_MASK)
/*! @} */

/*! @name ADC_REG_STATUS -  */
/*! @{ */
#define ADC_ADC_REG_STATUS_ACT_MASK (0x1U)
#define ADC_ADC_REG_STATUS_ACT_SHIFT (0U)
/*! act - adc status
 *  0b0..ADC conversion inactive status
 *  0b1..ADC conversion active status
 */
#define ADC_ADC_REG_STATUS_ACT(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_STATUS_ACT_SHIFT)) & ADC_ADC_REG_STATUS_ACT_MASK)
#define ADC_ADC_REG_STATUS_FIFO_NE_MASK (0x2U)
#define ADC_ADC_REG_STATUS_FIFO_NE_SHIFT (1U)
/*! fifo_ne - fifo not empty status
 */
#define ADC_ADC_REG_STATUS_FIFO_NE(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_STATUS_FIFO_NE_SHIFT)) & ADC_ADC_REG_STATUS_FIFO_NE_MASK)
#define ADC_ADC_REG_STATUS_FIFO_FULL_MASK (0x4U)
#define ADC_ADC_REG_STATUS_FIFO_FULL_SHIFT (2U)
/*! fifo_full - fifo full status
 */
#define ADC_ADC_REG_STATUS_FIFO_FULL(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_STATUS_FIFO_FULL_SHIFT)) & ADC_ADC_REG_STATUS_FIFO_FULL_MASK)
#define ADC_ADC_REG_STATUS_FIFO_DATA_COUNT_MASK (0x1F8U)
#define ADC_ADC_REG_STATUS_FIFO_DATA_COUNT_SHIFT (3U)
/*! fifo_data_count - fifo data number
 */
#define ADC_ADC_REG_STATUS_FIFO_DATA_COUNT(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_STATUS_FIFO_DATA_COUNT_SHIFT)) & ADC_ADC_REG_STATUS_FIFO_DATA_COUNT_MASK)
/*! @} */

/*! @name ADC_REG_ISR -  */
/*! @{ */
#define ADC_ADC_REG_ISR_RDY_MASK (0x1U)
#define ADC_ADC_REG_ISR_RDY_SHIFT (0U)
/*! rdy - Conversion data ready interrupt flag
 */
#define ADC_ADC_REG_ISR_RDY(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ISR_RDY_SHIFT)) & ADC_ADC_REG_ISR_RDY_MASK)
#define ADC_ADC_REG_ISR_GAINSAT_MASK (0x2U)
#define ADC_ADC_REG_ISR_GAINSAT_SHIFT (1U)
/*! gainsat - Gain correction saturation interrupt flag
 */
#define ADC_ADC_REG_ISR_GAINSAT(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ISR_GAINSAT_SHIFT)) & ADC_ADC_REG_ISR_GAINSAT_MASK)
#define ADC_ADC_REG_ISR_OFFSAT_MASK (0x4U)
#define ADC_ADC_REG_ISR_OFFSAT_SHIFT (2U)
/*! offsat - Offset correction saturation interrupt flag
 */
#define ADC_ADC_REG_ISR_OFFSAT(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ISR_OFFSAT_SHIFT)) & ADC_ADC_REG_ISR_OFFSAT_MASK)
#define ADC_ADC_REG_ISR_DATASAT_NEG_MASK (0x8U)
#define ADC_ADC_REG_ISR_DATASAT_NEG_SHIFT (3U)
/*! datasat_neg - ADC data negative side saturation interrupt flag
 */
#define ADC_ADC_REG_ISR_DATASAT_NEG(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ISR_DATASAT_NEG_SHIFT)) & ADC_ADC_REG_ISR_DATASAT_NEG_MASK)
#define ADC_ADC_REG_ISR_DATASAT_POS_MASK (0x10U)
#define ADC_ADC_REG_ISR_DATASAT_POS_SHIFT (4U)
/*! datasat_pos - ADC data positive side saturation interrupt flag
 */
#define ADC_ADC_REG_ISR_DATASAT_POS(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ISR_DATASAT_POS_SHIFT)) & ADC_ADC_REG_ISR_DATASAT_POS_MASK)
#define ADC_ADC_REG_ISR_FIFO_OVERRUN_MASK (0x20U)
#define ADC_ADC_REG_ISR_FIFO_OVERRUN_SHIFT (5U)
/*! fifo_overrun - FIFO overrun interrupt flag
 */
#define ADC_ADC_REG_ISR_FIFO_OVERRUN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ISR_FIFO_OVERRUN_SHIFT)) & ADC_ADC_REG_ISR_FIFO_OVERRUN_MASK)
#define ADC_ADC_REG_ISR_FIFO_UNDERRUN_MASK (0x40U)
#define ADC_ADC_REG_ISR_FIFO_UNDERRUN_SHIFT (6U)
/*! fifo_underrun - FIFO underrun interrupt flag
 */
#define ADC_ADC_REG_ISR_FIFO_UNDERRUN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ISR_FIFO_UNDERRUN_SHIFT)) & ADC_ADC_REG_ISR_FIFO_UNDERRUN_MASK)
/*! @} */

/*! @name ADC_REG_IMR -  */
/*! @{ */
#define ADC_ADC_REG_IMR_RDY_MASK_MASK (0x1U)
#define ADC_ADC_REG_IMR_RDY_MASK_SHIFT (0U)
/*! rdy_mask - write 1 mask
 */
#define ADC_ADC_REG_IMR_RDY_MASK(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IMR_RDY_MASK_SHIFT)) & ADC_ADC_REG_IMR_RDY_MASK_MASK)
#define ADC_ADC_REG_IMR_GAINSAT_MASK_MASK (0x2U)
#define ADC_ADC_REG_IMR_GAINSAT_MASK_SHIFT (1U)
/*! gainsat_mask - write 1 mask
 */
#define ADC_ADC_REG_IMR_GAINSAT_MASK(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IMR_GAINSAT_MASK_SHIFT)) & ADC_ADC_REG_IMR_GAINSAT_MASK_MASK)
#define ADC_ADC_REG_IMR_OFFSAT_MASK_MASK (0x4U)
#define ADC_ADC_REG_IMR_OFFSAT_MASK_SHIFT (2U)
/*! offsat_mask - write 1 mask
 */
#define ADC_ADC_REG_IMR_OFFSAT_MASK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IMR_OFFSAT_MASK_SHIFT)) & ADC_ADC_REG_IMR_OFFSAT_MASK_MASK)
#define ADC_ADC_REG_IMR_DATASAT_NEG_MASK_MASK (0x8U)
#define ADC_ADC_REG_IMR_DATASAT_NEG_MASK_SHIFT (3U)
/*! datasat_neg_mask - write 1 mask
 */
#define ADC_ADC_REG_IMR_DATASAT_NEG_MASK(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IMR_DATASAT_NEG_MASK_SHIFT)) & ADC_ADC_REG_IMR_DATASAT_NEG_MASK_MASK)
#define ADC_ADC_REG_IMR_DATASAT_POS_MASK_MASK (0x10U)
#define ADC_ADC_REG_IMR_DATASAT_POS_MASK_SHIFT (4U)
/*! datasat_pos_mask - write 1 mask
 */
#define ADC_ADC_REG_IMR_DATASAT_POS_MASK(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IMR_DATASAT_POS_MASK_SHIFT)) & ADC_ADC_REG_IMR_DATASAT_POS_MASK_MASK)
#define ADC_ADC_REG_IMR_FIFO_OVERRUN_MASK_MASK (0x20U)
#define ADC_ADC_REG_IMR_FIFO_OVERRUN_MASK_SHIFT (5U)
/*! fifo_overrun_mask - write 1 mask
 */
#define ADC_ADC_REG_IMR_FIFO_OVERRUN_MASK(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IMR_FIFO_OVERRUN_MASK_SHIFT)) & ADC_ADC_REG_IMR_FIFO_OVERRUN_MASK_MASK)
#define ADC_ADC_REG_IMR_FIFO_UNDERRUN_MASK_MASK (0x40U)
#define ADC_ADC_REG_IMR_FIFO_UNDERRUN_MASK_SHIFT (6U)
/*! fifo_underrun_mask - write 1 mask
 */
#define ADC_ADC_REG_IMR_FIFO_UNDERRUN_MASK(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IMR_FIFO_UNDERRUN_MASK_SHIFT)) & ADC_ADC_REG_IMR_FIFO_UNDERRUN_MASK_MASK)
/*! @} */

/*! @name ADC_REG_IRSR -  */
/*! @{ */
#define ADC_ADC_REG_IRSR_RDY_RAW_MASK (0x1U)
#define ADC_ADC_REG_IRSR_RDY_RAW_SHIFT (0U)
/*! rdy_raw - The corresponding flag will be captured into this register regardless the interrupt
 *    mask. Will be cleared only when int_clr is asserted.
 */
#define ADC_ADC_REG_IRSR_RDY_RAW(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IRSR_RDY_RAW_SHIFT)) & ADC_ADC_REG_IRSR_RDY_RAW_MASK)
#define ADC_ADC_REG_IRSR_GAINSAT_RAW_MASK (0x2U)
#define ADC_ADC_REG_IRSR_GAINSAT_RAW_SHIFT (1U)
/*! gainsat_raw - The corresponding flag will be captured into this register regardless the
 *    interrupt mask. Will be cleared only when int_clr is asserted.
 */
#define ADC_ADC_REG_IRSR_GAINSAT_RAW(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IRSR_GAINSAT_RAW_SHIFT)) & ADC_ADC_REG_IRSR_GAINSAT_RAW_MASK)
#define ADC_ADC_REG_IRSR_OFFSAT_RAW_MASK (0x4U)
#define ADC_ADC_REG_IRSR_OFFSAT_RAW_SHIFT (2U)
/*! offsat_raw - The corresponding flag will be captured into this register regardless the interrupt
 *    mask. Will be cleared only when int_clr is asserted.
 */
#define ADC_ADC_REG_IRSR_OFFSAT_RAW(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IRSR_OFFSAT_RAW_SHIFT)) & ADC_ADC_REG_IRSR_OFFSAT_RAW_MASK)
#define ADC_ADC_REG_IRSR_DATASAT_NEG_RAW_MASK (0x8U)
#define ADC_ADC_REG_IRSR_DATASAT_NEG_RAW_SHIFT (3U)
/*! datasat_neg_raw - The corresponding flag will be captured into this register regardless the
 *    interrupt mask. Will be cleared only when int_clr is asserted.
 */
#define ADC_ADC_REG_IRSR_DATASAT_NEG_RAW(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IRSR_DATASAT_NEG_RAW_SHIFT)) & ADC_ADC_REG_IRSR_DATASAT_NEG_RAW_MASK)
#define ADC_ADC_REG_IRSR_DATASAT_POS_RAW_MASK (0x10U)
#define ADC_ADC_REG_IRSR_DATASAT_POS_RAW_SHIFT (4U)
/*! datasat_pos_raw - The corresponding flag will be captured into this register regardless the
 *    interrupt mask. Will be cleared only when int_clr is asserted.
 */
#define ADC_ADC_REG_IRSR_DATASAT_POS_RAW(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IRSR_DATASAT_POS_RAW_SHIFT)) & ADC_ADC_REG_IRSR_DATASAT_POS_RAW_MASK)
#define ADC_ADC_REG_IRSR_FIFO_OVERRUN_RAW_MASK (0x20U)
#define ADC_ADC_REG_IRSR_FIFO_OVERRUN_RAW_SHIFT (5U)
/*! fifo_overrun_raw - The corresponding flag will be captured into this register regardless the
 *    interrupt mask. Will be cleared only when int_clr is asserted.
 */
#define ADC_ADC_REG_IRSR_FIFO_OVERRUN_RAW(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IRSR_FIFO_OVERRUN_RAW_SHIFT)) & ADC_ADC_REG_IRSR_FIFO_OVERRUN_RAW_MASK)
#define ADC_ADC_REG_IRSR_FIFO_UNDERRUN_RAW_MASK (0x40U)
#define ADC_ADC_REG_IRSR_FIFO_UNDERRUN_RAW_SHIFT (6U)
/*! fifo_underrun_raw - The corresponding flag will be captured into this register regardless the
 *    interrupt mask. Will be cleared only when int_clr is asserted.
 */
#define ADC_ADC_REG_IRSR_FIFO_UNDERRUN_RAW(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_IRSR_FIFO_UNDERRUN_RAW_SHIFT)) & ADC_ADC_REG_IRSR_FIFO_UNDERRUN_RAW_MASK)
/*! @} */

/*! @name ADC_REG_ICR -  */
/*! @{ */
#define ADC_ADC_REG_ICR_RDY_CLR_MASK (0x1U)
#define ADC_ADC_REG_ICR_RDY_CLR_SHIFT (0U)
/*! rdy_clr - Write 1 to clear both adc_reg_irsr and adc_reg_isr
 */
#define ADC_ADC_REG_ICR_RDY_CLR(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ICR_RDY_CLR_SHIFT)) & ADC_ADC_REG_ICR_RDY_CLR_MASK)
#define ADC_ADC_REG_ICR_GAINSAT_CLR_MASK (0x2U)
#define ADC_ADC_REG_ICR_GAINSAT_CLR_SHIFT (1U)
/*! gainsat_clr - Write 1 to clear both adc_reg_irsr and adc_reg_isr
 */
#define ADC_ADC_REG_ICR_GAINSAT_CLR(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ICR_GAINSAT_CLR_SHIFT)) & ADC_ADC_REG_ICR_GAINSAT_CLR_MASK)
#define ADC_ADC_REG_ICR_OFFSAT_CLR_MASK (0x4U)
#define ADC_ADC_REG_ICR_OFFSAT_CLR_SHIFT (2U)
/*! offsat_clr - Write 1 to clear both adc_reg_irsr and adc_reg_isr
 */
#define ADC_ADC_REG_ICR_OFFSAT_CLR(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ICR_OFFSAT_CLR_SHIFT)) & ADC_ADC_REG_ICR_OFFSAT_CLR_MASK)
#define ADC_ADC_REG_ICR_DATASAT_NEG_CLR_MASK (0x8U)
#define ADC_ADC_REG_ICR_DATASAT_NEG_CLR_SHIFT (3U)
/*! datasat_neg_clr - Write 1 to clear both adc_reg_irsr and adc_reg_isr
 */
#define ADC_ADC_REG_ICR_DATASAT_NEG_CLR(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ICR_DATASAT_NEG_CLR_SHIFT)) & ADC_ADC_REG_ICR_DATASAT_NEG_CLR_MASK)
#define ADC_ADC_REG_ICR_DATASAT_POS_CLR_MASK (0x10U)
#define ADC_ADC_REG_ICR_DATASAT_POS_CLR_SHIFT (4U)
/*! datasat_pos_clr - Write 1 to clear both adc_reg_irsr and adc_reg_isr
 */
#define ADC_ADC_REG_ICR_DATASAT_POS_CLR(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ICR_DATASAT_POS_CLR_SHIFT)) & ADC_ADC_REG_ICR_DATASAT_POS_CLR_MASK)
#define ADC_ADC_REG_ICR_FIFO_OVERRUN_CLR_MASK (0x20U)
#define ADC_ADC_REG_ICR_FIFO_OVERRUN_CLR_SHIFT (5U)
/*! fifo_overrun_clr - Write 1 to clear both adc_reg_irsr and adc_reg_isr
 */
#define ADC_ADC_REG_ICR_FIFO_OVERRUN_CLR(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ICR_FIFO_OVERRUN_CLR_SHIFT)) & ADC_ADC_REG_ICR_FIFO_OVERRUN_CLR_MASK)
#define ADC_ADC_REG_ICR_FIFO_UNDERRUN_CLR_MASK (0x40U)
#define ADC_ADC_REG_ICR_FIFO_UNDERRUN_CLR_SHIFT (6U)
/*! fifo_underrun_clr - Write 1 to clear both adc_reg_irsr and adc_reg_isr
 */
#define ADC_ADC_REG_ICR_FIFO_UNDERRUN_CLR(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_ICR_FIFO_UNDERRUN_CLR_SHIFT)) & ADC_ADC_REG_ICR_FIFO_UNDERRUN_CLR_MASK)
/*! @} */

/*! @name ADC_REG_RESULT -  */
/*! @{ */
#define ADC_ADC_REG_RESULT_DATA_MASK (0xFFFFFFFFU)
#define ADC_ADC_REG_RESULT_DATA_SHIFT (0U)
/*! data - ADC finial conversion result data, after calibratiob and signed/unsigned process
 */
#define ADC_ADC_REG_RESULT_DATA(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_RESULT_DATA_SHIFT)) & ADC_ADC_REG_RESULT_DATA_MASK)
/*! @} */

/*! @name ADC_REG_RAW_RESULT -  */
/*! @{ */
#define ADC_ADC_REG_RAW_RESULT_RAW_DATA_MASK (0x3FFFFFU)
#define ADC_ADC_REG_RAW_RESULT_RAW_DATA_SHIFT (0U)
/*! raw_data - ADC Raw data in signed 22bit format
 */
#define ADC_ADC_REG_RAW_RESULT_RAW_DATA(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_RAW_RESULT_RAW_DATA_SHIFT)) & ADC_ADC_REG_RAW_RESULT_RAW_DATA_MASK)
/*! @} */

/*! @name ADC_REG_OFFSET_CAL -  */
/*! @{ */
#define ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL_MASK (0xFFFFU)
#define ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL_SHIFT (0U)
/*! offset_cal - ADC self offset calibration value. 16-bit signed .
 */
#define ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL_SHIFT)) & ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL_MASK)
#define ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL_USR_MASK (0xFFFF0000U)
#define ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL_USR_SHIFT (16U)
/*! offset_cal_usr - User offset calibration data. 16-bit signed.
 */
#define ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL_USR(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL_USR_SHIFT)) & ADC_ADC_REG_OFFSET_CAL_OFFSET_CAL_USR_MASK)
/*! @} */

/*! @name ADC_REG_GAIN_CAL -  */
/*! @{ */
#define ADC_ADC_REG_GAIN_CAL_GAIN_CAL_MASK (0xFFFFU)
#define ADC_ADC_REG_GAIN_CAL_GAIN_CAL_SHIFT (0U)
/*! gain_cal - ADC self gain calibration value. 16-bit signed.
 */
#define ADC_ADC_REG_GAIN_CAL_GAIN_CAL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_GAIN_CAL_GAIN_CAL_SHIFT)) & ADC_ADC_REG_GAIN_CAL_GAIN_CAL_MASK)
#define ADC_ADC_REG_GAIN_CAL_GAIN_CAL_USR_MASK (0xFFFF0000U)
#define ADC_ADC_REG_GAIN_CAL_GAIN_CAL_USR_SHIFT (16U)
/*! gain_cal_usr - ADC user gain calibration value. 16-bit signed.
 */
#define ADC_ADC_REG_GAIN_CAL_GAIN_CAL_USR(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_GAIN_CAL_GAIN_CAL_USR_SHIFT)) & ADC_ADC_REG_GAIN_CAL_GAIN_CAL_USR_MASK)
/*! @} */

/*! @name ADC_REG_TEST -  */
/*! @{ */
#define ADC_ADC_REG_TEST_TEST_EN_MASK (0x1U)
#define ADC_ADC_REG_TEST_TEST_EN_SHIFT (0U)
/*! test_en - Analog test enable.
 *  0b0..disable analog test. adc_atest=Hi-Z
 *  0b1..enable analog test
 */
#define ADC_ADC_REG_TEST_TEST_EN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_TEST_TEST_EN_SHIFT)) & ADC_ADC_REG_TEST_TEST_EN_MASK)
#define ADC_ADC_REG_TEST_TEST_SEL_MASK (0xEU)
#define ADC_ADC_REG_TEST_TEST_SEL_SHIFT (1U)
#define ADC_ADC_REG_TEST_TEST_SEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_TEST_TEST_SEL_SHIFT)) & ADC_ADC_REG_TEST_TEST_SEL_MASK)
/*! @} */

/*! @name ADC_REG_AUDIO -  */
/*! @{ */
#define ADC_ADC_REG_AUDIO_EN_MASK (0x1U)
#define ADC_ADC_REG_AUDIO_EN_SHIFT (0U)
/*! en - Audio enable.
 *  0b0..disable audio pga and decimation rate select
 *  0b1..enable audio pga and decimation rate select
 */
#define ADC_ADC_REG_AUDIO_EN(x) (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_AUDIO_EN_SHIFT)) & ADC_ADC_REG_AUDIO_EN_MASK)
#define ADC_ADC_REG_AUDIO_PGA_GAIN_MASK (0x38U)
#define ADC_ADC_REG_AUDIO_PGA_GAIN_SHIFT (3U)
/*! pga_gain - Audio PGA voltage gain select
 */
#define ADC_ADC_REG_AUDIO_PGA_GAIN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_AUDIO_PGA_GAIN_SHIFT)) & ADC_ADC_REG_AUDIO_PGA_GAIN_MASK)
#define ADC_ADC_REG_AUDIO_PGA_CM_MASK (0x1C0U)
#define ADC_ADC_REG_AUDIO_PGA_CM_SHIFT (6U)
/*! pga_cm - Audio PGA output common mode control
 *  0b000..common mode is 0.82V
 *  0b001..common mode is 0.84V
 *  0b010..common mode is 0.86V
 *  0b011..common mode is 0.88V
 *  0b100..common mode is 0.90V
 *  0b101..common mode is 0.92V
 *  0b110..common mode is 0.94V
 *  0b111..common mode is 0.96V
 */
#define ADC_ADC_REG_AUDIO_PGA_CM(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_AUDIO_PGA_CM_SHIFT)) & ADC_ADC_REG_AUDIO_PGA_CM_MASK)
#define ADC_ADC_REG_AUDIO_PGA_CHOP_EN_MASK (0x200U)
#define ADC_ADC_REG_AUDIO_PGA_CHOP_EN_SHIFT (9U)
/*! pga_chop_en - Audio PGA chopper enable.
 *  0b0..disable audio pga chopper
 *  0b1..enable audio pga chopper
 */
#define ADC_ADC_REG_AUDIO_PGA_CHOP_EN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_AUDIO_PGA_CHOP_EN_SHIFT)) & ADC_ADC_REG_AUDIO_PGA_CHOP_EN_MASK)
/*! @} */

/*! @name ADC_REG_VOICE_DET -  */
/*! @{ */
#define ADC_ADC_REG_VOICE_DET_DET_EN_MASK (0x1U)
#define ADC_ADC_REG_VOICE_DET_DET_EN_SHIFT (0U)
/*! det_en - Voice level detection enable select
 *  0b0..Disable level detection
 *  0b1..Ensable level detection
 */
#define ADC_ADC_REG_VOICE_DET_DET_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_VOICE_DET_DET_EN_SHIFT)) & ADC_ADC_REG_VOICE_DET_DET_EN_MASK)
#define ADC_ADC_REG_VOICE_DET_LEVEL_SEL_MASK (0xEU)
#define ADC_ADC_REG_VOICE_DET_LEVEL_SEL_SHIFT (1U)
/*! level_sel - Voice level selection.
 */
#define ADC_ADC_REG_VOICE_DET_LEVEL_SEL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_VOICE_DET_LEVEL_SEL_SHIFT)) & ADC_ADC_REG_VOICE_DET_LEVEL_SEL_MASK)
/*! @} */

/*! @name ADC_REG_RSVD -  */
/*! @{ */
#define ADC_ADC_REG_RSVD_UNUSED_RESERVED_ADC_CONTROL_BITS_MASK (0xFFFFU)
#define ADC_ADC_REG_RSVD_UNUSED_RESERVED_ADC_CONTROL_BITS_SHIFT (0U)
#define ADC_ADC_REG_RSVD_UNUSED_RESERVED_ADC_CONTROL_BITS(x)                                                                       \
    (((uint32_t)(((uint32_t)(x)) << ADC_ADC_REG_RSVD_UNUSED_RESERVED_ADC_CONTROL_BITS_SHIFT)) &                                    \
     ADC_ADC_REG_RSVD_UNUSED_RESERVED_ADC_CONTROL_BITS_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group ADC_Register_Masks */

/* ADC - Peripheral instance base addresses */
/** Peripheral ADC base address */
#define ADC_BASE (0x460B0000u)
/** Peripheral ADC base pointer */
#define ADC ((ADC_Type *) ADC_BASE)
/** Array initializer of ADC peripheral base addresses */
#define ADC_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        ADC_BASE                                                                                                                   \
    }
/** Array initializer of ADC peripheral base pointers */
#define ADC_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        ADC                                                                                                                        \
    }
/** Interrupt vectors for the ADC peripheral type */
#define ADC_IRQS                                                                                                                   \
    {                                                                                                                              \
        ADC0_IRQn                                                                                                                  \
    }

/*!
 * @}
 */ /* end of group ADC_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- AES Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AES_Peripheral_Access_Layer AES Peripheral Access Layer
 * @{
 */

/** AES - Register Layout Typedef */
typedef struct
{
    __IO uint32_t CTRL1;    /**< AES Control Register 1, offset: 0x0 */
    __IO uint32_t CTRL2;    /**< AES Control Register 2, offset: 0x4 */
    __I uint32_t STATUS;    /**< AES Status Register, offset: 0x8 */
    __IO uint32_t ASTR_LEN; /**< AES Astr Length Register, offset: 0xC */
    __IO uint32_t MSTR_LEN; /**< AES Mstr Length Register, offset: 0x10 */
    __O uint32_t STR_IN;    /**< AES Stream Input Register, offset: 0x14 */
    __IO uint32_t IV0;      /**< AES Input Vector Register 0, offset: 0x18 */
    __IO uint32_t IV1;      /**< AES Input Vector Register 1, offset: 0x1C */
    __IO uint32_t IV2;      /**< AES Input Vector Register 2, offset: 0x20 */
    __IO uint32_t IV3;      /**< AES Input Vector Register 3, offset: 0x24 */
    __IO uint32_t KEY0;     /**< AES Key 0 Register, offset: 0x28 */
    __IO uint32_t KEY1;     /**< AES Key 1 Register, offset: 0x2C */
    __IO uint32_t KEY2;     /**< AES Key 2 Register, offset: 0x30 */
    __IO uint32_t KEY3;     /**< AES Key 3 Register, offset: 0x34 */
    __IO uint32_t KEY4;     /**< AES Key 4 Register, offset: 0x38 */
    __IO uint32_t KEY5;     /**< AES Key 5 Register, offset: 0x3C */
    __IO uint32_t KEY6;     /**< AES Key 6 Register, offset: 0x40 */
    __IO uint32_t KEY7;     /**< AES Key 7 Register, offset: 0x44 */
    __I uint32_t STR_OUT;   /**< AES Stream Output Port Register, offset: 0x48 */
    __I uint32_t OV0;       /**< AES Output Vector 0 Register, offset: 0x4C */
    __I uint32_t OV1;       /**< AES Output Vector 1 Register, offset: 0x50 */
    __I uint32_t OV2;       /**< AES Output Vector 2 Register, offset: 0x54 */
    __I uint32_t OV3;       /**< AES Output Vector 3 Register, offset: 0x58 */
    __I uint32_t ISR;       /**< AES Interrupt Status Register, offset: 0x5C */
    __IO uint32_t IMR;      /**< AES Interrupt Mask Register, offset: 0x60 */
    __I uint32_t IRSR;      /**< AES Interrupt Raw Status Register, offset: 0x64 */
    __IO uint32_t ICR;      /**< AES Interrupt Clear Register, offset: 0x68 */
    uint8_t RESERVED_0[32];
    __I uint32_t REV_ID; /**< AES Revision Register, offset: 0x8C */
} AES_Type;

/* ----------------------------------------------------------------------------
   -- AES Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AES_Register_Masks AES Register Masks
 * @{
 */

/*! @name CTRL1 - AES Control Register 1 */
/*! @{ */
#define AES_CTRL1_START_MASK (0x1U)
#define AES_CTRL1_START_SHIFT (0U)
/*! start - Start AES
 */
#define AES_CTRL1_START(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_START_SHIFT)) & AES_CTRL1_START_MASK)
#define AES_CTRL1_LOCK0_MASK (0x2U)
#define AES_CTRL1_LOCK0_SHIFT (1U)
/*! lock0 - Lock AES on MCU side
 *  0b0..Write 0 to release AES
 *  0b1..Write 1 to lock AES on behalf of MCU
 */
#define AES_CTRL1_LOCK0(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_LOCK0_SHIFT)) & AES_CTRL1_LOCK0_MASK)
#define AES_CTRL1_IF_CLR_MASK (0x4U)
#define AES_CTRL1_IF_CLR_SHIFT (2U)
/*! if_clr - Clear input FIFO
 */
#define AES_CTRL1_IF_CLR(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_IF_CLR_SHIFT)) & AES_CTRL1_IF_CLR_MASK)
#define AES_CTRL1_OF_CLR_MASK (0x8U)
#define AES_CTRL1_OF_CLR_SHIFT (3U)
/*! of_clr - Clear output FIFO
 */
#define AES_CTRL1_OF_CLR(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_OF_CLR_SHIFT)) & AES_CTRL1_OF_CLR_MASK)
#define AES_CTRL1_OUT_MSG_MASK (0x10U)
#define AES_CTRL1_OUT_MSG_SHIFT (4U)
/*! out_msg - Output stream to output FIFO
 *  0b0..block output stream from output FIFO
 *  0b1..forward output stream to output FIFO
 */
#define AES_CTRL1_OUT_MSG(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_OUT_MSG_SHIFT)) & AES_CTRL1_OUT_MSG_MASK)
#define AES_CTRL1_OUT_HDR_MASK (0x20U)
#define AES_CTRL1_OUT_HDR_SHIFT (5U)
/*! out_hdr - Output B0 and l(a) in CCM* mode
 *  0b0..do not output B0 and l(a) at the beginning of output stream
 *  0b1..output B0 and l(a) at the beginning of output stream
 */
#define AES_CTRL1_OUT_HDR(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_OUT_HDR_SHIFT)) & AES_CTRL1_OUT_HDR_MASK)
#define AES_CTRL1_PRI0_MASK (0x40U)
#define AES_CTRL1_PRI0_SHIFT (6U)
/*! pri0 - AES priority on MCU (software) side
 *  0b0..Low priority
 *  0b1..High priority
 */
#define AES_CTRL1_PRI0(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_PRI0_SHIFT)) & AES_CTRL1_PRI0_MASK)
#define AES_CTRL1_PRI1_MASK (0x80U)
#define AES_CTRL1_PRI1_SHIFT (7U)
/*! pri1 - AES priority on hardware (BH-MAC) side
 *  0b0..Low priority
 *  0b1..High priority
 */
#define AES_CTRL1_PRI1(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_PRI1_SHIFT)) & AES_CTRL1_PRI1_MASK)
#define AES_CTRL1_IO_SRC_MASK (0x100U)
#define AES_CTRL1_IO_SRC_SHIFT (8U)
/*! io_src - AES data input source
 *  0b0..I/O through register
 *  0b1..I/O through DMA
 */
#define AES_CTRL1_IO_SRC(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_IO_SRC_SHIFT)) & AES_CTRL1_IO_SRC_MASK)
#define AES_CTRL1_DMA_EN_MASK (0x200U)
#define AES_CTRL1_DMA_EN_SHIFT (9U)
/*! dma_en - Enable DMA
 *  0b0..Disable DMA
 *  0b1..Enable DMA
 */
#define AES_CTRL1_DMA_EN(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_DMA_EN_SHIFT)) & AES_CTRL1_DMA_EN_MASK)
#define AES_CTRL1_KEY_SIZE_MASK (0xC00U)
#define AES_CTRL1_KEY_SIZE_SHIFT (10U)
/*! key_size - Key size parameter
 *  0b00..16 bytes
 *  0b01..32 bytes
 *  0b10..24 bytes
 *  0b11..reserved
 */
#define AES_CTRL1_KEY_SIZE(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_KEY_SIZE_SHIFT)) & AES_CTRL1_KEY_SIZE_MASK)
#define AES_CTRL1_MIC_LEN_MASK (0x3000U)
#define AES_CTRL1_MIC_LEN_SHIFT (12U)
/*! mic_len - Length of MIC field
 *  0b00..0 bytes
 *  0b01..4 bytes
 *  0b10..8 bytes
 *  0b11..16 bytes
 */
#define AES_CTRL1_MIC_LEN(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_MIC_LEN_SHIFT)) & AES_CTRL1_MIC_LEN_MASK)
#define AES_CTRL1_OUT_MIC_MASK (0x4000U)
#define AES_CTRL1_OUT_MIC_SHIFT (14U)
/*! out_mic - Append MIC/HASH at the end of output stream in CCM* mode
 *  0b0..Not append MIC/HASH at the end of output stream in CCM* mode decryption or MMO mode
 *  0b1..Append MIC/HASH at the end of output stream in CCM* mode decryption or MMO mode
 */
#define AES_CTRL1_OUT_MIC(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_OUT_MIC_SHIFT)) & AES_CTRL1_OUT_MIC_MASK)
#define AES_CTRL1_DECRYPT_MASK (0x8000U)
#define AES_CTRL1_DECRYPT_SHIFT (15U)
/*! decrypt - Decrypt operation (ignored in MMO and BYPASS mode)
 *  0b0..
 *  0b1..
 */
#define AES_CTRL1_DECRYPT(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_DECRYPT_SHIFT)) & AES_CTRL1_DECRYPT_MASK)
#define AES_CTRL1_MODE_MASK (0x70000U)
#define AES_CTRL1_MODE_SHIFT (16U)
/*! mode - AES running mode
 *  0b000..
 *  0b001..
 *  0b010..
 *  0b011..RESERVED
 *  0b100..RESERVED
 *  0b101..CCM*
 *  0b110..
 *  0b111..
 */
#define AES_CTRL1_MODE(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_MODE_SHIFT)) & AES_CTRL1_MODE_MASK)
#define AES_CTRL1_CTR_MOD_MASK (0x3F80000U)
#define AES_CTRL1_CTR_MOD_SHIFT (19U)
/*! ctr_mod - CTR mode's counter modular
 */
#define AES_CTRL1_CTR_MOD(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_CTR_MOD_SHIFT)) & AES_CTRL1_CTR_MOD_MASK)
#define AES_CTRL1_CTS_MODE_MASK (0x4000000U)
#define AES_CTRL1_CTS_MODE_SHIFT (26U)
/*! cts_mode - Cipher stealing mode of CBC
 *  0b0..Marvell mode
 *  0b1..NIST-CS2 mode
 */
#define AES_CTRL1_CTS_MODE(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL1_CTS_MODE_SHIFT)) & AES_CTRL1_CTS_MODE_MASK)
/*! @} */

/*! @name CTRL2 - AES Control Register 2 */
/*! @{ */
#define AES_CTRL2_AES_RESET_MASK (0x1U)
#define AES_CTRL2_AES_RESET_SHIFT (0U)
/*! aes_reset - Reset AES
 *  0b0..un-reset AES
 *  0b1..Reset AES
 */
#define AES_CTRL2_AES_RESET(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL2_AES_RESET_SHIFT)) & AES_CTRL2_AES_RESET_MASK)
#define AES_CTRL2_AUTO_RESET_EN_MASK (0x2U)
#define AES_CTRL2_AUTO_RESET_EN_SHIFT (1U)
/*! auto_reset_en - Enable atutomatic reset after lock successfully
 *  0b0..No automatic reset
 *  0b1..Automatic reset after lock successfully
 */
#define AES_CTRL2_AUTO_RESET_EN(x) (((uint32_t)(((uint32_t)(x)) << AES_CTRL2_AUTO_RESET_EN_SHIFT)) & AES_CTRL2_AUTO_RESET_EN_MASK)
/*! @} */

/*! @name STATUS - AES Status Register */
/*! @{ */
#define AES_STATUS_DONE_MASK (0x1U)
#define AES_STATUS_DONE_SHIFT (0U)
/*! done - AES operation done
 *  0b0..AES operation has not done yet
 *  0b1..AES operation done
 */
#define AES_STATUS_DONE(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_DONE_SHIFT)) & AES_STATUS_DONE_MASK)
#define AES_STATUS_RSVD0_MASK (0x2U)
#define AES_STATUS_RSVD0_SHIFT (1U)
/*! rsvd0 - AES is locked by MCU
 *  0b0..AES is not locked by MCU
 *  0b1..AES is locked by MCU
 */
#define AES_STATUS_RSVD0(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_RSVD0_SHIFT)) & AES_STATUS_RSVD0_MASK)
#define AES_STATUS_RSVD1_MASK (0x4U)
#define AES_STATUS_RSVD1_SHIFT (2U)
/*! rsvd1 - AES is locked by hardware (BH-MAC)
 *  0b0..AES is not locked by hardware
 *  0b1..AES is locked by hardware
 */
#define AES_STATUS_RSVD1(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_RSVD1_SHIFT)) & AES_STATUS_RSVD1_MASK)
#define AES_STATUS_LOCK1_MASK (0x8U)
#define AES_STATUS_LOCK1_SHIFT (3U)
/*! lock1 - Lock AES on hardware (BH-MAC) side
 *  0b0..hardware unlocks AES
 *  0b1..hardware requests to lock AES
 */
#define AES_STATUS_LOCK1(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_LOCK1_SHIFT)) & AES_STATUS_LOCK1_MASK)
#define AES_STATUS_IF_FULL_MASK (0x10U)
#define AES_STATUS_IF_FULL_SHIFT (4U)
/*! if_full - Input FIFO full
 *  0b0..Input FIFO is not full
 *  0b1..Input FIFO is full
 */
#define AES_STATUS_IF_FULL(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_IF_FULL_SHIFT)) & AES_STATUS_IF_FULL_MASK)
#define AES_STATUS_OF_RDY_MASK (0x40U)
#define AES_STATUS_OF_RDY_SHIFT (6U)
/*! of_rdy - Output FIFO is ready to read
 *  0b0..Output FIFO is not ready to read
 *  0b1..Output FIFO is ready to read
 */
#define AES_STATUS_OF_RDY(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_OF_RDY_SHIFT)) & AES_STATUS_OF_RDY_MASK)
#define AES_STATUS_OF_EMPTY_MASK (0x80U)
#define AES_STATUS_OF_EMPTY_SHIFT (7U)
/*! of_empty - Output FIFO empty
 *  0b0..Output FIFO is not empty
 *  0b1..Output FIFO is empty
 */
#define AES_STATUS_OF_EMPTY(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_OF_EMPTY_SHIFT)) & AES_STATUS_OF_EMPTY_MASK)
#define AES_STATUS_STATUS_MASK (0x3800U)
#define AES_STATUS_STATUS_SHIFT (11U)
/*! status - AES operation error status
 *  0b000..No operation error
 *  0b001..Input stream size less than 16 byte in ECB,CBC and CTR mode
 *  0b010..Data is not multiple of 16 bytes in ECB mode or Data is more than 2^13-1 bytes in MMO mode
 *  0b011..Data is not multiple of 16 bytes and less than 16 byte in ECB mode
 *  0b100..MIC Mismatch during CCM* Decryption
 */
#define AES_STATUS_STATUS(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_STATUS_SHIFT)) & AES_STATUS_STATUS_MASK)
#define AES_STATUS_IF_DEPTH_MASK (0x1C000U)
#define AES_STATUS_IF_DEPTH_SHIFT (14U)
/*! if_depth - input FIFO depth
 */
#define AES_STATUS_IF_DEPTH(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_IF_DEPTH_SHIFT)) & AES_STATUS_IF_DEPTH_MASK)
#define AES_STATUS_OF_DEPTH_MASK (0xE0000U)
#define AES_STATUS_OF_DEPTH_SHIFT (17U)
/*! of_depth - output FIFO depth
 */
#define AES_STATUS_OF_DEPTH(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_OF_DEPTH_SHIFT)) & AES_STATUS_OF_DEPTH_MASK)
#define AES_STATUS_RSVD_VLD_MASK (0x100000U)
#define AES_STATUS_RSVD_VLD_SHIFT (20U)
/*! rsvd_vld - RSVD Valid
 *  0b0..rsvd0 and rsvd1 not valid
 *  0b1..rsvd0 and rsvd1 are valid
 */
#define AES_STATUS_RSVD_VLD(x) (((uint32_t)(((uint32_t)(x)) << AES_STATUS_RSVD_VLD_SHIFT)) & AES_STATUS_RSVD_VLD_MASK)
/*! @} */

/*! @name ASTR_LEN - AES Astr Length Register */
/*! @{ */
#define AES_ASTR_LEN_ASTR_LEN_MASK (0xFFFFFFFFU)
#define AES_ASTR_LEN_ASTR_LEN_SHIFT (0U)
/*! astr_len - Size of associate string
 */
#define AES_ASTR_LEN_ASTR_LEN(x) (((uint32_t)(((uint32_t)(x)) << AES_ASTR_LEN_ASTR_LEN_SHIFT)) & AES_ASTR_LEN_ASTR_LEN_MASK)
/*! @} */

/*! @name MSTR_LEN - AES Mstr Length Register */
/*! @{ */
#define AES_MSTR_LEN_MSTR_LEN_MASK (0xFFFFFFFFU)
#define AES_MSTR_LEN_MSTR_LEN_SHIFT (0U)
/*! mstr_len - Size of message string
 */
#define AES_MSTR_LEN_MSTR_LEN(x) (((uint32_t)(((uint32_t)(x)) << AES_MSTR_LEN_MSTR_LEN_SHIFT)) & AES_MSTR_LEN_MSTR_LEN_MASK)
/*! @} */

/*! @name STR_IN - AES Stream Input Register */
/*! @{ */
#define AES_STR_IN_STR_IN_MASK (0xFFFFFFFFU)
#define AES_STR_IN_STR_IN_SHIFT (0U)
/*! str_in - Input message word
 */
#define AES_STR_IN_STR_IN(x) (((uint32_t)(((uint32_t)(x)) << AES_STR_IN_STR_IN_SHIFT)) & AES_STR_IN_STR_IN_MASK)
/*! @} */

/*! @name IV0 - AES Input Vector Register 0 */
/*! @{ */
#define AES_IV0_IV0_MASK (0xFFFFFFFFU)
#define AES_IV0_IV0_SHIFT (0U)
/*! iv0 - Byte 0-3 of initial vector
 */
#define AES_IV0_IV0(x) (((uint32_t)(((uint32_t)(x)) << AES_IV0_IV0_SHIFT)) & AES_IV0_IV0_MASK)
/*! @} */

/*! @name IV1 - AES Input Vector Register 1 */
/*! @{ */
#define AES_IV1_IV1_MASK (0xFFFFFFFFU)
#define AES_IV1_IV1_SHIFT (0U)
/*! iv1 - Byte 4-7 of initial vector
 */
#define AES_IV1_IV1(x) (((uint32_t)(((uint32_t)(x)) << AES_IV1_IV1_SHIFT)) & AES_IV1_IV1_MASK)
/*! @} */

/*! @name IV2 - AES Input Vector Register 2 */
/*! @{ */
#define AES_IV2_IV2_MASK (0xFFFFFFFFU)
#define AES_IV2_IV2_SHIFT (0U)
/*! iv2 - Byte 8-11 of initial vector
 */
#define AES_IV2_IV2(x) (((uint32_t)(((uint32_t)(x)) << AES_IV2_IV2_SHIFT)) & AES_IV2_IV2_MASK)
/*! @} */

/*! @name IV3 - AES Input Vector Register 3 */
/*! @{ */
#define AES_IV3_IV3_MASK (0xFFFFFFFFU)
#define AES_IV3_IV3_SHIFT (0U)
/*! iv3 - Byte 12-15 of initial vector
 */
#define AES_IV3_IV3(x) (((uint32_t)(((uint32_t)(x)) << AES_IV3_IV3_SHIFT)) & AES_IV3_IV3_MASK)
/*! @} */

/*! @name KEY0 - AES Key 0 Register */
/*! @{ */
#define AES_KEY0_KEY0_MASK (0xFFFFFFFFU)
#define AES_KEY0_KEY0_SHIFT (0U)
/*! key0 - Byte 0-3 of key
 */
#define AES_KEY0_KEY0(x) (((uint32_t)(((uint32_t)(x)) << AES_KEY0_KEY0_SHIFT)) & AES_KEY0_KEY0_MASK)
/*! @} */

/*! @name KEY1 - AES Key 1 Register */
/*! @{ */
#define AES_KEY1_KEY1_MASK (0xFFFFFFFFU)
#define AES_KEY1_KEY1_SHIFT (0U)
/*! key1 - Byte 4-7 of key
 */
#define AES_KEY1_KEY1(x) (((uint32_t)(((uint32_t)(x)) << AES_KEY1_KEY1_SHIFT)) & AES_KEY1_KEY1_MASK)
/*! @} */

/*! @name KEY2 - AES Key 2 Register */
/*! @{ */
#define AES_KEY2_KEY2_MASK (0xFFFFFFFFU)
#define AES_KEY2_KEY2_SHIFT (0U)
/*! key2 - Byte 8-11 of key
 */
#define AES_KEY2_KEY2(x) (((uint32_t)(((uint32_t)(x)) << AES_KEY2_KEY2_SHIFT)) & AES_KEY2_KEY2_MASK)
/*! @} */

/*! @name KEY3 - AES Key 3 Register */
/*! @{ */
#define AES_KEY3_KEY3_MASK (0xFFFFFFFFU)
#define AES_KEY3_KEY3_SHIFT (0U)
/*! key3 - Byte 12-15 of key
 */
#define AES_KEY3_KEY3(x) (((uint32_t)(((uint32_t)(x)) << AES_KEY3_KEY3_SHIFT)) & AES_KEY3_KEY3_MASK)
/*! @} */

/*! @name KEY4 - AES Key 4 Register */
/*! @{ */
#define AES_KEY4_KEY4_MASK (0xFFFFFFFFU)
#define AES_KEY4_KEY4_SHIFT (0U)
/*! key4 - Byte 16-19 of key
 */
#define AES_KEY4_KEY4(x) (((uint32_t)(((uint32_t)(x)) << AES_KEY4_KEY4_SHIFT)) & AES_KEY4_KEY4_MASK)
/*! @} */

/*! @name KEY5 - AES Key 5 Register */
/*! @{ */
#define AES_KEY5_KEY5_MASK (0xFFFFFFFFU)
#define AES_KEY5_KEY5_SHIFT (0U)
/*! key5 - Byte 20-23 of key
 */
#define AES_KEY5_KEY5(x) (((uint32_t)(((uint32_t)(x)) << AES_KEY5_KEY5_SHIFT)) & AES_KEY5_KEY5_MASK)
/*! @} */

/*! @name KEY6 - AES Key 6 Register */
/*! @{ */
#define AES_KEY6_KEY6_MASK (0xFFFFFFFFU)
#define AES_KEY6_KEY6_SHIFT (0U)
/*! key6 - Byte 24-27 of key
 */
#define AES_KEY6_KEY6(x) (((uint32_t)(((uint32_t)(x)) << AES_KEY6_KEY6_SHIFT)) & AES_KEY6_KEY6_MASK)
/*! @} */

/*! @name KEY7 - AES Key 7 Register */
/*! @{ */
#define AES_KEY7_KEY7_MASK (0xFFFFFFFFU)
#define AES_KEY7_KEY7_SHIFT (0U)
/*! key7 - Byte 28-31 of key
 */
#define AES_KEY7_KEY7(x) (((uint32_t)(((uint32_t)(x)) << AES_KEY7_KEY7_SHIFT)) & AES_KEY7_KEY7_MASK)
/*! @} */

/*! @name STR_OUT - AES Stream Output Port Register */
/*! @{ */
#define AES_STR_OUT_STR_OUT_MASK (0xFFFFFFFFU)
#define AES_STR_OUT_STR_OUT_SHIFT (0U)
/*! str_out - Output message word
 */
#define AES_STR_OUT_STR_OUT(x) (((uint32_t)(((uint32_t)(x)) << AES_STR_OUT_STR_OUT_SHIFT)) & AES_STR_OUT_STR_OUT_MASK)
/*! @} */

/*! @name OV0 - AES Output Vector 0 Register */
/*! @{ */
#define AES_OV0_OV0_MASK (0xFFFFFFFFU)
#define AES_OV0_OV0_SHIFT (0U)
/*! ov0 - Byte 0-3 of output vector
 */
#define AES_OV0_OV0(x) (((uint32_t)(((uint32_t)(x)) << AES_OV0_OV0_SHIFT)) & AES_OV0_OV0_MASK)
/*! @} */

/*! @name OV1 - AES Output Vector 1 Register */
/*! @{ */
#define AES_OV1_OV1_MASK (0xFFFFFFFFU)
#define AES_OV1_OV1_SHIFT (0U)
/*! ov1 - Byte 4-7 of output vector
 */
#define AES_OV1_OV1(x) (((uint32_t)(((uint32_t)(x)) << AES_OV1_OV1_SHIFT)) & AES_OV1_OV1_MASK)
/*! @} */

/*! @name OV2 - AES Output Vector 2 Register */
/*! @{ */
#define AES_OV2_OV2_MASK (0xFFFFFFFFU)
#define AES_OV2_OV2_SHIFT (0U)
/*! ov2 - Byte 8-11 of output vector
 */
#define AES_OV2_OV2(x) (((uint32_t)(((uint32_t)(x)) << AES_OV2_OV2_SHIFT)) & AES_OV2_OV2_MASK)
/*! @} */

/*! @name OV3 - AES Output Vector 3 Register */
/*! @{ */
#define AES_OV3_OV3_MASK (0xFFFFFFFFU)
#define AES_OV3_OV3_SHIFT (0U)
/*! ov3 - Byte 12-15 of output vector
 */
#define AES_OV3_OV3(x) (((uint32_t)(((uint32_t)(x)) << AES_OV3_OV3_SHIFT)) & AES_OV3_OV3_MASK)
/*! @} */

/*! @name ISR - AES Interrupt Status Register */
/*! @{ */
#define AES_ISR_STATUS_0_MASK (0x1U)
#define AES_ISR_STATUS_0_SHIFT (0U)
/*! status_0 - Status of AES output FIFO empty interrupt
 *  0b0..AES operation done interrupt not occurred
 *  0b1..AES operation done interrupt occurred
 */
#define AES_ISR_STATUS_0(x) (((uint32_t)(((uint32_t)(x)) << AES_ISR_STATUS_0_SHIFT)) & AES_ISR_STATUS_0_MASK)
#define AES_ISR_STATUS_1_MASK (0x2U)
#define AES_ISR_STATUS_1_SHIFT (1U)
/*! status_1 - Status of AES input FIFO full interrupt
 *  0b0..AES input FIFO full interrupt not occurred
 *  0b1..AES input FIFO full interrupt occurred
 */
#define AES_ISR_STATUS_1(x) (((uint32_t)(((uint32_t)(x)) << AES_ISR_STATUS_1_SHIFT)) & AES_ISR_STATUS_1_MASK)
#define AES_ISR_STATUS_2_MASK (0x4U)
#define AES_ISR_STATUS_2_SHIFT (2U)
/*! status_2 - Status of AES output FIFO empty interrupt
 *  0b0..AES output FIFO empty interrupt not occurred
 *  0b1..AES output FIFO empty interrupt occurred
 */
#define AES_ISR_STATUS_2(x) (((uint32_t)(((uint32_t)(x)) << AES_ISR_STATUS_2_SHIFT)) & AES_ISR_STATUS_2_MASK)
/*! @} */

/*! @name IMR - AES Interrupt Mask Register */
/*! @{ */
#define AES_IMR_MASK_0_MASK (0x1U)
#define AES_IMR_MASK_0_SHIFT (0U)
/*! mask_0 - mask[0]: Mask of AES operation done interrupt
 *  0b0..Enable AES operation done interrupt
 *  0b1..Disable AES operation done interrupt
 */
#define AES_IMR_MASK_0(x) (((uint32_t)(((uint32_t)(x)) << AES_IMR_MASK_0_SHIFT)) & AES_IMR_MASK_0_MASK)
#define AES_IMR_MASK_1_MASK (0x2U)
#define AES_IMR_MASK_1_SHIFT (1U)
/*! mask_1 - Mask of AES input FIFO full interrupt
 *  0b0..Enable AES input FIFO full interrupt
 *  0b1..Disable AES input FIFO full interrupt
 */
#define AES_IMR_MASK_1(x) (((uint32_t)(((uint32_t)(x)) << AES_IMR_MASK_1_SHIFT)) & AES_IMR_MASK_1_MASK)
#define AES_IMR_MASK_2_MASK (0x4U)
#define AES_IMR_MASK_2_SHIFT (2U)
/*! mask_2 - Mask of AES output FIFO empty interrupt
 *  0b0..Enable AES output FIFO empty interrupt
 *  0b1..Disable AES output FIFO empty interrupt
 */
#define AES_IMR_MASK_2(x) (((uint32_t)(((uint32_t)(x)) << AES_IMR_MASK_2_SHIFT)) & AES_IMR_MASK_2_MASK)
/*! @} */

/*! @name IRSR - AES Interrupt Raw Status Register */
/*! @{ */
#define AES_IRSR_STATUS_RAW_0_MASK (0x1U)
#define AES_IRSR_STATUS_RAW_0_SHIFT (0U)
/*! status_raw_0 - AES operation done interrupt raw status regardless of mask
 *  0b0..AES operation done interrupt not occurred
 *  0b1..AES operation done interrupt occurred
 */
#define AES_IRSR_STATUS_RAW_0(x) (((uint32_t)(((uint32_t)(x)) << AES_IRSR_STATUS_RAW_0_SHIFT)) & AES_IRSR_STATUS_RAW_0_MASK)
#define AES_IRSR_STATUS_RAW_1_MASK (0x2U)
#define AES_IRSR_STATUS_RAW_1_SHIFT (1U)
/*! status_raw_1 - AES input FIFO full interrupt raw status regardless of mask
 *  0b0..AES no input FIFO full interrupt not occurred
 *  0b1..AES no input FIFO full interrupt occurred
 */
#define AES_IRSR_STATUS_RAW_1(x) (((uint32_t)(((uint32_t)(x)) << AES_IRSR_STATUS_RAW_1_SHIFT)) & AES_IRSR_STATUS_RAW_1_MASK)
#define AES_IRSR_STATUS_RAW_2_MASK (0x4U)
#define AES_IRSR_STATUS_RAW_2_SHIFT (2U)
/*! status_raw_2 - AES output FIFO empty interrupt raw status regardless of mask
 *  0b0..AES output FIFO empty interrupt not occurred
 *  0b1..AES output FIFO empty interrupt
 */
#define AES_IRSR_STATUS_RAW_2(x) (((uint32_t)(((uint32_t)(x)) << AES_IRSR_STATUS_RAW_2_SHIFT)) & AES_IRSR_STATUS_RAW_2_MASK)
/*! @} */

/*! @name ICR - AES Interrupt Clear Register */
/*! @{ */
#define AES_ICR_CLEAR_0_MASK (0x1U)
#define AES_ICR_CLEAR_0_SHIFT (0U)
/*! clear_0 - Clearance of AES operation done interrupt status and raw status
 */
#define AES_ICR_CLEAR_0(x) (((uint32_t)(((uint32_t)(x)) << AES_ICR_CLEAR_0_SHIFT)) & AES_ICR_CLEAR_0_MASK)
#define AES_ICR_CLEAR_1_MASK (0x2U)
#define AES_ICR_CLEAR_1_SHIFT (1U)
/*! clear_1 - Clearance of AES input FIFO full interrupt status and raw status
 */
#define AES_ICR_CLEAR_1(x) (((uint32_t)(((uint32_t)(x)) << AES_ICR_CLEAR_1_SHIFT)) & AES_ICR_CLEAR_1_MASK)
#define AES_ICR_CLEAR_2_MASK (0x4U)
#define AES_ICR_CLEAR_2_SHIFT (2U)
/*! clear_2 - Clearance of AES output FIFO empty interrupt status and raw status
 */
#define AES_ICR_CLEAR_2(x) (((uint32_t)(((uint32_t)(x)) << AES_ICR_CLEAR_2_SHIFT)) & AES_ICR_CLEAR_2_MASK)
/*! @} */

/*! @name REV_ID - AES Revision Register */
/*! @{ */
#define AES_REV_ID_MINOR_REV_ID_MASK (0xFU)
#define AES_REV_ID_MINOR_REV_ID_SHIFT (0U)
/*! minor_rev_id - Minor revision ID
 */
#define AES_REV_ID_MINOR_REV_ID(x) (((uint32_t)(((uint32_t)(x)) << AES_REV_ID_MINOR_REV_ID_SHIFT)) & AES_REV_ID_MINOR_REV_ID_MASK)
#define AES_REV_ID_MAJOR_REV_ID_MASK (0xF0U)
#define AES_REV_ID_MAJOR_REV_ID_SHIFT (4U)
/*! major_rev_id - Major revision ID
 */
#define AES_REV_ID_MAJOR_REV_ID(x) (((uint32_t)(((uint32_t)(x)) << AES_REV_ID_MAJOR_REV_ID_SHIFT)) & AES_REV_ID_MAJOR_REV_ID_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group AES_Register_Masks */

/* AES - Peripheral instance base addresses */
/** Peripheral AES base address */
#define AES_BASE (0x44004000u)
/** Peripheral AES base pointer */
#define AES ((AES_Type *) AES_BASE)
/** Array initializer of AES peripheral base addresses */
#define AES_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        AES_BASE                                                                                                                   \
    }
/** Array initializer of AES peripheral base pointers */
#define AES_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        AES                                                                                                                        \
    }
/** Interrupt vectors for the AES peripheral type */
#define AES_IRQS                                                                                                                   \
    {                                                                                                                              \
        AES_IRQn                                                                                                                   \
    }

/*!
 * @}
 */ /* end of group AES_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- BG Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BG_Peripheral_Access_Layer BG Peripheral Access Layer
 * @{
 */

/** BG - Register Layout Typedef */
typedef struct
{
    __IO uint32_t CTRL;  /**< Control Register, offset: 0x0 */
    __I uint32_t STATUS; /**< Status Register, offset: 0x4 */
} BG_Type;

/* ----------------------------------------------------------------------------
   -- BG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BG_Register_Masks BG Register Masks
 * @{
 */

/*! @name CTRL - Control Register */
/*! @{ */
#define BG_CTRL_PD_MASK (0x1U)
#define BG_CTRL_PD_SHIFT (0U)
/*! pd - Bandgap power down.
 *  0b0..Power up
 *  0b1..Power down
 */
#define BG_CTRL_PD(x) (((uint32_t)(((uint32_t)(x)) << BG_CTRL_PD_SHIFT)) & BG_CTRL_PD_MASK)
#define BG_CTRL_RES_TRIM_MASK (0xF0U)
#define BG_CTRL_RES_TRIM_SHIFT (4U)
/*! res_trim - 1.2V voltage reference resistor trim.
 *  0b0000..1.159V
 *  0b0001..1.163V
 *  0b0010..1.168V
 *  0b0011..1.172V
 *  0b0100..1.177V
 *  0b0101..1.181V
 *  0b0110..1.186V
 *  0b0111..1.190V
 *  0b1000..1.194V
 *  0b1001..1.199V
 *  0b1010..1.204V
 *  0b1011..1.208V
 *  0b1100..1.213V
 *  0b1101..1.217V
 *  0b1110..1.222V
 *  0b1111..1.226V
 */
#define BG_CTRL_RES_TRIM(x) (((uint32_t)(((uint32_t)(x)) << BG_CTRL_RES_TRIM_SHIFT)) & BG_CTRL_RES_TRIM_MASK)
/*! @} */

/*! @name STATUS - Status Register */
/*! @{ */
#define BG_STATUS_RDY_MASK (0x1U)
#define BG_STATUS_RDY_SHIFT (0U)
/*! rdy - 1'b1 indicates BG ready flag.
 */
#define BG_STATUS_RDY(x) (((uint32_t)(((uint32_t)(x)) << BG_STATUS_RDY_SHIFT)) & BG_STATUS_RDY_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group BG_Register_Masks */

/* BG - Peripheral instance base addresses */
/** Peripheral BG base address */
#define BG_BASE (0x460B0700u)
/** Peripheral BG base pointer */
#define BG ((BG_Type *) BG_BASE)
/** Array initializer of BG peripheral base addresses */
#define BG_BASE_ADDRS                                                                                                              \
    {                                                                                                                              \
        BG_BASE                                                                                                                    \
    }
/** Array initializer of BG peripheral base pointers */
#define BG_BASE_PTRS                                                                                                               \
    {                                                                                                                              \
        BG                                                                                                                         \
    }

/*!
 * @}
 */ /* end of group BG_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- CRC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CRC_Peripheral_Access_Layer CRC Peripheral Access Layer
 * @{
 */

/** CRC - Register Layout Typedef */
typedef struct
{
    __I uint32_t ISR;            /**< Interrupt Status Register, offset: 0x0 */
    __I uint32_t IRSR;           /**< Interrupt Raw Status Register, offset: 0x4 */
    __O uint32_t ICR;            /**< Interrupt Clear Register, offset: 0x8 */
    __IO uint32_t IMR;           /**< Interrupt Mask Register, offset: 0xC */
    __IO uint32_t CTRL;          /**< CRC Module Control Register, offset: 0x10 */
    __IO uint32_t STREAM_LEN_M1; /**< Stream Length Minus 1 Register, offset: 0x14 */
    __IO uint32_t STREAM_IN;     /**< Stream Input Register, offset: 0x18 */
    __I uint32_t RESULT;         /**< CRC Calculation Result Register, offset: 0x1C */
    uint8_t RESERVED_0[28];
    __I uint32_t REV_ID; /**< CRC Revision ID register, offset: 0x3C */
} CRC_Type;

/* ----------------------------------------------------------------------------
   -- CRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CRC_Register_Masks CRC Register Masks
 * @{
 */

/*! @name ISR - Interrupt Status Register */
/*! @{ */
#define CRC_ISR_STATUS_MASK (0x1U)
#define CRC_ISR_STATUS_SHIFT (0U)
/*! status - CRC calculation interrupt status after mask
 *  0b0..interrupt is not occurred
 *  0b1..interrupt is occurred
 */
#define CRC_ISR_STATUS(x) (((uint32_t)(((uint32_t)(x)) << CRC_ISR_STATUS_SHIFT)) & CRC_ISR_STATUS_MASK)
/*! @} */

/*! @name IRSR - Interrupt Raw Status Register */
/*! @{ */
#define CRC_IRSR_STATUS_RAW_0_MASK (0x1U)
#define CRC_IRSR_STATUS_RAW_0_SHIFT (0U)
/*! status_raw_0 - Raw status of IRQ regardless of mask
 */
#define CRC_IRSR_STATUS_RAW_0(x) (((uint32_t)(((uint32_t)(x)) << CRC_IRSR_STATUS_RAW_0_SHIFT)) & CRC_IRSR_STATUS_RAW_0_MASK)
/*! @} */

/*! @name ICR - Interrupt Clear Register */
/*! @{ */
#define CRC_ICR_CLEAR_MASK (0x1U)
#define CRC_ICR_CLEAR_SHIFT (0U)
/*! clear - Clearance of status[0] and status_raw[0]
 */
#define CRC_ICR_CLEAR(x) (((uint32_t)(((uint32_t)(x)) << CRC_ICR_CLEAR_SHIFT)) & CRC_ICR_CLEAR_MASK)
/*! @} */

/*! @name IMR - Interrupt Mask Register */
/*! @{ */
#define CRC_IMR_MASK_MASK (0x1U)
#define CRC_IMR_MASK_SHIFT (0U)
/*! mask - Mask of interrupt
 *  0b0..enable generation of IRQ and corresponding status[0]
 *  0b1..disable generation of IRQ and corresponding status[0]
 */
#define CRC_IMR_MASK(x) (((uint32_t)(((uint32_t)(x)) << CRC_IMR_MASK_SHIFT)) & CRC_IMR_MASK_MASK)
/*! @} */

/*! @name CTRL - CRC Module Control Register */
/*! @{ */
#define CRC_CTRL_ENABLE_MASK (0x1U)
#define CRC_CTRL_ENABLE_SHIFT (0U)
/*! enable - CRC calcuate enable
 *  0b0..diable CRC calculation
 *  0b1..enable CRC calculation (automatically cleared when CRC calculation is finished)
 */
#define CRC_CTRL_ENABLE(x) (((uint32_t)(((uint32_t)(x)) << CRC_CTRL_ENABLE_SHIFT)) & CRC_CTRL_ENABLE_MASK)
#define CRC_CTRL_MODE_MASK (0xEU)
#define CRC_CTRL_MODE_SHIFT (1U)
/*! mode - CRC mode select
 *  0b000..x**16+x**12+x**5+1 (CRC-16-CCITT, CRC-CCITT)
 *  0b001..x**16+x**15+x**2+1 (CRC-16, CRC-16-IBM, CRC-16-ANSI)
 *  0b010..x**16+x**15+x**11+x**9+x**8+x**7+x**5+x**4+x**2+x+1 (CRC-16-T10-DIF)
 *  0b011..x**32+x**26+x**23+x**22+x**16+x**12+x**11+x**10+x**8+x**7+x**5+x**4+x**2+x+1 (CRC-32-IEEE802.3)
 *  0b100..x**16+x**13+x**12+x**11+x**10+x**8+x**6+x**5+x**2+1(CRC-16-DNP)
 */
#define CRC_CTRL_MODE(x) (((uint32_t)(((uint32_t)(x)) << CRC_CTRL_MODE_SHIFT)) & CRC_CTRL_MODE_MASK)
/*! @} */

/*! @name STREAM_LEN_M1 - Stream Length Minus 1 Register */
/*! @{ */
#define CRC_STREAM_LEN_M1_LENGTH_M1_MASK (0xFFFFFFFFU)
#define CRC_STREAM_LEN_M1_LENGTH_M1_SHIFT (0U)
/*! length_m1 - Input stream length minus 1 (units of bytes)
 *  0b00000000000000000000000000000000..input stream length of 1 byte
 *  0b00000000000000000000000011111111..input stream length of 256 bytes
 */
#define CRC_STREAM_LEN_M1_LENGTH_M1(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << CRC_STREAM_LEN_M1_LENGTH_M1_SHIFT)) & CRC_STREAM_LEN_M1_LENGTH_M1_MASK)
/*! @} */

/*! @name STREAM_IN - Stream Input Register */
/*! @{ */
#define CRC_STREAM_IN_DATA_MASK (0xFFFFFFFFU)
#define CRC_STREAM_IN_DATA_SHIFT (0U)
/*! data - Stream input data
 */
#define CRC_STREAM_IN_DATA(x) (((uint32_t)(((uint32_t)(x)) << CRC_STREAM_IN_DATA_SHIFT)) & CRC_STREAM_IN_DATA_MASK)
/*! @} */

/*! @name RESULT - CRC Calculation Result Register */
/*! @{ */
#define CRC_RESULT_DATA_MASK (0xFFFFFFFFU)
#define CRC_RESULT_DATA_SHIFT (0U)
/*! data - CRC calculation result
 */
#define CRC_RESULT_DATA(x) (((uint32_t)(((uint32_t)(x)) << CRC_RESULT_DATA_SHIFT)) & CRC_RESULT_DATA_MASK)
/*! @} */

/*! @name REV_ID - CRC Revision ID register */
/*! @{ */
#define CRC_REV_ID_MINOR_REV_ID_MASK (0xFU)
#define CRC_REV_ID_MINOR_REV_ID_SHIFT (0U)
/*! minor_rev_id - Minor revision ID
 */
#define CRC_REV_ID_MINOR_REV_ID(x) (((uint32_t)(((uint32_t)(x)) << CRC_REV_ID_MINOR_REV_ID_SHIFT)) & CRC_REV_ID_MINOR_REV_ID_MASK)
#define CRC_REV_ID_MAJOR_REV_ID_MASK (0xF0U)
#define CRC_REV_ID_MAJOR_REV_ID_SHIFT (4U)
/*! major_rev_id - Major revision ID
 */
#define CRC_REV_ID_MAJOR_REV_ID(x) (((uint32_t)(((uint32_t)(x)) << CRC_REV_ID_MAJOR_REV_ID_SHIFT)) & CRC_REV_ID_MAJOR_REV_ID_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group CRC_Register_Masks */

/* CRC - Peripheral instance base addresses */
/** Peripheral CRC base address */
#define CRC_BASE (0x44005000u)
/** Peripheral CRC base pointer */
#define CRC ((CRC_Type *) CRC_BASE)
/** Array initializer of CRC peripheral base addresses */
#define CRC_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        CRC_BASE                                                                                                                   \
    }
/** Array initializer of CRC peripheral base pointers */
#define CRC_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        CRC                                                                                                                        \
    }
/** Interrupt vectors for the CRC peripheral type */
#define CRC_IRQS                                                                                                                   \
    {                                                                                                                              \
        CRC_IRQn                                                                                                                   \
    }

/*!
 * @}
 */ /* end of group CRC_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- DAC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DAC_Peripheral_Access_Layer DAC Peripheral Access Layer
 * @{
 */

/** DAC - Register Layout Typedef */
typedef struct
{
    __IO uint32_t CTRL;  /**< DAC Control Register, offset: 0x0 */
    __I uint32_t STATUS; /**< DAC Status Register, offset: 0x4 */
    __IO uint32_t ACTRL; /**< Channel A Control Register, offset: 0x8 */
    __IO uint32_t BCTRL; /**< Channel B Control Register, offset: 0xC */
    __IO uint32_t ADATA; /**< Channel A Data Register, offset: 0x10 */
    __IO uint32_t BDATA; /**< Channel B Data Register, offset: 0x14 */
    __I uint32_t ISR;    /**< Interrupt Status Register, offset: 0x18 */
    __IO uint32_t IMR;   /**< Interrupt Mask Register, offset: 0x1C */
    __I uint32_t IRSR;   /**< Interrupt Raw Status Register, offset: 0x20 */
    __IO uint32_t ICR;   /**< Interrupt Clear Register, offset: 0x24 */
    __IO uint32_t CLK;   /**< Clock Register, offset: 0x28 */
    __IO uint32_t RST;   /**< Soft Reset Register, offset: 0x2C */
} DAC_Type;

/* ----------------------------------------------------------------------------
   -- DAC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DAC_Register_Masks DAC Register Masks
 * @{
 */

/*! @name CTRL - DAC Control Register */
/*! @{ */
#define DAC_CTRL_REF_SEL_MASK (0x1U)
#define DAC_CTRL_REF_SEL_SHIFT (0U)
/*! ref_sel - Reference selector
 *  0b0..internal reference
 *  0b1..external reference
 */
#define DAC_CTRL_REF_SEL(x) (((uint32_t)(((uint32_t)(x)) << DAC_CTRL_REF_SEL_SHIFT)) & DAC_CTRL_REF_SEL_MASK)
/*! @} */

/*! @name STATUS - DAC Status Register */
/*! @{ */
#define DAC_STATUS_A_DV_MASK (0x1U)
#define DAC_STATUS_A_DV_SHIFT (0U)
/*! a_dv - DACA conversion status.
 *  0b0..channel A conversion is not done
 *  0b1..channel A conversion complete
 */
#define DAC_STATUS_A_DV(x) (((uint32_t)(((uint32_t)(x)) << DAC_STATUS_A_DV_SHIFT)) & DAC_STATUS_A_DV_MASK)
#define DAC_STATUS_B_DV_MASK (0x2U)
#define DAC_STATUS_B_DV_SHIFT (1U)
/*! b_dv - DACB conversion status
 *  0b0..channel B conversion is not done
 *  0b1..channel B conversion complete
 */
#define DAC_STATUS_B_DV(x) (((uint32_t)(((uint32_t)(x)) << DAC_STATUS_B_DV_SHIFT)) & DAC_STATUS_B_DV_MASK)
/*! @} */

/*! @name ACTRL - Channel A Control Register */
/*! @{ */
#define DAC_ACTRL_A_EN_MASK (0x1U)
#define DAC_ACTRL_A_EN_SHIFT (0U)
/*! a_en - Channel A Enable/Disable signal
 *  0b0..disable channel A conversion
 *  0b1..enable channel A conversion
 */
#define DAC_ACTRL_A_EN(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_EN_SHIFT)) & DAC_ACTRL_A_EN_MASK)
#define DAC_ACTRL_A_IO_EN_MASK (0x2U)
#define DAC_ACTRL_A_IO_EN_SHIFT (1U)
/*! a_io_en - Channel A conversion output to pad enable
 *  0b0..disable channel A conversion result to GPIO
 *  0b1..enable channel A conversion result to GPIO
 */
#define DAC_ACTRL_A_IO_EN(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_IO_EN_SHIFT)) & DAC_ACTRL_A_IO_EN_MASK)
#define DAC_ACTRL_A_TRIG_EN_MASK (0x4U)
#define DAC_ACTRL_A_TRIG_EN_SHIFT (2U)
/*! a_trig_en - Channel A trigger enable
 *  0b0..Channel A conversion triggered by external event disabled
 *  0b1..Channel A conversion triggered by external event enabled
 */
#define DAC_ACTRL_A_TRIG_EN(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_TRIG_EN_SHIFT)) & DAC_ACTRL_A_TRIG_EN_MASK)
#define DAC_ACTRL_A_TRIG_SEL_MASK (0x18U)
#define DAC_ACTRL_A_TRIG_SEL_SHIFT (3U)
/*! a_trig_sel - Channel A trigger selector
 */
#define DAC_ACTRL_A_TRIG_SEL(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_TRIG_SEL_SHIFT)) & DAC_ACTRL_A_TRIG_SEL_MASK)
#define DAC_ACTRL_A_TRIG_TYP_MASK (0x60U)
#define DAC_ACTRL_A_TRIG_TYP_SHIFT (5U)
/*! a_trig_typ - Channel A trigger type
 *  0b00..reserved
 *  0b01..rising edge trigger
 *  0b10..falling edge trigger
 *  0b11..both rising and falling edge trigger
 */
#define DAC_ACTRL_A_TRIG_TYP(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_TRIG_TYP_SHIFT)) & DAC_ACTRL_A_TRIG_TYP_MASK)
#define DAC_ACTRL_A_DEN_MASK (0x80U)
#define DAC_ACTRL_A_DEN_SHIFT (7U)
/*! a_den - Channel A DMA enable
 *  0b0..DMA data transfer disabled
 *  0b1..DMA data transfer enabled
 */
#define DAC_ACTRL_A_DEN(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_DEN_SHIFT)) & DAC_ACTRL_A_DEN_MASK)
#define DAC_ACTRL_A_TIME_MODE_MASK (0x100U)
#define DAC_ACTRL_A_TIME_MODE_SHIFT (8U)
/*! a_time_mode - Channel A Mode
 *  0b0..non-timing related
 *  0b1..timing related
 */
#define DAC_ACTRL_A_TIME_MODE(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_TIME_MODE_SHIFT)) & DAC_ACTRL_A_TIME_MODE_MASK)
#define DAC_ACTRL_A_TRIA_HALF_MASK (0x200U)
#define DAC_ACTRL_A_TRIA_HALF_SHIFT (9U)
/*! a_tria_half - Channel A triangle wave type selector.
 *  0b0..full triangle
 *  0b1..half triangle
 */
#define DAC_ACTRL_A_TRIA_HALF(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_TRIA_HALF_SHIFT)) & DAC_ACTRL_A_TRIA_HALF_MASK)
#define DAC_ACTRL_A_TRIA_MAMP_SEL_MASK (0x3C00U)
#define DAC_ACTRL_A_TRIA_MAMP_SEL_SHIFT (10U)
/*! a_tria_mamp_sel - Channel A triangle wave max amplitude selector.
 *  0b0000..63
 *  0b0001..127
 *  0b0010..191
 *  0b0011..255
 *  0b0100..319
 *  0b0101..383
 *  0b0110..447
 *  0b0111..511
 *  0b1000..575
 *  0b1001..639
 *  0b1010..703
 *  0b1011..767
 *  0b1100..831
 *  0b1101..895
 *  0b1110..959
 *  0b1111..1023
 */
#define DAC_ACTRL_A_TRIA_MAMP_SEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_TRIA_MAMP_SEL_SHIFT)) & DAC_ACTRL_A_TRIA_MAMP_SEL_MASK)
#define DAC_ACTRL_A_TRIA_STEP_SEL_MASK (0xC000U)
#define DAC_ACTRL_A_TRIA_STEP_SEL_SHIFT (14U)
/*! a_tria_step_sel - Channel A triangle wave step selector.
 *  0b00..1
 *  0b01..3
 *  0b10..15
 *  0b11..511
 */
#define DAC_ACTRL_A_TRIA_STEP_SEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_TRIA_STEP_SEL_SHIFT)) & DAC_ACTRL_A_TRIA_STEP_SEL_MASK)
#define DAC_ACTRL_A_WAVE_MASK (0x30000U)
#define DAC_ACTRL_A_WAVE_SHIFT (16U)
/*! a_wave - Channel A wave type select.
 *  0b00..
 *  0b01..triangle wave
 *  0b10..sine wave
 *  0b11..
 */
#define DAC_ACTRL_A_WAVE(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_WAVE_SHIFT)) & DAC_ACTRL_A_WAVE_MASK)
#define DAC_ACTRL_A_RANGE_MASK (0xC0000U)
#define DAC_ACTRL_A_RANGE_SHIFT (18U)
/*! a_range - Output voltage range control, with Internal/External reference
 *  0b00..0.16+(0.64*input code/1023) with ref_sel=0(internal)/0.08* Vref_ext+(0.32* Vref_ext*input_code/1023) with
 * ref_sel=1(external) 0b01..0.19+(1.01*input code /1023) with ref_sel=0(internal)/0.095* Vref_ext+(0.505* Vref_ext*input_code/1023)
 * with ref_sel=1(external) 0b10..0.19+(1.01*input code /1023) with ref_sel=0(internal)/0.095* Vref_ext+(0.505*
 * Vref_ext*input_code/1023) with ref_sel=1(external) 0b11..0.18+(1.42*input code /1023) with
 * ref_sel=0(internal)/0.09*Vref_ext+(0.71* Vref_ext*input_code/1023) with ref_sel=1(external)
 */
#define DAC_ACTRL_A_RANGE(x) (((uint32_t)(((uint32_t)(x)) << DAC_ACTRL_A_RANGE_SHIFT)) & DAC_ACTRL_A_RANGE_MASK)
/*! @} */

/*! @name BCTRL - Channel B Control Register */
/*! @{ */
#define DAC_BCTRL_B_EN_MASK (0x1U)
#define DAC_BCTRL_B_EN_SHIFT (0U)
/*! b_en - Channel B Enable/Disable signal
 *  0b0..disable channel B conversion
 *  0b1..enable channel B conversion
 */
#define DAC_BCTRL_B_EN(x) (((uint32_t)(((uint32_t)(x)) << DAC_BCTRL_B_EN_SHIFT)) & DAC_BCTRL_B_EN_MASK)
#define DAC_BCTRL_B_IO_EN_MASK (0x2U)
#define DAC_BCTRL_B_IO_EN_SHIFT (1U)
/*! b_io_en - Channel B conversion output to pad enable
 *  0b0..disable channel B conversion result to GPIO
 *  0b1..enable channel B conversion result to GPIO
 */
#define DAC_BCTRL_B_IO_EN(x) (((uint32_t)(((uint32_t)(x)) << DAC_BCTRL_B_IO_EN_SHIFT)) & DAC_BCTRL_B_IO_EN_MASK)
#define DAC_BCTRL_B_TRIG_EN_MASK (0x4U)
#define DAC_BCTRL_B_TRIG_EN_SHIFT (2U)
/*! b_trig_en - Channel B trigger enable
 *  0b0..Channel B conversion triggered by external event disabled
 *  0b1..Channel B conversion triggered by external event enabled
 */
#define DAC_BCTRL_B_TRIG_EN(x) (((uint32_t)(((uint32_t)(x)) << DAC_BCTRL_B_TRIG_EN_SHIFT)) & DAC_BCTRL_B_TRIG_EN_MASK)
#define DAC_BCTRL_B_TRIG_SEL_MASK (0x18U)
#define DAC_BCTRL_B_TRIG_SEL_SHIFT (3U)
/*! b_trig_sel - Channel B trigger selector
 */
#define DAC_BCTRL_B_TRIG_SEL(x) (((uint32_t)(((uint32_t)(x)) << DAC_BCTRL_B_TRIG_SEL_SHIFT)) & DAC_BCTRL_B_TRIG_SEL_MASK)
#define DAC_BCTRL_B_TRIG_TYP_MASK (0x60U)
#define DAC_BCTRL_B_TRIG_TYP_SHIFT (5U)
/*! b_trig_typ - Channel B trigger type
 *  0b00..reserved
 *  0b01..rising edge trigger
 *  0b10..falling edge trigger
 *  0b11..both rising and falling edge trigger
 */
#define DAC_BCTRL_B_TRIG_TYP(x) (((uint32_t)(((uint32_t)(x)) << DAC_BCTRL_B_TRIG_TYP_SHIFT)) & DAC_BCTRL_B_TRIG_TYP_MASK)
#define DAC_BCTRL_B_DEN_MASK (0x80U)
#define DAC_BCTRL_B_DEN_SHIFT (7U)
/*! b_den - Channel B DMA enable
 *  0b0..DMA data transfer disabled
 *  0b1..DMA data transfer enabled
 */
#define DAC_BCTRL_B_DEN(x) (((uint32_t)(((uint32_t)(x)) << DAC_BCTRL_B_DEN_SHIFT)) & DAC_BCTRL_B_DEN_MASK)
#define DAC_BCTRL_B_TIME_MODE_MASK (0x100U)
#define DAC_BCTRL_B_TIME_MODE_SHIFT (8U)
/*! b_time_mode - Channel B Mode
 *  0b0..non-timing related
 *  0b1..timing related
 */
#define DAC_BCTRL_B_TIME_MODE(x) (((uint32_t)(((uint32_t)(x)) << DAC_BCTRL_B_TIME_MODE_SHIFT)) & DAC_BCTRL_B_TIME_MODE_MASK)
#define DAC_BCTRL_B_WAVE_MASK (0x600U)
#define DAC_BCTRL_B_WAVE_SHIFT (9U)
/*! b_wave - Channel B wave type select.
 *  0b00..
 *  0b01..reserved
 *  0b10..reserved
 *  0b11..differential mode with channel A
 */
#define DAC_BCTRL_B_WAVE(x) (((uint32_t)(((uint32_t)(x)) << DAC_BCTRL_B_WAVE_SHIFT)) & DAC_BCTRL_B_WAVE_MASK)
/*! @} */

/*! @name ADATA - Channel A Data Register */
/*! @{ */
#define DAC_ADATA_A_DATA_MASK (0x3FFU)
#define DAC_ADATA_A_DATA_SHIFT (0U)
/*! a_data - Channel A Data input
 */
#define DAC_ADATA_A_DATA(x) (((uint32_t)(((uint32_t)(x)) << DAC_ADATA_A_DATA_SHIFT)) & DAC_ADATA_A_DATA_MASK)
/*! @} */

/*! @name BDATA - Channel B Data Register */
/*! @{ */
#define DAC_BDATA_B_DATA_MASK (0x3FFU)
#define DAC_BDATA_B_DATA_SHIFT (0U)
/*! b_data - Channel B Data input
 */
#define DAC_BDATA_B_DATA(x) (((uint32_t)(((uint32_t)(x)) << DAC_BDATA_B_DATA_SHIFT)) & DAC_BDATA_B_DATA_MASK)
/*! @} */

/*! @name ISR - Interrupt Status Register */
/*! @{ */
#define DAC_ISR_A_RDY_INT_MASK (0x1U)
#define DAC_ISR_A_RDY_INT_SHIFT (0U)
/*! a_rdy_int - Channel A Data Ready
 */
#define DAC_ISR_A_RDY_INT(x) (((uint32_t)(((uint32_t)(x)) << DAC_ISR_A_RDY_INT_SHIFT)) & DAC_ISR_A_RDY_INT_MASK)
#define DAC_ISR_B_RDY_INT_MASK (0x2U)
#define DAC_ISR_B_RDY_INT_SHIFT (1U)
/*! b_rdy_int - Channel B Data Ready
 */
#define DAC_ISR_B_RDY_INT(x) (((uint32_t)(((uint32_t)(x)) << DAC_ISR_B_RDY_INT_SHIFT)) & DAC_ISR_B_RDY_INT_MASK)
#define DAC_ISR_A_TO_INT_MASK (0x4U)
#define DAC_ISR_A_TO_INT_SHIFT (2U)
/*! a_to_int - Channel A Timeout
 */
#define DAC_ISR_A_TO_INT(x) (((uint32_t)(((uint32_t)(x)) << DAC_ISR_A_TO_INT_SHIFT)) & DAC_ISR_A_TO_INT_MASK)
#define DAC_ISR_B_TO_INT_MASK (0x8U)
#define DAC_ISR_B_TO_INT_SHIFT (3U)
/*! b_to_int - Channel B Timeout
 */
#define DAC_ISR_B_TO_INT(x) (((uint32_t)(((uint32_t)(x)) << DAC_ISR_B_TO_INT_SHIFT)) & DAC_ISR_B_TO_INT_MASK)
#define DAC_ISR_TRIA_OVFL_INT_MASK (0x10U)
#define DAC_ISR_TRIA_OVFL_INT_SHIFT (4U)
/*! tria_ovfl_int - Triangle Overflow
 */
#define DAC_ISR_TRIA_OVFL_INT(x) (((uint32_t)(((uint32_t)(x)) << DAC_ISR_TRIA_OVFL_INT_SHIFT)) & DAC_ISR_TRIA_OVFL_INT_MASK)
/*! @} */

/*! @name IMR - Interrupt Mask Register */
/*! @{ */
#define DAC_IMR_A_RDY_INT_MSK_MASK (0x1U)
#define DAC_IMR_A_RDY_INT_MSK_SHIFT (0U)
/*! a_rdy_int_msk - Channel A Data Ready Mask
 */
#define DAC_IMR_A_RDY_INT_MSK(x) (((uint32_t)(((uint32_t)(x)) << DAC_IMR_A_RDY_INT_MSK_SHIFT)) & DAC_IMR_A_RDY_INT_MSK_MASK)
#define DAC_IMR_B_RDY_INT_MSK_MASK (0x2U)
#define DAC_IMR_B_RDY_INT_MSK_SHIFT (1U)
/*! b_rdy_int_msk - Channel B Data Ready Mask
 */
#define DAC_IMR_B_RDY_INT_MSK(x) (((uint32_t)(((uint32_t)(x)) << DAC_IMR_B_RDY_INT_MSK_SHIFT)) & DAC_IMR_B_RDY_INT_MSK_MASK)
#define DAC_IMR_A_TO_INT_MSK_MASK (0x4U)
#define DAC_IMR_A_TO_INT_MSK_SHIFT (2U)
/*! a_to_int_msk - Channel A Timeout Mask
 */
#define DAC_IMR_A_TO_INT_MSK(x) (((uint32_t)(((uint32_t)(x)) << DAC_IMR_A_TO_INT_MSK_SHIFT)) & DAC_IMR_A_TO_INT_MSK_MASK)
#define DAC_IMR_B_TO_INT_MSK_MASK (0x8U)
#define DAC_IMR_B_TO_INT_MSK_SHIFT (3U)
/*! b_to_int_msk - Channel B Timeout Mask
 */
#define DAC_IMR_B_TO_INT_MSK(x) (((uint32_t)(((uint32_t)(x)) << DAC_IMR_B_TO_INT_MSK_SHIFT)) & DAC_IMR_B_TO_INT_MSK_MASK)
#define DAC_IMR_TRIA_OVFL_INT_MSK_MASK (0x10U)
#define DAC_IMR_TRIA_OVFL_INT_MSK_SHIFT (4U)
/*! tria_ovfl_int_msk - Triangle Overflow Mask
 */
#define DAC_IMR_TRIA_OVFL_INT_MSK(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DAC_IMR_TRIA_OVFL_INT_MSK_SHIFT)) & DAC_IMR_TRIA_OVFL_INT_MSK_MASK)
/*! @} */

/*! @name IRSR - Interrupt Raw Status Register */
/*! @{ */
#define DAC_IRSR_A_RDY_INT_RAW_MASK (0x1U)
#define DAC_IRSR_A_RDY_INT_RAW_SHIFT (0U)
/*! a_rdy_int_raw - Channel A Data Ready Raw
 */
#define DAC_IRSR_A_RDY_INT_RAW(x) (((uint32_t)(((uint32_t)(x)) << DAC_IRSR_A_RDY_INT_RAW_SHIFT)) & DAC_IRSR_A_RDY_INT_RAW_MASK)
#define DAC_IRSR_B_RDY_INT_RAW_MASK (0x2U)
#define DAC_IRSR_B_RDY_INT_RAW_SHIFT (1U)
/*! b_rdy_int_raw - Channel B Data Ready Raw
 */
#define DAC_IRSR_B_RDY_INT_RAW(x) (((uint32_t)(((uint32_t)(x)) << DAC_IRSR_B_RDY_INT_RAW_SHIFT)) & DAC_IRSR_B_RDY_INT_RAW_MASK)
#define DAC_IRSR_A_TO_INT_RAW_MASK (0x4U)
#define DAC_IRSR_A_TO_INT_RAW_SHIFT (2U)
/*! a_to_int_raw - Channel A Timeout Raw
 */
#define DAC_IRSR_A_TO_INT_RAW(x) (((uint32_t)(((uint32_t)(x)) << DAC_IRSR_A_TO_INT_RAW_SHIFT)) & DAC_IRSR_A_TO_INT_RAW_MASK)
#define DAC_IRSR_B_TO_INT_RAW_MASK (0x8U)
#define DAC_IRSR_B_TO_INT_RAW_SHIFT (3U)
/*! b_to_int_raw - Channel B Timeout Raw
 */
#define DAC_IRSR_B_TO_INT_RAW(x) (((uint32_t)(((uint32_t)(x)) << DAC_IRSR_B_TO_INT_RAW_SHIFT)) & DAC_IRSR_B_TO_INT_RAW_MASK)
#define DAC_IRSR_TRIA_OVFL_INT_RAW_MASK (0x10U)
#define DAC_IRSR_TRIA_OVFL_INT_RAW_SHIFT (4U)
/*! tria_ovfl_int_raw - Triangle Overflow Raw
 */
#define DAC_IRSR_TRIA_OVFL_INT_RAW(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DAC_IRSR_TRIA_OVFL_INT_RAW_SHIFT)) & DAC_IRSR_TRIA_OVFL_INT_RAW_MASK)
/*! @} */

/*! @name ICR - Interrupt Clear Register */
/*! @{ */
#define DAC_ICR_A_RDY_INT_CLR_MASK (0x1U)
#define DAC_ICR_A_RDY_INT_CLR_SHIFT (0U)
/*! a_rdy_int_clr - Channel A Data Ready Clear
 */
#define DAC_ICR_A_RDY_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << DAC_ICR_A_RDY_INT_CLR_SHIFT)) & DAC_ICR_A_RDY_INT_CLR_MASK)
#define DAC_ICR_B_RDY_INT_CLR_MASK (0x2U)
#define DAC_ICR_B_RDY_INT_CLR_SHIFT (1U)
/*! b_rdy_int_clr - Channel B Data Ready Clear
 */
#define DAC_ICR_B_RDY_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << DAC_ICR_B_RDY_INT_CLR_SHIFT)) & DAC_ICR_B_RDY_INT_CLR_MASK)
#define DAC_ICR_A_TO_INT_CLR_MASK (0x4U)
#define DAC_ICR_A_TO_INT_CLR_SHIFT (2U)
/*! a_to_int_clr - Channel A Timeout Clear
 */
#define DAC_ICR_A_TO_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << DAC_ICR_A_TO_INT_CLR_SHIFT)) & DAC_ICR_A_TO_INT_CLR_MASK)
#define DAC_ICR_B_TO_INT_CLR_MASK (0x8U)
#define DAC_ICR_B_TO_INT_CLR_SHIFT (3U)
/*! b_to_int_clr - Channel B Timeout Clear
 */
#define DAC_ICR_B_TO_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << DAC_ICR_B_TO_INT_CLR_SHIFT)) & DAC_ICR_B_TO_INT_CLR_MASK)
#define DAC_ICR_TRIA_OVFL_INT_CLR_MASK (0x10U)
#define DAC_ICR_TRIA_OVFL_INT_CLR_SHIFT (4U)
/*! tria_ovfl_int_clr - Triangle Overflow Clear
 */
#define DAC_ICR_TRIA_OVFL_INT_CLR(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DAC_ICR_TRIA_OVFL_INT_CLR_SHIFT)) & DAC_ICR_TRIA_OVFL_INT_CLR_MASK)
/*! @} */

/*! @name CLK - Clock Register */
/*! @{ */
#define DAC_CLK_CLK_CTRL_MASK (0x6U)
#define DAC_CLK_CLK_CTRL_SHIFT (1U)
/*! clk_ctrl - DAC conversion rate selector.
 *  0b00..62.5K
 *  0b01..125K
 *  0b10..250K
 *  0b11..500K
 */
#define DAC_CLK_CLK_CTRL(x) (((uint32_t)(((uint32_t)(x)) << DAC_CLK_CLK_CTRL_SHIFT)) & DAC_CLK_CLK_CTRL_MASK)
#define DAC_CLK_SOFT_CLK_RST_MASK (0x10U)
#define DAC_CLK_SOFT_CLK_RST_SHIFT (4U)
/*! soft_clk_rst - Soft reset for clock divider
 *  0b0..
 *  0b1..
 */
#define DAC_CLK_SOFT_CLK_RST(x) (((uint32_t)(((uint32_t)(x)) << DAC_CLK_SOFT_CLK_RST_SHIFT)) & DAC_CLK_SOFT_CLK_RST_MASK)
/*! @} */

/*! @name RST - Soft Reset Register */
/*! @{ */
#define DAC_RST_A_SOFT_RST_MASK (0x1U)
#define DAC_RST_A_SOFT_RST_SHIFT (0U)
/*! a_soft_rst - Soft reset for DAC channel A, active high
 *  0b0..no action
 *  0b1..
 */
#define DAC_RST_A_SOFT_RST(x) (((uint32_t)(((uint32_t)(x)) << DAC_RST_A_SOFT_RST_SHIFT)) & DAC_RST_A_SOFT_RST_MASK)
#define DAC_RST_B_SOFT_RST_MASK (0x2U)
#define DAC_RST_B_SOFT_RST_SHIFT (1U)
/*! b_soft_rst - Soft reset for DAC channel B, active high
 *  0b0..no action
 *  0b1..
 */
#define DAC_RST_B_SOFT_RST(x) (((uint32_t)(((uint32_t)(x)) << DAC_RST_B_SOFT_RST_SHIFT)) & DAC_RST_B_SOFT_RST_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group DAC_Register_Masks */

/* DAC - Peripheral instance base addresses */
/** Peripheral DAC base address */
#define DAC_BASE (0x460B0200u)
/** Peripheral DAC base pointer */
//#define DAC                                      ((DAC_Type *)DAC_BASE)
#define DAC_MW320 ((DAC_Type *) DAC_BASE)
/** Array initializer of DAC peripheral base addresses */
#define DAC_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        DAC_BASE                                                                                                                   \
    }
/** Array initializer of DAC peripheral base pointers */
//#define DAC_BASE_PTRS                            { DAC }
#define DAC_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        DAC_MW320                                                                                                                  \
    }
/** Interrupt vectors for the DAC peripheral type */
#define DAC_IRQS                                                                                                                   \
    {                                                                                                                              \
        DAC_IRQn                                                                                                                   \
    }

/*!
 * @}
 */ /* end of group DAC_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- DMAC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMAC_Peripheral_Access_Layer DMAC Peripheral Access Layer
 * @{
 */

/** DMAC - Register Layout Typedef */
typedef struct
{
    __IO uint32_t MASK_BLOCKINT;    /**< DMA channel BLOCK TRANSFER INTERRUPT MASK registers, offset: 0x0 */
    __IO uint32_t STATUS_BLOCKINT;  /**< DMA channel BLOCK TRANSFER INTERRUPT Registers, offset: 0x4 */
    __IO uint32_t MASK_TFRINT;      /**< DMA Channel transfer completion interrupt mask Registers, offset: 0x8 */
    __IO uint32_t STATUS_TFRINT;    /**< DMA Channel transfer completion interrupt Registers, offset: 0xC */
    __IO uint32_t MASK_BUSERRINT;   /**< DMA Channel bus error interrupt mask Registers, offset: 0x10 */
    __IO uint32_t STATUS_BUSERRINT; /**< DMA Channel bus error interrupt mask Registers, offset: 0x14 */
    __IO uint32_t MASK_ADDRERRINT;  /**< DMA Channel source/target address alignment error interrupt mask Registers, offset: 0x18 */
    __IO uint32_t STATUS_ADDRERRINT; /**< DMA Channel source/target address alignment error interrupt Registers, offset: 0x1C */
    __I uint32_t STATUS_CHLINT;      /**< DMA CHANNEL INTERRUPT REGISTER, offset: 0x20 */
    uint8_t RESERVED_0[92];
    __IO uint32_t HPROT; /**< THE PROTECTION CONTROL SIGNALS REGISTERS, offset: 0x80 */
    uint8_t RESERVED_1[124];
    struct
    {                           /* offset: 0x100, array step: 0x30 */
        __IO uint32_t SADR;     /**< DMA SOURCE ADDRESS REGISTERS, array offset: 0x100, array step: 0x30 */
        __IO uint32_t TADR;     /**< DMA TARGET ADDRESS REGISTERS, array offset: 0x104, array step: 0x30 */
        __IO uint32_t CTRLA;    /**< DMA CONTROL REGISTERS A, array offset: 0x108, array step: 0x30 */
        __IO uint32_t CTRLB;    /**< DMA CONTROL REGISTERS B, array offset: 0x10C, array step: 0x30 */
        __IO uint32_t CHL_EN;   /**< DMA CHANNEL ENABLE REGISTERS, array offset: 0x110, array step: 0x30 */
        __IO uint32_t CHL_STOP; /**< DMA CHANNEL STOP REGISTERS, array offset: 0x114, array step: 0x30 */
        uint8_t RESERVED_0[24];
    } CHANNEL[32];
    uint8_t RESERVED_2[256];
    __IO uint32_t ACK_DELAY; /**< DMA ACK DELAY CYCLE for single transfer in M2P transfer type Registers, offset: 0x800 */
    uint8_t RESERVED_3[252];
    __I uint32_t ERR_INFO0;      /**< DMA ERROR INFORMATION REGISTER 0, offset: 0x900 */
    __I uint32_t ERR_INFO1;      /**< DMA ERROR INFORMATION REGISTER 1, offset: 0x904 */
    __I uint32_t DIAGNOSE_INFO0; /**< DMA DIAGNOSE INFORMATION REGISTER 0, offset: 0x908 */
    __I uint32_t DIAGNOSE_INFO1; /**< DMA DIAGNOSE INFORMATION REGISTER 1, offset: 0x90C */
    __I uint32_t DIAGNOSE_INFO2; /**< DMA DIAGNOSE INFORMATION REGISTER 2, offset: 0x910 */
    __I uint32_t DIAGNOSE_INFO3; /**< DMA DIAGNOSE INFORMATION REGISTER 3, offset: 0x914 */
    __I uint32_t DIAGNOSE_INFO4; /**< DMA DIAGNOSE INFORMATION REGISTER 4, offset: 0x918 */
    __I uint32_t DIAGNOSE_INFO5; /**< DMA DIAGNOSE INFORMATION REGISTER 5, offset: 0x91C */
    __I uint32_t DIAGNOSE_INFO6; /**< DMA DIAGNOSE INFORMATION REGISTER 6, offset: 0x920 */
    __I uint32_t DIAGNOSE_INFO7; /**< DMA DIAGNOSE INFORMATION REGISTER 7, offset: 0x924 */
} DMAC_Type;

/* ----------------------------------------------------------------------------
   -- DMAC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DMAC_Register_Masks DMAC Register Masks
 * @{
 */

/*! @name MASK_BLOCKINT - DMA channel BLOCK TRANSFER INTERRUPT MASK registers */
/*! @{ */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT0_MASK (0x1U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT0_SHIFT (0U)
/*! MASK_BLOCKINT0 - DMA channel 0 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT0(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT0_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT0_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT1_MASK (0x2U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT1_SHIFT (1U)
/*! MASK_BLOCKINT1 - DMA channel 1 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT1(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT1_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT1_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT2_MASK (0x4U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT2_SHIFT (2U)
/*! MASK_BLOCKINT2 - DMA channel 2 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT2(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT2_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT2_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT3_MASK (0x8U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT3_SHIFT (3U)
/*! MASK_BLOCKINT3 - DMA channel 3 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT3(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT3_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT3_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT4_MASK (0x10U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT4_SHIFT (4U)
/*! MASK_BLOCKINT4 - DMA channel 4 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT4(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT4_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT4_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT5_MASK (0x20U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT5_SHIFT (5U)
/*! MASK_BLOCKINT5 - DMA channel 5 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT5(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT5_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT5_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT6_MASK (0x40U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT6_SHIFT (6U)
/*! MASK_BLOCKINT6 - DMA channel 6 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT6(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT6_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT6_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT7_MASK (0x80U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT7_SHIFT (7U)
/*! MASK_BLOCKINT7 - DMA channel 7 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT7(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT7_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT7_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT8_MASK (0x100U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT8_SHIFT (8U)
/*! MASK_BLOCKINT8 - DMA channel 8 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT8(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT8_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT8_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT9_MASK (0x200U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT9_SHIFT (9U)
/*! MASK_BLOCKINT9 - DMA channel 9 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT9(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT9_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT9_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT10_MASK (0x400U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT10_SHIFT (10U)
/*! MASK_BLOCKINT10 - DMA channel 10 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT10(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT10_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT10_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT11_MASK (0x800U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT11_SHIFT (11U)
/*! MASK_BLOCKINT11 - DMA channel 11 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT11(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT11_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT11_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT12_MASK (0x1000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT12_SHIFT (12U)
/*! MASK_BLOCKINT12 - DMA channel 12 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT12(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT12_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT12_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT13_MASK (0x2000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT13_SHIFT (13U)
/*! MASK_BLOCKINT13 - DMA channel 13 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT13(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT13_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT13_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT14_MASK (0x4000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT14_SHIFT (14U)
/*! MASK_BLOCKINT14 - DMA channel 14 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT14(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT14_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT14_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT15_MASK (0x8000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT15_SHIFT (15U)
/*! MASK_BLOCKINT15 - DMA channel 15 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT15(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT15_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT15_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT16_MASK (0x10000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT16_SHIFT (16U)
/*! MASK_BLOCKINT16 - DMA channel 16 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT16(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT16_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT16_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT17_MASK (0x20000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT17_SHIFT (17U)
/*! MASK_BLOCKINT17 - DMA channel 17 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT17(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT17_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT17_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT18_MASK (0x40000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT18_SHIFT (18U)
/*! MASK_BLOCKINT18 - DMA channel 18 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT18(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT18_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT18_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT19_MASK (0x80000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT19_SHIFT (19U)
/*! MASK_BLOCKINT19 - DMA channel 19 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT19(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT19_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT19_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT20_MASK (0x100000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT20_SHIFT (20U)
/*! MASK_BLOCKINT20 - DMA channel 20 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT20(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT20_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT20_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT21_MASK (0x200000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT21_SHIFT (21U)
/*! MASK_BLOCKINT21 - DMA channel 21 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT21(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT21_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT21_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT22_MASK (0x400000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT22_SHIFT (22U)
/*! MASK_BLOCKINT22 - DMA channel 22 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT22(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT22_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT22_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT23_MASK (0x800000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT23_SHIFT (23U)
/*! MASK_BLOCKINT23 - DMA channel 23 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT23(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT23_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT23_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT24_MASK (0x1000000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT24_SHIFT (24U)
/*! MASK_BLOCKINT24 - DMA channel 24 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT24(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT24_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT24_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT25_MASK (0x2000000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT25_SHIFT (25U)
/*! MASK_BLOCKINT25 - DMA channel 25 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT25(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT25_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT25_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT26_MASK (0x4000000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT26_SHIFT (26U)
/*! MASK_BLOCKINT26 - DMA channel 26 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT26(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT26_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT26_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT27_MASK (0x8000000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT27_SHIFT (27U)
/*! MASK_BLOCKINT27 - DMA channel 27 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT27(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT27_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT27_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT28_MASK (0x10000000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT28_SHIFT (28U)
/*! MASK_BLOCKINT28 - DMA channel 28 block transfer interrupt mask bit
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT28(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT28_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT28_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT29_MASK (0x20000000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT29_SHIFT (29U)
/*! MASK_BLOCKINT29 - DMA channel 29 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT29(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT29_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT29_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT30_MASK (0x40000000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT30_SHIFT (30U)
/*! MASK_BLOCKINT30 - DMA channel 30 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT30(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT30_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT30_MASK)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT31_MASK (0x80000000U)
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT31_SHIFT (31U)
/*! MASK_BLOCKINT31 - DMA channel 31 block transfer interrupt mask bit
 *  0b0..mask the corresponding block interrupt
 *  0b1..unmask the corresponding block interrupt
 */
#define DMAC_MASK_BLOCKINT_MASK_BLOCKINT31(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BLOCKINT_MASK_BLOCKINT31_SHIFT)) & DMAC_MASK_BLOCKINT_MASK_BLOCKINT31_MASK)
/*! @} */

/*! @name STATUS_BLOCKINT - DMA channel BLOCK TRANSFER INTERRUPT Registers */
/*! @{ */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT0_MASK (0x1U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT0_SHIFT (0U)
/*! STATUS_BLOCKINT0 - DMA channel 0 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT0(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT0_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT0_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT1_MASK (0x2U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT1_SHIFT (1U)
/*! STATUS_BLOCKINT1 - DMA channel 1 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT1(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT1_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT1_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT2_MASK (0x4U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT2_SHIFT (2U)
/*! STATUS_BLOCKINT2 - DMA channel 2 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT2(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT2_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT2_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT3_MASK (0x8U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT3_SHIFT (3U)
/*! STATUS_BLOCKINT3 - DMA channel 3 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT3(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT3_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT3_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT4_MASK (0x10U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT4_SHIFT (4U)
/*! STATUS_BLOCKINT4 - DMA channel 4 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT4(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT4_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT4_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT5_MASK (0x20U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT5_SHIFT (5U)
/*! STATUS_BLOCKINT5 - DMA channel 5 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT5(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT5_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT5_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT6_MASK (0x40U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT6_SHIFT (6U)
/*! STATUS_BLOCKINT6 - DMA channel 6 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT6(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT6_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT6_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT7_MASK (0x80U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT7_SHIFT (7U)
/*! STATUS_BLOCKINT7 - DMA channel 7 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT7(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT7_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT7_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT8_MASK (0x100U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT8_SHIFT (8U)
/*! STATUS_BLOCKINT8 - DMA channel 8 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT8(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT8_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT8_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT9_MASK (0x200U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT9_SHIFT (9U)
/*! STATUS_BLOCKINT9 - DMA channel 9 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT9(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT9_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT9_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT10_MASK (0x400U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT10_SHIFT (10U)
/*! STATUS_BLOCKINT10 - DMA channel 10 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT10(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT10_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT10_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT11_MASK (0x800U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT11_SHIFT (11U)
/*! STATUS_BLOCKINT11 - DMA channel 11 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT11(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT11_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT11_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT12_MASK (0x1000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT12_SHIFT (12U)
/*! STATUS_BLOCKINT12 - DMA channel 12 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT12(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT12_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT12_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT13_MASK (0x2000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT13_SHIFT (13U)
/*! STATUS_BLOCKINT13 - DMA channel 13 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT13(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT13_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT13_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT14_MASK (0x4000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT14_SHIFT (14U)
/*! STATUS_BLOCKINT14 - DMA channel 14 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT14(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT14_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT14_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT15_MASK (0x8000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT15_SHIFT (15U)
/*! STATUS_BLOCKINT15 - DMA channel 15 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT15(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT15_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT15_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT16_MASK (0x10000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT16_SHIFT (16U)
/*! STATUS_BLOCKINT16 - DMA channel 16 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT16(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT16_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT16_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT17_MASK (0x20000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT17_SHIFT (17U)
/*! STATUS_BLOCKINT17 - DMA channel 17 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT17(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT17_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT17_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT18_MASK (0x40000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT18_SHIFT (18U)
/*! STATUS_BLOCKINT18 - DMA channel 18 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT18(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT18_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT18_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT19_MASK (0x80000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT19_SHIFT (19U)
/*! STATUS_BLOCKINT19 - DMA channel 19 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT19(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT19_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT19_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT20_MASK (0x100000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT20_SHIFT (20U)
/*! STATUS_BLOCKINT20 - DMA channel 20 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT20(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT20_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT20_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT21_MASK (0x200000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT21_SHIFT (21U)
/*! STATUS_BLOCKINT21 - DMA channel 21 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT21(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT21_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT21_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT22_MASK (0x400000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT22_SHIFT (22U)
/*! STATUS_BLOCKINT22 - DMA channel 22 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT22(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT22_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT22_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT23_MASK (0x800000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT23_SHIFT (23U)
/*! STATUS_BLOCKINT23 - DMA channel 23 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT23(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT23_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT23_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT24_MASK (0x1000000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT24_SHIFT (24U)
/*! STATUS_BLOCKINT24 - DMA channel 24 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT24(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT24_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT24_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT25_MASK (0x2000000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT25_SHIFT (25U)
/*! STATUS_BLOCKINT25 - DMA channel 25 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT25(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT25_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT25_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT26_MASK (0x4000000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT26_SHIFT (26U)
/*! STATUS_BLOCKINT26 - DMA channel 26 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT26(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT26_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT26_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT27_MASK (0x8000000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT27_SHIFT (27U)
/*! STATUS_BLOCKINT27 - DMA channel 27 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT27(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT27_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT27_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT28_MASK (0x10000000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT28_SHIFT (28U)
/*! STATUS_BLOCKINT28 - DMA channel 28 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT28(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT28_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT28_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT29_MASK (0x20000000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT29_SHIFT (29U)
/*! STATUS_BLOCKINT29 - DMA channel 29 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT29(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT29_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT29_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT30_MASK (0x40000000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT30_SHIFT (30U)
/*! STATUS_BLOCKINT30 - DMA channel 30 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT30(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT30_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT30_MASK)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT31_MASK (0x80000000U)
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT31_SHIFT (31U)
/*! STATUS_BLOCKINT31 - DMA channel 31 block transfer interrupt bit
 *  0b0..DMA block burst/single transfer is not completed
 *  0b1..DMA block burst/single transfer is completed
 */
#define DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT31(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT31_SHIFT)) & DMAC_STATUS_BLOCKINT_STATUS_BLOCKINT31_MASK)
/*! @} */

/*! @name MASK_TFRINT - DMA Channel transfer completion interrupt mask Registers */
/*! @{ */
#define DMAC_MASK_TFRINT_MASK_TFRINT0_MASK (0x1U)
#define DMAC_MASK_TFRINT_MASK_TFRINT0_SHIFT (0U)
/*! MASK_TFRINT0 - DMA channel 0 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT0(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT0_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT0_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT1_MASK (0x2U)
#define DMAC_MASK_TFRINT_MASK_TFRINT1_SHIFT (1U)
/*! MASK_TFRINT1 - DMA channel 1 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT1(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT1_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT1_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT2_MASK (0x4U)
#define DMAC_MASK_TFRINT_MASK_TFRINT2_SHIFT (2U)
/*! MASK_TFRINT2 - DMA channel 2 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT2(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT2_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT2_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT3_MASK (0x8U)
#define DMAC_MASK_TFRINT_MASK_TFRINT3_SHIFT (3U)
/*! MASK_TFRINT3 - DMA channel 3 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT3(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT3_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT3_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT4_MASK (0x10U)
#define DMAC_MASK_TFRINT_MASK_TFRINT4_SHIFT (4U)
/*! MASK_TFRINT4 - DMA channel 4 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT4(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT4_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT4_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT5_MASK (0x20U)
#define DMAC_MASK_TFRINT_MASK_TFRINT5_SHIFT (5U)
/*! MASK_TFRINT5 - DMA channel 5 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT5(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT5_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT5_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT6_MASK (0x40U)
#define DMAC_MASK_TFRINT_MASK_TFRINT6_SHIFT (6U)
/*! MASK_TFRINT6 - DMA channel 6 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT6(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT6_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT6_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT7_MASK (0x80U)
#define DMAC_MASK_TFRINT_MASK_TFRINT7_SHIFT (7U)
/*! MASK_TFRINT7 - DMA channel 7 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT7(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT7_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT7_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT8_MASK (0x100U)
#define DMAC_MASK_TFRINT_MASK_TFRINT8_SHIFT (8U)
/*! MASK_TFRINT8 - DMA channel 8 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT8(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT8_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT8_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT9_MASK (0x200U)
#define DMAC_MASK_TFRINT_MASK_TFRINT9_SHIFT (9U)
/*! MASK_TFRINT9 - DMA channel 9 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT9(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT9_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT9_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT10_MASK (0x400U)
#define DMAC_MASK_TFRINT_MASK_TFRINT10_SHIFT (10U)
/*! MASK_TFRINT10 - DMA channel 10 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT10(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT10_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT10_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT11_MASK (0x800U)
#define DMAC_MASK_TFRINT_MASK_TFRINT11_SHIFT (11U)
/*! MASK_TFRINT11 - DMA channel 11 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT11(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT11_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT11_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT12_MASK (0x1000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT12_SHIFT (12U)
/*! MASK_TFRINT12 - DMA channel 12 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT12(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT12_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT12_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT13_MASK (0x2000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT13_SHIFT (13U)
/*! MASK_TFRINT13 - DMA channel 13 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT13(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT13_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT13_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT14_MASK (0x4000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT14_SHIFT (14U)
/*! MASK_TFRINT14 - DMA channel 14 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT14(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT14_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT14_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT15_MASK (0x8000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT15_SHIFT (15U)
/*! MASK_TFRINT15 - DMA channel 15 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT15(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT15_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT15_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT16_MASK (0x10000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT16_SHIFT (16U)
/*! MASK_TFRINT16 - DMA channel 16 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT16(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT16_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT16_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT17_MASK (0x20000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT17_SHIFT (17U)
/*! MASK_TFRINT17 - DMA channel 17 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT17(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT17_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT17_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT18_MASK (0x40000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT18_SHIFT (18U)
/*! MASK_TFRINT18 - DMA channel 18 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT18(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT18_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT18_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT19_MASK (0x80000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT19_SHIFT (19U)
/*! MASK_TFRINT19 - DMA channel 19 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT19(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT19_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT19_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT20_MASK (0x100000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT20_SHIFT (20U)
/*! MASK_TFRINT20 - DMA channel 20 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT20(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT20_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT20_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT21_MASK (0x200000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT21_SHIFT (21U)
/*! MASK_TFRINT21 - DMA channel 21 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT21(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT21_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT21_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT22_MASK (0x400000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT22_SHIFT (22U)
/*! MASK_TFRINT22 - DMA channel 22 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT22(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT22_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT22_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT23_MASK (0x800000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT23_SHIFT (23U)
/*! MASK_TFRINT23 - DMA channel 23 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT23(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT23_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT23_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT24_MASK (0x1000000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT24_SHIFT (24U)
/*! MASK_TFRINT24 - DMA channel 24 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT24(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT24_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT24_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT25_MASK (0x2000000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT25_SHIFT (25U)
/*! MASK_TFRINT25 - DMA channel 25 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT25(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT25_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT25_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT26_MASK (0x4000000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT26_SHIFT (26U)
/*! MASK_TFRINT26 - DMA channel 26 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT26(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT26_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT26_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT27_MASK (0x8000000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT27_SHIFT (27U)
/*! MASK_TFRINT27 - DMA channel 27 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT27(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT27_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT27_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT28_MASK (0x10000000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT28_SHIFT (28U)
/*! MASK_TFRINT28 - DMA channel 28 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT28(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT28_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT28_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT29_MASK (0x20000000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT29_SHIFT (29U)
/*! MASK_TFRINT29 - DMA channel 29 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT29(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT29_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT29_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT30_MASK (0x40000000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT30_SHIFT (30U)
/*! MASK_TFRINT30 - DMA channel 30 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT30(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT30_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT30_MASK)
#define DMAC_MASK_TFRINT_MASK_TFRINT31_MASK (0x80000000U)
#define DMAC_MASK_TFRINT_MASK_TFRINT31_SHIFT (31U)
/*! MASK_TFRINT31 - DMA channel 31 transfer completion interrupt mask bit
 *  0b0..mask the corresponding transfer completion interrupt
 *  0b1..unmask the corresponding transfer completion interrupt
 */
#define DMAC_MASK_TFRINT_MASK_TFRINT31(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_TFRINT_MASK_TFRINT31_SHIFT)) & DMAC_MASK_TFRINT_MASK_TFRINT31_MASK)
/*! @} */

/*! @name STATUS_TFRINT - DMA Channel transfer completion interrupt Registers */
/*! @{ */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT0_MASK (0x1U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT0_SHIFT (0U)
/*! STATUS_TFRINT0 - DMA channel 0 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT0(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT0_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT0_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT1_MASK (0x2U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT1_SHIFT (1U)
/*! STATUS_TFRINT1 - DMA channel 1 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT1(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT1_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT1_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT2_MASK (0x4U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT2_SHIFT (2U)
/*! STATUS_TFRINT2 - DMA channel 2 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT2(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT2_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT2_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT3_MASK (0x8U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT3_SHIFT (3U)
/*! STATUS_TFRINT3 - DMA channel 3 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT3(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT3_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT3_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT4_MASK (0x10U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT4_SHIFT (4U)
/*! STATUS_TFRINT4 - DMA channel 4 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT4(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT4_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT4_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT5_MASK (0x20U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT5_SHIFT (5U)
/*! STATUS_TFRINT5 - DMA channel 5 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT5(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT5_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT5_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT6_MASK (0x40U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT6_SHIFT (6U)
/*! STATUS_TFRINT6 - DMA channel 6 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT6(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT6_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT6_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT7_MASK (0x80U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT7_SHIFT (7U)
/*! STATUS_TFRINT7 - DMA channel 7 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT7(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT7_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT7_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT8_MASK (0x100U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT8_SHIFT (8U)
/*! STATUS_TFRINT8 - DMA channel 8 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT8(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT8_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT8_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT9_MASK (0x200U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT9_SHIFT (9U)
/*! STATUS_TFRINT9 - DMA channel 9 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT9(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT9_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT9_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT10_MASK (0x400U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT10_SHIFT (10U)
/*! STATUS_TFRINT10 - DMA channel 10 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT10(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT10_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT10_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT11_MASK (0x800U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT11_SHIFT (11U)
/*! STATUS_TFRINT11 - DMA channel 11 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT11(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT11_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT11_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT12_MASK (0x1000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT12_SHIFT (12U)
/*! STATUS_TFRINT12 - DMA channel 12 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT12(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT12_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT12_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT13_MASK (0x2000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT13_SHIFT (13U)
/*! STATUS_TFRINT13 - DMA channel 13 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT13(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT13_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT13_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT14_MASK (0x4000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT14_SHIFT (14U)
/*! STATUS_TFRINT14 - DMA channel 14 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT14(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT14_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT14_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT15_MASK (0x8000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT15_SHIFT (15U)
/*! STATUS_TFRINT15 - DMA channel 15 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT15(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT15_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT15_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT16_MASK (0x10000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT16_SHIFT (16U)
/*! STATUS_TFRINT16 - DMA channel 16 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT16(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT16_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT16_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT17_MASK (0x20000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT17_SHIFT (17U)
/*! STATUS_TFRINT17 - DMA channel 17 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT17(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT17_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT17_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT18_MASK (0x40000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT18_SHIFT (18U)
/*! STATUS_TFRINT18 - DMA channel 18 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT18(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT18_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT18_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT19_MASK (0x80000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT19_SHIFT (19U)
/*! STATUS_TFRINT19 - DMA channel 19 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT19(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT19_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT19_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT20_MASK (0x100000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT20_SHIFT (20U)
/*! STATUS_TFRINT20 - DMA channel 20 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT20(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT20_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT20_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT21_MASK (0x200000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT21_SHIFT (21U)
/*! STATUS_TFRINT21 - DMA channel 21 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT21(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT21_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT21_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT22_MASK (0x400000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT22_SHIFT (22U)
/*! STATUS_TFRINT22 - DMA channel 22 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT22(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT22_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT22_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT23_MASK (0x800000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT23_SHIFT (23U)
/*! STATUS_TFRINT23 - DMA channel 23 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT23(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT23_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT23_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT24_MASK (0x1000000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT24_SHIFT (24U)
/*! STATUS_TFRINT24 - DMA channel 24 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT24(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT24_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT24_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT25_MASK (0x2000000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT25_SHIFT (25U)
/*! STATUS_TFRINT25 - DMA channel 25 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT25(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT25_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT25_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT26_MASK (0x4000000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT26_SHIFT (26U)
/*! STATUS_TFRINT26 - DMA channel 26 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT26(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT26_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT26_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT27_MASK (0x8000000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT27_SHIFT (27U)
/*! STATUS_TFRINT27 - DMA channel 27 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT27(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT27_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT27_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT28_MASK (0x10000000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT28_SHIFT (28U)
/*! STATUS_TFRINT28 - DMA channel 28 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT28(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT28_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT28_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT29_MASK (0x20000000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT29_SHIFT (29U)
/*! STATUS_TFRINT29 - DMA channel 29 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT29(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT29_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT29_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT30_MASK (0x40000000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT30_SHIFT (30U)
/*! STATUS_TFRINT30 - DMA channel 30 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT30(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT30_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT30_MASK)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT31_MASK (0x80000000U)
#define DMAC_STATUS_TFRINT_STATUS_TFRINT31_SHIFT (31U)
/*! STATUS_TFRINT31 - DMA channel 31 transfer completion interrupt
 *  0b0..transfer is not completed
 *  0b1..transfer is completed
 */
#define DMAC_STATUS_TFRINT_STATUS_TFRINT31(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_TFRINT_STATUS_TFRINT31_SHIFT)) & DMAC_STATUS_TFRINT_STATUS_TFRINT31_MASK)
/*! @} */

/*! @name MASK_BUSERRINT - DMA Channel bus error interrupt mask Registers */
/*! @{ */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT0_MASK (0x1U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT0_SHIFT (0U)
/*! MASK_BUSERRINT0 - DMA Channel 0 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT0(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT0_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT0_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT1_MASK (0x2U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT1_SHIFT (1U)
/*! MASK_BUSERRINT1 - DMA Channel 1 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT1(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT1_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT1_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT2_MASK (0x4U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT2_SHIFT (2U)
/*! MASK_BUSERRINT2 - DMA Channel 2 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT2(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT2_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT2_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT3_MASK (0x8U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT3_SHIFT (3U)
/*! MASK_BUSERRINT3 - DMA Channel 3 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT3(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT3_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT3_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT4_MASK (0x10U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT4_SHIFT (4U)
/*! MASK_BUSERRINT4 - DMA Channel 4 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT4(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT4_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT4_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT5_MASK (0x20U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT5_SHIFT (5U)
/*! MASK_BUSERRINT5 - DMA Channel 5 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT5(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT5_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT5_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT6_MASK (0x40U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT6_SHIFT (6U)
/*! MASK_BUSERRINT6 - DMA Channel 6 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT6(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT6_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT6_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT7_MASK (0x80U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT7_SHIFT (7U)
/*! MASK_BUSERRINT7 - DMA Channel 7 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT7(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT7_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT7_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT8_MASK (0x100U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT8_SHIFT (8U)
/*! MASK_BUSERRINT8 - DMA Channel 8 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT8(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT8_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT8_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT9_MASK (0x200U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT9_SHIFT (9U)
/*! MASK_BUSERRINT9 - DMA Channel 9 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT9(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT9_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT9_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT10_MASK (0x400U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT10_SHIFT (10U)
/*! MASK_BUSERRINT10 - DMA Channel 10 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT10(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT10_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT10_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT11_MASK (0x800U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT11_SHIFT (11U)
/*! MASK_BUSERRINT11 - DMA Channel 11 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT11(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT11_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT11_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT12_MASK (0x1000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT12_SHIFT (12U)
/*! MASK_BUSERRINT12 - DMA Channel 12 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT12(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT12_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT12_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT13_MASK (0x2000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT13_SHIFT (13U)
/*! MASK_BUSERRINT13 - DMA Channel 13 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT13(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT13_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT13_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT14_MASK (0x4000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT14_SHIFT (14U)
/*! MASK_BUSERRINT14 - DMA Channel 14 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT14(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT14_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT14_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT15_MASK (0x8000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT15_SHIFT (15U)
/*! MASK_BUSERRINT15 - DMA Channel 15 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT15(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT15_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT15_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT16_MASK (0x10000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT16_SHIFT (16U)
/*! MASK_BUSERRINT16 - DMA Channel 16 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT16(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT16_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT16_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT17_MASK (0x20000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT17_SHIFT (17U)
/*! MASK_BUSERRINT17 - DMA Channel 17 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT17(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT17_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT17_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT18_MASK (0x40000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT18_SHIFT (18U)
/*! MASK_BUSERRINT18 - DMA Channel 18 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT18(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT18_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT18_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT19_MASK (0x80000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT19_SHIFT (19U)
/*! MASK_BUSERRINT19 - DMA Channel 19 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT19(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT19_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT19_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT20_MASK (0x100000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT20_SHIFT (20U)
/*! MASK_BUSERRINT20 - DMA Channel 20 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT20(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT20_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT20_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT21_MASK (0x200000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT21_SHIFT (21U)
/*! MASK_BUSERRINT21 - DMA Channel 21 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT21(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT21_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT21_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT22_MASK (0x400000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT22_SHIFT (22U)
/*! MASK_BUSERRINT22 - DMA Channel 22 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT22(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT22_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT22_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT23_MASK (0x800000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT23_SHIFT (23U)
/*! MASK_BUSERRINT23 - DMA Channel 23 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT23(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT23_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT23_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT24_MASK (0x1000000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT24_SHIFT (24U)
/*! MASK_BUSERRINT24 - DMA Channel 24 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT24(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT24_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT24_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT25_MASK (0x2000000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT25_SHIFT (25U)
/*! MASK_BUSERRINT25 - DMA Channel 25 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT25(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT25_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT25_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT26_MASK (0x4000000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT26_SHIFT (26U)
/*! MASK_BUSERRINT26 - DMA Channel 26 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT26(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT26_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT26_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT27_MASK (0x8000000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT27_SHIFT (27U)
/*! MASK_BUSERRINT27 - DMA Channel 27 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT27(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT27_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT27_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT28_MASK (0x10000000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT28_SHIFT (28U)
/*! MASK_BUSERRINT28 - DMA Channel 28 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT28(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT28_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT28_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT29_MASK (0x20000000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT29_SHIFT (29U)
/*! MASK_BUSERRINT29 - DMA Channel 29 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT29(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT29_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT29_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT30_MASK (0x40000000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT30_SHIFT (30U)
/*! MASK_BUSERRINT30 - DMA Channel 30 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT30(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT30_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT30_MASK)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT31_MASK (0x80000000U)
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT31_SHIFT (31U)
/*! MASK_BUSERRINT31 - DMA Channel 31 bus error interrupt mask bit
 *  0b0..mask the corresponding bus error interrupt
 *  0b1..unmask the corresponding bus error interrupt
 */
#define DMAC_MASK_BUSERRINT_MASK_BUSERRINT31(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_BUSERRINT_MASK_BUSERRINT31_SHIFT)) & DMAC_MASK_BUSERRINT_MASK_BUSERRINT31_MASK)
/*! @} */

/*! @name STATUS_BUSERRINT - DMA Channel bus error interrupt mask Registers */
/*! @{ */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT0_MASK (0x1U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT0_SHIFT (0U)
/*! STATUS_BUSERRINT0 - DMA channel 0 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT0(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT0_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT0_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT1_MASK (0x2U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT1_SHIFT (1U)
/*! STATUS_BUSERRINT1 - DMA channel 1 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT1(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT1_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT1_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT2_MASK (0x4U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT2_SHIFT (2U)
/*! STATUS_BUSERRINT2 - DMA channel 2 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT2(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT2_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT2_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT3_MASK (0x8U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT3_SHIFT (3U)
/*! STATUS_BUSERRINT3 - DMA channel 3 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT3(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT3_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT3_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT4_MASK (0x10U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT4_SHIFT (4U)
/*! STATUS_BUSERRINT4 - DMA channel 4 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT4(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT4_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT4_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT5_MASK (0x20U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT5_SHIFT (5U)
/*! STATUS_BUSERRINT5 - DMA channel 5 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT5(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT5_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT5_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT6_MASK (0x40U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT6_SHIFT (6U)
/*! STATUS_BUSERRINT6 - DMA channel 6 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT6(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT6_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT6_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT7_MASK (0x80U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT7_SHIFT (7U)
/*! STATUS_BUSERRINT7 - DMA channel 7 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT7(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT7_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT7_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT8_MASK (0x100U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT8_SHIFT (8U)
/*! STATUS_BUSERRINT8 - DMA channel 8 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT8(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT8_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT8_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT9_MASK (0x200U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT9_SHIFT (9U)
/*! STATUS_BUSERRINT9 - DMA channel 9 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT9(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT9_SHIFT)) & DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT9_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT10_MASK (0x400U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT10_SHIFT (10U)
/*! STATUS_BUSERRINT10 - DMA channel 10 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT10(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT10_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT10_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT11_MASK (0x800U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT11_SHIFT (11U)
/*! STATUS_BUSERRINT11 - DMA channel 11 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT11(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT11_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT11_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT12_MASK (0x1000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT12_SHIFT (12U)
/*! STATUS_BUSERRINT12 - DMA channel 12 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT12(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT12_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT12_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT13_MASK (0x2000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT13_SHIFT (13U)
/*! STATUS_BUSERRINT13 - DMA channel 13 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT13(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT13_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT13_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT14_MASK (0x4000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT14_SHIFT (14U)
/*! STATUS_BUSERRINT14 - DMA channel 14 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT14(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT14_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT14_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT15_MASK (0x8000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT15_SHIFT (15U)
/*! STATUS_BUSERRINT15 - DMA channel 15 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT15(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT15_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT15_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT16_MASK (0x10000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT16_SHIFT (16U)
/*! STATUS_BUSERRINT16 - DMA channel 16 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT16(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT16_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT16_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT17_MASK (0x20000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT17_SHIFT (17U)
/*! STATUS_BUSERRINT17 - DMA channel 17 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT17(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT17_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT17_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT18_MASK (0x40000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT18_SHIFT (18U)
/*! STATUS_BUSERRINT18 - DMA channel 18 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT18(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT18_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT18_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT19_MASK (0x80000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT19_SHIFT (19U)
/*! STATUS_BUSERRINT19 - DMA channel 19 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT19(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT19_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT19_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT20_MASK (0x100000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT20_SHIFT (20U)
/*! STATUS_BUSERRINT20 - DMA channel 20 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT20(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT20_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT20_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT21_MASK (0x200000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT21_SHIFT (21U)
/*! STATUS_BUSERRINT21 - DMA channel 21 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT21(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT21_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT21_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT22_MASK (0x400000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT22_SHIFT (22U)
/*! STATUS_BUSERRINT22 - DMA channel 22 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT22(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT22_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT22_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT23_MASK (0x800000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT23_SHIFT (23U)
/*! STATUS_BUSERRINT23 - DMA channel 23 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT23(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT23_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT23_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT24_MASK (0x1000000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT24_SHIFT (24U)
/*! STATUS_BUSERRINT24 - DMA channel 24 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT24(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT24_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT24_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT25_MASK (0x2000000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT25_SHIFT (25U)
/*! STATUS_BUSERRINT25 - DMA channel 25 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT25(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT25_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT25_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT26_MASK (0x4000000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT26_SHIFT (26U)
/*! STATUS_BUSERRINT26 - DMA channel 26 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT26(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT26_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT26_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT27_MASK (0x8000000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT27_SHIFT (27U)
/*! STATUS_BUSERRINT27 - DMA channel 27 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT27(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT27_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT27_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT28_MASK (0x10000000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT28_SHIFT (28U)
/*! STATUS_BUSERRINT28 - DMA channel 28 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT28(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT28_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT28_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT29_MASK (0x20000000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT29_SHIFT (29U)
/*! STATUS_BUSERRINT29 - DMA channel 29 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT29(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT29_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT29_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT30_MASK (0x40000000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT30_SHIFT (30U)
/*! STATUS_BUSERRINT30 - DMA channel 30 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT30(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT30_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT30_MASK)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT31_MASK (0x80000000U)
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT31_SHIFT (31U)
/*! STATUS_BUSERRINT31 - DMA channel 31 bus error interrupt bit
 *  0b0..no bus error interrupt is generated
 *  0b1..bus error interrupt is generated
 */
#define DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT31(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT31_SHIFT)) &                                             \
     DMAC_STATUS_BUSERRINT_STATUS_BUSERRINT31_MASK)
/*! @} */

/*! @name MASK_ADDRERRINT - DMA Channel source/target address alignment error interrupt mask Registers */
/*! @{ */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT0_MASK (0x1U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT0_SHIFT (0U)
/*! MASK_ADDRERRINT0 - DMA Channel 0 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT0(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT0_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT0_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT1_MASK (0x2U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT1_SHIFT (1U)
/*! MASK_ADDRERRINT1 - DMA Channel 1 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT1(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT1_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT1_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT2_MASK (0x4U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT2_SHIFT (2U)
/*! MASK_ADDRERRINT2 - DMA Channel 2 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT2(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT2_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT2_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT3_MASK (0x8U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT3_SHIFT (3U)
/*! MASK_ADDRERRINT3 - DMA Channel 3 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT3(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT3_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT3_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT4_MASK (0x10U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT4_SHIFT (4U)
/*! MASK_ADDRERRINT4 - DMA Channel 4 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT4(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT4_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT4_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT5_MASK (0x20U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT5_SHIFT (5U)
/*! MASK_ADDRERRINT5 - DMA Channel 5 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT5(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT5_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT5_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT6_MASK (0x40U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT6_SHIFT (6U)
/*! MASK_ADDRERRINT6 - DMA Channel 6 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT6(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT6_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT6_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT7_MASK (0x80U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT7_SHIFT (7U)
/*! MASK_ADDRERRINT7 - DMA Channel 7 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT7(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT7_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT7_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT8_MASK (0x100U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT8_SHIFT (8U)
/*! MASK_ADDRERRINT8 - DMA Channel 8 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT8(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT8_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT8_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT9_MASK (0x200U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT9_SHIFT (9U)
/*! MASK_ADDRERRINT9 - DMA Channel 9 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT9(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT9_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT9_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT10_MASK (0x400U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT10_SHIFT (10U)
/*! MASK_ADDRERRINT10 - DMA Channel 10 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT10(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT10_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT10_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT11_MASK (0x800U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT11_SHIFT (11U)
/*! MASK_ADDRERRINT11 - DMA Channel 11 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT11(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT11_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT11_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT12_MASK (0x1000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT12_SHIFT (12U)
/*! MASK_ADDRERRINT12 - DMA Channel 12 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT12(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT12_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT12_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT13_MASK (0x2000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT13_SHIFT (13U)
/*! MASK_ADDRERRINT13 - DMA Channel 13 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT13(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT13_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT13_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT14_MASK (0x4000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT14_SHIFT (14U)
/*! MASK_ADDRERRINT14 - DMA Channel 14 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT14(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT14_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT14_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT15_MASK (0x8000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT15_SHIFT (15U)
/*! MASK_ADDRERRINT15 - DMA Channel 15 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT15(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT15_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT15_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT16_MASK (0x10000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT16_SHIFT (16U)
/*! MASK_ADDRERRINT16 - DMA Channel 16 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT16(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT16_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT16_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT17_MASK (0x20000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT17_SHIFT (17U)
/*! MASK_ADDRERRINT17 - DMA Channel 17 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT17(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT17_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT17_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT18_MASK (0x40000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT18_SHIFT (18U)
/*! MASK_ADDRERRINT18 - DMA Channel 18 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT18(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT18_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT18_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT19_MASK (0x80000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT19_SHIFT (19U)
/*! MASK_ADDRERRINT19 - DMA Channel 19 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT19(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT19_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT19_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT20_MASK (0x100000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT20_SHIFT (20U)
/*! MASK_ADDRERRINT20 - DMA Channel 20 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT20(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT20_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT20_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT21_MASK (0x200000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT21_SHIFT (21U)
/*! MASK_ADDRERRINT21 - DMA Channel 21 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT21(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT21_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT21_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT22_MASK (0x400000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT22_SHIFT (22U)
/*! MASK_ADDRERRINT22 - DMA Channel 22 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT22(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT22_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT22_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT23_MASK (0x800000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT23_SHIFT (23U)
/*! MASK_ADDRERRINT23 - DMA Channel 23 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT23(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT23_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT23_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT24_MASK (0x1000000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT24_SHIFT (24U)
/*! MASK_ADDRERRINT24 - DMA Channel 24 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT24(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT24_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT24_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT25_MASK (0x2000000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT25_SHIFT (25U)
/*! MASK_ADDRERRINT25 - DMA Channel 25 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT25(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT25_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT25_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT26_MASK (0x4000000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT26_SHIFT (26U)
/*! MASK_ADDRERRINT26 - DMA Channel 26 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT26(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT26_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT26_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT27_MASK (0x8000000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT27_SHIFT (27U)
/*! MASK_ADDRERRINT27 - DMA Channel 27 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT27(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT27_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT27_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT28_MASK (0x10000000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT28_SHIFT (28U)
/*! MASK_ADDRERRINT28 - DMA Channel 28 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT28(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT28_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT28_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT29_MASK (0x20000000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT29_SHIFT (29U)
/*! MASK_ADDRERRINT29 - DMA Channel 29 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT29(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT29_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT29_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT30_MASK (0x40000000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT30_SHIFT (30U)
/*! MASK_ADDRERRINT30 - DMA Channel 30 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT30(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT30_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT30_MASK)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT31_MASK (0x80000000U)
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT31_SHIFT (31U)
/*! MASK_ADDRERRINT31 - DMA Channel 31 source/target address alignment error interrupt mask bit
 *  0b0..mask the corresponding address error interrupt
 *  0b1..unmask the corresponding address error interrupt
 */
#define DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT31(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT31_SHIFT)) & DMAC_MASK_ADDRERRINT_MASK_ADDRERRINT31_MASK)
/*! @} */

/*! @name STATUS_ADDRERRINT - DMA Channel source/target address alignment error interrupt Registers */
/*! @{ */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT0_MASK (0x1U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT0_SHIFT (0U)
/*! STATUS_ADDRERRINT0 - DMA Channel 0 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT0(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT0_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT0_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT1_MASK (0x2U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT1_SHIFT (1U)
/*! STATUS_ADDRERRINT1 - DMA Channel 1 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT1(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT1_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT1_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT2_MASK (0x4U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT2_SHIFT (2U)
/*! STATUS_ADDRERRINT2 - DMA Channel 2 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT2(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT2_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT2_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT3_MASK (0x8U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT3_SHIFT (3U)
/*! STATUS_ADDRERRINT3 - DMA Channel 3 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT3(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT3_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT3_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT4_MASK (0x10U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT4_SHIFT (4U)
/*! STATUS_ADDRERRINT4 - DMA Channel 4 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT4(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT4_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT4_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT5_MASK (0x20U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT5_SHIFT (5U)
/*! STATUS_ADDRERRINT5 - DMA Channel 5 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT5(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT5_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT5_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT6_MASK (0x40U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT6_SHIFT (6U)
/*! STATUS_ADDRERRINT6 - DMA Channel 6 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT6(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT6_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT6_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT7_MASK (0x80U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT7_SHIFT (7U)
/*! STATUS_ADDRERRINT7 - DMA Channel 7 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT7(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT7_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT7_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT8_MASK (0x100U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT8_SHIFT (8U)
/*! STATUS_ADDRERRINT8 - DMA Channel 8 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT8(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT8_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT8_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT9_MASK (0x200U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT9_SHIFT (9U)
/*! STATUS_ADDRERRINT9 - DMA Channel 9 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT9(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT9_SHIFT)) &                                            \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT9_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT10_MASK (0x400U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT10_SHIFT (10U)
/*! STATUS_ADDRERRINT10 - DMA Channel 10 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT10(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT10_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT10_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT11_MASK (0x800U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT11_SHIFT (11U)
/*! STATUS_ADDRERRINT11 - DMA Channel 11 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT11(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT11_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT11_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT12_MASK (0x1000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT12_SHIFT (12U)
/*! STATUS_ADDRERRINT12 - DMA Channel 12 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT12(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT12_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT12_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT13_MASK (0x2000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT13_SHIFT (13U)
/*! STATUS_ADDRERRINT13 - DMA Channel 13 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT13(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT13_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT13_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT14_MASK (0x4000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT14_SHIFT (14U)
/*! STATUS_ADDRERRINT14 - DMA Channel 14 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT14(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT14_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT14_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT15_MASK (0x8000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT15_SHIFT (15U)
/*! STATUS_ADDRERRINT15 - DMA Channel 15 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT15(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT15_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT15_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT16_MASK (0x10000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT16_SHIFT (16U)
/*! STATUS_ADDRERRINT16 - DMA Channel 16 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT16(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT16_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT16_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT17_MASK (0x20000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT17_SHIFT (17U)
/*! STATUS_ADDRERRINT17 - DMA Channel 17 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT17(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT17_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT17_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT18_MASK (0x40000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT18_SHIFT (18U)
/*! STATUS_ADDRERRINT18 - DMA Channel 18 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT18(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT18_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT18_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT19_MASK (0x80000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT19_SHIFT (19U)
/*! STATUS_ADDRERRINT19 - DMA Channel 19 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT19(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT19_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT19_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT20_MASK (0x100000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT20_SHIFT (20U)
/*! STATUS_ADDRERRINT20 - DMA Channel 20 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT20(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT20_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT20_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT21_MASK (0x200000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT21_SHIFT (21U)
/*! STATUS_ADDRERRINT21 - DMA Channel 21 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT21(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT21_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT21_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT22_MASK (0x400000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT22_SHIFT (22U)
/*! STATUS_ADDRERRINT22 - DMA Channel 22 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT22(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT22_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT22_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT23_MASK (0x800000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT23_SHIFT (23U)
/*! STATUS_ADDRERRINT23 - DMA Channel 23 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT23(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT23_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT23_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT24_MASK (0x1000000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT24_SHIFT (24U)
/*! STATUS_ADDRERRINT24 - DMA Channel 24 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT24(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT24_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT24_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT25_MASK (0x2000000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT25_SHIFT (25U)
/*! STATUS_ADDRERRINT25 - DMA Channel 25 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT25(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT25_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT25_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT26_MASK (0x4000000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT26_SHIFT (26U)
/*! STATUS_ADDRERRINT26 - DMA Channel 26 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT26(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT26_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT26_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT27_MASK (0x8000000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT27_SHIFT (27U)
/*! STATUS_ADDRERRINT27 - DMA Channel 27 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT27(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT27_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT27_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT28_MASK (0x10000000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT28_SHIFT (28U)
/*! STATUS_ADDRERRINT28 - DMA Channel 28 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT28(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT28_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT28_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT29_MASK (0x20000000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT29_SHIFT (29U)
/*! STATUS_ADDRERRINT29 - DMA Channel 29 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT29(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT29_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT29_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT30_MASK (0x40000000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT30_SHIFT (30U)
/*! STATUS_ADDRERRINT30 - DMA Channel 30 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT30(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT30_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT30_MASK)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT31_MASK (0x80000000U)
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT31_SHIFT (31U)
/*! STATUS_ADDRERRINT31 - DMA Channel 31 source/target address alignment error interrupt bit
 *  0b0..no address error interrupt is generated
 *  0b1..address error interrupt is generated
 */
#define DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT31(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT31_SHIFT)) &                                           \
     DMAC_STATUS_ADDRERRINT_STATUS_ADDRERRINT31_MASK)
/*! @} */

/*! @name STATUS_CHLINT - DMA CHANNEL INTERRUPT REGISTER */
/*! @{ */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT0_MASK (0x1U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT0_SHIFT (0U)
/*! STATUS_CHLINT0 - DMA channel 0 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT0(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT0_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT0_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT1_MASK (0x2U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT1_SHIFT (1U)
/*! STATUS_CHLINT1 - DMA channel 1 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT1(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT1_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT1_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT2_MASK (0x4U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT2_SHIFT (2U)
/*! STATUS_CHLINT2 - DMA channel 2 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT2(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT2_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT2_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT3_MASK (0x8U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT3_SHIFT (3U)
/*! STATUS_CHLINT3 - DMA channel 3 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT3(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT3_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT3_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT4_MASK (0x10U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT4_SHIFT (4U)
/*! STATUS_CHLINT4 - DMA channel 4 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT4(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT4_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT4_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT5_MASK (0x20U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT5_SHIFT (5U)
/*! STATUS_CHLINT5 - DMA channel 5 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT5(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT5_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT5_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT6_MASK (0x40U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT6_SHIFT (6U)
/*! STATUS_CHLINT6 - DMA channel 6 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT6(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT6_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT6_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT7_MASK (0x80U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT7_SHIFT (7U)
/*! STATUS_CHLINT7 - DMA channel 7 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT7(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT7_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT7_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT8_MASK (0x100U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT8_SHIFT (8U)
/*! STATUS_CHLINT8 - DMA channel 8 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT8(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT8_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT8_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT9_MASK (0x200U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT9_SHIFT (9U)
/*! STATUS_CHLINT9 - DMA channel 9 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT9(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT9_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT9_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT10_MASK (0x400U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT10_SHIFT (10U)
/*! STATUS_CHLINT10 - DMA channel 10 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT10(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT10_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT10_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT11_MASK (0x800U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT11_SHIFT (11U)
/*! STATUS_CHLINT11 - DMA channel 11 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT11(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT11_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT11_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT12_MASK (0x1000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT12_SHIFT (12U)
/*! STATUS_CHLINT12 - DMA channel 12 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT12(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT12_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT12_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT13_MASK (0x2000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT13_SHIFT (13U)
/*! STATUS_CHLINT13 - DMA channel 13 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT13(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT13_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT13_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT14_MASK (0x4000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT14_SHIFT (14U)
/*! STATUS_CHLINT14 - DMA channel 14 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT14(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT14_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT14_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT15_MASK (0x8000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT15_SHIFT (15U)
/*! STATUS_CHLINT15 - DMA channel 15 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT15(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT15_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT15_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT16_MASK (0x10000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT16_SHIFT (16U)
/*! STATUS_CHLINT16 - DMA channel 16 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT16(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT16_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT16_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT17_MASK (0x20000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT17_SHIFT (17U)
/*! STATUS_CHLINT17 - DMA channel 17 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT17(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT17_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT17_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT18_MASK (0x40000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT18_SHIFT (18U)
/*! STATUS_CHLINT18 - DMA channel 18 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT18(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT18_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT18_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT19_MASK (0x80000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT19_SHIFT (19U)
/*! STATUS_CHLINT19 - DMA channel 19 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT19(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT19_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT19_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT20_MASK (0x100000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT20_SHIFT (20U)
/*! STATUS_CHLINT20 - DMA channel 20 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT20(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT20_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT20_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT21_MASK (0x200000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT21_SHIFT (21U)
/*! STATUS_CHLINT21 - DMA channel 21 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT21(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT21_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT21_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT22_MASK (0x400000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT22_SHIFT (22U)
/*! STATUS_CHLINT22 - DMA channel 22 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT22(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT22_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT22_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT23_MASK (0x800000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT23_SHIFT (23U)
/*! STATUS_CHLINT23 - DMA channel 23 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT23(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT23_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT23_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT24_MASK (0x1000000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT24_SHIFT (24U)
/*! STATUS_CHLINT24 - DMA channel 24 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT24(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT24_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT24_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT25_MASK (0x2000000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT25_SHIFT (25U)
/*! STATUS_CHLINT25 - DMA channel 25 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT25(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT25_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT25_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT26_MASK (0x4000000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT26_SHIFT (26U)
/*! STATUS_CHLINT26 - DMA channel 26 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT26(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT26_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT26_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT27_MASK (0x8000000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT27_SHIFT (27U)
/*! STATUS_CHLINT27 - DMA channel 27 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT27(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT27_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT27_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT28_MASK (0x10000000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT28_SHIFT (28U)
/*! STATUS_CHLINT28 - DMA channel 28 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT28(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT28_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT28_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT29_MASK (0x20000000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT29_SHIFT (29U)
/*! STATUS_CHLINT29 - DMA channel 29 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT29(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT29_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT29_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT30_MASK (0x40000000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT30_SHIFT (30U)
/*! STATUS_CHLINT30 - DMA channel 30 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT30(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT30_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT30_MASK)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT31_MASK (0x80000000U)
#define DMAC_STATUS_CHLINT_STATUS_CHLINT31_SHIFT (31U)
/*! STATUS_CHLINT31 - DMA channel 31 interrupt
 */
#define DMAC_STATUS_CHLINT_STATUS_CHLINT31(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << DMAC_STATUS_CHLINT_STATUS_CHLINT31_SHIFT)) & DMAC_STATUS_CHLINT_STATUS_CHLINT31_MASK)
/*! @} */

/*! @name HPROT - THE PROTECTION CONTROL SIGNALS REGISTERS */
/*! @{ */
#define DMAC_HPROT_HPROT_MASK (0xFU)
#define DMAC_HPROT_HPROT_SHIFT (0U)
/*! HPROT - protection control signals
 */
#define DMAC_HPROT_HPROT(x) (((uint32_t)(((uint32_t)(x)) << DMAC_HPROT_HPROT_SHIFT)) & DMAC_HPROT_HPROT_MASK)
/*! @} */

/*! @name SADR - DMA SOURCE ADDRESS REGISTERS */
/*! @{ */
#define DMAC_SADR_SRCADDR0_MASK (0x3U)
#define DMAC_SADR_SRCADDR0_SHIFT (0U)
/*! SRCADDR0 - SRCADDR0
 */
#define DMAC_SADR_SRCADDR0(x) (((uint32_t)(((uint32_t)(x)) << DMAC_SADR_SRCADDR0_SHIFT)) & DMAC_SADR_SRCADDR0_MASK)
#define DMAC_SADR_SRCADDR_MASK (0xFFFFFFFCU)
#define DMAC_SADR_SRCADDR_SHIFT (2U)
/*! SRCADDR - SOURCE ADDRESS
 */
#define DMAC_SADR_SRCADDR(x) (((uint32_t)(((uint32_t)(x)) << DMAC_SADR_SRCADDR_SHIFT)) & DMAC_SADR_SRCADDR_MASK)
/*! @} */

/* The count of DMAC_SADR */
#define DMAC_SADR_COUNT (32U)

/*! @name TADR - DMA TARGET ADDRESS REGISTERS */
/*! @{ */
#define DMAC_TADR_TRGADDR0_MASK (0x3U)
#define DMAC_TADR_TRGADDR0_SHIFT (0U)
/*! TRGADDR0 - TRGADDR0
 */
#define DMAC_TADR_TRGADDR0(x) (((uint32_t)(((uint32_t)(x)) << DMAC_TADR_TRGADDR0_SHIFT)) & DMAC_TADR_TRGADDR0_MASK)
#define DMAC_TADR_TRGADDR_MASK (0xFFFFFFFCU)
#define DMAC_TADR_TRGADDR_SHIFT (2U)
/*! TRGADDR - TARGET ADDRESS
 */
#define DMAC_TADR_TRGADDR(x) (((uint32_t)(((uint32_t)(x)) << DMAC_TADR_TRGADDR_SHIFT)) & DMAC_TADR_TRGADDR_MASK)
/*! @} */

/* The count of DMAC_TADR */
#define DMAC_TADR_COUNT (32U)

/*! @name CTRLA - DMA CONTROL REGISTERS A */
/*! @{ */
#define DMAC_CTRLA_LEN_MASK (0x1FFFU)
#define DMAC_CTRLA_LEN_SHIFT (0U)
/*! LEN - Length of the transfer in bytes
 */
#define DMAC_CTRLA_LEN(x) (((uint32_t)(((uint32_t)(x)) << DMAC_CTRLA_LEN_SHIFT)) & DMAC_CTRLA_LEN_MASK)
#define DMAC_CTRLA_WIDTH_MASK (0x6000U)
#define DMAC_CTRLA_WIDTH_SHIFT (13U)
/*! WIDTH - Width
 *  0b00..reserved for on-chip peripheral-related transactions (1 byte)
 *  0b01..1 byte
 *  0b10..half-word (2 bytes)
 *  0b11..word (4 bytes)
 */
#define DMAC_CTRLA_WIDTH(x) (((uint32_t)(((uint32_t)(x)) << DMAC_CTRLA_WIDTH_SHIFT)) & DMAC_CTRLA_WIDTH_MASK)
#define DMAC_CTRLA_TRAN_SIZE_MASK (0x18000U)
#define DMAC_CTRLA_TRAN_SIZE_SHIFT (15U)
/*! TRAN_SIZE - Size
 *  0b00..1
 *  0b01..4
 *  0b10..8
 *  0b11..16
 */
#define DMAC_CTRLA_TRAN_SIZE(x) (((uint32_t)(((uint32_t)(x)) << DMAC_CTRLA_TRAN_SIZE_SHIFT)) & DMAC_CTRLA_TRAN_SIZE_MASK)
#define DMAC_CTRLA_TRAN_TYPE_MASK (0x60000U)
#define DMAC_CTRLA_TRAN_TYPE_SHIFT (17U)
/*! TRAN_TYPE - Source to target transfer type
 *  0b00..M2M
 *  0b01..M2P
 *  0b10..P2M
 *  0b11..reserved
 */
#define DMAC_CTRLA_TRAN_TYPE(x) (((uint32_t)(((uint32_t)(x)) << DMAC_CTRLA_TRAN_TYPE_SHIFT)) & DMAC_CTRLA_TRAN_TYPE_MASK)
#define DMAC_CTRLA_INCTRGADDR_MASK (0x20000000U)
#define DMAC_CTRLA_INCTRGADDR_SHIFT (29U)
/*! INCTRGADDR - Target address increment
 *  0b0..do not increment target address
 *  0b1..increment target address
 */
#define DMAC_CTRLA_INCTRGADDR(x) (((uint32_t)(((uint32_t)(x)) << DMAC_CTRLA_INCTRGADDR_SHIFT)) & DMAC_CTRLA_INCTRGADDR_MASK)
#define DMAC_CTRLA_INCSRCADDR_MASK (0x40000000U)
#define DMAC_CTRLA_INCSRCADDR_SHIFT (30U)
/*! INCSRCADDR - Source address increment
 *  0b0..do not increment source address
 *  0b1..stop the running channel
 */
#define DMAC_CTRLA_INCSRCADDR(x) (((uint32_t)(((uint32_t)(x)) << DMAC_CTRLA_INCSRCADDR_SHIFT)) & DMAC_CTRLA_INCSRCADDR_MASK)
/*! @} */

/* The count of DMAC_CTRLA */
#define DMAC_CTRLA_COUNT (32U)

/*! @name CTRLB - DMA CONTROL REGISTERS B */
/*! @{ */
#define DMAC_CTRLB_PERNUM_MASK (0x3FU)
#define DMAC_CTRLB_PERNUM_SHIFT (0U)
/*! PERNUM - peripheral number
 */
#define DMAC_CTRLB_PERNUM(x) (((uint32_t)(((uint32_t)(x)) << DMAC_CTRLB_PERNUM_SHIFT)) & DMAC_CTRLB_PERNUM_MASK)
/*! @} */

/* The count of DMAC_CTRLB */
#define DMAC_CTRLB_COUNT (32U)

/*! @name CHL_EN - DMA CHANNEL ENABLE REGISTERS */
/*! @{ */
#define DMAC_CHL_EN_CHL_EN_MASK (0x80000000U)
#define DMAC_CHL_EN_CHL_EN_SHIFT (31U)
/*! CHL_EN - Enable/Disable the channel
 *  0b0..disable the channel
 *  0b1..enable the channel
 */
#define DMAC_CHL_EN_CHL_EN(x) (((uint32_t)(((uint32_t)(x)) << DMAC_CHL_EN_CHL_EN_SHIFT)) & DMAC_CHL_EN_CHL_EN_MASK)
/*! @} */

/* The count of DMAC_CHL_EN */
#define DMAC_CHL_EN_COUNT (32U)

/*! @name CHL_STOP - DMA CHANNEL STOP REGISTERS */
/*! @{ */
#define DMAC_CHL_STOP_CHL_STOP_MASK (0x80000000U)
#define DMAC_CHL_STOP_CHL_STOP_SHIFT (31U)
/*! CHL_STOP - Stop the running channel
 *  0b0..no impact on the channel
 *  0b1..stop the running channel
 */
#define DMAC_CHL_STOP_CHL_STOP(x) (((uint32_t)(((uint32_t)(x)) << DMAC_CHL_STOP_CHL_STOP_SHIFT)) & DMAC_CHL_STOP_CHL_STOP_MASK)
/*! @} */

/* The count of DMAC_CHL_STOP */
#define DMAC_CHL_STOP_COUNT (32U)

/*! @name ACK_DELAY - DMA ACK DELAY CYCLE for single transfer in M2P transfer type Registers */
/*! @{ */
#define DMAC_ACK_DELAY_ACK_DELAY_NUM_MASK (0x3FFU)
#define DMAC_ACK_DELAY_ACK_DELAY_NUM_SHIFT (0U)
/*! ACK_DELAY_NUM - DMA ACK DELAY CYCLE for single write transaction to peripheral
 */
#define DMAC_ACK_DELAY_ACK_DELAY_NUM(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << DMAC_ACK_DELAY_ACK_DELAY_NUM_SHIFT)) & DMAC_ACK_DELAY_ACK_DELAY_NUM_MASK)
/*! @} */

/*! @name ERR_INFO0 - DMA ERROR INFORMATION REGISTER 0 */
/*! @{ */
#define DMAC_ERR_INFO0_ERR_ADDR_MASK (0xFFFFFFFFU)
#define DMAC_ERR_INFO0_ERR_ADDR_SHIFT (0U)
/*! ERR_ADDR - ADDRESS INFORMATION RELATED ERROR
 */
#define DMAC_ERR_INFO0_ERR_ADDR(x) (((uint32_t)(((uint32_t)(x)) << DMAC_ERR_INFO0_ERR_ADDR_SHIFT)) & DMAC_ERR_INFO0_ERR_ADDR_MASK)
/*! @} */

/*! @name ERR_INFO1 - DMA ERROR INFORMATION REGISTER 1 */
/*! @{ */
#define DMAC_ERR_INFO1_ERR_CHLNUM_MASK (0xF8000000U)
#define DMAC_ERR_INFO1_ERR_CHLNUM_SHIFT (27U)
/*! ERR_CHLNUM - CHANNEL ID INFORMATION RELATED ERROR
 */
#define DMAC_ERR_INFO1_ERR_CHLNUM(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_ERR_INFO1_ERR_CHLNUM_SHIFT)) & DMAC_ERR_INFO1_ERR_CHLNUM_MASK)
/*! @} */

/*! @name DIAGNOSE_INFO0 - DMA DIAGNOSE INFORMATION REGISTER 0 */
/*! @{ */
#define DMAC_DIAGNOSE_INFO0_DIAGNOSE_ADDR_MASK (0xFFFFFFFFU)
#define DMAC_DIAGNOSE_INFO0_DIAGNOSE_ADDR_SHIFT (0U)
/*! DIAGNOSE_ADDR - ADDRESS INFORMATION RELATED DIAGNOSE
 */
#define DMAC_DIAGNOSE_INFO0_DIAGNOSE_ADDR(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO0_DIAGNOSE_ADDR_SHIFT)) & DMAC_DIAGNOSE_INFO0_DIAGNOSE_ADDR_MASK)
/*! @} */

/*! @name DIAGNOSE_INFO1 - DMA DIAGNOSE INFORMATION REGISTER 1 */
/*! @{ */
#define DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA_CHLNUM_MASK (0x1FU)
#define DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA_CHLNUM_SHIFT (0U)
/*! DIAGNOSE_REQ_CHL_DATA_CHLNUM - INDICATE WHICH CHANNEL IS IN SERVICE
 */
#define DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA_CHLNUM(x)                                                                        \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA_CHLNUM_SHIFT)) &                                     \
     DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA_CHLNUM_MASK)
#define DMAC_DIAGNOSE_INFO1_DIAGNOSE_REST_LEN_MASK (0x7FFC0000U)
#define DMAC_DIAGNOSE_INFO1_DIAGNOSE_REST_LEN_SHIFT (18U)
/*! DIAGNOSE_REST_LEN - INDICATE THE REMAINING DATA LENGTH OF THE SELESTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO1_DIAGNOSE_REST_LEN(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO1_DIAGNOSE_REST_LEN_SHIFT)) & DMAC_DIAGNOSE_INFO1_DIAGNOSE_REST_LEN_MASK)
#define DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA_MASK (0x80000000U)
#define DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA_SHIFT (31U)
/*! DIAGNOSE_REQ_CHL_DATA - INDICATE WHETHER THERE IS A VALID REQUEST
 */
#define DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA_SHIFT)) &                                            \
     DMAC_DIAGNOSE_INFO1_DIAGNOSE_REQ_CHL_DATA_MASK)
/*! @} */

/*! @name DIAGNOSE_INFO2 - DMA DIAGNOSE INFORMATION REGISTER 2 */
/*! @{ */
#define DMAC_DIAGNOSE_INFO2_DIAGNOSE_CHL_STATE_MASK (0xF0000000U)
#define DMAC_DIAGNOSE_INFO2_DIAGNOSE_CHL_STATE_SHIFT (28U)
/*! DIAGNOSE_CHL_STATE - INDICATE THE CHANNEL STATE
 */
#define DMAC_DIAGNOSE_INFO2_DIAGNOSE_CHL_STATE(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO2_DIAGNOSE_CHL_STATE_SHIFT)) & DMAC_DIAGNOSE_INFO2_DIAGNOSE_CHL_STATE_MASK)
/*! @} */

/*! @name DIAGNOSE_INFO3 - DMA DIAGNOSE INFORMATION REGISTER 3 */
/*! @{ */
#define DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR0_MASK (0x3U)
#define DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR0_SHIFT (0U)
/*! DIAGNOSE_SRC_ADDR0 - INDICATE THE SOURCE ADDRESS 0 OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR0(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR0_SHIFT)) & DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR0_MASK)
#define DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR_MASK (0xFFFFFFFCU)
#define DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR_SHIFT (2U)
/*! DIAGNOSE_SRC_ADDR - INDICATE THE SOURCE ADDRESS OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR_SHIFT)) & DMAC_DIAGNOSE_INFO3_DIAGNOSE_SRC_ADDR_MASK)
/*! @} */

/*! @name DIAGNOSE_INFO4 - DMA DIAGNOSE INFORMATION REGISTER 4 */
/*! @{ */
#define DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR0_MASK (0x3U)
#define DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR0_SHIFT (0U)
/*! DIAGNOSE_TRG_ADDR0 - INDICATE THE TARGET ADDRESS 0 OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR0(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR0_SHIFT)) & DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR0_MASK)
#define DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR_MASK (0xFFFFFFFCU)
#define DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR_SHIFT (2U)
/*! DIAGNOSE_TRG_ADDR - INDICATE THE TARGET ADDRESS OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR_SHIFT)) & DMAC_DIAGNOSE_INFO4_DIAGNOSE_TRG_ADDR_MASK)
/*! @} */

/*! @name DIAGNOSE_INFO5 - DMA DIAGNOSE INFORMATION REGISTER 5 */
/*! @{ */
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_WIDTH_MASK (0xC00U)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_WIDTH_SHIFT (10U)
/*! DIAGNOSE_CTRL_WIDTH - INDICATE THE WIDTH INFORMATION OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_WIDTH(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_WIDTH_SHIFT)) & DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_WIDTH_MASK)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANTYPE_MASK (0x3000U)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANTYPE_SHIFT (12U)
/*! DIAGNOSE_CTRL_TRANTYPE - INDICATE THE TRANSFER TYPE INFORMATION OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANTYPE(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANTYPE_SHIFT)) &                                           \
     DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANTYPE_MASK)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANSIZE_MASK (0xC000U)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANSIZE_SHIFT (14U)
/*! DIAGNOSE_CTRL_TRANSIZE - INDICATE THE TRANSFER SIZE INFORMATION OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANSIZE(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANSIZE_SHIFT)) &                                           \
     DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_TRANSIZE_MASK)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_LEN_MASK (0x1FFF0000U)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_LEN_SHIFT (16U)
/*! DIAGNOSE_CTRL_LEN - INDICATE THE LENGTH INFORMATION OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_LEN(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_LEN_SHIFT)) & DMAC_DIAGNOSE_INFO5_DIAGNOSE_CTRL_LEN_MASK)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRTRGADDR_MASK (0x20000000U)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRTRGADDR_SHIFT (29U)
/*! DIAGNOSE_INCRTRGADDR - INDICATE WHETHER TO INCREASE THE TRG ADDRESS OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRTRGADDR(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRTRGADDR_SHIFT)) &                                             \
     DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRTRGADDR_MASK)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRSRCADDR_MASK (0x40000000U)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRSRCADDR_SHIFT (30U)
/*! DIAGNOSE_INCRSRCADDR - INDICATE WHETHER TO INCREASE THE SRC ADDRESS OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRSRCADDR(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRSRCADDR_SHIFT)) &                                             \
     DMAC_DIAGNOSE_INFO5_DIAGNOSE_INCRSRCADDR_MASK)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CHL_EN_MASK (0x80000000U)
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CHL_EN_SHIFT (31U)
/*! DIAGNOSE_CHL_EN - INDICATE THE CHANNEL ENABLE STATE OF THE SELECTED CHANNEL
 */
#define DMAC_DIAGNOSE_INFO5_DIAGNOSE_CHL_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO5_DIAGNOSE_CHL_EN_SHIFT)) & DMAC_DIAGNOSE_INFO5_DIAGNOSE_CHL_EN_MASK)
/*! @} */

/*! @name DIAGNOSE_INFO6 - DMA DIAGNOSE INFORMATION REGISTER 6 */
/*! @{ */
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_HALFWORD_MASK (0x20000U)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_HALFWORD_SHIFT (17U)
/*! DIAGNOSE_SPLIT_HALFWORD - INDICATE SOME OUTPUT INFO FROM MAIN DATAPATH
 */
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_HALFWORD(x)                                                                             \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_HALFWORD_SHIFT)) &                                          \
     DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_HALFWORD_MASK)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_WORD_MASK (0x40000U)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_WORD_SHIFT (18U)
/*! DIAGNOSE_SPLIT_WORD - INDICATE SOME OUTPUT INFO FROM MAIN DATAPATH
 */
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_WORD(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_WORD_SHIFT)) & DMAC_DIAGNOSE_INFO6_DIAGNOSE_SPLIT_WORD_MASK)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_SLICECNT_MASK (0x3F80000U)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_SLICECNT_SHIFT (19U)
/*! DIAGNOSE_SLICECNT - INDICATE SOME OUTPUT INFO FROM MAIN DATAPATH
 */
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_SLICECNT(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO6_DIAGNOSE_SLICECNT_SHIFT)) & DMAC_DIAGNOSE_INFO6_DIAGNOSE_SLICECNT_MASK)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_BURST_MASK (0xC000000U)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_BURST_SHIFT (26U)
/*! DIAGNOSE_AHB_BURST - INDICATE SOME OUTPUT INFO FROM MAIN DATAPATH
 */
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_BURST(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_BURST_SHIFT)) & DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_BURST_MASK)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_SIZE_MASK (0x30000000U)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_SIZE_SHIFT (28U)
/*! DIAGNOSE_AHB_SIZE - INDICATE SOME OUTPUT INFO FROM MAIN DATAPATH
 */
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_SIZE(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_SIZE_SHIFT)) & DMAC_DIAGNOSE_INFO6_DIAGNOSE_AHB_SIZE_MASK)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_WRITE_MASK (0x40000000U)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_WRITE_SHIFT (30U)
/*! DIAGNOSE_MAS_WRITE - INDICATE SOME OUTPUT INFO FROM MAIN DATAPATH
 */
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_WRITE(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_WRITE_SHIFT)) & DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_WRITE_MASK)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_READ_MASK (0x80000000U)
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_READ_SHIFT (31U)
/*! DIAGNOSE_MAS_READ - INDICATE SOME OUTPUT INFO FROM MAIN DATAPATH
 */
#define DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_READ(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_READ_SHIFT)) & DMAC_DIAGNOSE_INFO6_DIAGNOSE_MAS_READ_MASK)
/*! @} */

/*! @name DIAGNOSE_INFO7 - DMA DIAGNOSE INFORMATION REGISTER 7 */
/*! @{ */
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HRESP_MASK (0x400000U)
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HRESP_SHIFT (22U)
/*! DIAGNOSE_AHB_HRESP - INDICATE SOME AHB MASTER INFO
 */
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HRESP(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HRESP_SHIFT)) & DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HRESP_MASK)
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HREADY_MASK (0x800000U)
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HREADY_SHIFT (23U)
/*! DIAGNOSE_AHB_HREADY - INDICATE SOME AHB MASTER INFO
 */
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HREADY(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HREADY_SHIFT)) & DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_HREADY_MASK)
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_SIZE_MASK (0x7000000U)
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_SIZE_SHIFT (24U)
/*! DIAGNOSE_AHB_SIZE - INDICATE SOME AHB MASTER INFO
 */
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_SIZE(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_SIZE_SHIFT)) & DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_SIZE_MASK)
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_TRANS_MASK (0x18000000U)
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_TRANS_SHIFT (27U)
/*! DIAGNOSE_AHB_TRANS - INDICATE SOME AHB MASTER INFO
 */
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_TRANS(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_TRANS_SHIFT)) & DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_TRANS_MASK)
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_BURST_MASK (0xE0000000U)
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_BURST_SHIFT (29U)
/*! DIAGNOSE_AHB_BURST - INDICATE SOME AHB MASTER INFO
 */
#define DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_BURST(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_BURST_SHIFT)) & DMAC_DIAGNOSE_INFO7_DIAGNOSE_AHB_BURST_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group DMAC_Register_Masks */

/* DMAC - Peripheral instance base addresses */
/** Peripheral DMAC base address */
#define DMAC_BASE (0x44000000u)
/** Peripheral DMAC base pointer */
#define DMAC ((DMAC_Type *) DMAC_BASE)
/** Array initializer of DMAC peripheral base addresses */
#define DMAC_BASE_ADDRS                                                                                                            \
    {                                                                                                                              \
        DMAC_BASE                                                                                                                  \
    }
/** Array initializer of DMAC peripheral base pointers */
#define DMAC_BASE_PTRS                                                                                                             \
    {                                                                                                                              \
        DMAC                                                                                                                       \
    }
/** Interrupt vectors for the DMAC peripheral type */
#define DMAC_IRQS                                                                                                                  \
    {                                                                                                                              \
        DMAC_IRQn                                                                                                                  \
    }

/*!
 * @}
 */ /* end of group DMAC_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- FLASHC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLASHC_Peripheral_Access_Layer FLASHC Peripheral Access Layer
 * @{
 */

/** FLASHC - Register Layout Typedef */
typedef struct
{
    __IO uint32_t FCCR;    /**< Flash Controller Configuration Register, offset: 0x0 */
    __IO uint32_t FCTR;    /**< Flash Controller Timing Register, offset: 0x4 */
    __IO uint32_t FCSR;    /**< Flash Controller Status Register, offset: 0x8 */
    __IO uint32_t FCACR;   /**< Flash Controller Auxiliary Configuration Register, offset: 0xC */
    __IO uint32_t FCHCR;   /**< Flash Controller Hit Count Register, offset: 0x10 */
    __IO uint32_t FCMCR;   /**< Flash Controller Miss Count Register, offset: 0x14 */
    __IO uint32_t FAOFFR;  /**< Flash Address Offset Register, offset: 0x18 */
    __IO uint32_t FADDMAT; /**< Flash Address Match register, offset: 0x1C */
    __IO uint32_t FWAITR;  /**< Flash Wait Register, offset: 0x20 */
    __IO uint32_t FCCR2;   /**< Flash Controller Configurationb Register2, offset: 0x24 */
    __IO uint32_t FINSTR;  /**< Flash Instruction Register, offset: 0x28 */
    __IO uint32_t FRMR;    /**< Flash Read Mode Register, offset: 0x2C */
} FLASHC_Type;

/* ----------------------------------------------------------------------------
   -- FLASHC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FLASHC_Register_Masks FLASHC Register Masks
 * @{
 */

/*! @name FCCR - Flash Controller Configuration Register */
/*! @{ */
#define FLASHC_FCCR_CMD_TYPE_MASK (0xFU)
#define FLASHC_FCCR_CMD_TYPE_SHIFT (0U)
/*! CMD_TYPE - Serial Flash Command typeclocks (based on this Command Type field for Winbond devices)
 */
#define FLASHC_FCCR_CMD_TYPE(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR_CMD_TYPE_SHIFT)) & FLASHC_FCCR_CMD_TYPE_MASK)
#define FLASHC_FCCR_CLK_PRESCALE_MASK (0x1F00U)
#define FLASHC_FCCR_CLK_PRESCALE_SHIFT (8U)
/*! CLK_PRESCALE - Serial interface clock prescaler (from base SPI clock)
 */
#define FLASHC_FCCR_CLK_PRESCALE(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR_CLK_PRESCALE_SHIFT)) & FLASHC_FCCR_CLK_PRESCALE_MASK)
#define FLASHC_FCCR_CLK_POL_MASK (0x4000U)
#define FLASHC_FCCR_CLK_POL_SHIFT (14U)
/*! CLK_POL - Serial Interface Clock Polarity
 *  0b0..Serial Interface clock is LOW when inactive.
 *  0b1..Serial Interface clock is HIGH when inactive.
 */
#define FLASHC_FCCR_CLK_POL(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR_CLK_POL_SHIFT)) & FLASHC_FCCR_CLK_POL_MASK)
#define FLASHC_FCCR_CLK_PHA_MASK (0x8000U)
#define FLASHC_FCCR_CLK_PHA_SHIFT (15U)
/*! CLK_PHA - Serial Interface Clock Phase
 *  0b0..Data is captured on the rising edge of the serial clock when CLK_POL=0 and on the falling edge when CLK_POL=1.
 *  0b1..Data is captured on the falling edge of the serial clock when CLK_POL=0 and on the rising edge when CLK_POL=1.
 */
#define FLASHC_FCCR_CLK_PHA(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR_CLK_PHA_SHIFT)) & FLASHC_FCCR_CLK_PHA_MASK)
#define FLASHC_FCCR_SRAM_MODE_EN_MASK (0x10000000U)
#define FLASHC_FCCR_SRAM_MODE_EN_SHIFT (28U)
/*! SRAM_MODE_EN - SRAM Mode Enable
 */
#define FLASHC_FCCR_SRAM_MODE_EN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR_SRAM_MODE_EN_SHIFT)) & FLASHC_FCCR_SRAM_MODE_EN_MASK)
#define FLASHC_FCCR_CACHE_LINE_FLUSH_MASK (0x20000000U)
#define FLASHC_FCCR_CACHE_LINE_FLUSH_SHIFT (29U)
/*! CACHE_LINE_FLUSH - Cache Line Flush
 */
#define FLASHC_FCCR_CACHE_LINE_FLUSH(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR_CACHE_LINE_FLUSH_SHIFT)) & FLASHC_FCCR_CACHE_LINE_FLUSH_MASK)
#define FLASHC_FCCR_CACHE_EN_MASK (0x40000000U)
#define FLASHC_FCCR_CACHE_EN_SHIFT (30U)
/*! CACHE_EN - Flash cache enable
 */
#define FLASHC_FCCR_CACHE_EN(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR_CACHE_EN_SHIFT)) & FLASHC_FCCR_CACHE_EN_MASK)
#define FLASHC_FCCR_FLASHC_PAD_EN_MASK (0x80000000U)
#define FLASHC_FCCR_FLASHC_PAD_EN_SHIFT (31U)
/*! FLASHC_PAD_EN - Flashc pad enable
 *  0b0..APB QSPI connects to the Flash device.
 *  0b1..Flashc connects to the Flash device.
 */
#define FLASHC_FCCR_FLASHC_PAD_EN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR_FLASHC_PAD_EN_SHIFT)) & FLASHC_FCCR_FLASHC_PAD_EN_MASK)
/*! @} */

/*! @name FCTR - Flash Controller Timing Register */
/*! @{ */
#define FLASHC_FCTR_DIN_DLY_MASK (0x3U)
#define FLASHC_FCTR_DIN_DLY_SHIFT (0U)
/*! DIN_DLY - Data Input Delay
 */
#define FLASHC_FCTR_DIN_DLY(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCTR_DIN_DLY_SHIFT)) & FLASHC_FCTR_DIN_DLY_MASK)
#define FLASHC_FCTR_CLK_IN_DLY_MASK (0xCU)
#define FLASHC_FCTR_CLK_IN_DLY_SHIFT (2U)
/*! CLK_IN_DLY - Clock Input Delay
 */
#define FLASHC_FCTR_CLK_IN_DLY(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCTR_CLK_IN_DLY_SHIFT)) & FLASHC_FCTR_CLK_IN_DLY_MASK)
#define FLASHC_FCTR_CLK_CAPT_EDGE_MASK (0x10U)
#define FLASHC_FCTR_CLK_CAPT_EDGE_SHIFT (4U)
/*! CLK_CAPT_EDGE - Serial Interface data capture clock edge
 */
#define FLASHC_FCTR_CLK_CAPT_EDGE(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FCTR_CLK_CAPT_EDGE_SHIFT)) & FLASHC_FCTR_CLK_CAPT_EDGE_MASK)
#define FLASHC_FCTR_CLK_OUT_DLY_MASK (0x60U)
#define FLASHC_FCTR_CLK_OUT_DLY_SHIFT (5U)
/*! CLK_OUT_DLY - Add delay on the outgoing Clock to the flash.
 */
#define FLASHC_FCTR_CLK_OUT_DLY(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCTR_CLK_OUT_DLY_SHIFT)) & FLASHC_FCTR_CLK_OUT_DLY_MASK)
/*! @} */

/*! @name FCSR - Flash Controller Status Register */
/*! @{ */
#define FLASHC_FCSR_CONT_RD_MD_EXIT_DONE_MASK (0x1U)
#define FLASHC_FCSR_CONT_RD_MD_EXIT_DONE_SHIFT (0U)
/*! CONT_RD_MD_EXIT_DONE - Continuous Read Mode Exit status
 *  0b0..continuous read mode exit not complete.
 *  0b1..continuous read mode exit complete.
 */
#define FLASHC_FCSR_CONT_RD_MD_EXIT_DONE(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FCSR_CONT_RD_MD_EXIT_DONE_SHIFT)) & FLASHC_FCSR_CONT_RD_MD_EXIT_DONE_MASK)
/*! @} */

/*! @name FCACR - Flash Controller Auxiliary Configuration Register */
/*! @{ */
#define FLASHC_FCACR_HIT_CNT_EN_MASK (0x1U)
#define FLASHC_FCACR_HIT_CNT_EN_SHIFT (0U)
/*! HIT_CNT_EN - Miss Count Enable
 *  0b0..Disable the counting of hits.
 *  0b1..Enable the counting of number of hits to the cache.
 */
#define FLASHC_FCACR_HIT_CNT_EN(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCACR_HIT_CNT_EN_SHIFT)) & FLASHC_FCACR_HIT_CNT_EN_MASK)
#define FLASHC_FCACR_MISS_CNT_EN_MASK (0x2U)
#define FLASHC_FCACR_MISS_CNT_EN_SHIFT (1U)
/*! MISS_CNT_EN - Miss Count Enable
 *  0b0..Disable the counting of misses.
 *  0b1..Enable the counting of number of misses to the cache.
 */
#define FLASHC_FCACR_MISS_CNT_EN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FCACR_MISS_CNT_EN_SHIFT)) & FLASHC_FCACR_MISS_CNT_EN_MASK)
#define FLASHC_FCACR_ADDR_MATCH_EN_MASK (0x4U)
#define FLASHC_FCACR_ADDR_MATCH_EN_SHIFT (2U)
/*! ADDR_MATCH_EN - Address Match Enable
 *  0b0..disable Counting of Misses to a specific address
 *  0b1..enable Counting of Misses to a specific address defined in FADDMAT
 */
#define FLASHC_FCACR_ADDR_MATCH_EN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FCACR_ADDR_MATCH_EN_SHIFT)) & FLASHC_FCACR_ADDR_MATCH_EN_MASK)
#define FLASHC_FCACR_OFFSET_EN_MASK (0x8U)
#define FLASHC_FCACR_OFFSET_EN_SHIFT (3U)
/*! OFFSET_EN - Address Offset Enable
 *  0b0..All Flash Memory accesses Do not use Address Offset register.
 *  0b1..Using Address Offset defined in FAOFFR is Enabled for all Flash Memory accesses.
 */
#define FLASHC_FCACR_OFFSET_EN(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCACR_OFFSET_EN_SHIFT)) & FLASHC_FCACR_OFFSET_EN_MASK)
/*! @} */

/*! @name FCHCR - Flash Controller Hit Count Register */
/*! @{ */
#define FLASHC_FCHCR_HIT_COUNT_MASK (0xFFFFFFFFU)
#define FLASHC_FCHCR_HIT_COUNT_SHIFT (0U)
/*! HIT_COUNT - Hit Counter
 */
#define FLASHC_FCHCR_HIT_COUNT(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCHCR_HIT_COUNT_SHIFT)) & FLASHC_FCHCR_HIT_COUNT_MASK)
/*! @} */

/*! @name FCMCR - Flash Controller Miss Count Register */
/*! @{ */
#define FLASHC_FCMCR_MISS_COUNT_MASK (0xFFFFFFFFU)
#define FLASHC_FCMCR_MISS_COUNT_SHIFT (0U)
/*! MISS_COUNT - Hit Counter
 */
#define FLASHC_FCMCR_MISS_COUNT(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCMCR_MISS_COUNT_SHIFT)) & FLASHC_FCMCR_MISS_COUNT_MASK)
/*! @} */

/*! @name FAOFFR - Flash Address Offset Register */
/*! @{ */
#define FLASHC_FAOFFR_OFFSET_VAL_MASK (0xFFFFFFFFU)
#define FLASHC_FAOFFR_OFFSET_VAL_SHIFT (0U)
/*! OFFSET_VAL - Flash Address Offset value
 */
#define FLASHC_FAOFFR_OFFSET_VAL(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FAOFFR_OFFSET_VAL_SHIFT)) & FLASHC_FAOFFR_OFFSET_VAL_MASK)
/*! @} */

/*! @name FADDMAT - Flash Address Match register */
/*! @{ */
#define FLASHC_FADDMAT_ADDR_MASK (0xFFFFFFFFU)
#define FLASHC_FADDMAT_ADDR_SHIFT (0U)
/*! ADDR - Flash Memory address to compare and match
 */
#define FLASHC_FADDMAT_ADDR(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FADDMAT_ADDR_SHIFT)) & FLASHC_FADDMAT_ADDR_MASK)
/*! @} */

/*! @name FWAITR - Flash Wait Register */
/*! @{ */
#define FLASHC_FWAITR_ZWAIT_MASK (0x1U)
#define FLASHC_FWAITR_ZWAIT_SHIFT (0U)
/*! ZWAIT - Zero Wait.
 */
#define FLASHC_FWAITR_ZWAIT(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FWAITR_ZWAIT_SHIFT)) & FLASHC_FWAITR_ZWAIT_MASK)
/*! @} */

/*! @name FCCR2 - Flash Controller Configurationb Register2 */
/*! @{ */
#define FLASHC_FCCR2_INSTR_CNT_MASK (0x3U)
#define FLASHC_FCCR2_INSTR_CNT_SHIFT (0U)
/*! INSTR_CNT - Instruction Count
 *  0b00..0 bytes.
 *  0b01..1 byte
 *  0b10..2 bytes.
 *  0b11..Reserved.
 */
#define FLASHC_FCCR2_INSTR_CNT(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR2_INSTR_CNT_SHIFT)) & FLASHC_FCCR2_INSTR_CNT_MASK)
#define FLASHC_FCCR2_ADDR_CNT_MASK (0x70U)
#define FLASHC_FCCR2_ADDR_CNT_SHIFT (4U)
/*! ADDR_CNT - Address Count
 *  0b000..0 bytes.
 *  0b001..1 byte.
 *  0b010..2 bytes.
 *  0b011..3 bytes.
 *  0b100..4 bytes.
 *  0b101..reserved
 *  0b110..reserved
 *  0b111..reserved
 */
#define FLASHC_FCCR2_ADDR_CNT(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR2_ADDR_CNT_SHIFT)) & FLASHC_FCCR2_ADDR_CNT_MASK)
#define FLASHC_FCCR2_RM_CNT_MASK (0x300U)
#define FLASHC_FCCR2_RM_CNT_SHIFT (8U)
/*! RM_CNT - Read Mode Count
 *  0b00..0 bytes.
 *  0b01..1 byte.
 *  0b10..2 bytes.
 *  0b11..Reserved.
 */
#define FLASHC_FCCR2_RM_CNT(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR2_RM_CNT_SHIFT)) & FLASHC_FCCR2_RM_CNT_MASK)
#define FLASHC_FCCR2_DUMMY_CNT_MASK (0x3000U)
#define FLASHC_FCCR2_DUMMY_CNT_SHIFT (12U)
/*! DUMMY_CNT - Dummy count
 *  0b00..0 bytes.
 *  0b01..1 byte.
 *  0b10..2 bytes.
 *  0b11..Reserved.
 */
#define FLASHC_FCCR2_DUMMY_CNT(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR2_DUMMY_CNT_SHIFT)) & FLASHC_FCCR2_DUMMY_CNT_MASK)
#define FLASHC_FCCR2_BYTE_LEN_MASK (0x8000000U)
#define FLASHC_FCCR2_BYTE_LEN_SHIFT (27U)
/*! BYTE_LEN - Byte length
 *  0b0..1 byte.
 *  0b1..4 bytes.
 */
#define FLASHC_FCCR2_BYTE_LEN(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR2_BYTE_LEN_SHIFT)) & FLASHC_FCCR2_BYTE_LEN_MASK)
#define FLASHC_FCCR2_ADDR_PIN_MASK (0x10000000U)
#define FLASHC_FCCR2_ADDR_PIN_SHIFT (28U)
/*! ADDR_PIN - Address transfer pins
 *  0b0..Use one pin.
 *  0b1..Use number of pins as indicated by DATA_PIN field in this register.
 */
#define FLASHC_FCCR2_ADDR_PIN(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR2_ADDR_PIN_SHIFT)) & FLASHC_FCCR2_ADDR_PIN_MASK)
#define FLASHC_FCCR2_DATA_PIN_MASK (0x60000000U)
#define FLASHC_FCCR2_DATA_PIN_SHIFT (29U)
/*! DATA_PIN - Data transfer pins
 *  0b00..Use 1 pin for data.
 *  0b01..Use 2 pins for data.
 *  0b10..Use 4 pins for data.
 *  0b11..Reserved.
 */
#define FLASHC_FCCR2_DATA_PIN(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR2_DATA_PIN_SHIFT)) & FLASHC_FCCR2_DATA_PIN_MASK)
#define FLASHC_FCCR2_USE_CFG_OVRD_MASK (0x80000000U)
#define FLASHC_FCCR2_USE_CFG_OVRD_SHIFT (31U)
/*! USE_CFG_OVRD - Use Configuration Override
 *  0b0..Use FCCR.CMD_TYPE to determine/build Flash command/transfer
 *  0b1..Use Configuration FCCR2 to determine/build Flash Command/transfer
 */
#define FLASHC_FCCR2_USE_CFG_OVRD(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << FLASHC_FCCR2_USE_CFG_OVRD_SHIFT)) & FLASHC_FCCR2_USE_CFG_OVRD_MASK)
/*! @} */

/*! @name FINSTR - Flash Instruction Register */
/*! @{ */
#define FLASHC_FINSTR_INSTR_MASK (0xFFFFU)
#define FLASHC_FINSTR_INSTR_SHIFT (0U)
/*! INSTR - Flash Instruction
 */
#define FLASHC_FINSTR_INSTR(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FINSTR_INSTR_SHIFT)) & FLASHC_FINSTR_INSTR_MASK)
/*! @} */

/*! @name FRMR - Flash Read Mode Register */
/*! @{ */
#define FLASHC_FRMR_RDMODE_MASK (0xFFFFU)
#define FLASHC_FRMR_RDMODE_SHIFT (0U)
/*! RDMODE - Flash Read Mode
 */
#define FLASHC_FRMR_RDMODE(x) (((uint32_t)(((uint32_t)(x)) << FLASHC_FRMR_RDMODE_SHIFT)) & FLASHC_FRMR_RDMODE_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group FLASHC_Register_Masks */

/* FLASHC - Peripheral instance base addresses */
/** Peripheral FLASHC base address */
#define FLASHC_BASE (0x44003000u)
/** Peripheral FLASHC base pointer */
#define FLASHC ((FLASHC_Type *) FLASHC_BASE)
/** Array initializer of FLASHC peripheral base addresses */
#define FLASHC_BASE_ADDRS                                                                                                          \
    {                                                                                                                              \
        FLASHC_BASE                                                                                                                \
    }
/** Array initializer of FLASHC peripheral base pointers */
#define FLASHC_BASE_PTRS                                                                                                           \
    {                                                                                                                              \
        FLASHC                                                                                                                     \
    }

/*!
 * @}
 */ /* end of group FLASHC_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- GPIO Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Peripheral_Access_Layer GPIO Peripheral Access Layer
 * @{
 */

/** GPIO - Register Layout Typedef */
typedef struct
{
    __I uint32_t GPLR_REG[3]; /**< GPIO Pin Level Register0..GPIO Pin Level Register2, array offset: 0x0, array step: 0x4 */
    __IO uint32_t
        GPDR_REG[3]; /**< GPIO Pin Direction Register0..GPIO Pin Direction Register2, array offset: 0xC, array step: 0x4 */
    __O uint32_t
        GPSR_REG[3]; /**< GPIO Pin Output Set Register 0..GPIO Pin Output Set Register 2, array offset: 0x18, array step: 0x4 */
    __O uint32_t
        GPCR_REG[3]; /**< GPIO Pin Output Clear Register 0..GPIO Pin Output Clear Register 2, array offset: 0x24, array step: 0x4 */
    __IO uint32_t GRER_REG[3]; /**< GPIO Rising Edge detect Enable Register 0..GPIO Rising Edge detect Enable Register 2, array
                                  offset: 0x30, array step: 0x4 */
    __IO uint32_t GFER_REG[3]; /**< GPIO Falling Edge detect Enable Register 0..GPIO Falling Edge detect Enable Register 2, array
                                  offset: 0x3C, array step: 0x4 */
    __IO uint32_t GEDR_REG[3]; /**< GPIO Edge detect Status Register 0..GPIO Edge detect Status Register 2, array offset: 0x48,
                                  array step: 0x4 */
    __O uint32_t GSDR_REG[3];  /**< GPIO Pin Bitwise Set Direction Register 0..GPIO Pin Bitwise Set Direction Register 2, array
                                  offset: 0x54, array step: 0x4 */
    __O uint32_t GCDR_REG[3];  /**< GPIO Pin Bitwise Clear Direction Register 0..GPIO Pin Bitwise Clear Direction Register 2, array
                                  offset: 0x60, array step: 0x4 */
    __O uint32_t GSRER_REG[3]; /**< GPIO Bitwise Set Rising Edge detect Enable Register 0..GPIO Bitwise set Rising Edge detect
                                  Enable Register 2, array offset: 0x6C, array step: 0x4 */
    __O uint32_t GCRER_REG[3]; /**< GPIO Bitwise Clear Rising Edge detect Enable Register 0..GPIO Bitwise Clear Rising Edge detect
                                  Enable Register 2, array offset: 0x78, array step: 0x4 */
    __O uint32_t GSFER_REG[3]; /**< GPIO Bitwise Set Falling Edge detect Enable Register 0..GPIO Bitwise set Falling Edge detect
                                  Enable Register 2, array offset: 0x84, array step: 0x4 */
    __O uint32_t GCFER_REG[3]; /**< GPIO Bitwise Clear Falling Edge detect Enable Register 0..GPIO Bitwise Clear Falling Edge detect
                                  Enable Register 2, array offset: 0x90, array step: 0x4 */
    __IO uint32_t APMASK_REG[3]; /**< GPIO Bitwise mask of Edge detect Status Register 0..GPIO Bitwise mask of Edge detect Status
                                    Register 2, array offset: 0x9C, array step: 0x4 */
} GPIO_Type;

/* ----------------------------------------------------------------------------
   -- GPIO Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Masks GPIO Register Masks
 * @{
 */

/*! @name GPLR_REG - GPIO Pin Level Register0..GPIO Pin Level Register2 */
/*! @{ */
#define GPIO_GPLR_REG_GPLR_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GPLR_REG_GPLR_REG0_SHIFT (0U)
/*! GPLR_REG0 - GPLR Reg0
 *  0b00000000000000000000000000000000..Port State Low
 *  0b00000000000000000000000000000001..Port State High
 */
#define GPIO_GPLR_REG_GPLR_REG0(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPLR_REG_GPLR_REG0_SHIFT)) & GPIO_GPLR_REG_GPLR_REG0_MASK)
#define GPIO_GPLR_REG_GPLR_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GPLR_REG_GPLR_REG1_SHIFT (0U)
/*! GPLR_REG1 - GPLR Reg1
 *  0b00000000000000000000000000000000..Port State Low
 *  0b00000000000000000000000000000001..Port State High
 */
#define GPIO_GPLR_REG_GPLR_REG1(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPLR_REG_GPLR_REG1_SHIFT)) & GPIO_GPLR_REG_GPLR_REG1_MASK)
#define GPIO_GPLR_REG_GPLR_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GPLR_REG_GPLR_REG2_SHIFT (0U)
/*! GPLR_REG2 - GPLR Reg2
 *  0b00000000000000000000000000000000..Port State Low
 *  0b00000000000000000000000000000001..Port State High
 */
#define GPIO_GPLR_REG_GPLR_REG2(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPLR_REG_GPLR_REG2_SHIFT)) & GPIO_GPLR_REG_GPLR_REG2_MASK)
/*! @} */

/* The count of GPIO_GPLR_REG */
#define GPIO_GPLR_REG_COUNT (3U)

/*! @name GPDR_REG - GPIO Pin Direction Register0..GPIO Pin Direction Register2 */
/*! @{ */
#define GPIO_GPDR_REG_GPDR_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GPDR_REG_GPDR_REG0_SHIFT (0U)
/*! GPDR_REG0 - GPDR Reg0
 *  0b00000000000000000000000000000000..Input port
 *  0b00000000000000000000000000000001..Output Port
 */
#define GPIO_GPDR_REG_GPDR_REG0(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPDR_REG_GPDR_REG0_SHIFT)) & GPIO_GPDR_REG_GPDR_REG0_MASK)
#define GPIO_GPDR_REG_GPDR_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GPDR_REG_GPDR_REG1_SHIFT (0U)
/*! GPDR_REG1 - GPDR Reg1
 *  0b00000000000000000000000000000000..Input port
 *  0b00000000000000000000000000000001..Output Port
 */
#define GPIO_GPDR_REG_GPDR_REG1(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPDR_REG_GPDR_REG1_SHIFT)) & GPIO_GPDR_REG_GPDR_REG1_MASK)
#define GPIO_GPDR_REG_GPDR_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GPDR_REG_GPDR_REG2_SHIFT (0U)
/*! GPDR_REG2 - GPDR Reg2
 *  0b00000000000000000000000000000000..Input port
 *  0b00000000000000000000000000000001..Output Port
 */
#define GPIO_GPDR_REG_GPDR_REG2(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPDR_REG_GPDR_REG2_SHIFT)) & GPIO_GPDR_REG_GPDR_REG2_MASK)
/*! @} */

/* The count of GPIO_GPDR_REG */
#define GPIO_GPDR_REG_COUNT (3U)

/*! @name GPSR_REG - GPIO Pin Output Set Register 0..GPIO Pin Output Set Register 2 */
/*! @{ */
#define GPIO_GPSR_REG_GPSR_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GPSR_REG_GPSR_REG0_SHIFT (0U)
/*! GPSR_REG0 - GPSR Reg0
 *  0b00000000000000000000000000000000..
 *  0b00000000000000000000000000000001..Port set if GPIO is configured as output
 */
#define GPIO_GPSR_REG_GPSR_REG0(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPSR_REG_GPSR_REG0_SHIFT)) & GPIO_GPSR_REG_GPSR_REG0_MASK)
#define GPIO_GPSR_REG_GPSR_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GPSR_REG_GPSR_REG1_SHIFT (0U)
/*! GPSR_REG1 - GPSR Reg1
 *  0b00000000000000000000000000000000..
 *  0b00000000000000000000000000000001..Port set if GPIO is configured as output
 */
#define GPIO_GPSR_REG_GPSR_REG1(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPSR_REG_GPSR_REG1_SHIFT)) & GPIO_GPSR_REG_GPSR_REG1_MASK)
#define GPIO_GPSR_REG_GPSR_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GPSR_REG_GPSR_REG2_SHIFT (0U)
/*! GPSR_REG2 - GPSR Reg2
 *  0b00000000000000000000000000000000..
 *  0b00000000000000000000000000000001..Port set if GPIO is configured as output
 */
#define GPIO_GPSR_REG_GPSR_REG2(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPSR_REG_GPSR_REG2_SHIFT)) & GPIO_GPSR_REG_GPSR_REG2_MASK)
/*! @} */

/* The count of GPIO_GPSR_REG */
#define GPIO_GPSR_REG_COUNT (3U)

/*! @name GPCR_REG - GPIO Pin Output Clear Register 0..GPIO Pin Output Clear Register 2 */
/*! @{ */
#define GPIO_GPCR_REG_GPCR_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GPCR_REG_GPCR_REG0_SHIFT (0U)
/*! GPCR_REG0 - GPCR Reg0
 *  0b00000000000000000000000000000000..
 *  0b00000000000000000000000000000001..Port Clear if GPIO is configured as output
 */
#define GPIO_GPCR_REG_GPCR_REG0(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPCR_REG_GPCR_REG0_SHIFT)) & GPIO_GPCR_REG_GPCR_REG0_MASK)
#define GPIO_GPCR_REG_GPCR_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GPCR_REG_GPCR_REG1_SHIFT (0U)
/*! GPCR_REG1 - GPCR Reg1
 *  0b00000000000000000000000000000000..
 *  0b00000000000000000000000000000001..Port Clear if GPIO is configured as output
 */
#define GPIO_GPCR_REG_GPCR_REG1(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPCR_REG_GPCR_REG1_SHIFT)) & GPIO_GPCR_REG_GPCR_REG1_MASK)
#define GPIO_GPCR_REG_GPCR_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GPCR_REG_GPCR_REG2_SHIFT (0U)
/*! GPCR_REG2 - GPCR Reg2
 *  0b00000000000000000000000000000000..
 *  0b00000000000000000000000000000001..Port Clear if GPIO is configured as output
 */
#define GPIO_GPCR_REG_GPCR_REG2(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GPCR_REG_GPCR_REG2_SHIFT)) & GPIO_GPCR_REG_GPCR_REG2_MASK)
/*! @} */

/* The count of GPIO_GPCR_REG */
#define GPIO_GPCR_REG_COUNT (3U)

/*! @name GRER_REG - GPIO Rising Edge detect Enable Register 0..GPIO Rising Edge detect Enable Register 2 */
/*! @{ */
#define GPIO_GRER_REG_GRER_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GRER_REG_GRER_REG0_SHIFT (0U)
/*! GRER_REG0 - GRER Reg0
 *  0b00000000000000000000000000000000..Disable Rising Edge detection
 *  0b00000000000000000000000000000001..Set corresponding GEDR Status bit when Rising edge is detected on GPIO input
 */
#define GPIO_GRER_REG_GRER_REG0(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GRER_REG_GRER_REG0_SHIFT)) & GPIO_GRER_REG_GRER_REG0_MASK)
#define GPIO_GRER_REG_GRER_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GRER_REG_GRER_REG1_SHIFT (0U)
/*! GRER_REG1 - GRER Reg1
 *  0b00000000000000000000000000000000..Disable Rising Edge detection
 *  0b00000000000000000000000000000001..Set corresponding GEDR Status bit when Rising edge is detected on GPIO input
 */
#define GPIO_GRER_REG_GRER_REG1(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GRER_REG_GRER_REG1_SHIFT)) & GPIO_GRER_REG_GRER_REG1_MASK)
#define GPIO_GRER_REG_GRER_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GRER_REG_GRER_REG2_SHIFT (0U)
/*! GRER_REG2 - GRER Reg2
 *  0b00000000000000000000000000000000..Disable Rising Edge detection
 *  0b00000000000000000000000000000001..Set corresponding GEDR Status bit when Rising edge is detected on GPIO input
 */
#define GPIO_GRER_REG_GRER_REG2(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GRER_REG_GRER_REG2_SHIFT)) & GPIO_GRER_REG_GRER_REG2_MASK)
/*! @} */

/* The count of GPIO_GRER_REG */
#define GPIO_GRER_REG_COUNT (3U)

/*! @name GFER_REG - GPIO Falling Edge detect Enable Register 0..GPIO Falling Edge detect Enable Register 2 */
/*! @{ */
#define GPIO_GFER_REG_GFER_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GFER_REG_GFER_REG0_SHIFT (0U)
/*! GFER_REG0 - GFER Reg0
 *  0b00000000000000000000000000000000..Disable Falling Edge detection
 *  0b00000000000000000000000000000001..Set corresponding GEDR Status bit when Falling edge is detected on GPIO input
 */
#define GPIO_GFER_REG_GFER_REG0(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GFER_REG_GFER_REG0_SHIFT)) & GPIO_GFER_REG_GFER_REG0_MASK)
#define GPIO_GFER_REG_GFER_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GFER_REG_GFER_REG1_SHIFT (0U)
/*! GFER_REG1 - GFER Reg1
 *  0b00000000000000000000000000000000..Disable Falling Edge detection
 *  0b00000000000000000000000000000001..Set corresponding GEDR Status bit when Falling edge is detected on GPIO input
 */
#define GPIO_GFER_REG_GFER_REG1(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GFER_REG_GFER_REG1_SHIFT)) & GPIO_GFER_REG_GFER_REG1_MASK)
#define GPIO_GFER_REG_GFER_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GFER_REG_GFER_REG2_SHIFT (0U)
/*! GFER_REG2 - GFER Reg2
 *  0b00000000000000000000000000000000..Disable Falling Edge detection
 *  0b00000000000000000000000000000001..Set corresponding GEDR Status bit when Falling edge is detected on GPIO input
 */
#define GPIO_GFER_REG_GFER_REG2(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GFER_REG_GFER_REG2_SHIFT)) & GPIO_GFER_REG_GFER_REG2_MASK)
/*! @} */

/* The count of GPIO_GFER_REG */
#define GPIO_GFER_REG_COUNT (3U)

/*! @name GEDR_REG - GPIO Edge detect Status Register 0..GPIO Edge detect Status Register 2 */
/*! @{ */
#define GPIO_GEDR_REG_GEDR_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GEDR_REG_GEDR_REG0_SHIFT (0U)
/*! GEDR_REG0 - GEDR Reg0
 *  0b00000000000000000000000000000000..No edge detected on a port as specified by GRERx or GFERx
 *  0b00000000000000000000000000000001..Edge detected on a port as specified by GRERx or GFERx
 */
#define GPIO_GEDR_REG_GEDR_REG0(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GEDR_REG_GEDR_REG0_SHIFT)) & GPIO_GEDR_REG_GEDR_REG0_MASK)
#define GPIO_GEDR_REG_GEDR_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GEDR_REG_GEDR_REG1_SHIFT (0U)
/*! GEDR_REG1 - GEDR Reg1
 *  0b00000000000000000000000000000000..No edge detected on a port as specified by GRERx or GFERx
 *  0b00000000000000000000000000000001..Edge detected on a port as specified by GRERx or GFERx
 */
#define GPIO_GEDR_REG_GEDR_REG1(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GEDR_REG_GEDR_REG1_SHIFT)) & GPIO_GEDR_REG_GEDR_REG1_MASK)
#define GPIO_GEDR_REG_GEDR_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GEDR_REG_GEDR_REG2_SHIFT (0U)
/*! GEDR_REG2 - GEDR Reg2
 *  0b00000000000000000000000000000000..No edge detected on a port as specified by GRERx or GFERx
 *  0b00000000000000000000000000000001..Edge detected on a port as specified by GRERx or GFERx
 */
#define GPIO_GEDR_REG_GEDR_REG2(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GEDR_REG_GEDR_REG2_SHIFT)) & GPIO_GEDR_REG_GEDR_REG2_MASK)
/*! @} */

/* The count of GPIO_GEDR_REG */
#define GPIO_GEDR_REG_COUNT (3U)

/*! @name GSDR_REG - GPIO Pin Bitwise Set Direction Register 0..GPIO Pin Bitwise Set Direction Register 2 */
/*! @{ */
#define GPIO_GSDR_REG_GSDR_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GSDR_REG_GSDR_REG0_SHIFT (0U)
/*! GSDR_REG0 - GSDR Reg0
 *  0b00000000000000000000000000000000..GPDR bit unaffected
 *  0b00000000000000000000000000000001..GPDR Bit set and GPIO Pin is set as output
 */
#define GPIO_GSDR_REG_GSDR_REG0(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GSDR_REG_GSDR_REG0_SHIFT)) & GPIO_GSDR_REG_GSDR_REG0_MASK)
#define GPIO_GSDR_REG_GSDR_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GSDR_REG_GSDR_REG1_SHIFT (0U)
/*! GSDR_REG1 - GSDR Reg1
 *  0b00000000000000000000000000000000..GPDR bit unaffected
 *  0b00000000000000000000000000000001..GPDR Bit set and GPIO Pin is set as output
 */
#define GPIO_GSDR_REG_GSDR_REG1(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GSDR_REG_GSDR_REG1_SHIFT)) & GPIO_GSDR_REG_GSDR_REG1_MASK)
#define GPIO_GSDR_REG_GSDR_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GSDR_REG_GSDR_REG2_SHIFT (0U)
/*! GSDR_REG2 - GSDR Reg2
 *  0b00000000000000000000000000000000..GPDR bit unaffected
 *  0b00000000000000000000000000000001..GPDR Bit set and GPIO Pin is set as output
 */
#define GPIO_GSDR_REG_GSDR_REG2(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GSDR_REG_GSDR_REG2_SHIFT)) & GPIO_GSDR_REG_GSDR_REG2_MASK)
/*! @} */

/* The count of GPIO_GSDR_REG */
#define GPIO_GSDR_REG_COUNT (3U)

/*! @name GCDR_REG - GPIO Pin Bitwise Clear Direction Register 0..GPIO Pin Bitwise Clear Direction Register 2 */
/*! @{ */
#define GPIO_GCDR_REG_GCDR_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GCDR_REG_GCDR_REG0_SHIFT (0U)
/*! GCDR_REG0 - GCDR Reg0
 *  0b00000000000000000000000000000000..GPDR bit unaffected
 *  0b00000000000000000000000000000001..GPDR Bit clear and GPIO Pin is set as input
 */
#define GPIO_GCDR_REG_GCDR_REG0(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GCDR_REG_GCDR_REG0_SHIFT)) & GPIO_GCDR_REG_GCDR_REG0_MASK)
#define GPIO_GCDR_REG_GCDR_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GCDR_REG_GCDR_REG1_SHIFT (0U)
/*! GCDR_REG1 - GCDR Reg1
 *  0b00000000000000000000000000000000..GPDR bit unaffected
 *  0b00000000000000000000000000000001..GPDR Bit clear and GPIO Pin is set as input
 */
#define GPIO_GCDR_REG_GCDR_REG1(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GCDR_REG_GCDR_REG1_SHIFT)) & GPIO_GCDR_REG_GCDR_REG1_MASK)
#define GPIO_GCDR_REG_GCDR_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GCDR_REG_GCDR_REG2_SHIFT (0U)
/*! GCDR_REG2 - GCDR Reg2
 *  0b00000000000000000000000000000000..GPDR bit unaffected
 *  0b00000000000000000000000000000001..GPDR Bit clear and GPIO Pin is set as input
 */
#define GPIO_GCDR_REG_GCDR_REG2(x) (((uint32_t)(((uint32_t)(x)) << GPIO_GCDR_REG_GCDR_REG2_SHIFT)) & GPIO_GCDR_REG_GCDR_REG2_MASK)
/*! @} */

/* The count of GPIO_GCDR_REG */
#define GPIO_GCDR_REG_COUNT (3U)

/*! @name GSRER_REG - GPIO Bitwise Set Rising Edge detect Enable Register 0..GPIO Bitwise set Rising Edge detect Enable Register 2
 */
/*! @{ */
#define GPIO_GSRER_REG_GSRER_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GSRER_REG_GSRER_REG0_SHIFT (0U)
/*! GSRER_REG0 - GSRER Reg0
 *  0b00000000000000000000000000000000..GRER bit Unaffected
 *  0b00000000000000000000000000000001..GRER Bit set
 */
#define GPIO_GSRER_REG_GSRER_REG0(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GSRER_REG_GSRER_REG0_SHIFT)) & GPIO_GSRER_REG_GSRER_REG0_MASK)
#define GPIO_GSRER_REG_GSRER_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GSRER_REG_GSRER_REG1_SHIFT (0U)
/*! GSRER_REG1 - GSRER Reg1
 *  0b00000000000000000000000000000000..GRER bit Unaffected
 *  0b00000000000000000000000000000001..GRER Bit set
 */
#define GPIO_GSRER_REG_GSRER_REG1(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GSRER_REG_GSRER_REG1_SHIFT)) & GPIO_GSRER_REG_GSRER_REG1_MASK)
#define GPIO_GSRER_REG_GSRER_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GSRER_REG_GSRER_REG2_SHIFT (0U)
/*! GSRER_REG2 - GSRER Reg2
 *  0b00000000000000000000000000000000..GRER bit Unaffected
 *  0b00000000000000000000000000000001..GRER Bit set
 */
#define GPIO_GSRER_REG_GSRER_REG2(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GSRER_REG_GSRER_REG2_SHIFT)) & GPIO_GSRER_REG_GSRER_REG2_MASK)
/*! @} */

/* The count of GPIO_GSRER_REG */
#define GPIO_GSRER_REG_COUNT (3U)

/*! @name GCRER_REG - GPIO Bitwise Clear Rising Edge detect Enable Register 0..GPIO Bitwise Clear Rising Edge detect Enable Register
 * 2 */
/*! @{ */
#define GPIO_GCRER_REG_GCRER_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GCRER_REG_GCRER_REG0_SHIFT (0U)
/*! GCRER_REG0 - GCRER Reg0
 *  0b00000000000000000000000000000000..GRER bit Unaffected
 *  0b00000000000000000000000000000001..GRER Bit Clear
 */
#define GPIO_GCRER_REG_GCRER_REG0(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GCRER_REG_GCRER_REG0_SHIFT)) & GPIO_GCRER_REG_GCRER_REG0_MASK)
#define GPIO_GCRER_REG_GCRER_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GCRER_REG_GCRER_REG1_SHIFT (0U)
/*! GCRER_REG1 - GCRER Reg1
 *  0b00000000000000000000000000000000..GRER bit Unaffected
 *  0b00000000000000000000000000000001..GRER Bit Clear
 */
#define GPIO_GCRER_REG_GCRER_REG1(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GCRER_REG_GCRER_REG1_SHIFT)) & GPIO_GCRER_REG_GCRER_REG1_MASK)
#define GPIO_GCRER_REG_GCRER_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GCRER_REG_GCRER_REG2_SHIFT (0U)
/*! GCRER_REG2 - GCRER Reg2
 *  0b00000000000000000000000000000000..GRER bit Unaffected
 *  0b00000000000000000000000000000001..GRER Bit Clear
 */
#define GPIO_GCRER_REG_GCRER_REG2(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GCRER_REG_GCRER_REG2_SHIFT)) & GPIO_GCRER_REG_GCRER_REG2_MASK)
/*! @} */

/* The count of GPIO_GCRER_REG */
#define GPIO_GCRER_REG_COUNT (3U)

/*! @name GSFER_REG - GPIO Bitwise Set Falling Edge detect Enable Register 0..GPIO Bitwise set Falling Edge detect Enable Register 2
 */
/*! @{ */
#define GPIO_GSFER_REG_GSFER_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GSFER_REG_GSFER_REG0_SHIFT (0U)
/*! GSFER_REG0 - GSFER Reg0
 *  0b00000000000000000000000000000000..GFER bit Unaffected
 *  0b00000000000000000000000000000001..GFER Bit set
 */
#define GPIO_GSFER_REG_GSFER_REG0(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GSFER_REG_GSFER_REG0_SHIFT)) & GPIO_GSFER_REG_GSFER_REG0_MASK)
#define GPIO_GSFER_REG_GSFER_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GSFER_REG_GSFER_REG1_SHIFT (0U)
/*! GSFER_REG1 - GSFER Reg1
 *  0b00000000000000000000000000000000..GFER bit Unaffected
 *  0b00000000000000000000000000000001..GFER Bit set
 */
#define GPIO_GSFER_REG_GSFER_REG1(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GSFER_REG_GSFER_REG1_SHIFT)) & GPIO_GSFER_REG_GSFER_REG1_MASK)
#define GPIO_GSFER_REG_GSFER_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GSFER_REG_GSFER_REG2_SHIFT (0U)
/*! GSFER_REG2 - GSFER Reg2
 *  0b00000000000000000000000000000000..GFER bit Unaffected
 *  0b00000000000000000000000000000001..GFER Bit set
 */
#define GPIO_GSFER_REG_GSFER_REG2(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GSFER_REG_GSFER_REG2_SHIFT)) & GPIO_GSFER_REG_GSFER_REG2_MASK)
/*! @} */

/* The count of GPIO_GSFER_REG */
#define GPIO_GSFER_REG_COUNT (3U)

/*! @name GCFER_REG - GPIO Bitwise Clear Falling Edge detect Enable Register 0..GPIO Bitwise Clear Falling Edge detect Enable
 * Register 2 */
/*! @{ */
#define GPIO_GCFER_REG_GCFER_REG0_MASK (0xFFFFFFFFU)
#define GPIO_GCFER_REG_GCFER_REG0_SHIFT (0U)
/*! GCFER_REG0 - GCFER Reg0
 *  0b00000000000000000000000000000000..GFER bit Unaffected
 *  0b00000000000000000000000000000001..GFER Bit Clear
 */
#define GPIO_GCFER_REG_GCFER_REG0(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GCFER_REG_GCFER_REG0_SHIFT)) & GPIO_GCFER_REG_GCFER_REG0_MASK)
#define GPIO_GCFER_REG_GCFER_REG1_MASK (0xFFFFFFFFU)
#define GPIO_GCFER_REG_GCFER_REG1_SHIFT (0U)
/*! GCFER_REG1 - GCFER Reg1
 *  0b00000000000000000000000000000000..GFER bit Unaffected
 *  0b00000000000000000000000000000001..GFER Bit Clear
 */
#define GPIO_GCFER_REG_GCFER_REG1(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GCFER_REG_GCFER_REG1_SHIFT)) & GPIO_GCFER_REG_GCFER_REG1_MASK)
#define GPIO_GCFER_REG_GCFER_REG2_MASK (0xFFFFFFFFU)
#define GPIO_GCFER_REG_GCFER_REG2_SHIFT (0U)
/*! GCFER_REG2 - GCFER Reg2
 *  0b00000000000000000000000000000000..GFER bit Unaffected
 *  0b00000000000000000000000000000001..GFER Bit Clear
 */
#define GPIO_GCFER_REG_GCFER_REG2(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPIO_GCFER_REG_GCFER_REG2_SHIFT)) & GPIO_GCFER_REG_GCFER_REG2_MASK)
/*! @} */

/* The count of GPIO_GCFER_REG */
#define GPIO_GCFER_REG_COUNT (3U)

/*! @name APMASK_REG - GPIO Bitwise mask of Edge detect Status Register 0..GPIO Bitwise mask of Edge detect Status Register 2 */
/*! @{ */
#define GPIO_APMASK_REG_APMASK_REG0_MASK (0xFFFFFFFFU)
#define GPIO_APMASK_REG_APMASK_REG0_SHIFT (0U)
/*! APMASK_REG0 - APMASK Reg0
 *  0b00000000000000000000000000000000..GPIO Edge detects are masked
 *  0b00000000000000000000000000000001..GPIO Edge detects are not masked
 */
#define GPIO_APMASK_REG_APMASK_REG0(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPIO_APMASK_REG_APMASK_REG0_SHIFT)) & GPIO_APMASK_REG_APMASK_REG0_MASK)
#define GPIO_APMASK_REG_APMASK_REG1_MASK (0xFFFFFFFFU)
#define GPIO_APMASK_REG_APMASK_REG1_SHIFT (0U)
/*! APMASK_REG1 - APMASK Reg1
 *  0b00000000000000000000000000000000..GPIO Edge detects are masked
 *  0b00000000000000000000000000000001..GPIO Edge detects are not masked
 */
#define GPIO_APMASK_REG_APMASK_REG1(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPIO_APMASK_REG_APMASK_REG1_SHIFT)) & GPIO_APMASK_REG_APMASK_REG1_MASK)
#define GPIO_APMASK_REG_APMASK_REG2_MASK (0xFFFFFFFFU)
#define GPIO_APMASK_REG_APMASK_REG2_SHIFT (0U)
/*! APMASK_REG2 - APMASK Reg2
 *  0b00000000000000000000000000000000..GPIO Edge detects are masked
 *  0b00000000000000000000000000000001..GPIO Edge detects are not masked
 */
#define GPIO_APMASK_REG_APMASK_REG2(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPIO_APMASK_REG_APMASK_REG2_SHIFT)) & GPIO_APMASK_REG_APMASK_REG2_MASK)
/*! @} */

/* The count of GPIO_APMASK_REG */
#define GPIO_APMASK_REG_COUNT (3U)

/*!
 * @}
 */ /* end of group GPIO_Register_Masks */

/* GPIO - Peripheral instance base addresses */
/** Peripheral GPIO base address */
#define GPIO_BASE (0x46060000u)
/** Peripheral GPIO base pointer */
#define GPIO ((GPIO_Type *) GPIO_BASE)
/** Array initializer of GPIO peripheral base addresses */
#define GPIO_BASE_ADDRS                                                                                                            \
    {                                                                                                                              \
        GPIO_BASE                                                                                                                  \
    }
/** Array initializer of GPIO peripheral base pointers */
#define GPIO_BASE_PTRS                                                                                                             \
    {                                                                                                                              \
        GPIO                                                                                                                       \
    }
/** Interrupt vectors for the GPIO peripheral type */
#define GPIO_IRQS                                                                                                                  \
    {                                                                                                                              \
        GPIO_IRQn                                                                                                                  \
    }

/*!
 * @}
 */ /* end of group GPIO_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- GPT Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Peripheral_Access_Layer GPT Peripheral Access Layer
 * @{
 */

/** GPT - Register Layout Typedef */
typedef struct
{
    __IO uint32_t CNT_EN_REG; /**< Counter Enable Register, offset: 0x0 */
    uint8_t RESERVED_0[28];
    __IO uint32_t STS_REG;     /**< Status Register, offset: 0x20 */
    __I uint32_t INT_REG;      /**< Interrupt Register, offset: 0x24 */
    __IO uint32_t INT_MSK_REG; /**< Interrupt Mask Register, offset: 0x28 */
    uint8_t RESERVED_1[20];
    __IO uint32_t CNT_CNTL_REG; /**< Counter Control Register, offset: 0x40 */
    uint8_t RESERVED_2[12];
    __I uint32_t CNT_VAL_REG; /**< Counter Value Register, offset: 0x50 */
    uint8_t RESERVED_3[12];
    __IO uint32_t CNT_UPP_VAL_REG; /**< Counter Upper Value Register, offset: 0x60 */
    uint8_t RESERVED_4[28];
    __IO uint32_t CLK_CNTL_REG; /**< Clock Control Register, offset: 0x80 */
    uint8_t RESERVED_5[4];
    __IO uint32_t IC_CNTL_REG; /**< Input Capture Control Register, offset: 0x88 */
    uint8_t RESERVED_6[20];
    __IO uint32_t DMA_CNTL_EN_REG; /**< DMA Control Enable Register, offset: 0xA0 */
    __IO uint32_t DMA_CNTL_CH_REG; /**< DMA Control Channel Register, offset: 0xA4 */
    uint8_t RESERVED_7[40];
    __IO uint32_t ADCT_REG; /**< ADC Trigger Control Register, offset: 0xD0 */
    uint8_t RESERVED_8[4];
    __IO uint32_t ADCT_DLY_REG; /**< ADC Trigger Delay Register, offset: 0xD8 */
    uint8_t RESERVED_9[20];
    __O uint32_t USER_REQ_REG; /**< User Request Register, offset: 0xF0 */
    uint8_t RESERVED_10[268];
    struct
    { /* offset: 0x200, array step: 0x40 */
        __IO uint32_t
            CH_CNTL_REG; /**< Channel 0 Control Register..Channel 5 Control Register, array offset: 0x200, array step: 0x40 */
        uint8_t RESERVED_0[12];
        __IO uint32_t CH_CMR0_REG; /**< Channel 0 Counter Match Register 0..Channel 5 Counter Match Register 0, array offset: 0x210,
                                      array step: 0x40 */
        __I uint32_t
            CH_STS_REG; /**< Channel 0 Status Register 0..Channel 5 Status Register 0, array offset: 0x214, array step: 0x40 */
        uint8_t RESERVED_1[8];
        __IO uint32_t CH_CMR1_REG; /**< Channel 0 Counter Match Register 1..Channel 5 Counter Match Register 1, array offset: 0x220,
                                      array step: 0x40 */
        uint8_t RESERVED_2[28];
    } CH[6];
} GPT_Type;

/* ----------------------------------------------------------------------------
   -- GPT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Masks GPT Register Masks
 * @{
 */

/*! @name CNT_EN_REG - Counter Enable Register */
/*! @{ */
#define GPT_CNT_EN_REG_CNT_START_MASK (0x1U)
#define GPT_CNT_EN_REG_CNT_START_SHIFT (0U)
/*! CNT_START - Counter Start
 *  0b0..No action
 *  0b1..Enable the counter (poll CNT_RUN for 1 to confirm that the counter is enabled internally)
 */
#define GPT_CNT_EN_REG_CNT_START(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_CNT_EN_REG_CNT_START_SHIFT)) & GPT_CNT_EN_REG_CNT_START_MASK)
#define GPT_CNT_EN_REG_CNT_STOP_MASK (0x2U)
#define GPT_CNT_EN_REG_CNT_STOP_SHIFT (1U)
/*! CNT_STOP - Counter Stop
 *  0b0..No action
 *  0b1..Disable the counter (poll CNT_RUN for 0 to confirm that the counter is disabled internally)
 */
#define GPT_CNT_EN_REG_CNT_STOP(x) (((uint32_t)(((uint32_t)(x)) << GPT_CNT_EN_REG_CNT_STOP_SHIFT)) & GPT_CNT_EN_REG_CNT_STOP_MASK)
#define GPT_CNT_EN_REG_CNT_RESET_MASK (0x4U)
#define GPT_CNT_EN_REG_CNT_RESET_SHIFT (2U)
/*! CNT_RESET - Counter Reset
 *  0b0..No action
 *  0b1..Reset the counter (counter is reset to 0; channel output states are reset to 0; poll CNT_RST_DONE for 1
 *       before writing to any other registers)
 */
#define GPT_CNT_EN_REG_CNT_RESET(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_CNT_EN_REG_CNT_RESET_SHIFT)) & GPT_CNT_EN_REG_CNT_RESET_MASK)
#define GPT_CNT_EN_REG_CNT_RUN_MASK (0x10000U)
#define GPT_CNT_EN_REG_CNT_RUN_SHIFT (16U)
/*! CNT_RUN - Counter Enabled Status
 *  0b0..Counter is disabled
 *  0b1..Counter is enabled
 */
#define GPT_CNT_EN_REG_CNT_RUN(x) (((uint32_t)(((uint32_t)(x)) << GPT_CNT_EN_REG_CNT_RUN_SHIFT)) & GPT_CNT_EN_REG_CNT_RUN_MASK)
#define GPT_CNT_EN_REG_CNT_RST_DONE_MASK (0x20000U)
#define GPT_CNT_EN_REG_CNT_RST_DONE_SHIFT (17U)
/*! CNT_RST_DONE - Counter Reset Done Status
 *  0b0..Indicates that the counter is still resetting
 *  0b1..Indicates that the counter has been reset
 */
#define GPT_CNT_EN_REG_CNT_RST_DONE(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_CNT_EN_REG_CNT_RST_DONE_SHIFT)) & GPT_CNT_EN_REG_CNT_RST_DONE_MASK)
#define GPT_CNT_EN_REG_STS_RESETN_MASK (0x40000U)
#define GPT_CNT_EN_REG_STS_RESETN_SHIFT (18U)
/*! STS_RESETN - System Reset Status
 *  0b0..Indicates that the system reset is still asserted
 *  0b1..Indicates that the system reset is deasserted
 */
#define GPT_CNT_EN_REG_STS_RESETN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPT_CNT_EN_REG_STS_RESETN_SHIFT)) & GPT_CNT_EN_REG_STS_RESETN_MASK)
/*! @} */

/*! @name STS_REG - Status Register */
/*! @{ */
#define GPT_STS_REG_CH0_STS_MASK (0x1U)
#define GPT_STS_REG_CH0_STS_SHIFT (0U)
/*! CH0_STS - Channel Status
 *  0b0..Status cleared
 *  0b1..Status bit for this channel has been set
 */
#define GPT_STS_REG_CH0_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH0_STS_SHIFT)) & GPT_STS_REG_CH0_STS_MASK)
#define GPT_STS_REG_CH1_STS_MASK (0x2U)
#define GPT_STS_REG_CH1_STS_SHIFT (1U)
/*! CH1_STS - See CH0_STS.
 */
#define GPT_STS_REG_CH1_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH1_STS_SHIFT)) & GPT_STS_REG_CH1_STS_MASK)
#define GPT_STS_REG_CH2_STS_MASK (0x4U)
#define GPT_STS_REG_CH2_STS_SHIFT (2U)
/*! CH2_STS - See CH0_STS.
 */
#define GPT_STS_REG_CH2_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH2_STS_SHIFT)) & GPT_STS_REG_CH2_STS_MASK)
#define GPT_STS_REG_CH3_STS_MASK (0x8U)
#define GPT_STS_REG_CH3_STS_SHIFT (3U)
/*! CH3_STS - See CH0_STS.
 */
#define GPT_STS_REG_CH3_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH3_STS_SHIFT)) & GPT_STS_REG_CH3_STS_MASK)
#define GPT_STS_REG_CH4_STS_MASK (0x10U)
#define GPT_STS_REG_CH4_STS_SHIFT (4U)
/*! CH4_STS - See CH0_STS.
 */
#define GPT_STS_REG_CH4_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH4_STS_SHIFT)) & GPT_STS_REG_CH4_STS_MASK)
#define GPT_STS_REG_CH5_STS_MASK (0x20U)
#define GPT_STS_REG_CH5_STS_SHIFT (5U)
/*! CH5_STS - See CH0_STS.
 */
#define GPT_STS_REG_CH5_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH5_STS_SHIFT)) & GPT_STS_REG_CH5_STS_MASK)
#define GPT_STS_REG_CH0_ERR_STS_MASK (0x100U)
#define GPT_STS_REG_CH0_ERR_STS_SHIFT (8U)
/*! CH0_ERR_STS - Channel Error Status
 *  0b0..Status cleared
 *  0b1..An error has occurred in this channel
 */
#define GPT_STS_REG_CH0_ERR_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH0_ERR_STS_SHIFT)) & GPT_STS_REG_CH0_ERR_STS_MASK)
#define GPT_STS_REG_CH1_ERR_STS_MASK (0x200U)
#define GPT_STS_REG_CH1_ERR_STS_SHIFT (9U)
/*! CH1_ERR_STS - See CH0_ERR_STS.
 */
#define GPT_STS_REG_CH1_ERR_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH1_ERR_STS_SHIFT)) & GPT_STS_REG_CH1_ERR_STS_MASK)
#define GPT_STS_REG_CH2_ERR_STS_MASK (0x400U)
#define GPT_STS_REG_CH2_ERR_STS_SHIFT (10U)
/*! CH2_ERR_STS - See CH0_ERR_STS.
 */
#define GPT_STS_REG_CH2_ERR_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH2_ERR_STS_SHIFT)) & GPT_STS_REG_CH2_ERR_STS_MASK)
#define GPT_STS_REG_CH3_ERR_STS_MASK (0x800U)
#define GPT_STS_REG_CH3_ERR_STS_SHIFT (11U)
/*! CH3_ERR_STS - See CH0_ERR_STS.
 */
#define GPT_STS_REG_CH3_ERR_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH3_ERR_STS_SHIFT)) & GPT_STS_REG_CH3_ERR_STS_MASK)
#define GPT_STS_REG_CH4_ERR_STS_MASK (0x1000U)
#define GPT_STS_REG_CH4_ERR_STS_SHIFT (12U)
/*! CH4_ERR_STS - See CH0_ERR_STS.
 */
#define GPT_STS_REG_CH4_ERR_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH4_ERR_STS_SHIFT)) & GPT_STS_REG_CH4_ERR_STS_MASK)
#define GPT_STS_REG_CH5_ERR_STS_MASK (0x2000U)
#define GPT_STS_REG_CH5_ERR_STS_SHIFT (13U)
/*! CH5_ERR_STS - See CH0_ERR_STS.
 */
#define GPT_STS_REG_CH5_ERR_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CH5_ERR_STS_SHIFT)) & GPT_STS_REG_CH5_ERR_STS_MASK)
#define GPT_STS_REG_CNT_UPP_STS_MASK (0x10000U)
#define GPT_STS_REG_CNT_UPP_STS_SHIFT (16U)
/*! CNT_UPP_STS - Counter-Reach-Upper Status
 */
#define GPT_STS_REG_CNT_UPP_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_CNT_UPP_STS_SHIFT)) & GPT_STS_REG_CNT_UPP_STS_MASK)
#define GPT_STS_REG_DMA0_OF_STS_MASK (0x1000000U)
#define GPT_STS_REG_DMA0_OF_STS_SHIFT (24U)
/*! DMA0_OF_STS - DMA Overflow Status
 *  0b0..Status cleared
 *  0b1..Indicates that there has been a new input capture before this DMA channel could transfer the captured data away
 */
#define GPT_STS_REG_DMA0_OF_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_DMA0_OF_STS_SHIFT)) & GPT_STS_REG_DMA0_OF_STS_MASK)
#define GPT_STS_REG_DMA1_OF_STS_MASK (0x2000000U)
#define GPT_STS_REG_DMA1_OF_STS_SHIFT (25U)
/*! DMA1_OF_STS - See DMA0_OF_STS.
 */
#define GPT_STS_REG_DMA1_OF_STS(x) (((uint32_t)(((uint32_t)(x)) << GPT_STS_REG_DMA1_OF_STS_SHIFT)) & GPT_STS_REG_DMA1_OF_STS_MASK)
/*! @} */

/*! @name INT_REG - Interrupt Register */
/*! @{ */
#define GPT_INT_REG_CH0_INTR_MASK (0x1U)
#define GPT_INT_REG_CH0_INTR_SHIFT (0U)
/*! CH0_INTR - Masked signal of CH0_STS
 */
#define GPT_INT_REG_CH0_INTR(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH0_INTR_SHIFT)) & GPT_INT_REG_CH0_INTR_MASK)
#define GPT_INT_REG_CH1_INTR_MASK (0x2U)
#define GPT_INT_REG_CH1_INTR_SHIFT (1U)
/*! CH1_INTR - Masked signal of CH1_STS
 */
#define GPT_INT_REG_CH1_INTR(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH1_INTR_SHIFT)) & GPT_INT_REG_CH1_INTR_MASK)
#define GPT_INT_REG_CH2_INTR_MASK (0x4U)
#define GPT_INT_REG_CH2_INTR_SHIFT (2U)
/*! CH2_INTR - Masked signal of CH2_STS
 */
#define GPT_INT_REG_CH2_INTR(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH2_INTR_SHIFT)) & GPT_INT_REG_CH2_INTR_MASK)
#define GPT_INT_REG_CH3_INTR_MASK (0x8U)
#define GPT_INT_REG_CH3_INTR_SHIFT (3U)
/*! CH3_INTR - Masked signal of CH3_STS
 */
#define GPT_INT_REG_CH3_INTR(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH3_INTR_SHIFT)) & GPT_INT_REG_CH3_INTR_MASK)
#define GPT_INT_REG_CH4_INTR_MASK (0x10U)
#define GPT_INT_REG_CH4_INTR_SHIFT (4U)
/*! CH4_INTR - Masked signal of CH4_STS
 */
#define GPT_INT_REG_CH4_INTR(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH4_INTR_SHIFT)) & GPT_INT_REG_CH4_INTR_MASK)
#define GPT_INT_REG_CH5_INTR_MASK (0x20U)
#define GPT_INT_REG_CH5_INTR_SHIFT (5U)
/*! CH5_INTR - Masked signal of CH5_STS
 */
#define GPT_INT_REG_CH5_INTR(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH5_INTR_SHIFT)) & GPT_INT_REG_CH5_INTR_MASK)
#define GPT_INT_REG_CH0_ERR_INTR_MASK (0x100U)
#define GPT_INT_REG_CH0_ERR_INTR_SHIFT (8U)
/*! CH0_ERR_INTR - Masked signal of CH0_ERR_STS
 */
#define GPT_INT_REG_CH0_ERR_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH0_ERR_INTR_SHIFT)) & GPT_INT_REG_CH0_ERR_INTR_MASK)
#define GPT_INT_REG_CH1_ERR_INTR_MASK (0x200U)
#define GPT_INT_REG_CH1_ERR_INTR_SHIFT (9U)
/*! CH1_ERR_INTR - Masked signal of CH1_ERR_STS
 */
#define GPT_INT_REG_CH1_ERR_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH1_ERR_INTR_SHIFT)) & GPT_INT_REG_CH1_ERR_INTR_MASK)
#define GPT_INT_REG_CH2_ERR_INTR_MASK (0x400U)
#define GPT_INT_REG_CH2_ERR_INTR_SHIFT (10U)
/*! CH2_ERR_INTR - Masked signal of CH2_ERR_STS
 */
#define GPT_INT_REG_CH2_ERR_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH2_ERR_INTR_SHIFT)) & GPT_INT_REG_CH2_ERR_INTR_MASK)
#define GPT_INT_REG_CH3_ERR_INTR_MASK (0x800U)
#define GPT_INT_REG_CH3_ERR_INTR_SHIFT (11U)
/*! CH3_ERR_INTR - Masked signal of CH3_ERR_STS
 */
#define GPT_INT_REG_CH3_ERR_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH3_ERR_INTR_SHIFT)) & GPT_INT_REG_CH3_ERR_INTR_MASK)
#define GPT_INT_REG_CH4_ERR_INTR_MASK (0x1000U)
#define GPT_INT_REG_CH4_ERR_INTR_SHIFT (12U)
/*! CH4_ERR_INTR - Masked signal of CH4_ERR_STS
 */
#define GPT_INT_REG_CH4_ERR_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH4_ERR_INTR_SHIFT)) & GPT_INT_REG_CH4_ERR_INTR_MASK)
#define GPT_INT_REG_CH5_ERR_INTR_MASK (0x2000U)
#define GPT_INT_REG_CH5_ERR_INTR_SHIFT (13U)
/*! CH5_ERR_INTR - Masked signal of CH5_ERR_STS
 */
#define GPT_INT_REG_CH5_ERR_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CH5_ERR_INTR_SHIFT)) & GPT_INT_REG_CH5_ERR_INTR_MASK)
#define GPT_INT_REG_CNT_UPP_INTR_MASK (0x10000U)
#define GPT_INT_REG_CNT_UPP_INTR_SHIFT (16U)
/*! CNT_UPP_INTR - Masked signal of CNT_UPP_STS
 */
#define GPT_INT_REG_CNT_UPP_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_CNT_UPP_INTR_SHIFT)) & GPT_INT_REG_CNT_UPP_INTR_MASK)
#define GPT_INT_REG_DMA0_OF_INTR_MASK (0x1000000U)
#define GPT_INT_REG_DMA0_OF_INTR_SHIFT (24U)
/*! DMA0_OF_INTR - Masked signal of DMA0_OF_STS
 */
#define GPT_INT_REG_DMA0_OF_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_DMA0_OF_INTR_SHIFT)) & GPT_INT_REG_DMA0_OF_INTR_MASK)
#define GPT_INT_REG_DMA1_OF_INTR_MASK (0x2000000U)
#define GPT_INT_REG_DMA1_OF_INTR_SHIFT (25U)
/*! DMA1_OF_INTR - Masked signal of DMA1_OF_STS
 */
#define GPT_INT_REG_DMA1_OF_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_REG_DMA1_OF_INTR_SHIFT)) & GPT_INT_REG_DMA1_OF_INTR_MASK)
/*! @} */

/*! @name INT_MSK_REG - Interrupt Mask Register */
/*! @{ */
#define GPT_INT_MSK_REG_CH0_MSK_MASK (0x1U)
#define GPT_INT_MSK_REG_CH0_MSK_SHIFT (0U)
/*! CH0_MSK - Channel Interrupt Mask
 *  0b0..Do not mask CH0_STS
 *  0b1..Mask CH0_STS
 */
#define GPT_INT_MSK_REG_CH0_MSK(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH0_MSK_SHIFT)) & GPT_INT_MSK_REG_CH0_MSK_MASK)
#define GPT_INT_MSK_REG_CH1_MSK_MASK (0x2U)
#define GPT_INT_MSK_REG_CH1_MSK_SHIFT (1U)
/*! CH1_MSK - See CH0_STS.
 */
#define GPT_INT_MSK_REG_CH1_MSK(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH1_MSK_SHIFT)) & GPT_INT_MSK_REG_CH1_MSK_MASK)
#define GPT_INT_MSK_REG_CH2_MSK_MASK (0x4U)
#define GPT_INT_MSK_REG_CH2_MSK_SHIFT (2U)
/*! CH2_MSK - See CH0_STS.
 */
#define GPT_INT_MSK_REG_CH2_MSK(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH2_MSK_SHIFT)) & GPT_INT_MSK_REG_CH2_MSK_MASK)
#define GPT_INT_MSK_REG_CH3_MSK_MASK (0x8U)
#define GPT_INT_MSK_REG_CH3_MSK_SHIFT (3U)
/*! CH3_MSK - See CH0_STS.
 */
#define GPT_INT_MSK_REG_CH3_MSK(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH3_MSK_SHIFT)) & GPT_INT_MSK_REG_CH3_MSK_MASK)
#define GPT_INT_MSK_REG_CH4_MSK_MASK (0x10U)
#define GPT_INT_MSK_REG_CH4_MSK_SHIFT (4U)
/*! CH4_MSK - See CH0_STS.
 */
#define GPT_INT_MSK_REG_CH4_MSK(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH4_MSK_SHIFT)) & GPT_INT_MSK_REG_CH4_MSK_MASK)
#define GPT_INT_MSK_REG_CH5_MSK_MASK (0x20U)
#define GPT_INT_MSK_REG_CH5_MSK_SHIFT (5U)
/*! CH5_MSK - See CH0_STS.
 */
#define GPT_INT_MSK_REG_CH5_MSK(x) (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH5_MSK_SHIFT)) & GPT_INT_MSK_REG_CH5_MSK_MASK)
#define GPT_INT_MSK_REG_CH0_ERR_MSK_MASK (0x100U)
#define GPT_INT_MSK_REG_CH0_ERR_MSK_SHIFT (8U)
/*! CH0_ERR_MSK - Channel Error Interrupt Mask
 *  0b0..Do not mask CH0_ERR_STS
 *  0b1..Mask CH0_ERR_STS
 */
#define GPT_INT_MSK_REG_CH0_ERR_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH0_ERR_MSK_SHIFT)) & GPT_INT_MSK_REG_CH0_ERR_MSK_MASK)
#define GPT_INT_MSK_REG_CH1_ERR_MSK_MASK (0x200U)
#define GPT_INT_MSK_REG_CH1_ERR_MSK_SHIFT (9U)
/*! CH1_ERR_MSK - See CH0_ERR_STS.
 */
#define GPT_INT_MSK_REG_CH1_ERR_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH1_ERR_MSK_SHIFT)) & GPT_INT_MSK_REG_CH1_ERR_MSK_MASK)
#define GPT_INT_MSK_REG_CH2_ERR_MSK_MASK (0x400U)
#define GPT_INT_MSK_REG_CH2_ERR_MSK_SHIFT (10U)
/*! CH2_ERR_MSK - See CH0_ERR_STS.
 */
#define GPT_INT_MSK_REG_CH2_ERR_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH2_ERR_MSK_SHIFT)) & GPT_INT_MSK_REG_CH2_ERR_MSK_MASK)
#define GPT_INT_MSK_REG_CH3_ERR_MSK_MASK (0x800U)
#define GPT_INT_MSK_REG_CH3_ERR_MSK_SHIFT (11U)
/*! CH3_ERR_MSK - See CH0_ERR_STS.
 */
#define GPT_INT_MSK_REG_CH3_ERR_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH3_ERR_MSK_SHIFT)) & GPT_INT_MSK_REG_CH3_ERR_MSK_MASK)
#define GPT_INT_MSK_REG_CH4_ERR_MSK_MASK (0x1000U)
#define GPT_INT_MSK_REG_CH4_ERR_MSK_SHIFT (12U)
/*! CH4_ERR_MSK - See CH0_ERR_STS.
 */
#define GPT_INT_MSK_REG_CH4_ERR_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH4_ERR_MSK_SHIFT)) & GPT_INT_MSK_REG_CH4_ERR_MSK_MASK)
#define GPT_INT_MSK_REG_CH5_ERR_MSK_MASK (0x2000U)
#define GPT_INT_MSK_REG_CH5_ERR_MSK_SHIFT (13U)
/*! CH5_ERR_MSK - See CH0_ERR_STS.
 */
#define GPT_INT_MSK_REG_CH5_ERR_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CH5_ERR_MSK_SHIFT)) & GPT_INT_MSK_REG_CH5_ERR_MSK_MASK)
#define GPT_INT_MSK_REG_CNT_UPP_MSK_MASK (0x10000U)
#define GPT_INT_MSK_REG_CNT_UPP_MSK_SHIFT (16U)
/*! CNT_UPP_MSK - Upper Value Interrupt Mask
 *  0b0..Do not mask CNT_UPP_STS
 *  0b1..Mask CNT_UPP_STS
 */
#define GPT_INT_MSK_REG_CNT_UPP_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_CNT_UPP_MSK_SHIFT)) & GPT_INT_MSK_REG_CNT_UPP_MSK_MASK)
#define GPT_INT_MSK_REG_DMA0_OF_MSK_MASK (0x1000000U)
#define GPT_INT_MSK_REG_DMA0_OF_MSK_SHIFT (24U)
/*! DMA0_OF_MSK - DMA Channel Overflow Mask
 *  0b0..Do not mask DMA0_OF_STS
 *  0b1..Mask DMA0_OF_STS
 */
#define GPT_INT_MSK_REG_DMA0_OF_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_DMA0_OF_MSK_SHIFT)) & GPT_INT_MSK_REG_DMA0_OF_MSK_MASK)
#define GPT_INT_MSK_REG_DMA1_OF_MSK_MASK (0x2000000U)
#define GPT_INT_MSK_REG_DMA1_OF_MSK_SHIFT (25U)
/*! DMA1_OF_MSK - See DMA0_OF_MSK
 */
#define GPT_INT_MSK_REG_DMA1_OF_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_INT_MSK_REG_DMA1_OF_MSK_SHIFT)) & GPT_INT_MSK_REG_DMA1_OF_MSK_MASK)
/*! @} */

/*! @name CNT_CNTL_REG - Counter Control Register */
/*! @{ */
#define GPT_CNT_CNTL_REG_CNT_DBG_ACT_MASK (0x10U)
#define GPT_CNT_CNTL_REG_CNT_DBG_ACT_SHIFT (4U)
/*! CNT_DBG_ACT - Counter Debug Mode Action Mask
 *  0b0..In debug mode, stop the counter
 *  0b1..In debug mode, the counter is not affected
 */
#define GPT_CNT_CNTL_REG_CNT_DBG_ACT(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << GPT_CNT_CNTL_REG_CNT_DBG_ACT_SHIFT)) & GPT_CNT_CNTL_REG_CNT_DBG_ACT_MASK)
#define GPT_CNT_CNTL_REG_CNT_UPDT_MOD_MASK (0x300U)
#define GPT_CNT_CNTL_REG_CNT_UPDT_MOD_SHIFT (8U)
/*! CNT_UPDT_MOD - Counter Value Update Mode
 *  0b00..Auto-update normal (can be used for any clock relationship between the counter clock and the APB clock;
 *        only every 3-4 counter ticks are updated to CNT_VAL)
 *  0b01..Auto-update fast (use when counter clock is at least 5 times slower than the APB clock; every counter tick is updated to
 * CNT_VAL) 0b10..Reserved 0b11..Update off (of CNT_VAL does not need to be read, CNT_UPDT_MOD can be set to off to save power)
 */
#define GPT_CNT_CNTL_REG_CNT_UPDT_MOD(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << GPT_CNT_CNTL_REG_CNT_UPDT_MOD_SHIFT)) & GPT_CNT_CNTL_REG_CNT_UPDT_MOD_MASK)
/*! @} */

/*! @name CNT_VAL_REG - Counter Value Register */
/*! @{ */
#define GPT_CNT_VAL_REG_CNT_VAL_MASK (0xFFFFFFFFU)
#define GPT_CNT_VAL_REG_CNT_VAL_SHIFT (0U)
/*! CNT_VAL - Counter Value
 */
#define GPT_CNT_VAL_REG_CNT_VAL(x) (((uint32_t)(((uint32_t)(x)) << GPT_CNT_VAL_REG_CNT_VAL_SHIFT)) & GPT_CNT_VAL_REG_CNT_VAL_MASK)
/*! @} */

/*! @name CNT_UPP_VAL_REG - Counter Upper Value Register */
/*! @{ */
#define GPT_CNT_UPP_VAL_REG_UPP_VAL_MASK (0xFFFFFFFFU)
#define GPT_CNT_UPP_VAL_REG_UPP_VAL_SHIFT (0U)
/*! UPP_VAL - Counter Upper Value
 */
#define GPT_CNT_UPP_VAL_REG_UPP_VAL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_CNT_UPP_VAL_REG_UPP_VAL_SHIFT)) & GPT_CNT_UPP_VAL_REG_UPP_VAL_MASK)
/*! @} */

/*! @name CLK_CNTL_REG - Clock Control Register */
/*! @{ */
#define GPT_CLK_CNTL_REG_CLK_SRC_MASK (0x1U)
#define GPT_CLK_CNTL_REG_CLK_SRC_SHIFT (0U)
/*! CLK_SRC - Counter Clock Select
 *  0b0..Select clock 0
 *  0b1..Select clock 1
 */
#define GPT_CLK_CNTL_REG_CLK_SRC(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_CLK_CNTL_REG_CLK_SRC_SHIFT)) & GPT_CLK_CNTL_REG_CLK_SRC_MASK)
#define GPT_CLK_CNTL_REG_CLK_DIV_MASK (0xF00U)
#define GPT_CLK_CNTL_REG_CLK_DIV_SHIFT (8U)
/*! CLK_DIV - Clock Divider
 */
#define GPT_CLK_CNTL_REG_CLK_DIV(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_CLK_CNTL_REG_CLK_DIV_SHIFT)) & GPT_CLK_CNTL_REG_CLK_DIV_MASK)
#define GPT_CLK_CNTL_REG_CLK_PRE_MASK (0xFF0000U)
#define GPT_CLK_CNTL_REG_CLK_PRE_SHIFT (16U)
/*! CLK_PRE - Clock Pre-Scalar
 */
#define GPT_CLK_CNTL_REG_CLK_PRE(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_CLK_CNTL_REG_CLK_PRE_SHIFT)) & GPT_CLK_CNTL_REG_CLK_PRE_MASK)
/*! @} */

/*! @name IC_CNTL_REG - Input Capture Control Register */
/*! @{ */
#define GPT_IC_CNTL_REG_CHX_IC_WIDTH_MASK (0x7U)
#define GPT_IC_CNTL_REG_CHX_IC_WIDTH_SHIFT (0U)
/*! CHx_IC_WIDTH - Input Capture Filter Width
 *  0b000..No filtering (1 cycle)
 *  0b001..2 cycles
 *  0b010..3 cycles
 *  0b011..4 cycles
 *  0b100..5 cycles
 *  0b101..6 cycles
 *  0b110..7 cycles
 *  0b111..Reserved
 */
#define GPT_IC_CNTL_REG_CHX_IC_WIDTH(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << GPT_IC_CNTL_REG_CHX_IC_WIDTH_SHIFT)) & GPT_IC_CNTL_REG_CHX_IC_WIDTH_MASK)
#define GPT_IC_CNTL_REG_CHX_IC_DIV_MASK (0x70U)
#define GPT_IC_CNTL_REG_CHX_IC_DIV_SHIFT (4U)
/*! CHx_IC_DIV - Input Capture Sampling Clock Divider
 */
#define GPT_IC_CNTL_REG_CHX_IC_DIV(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << GPT_IC_CNTL_REG_CHX_IC_DIV_SHIFT)) & GPT_IC_CNTL_REG_CHX_IC_DIV_MASK)
/*! @} */

/*! @name DMA_CNTL_EN_REG - DMA Control Enable Register */
/*! @{ */
#define GPT_DMA_CNTL_EN_REG_DMA0_EN_MASK (0x1U)
#define GPT_DMA_CNTL_EN_REG_DMA0_EN_SHIFT (0U)
/*! DMA0_EN - DMA Channel Enable
 *  0b0..Disable this DMA channel
 *  0b1..Enable this DMA channel. In input capture mode, DMA controller will be notified when a value is captured.
 */
#define GPT_DMA_CNTL_EN_REG_DMA0_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_DMA_CNTL_EN_REG_DMA0_EN_SHIFT)) & GPT_DMA_CNTL_EN_REG_DMA0_EN_MASK)
#define GPT_DMA_CNTL_EN_REG_DMA1_EN_MASK (0x2U)
#define GPT_DMA_CNTL_EN_REG_DMA1_EN_SHIFT (1U)
/*! DMA1_EN - See DMA0_EN.
 */
#define GPT_DMA_CNTL_EN_REG_DMA1_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_DMA_CNTL_EN_REG_DMA1_EN_SHIFT)) & GPT_DMA_CNTL_EN_REG_DMA1_EN_MASK)
/*! @} */

/*! @name DMA_CNTL_CH_REG - DMA Control Channel Register */
/*! @{ */
#define GPT_DMA_CNTL_CH_REG_DMA0_CH_MASK (0x7U)
#define GPT_DMA_CNTL_CH_REG_DMA0_CH_SHIFT (0U)
/*! DMA0_CH - DMA Channel Select
 *  0b000..Connect to channel 0
 *  0b001..Connect to channel 1
 *  0b010..Connect to channel 2
 *  0b011..Connect to channel 3
 *  0b100..Connect to channel 4
 *  0b101..Connect to channel 5
 */
#define GPT_DMA_CNTL_CH_REG_DMA0_CH(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_DMA_CNTL_CH_REG_DMA0_CH_SHIFT)) & GPT_DMA_CNTL_CH_REG_DMA0_CH_MASK)
#define GPT_DMA_CNTL_CH_REG_DMA1_CH_MASK (0x70U)
#define GPT_DMA_CNTL_CH_REG_DMA1_CH_SHIFT (4U)
/*! DMA1_CH - See DMA0_CH.
 */
#define GPT_DMA_CNTL_CH_REG_DMA1_CH(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << GPT_DMA_CNTL_CH_REG_DMA1_CH_SHIFT)) & GPT_DMA_CNTL_CH_REG_DMA1_CH_MASK)
/*! @} */

/*! @name ADCT_REG - ADC Trigger Control Register */
/*! @{ */
#define GPT_ADCT_REG_ADCT_CHSEL_MASK (0x7U)
#define GPT_ADCT_REG_ADCT_CHSEL_SHIFT (0U)
/*! ADCT_CHSEL - ADC Trigger Channel Select
 *  0b000..Connect to channel 0
 *  0b001..Connect to channel 1
 *  0b010..Connect to channel 2
 *  0b011..Connect to channel 3
 *  0b100..Connect to channel 4
 *  0b101..Connect to channel 5
 */
#define GPT_ADCT_REG_ADCT_CHSEL(x) (((uint32_t)(((uint32_t)(x)) << GPT_ADCT_REG_ADCT_CHSEL_SHIFT)) & GPT_ADCT_REG_ADCT_CHSEL_MASK)
#define GPT_ADCT_REG_ADCT_EN_MASK (0x100U)
#define GPT_ADCT_REG_ADCT_EN_SHIFT (8U)
/*! ADCT_EN - ADC Trigger Enable
 *  0b0..Disable the ADC trigger
 *  0b1..Enable the ADC trigger
 */
#define GPT_ADCT_REG_ADCT_EN(x) (((uint32_t)(((uint32_t)(x)) << GPT_ADCT_REG_ADCT_EN_SHIFT)) & GPT_ADCT_REG_ADCT_EN_MASK)
/*! @} */

/*! @name ADCT_DLY_REG - ADC Trigger Delay Register */
/*! @{ */
#define GPT_ADCT_DLY_REG_ADCT_DLY_MASK (0xFFFFFFFFU)
#define GPT_ADCT_DLY_REG_ADCT_DLY_SHIFT (0U)
/*! ADCT_DLY - ADC Trigger Delay
 */
#define GPT_ADCT_DLY_REG_ADCT_DLY(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << GPT_ADCT_DLY_REG_ADCT_DLY_SHIFT)) & GPT_ADCT_DLY_REG_ADCT_DLY_MASK)
/*! @} */

/*! @name USER_REQ_REG - User Request Register */
/*! @{ */
#define GPT_USER_REQ_REG_CH0_USER_ITRIG_MASK (0x1U)
#define GPT_USER_REQ_REG_CH0_USER_ITRIG_SHIFT (0U)
/*! CH0_USER_ITRIG - User Input Trigger
 *  0b0..No action
 *  0b1..If this channel (channel 0) is configured to input-capture mode, generate a manual input trigger to
 *       capture the current counter value (this trigger bypasses the input capture control settings)
 */
#define GPT_USER_REQ_REG_CH0_USER_ITRIG(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH0_USER_ITRIG_SHIFT)) & GPT_USER_REQ_REG_CH0_USER_ITRIG_MASK)
#define GPT_USER_REQ_REG_CH1_USER_ITRIG_MASK (0x2U)
#define GPT_USER_REQ_REG_CH1_USER_ITRIG_SHIFT (1U)
/*! CH1_USER_ITRIG - See CH0_USER_ITRIG.
 */
#define GPT_USER_REQ_REG_CH1_USER_ITRIG(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH1_USER_ITRIG_SHIFT)) & GPT_USER_REQ_REG_CH1_USER_ITRIG_MASK)
#define GPT_USER_REQ_REG_CH2_USER_ITRIG_MASK (0x4U)
#define GPT_USER_REQ_REG_CH2_USER_ITRIG_SHIFT (2U)
/*! CH2_USER_ITRIG - See CH0_USER_ITRIG.
 */
#define GPT_USER_REQ_REG_CH2_USER_ITRIG(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH2_USER_ITRIG_SHIFT)) & GPT_USER_REQ_REG_CH2_USER_ITRIG_MASK)
#define GPT_USER_REQ_REG_CH3_USER_ITRIG_MASK (0x8U)
#define GPT_USER_REQ_REG_CH3_USER_ITRIG_SHIFT (3U)
/*! CH3_USER_ITRIG - See CH0_USER_ITRIG.
 */
#define GPT_USER_REQ_REG_CH3_USER_ITRIG(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH3_USER_ITRIG_SHIFT)) & GPT_USER_REQ_REG_CH3_USER_ITRIG_MASK)
#define GPT_USER_REQ_REG_CH4_USER_ITRIG_MASK (0x10U)
#define GPT_USER_REQ_REG_CH4_USER_ITRIG_SHIFT (4U)
/*! CH4_USER_ITRIG - See CH0_USER_ITRIG.
 */
#define GPT_USER_REQ_REG_CH4_USER_ITRIG(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH4_USER_ITRIG_SHIFT)) & GPT_USER_REQ_REG_CH4_USER_ITRIG_MASK)
#define GPT_USER_REQ_REG_CH5_USER_ITRIG_MASK (0x20U)
#define GPT_USER_REQ_REG_CH5_USER_ITRIG_SHIFT (5U)
/*! CH5_USER_ITRIG - See CH0_USER_ITRIG.
 */
#define GPT_USER_REQ_REG_CH5_USER_ITRIG(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH5_USER_ITRIG_SHIFT)) & GPT_USER_REQ_REG_CH5_USER_ITRIG_MASK)
#define GPT_USER_REQ_REG_CH0_RST_MASK (0x100U)
#define GPT_USER_REQ_REG_CH0_RST_SHIFT (8U)
/*! CH0_RST - Channel Reset
 *  0b0..No action
 *  0b1..Reset this channel
 */
#define GPT_USER_REQ_REG_CH0_RST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH0_RST_SHIFT)) & GPT_USER_REQ_REG_CH0_RST_MASK)
#define GPT_USER_REQ_REG_CH1_RST_MASK (0x200U)
#define GPT_USER_REQ_REG_CH1_RST_SHIFT (9U)
/*! CH1_RST - See CH0_RST.
 */
#define GPT_USER_REQ_REG_CH1_RST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH1_RST_SHIFT)) & GPT_USER_REQ_REG_CH1_RST_MASK)
#define GPT_USER_REQ_REG_CH2_RST_MASK (0x400U)
#define GPT_USER_REQ_REG_CH2_RST_SHIFT (10U)
/*! CH2_RST - See CH0_RST.
 */
#define GPT_USER_REQ_REG_CH2_RST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH2_RST_SHIFT)) & GPT_USER_REQ_REG_CH2_RST_MASK)
#define GPT_USER_REQ_REG_CH3_RST_MASK (0x800U)
#define GPT_USER_REQ_REG_CH3_RST_SHIFT (11U)
/*! CH3_RST - See CH0_RST.
 */
#define GPT_USER_REQ_REG_CH3_RST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH3_RST_SHIFT)) & GPT_USER_REQ_REG_CH3_RST_MASK)
#define GPT_USER_REQ_REG_CH4_RST_MASK (0x1000U)
#define GPT_USER_REQ_REG_CH4_RST_SHIFT (12U)
/*! CH4_RST - See CH0_RST.
 */
#define GPT_USER_REQ_REG_CH4_RST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH4_RST_SHIFT)) & GPT_USER_REQ_REG_CH4_RST_MASK)
#define GPT_USER_REQ_REG_CH5_RST_MASK (0x2000U)
#define GPT_USER_REQ_REG_CH5_RST_SHIFT (13U)
/*! CH5_RST - See CH0_RST.
 */
#define GPT_USER_REQ_REG_CH5_RST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH5_RST_SHIFT)) & GPT_USER_REQ_REG_CH5_RST_MASK)
#define GPT_USER_REQ_REG_CH0_CMR_UPDT_MASK (0x10000U)
#define GPT_USER_REQ_REG_CH0_CMR_UPDT_SHIFT (16U)
/*! CH0_CMR_UPDT - Channel CMR Update
 *  0b0..No action
 *  0b1..Update CMR0 and CMR1 to the internal shadow registers
 */
#define GPT_USER_REQ_REG_CH0_CMR_UPDT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH0_CMR_UPDT_SHIFT)) & GPT_USER_REQ_REG_CH0_CMR_UPDT_MASK)
#define GPT_USER_REQ_REG_CH1_CMR_UPDT_MASK (0x20000U)
#define GPT_USER_REQ_REG_CH1_CMR_UPDT_SHIFT (17U)
/*! CH1_CMR_UPDT - See CH0_CMR_UPDT.
 */
#define GPT_USER_REQ_REG_CH1_CMR_UPDT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH1_CMR_UPDT_SHIFT)) & GPT_USER_REQ_REG_CH1_CMR_UPDT_MASK)
#define GPT_USER_REQ_REG_CH2_CMR_UPDT_MASK (0x40000U)
#define GPT_USER_REQ_REG_CH2_CMR_UPDT_SHIFT (18U)
/*! CH2_CMR_UPDT - See CH0_CMR_UPDT.
 */
#define GPT_USER_REQ_REG_CH2_CMR_UPDT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH2_CMR_UPDT_SHIFT)) & GPT_USER_REQ_REG_CH2_CMR_UPDT_MASK)
#define GPT_USER_REQ_REG_CH3_CMR_UPDT_MASK (0x80000U)
#define GPT_USER_REQ_REG_CH3_CMR_UPDT_SHIFT (19U)
/*! CH3_CMR_UPDT - See CH0_CMR_UPDT.
 */
#define GPT_USER_REQ_REG_CH3_CMR_UPDT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH3_CMR_UPDT_SHIFT)) & GPT_USER_REQ_REG_CH3_CMR_UPDT_MASK)
#define GPT_USER_REQ_REG_CH4_CMR_UPDT_MASK (0x100000U)
#define GPT_USER_REQ_REG_CH4_CMR_UPDT_SHIFT (20U)
/*! CH4_CMR_UPDT - See CH0_CMR_UPDT.
 */
#define GPT_USER_REQ_REG_CH4_CMR_UPDT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH4_CMR_UPDT_SHIFT)) & GPT_USER_REQ_REG_CH4_CMR_UPDT_MASK)
#define GPT_USER_REQ_REG_CH5_CMR_UPDT_MASK (0x200000U)
#define GPT_USER_REQ_REG_CH5_CMR_UPDT_SHIFT (21U)
/*! CH5_CMR_UPDT - See CH0_CMR_UPDT.
 */
#define GPT_USER_REQ_REG_CH5_CMR_UPDT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << GPT_USER_REQ_REG_CH5_CMR_UPDT_SHIFT)) & GPT_USER_REQ_REG_CH5_CMR_UPDT_MASK)
/*! @} */

/*! @name CH_CNTL_REG - Channel 0 Control Register..Channel 5 Control Register */
/*! @{ */
#define GPT_CH_CNTL_REG_CHX_IO_MASK (0x7U)
#define GPT_CH_CNTL_REG_CHX_IO_SHIFT (0U)
/*! CHx_IO - Channel Mode
 *  0b000..No function
 *  0b001..Input capture mode
 *  0b100..One-shot mode (pulse)
 *  0b101..One-shot mode (edge)
 *  0b110..PWM mode (edge-aligned)
 *  0b111..PWM mode (center-aligned)
 */
#define GPT_CH_CNTL_REG_CHX_IO(x) (((uint32_t)(((uint32_t)(x)) << GPT_CH_CNTL_REG_CHX_IO_SHIFT)) & GPT_CH_CNTL_REG_CHX_IO_MASK)
#define GPT_CH_CNTL_REG_IC_EDGE_MASK (0x7000U)
#define GPT_CH_CNTL_REG_IC_EDGE_SHIFT (12U)
/*! IC_EDGE - Channel Input Capture Edge
 *  0b000..Capture rising edge in CMR0
 *  0b001..Capture falling edge in CMR0
 */
#define GPT_CH_CNTL_REG_IC_EDGE(x) (((uint32_t)(((uint32_t)(x)) << GPT_CH_CNTL_REG_IC_EDGE_SHIFT)) & GPT_CH_CNTL_REG_IC_EDGE_MASK)
#define GPT_CH_CNTL_REG_POL_MASK (0x10000U)
#define GPT_CH_CNTL_REG_POL_SHIFT (16U)
/*! POL - Channel Polarity
 *  0b0..Reset to 0
 *  0b1..Reset to 1
 */
#define GPT_CH_CNTL_REG_POL(x) (((uint32_t)(((uint32_t)(x)) << GPT_CH_CNTL_REG_POL_SHIFT)) & GPT_CH_CNTL_REG_POL_MASK)
/*! @} */

/* The count of GPT_CH_CNTL_REG */
#define GPT_CH_CNTL_REG_COUNT (6U)

/*! @name CH_CMR0_REG - Channel 0 Counter Match Register 0..Channel 5 Counter Match Register 0 */
/*! @{ */
#define GPT_CH_CMR0_REG_CMR0_MASK (0xFFFFFFFFU)
#define GPT_CH_CMR0_REG_CMR0_SHIFT (0U)
/*! CMR0 - Channel Counter Match Register 0
 */
#define GPT_CH_CMR0_REG_CMR0(x) (((uint32_t)(((uint32_t)(x)) << GPT_CH_CMR0_REG_CMR0_SHIFT)) & GPT_CH_CMR0_REG_CMR0_MASK)
/*! @} */

/* The count of GPT_CH_CMR0_REG */
#define GPT_CH_CMR0_REG_COUNT (6U)

/*! @name CH_STS_REG - Channel 0 Status Register 0..Channel 5 Status Register 0 */
/*! @{ */
#define GPT_CH_STS_REG_OUT_ST_MASK (0x1U)
#define GPT_CH_STS_REG_OUT_ST_SHIFT (0U)
/*! OUT_ST - Channel Output State
 */
#define GPT_CH_STS_REG_OUT_ST(x) (((uint32_t)(((uint32_t)(x)) << GPT_CH_STS_REG_OUT_ST_SHIFT)) & GPT_CH_STS_REG_OUT_ST_MASK)
/*! @} */

/* The count of GPT_CH_STS_REG */
#define GPT_CH_STS_REG_COUNT (6U)

/*! @name CH_CMR1_REG - Channel 0 Counter Match Register 1..Channel 5 Counter Match Register 1 */
/*! @{ */
#define GPT_CH_CMR1_REG_CMR1_MASK (0xFFFFFFFFU)
#define GPT_CH_CMR1_REG_CMR1_SHIFT (0U)
/*! CMR1 - Channel Counter Match Register 1
 */
#define GPT_CH_CMR1_REG_CMR1(x) (((uint32_t)(((uint32_t)(x)) << GPT_CH_CMR1_REG_CMR1_SHIFT)) & GPT_CH_CMR1_REG_CMR1_MASK)
/*! @} */

/* The count of GPT_CH_CMR1_REG */
#define GPT_CH_CMR1_REG_COUNT (6U)

/*!
 * @}
 */ /* end of group GPT_Register_Masks */

/* GPT - Peripheral instance base addresses */
/** Peripheral GPT0 base address */
#define GPT0_BASE (0x46070000u)
/** Peripheral GPT0 base pointer */
#define GPT0 ((GPT_Type *) GPT0_BASE)
/** Peripheral GPT1 base address */
#define GPT1_BASE (0x46080000u)
/** Peripheral GPT1 base pointer */
#define GPT1 ((GPT_Type *) GPT1_BASE)
/** Peripheral GPT2 base address */
#define GPT2_BASE (0x48070000u)
/** Peripheral GPT2 base pointer */
#define GPT2 ((GPT_Type *) GPT2_BASE)
/** Peripheral GPT3 base address */
#define GPT3_BASE (0x48080000u)
/** Peripheral GPT3 base pointer */
#define GPT3 ((GPT_Type *) GPT3_BASE)
/** Array initializer of GPT peripheral base addresses */
#define GPT_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        GPT0_BASE, GPT1_BASE, GPT2_BASE, GPT3_BASE                                                                                 \
    }
/** Array initializer of GPT peripheral base pointers */
#define GPT_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        GPT0, GPT1, GPT2, GPT3                                                                                                     \
    }
/** Interrupt vectors for the GPT peripheral type */
#define GPT_IRQS                                                                                                                   \
    {                                                                                                                              \
        GPT0_IRQn, GPT1_IRQn, GPT2_IRQn, GPT3_IRQn                                                                                 \
    }

/*!
 * @}
 */ /* end of group GPT_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- I2C Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Peripheral_Access_Layer I2C Peripheral Access Layer
 * @{
 */

/** I2C - Register Layout Typedef */
typedef struct
{
    __IO uint32_t IC_CON;                /**< , offset: 0x0 */
    __IO uint32_t IC_TAR;                /**< , offset: 0x4 */
    __IO uint32_t IC_SAR;                /**< , offset: 0x8 */
    __IO uint32_t IC_HS_MADDR;           /**< , offset: 0xC */
    __IO uint32_t IC_DATA_CMD;           /**< , offset: 0x10 */
    __IO uint32_t IC_SS_SCL_HCNT;        /**< , offset: 0x14 */
    __IO uint32_t IC_SS_SCL_LCNT;        /**< , offset: 0x18 */
    __IO uint32_t IC_FS_SCL_HCNT;        /**< , offset: 0x1C */
    __IO uint32_t IC_FS_SCL_LCNT;        /**< , offset: 0x20 */
    __IO uint32_t IC_HS_SCL_HCNT;        /**< , offset: 0x24 */
    __IO uint32_t IC_HS_SCL_LCNT;        /**< , offset: 0x28 */
    __I uint32_t IC_INTR_STAT;           /**< , offset: 0x2C */
    __IO uint32_t IC_INTR_MASK;          /**< , offset: 0x30 */
    __I uint32_t IC_RAW_INTR_STAT;       /**< , offset: 0x34 */
    __IO uint32_t IC_RX_TL;              /**< , offset: 0x38 */
    __IO uint32_t IC_TX_TL;              /**< , offset: 0x3C */
    __I uint32_t IC_CLR_INTR;            /**< , offset: 0x40 */
    __I uint32_t IC_CLR_RX_UNDER;        /**< , offset: 0x44 */
    __I uint32_t IC_CLR_RX_OVER;         /**< , offset: 0x48 */
    __I uint32_t IC_CLR_TX_OVER;         /**< , offset: 0x4C */
    __I uint32_t IC_CLR_RD_REQ;          /**< , offset: 0x50 */
    __I uint32_t IC_CLR_TX_ABRT;         /**< , offset: 0x54 */
    __I uint32_t IC_CLR_RX_DONE;         /**< , offset: 0x58 */
    __I uint32_t IC_CLR_ACTIVITY;        /**< , offset: 0x5C */
    __I uint32_t IC_CLR_STOP_DET;        /**< , offset: 0x60 */
    __I uint32_t IC_CLR_START_DET;       /**< , offset: 0x64 */
    __I uint32_t IC_CLR_GEN_CALL;        /**< , offset: 0x68 */
    __IO uint32_t IC_ENABLE;             /**< , offset: 0x6C */
    __I uint32_t IC_STATUS;              /**< , offset: 0x70 */
    __I uint32_t IC_TXFLR;               /**< , offset: 0x74 */
    __I uint32_t IC_RXFLR;               /**< , offset: 0x78 */
    __IO uint32_t IC_SDA_HOLD;           /**< , offset: 0x7C */
    __I uint32_t IC_TX_ABRT_SOURCE;      /**< , offset: 0x80 */
    __IO uint32_t IC_SLV_DATA_NACK_ONLY; /**< , offset: 0x84 */
    __IO uint32_t IC_DMA_CR;             /**< , offset: 0x88 */
    __IO uint32_t IC_DMA_TDLR;           /**< , offset: 0x8C */
    __IO uint32_t IC_DMA_RDLR;           /**< , offset: 0x90 */
    __IO uint32_t IC_SDA_SETUP;          /**< , offset: 0x94 */
    __IO uint32_t IC_ACK_GENERAL_CALL;   /**< , offset: 0x98 */
    __I uint32_t IC_ENABLE_STATUS;       /**< , offset: 0x9C */
    __IO uint32_t IC_FS_SPKLEN;          /**< , offset: 0xA0 */
    __IO uint32_t IC_HS_SPKLEN;          /**< , offset: 0xA4 */
    uint8_t RESERVED_0[76];
    __I uint32_t IC_COMP_PARAM_1; /**< , offset: 0xF4 */
    __I uint32_t IC_COMP_VERSION; /**< , offset: 0xF8 */
    __I uint32_t IC_COMP_TYPE;    /**< , offset: 0xFC */
} I2C_Type;

/* ----------------------------------------------------------------------------
   -- I2C Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Masks I2C Register Masks
 * @{
 */

/*! @name IC_CON -  */
/*! @{ */
#define I2C_IC_CON_MASTER_MODE_MASK (0x1U)
#define I2C_IC_CON_MASTER_MODE_SHIFT (0U)
/*! MASTER_MODE
 *  0b0..master disabled
 *  0b1..master enabled
 */
#define I2C_IC_CON_MASTER_MODE(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_CON_MASTER_MODE_SHIFT)) & I2C_IC_CON_MASTER_MODE_MASK)
#define I2C_IC_CON_SPEED_MASK (0x6U)
#define I2C_IC_CON_SPEED_SHIFT (1U)
/*! SPEED
 *  0b01..standard mode (100 kbit/s)
 *  0b10..fast mode (400 kbit/s)
 *  0b11..high speed mode (3.4 Mbit/s)
 */
#define I2C_IC_CON_SPEED(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_CON_SPEED_SHIFT)) & I2C_IC_CON_SPEED_MASK)
#define I2C_IC_CON_IC_10BITADDR_SLAVE_MASK (0x8U)
#define I2C_IC_CON_IC_10BITADDR_SLAVE_SHIFT (3U)
/*! IC_10BITADDR_SLAVE
 *  0b0..7-bit addressing. The DW_apb_i2c ignores transactions that involve 10-bit addressing; for 7-bit
 *       addressing, only the lower 7 bits of the IC_SAR register are compared.
 *  0b1..10-bit addressing. The DW_apb_i2c responds to only 10-bit addressing transfers that match the full 10 bits of the IC_SAR
 * register.
 */
#define I2C_IC_CON_IC_10BITADDR_SLAVE(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CON_IC_10BITADDR_SLAVE_SHIFT)) & I2C_IC_CON_IC_10BITADDR_SLAVE_MASK)
#define I2C_IC_CON_IC_10BITADDR_MASTER_RD_ONLY_MASK (0x10U)
#define I2C_IC_CON_IC_10BITADDR_MASTER_RD_ONLY_SHIFT (4U)
/*! IC_10BITADDR_MASTER_rd_only
 *  0b0..7-bit addressing
 *  0b1..10-bit addressing
 */
#define I2C_IC_CON_IC_10BITADDR_MASTER_RD_ONLY(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CON_IC_10BITADDR_MASTER_RD_ONLY_SHIFT)) & I2C_IC_CON_IC_10BITADDR_MASTER_RD_ONLY_MASK)
#define I2C_IC_CON_IC_RESTART_EN_MASK (0x20U)
#define I2C_IC_CON_IC_RESTART_EN_SHIFT (5U)
/*! IC_RESTART_EN
 *  0b0..disable
 *  0b1..enable
 */
#define I2C_IC_CON_IC_RESTART_EN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CON_IC_RESTART_EN_SHIFT)) & I2C_IC_CON_IC_RESTART_EN_MASK)
#define I2C_IC_CON_IC_SLAVE_DISABLE_MASK (0x40U)
#define I2C_IC_CON_IC_SLAVE_DISABLE_SHIFT (6U)
/*! IC_SLAVE_DISABLE
 *  0b0..slave is enabled
 *  0b1..slave is disabled
 */
#define I2C_IC_CON_IC_SLAVE_DISABLE(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CON_IC_SLAVE_DISABLE_SHIFT)) & I2C_IC_CON_IC_SLAVE_DISABLE_MASK)
/*! @} */

/*! @name IC_TAR -  */
/*! @{ */
#define I2C_IC_TAR_IC_TAR_MASK (0x3FFU)
#define I2C_IC_TAR_IC_TAR_SHIFT (0U)
#define I2C_IC_TAR_IC_TAR(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_TAR_IC_TAR_SHIFT)) & I2C_IC_TAR_IC_TAR_MASK)
#define I2C_IC_TAR_GC_OR_START_MASK (0x400U)
#define I2C_IC_TAR_GC_OR_START_SHIFT (10U)
/*! GC_OR_START
 *  0b0..General Call Address after issuing a General Call, only writes may be performed. Attempting to issue a
 *       read command results in setting bit 6 (TX_ABRT) of the IC_RAW_INTR_STAT register. The DW_apb_i2c remains in
 *       General Call mode until the SPECIAL bit value (bit 11) is cleared.
 *  0b1..START BYTE
 */
#define I2C_IC_TAR_GC_OR_START(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_TAR_GC_OR_START_SHIFT)) & I2C_IC_TAR_GC_OR_START_MASK)
#define I2C_IC_TAR_SPECIAL_MASK (0x800U)
#define I2C_IC_TAR_SPECIAL_SHIFT (11U)
/*! SPECIAL
 *  0b0..ignore bit 10 GC_OR_START and use IC_TAR normally
 *  0b1..perform special I2C command as specified in GC_OR_START bit
 */
#define I2C_IC_TAR_SPECIAL(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_TAR_SPECIAL_SHIFT)) & I2C_IC_TAR_SPECIAL_MASK)
#define I2C_IC_TAR_IC_10BITADDR_MASTER_MASK (0x1000U)
#define I2C_IC_TAR_IC_10BITADDR_MASTER_SHIFT (12U)
/*! IC_10BITADDR_MASTER
 *  0b0..7-bit addressing
 *  0b1..10-bit addressing
 */
#define I2C_IC_TAR_IC_10BITADDR_MASTER(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TAR_IC_10BITADDR_MASTER_SHIFT)) & I2C_IC_TAR_IC_10BITADDR_MASTER_MASK)
/*! @} */

/*! @name IC_SAR -  */
/*! @{ */
#define I2C_IC_SAR_IC_SAR_MASK (0x3FFU)
#define I2C_IC_SAR_IC_SAR_SHIFT (0U)
#define I2C_IC_SAR_IC_SAR(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_SAR_IC_SAR_SHIFT)) & I2C_IC_SAR_IC_SAR_MASK)
/*! @} */

/*! @name IC_HS_MADDR -  */
/*! @{ */
#define I2C_IC_HS_MADDR_IC_HS_MAR_MASK (0x7U)
#define I2C_IC_HS_MADDR_IC_HS_MAR_SHIFT (0U)
#define I2C_IC_HS_MADDR_IC_HS_MAR(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_HS_MADDR_IC_HS_MAR_SHIFT)) & I2C_IC_HS_MADDR_IC_HS_MAR_MASK)
/*! @} */

/*! @name IC_DATA_CMD -  */
/*! @{ */
#define I2C_IC_DATA_CMD_DAT_MASK (0xFFU)
#define I2C_IC_DATA_CMD_DAT_SHIFT (0U)
#define I2C_IC_DATA_CMD_DAT(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_DATA_CMD_DAT_SHIFT)) & I2C_IC_DATA_CMD_DAT_MASK)
#define I2C_IC_DATA_CMD_CMD_MASK (0x100U)
#define I2C_IC_DATA_CMD_CMD_SHIFT (8U)
/*! CMD
 *  0b0..Write
 *  0b1..Read
 */
#define I2C_IC_DATA_CMD_CMD(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_DATA_CMD_CMD_SHIFT)) & I2C_IC_DATA_CMD_CMD_MASK)
/*! @} */

/*! @name IC_SS_SCL_HCNT -  */
/*! @{ */
#define I2C_IC_SS_SCL_HCNT_IC_SS_SCL_HCNT_MASK (0xFFFFU)
#define I2C_IC_SS_SCL_HCNT_IC_SS_SCL_HCNT_SHIFT (0U)
#define I2C_IC_SS_SCL_HCNT_IC_SS_SCL_HCNT(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_SS_SCL_HCNT_IC_SS_SCL_HCNT_SHIFT)) & I2C_IC_SS_SCL_HCNT_IC_SS_SCL_HCNT_MASK)
/*! @} */

/*! @name IC_SS_SCL_LCNT -  */
/*! @{ */
#define I2C_IC_SS_SCL_LCNT_IC_SS_SCL_LCNT_MASK (0xFFFFU)
#define I2C_IC_SS_SCL_LCNT_IC_SS_SCL_LCNT_SHIFT (0U)
#define I2C_IC_SS_SCL_LCNT_IC_SS_SCL_LCNT(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_SS_SCL_LCNT_IC_SS_SCL_LCNT_SHIFT)) & I2C_IC_SS_SCL_LCNT_IC_SS_SCL_LCNT_MASK)
/*! @} */

/*! @name IC_FS_SCL_HCNT -  */
/*! @{ */
#define I2C_IC_FS_SCL_HCNT_IC_FS_SCL_HCNT_MASK (0xFFFFU)
#define I2C_IC_FS_SCL_HCNT_IC_FS_SCL_HCNT_SHIFT (0U)
#define I2C_IC_FS_SCL_HCNT_IC_FS_SCL_HCNT(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_FS_SCL_HCNT_IC_FS_SCL_HCNT_SHIFT)) & I2C_IC_FS_SCL_HCNT_IC_FS_SCL_HCNT_MASK)
/*! @} */

/*! @name IC_FS_SCL_LCNT -  */
/*! @{ */
#define I2C_IC_FS_SCL_LCNT_IC_FS_SCL_LCNT_MASK (0xFFFFU)
#define I2C_IC_FS_SCL_LCNT_IC_FS_SCL_LCNT_SHIFT (0U)
#define I2C_IC_FS_SCL_LCNT_IC_FS_SCL_LCNT(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_FS_SCL_LCNT_IC_FS_SCL_LCNT_SHIFT)) & I2C_IC_FS_SCL_LCNT_IC_FS_SCL_LCNT_MASK)
/*! @} */

/*! @name IC_HS_SCL_HCNT -  */
/*! @{ */
#define I2C_IC_HS_SCL_HCNT_IC_HS_SCL_HCNT_MASK (0xFFFFU)
#define I2C_IC_HS_SCL_HCNT_IC_HS_SCL_HCNT_SHIFT (0U)
#define I2C_IC_HS_SCL_HCNT_IC_HS_SCL_HCNT(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_HS_SCL_HCNT_IC_HS_SCL_HCNT_SHIFT)) & I2C_IC_HS_SCL_HCNT_IC_HS_SCL_HCNT_MASK)
/*! @} */

/*! @name IC_HS_SCL_LCNT -  */
/*! @{ */
#define I2C_IC_HS_SCL_LCNT_IC_HS_SCL_LCNT_MASK (0xFFFFU)
#define I2C_IC_HS_SCL_LCNT_IC_HS_SCL_LCNT_SHIFT (0U)
#define I2C_IC_HS_SCL_LCNT_IC_HS_SCL_LCNT(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_HS_SCL_LCNT_IC_HS_SCL_LCNT_SHIFT)) & I2C_IC_HS_SCL_LCNT_IC_HS_SCL_LCNT_MASK)
/*! @} */

/*! @name IC_INTR_STAT -  */
/*! @{ */
#define I2C_IC_INTR_STAT_R_RX_UNDER_MASK (0x1U)
#define I2C_IC_INTR_STAT_R_RX_UNDER_SHIFT (0U)
#define I2C_IC_INTR_STAT_R_RX_UNDER(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_RX_UNDER_SHIFT)) & I2C_IC_INTR_STAT_R_RX_UNDER_MASK)
#define I2C_IC_INTR_STAT_R_RX_OVER_MASK (0x2U)
#define I2C_IC_INTR_STAT_R_RX_OVER_SHIFT (1U)
#define I2C_IC_INTR_STAT_R_RX_OVER(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_RX_OVER_SHIFT)) & I2C_IC_INTR_STAT_R_RX_OVER_MASK)
#define I2C_IC_INTR_STAT_R_RX_FULL_MASK (0x4U)
#define I2C_IC_INTR_STAT_R_RX_FULL_SHIFT (2U)
#define I2C_IC_INTR_STAT_R_RX_FULL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_RX_FULL_SHIFT)) & I2C_IC_INTR_STAT_R_RX_FULL_MASK)
#define I2C_IC_INTR_STAT_R_TX_OVER_MASK (0x8U)
#define I2C_IC_INTR_STAT_R_TX_OVER_SHIFT (3U)
#define I2C_IC_INTR_STAT_R_TX_OVER(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_TX_OVER_SHIFT)) & I2C_IC_INTR_STAT_R_TX_OVER_MASK)
#define I2C_IC_INTR_STAT_R_TX_EMPTY_MASK (0x10U)
#define I2C_IC_INTR_STAT_R_TX_EMPTY_SHIFT (4U)
#define I2C_IC_INTR_STAT_R_TX_EMPTY(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_TX_EMPTY_SHIFT)) & I2C_IC_INTR_STAT_R_TX_EMPTY_MASK)
#define I2C_IC_INTR_STAT_R_RD_REQ_MASK (0x20U)
#define I2C_IC_INTR_STAT_R_RD_REQ_SHIFT (5U)
#define I2C_IC_INTR_STAT_R_RD_REQ(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_RD_REQ_SHIFT)) & I2C_IC_INTR_STAT_R_RD_REQ_MASK)
#define I2C_IC_INTR_STAT_R_TX_ABRT_MASK (0x40U)
#define I2C_IC_INTR_STAT_R_TX_ABRT_SHIFT (6U)
#define I2C_IC_INTR_STAT_R_TX_ABRT(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_TX_ABRT_SHIFT)) & I2C_IC_INTR_STAT_R_TX_ABRT_MASK)
#define I2C_IC_INTR_STAT_R_RX_DONE_MASK (0x80U)
#define I2C_IC_INTR_STAT_R_RX_DONE_SHIFT (7U)
#define I2C_IC_INTR_STAT_R_RX_DONE(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_RX_DONE_SHIFT)) & I2C_IC_INTR_STAT_R_RX_DONE_MASK)
#define I2C_IC_INTR_STAT_R_ACTIVITY_MASK (0x100U)
#define I2C_IC_INTR_STAT_R_ACTIVITY_SHIFT (8U)
#define I2C_IC_INTR_STAT_R_ACTIVITY(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_ACTIVITY_SHIFT)) & I2C_IC_INTR_STAT_R_ACTIVITY_MASK)
#define I2C_IC_INTR_STAT_R_STOP_DET_MASK (0x200U)
#define I2C_IC_INTR_STAT_R_STOP_DET_SHIFT (9U)
#define I2C_IC_INTR_STAT_R_STOP_DET(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_STOP_DET_SHIFT)) & I2C_IC_INTR_STAT_R_STOP_DET_MASK)
#define I2C_IC_INTR_STAT_R_START_DET_MASK (0x400U)
#define I2C_IC_INTR_STAT_R_START_DET_SHIFT (10U)
#define I2C_IC_INTR_STAT_R_START_DET(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_START_DET_SHIFT)) & I2C_IC_INTR_STAT_R_START_DET_MASK)
#define I2C_IC_INTR_STAT_R_GEN_CALL_MASK (0x800U)
#define I2C_IC_INTR_STAT_R_GEN_CALL_SHIFT (11U)
#define I2C_IC_INTR_STAT_R_GEN_CALL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_STAT_R_GEN_CALL_SHIFT)) & I2C_IC_INTR_STAT_R_GEN_CALL_MASK)
/*! @} */

/*! @name IC_INTR_MASK -  */
/*! @{ */
#define I2C_IC_INTR_MASK_M_RX_UNDER_MASK (0x1U)
#define I2C_IC_INTR_MASK_M_RX_UNDER_SHIFT (0U)
#define I2C_IC_INTR_MASK_M_RX_UNDER(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_RX_UNDER_SHIFT)) & I2C_IC_INTR_MASK_M_RX_UNDER_MASK)
#define I2C_IC_INTR_MASK_M_RX_OVER_MASK (0x2U)
#define I2C_IC_INTR_MASK_M_RX_OVER_SHIFT (1U)
#define I2C_IC_INTR_MASK_M_RX_OVER(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_RX_OVER_SHIFT)) & I2C_IC_INTR_MASK_M_RX_OVER_MASK)
#define I2C_IC_INTR_MASK_M_RX_FULL_MASK (0x4U)
#define I2C_IC_INTR_MASK_M_RX_FULL_SHIFT (2U)
#define I2C_IC_INTR_MASK_M_RX_FULL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_RX_FULL_SHIFT)) & I2C_IC_INTR_MASK_M_RX_FULL_MASK)
#define I2C_IC_INTR_MASK_M_TX_OVER_MASK (0x8U)
#define I2C_IC_INTR_MASK_M_TX_OVER_SHIFT (3U)
#define I2C_IC_INTR_MASK_M_TX_OVER(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_TX_OVER_SHIFT)) & I2C_IC_INTR_MASK_M_TX_OVER_MASK)
#define I2C_IC_INTR_MASK_M_TX_EMPTY_MASK (0x10U)
#define I2C_IC_INTR_MASK_M_TX_EMPTY_SHIFT (4U)
#define I2C_IC_INTR_MASK_M_TX_EMPTY(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_TX_EMPTY_SHIFT)) & I2C_IC_INTR_MASK_M_TX_EMPTY_MASK)
#define I2C_IC_INTR_MASK_M_RD_REQ_MASK (0x20U)
#define I2C_IC_INTR_MASK_M_RD_REQ_SHIFT (5U)
#define I2C_IC_INTR_MASK_M_RD_REQ(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_RD_REQ_SHIFT)) & I2C_IC_INTR_MASK_M_RD_REQ_MASK)
#define I2C_IC_INTR_MASK_M_TX_ABRT_MASK (0x40U)
#define I2C_IC_INTR_MASK_M_TX_ABRT_SHIFT (6U)
#define I2C_IC_INTR_MASK_M_TX_ABRT(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_TX_ABRT_SHIFT)) & I2C_IC_INTR_MASK_M_TX_ABRT_MASK)
#define I2C_IC_INTR_MASK_M_RX_DONE_MASK (0x80U)
#define I2C_IC_INTR_MASK_M_RX_DONE_SHIFT (7U)
#define I2C_IC_INTR_MASK_M_RX_DONE(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_RX_DONE_SHIFT)) & I2C_IC_INTR_MASK_M_RX_DONE_MASK)
#define I2C_IC_INTR_MASK_M_ACTIVITY_MASK (0x100U)
#define I2C_IC_INTR_MASK_M_ACTIVITY_SHIFT (8U)
#define I2C_IC_INTR_MASK_M_ACTIVITY(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_ACTIVITY_SHIFT)) & I2C_IC_INTR_MASK_M_ACTIVITY_MASK)
#define I2C_IC_INTR_MASK_M_STOP_DET_MASK (0x200U)
#define I2C_IC_INTR_MASK_M_STOP_DET_SHIFT (9U)
#define I2C_IC_INTR_MASK_M_STOP_DET(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_STOP_DET_SHIFT)) & I2C_IC_INTR_MASK_M_STOP_DET_MASK)
#define I2C_IC_INTR_MASK_M_START_DET_MASK (0x400U)
#define I2C_IC_INTR_MASK_M_START_DET_SHIFT (10U)
#define I2C_IC_INTR_MASK_M_START_DET(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_START_DET_SHIFT)) & I2C_IC_INTR_MASK_M_START_DET_MASK)
#define I2C_IC_INTR_MASK_M_GEN_CALL_MASK (0x800U)
#define I2C_IC_INTR_MASK_M_GEN_CALL_SHIFT (11U)
#define I2C_IC_INTR_MASK_M_GEN_CALL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_INTR_MASK_M_GEN_CALL_SHIFT)) & I2C_IC_INTR_MASK_M_GEN_CALL_MASK)
/*! @} */

/*! @name IC_RAW_INTR_STAT -  */
/*! @{ */
#define I2C_IC_RAW_INTR_STAT_RX_UNDER_MASK (0x1U)
#define I2C_IC_RAW_INTR_STAT_RX_UNDER_SHIFT (0U)
#define I2C_IC_RAW_INTR_STAT_RX_UNDER(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_RX_UNDER_SHIFT)) & I2C_IC_RAW_INTR_STAT_RX_UNDER_MASK)
#define I2C_IC_RAW_INTR_STAT_RX_OVER_MASK (0x2U)
#define I2C_IC_RAW_INTR_STAT_RX_OVER_SHIFT (1U)
#define I2C_IC_RAW_INTR_STAT_RX_OVER(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_RX_OVER_SHIFT)) & I2C_IC_RAW_INTR_STAT_RX_OVER_MASK)
#define I2C_IC_RAW_INTR_STAT_RX_FULL_MASK (0x4U)
#define I2C_IC_RAW_INTR_STAT_RX_FULL_SHIFT (2U)
#define I2C_IC_RAW_INTR_STAT_RX_FULL(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_RX_FULL_SHIFT)) & I2C_IC_RAW_INTR_STAT_RX_FULL_MASK)
#define I2C_IC_RAW_INTR_STAT_TX_OVER_MASK (0x8U)
#define I2C_IC_RAW_INTR_STAT_TX_OVER_SHIFT (3U)
#define I2C_IC_RAW_INTR_STAT_TX_OVER(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_TX_OVER_SHIFT)) & I2C_IC_RAW_INTR_STAT_TX_OVER_MASK)
#define I2C_IC_RAW_INTR_STAT_TX_EMPTY_MASK (0x10U)
#define I2C_IC_RAW_INTR_STAT_TX_EMPTY_SHIFT (4U)
#define I2C_IC_RAW_INTR_STAT_TX_EMPTY(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_TX_EMPTY_SHIFT)) & I2C_IC_RAW_INTR_STAT_TX_EMPTY_MASK)
#define I2C_IC_RAW_INTR_STAT_RD_REQ_MASK (0x20U)
#define I2C_IC_RAW_INTR_STAT_RD_REQ_SHIFT (5U)
#define I2C_IC_RAW_INTR_STAT_RD_REQ(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_RD_REQ_SHIFT)) & I2C_IC_RAW_INTR_STAT_RD_REQ_MASK)
#define I2C_IC_RAW_INTR_STAT_TX_ABRT_MASK (0x40U)
#define I2C_IC_RAW_INTR_STAT_TX_ABRT_SHIFT (6U)
#define I2C_IC_RAW_INTR_STAT_TX_ABRT(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_TX_ABRT_SHIFT)) & I2C_IC_RAW_INTR_STAT_TX_ABRT_MASK)
#define I2C_IC_RAW_INTR_STAT_RX_DONE_MASK (0x80U)
#define I2C_IC_RAW_INTR_STAT_RX_DONE_SHIFT (7U)
#define I2C_IC_RAW_INTR_STAT_RX_DONE(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_RX_DONE_SHIFT)) & I2C_IC_RAW_INTR_STAT_RX_DONE_MASK)
#define I2C_IC_RAW_INTR_STAT_ACTIVITY_MASK (0x100U)
#define I2C_IC_RAW_INTR_STAT_ACTIVITY_SHIFT (8U)
#define I2C_IC_RAW_INTR_STAT_ACTIVITY(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_ACTIVITY_SHIFT)) & I2C_IC_RAW_INTR_STAT_ACTIVITY_MASK)
#define I2C_IC_RAW_INTR_STAT_STOP_DET_MASK (0x200U)
#define I2C_IC_RAW_INTR_STAT_STOP_DET_SHIFT (9U)
#define I2C_IC_RAW_INTR_STAT_STOP_DET(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_STOP_DET_SHIFT)) & I2C_IC_RAW_INTR_STAT_STOP_DET_MASK)
#define I2C_IC_RAW_INTR_STAT_START_DET_MASK (0x400U)
#define I2C_IC_RAW_INTR_STAT_START_DET_SHIFT (10U)
#define I2C_IC_RAW_INTR_STAT_START_DET(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_START_DET_SHIFT)) & I2C_IC_RAW_INTR_STAT_START_DET_MASK)
#define I2C_IC_RAW_INTR_STAT_GEN_CALL_MASK (0x800U)
#define I2C_IC_RAW_INTR_STAT_GEN_CALL_SHIFT (11U)
#define I2C_IC_RAW_INTR_STAT_GEN_CALL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_RAW_INTR_STAT_GEN_CALL_SHIFT)) & I2C_IC_RAW_INTR_STAT_GEN_CALL_MASK)
/*! @} */

/*! @name IC_RX_TL -  */
/*! @{ */
#define I2C_IC_RX_TL_RX_TL_MASK (0xFFU)
#define I2C_IC_RX_TL_RX_TL_SHIFT (0U)
#define I2C_IC_RX_TL_RX_TL(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_RX_TL_RX_TL_SHIFT)) & I2C_IC_RX_TL_RX_TL_MASK)
/*! @} */

/*! @name IC_TX_TL -  */
/*! @{ */
#define I2C_IC_TX_TL_TX_TL_MASK (0xFFU)
#define I2C_IC_TX_TL_TX_TL_SHIFT (0U)
#define I2C_IC_TX_TL_TX_TL(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_TL_TX_TL_SHIFT)) & I2C_IC_TX_TL_TX_TL_MASK)
/*! @} */

/*! @name IC_CLR_INTR -  */
/*! @{ */
#define I2C_IC_CLR_INTR_CLR_INTR_MASK (0x1U)
#define I2C_IC_CLR_INTR_CLR_INTR_SHIFT (0U)
#define I2C_IC_CLR_INTR_CLR_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_INTR_CLR_INTR_SHIFT)) & I2C_IC_CLR_INTR_CLR_INTR_MASK)
/*! @} */

/*! @name IC_CLR_RX_UNDER -  */
/*! @{ */
#define I2C_IC_CLR_RX_UNDER_CLR_RX_UNDER_MASK (0x1U)
#define I2C_IC_CLR_RX_UNDER_CLR_RX_UNDER_SHIFT (0U)
#define I2C_IC_CLR_RX_UNDER_CLR_RX_UNDER(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_RX_UNDER_CLR_RX_UNDER_SHIFT)) & I2C_IC_CLR_RX_UNDER_CLR_RX_UNDER_MASK)
/*! @} */

/*! @name IC_CLR_RX_OVER -  */
/*! @{ */
#define I2C_IC_CLR_RX_OVER_CLR_RX_OVER_MASK (0x1U)
#define I2C_IC_CLR_RX_OVER_CLR_RX_OVER_SHIFT (0U)
#define I2C_IC_CLR_RX_OVER_CLR_RX_OVER(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_RX_OVER_CLR_RX_OVER_SHIFT)) & I2C_IC_CLR_RX_OVER_CLR_RX_OVER_MASK)
/*! @} */

/*! @name IC_CLR_TX_OVER -  */
/*! @{ */
#define I2C_IC_CLR_TX_OVER_CLR_TX_OVER_MASK (0x1U)
#define I2C_IC_CLR_TX_OVER_CLR_TX_OVER_SHIFT (0U)
#define I2C_IC_CLR_TX_OVER_CLR_TX_OVER(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_TX_OVER_CLR_TX_OVER_SHIFT)) & I2C_IC_CLR_TX_OVER_CLR_TX_OVER_MASK)
/*! @} */

/*! @name IC_CLR_RD_REQ -  */
/*! @{ */
#define I2C_IC_CLR_RD_REQ_CLR_RD_REQ_MASK (0x1U)
#define I2C_IC_CLR_RD_REQ_CLR_RD_REQ_SHIFT (0U)
#define I2C_IC_CLR_RD_REQ_CLR_RD_REQ(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_RD_REQ_CLR_RD_REQ_SHIFT)) & I2C_IC_CLR_RD_REQ_CLR_RD_REQ_MASK)
/*! @} */

/*! @name IC_CLR_TX_ABRT -  */
/*! @{ */
#define I2C_IC_CLR_TX_ABRT_CLR_TX_ABRT_MASK (0x1U)
#define I2C_IC_CLR_TX_ABRT_CLR_TX_ABRT_SHIFT (0U)
#define I2C_IC_CLR_TX_ABRT_CLR_TX_ABRT(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_TX_ABRT_CLR_TX_ABRT_SHIFT)) & I2C_IC_CLR_TX_ABRT_CLR_TX_ABRT_MASK)
/*! @} */

/*! @name IC_CLR_RX_DONE -  */
/*! @{ */
#define I2C_IC_CLR_RX_DONE_CLR_RX_DONE_MASK (0x1U)
#define I2C_IC_CLR_RX_DONE_CLR_RX_DONE_SHIFT (0U)
#define I2C_IC_CLR_RX_DONE_CLR_RX_DONE(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_RX_DONE_CLR_RX_DONE_SHIFT)) & I2C_IC_CLR_RX_DONE_CLR_RX_DONE_MASK)
/*! @} */

/*! @name IC_CLR_ACTIVITY -  */
/*! @{ */
#define I2C_IC_CLR_ACTIVITY_CLR_ACTIVITY_MASK (0x1U)
#define I2C_IC_CLR_ACTIVITY_CLR_ACTIVITY_SHIFT (0U)
#define I2C_IC_CLR_ACTIVITY_CLR_ACTIVITY(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_ACTIVITY_CLR_ACTIVITY_SHIFT)) & I2C_IC_CLR_ACTIVITY_CLR_ACTIVITY_MASK)
/*! @} */

/*! @name IC_CLR_STOP_DET -  */
/*! @{ */
#define I2C_IC_CLR_STOP_DET_CLR_STOP_DET_MASK (0x1U)
#define I2C_IC_CLR_STOP_DET_CLR_STOP_DET_SHIFT (0U)
#define I2C_IC_CLR_STOP_DET_CLR_STOP_DET(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_STOP_DET_CLR_STOP_DET_SHIFT)) & I2C_IC_CLR_STOP_DET_CLR_STOP_DET_MASK)
/*! @} */

/*! @name IC_CLR_START_DET -  */
/*! @{ */
#define I2C_IC_CLR_START_DET_CLR_START_DET_MASK (0x1U)
#define I2C_IC_CLR_START_DET_CLR_START_DET_SHIFT (0U)
#define I2C_IC_CLR_START_DET_CLR_START_DET(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_START_DET_CLR_START_DET_SHIFT)) & I2C_IC_CLR_START_DET_CLR_START_DET_MASK)
/*! @} */

/*! @name IC_CLR_GEN_CALL -  */
/*! @{ */
#define I2C_IC_CLR_GEN_CALL_CLR_GEN_CALL_MASK (0x1U)
#define I2C_IC_CLR_GEN_CALL_CLR_GEN_CALL_SHIFT (0U)
#define I2C_IC_CLR_GEN_CALL_CLR_GEN_CALL(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_CLR_GEN_CALL_CLR_GEN_CALL_SHIFT)) & I2C_IC_CLR_GEN_CALL_CLR_GEN_CALL_MASK)
/*! @} */

/*! @name IC_ENABLE -  */
/*! @{ */
#define I2C_IC_ENABLE_ENABLE_MASK (0x1U)
#define I2C_IC_ENABLE_ENABLE_SHIFT (0U)
/*! ENABLE
 *  0b0..Disables DW_apb_i2c (TX and RX FIFOs are held in an erased state)
 *  0b1..Enables DW_apb_i2c Software can disable DW_apb_i2c while it is active. However, it is important that care
 *       be taken to ensure that DW_apb_i2c is disabled properly. When DW_apb_i2c is disabled, the following
 *       occurs:
 */
#define I2C_IC_ENABLE_ENABLE(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_ENABLE_ENABLE_SHIFT)) & I2C_IC_ENABLE_ENABLE_MASK)
/*! @} */

/*! @name IC_STATUS -  */
/*! @{ */
#define I2C_IC_STATUS_ACTIVITY_MASK (0x1U)
#define I2C_IC_STATUS_ACTIVITY_SHIFT (0U)
#define I2C_IC_STATUS_ACTIVITY(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_STATUS_ACTIVITY_SHIFT)) & I2C_IC_STATUS_ACTIVITY_MASK)
#define I2C_IC_STATUS_TFNF_MASK (0x2U)
#define I2C_IC_STATUS_TFNF_SHIFT (1U)
/*! TFNF
 *  0b0..Transmit FIFO is full
 *  0b1..Transmit FIFO is not full
 */
#define I2C_IC_STATUS_TFNF(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_STATUS_TFNF_SHIFT)) & I2C_IC_STATUS_TFNF_MASK)
#define I2C_IC_STATUS_TFE_MASK (0x4U)
#define I2C_IC_STATUS_TFE_SHIFT (2U)
/*! TFE
 *  0b0..Transmit FIFO is not empty
 *  0b1..Transmit FIFO is empty
 */
#define I2C_IC_STATUS_TFE(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_STATUS_TFE_SHIFT)) & I2C_IC_STATUS_TFE_MASK)
#define I2C_IC_STATUS_RFNE_MASK (0x8U)
#define I2C_IC_STATUS_RFNE_SHIFT (3U)
/*! RFNE
 *  0b0..Receive FIFO is empty
 *  0b1..Receive FIFO is not empty
 */
#define I2C_IC_STATUS_RFNE(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_STATUS_RFNE_SHIFT)) & I2C_IC_STATUS_RFNE_MASK)
#define I2C_IC_STATUS_RFF_MASK (0x10U)
#define I2C_IC_STATUS_RFF_SHIFT (4U)
/*! RFF
 *  0b0..Receive FIFO is not full
 *  0b1..Receive FIFO is full
 */
#define I2C_IC_STATUS_RFF(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_STATUS_RFF_SHIFT)) & I2C_IC_STATUS_RFF_MASK)
#define I2C_IC_STATUS_MST_ACTIVITY_MASK (0x20U)
#define I2C_IC_STATUS_MST_ACTIVITY_SHIFT (5U)
/*! MST_ACTIVITY
 *  0b0..Master FSM is in IDLE state so the Master part of DW_apb_i2c is not Active
 *  0b1..Master FSM is not in IDLE state so the Master part of DW_apb_i2c is Active Note IC_STATUS[0]-that is,
 *       ACTIVITY bit-is the OR of SLV_ACTIVITY and MST_ACTIVITY bits.
 */
#define I2C_IC_STATUS_MST_ACTIVITY(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_STATUS_MST_ACTIVITY_SHIFT)) & I2C_IC_STATUS_MST_ACTIVITY_MASK)
#define I2C_IC_STATUS_SLV_ACTIVITY_MASK (0x40U)
#define I2C_IC_STATUS_SLV_ACTIVITY_SHIFT (6U)
/*! SLV_ACTIVITY
 *  0b0..Slave FSM is in IDLE state so the Slave part of DW_apb_i2c is not Active
 *  0b1..Slave FSM is not in IDLE state so the Slave part of DW_apb_i2c is Active
 */
#define I2C_IC_STATUS_SLV_ACTIVITY(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_STATUS_SLV_ACTIVITY_SHIFT)) & I2C_IC_STATUS_SLV_ACTIVITY_MASK)
/*! @} */

/*! @name IC_TXFLR -  */
/*! @{ */
#define I2C_IC_TXFLR_TXFLR_MASK (0x1FU)
#define I2C_IC_TXFLR_TXFLR_SHIFT (0U)
#define I2C_IC_TXFLR_TXFLR(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_TXFLR_TXFLR_SHIFT)) & I2C_IC_TXFLR_TXFLR_MASK)
/*! @} */

/*! @name IC_RXFLR -  */
/*! @{ */
#define I2C_IC_RXFLR_RXFLR_MASK (0x1FU)
#define I2C_IC_RXFLR_RXFLR_SHIFT (0U)
#define I2C_IC_RXFLR_RXFLR(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_RXFLR_RXFLR_SHIFT)) & I2C_IC_RXFLR_RXFLR_MASK)
/*! @} */

/*! @name IC_SDA_HOLD -  */
/*! @{ */
#define I2C_IC_SDA_HOLD_IC_SDA_HOLD_MASK (0xFFFFU)
#define I2C_IC_SDA_HOLD_IC_SDA_HOLD_SHIFT (0U)
#define I2C_IC_SDA_HOLD_IC_SDA_HOLD(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_SDA_HOLD_IC_SDA_HOLD_SHIFT)) & I2C_IC_SDA_HOLD_IC_SDA_HOLD_MASK)
/*! @} */

/*! @name IC_TX_ABRT_SOURCE -  */
/*! @{ */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK_MASK (0x1U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK_SHIFT (0U)
/*! ABRT_7B_ADDR_NOACK
 *  0b1..Master is in 7-bit addressing mode and the address sent was not acknowledged by any slave.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK_SHIFT)) &                                             \
     I2C_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK_MASK (0x2U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK_SHIFT (1U)
/*! ABRT_10ADDR1_NOACK
 *  0b1..Master is in 10-bit address mode and the first 10-bit address byte was not acknowledged by any slave.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK_SHIFT)) &                                             \
     I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR1_NOACK_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK_MASK (0x4U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK_SHIFT (2U)
/*! ABRT_10ADDR2_NOACK
 *  0b1..Master is in 10-bit address mode and the second address byte of the 10-bit address was not acknowledged by any slave.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK_SHIFT)) &                                             \
     I2C_IC_TX_ABRT_SOURCE_ABRT_10ADDR2_NOACK_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK_MASK (0x8U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK_SHIFT (3U)
/*! ABRT_TXDATA_NOACK
 *  0b1..This is a master-mode only bit. Master has received an acknowledgement for the address, but when it sent
 *       data byte(s) following the address, it did not receive an acknowledge from the remote slave(s).
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK_MASK (0x10U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK_SHIFT (4U)
/*! ABRT_GCALL_NOACK
 *  0b1..DW_apb_i2c in master mode sent a General Call and no slave on the bus acknowledged the General Call.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_NOACK_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ_MASK (0x20U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ_SHIFT (5U)
/*! ABRT_GCALL_READ
 *  0b1..DW_apb_i2c in master mode sent a General Call but the user programmed the byte following the General Call
 *       to be a read from the bus (IC_DATA_CMD[9] is set to 1).
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ABRT_GCALL_READ_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET_MASK (0x40U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET_SHIFT (6U)
/*! ABRT_HS_ACKDET
 *  0b1..Master is in High Speed mode and the High Speed Master code was acknowledged (wrong behavior).
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ABRT_HS_ACKDET_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET_MASK (0x80U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET_SHIFT (7U)
/*! ABRT_SBYTE_ACKDET
 *  0b1..Master has sent a START Byte and the START Byte was acknowledged (wrong behavior).
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_ACKDET_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT_MASK (0x100U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT_SHIFT (8U)
/*! ABRT_HS_NORSTRT
 *  0b1..The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) =0) and the user is trying to use the master to transfer data in
 * High Speed mode.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ABRT_HS_NORSTRT_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT_MASK (0x200U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT_SHIFT (9U)
/*! ABRT_SBYTE_NORSTRT
 *  0b1..The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) =0) and the user is trying to send a START Byte.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT_SHIFT)) &                                             \
     I2C_IC_TX_ABRT_SOURCE_ABRT_SBYTE_NORSTRT_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT_MASK (0x400U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT_SHIFT (10U)
/*! ABRT_10B_RD_NORSTRT
 *  0b1..The restart is disabled (IC_RESTART_EN bit (IC_CON[5]) =0) and the master sends a read command in 10-bit addressing mode.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT_SHIFT)) &                                            \
     I2C_IC_TX_ABRT_SOURCE_ABRT_10B_RD_NORSTRT_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS_MASK (0x800U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS_SHIFT (11U)
/*! ABRT_MASTER_DIS
 *  0b1..User tries to initiate a Master operation with the Master mode disabled.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ABRT_MASTER_DIS_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ARB_LOST_MASK (0x1000U)
#define I2C_IC_TX_ABRT_SOURCE_ARB_LOST_SHIFT (12U)
/*! ARB_LOST
 *  0b1..Master has lost arbitration, or if IC_TX_ABRT_SOURCE[14] is also set, then the slave transmitter has lost arbitration.
 */
#define I2C_IC_TX_ABRT_SOURCE_ARB_LOST(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ARB_LOST_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ARB_LOST_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO_MASK (0x2000U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO_SHIFT (13U)
/*! ABRT_SLVFLUSH_TXFIFO
 *  0b1..Slave has received a read command and some data exists in the TX FIFO so the slave issues a TX_ABRT interrupt to flush old
 * data in TX FIFO.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO_SHIFT)) &                                           \
     I2C_IC_TX_ABRT_SOURCE_ABRT_SLVFLUSH_TXFIFO_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST_MASK (0x4000U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST_SHIFT (14U)
/*! ABRT_SLV_ARBLOST
 *  0b1..Slave lost the bus while transmitting data to a remote master. IC_TX_ABRT_SOURCE[12] is set at the same time.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ABRT_SLV_ARBLOST_MASK)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX_MASK (0x8000U)
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX_SHIFT (15U)
/*! ABRT_SLVRD_INTX
 *  0b1..When the processor side responds to a slave mode request for data to be transmitted to a remote master
 *       and user writes a 1 in CMD (bit 8) of IC_DATA_CMD register.
 */
#define I2C_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX_SHIFT)) & I2C_IC_TX_ABRT_SOURCE_ABRT_SLVRD_INTX_MASK)
/*! @} */

/*! @name IC_SLV_DATA_NACK_ONLY -  */
/*! @{ */
#define I2C_IC_SLV_DATA_NACK_ONLY_NACK_MASK (0x1U)
#define I2C_IC_SLV_DATA_NACK_ONLY_NACK_SHIFT (0U)
/*! NACK
 *  0b0..generate NACK/ACK normally
 *  0b1..generate NACK after data byte received
 */
#define I2C_IC_SLV_DATA_NACK_ONLY_NACK(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_SLV_DATA_NACK_ONLY_NACK_SHIFT)) & I2C_IC_SLV_DATA_NACK_ONLY_NACK_MASK)
/*! @} */

/*! @name IC_DMA_CR -  */
/*! @{ */
#define I2C_IC_DMA_CR_RDMAE_MASK (0x1U)
#define I2C_IC_DMA_CR_RDMAE_SHIFT (0U)
/*! RDMAE
 *  0b0..Receive DMA disabled
 *  0b1..Receive DMA enabled
 */
#define I2C_IC_DMA_CR_RDMAE(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_DMA_CR_RDMAE_SHIFT)) & I2C_IC_DMA_CR_RDMAE_MASK)
#define I2C_IC_DMA_CR_TDMAE_MASK (0x2U)
#define I2C_IC_DMA_CR_TDMAE_SHIFT (1U)
/*! TDMAE
 *  0b0..Transmit DMA disabled
 *  0b1..Transmit DMA enabled
 */
#define I2C_IC_DMA_CR_TDMAE(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_DMA_CR_TDMAE_SHIFT)) & I2C_IC_DMA_CR_TDMAE_MASK)
/*! @} */

/*! @name IC_DMA_TDLR -  */
/*! @{ */
#define I2C_IC_DMA_TDLR_DMATDL_MASK (0xFU)
#define I2C_IC_DMA_TDLR_DMATDL_SHIFT (0U)
#define I2C_IC_DMA_TDLR_DMATDL(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_DMA_TDLR_DMATDL_SHIFT)) & I2C_IC_DMA_TDLR_DMATDL_MASK)
/*! @} */

/*! @name IC_DMA_RDLR -  */
/*! @{ */
#define I2C_IC_DMA_RDLR_DMARDL_MASK (0xFU)
#define I2C_IC_DMA_RDLR_DMARDL_SHIFT (0U)
#define I2C_IC_DMA_RDLR_DMARDL(x) (((uint32_t)(((uint32_t)(x)) << I2C_IC_DMA_RDLR_DMARDL_SHIFT)) & I2C_IC_DMA_RDLR_DMARDL_MASK)
/*! @} */

/*! @name IC_SDA_SETUP -  */
/*! @{ */
#define I2C_IC_SDA_SETUP_SDA_SETUP_MASK (0xFFU)
#define I2C_IC_SDA_SETUP_SDA_SETUP_SHIFT (0U)
#define I2C_IC_SDA_SETUP_SDA_SETUP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_SDA_SETUP_SDA_SETUP_SHIFT)) & I2C_IC_SDA_SETUP_SDA_SETUP_MASK)
/*! @} */

/*! @name IC_ACK_GENERAL_CALL -  */
/*! @{ */
#define I2C_IC_ACK_GENERAL_CALL_ACK_GEN_CALL_MASK (0x1U)
#define I2C_IC_ACK_GENERAL_CALL_ACK_GEN_CALL_SHIFT (0U)
#define I2C_IC_ACK_GENERAL_CALL_ACK_GEN_CALL(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_ACK_GENERAL_CALL_ACK_GEN_CALL_SHIFT)) & I2C_IC_ACK_GENERAL_CALL_ACK_GEN_CALL_MASK)
/*! @} */

/*! @name IC_ENABLE_STATUS -  */
/*! @{ */
#define I2C_IC_ENABLE_STATUS_IC_EN_MASK (0x1U)
#define I2C_IC_ENABLE_STATUS_IC_EN_SHIFT (0U)
#define I2C_IC_ENABLE_STATUS_IC_EN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_ENABLE_STATUS_IC_EN_SHIFT)) & I2C_IC_ENABLE_STATUS_IC_EN_MASK)
#define I2C_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY_MASK (0x2U)
#define I2C_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY_SHIFT (1U)
#define I2C_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY(x)                                                                            \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY_SHIFT)) &                                         \
     I2C_IC_ENABLE_STATUS_SLV_DISABLED_WHILE_BUSY_MASK)
#define I2C_IC_ENABLE_STATUS_SLV_RX_DATA_LOST_MASK (0x4U)
#define I2C_IC_ENABLE_STATUS_SLV_RX_DATA_LOST_SHIFT (2U)
#define I2C_IC_ENABLE_STATUS_SLV_RX_DATA_LOST(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_ENABLE_STATUS_SLV_RX_DATA_LOST_SHIFT)) & I2C_IC_ENABLE_STATUS_SLV_RX_DATA_LOST_MASK)
/*! @} */

/*! @name IC_FS_SPKLEN -  */
/*! @{ */
#define I2C_IC_FS_SPKLEN_IC_FS_SPKLEN_MASK (0xFFU)
#define I2C_IC_FS_SPKLEN_IC_FS_SPKLEN_SHIFT (0U)
#define I2C_IC_FS_SPKLEN_IC_FS_SPKLEN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_FS_SPKLEN_IC_FS_SPKLEN_SHIFT)) & I2C_IC_FS_SPKLEN_IC_FS_SPKLEN_MASK)
/*! @} */

/*! @name IC_HS_SPKLEN -  */
/*! @{ */
#define I2C_IC_HS_SPKLEN_IC_HS_SPKLEN_MASK (0xFFU)
#define I2C_IC_HS_SPKLEN_IC_HS_SPKLEN_SHIFT (0U)
#define I2C_IC_HS_SPKLEN_IC_HS_SPKLEN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_HS_SPKLEN_IC_HS_SPKLEN_SHIFT)) & I2C_IC_HS_SPKLEN_IC_HS_SPKLEN_MASK)
/*! @} */

/*! @name IC_COMP_PARAM_1 -  */
/*! @{ */
#define I2C_IC_COMP_PARAM_1_APB_DATA_WIDTH_MASK (0x3U)
#define I2C_IC_COMP_PARAM_1_APB_DATA_WIDTH_SHIFT (0U)
/*! APB_DATA_WIDTH
 *  0b00..8 bits
 *  0b01..16 bits
 *  0b10..32 bits
 *  0b11..Reserved
 */
#define I2C_IC_COMP_PARAM_1_APB_DATA_WIDTH(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_PARAM_1_APB_DATA_WIDTH_SHIFT)) & I2C_IC_COMP_PARAM_1_APB_DATA_WIDTH_MASK)
#define I2C_IC_COMP_PARAM_1_MAX_SPEED_MODE_MASK (0xCU)
#define I2C_IC_COMP_PARAM_1_MAX_SPEED_MODE_SHIFT (2U)
/*! MAX_SPEED_MODE
 *  0b00..Reserved
 *  0b01..Standard
 *  0b10..Fast
 *  0b11..High
 */
#define I2C_IC_COMP_PARAM_1_MAX_SPEED_MODE(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_PARAM_1_MAX_SPEED_MODE_SHIFT)) & I2C_IC_COMP_PARAM_1_MAX_SPEED_MODE_MASK)
#define I2C_IC_COMP_PARAM_1_HC_COUNT_VALUES_MASK (0x10U)
#define I2C_IC_COMP_PARAM_1_HC_COUNT_VALUES_SHIFT (4U)
/*! HC_COUNT_VALUES
 *  0b0..False
 *  0b1..True
 */
#define I2C_IC_COMP_PARAM_1_HC_COUNT_VALUES(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_PARAM_1_HC_COUNT_VALUES_SHIFT)) & I2C_IC_COMP_PARAM_1_HC_COUNT_VALUES_MASK)
#define I2C_IC_COMP_PARAM_1_INTR_IO_MASK (0x20U)
#define I2C_IC_COMP_PARAM_1_INTR_IO_SHIFT (5U)
/*! INTR_IO
 *  0b0..Individual
 *  0b1..Combined
 */
#define I2C_IC_COMP_PARAM_1_INTR_IO(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_PARAM_1_INTR_IO_SHIFT)) & I2C_IC_COMP_PARAM_1_INTR_IO_MASK)
#define I2C_IC_COMP_PARAM_1_HAS_DMA_MASK (0x40U)
#define I2C_IC_COMP_PARAM_1_HAS_DMA_SHIFT (6U)
/*! HAS_DMA
 *  0b0..False
 *  0b1..True
 */
#define I2C_IC_COMP_PARAM_1_HAS_DMA(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_PARAM_1_HAS_DMA_SHIFT)) & I2C_IC_COMP_PARAM_1_HAS_DMA_MASK)
#define I2C_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS_MASK (0x80U)
#define I2C_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS_SHIFT (7U)
/*! ADD_ENCODED_PARAMS
 *  0b0..False
 *  0b1..True
 */
#define I2C_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS_SHIFT)) & I2C_IC_COMP_PARAM_1_ADD_ENCODED_PARAMS_MASK)
#define I2C_IC_COMP_PARAM_1_RX_BUFFER_DEPTH_MASK (0xFF00U)
#define I2C_IC_COMP_PARAM_1_RX_BUFFER_DEPTH_SHIFT (8U)
/*! RX_BUFFER_DEPTH
 *  0b00000000..Reserved
 *  0b00000001..2
 *  0b00000010..3 to
 *  0b11111111..256
 */
#define I2C_IC_COMP_PARAM_1_RX_BUFFER_DEPTH(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_PARAM_1_RX_BUFFER_DEPTH_SHIFT)) & I2C_IC_COMP_PARAM_1_RX_BUFFER_DEPTH_MASK)
#define I2C_IC_COMP_PARAM_1_TX_BUFFER_DEPTH_MASK (0xFF0000U)
#define I2C_IC_COMP_PARAM_1_TX_BUFFER_DEPTH_SHIFT (16U)
/*! TX_BUFFER_DEPTH
 *  0b00000000..Reserved
 *  0b00000001..2
 *  0b00000010..3 to
 *  0b11111111..256
 */
#define I2C_IC_COMP_PARAM_1_TX_BUFFER_DEPTH(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_PARAM_1_TX_BUFFER_DEPTH_SHIFT)) & I2C_IC_COMP_PARAM_1_TX_BUFFER_DEPTH_MASK)
/*! @} */

/*! @name IC_COMP_VERSION -  */
/*! @{ */
#define I2C_IC_COMP_VERSION_IC_COMP_VERSION_MASK (0xFFFFFFFFU)
#define I2C_IC_COMP_VERSION_IC_COMP_VERSION_SHIFT (0U)
#define I2C_IC_COMP_VERSION_IC_COMP_VERSION(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_VERSION_IC_COMP_VERSION_SHIFT)) & I2C_IC_COMP_VERSION_IC_COMP_VERSION_MASK)
/*! @} */

/*! @name IC_COMP_TYPE -  */
/*! @{ */
#define I2C_IC_COMP_TYPE_IC_COMP_TYPE_MASK (0xFFFFFFFFU)
#define I2C_IC_COMP_TYPE_IC_COMP_TYPE_SHIFT (0U)
#define I2C_IC_COMP_TYPE_IC_COMP_TYPE(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << I2C_IC_COMP_TYPE_IC_COMP_TYPE_SHIFT)) & I2C_IC_COMP_TYPE_IC_COMP_TYPE_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group I2C_Register_Masks */

/* I2C - Peripheral instance base addresses */
/** Peripheral I2C0 base address */
#define I2C0_BASE (0x46000000u)
/** Peripheral I2C0 base pointer */
#define I2C0 ((I2C_Type *) I2C0_BASE)
/** Peripheral I2C1 base address */
#define I2C1_BASE (0x48050000u)
/** Peripheral I2C1 base pointer */
#define I2C1 ((I2C_Type *) I2C1_BASE)
/** Array initializer of I2C peripheral base addresses */
#define I2C_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        I2C0_BASE, I2C1_BASE                                                                                                       \
    }
/** Array initializer of I2C peripheral base pointers */
#define I2C_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        I2C0, I2C1                                                                                                                 \
    }
/** Interrupt vectors for the I2C peripheral type */
#define I2C_IRQS                                                                                                                   \
    {                                                                                                                              \
        I2C0_IRQn, I2C1_IRQn                                                                                                       \
    }

/*!
 * @}
 */ /* end of group I2C_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- PINMUX Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PINMUX_Peripheral_Access_Layer PINMUX Peripheral Access Layer
 * @{
 */

/** PINMUX - Register Layout Typedef */
typedef struct
{
    __IO uint32_t _GPIO0;  /**< padring pin Register, offset: 0x0 */
    __IO uint32_t _GPIO1;  /**< padring pin Register, offset: 0x4 */
    __IO uint32_t _GPIO2;  /**< padring pin Register, offset: 0x8 */
    __IO uint32_t _GPIO3;  /**< padring pin Register, offset: 0xC */
    __IO uint32_t _GPIO4;  /**< padring pin Register, offset: 0x10 */
    __IO uint32_t _GPIO5;  /**< padring pin Register, offset: 0x14 */
    __IO uint32_t _GPIO6;  /**< padring pin Register, offset: 0x18 */
    __IO uint32_t _GPIO7;  /**< padring pin Register, offset: 0x1C */
    __IO uint32_t _GPIO8;  /**< padring pin Register, offset: 0x20 */
    __IO uint32_t _GPIO9;  /**< padring pin Register, offset: 0x24 */
    __IO uint32_t _GPIO10; /**< padring pin Register, offset: 0x28 */
    __IO uint32_t _GPIO11; /**< padring pin Register, offset: 0x2C */
    __IO uint32_t _GPIO12; /**< padring pin Register, offset: 0x30 */
    __IO uint32_t _GPIO13; /**< padring pin Register, offset: 0x34 */
    __IO uint32_t _GPIO14; /**< padring pin Register, offset: 0x38 */
    __IO uint32_t _GPIO15; /**< padring pin Register, offset: 0x3C */
    __IO uint32_t _GPIO16; /**< padring pin Register, offset: 0x40 */
    __IO uint32_t _GPIO17; /**< padring pin Register, offset: 0x44 */
    __IO uint32_t _GPIO18; /**< padring pin Register, offset: 0x48 */
    __IO uint32_t _GPIO19; /**< padring pin Register, offset: 0x4C */
    __IO uint32_t _GPIO20; /**< padring pin Register, offset: 0x50 */
    __IO uint32_t _GPIO21; /**< padring pin Register, offset: 0x54 */
    __IO uint32_t _GPIO22; /**< padring pin Register, offset: 0x58 */
    __IO uint32_t _GPIO23; /**< padring pin Register, offset: 0x5C */
    __IO uint32_t _GPIO24; /**< padring pin Register, offset: 0x60 */
    __IO uint32_t _GPIO25; /**< padring pin Register, offset: 0x64 */
    __IO uint32_t _GPIO26; /**< padring pin Register, offset: 0x68 */
    __IO uint32_t _GPIO27; /**< padring pin Register, offset: 0x6C */
    __IO uint32_t _GPIO28; /**< padring pin Register, offset: 0x70 */
    __IO uint32_t _GPIO29; /**< padring pin Register, offset: 0x74 */
    __IO uint32_t _GPIO30; /**< padring pin Register, offset: 0x78 */
    __IO uint32_t _GPIO31; /**< padring pin Register, offset: 0x7C */
    __IO uint32_t _GPIO32; /**< padring pin Register, offset: 0x80 */
    __IO uint32_t _GPIO33; /**< padring pin Register, offset: 0x84 */
    __IO uint32_t _GPIO34; /**< padring pin Register, offset: 0x88 */
    __IO uint32_t _GPIO35; /**< padring pin Register, offset: 0x8C */
    __IO uint32_t _GPIO36; /**< padring pin Register, offset: 0x90 */
    __IO uint32_t _GPIO37; /**< padring pin Register, offset: 0x94 */
    __IO uint32_t _GPIO38; /**< padring pin Register, offset: 0x98 */
    __IO uint32_t _GPIO39; /**< padring pin Register, offset: 0x9C */
    __IO uint32_t _GPIO40; /**< padring pin Register, offset: 0xA0 */
    __IO uint32_t _GPIO41; /**< padring pin Register, offset: 0xA4 */
    __IO uint32_t _GPIO42; /**< padring pin Register, offset: 0xA8 */
    __IO uint32_t _GPIO43; /**< padring pin Register, offset: 0xAC */
    __IO uint32_t _GPIO44; /**< padring pin Register, offset: 0xB0 */
    __IO uint32_t _GPIO45; /**< padring pin Register, offset: 0xB4 */
    __IO uint32_t _GPIO46; /**< padring pin Register, offset: 0xB8 */
    __IO uint32_t _GPIO47; /**< padring pin Register, offset: 0xBC */
    __IO uint32_t _GPIO48; /**< padring pin Register, offset: 0xC0 */
    __IO uint32_t _GPIO49; /**< padring pin Register, offset: 0xC4 */
    __IO uint32_t _GPIO50; /**< padring pin Register, offset: 0xC8 */
    __IO uint32_t _GPIO51; /**< padring pin Register, offset: 0xCC */
    __IO uint32_t _GPIO52; /**< padring pin Register, offset: 0xD0 */
    __IO uint32_t _GPIO53; /**< padring pin Register, offset: 0xD4 */
    __IO uint32_t _GPIO54; /**< padring pin Register, offset: 0xD8 */
    __IO uint32_t _GPIO55; /**< padring pin Register, offset: 0xDC */
} PINMUX_Type;

/* ----------------------------------------------------------------------------
   -- PINMUX Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PINMUX_Register_Masks PINMUX Register Masks
 * @{
 */

/*! @name _GPIO0 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO0_FSEL_MASK (0x7U)
#define PINMUX__GPIO0_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO0_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO0_FSEL_SHIFT)) & PINMUX__GPIO0_FSEL_MASK)
#define PINMUX__GPIO0_DI_EN_MASK (0x8U)
#define PINMUX__GPIO0_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO0_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO0_DI_EN_SHIFT)) & PINMUX__GPIO0_DI_EN_MASK)
#define PINMUX__GPIO0_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO0_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO0_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO0_SLP_VAL_SHIFT)) & PINMUX__GPIO0_SLP_VAL_MASK)
#define PINMUX__GPIO0_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO0_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO0_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO0_SLP_OE_SHIFT)) & PINMUX__GPIO0_SLP_OE_MASK)
#define PINMUX__GPIO0_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO0_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO0_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO0_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO0_PIO_PULL_DN_MASK)
#define PINMUX__GPIO0_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO0_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO0_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO0_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO0_PIO_PULL_UP_MASK)
#define PINMUX__GPIO0_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO0_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO0_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO0_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO0_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO1 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO1_FSEL_MASK (0x7U)
#define PINMUX__GPIO1_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO1_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO1_FSEL_SHIFT)) & PINMUX__GPIO1_FSEL_MASK)
#define PINMUX__GPIO1_DI_EN_MASK (0x8U)
#define PINMUX__GPIO1_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO1_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO1_DI_EN_SHIFT)) & PINMUX__GPIO1_DI_EN_MASK)
#define PINMUX__GPIO1_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO1_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO1_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO1_SLP_VAL_SHIFT)) & PINMUX__GPIO1_SLP_VAL_MASK)
#define PINMUX__GPIO1_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO1_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO1_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO1_SLP_OE_SHIFT)) & PINMUX__GPIO1_SLP_OE_MASK)
#define PINMUX__GPIO1_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO1_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO1_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO1_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO1_PIO_PULL_DN_MASK)
#define PINMUX__GPIO1_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO1_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO1_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO1_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO1_PIO_PULL_UP_MASK)
#define PINMUX__GPIO1_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO1_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO1_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO1_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO1_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO2 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO2_FSEL_MASK (0x7U)
#define PINMUX__GPIO2_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO2_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO2_FSEL_SHIFT)) & PINMUX__GPIO2_FSEL_MASK)
#define PINMUX__GPIO2_DI_EN_MASK (0x8U)
#define PINMUX__GPIO2_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO2_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO2_DI_EN_SHIFT)) & PINMUX__GPIO2_DI_EN_MASK)
#define PINMUX__GPIO2_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO2_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO2_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO2_SLP_VAL_SHIFT)) & PINMUX__GPIO2_SLP_VAL_MASK)
#define PINMUX__GPIO2_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO2_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO2_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO2_SLP_OE_SHIFT)) & PINMUX__GPIO2_SLP_OE_MASK)
#define PINMUX__GPIO2_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO2_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO2_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO2_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO2_PIO_PULL_DN_MASK)
#define PINMUX__GPIO2_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO2_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO2_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO2_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO2_PIO_PULL_UP_MASK)
#define PINMUX__GPIO2_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO2_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO2_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO2_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO2_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO3 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO3_FSEL_MASK (0x7U)
#define PINMUX__GPIO3_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO3_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO3_FSEL_SHIFT)) & PINMUX__GPIO3_FSEL_MASK)
#define PINMUX__GPIO3_DI_EN_MASK (0x8U)
#define PINMUX__GPIO3_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO3_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO3_DI_EN_SHIFT)) & PINMUX__GPIO3_DI_EN_MASK)
#define PINMUX__GPIO3_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO3_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO3_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO3_SLP_VAL_SHIFT)) & PINMUX__GPIO3_SLP_VAL_MASK)
#define PINMUX__GPIO3_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO3_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO3_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO3_SLP_OE_SHIFT)) & PINMUX__GPIO3_SLP_OE_MASK)
#define PINMUX__GPIO3_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO3_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO3_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO3_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO3_PIO_PULL_DN_MASK)
#define PINMUX__GPIO3_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO3_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO3_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO3_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO3_PIO_PULL_UP_MASK)
#define PINMUX__GPIO3_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO3_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO3_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO3_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO3_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO4 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO4_FSEL_MASK (0x7U)
#define PINMUX__GPIO4_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO4_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO4_FSEL_SHIFT)) & PINMUX__GPIO4_FSEL_MASK)
#define PINMUX__GPIO4_DI_EN_MASK (0x8U)
#define PINMUX__GPIO4_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO4_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO4_DI_EN_SHIFT)) & PINMUX__GPIO4_DI_EN_MASK)
#define PINMUX__GPIO4_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO4_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO4_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO4_SLP_VAL_SHIFT)) & PINMUX__GPIO4_SLP_VAL_MASK)
#define PINMUX__GPIO4_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO4_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO4_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO4_SLP_OE_SHIFT)) & PINMUX__GPIO4_SLP_OE_MASK)
#define PINMUX__GPIO4_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO4_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO4_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO4_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO4_PIO_PULL_DN_MASK)
#define PINMUX__GPIO4_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO4_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO4_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO4_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO4_PIO_PULL_UP_MASK)
#define PINMUX__GPIO4_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO4_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO4_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO4_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO4_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO5 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO5_FSEL_MASK (0x7U)
#define PINMUX__GPIO5_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO5_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO5_FSEL_SHIFT)) & PINMUX__GPIO5_FSEL_MASK)
#define PINMUX__GPIO5_DI_EN_MASK (0x8U)
#define PINMUX__GPIO5_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO5_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO5_DI_EN_SHIFT)) & PINMUX__GPIO5_DI_EN_MASK)
#define PINMUX__GPIO5_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO5_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO5_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO5_SLP_VAL_SHIFT)) & PINMUX__GPIO5_SLP_VAL_MASK)
#define PINMUX__GPIO5_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO5_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO5_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO5_SLP_OE_SHIFT)) & PINMUX__GPIO5_SLP_OE_MASK)
#define PINMUX__GPIO5_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO5_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO5_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO5_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO5_PIO_PULL_DN_MASK)
#define PINMUX__GPIO5_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO5_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO5_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO5_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO5_PIO_PULL_UP_MASK)
#define PINMUX__GPIO5_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO5_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO5_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO5_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO5_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO6 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO6_FSEL_MASK (0x7U)
#define PINMUX__GPIO6_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO6_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO6_FSEL_SHIFT)) & PINMUX__GPIO6_FSEL_MASK)
#define PINMUX__GPIO6_DI_EN_MASK (0x8U)
#define PINMUX__GPIO6_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO6_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO6_DI_EN_SHIFT)) & PINMUX__GPIO6_DI_EN_MASK)
#define PINMUX__GPIO6_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO6_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO6_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO6_SLP_VAL_SHIFT)) & PINMUX__GPIO6_SLP_VAL_MASK)
#define PINMUX__GPIO6_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO6_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO6_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO6_SLP_OE_SHIFT)) & PINMUX__GPIO6_SLP_OE_MASK)
#define PINMUX__GPIO6_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO6_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO6_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO6_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO6_PIO_PULL_DN_MASK)
#define PINMUX__GPIO6_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO6_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO6_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO6_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO6_PIO_PULL_UP_MASK)
#define PINMUX__GPIO6_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO6_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO6_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO6_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO6_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO7 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO7_FSEL_MASK (0x7U)
#define PINMUX__GPIO7_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO7_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO7_FSEL_SHIFT)) & PINMUX__GPIO7_FSEL_MASK)
#define PINMUX__GPIO7_DI_EN_MASK (0x8U)
#define PINMUX__GPIO7_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO7_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO7_DI_EN_SHIFT)) & PINMUX__GPIO7_DI_EN_MASK)
#define PINMUX__GPIO7_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO7_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO7_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO7_SLP_VAL_SHIFT)) & PINMUX__GPIO7_SLP_VAL_MASK)
#define PINMUX__GPIO7_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO7_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO7_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO7_SLP_OE_SHIFT)) & PINMUX__GPIO7_SLP_OE_MASK)
#define PINMUX__GPIO7_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO7_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO7_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO7_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO7_PIO_PULL_DN_MASK)
#define PINMUX__GPIO7_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO7_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO7_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO7_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO7_PIO_PULL_UP_MASK)
#define PINMUX__GPIO7_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO7_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO7_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO7_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO7_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO8 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO8_FSEL_MASK (0x7U)
#define PINMUX__GPIO8_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO8_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO8_FSEL_SHIFT)) & PINMUX__GPIO8_FSEL_MASK)
#define PINMUX__GPIO8_DI_EN_MASK (0x8U)
#define PINMUX__GPIO8_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO8_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO8_DI_EN_SHIFT)) & PINMUX__GPIO8_DI_EN_MASK)
#define PINMUX__GPIO8_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO8_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO8_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO8_SLP_VAL_SHIFT)) & PINMUX__GPIO8_SLP_VAL_MASK)
#define PINMUX__GPIO8_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO8_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO8_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO8_SLP_OE_SHIFT)) & PINMUX__GPIO8_SLP_OE_MASK)
#define PINMUX__GPIO8_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO8_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO8_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO8_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO8_PIO_PULL_DN_MASK)
#define PINMUX__GPIO8_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO8_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO8_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO8_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO8_PIO_PULL_UP_MASK)
#define PINMUX__GPIO8_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO8_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO8_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO8_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO8_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO9 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO9_FSEL_MASK (0x7U)
#define PINMUX__GPIO9_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO9_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO9_FSEL_SHIFT)) & PINMUX__GPIO9_FSEL_MASK)
#define PINMUX__GPIO9_DI_EN_MASK (0x8U)
#define PINMUX__GPIO9_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO9_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO9_DI_EN_SHIFT)) & PINMUX__GPIO9_DI_EN_MASK)
#define PINMUX__GPIO9_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO9_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO9_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO9_SLP_VAL_SHIFT)) & PINMUX__GPIO9_SLP_VAL_MASK)
#define PINMUX__GPIO9_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO9_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO9_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO9_SLP_OE_SHIFT)) & PINMUX__GPIO9_SLP_OE_MASK)
#define PINMUX__GPIO9_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO9_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO9_PIO_PULL_DN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO9_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO9_PIO_PULL_DN_MASK)
#define PINMUX__GPIO9_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO9_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO9_PIO_PULL_UP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO9_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO9_PIO_PULL_UP_MASK)
#define PINMUX__GPIO9_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO9_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO9_PIO_PULL_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO9_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO9_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO10 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO10_FSEL_MASK (0x7U)
#define PINMUX__GPIO10_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO10_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO10_FSEL_SHIFT)) & PINMUX__GPIO10_FSEL_MASK)
#define PINMUX__GPIO10_DI_EN_MASK (0x8U)
#define PINMUX__GPIO10_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO10_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO10_DI_EN_SHIFT)) & PINMUX__GPIO10_DI_EN_MASK)
#define PINMUX__GPIO10_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO10_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO10_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO10_SLP_VAL_SHIFT)) & PINMUX__GPIO10_SLP_VAL_MASK)
#define PINMUX__GPIO10_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO10_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO10_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO10_SLP_OE_SHIFT)) & PINMUX__GPIO10_SLP_OE_MASK)
#define PINMUX__GPIO10_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO10_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO10_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO10_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO10_PIO_PULL_DN_MASK)
#define PINMUX__GPIO10_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO10_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO10_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO10_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO10_PIO_PULL_UP_MASK)
#define PINMUX__GPIO10_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO10_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO10_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO10_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO10_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO11 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO11_FSEL_MASK (0x7U)
#define PINMUX__GPIO11_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO11_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO11_FSEL_SHIFT)) & PINMUX__GPIO11_FSEL_MASK)
#define PINMUX__GPIO11_DI_EN_MASK (0x8U)
#define PINMUX__GPIO11_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO11_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO11_DI_EN_SHIFT)) & PINMUX__GPIO11_DI_EN_MASK)
#define PINMUX__GPIO11_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO11_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO11_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO11_SLP_VAL_SHIFT)) & PINMUX__GPIO11_SLP_VAL_MASK)
#define PINMUX__GPIO11_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO11_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO11_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO11_SLP_OE_SHIFT)) & PINMUX__GPIO11_SLP_OE_MASK)
#define PINMUX__GPIO11_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO11_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO11_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO11_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO11_PIO_PULL_DN_MASK)
#define PINMUX__GPIO11_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO11_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO11_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO11_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO11_PIO_PULL_UP_MASK)
#define PINMUX__GPIO11_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO11_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO11_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO11_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO11_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO12 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO12_FSEL_MASK (0x7U)
#define PINMUX__GPIO12_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO12_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO12_FSEL_SHIFT)) & PINMUX__GPIO12_FSEL_MASK)
#define PINMUX__GPIO12_DI_EN_MASK (0x8U)
#define PINMUX__GPIO12_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO12_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO12_DI_EN_SHIFT)) & PINMUX__GPIO12_DI_EN_MASK)
#define PINMUX__GPIO12_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO12_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO12_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO12_SLP_VAL_SHIFT)) & PINMUX__GPIO12_SLP_VAL_MASK)
#define PINMUX__GPIO12_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO12_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO12_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO12_SLP_OE_SHIFT)) & PINMUX__GPIO12_SLP_OE_MASK)
#define PINMUX__GPIO12_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO12_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO12_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO12_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO12_PIO_PULL_DN_MASK)
#define PINMUX__GPIO12_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO12_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO12_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO12_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO12_PIO_PULL_UP_MASK)
#define PINMUX__GPIO12_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO12_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO12_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO12_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO12_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO13 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO13_FSEL_MASK (0x7U)
#define PINMUX__GPIO13_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO13_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO13_FSEL_SHIFT)) & PINMUX__GPIO13_FSEL_MASK)
#define PINMUX__GPIO13_DI_EN_MASK (0x8U)
#define PINMUX__GPIO13_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO13_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO13_DI_EN_SHIFT)) & PINMUX__GPIO13_DI_EN_MASK)
#define PINMUX__GPIO13_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO13_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO13_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO13_SLP_VAL_SHIFT)) & PINMUX__GPIO13_SLP_VAL_MASK)
#define PINMUX__GPIO13_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO13_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO13_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO13_SLP_OE_SHIFT)) & PINMUX__GPIO13_SLP_OE_MASK)
#define PINMUX__GPIO13_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO13_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO13_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO13_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO13_PIO_PULL_DN_MASK)
#define PINMUX__GPIO13_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO13_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO13_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO13_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO13_PIO_PULL_UP_MASK)
#define PINMUX__GPIO13_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO13_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO13_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO13_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO13_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO14 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO14_FSEL_MASK (0x7U)
#define PINMUX__GPIO14_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO14_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO14_FSEL_SHIFT)) & PINMUX__GPIO14_FSEL_MASK)
#define PINMUX__GPIO14_DI_EN_MASK (0x8U)
#define PINMUX__GPIO14_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO14_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO14_DI_EN_SHIFT)) & PINMUX__GPIO14_DI_EN_MASK)
#define PINMUX__GPIO14_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO14_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO14_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO14_SLP_VAL_SHIFT)) & PINMUX__GPIO14_SLP_VAL_MASK)
#define PINMUX__GPIO14_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO14_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO14_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO14_SLP_OE_SHIFT)) & PINMUX__GPIO14_SLP_OE_MASK)
#define PINMUX__GPIO14_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO14_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO14_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO14_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO14_PIO_PULL_DN_MASK)
#define PINMUX__GPIO14_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO14_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO14_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO14_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO14_PIO_PULL_UP_MASK)
#define PINMUX__GPIO14_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO14_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO14_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO14_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO14_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO15 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO15_FSEL_MASK (0x7U)
#define PINMUX__GPIO15_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO15_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO15_FSEL_SHIFT)) & PINMUX__GPIO15_FSEL_MASK)
#define PINMUX__GPIO15_DI_EN_MASK (0x8U)
#define PINMUX__GPIO15_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO15_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO15_DI_EN_SHIFT)) & PINMUX__GPIO15_DI_EN_MASK)
#define PINMUX__GPIO15_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO15_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO15_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO15_SLP_VAL_SHIFT)) & PINMUX__GPIO15_SLP_VAL_MASK)
#define PINMUX__GPIO15_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO15_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO15_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO15_SLP_OE_SHIFT)) & PINMUX__GPIO15_SLP_OE_MASK)
#define PINMUX__GPIO15_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO15_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO15_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO15_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO15_PIO_PULL_DN_MASK)
#define PINMUX__GPIO15_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO15_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO15_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO15_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO15_PIO_PULL_UP_MASK)
#define PINMUX__GPIO15_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO15_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO15_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO15_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO15_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO16 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO16_FSEL_MASK (0x7U)
#define PINMUX__GPIO16_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO16_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO16_FSEL_SHIFT)) & PINMUX__GPIO16_FSEL_MASK)
#define PINMUX__GPIO16_DI_EN_MASK (0x8U)
#define PINMUX__GPIO16_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO16_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO16_DI_EN_SHIFT)) & PINMUX__GPIO16_DI_EN_MASK)
#define PINMUX__GPIO16_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO16_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO16_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO16_SLP_VAL_SHIFT)) & PINMUX__GPIO16_SLP_VAL_MASK)
#define PINMUX__GPIO16_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO16_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO16_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO16_SLP_OE_SHIFT)) & PINMUX__GPIO16_SLP_OE_MASK)
#define PINMUX__GPIO16_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO16_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO16_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO16_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO16_PIO_PULL_DN_MASK)
#define PINMUX__GPIO16_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO16_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO16_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO16_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO16_PIO_PULL_UP_MASK)
#define PINMUX__GPIO16_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO16_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO16_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO16_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO16_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO17 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO17_FSEL_MASK (0x7U)
#define PINMUX__GPIO17_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO17_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO17_FSEL_SHIFT)) & PINMUX__GPIO17_FSEL_MASK)
#define PINMUX__GPIO17_DI_EN_MASK (0x8U)
#define PINMUX__GPIO17_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO17_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO17_DI_EN_SHIFT)) & PINMUX__GPIO17_DI_EN_MASK)
#define PINMUX__GPIO17_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO17_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO17_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO17_SLP_VAL_SHIFT)) & PINMUX__GPIO17_SLP_VAL_MASK)
#define PINMUX__GPIO17_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO17_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO17_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO17_SLP_OE_SHIFT)) & PINMUX__GPIO17_SLP_OE_MASK)
#define PINMUX__GPIO17_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO17_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO17_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO17_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO17_PIO_PULL_DN_MASK)
#define PINMUX__GPIO17_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO17_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO17_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO17_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO17_PIO_PULL_UP_MASK)
#define PINMUX__GPIO17_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO17_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO17_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO17_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO17_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO18 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO18_FSEL_MASK (0x7U)
#define PINMUX__GPIO18_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO18_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO18_FSEL_SHIFT)) & PINMUX__GPIO18_FSEL_MASK)
#define PINMUX__GPIO18_DI_EN_MASK (0x8U)
#define PINMUX__GPIO18_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO18_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO18_DI_EN_SHIFT)) & PINMUX__GPIO18_DI_EN_MASK)
#define PINMUX__GPIO18_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO18_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO18_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO18_SLP_VAL_SHIFT)) & PINMUX__GPIO18_SLP_VAL_MASK)
#define PINMUX__GPIO18_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO18_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO18_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO18_SLP_OE_SHIFT)) & PINMUX__GPIO18_SLP_OE_MASK)
#define PINMUX__GPIO18_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO18_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO18_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO18_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO18_PIO_PULL_DN_MASK)
#define PINMUX__GPIO18_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO18_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO18_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO18_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO18_PIO_PULL_UP_MASK)
#define PINMUX__GPIO18_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO18_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO18_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO18_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO18_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO19 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO19_FSEL_MASK (0x7U)
#define PINMUX__GPIO19_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO19_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO19_FSEL_SHIFT)) & PINMUX__GPIO19_FSEL_MASK)
#define PINMUX__GPIO19_DI_EN_MASK (0x8U)
#define PINMUX__GPIO19_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO19_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO19_DI_EN_SHIFT)) & PINMUX__GPIO19_DI_EN_MASK)
#define PINMUX__GPIO19_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO19_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO19_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO19_SLP_VAL_SHIFT)) & PINMUX__GPIO19_SLP_VAL_MASK)
#define PINMUX__GPIO19_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO19_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO19_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO19_SLP_OE_SHIFT)) & PINMUX__GPIO19_SLP_OE_MASK)
#define PINMUX__GPIO19_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO19_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO19_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO19_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO19_PIO_PULL_DN_MASK)
#define PINMUX__GPIO19_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO19_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO19_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO19_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO19_PIO_PULL_UP_MASK)
#define PINMUX__GPIO19_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO19_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO19_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO19_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO19_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO20 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO20_FSEL_MASK (0x7U)
#define PINMUX__GPIO20_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO20_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO20_FSEL_SHIFT)) & PINMUX__GPIO20_FSEL_MASK)
#define PINMUX__GPIO20_DI_EN_MASK (0x8U)
#define PINMUX__GPIO20_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO20_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO20_DI_EN_SHIFT)) & PINMUX__GPIO20_DI_EN_MASK)
#define PINMUX__GPIO20_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO20_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO20_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO20_SLP_VAL_SHIFT)) & PINMUX__GPIO20_SLP_VAL_MASK)
#define PINMUX__GPIO20_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO20_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO20_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO20_SLP_OE_SHIFT)) & PINMUX__GPIO20_SLP_OE_MASK)
#define PINMUX__GPIO20_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO20_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO20_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO20_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO20_PIO_PULL_DN_MASK)
#define PINMUX__GPIO20_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO20_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO20_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO20_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO20_PIO_PULL_UP_MASK)
#define PINMUX__GPIO20_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO20_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO20_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO20_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO20_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO21 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO21_FSEL_MASK (0x7U)
#define PINMUX__GPIO21_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO21_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO21_FSEL_SHIFT)) & PINMUX__GPIO21_FSEL_MASK)
#define PINMUX__GPIO21_DI_EN_MASK (0x8U)
#define PINMUX__GPIO21_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO21_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO21_DI_EN_SHIFT)) & PINMUX__GPIO21_DI_EN_MASK)
#define PINMUX__GPIO21_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO21_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO21_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO21_SLP_VAL_SHIFT)) & PINMUX__GPIO21_SLP_VAL_MASK)
#define PINMUX__GPIO21_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO21_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO21_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO21_SLP_OE_SHIFT)) & PINMUX__GPIO21_SLP_OE_MASK)
#define PINMUX__GPIO21_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO21_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO21_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO21_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO21_PIO_PULL_DN_MASK)
#define PINMUX__GPIO21_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO21_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO21_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO21_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO21_PIO_PULL_UP_MASK)
#define PINMUX__GPIO21_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO21_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO21_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO21_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO21_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO22 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO22_FSEL_MASK (0x7U)
#define PINMUX__GPIO22_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO22_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO22_FSEL_SHIFT)) & PINMUX__GPIO22_FSEL_MASK)
#define PINMUX__GPIO22_DI_EN_MASK (0x8U)
#define PINMUX__GPIO22_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO22_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO22_DI_EN_SHIFT)) & PINMUX__GPIO22_DI_EN_MASK)
#define PINMUX__GPIO22_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO22_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO22_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO22_SLP_VAL_SHIFT)) & PINMUX__GPIO22_SLP_VAL_MASK)
#define PINMUX__GPIO22_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO22_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO22_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO22_SLP_OE_SHIFT)) & PINMUX__GPIO22_SLP_OE_MASK)
#define PINMUX__GPIO22_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO22_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO22_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO22_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO22_PIO_PULL_DN_MASK)
#define PINMUX__GPIO22_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO22_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO22_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO22_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO22_PIO_PULL_UP_MASK)
#define PINMUX__GPIO22_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO22_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO22_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO22_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO22_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO23 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO23_FSEL_MASK (0x7U)
#define PINMUX__GPIO23_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO23_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO23_FSEL_SHIFT)) & PINMUX__GPIO23_FSEL_MASK)
#define PINMUX__GPIO23_DI_EN_MASK (0x8U)
#define PINMUX__GPIO23_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO23_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO23_DI_EN_SHIFT)) & PINMUX__GPIO23_DI_EN_MASK)
#define PINMUX__GPIO23_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO23_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO23_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO23_SLP_VAL_SHIFT)) & PINMUX__GPIO23_SLP_VAL_MASK)
#define PINMUX__GPIO23_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO23_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO23_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO23_SLP_OE_SHIFT)) & PINMUX__GPIO23_SLP_OE_MASK)
#define PINMUX__GPIO23_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO23_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO23_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO23_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO23_PIO_PULL_DN_MASK)
#define PINMUX__GPIO23_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO23_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO23_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO23_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO23_PIO_PULL_UP_MASK)
#define PINMUX__GPIO23_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO23_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO23_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO23_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO23_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO24 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO24_FSEL_MASK (0x7U)
#define PINMUX__GPIO24_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO24_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO24_FSEL_SHIFT)) & PINMUX__GPIO24_FSEL_MASK)
#define PINMUX__GPIO24_DI_EN_MASK (0x8U)
#define PINMUX__GPIO24_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO24_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO24_DI_EN_SHIFT)) & PINMUX__GPIO24_DI_EN_MASK)
#define PINMUX__GPIO24_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO24_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO24_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO24_SLP_VAL_SHIFT)) & PINMUX__GPIO24_SLP_VAL_MASK)
#define PINMUX__GPIO24_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO24_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO24_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO24_SLP_OE_SHIFT)) & PINMUX__GPIO24_SLP_OE_MASK)
#define PINMUX__GPIO24_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO24_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO24_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO24_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO24_PIO_PULL_DN_MASK)
#define PINMUX__GPIO24_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO24_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO24_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO24_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO24_PIO_PULL_UP_MASK)
#define PINMUX__GPIO24_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO24_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO24_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO24_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO24_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO25 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO25_FSEL_MASK (0x7U)
#define PINMUX__GPIO25_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO25_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO25_FSEL_SHIFT)) & PINMUX__GPIO25_FSEL_MASK)
#define PINMUX__GPIO25_DI_EN_MASK (0x8U)
#define PINMUX__GPIO25_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO25_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO25_DI_EN_SHIFT)) & PINMUX__GPIO25_DI_EN_MASK)
#define PINMUX__GPIO25_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO25_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO25_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO25_SLP_VAL_SHIFT)) & PINMUX__GPIO25_SLP_VAL_MASK)
#define PINMUX__GPIO25_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO25_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO25_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO25_SLP_OE_SHIFT)) & PINMUX__GPIO25_SLP_OE_MASK)
#define PINMUX__GPIO25_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO25_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO25_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO25_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO25_PIO_PULL_DN_MASK)
#define PINMUX__GPIO25_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO25_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO25_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO25_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO25_PIO_PULL_UP_MASK)
#define PINMUX__GPIO25_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO25_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO25_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO25_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO25_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO26 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO26_FSEL_MASK (0x7U)
#define PINMUX__GPIO26_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO26_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO26_FSEL_SHIFT)) & PINMUX__GPIO26_FSEL_MASK)
#define PINMUX__GPIO26_DI_EN_MASK (0x8U)
#define PINMUX__GPIO26_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO26_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO26_DI_EN_SHIFT)) & PINMUX__GPIO26_DI_EN_MASK)
#define PINMUX__GPIO26_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO26_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO26_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO26_SLP_VAL_SHIFT)) & PINMUX__GPIO26_SLP_VAL_MASK)
#define PINMUX__GPIO26_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO26_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO26_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO26_SLP_OE_SHIFT)) & PINMUX__GPIO26_SLP_OE_MASK)
#define PINMUX__GPIO26_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO26_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO26_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO26_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO26_PIO_PULL_DN_MASK)
#define PINMUX__GPIO26_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO26_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO26_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO26_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO26_PIO_PULL_UP_MASK)
#define PINMUX__GPIO26_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO26_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO26_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO26_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO26_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO27 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO27_FSEL_MASK (0x7U)
#define PINMUX__GPIO27_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO27_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO27_FSEL_SHIFT)) & PINMUX__GPIO27_FSEL_MASK)
#define PINMUX__GPIO27_DI_EN_MASK (0x8U)
#define PINMUX__GPIO27_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO27_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO27_DI_EN_SHIFT)) & PINMUX__GPIO27_DI_EN_MASK)
#define PINMUX__GPIO27_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO27_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO27_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO27_SLP_VAL_SHIFT)) & PINMUX__GPIO27_SLP_VAL_MASK)
#define PINMUX__GPIO27_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO27_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO27_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO27_SLP_OE_SHIFT)) & PINMUX__GPIO27_SLP_OE_MASK)
#define PINMUX__GPIO27_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO27_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO27_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO27_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO27_PIO_PULL_DN_MASK)
#define PINMUX__GPIO27_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO27_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO27_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO27_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO27_PIO_PULL_UP_MASK)
#define PINMUX__GPIO27_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO27_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO27_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO27_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO27_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO28 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO28_FSEL_MASK (0x7U)
#define PINMUX__GPIO28_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO28_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO28_FSEL_SHIFT)) & PINMUX__GPIO28_FSEL_MASK)
#define PINMUX__GPIO28_DI_EN_MASK (0x8U)
#define PINMUX__GPIO28_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO28_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO28_DI_EN_SHIFT)) & PINMUX__GPIO28_DI_EN_MASK)
#define PINMUX__GPIO28_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO28_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO28_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO28_SLP_VAL_SHIFT)) & PINMUX__GPIO28_SLP_VAL_MASK)
#define PINMUX__GPIO28_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO28_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO28_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO28_SLP_OE_SHIFT)) & PINMUX__GPIO28_SLP_OE_MASK)
#define PINMUX__GPIO28_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO28_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO28_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO28_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO28_PIO_PULL_DN_MASK)
#define PINMUX__GPIO28_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO28_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO28_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO28_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO28_PIO_PULL_UP_MASK)
#define PINMUX__GPIO28_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO28_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO28_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO28_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO28_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO29 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO29_FSEL_MASK (0x7U)
#define PINMUX__GPIO29_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO29_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO29_FSEL_SHIFT)) & PINMUX__GPIO29_FSEL_MASK)
#define PINMUX__GPIO29_DI_EN_MASK (0x8U)
#define PINMUX__GPIO29_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO29_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO29_DI_EN_SHIFT)) & PINMUX__GPIO29_DI_EN_MASK)
#define PINMUX__GPIO29_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO29_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO29_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO29_SLP_VAL_SHIFT)) & PINMUX__GPIO29_SLP_VAL_MASK)
#define PINMUX__GPIO29_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO29_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO29_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO29_SLP_OE_SHIFT)) & PINMUX__GPIO29_SLP_OE_MASK)
#define PINMUX__GPIO29_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO29_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO29_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO29_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO29_PIO_PULL_DN_MASK)
#define PINMUX__GPIO29_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO29_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO29_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO29_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO29_PIO_PULL_UP_MASK)
#define PINMUX__GPIO29_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO29_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO29_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO29_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO29_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO30 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO30_FSEL_MASK (0x7U)
#define PINMUX__GPIO30_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO30_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO30_FSEL_SHIFT)) & PINMUX__GPIO30_FSEL_MASK)
#define PINMUX__GPIO30_DI_EN_MASK (0x8U)
#define PINMUX__GPIO30_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO30_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO30_DI_EN_SHIFT)) & PINMUX__GPIO30_DI_EN_MASK)
#define PINMUX__GPIO30_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO30_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO30_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO30_SLP_VAL_SHIFT)) & PINMUX__GPIO30_SLP_VAL_MASK)
#define PINMUX__GPIO30_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO30_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO30_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO30_SLP_OE_SHIFT)) & PINMUX__GPIO30_SLP_OE_MASK)
#define PINMUX__GPIO30_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO30_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO30_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO30_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO30_PIO_PULL_DN_MASK)
#define PINMUX__GPIO30_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO30_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO30_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO30_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO30_PIO_PULL_UP_MASK)
#define PINMUX__GPIO30_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO30_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO30_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO30_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO30_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO31 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO31_FSEL_MASK (0x7U)
#define PINMUX__GPIO31_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO31_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO31_FSEL_SHIFT)) & PINMUX__GPIO31_FSEL_MASK)
#define PINMUX__GPIO31_DI_EN_MASK (0x8U)
#define PINMUX__GPIO31_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO31_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO31_DI_EN_SHIFT)) & PINMUX__GPIO31_DI_EN_MASK)
#define PINMUX__GPIO31_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO31_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO31_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO31_SLP_VAL_SHIFT)) & PINMUX__GPIO31_SLP_VAL_MASK)
#define PINMUX__GPIO31_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO31_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO31_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO31_SLP_OE_SHIFT)) & PINMUX__GPIO31_SLP_OE_MASK)
#define PINMUX__GPIO31_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO31_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO31_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO31_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO31_PIO_PULL_DN_MASK)
#define PINMUX__GPIO31_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO31_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO31_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO31_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO31_PIO_PULL_UP_MASK)
#define PINMUX__GPIO31_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO31_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO31_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO31_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO31_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO32 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO32_FSEL_MASK (0x7U)
#define PINMUX__GPIO32_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO32_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO32_FSEL_SHIFT)) & PINMUX__GPIO32_FSEL_MASK)
#define PINMUX__GPIO32_DI_EN_MASK (0x8U)
#define PINMUX__GPIO32_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO32_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO32_DI_EN_SHIFT)) & PINMUX__GPIO32_DI_EN_MASK)
#define PINMUX__GPIO32_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO32_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO32_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO32_SLP_VAL_SHIFT)) & PINMUX__GPIO32_SLP_VAL_MASK)
#define PINMUX__GPIO32_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO32_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO32_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO32_SLP_OE_SHIFT)) & PINMUX__GPIO32_SLP_OE_MASK)
#define PINMUX__GPIO32_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO32_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO32_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO32_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO32_PIO_PULL_DN_MASK)
#define PINMUX__GPIO32_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO32_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO32_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO32_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO32_PIO_PULL_UP_MASK)
#define PINMUX__GPIO32_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO32_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO32_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO32_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO32_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO33 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO33_FSEL_MASK (0x7U)
#define PINMUX__GPIO33_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO33_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO33_FSEL_SHIFT)) & PINMUX__GPIO33_FSEL_MASK)
#define PINMUX__GPIO33_DI_EN_MASK (0x8U)
#define PINMUX__GPIO33_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO33_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO33_DI_EN_SHIFT)) & PINMUX__GPIO33_DI_EN_MASK)
#define PINMUX__GPIO33_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO33_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO33_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO33_SLP_VAL_SHIFT)) & PINMUX__GPIO33_SLP_VAL_MASK)
#define PINMUX__GPIO33_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO33_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO33_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO33_SLP_OE_SHIFT)) & PINMUX__GPIO33_SLP_OE_MASK)
#define PINMUX__GPIO33_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO33_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO33_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO33_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO33_PIO_PULL_DN_MASK)
#define PINMUX__GPIO33_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO33_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO33_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO33_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO33_PIO_PULL_UP_MASK)
#define PINMUX__GPIO33_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO33_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO33_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO33_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO33_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO34 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO34_FSEL_MASK (0x7U)
#define PINMUX__GPIO34_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO34_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO34_FSEL_SHIFT)) & PINMUX__GPIO34_FSEL_MASK)
#define PINMUX__GPIO34_DI_EN_MASK (0x8U)
#define PINMUX__GPIO34_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO34_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO34_DI_EN_SHIFT)) & PINMUX__GPIO34_DI_EN_MASK)
#define PINMUX__GPIO34_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO34_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO34_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO34_SLP_VAL_SHIFT)) & PINMUX__GPIO34_SLP_VAL_MASK)
#define PINMUX__GPIO34_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO34_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO34_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO34_SLP_OE_SHIFT)) & PINMUX__GPIO34_SLP_OE_MASK)
#define PINMUX__GPIO34_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO34_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO34_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO34_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO34_PIO_PULL_DN_MASK)
#define PINMUX__GPIO34_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO34_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO34_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO34_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO34_PIO_PULL_UP_MASK)
#define PINMUX__GPIO34_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO34_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO34_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO34_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO34_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO35 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO35_FSEL_MASK (0x7U)
#define PINMUX__GPIO35_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO35_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO35_FSEL_SHIFT)) & PINMUX__GPIO35_FSEL_MASK)
#define PINMUX__GPIO35_DI_EN_MASK (0x8U)
#define PINMUX__GPIO35_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO35_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO35_DI_EN_SHIFT)) & PINMUX__GPIO35_DI_EN_MASK)
#define PINMUX__GPIO35_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO35_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO35_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO35_SLP_VAL_SHIFT)) & PINMUX__GPIO35_SLP_VAL_MASK)
#define PINMUX__GPIO35_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO35_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO35_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO35_SLP_OE_SHIFT)) & PINMUX__GPIO35_SLP_OE_MASK)
#define PINMUX__GPIO35_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO35_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO35_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO35_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO35_PIO_PULL_DN_MASK)
#define PINMUX__GPIO35_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO35_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO35_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO35_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO35_PIO_PULL_UP_MASK)
#define PINMUX__GPIO35_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO35_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO35_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO35_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO35_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO36 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO36_FSEL_MASK (0x7U)
#define PINMUX__GPIO36_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO36_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO36_FSEL_SHIFT)) & PINMUX__GPIO36_FSEL_MASK)
#define PINMUX__GPIO36_DI_EN_MASK (0x8U)
#define PINMUX__GPIO36_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO36_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO36_DI_EN_SHIFT)) & PINMUX__GPIO36_DI_EN_MASK)
#define PINMUX__GPIO36_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO36_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO36_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO36_SLP_VAL_SHIFT)) & PINMUX__GPIO36_SLP_VAL_MASK)
#define PINMUX__GPIO36_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO36_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO36_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO36_SLP_OE_SHIFT)) & PINMUX__GPIO36_SLP_OE_MASK)
#define PINMUX__GPIO36_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO36_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO36_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO36_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO36_PIO_PULL_DN_MASK)
#define PINMUX__GPIO36_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO36_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO36_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO36_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO36_PIO_PULL_UP_MASK)
#define PINMUX__GPIO36_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO36_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO36_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO36_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO36_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO37 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO37_FSEL_MASK (0x7U)
#define PINMUX__GPIO37_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO37_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO37_FSEL_SHIFT)) & PINMUX__GPIO37_FSEL_MASK)
#define PINMUX__GPIO37_DI_EN_MASK (0x8U)
#define PINMUX__GPIO37_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO37_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO37_DI_EN_SHIFT)) & PINMUX__GPIO37_DI_EN_MASK)
#define PINMUX__GPIO37_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO37_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO37_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO37_SLP_VAL_SHIFT)) & PINMUX__GPIO37_SLP_VAL_MASK)
#define PINMUX__GPIO37_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO37_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO37_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO37_SLP_OE_SHIFT)) & PINMUX__GPIO37_SLP_OE_MASK)
#define PINMUX__GPIO37_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO37_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO37_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO37_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO37_PIO_PULL_DN_MASK)
#define PINMUX__GPIO37_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO37_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO37_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO37_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO37_PIO_PULL_UP_MASK)
#define PINMUX__GPIO37_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO37_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO37_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO37_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO37_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO38 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO38_FSEL_MASK (0x7U)
#define PINMUX__GPIO38_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO38_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO38_FSEL_SHIFT)) & PINMUX__GPIO38_FSEL_MASK)
#define PINMUX__GPIO38_DI_EN_MASK (0x8U)
#define PINMUX__GPIO38_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO38_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO38_DI_EN_SHIFT)) & PINMUX__GPIO38_DI_EN_MASK)
#define PINMUX__GPIO38_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO38_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO38_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO38_SLP_VAL_SHIFT)) & PINMUX__GPIO38_SLP_VAL_MASK)
#define PINMUX__GPIO38_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO38_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO38_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO38_SLP_OE_SHIFT)) & PINMUX__GPIO38_SLP_OE_MASK)
#define PINMUX__GPIO38_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO38_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO38_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO38_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO38_PIO_PULL_DN_MASK)
#define PINMUX__GPIO38_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO38_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO38_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO38_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO38_PIO_PULL_UP_MASK)
#define PINMUX__GPIO38_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO38_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO38_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO38_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO38_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO39 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO39_FSEL_MASK (0x7U)
#define PINMUX__GPIO39_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO39_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO39_FSEL_SHIFT)) & PINMUX__GPIO39_FSEL_MASK)
#define PINMUX__GPIO39_DI_EN_MASK (0x8U)
#define PINMUX__GPIO39_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO39_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO39_DI_EN_SHIFT)) & PINMUX__GPIO39_DI_EN_MASK)
#define PINMUX__GPIO39_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO39_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO39_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO39_SLP_VAL_SHIFT)) & PINMUX__GPIO39_SLP_VAL_MASK)
#define PINMUX__GPIO39_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO39_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO39_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO39_SLP_OE_SHIFT)) & PINMUX__GPIO39_SLP_OE_MASK)
#define PINMUX__GPIO39_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO39_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO39_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO39_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO39_PIO_PULL_DN_MASK)
#define PINMUX__GPIO39_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO39_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO39_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO39_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO39_PIO_PULL_UP_MASK)
#define PINMUX__GPIO39_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO39_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO39_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO39_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO39_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO40 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO40_FSEL_MASK (0x7U)
#define PINMUX__GPIO40_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO40_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO40_FSEL_SHIFT)) & PINMUX__GPIO40_FSEL_MASK)
#define PINMUX__GPIO40_DI_EN_MASK (0x8U)
#define PINMUX__GPIO40_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO40_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO40_DI_EN_SHIFT)) & PINMUX__GPIO40_DI_EN_MASK)
#define PINMUX__GPIO40_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO40_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO40_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO40_SLP_VAL_SHIFT)) & PINMUX__GPIO40_SLP_VAL_MASK)
#define PINMUX__GPIO40_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO40_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO40_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO40_SLP_OE_SHIFT)) & PINMUX__GPIO40_SLP_OE_MASK)
#define PINMUX__GPIO40_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO40_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO40_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO40_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO40_PIO_PULL_DN_MASK)
#define PINMUX__GPIO40_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO40_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO40_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO40_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO40_PIO_PULL_UP_MASK)
#define PINMUX__GPIO40_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO40_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO40_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO40_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO40_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO41 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO41_FSEL_MASK (0x7U)
#define PINMUX__GPIO41_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO41_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO41_FSEL_SHIFT)) & PINMUX__GPIO41_FSEL_MASK)
#define PINMUX__GPIO41_DI_EN_MASK (0x8U)
#define PINMUX__GPIO41_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO41_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO41_DI_EN_SHIFT)) & PINMUX__GPIO41_DI_EN_MASK)
#define PINMUX__GPIO41_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO41_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO41_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO41_SLP_VAL_SHIFT)) & PINMUX__GPIO41_SLP_VAL_MASK)
#define PINMUX__GPIO41_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO41_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO41_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO41_SLP_OE_SHIFT)) & PINMUX__GPIO41_SLP_OE_MASK)
#define PINMUX__GPIO41_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO41_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO41_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO41_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO41_PIO_PULL_DN_MASK)
#define PINMUX__GPIO41_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO41_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO41_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO41_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO41_PIO_PULL_UP_MASK)
#define PINMUX__GPIO41_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO41_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO41_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO41_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO41_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO42 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO42_FSEL_MASK (0x7U)
#define PINMUX__GPIO42_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO42_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO42_FSEL_SHIFT)) & PINMUX__GPIO42_FSEL_MASK)
#define PINMUX__GPIO42_DI_EN_MASK (0x8U)
#define PINMUX__GPIO42_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO42_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO42_DI_EN_SHIFT)) & PINMUX__GPIO42_DI_EN_MASK)
#define PINMUX__GPIO42_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO42_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO42_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO42_SLP_VAL_SHIFT)) & PINMUX__GPIO42_SLP_VAL_MASK)
#define PINMUX__GPIO42_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO42_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO42_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO42_SLP_OE_SHIFT)) & PINMUX__GPIO42_SLP_OE_MASK)
#define PINMUX__GPIO42_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO42_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO42_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO42_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO42_PIO_PULL_DN_MASK)
#define PINMUX__GPIO42_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO42_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO42_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO42_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO42_PIO_PULL_UP_MASK)
#define PINMUX__GPIO42_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO42_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO42_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO42_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO42_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO43 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO43_FSEL_MASK (0x7U)
#define PINMUX__GPIO43_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO43_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO43_FSEL_SHIFT)) & PINMUX__GPIO43_FSEL_MASK)
#define PINMUX__GPIO43_DI_EN_MASK (0x8U)
#define PINMUX__GPIO43_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO43_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO43_DI_EN_SHIFT)) & PINMUX__GPIO43_DI_EN_MASK)
#define PINMUX__GPIO43_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO43_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO43_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO43_SLP_VAL_SHIFT)) & PINMUX__GPIO43_SLP_VAL_MASK)
#define PINMUX__GPIO43_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO43_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO43_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO43_SLP_OE_SHIFT)) & PINMUX__GPIO43_SLP_OE_MASK)
#define PINMUX__GPIO43_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO43_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO43_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO43_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO43_PIO_PULL_DN_MASK)
#define PINMUX__GPIO43_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO43_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO43_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO43_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO43_PIO_PULL_UP_MASK)
#define PINMUX__GPIO43_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO43_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO43_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO43_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO43_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO44 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO44_FSEL_MASK (0x7U)
#define PINMUX__GPIO44_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO44_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO44_FSEL_SHIFT)) & PINMUX__GPIO44_FSEL_MASK)
#define PINMUX__GPIO44_DI_EN_MASK (0x8U)
#define PINMUX__GPIO44_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO44_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO44_DI_EN_SHIFT)) & PINMUX__GPIO44_DI_EN_MASK)
#define PINMUX__GPIO44_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO44_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO44_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO44_SLP_VAL_SHIFT)) & PINMUX__GPIO44_SLP_VAL_MASK)
#define PINMUX__GPIO44_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO44_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO44_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO44_SLP_OE_SHIFT)) & PINMUX__GPIO44_SLP_OE_MASK)
#define PINMUX__GPIO44_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO44_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO44_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO44_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO44_PIO_PULL_DN_MASK)
#define PINMUX__GPIO44_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO44_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO44_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO44_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO44_PIO_PULL_UP_MASK)
#define PINMUX__GPIO44_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO44_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO44_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO44_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO44_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO45 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO45_FSEL_MASK (0x7U)
#define PINMUX__GPIO45_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO45_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO45_FSEL_SHIFT)) & PINMUX__GPIO45_FSEL_MASK)
#define PINMUX__GPIO45_DI_EN_MASK (0x8U)
#define PINMUX__GPIO45_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO45_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO45_DI_EN_SHIFT)) & PINMUX__GPIO45_DI_EN_MASK)
#define PINMUX__GPIO45_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO45_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO45_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO45_SLP_VAL_SHIFT)) & PINMUX__GPIO45_SLP_VAL_MASK)
#define PINMUX__GPIO45_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO45_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO45_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO45_SLP_OE_SHIFT)) & PINMUX__GPIO45_SLP_OE_MASK)
#define PINMUX__GPIO45_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO45_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO45_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO45_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO45_PIO_PULL_DN_MASK)
#define PINMUX__GPIO45_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO45_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO45_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO45_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO45_PIO_PULL_UP_MASK)
#define PINMUX__GPIO45_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO45_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO45_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO45_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO45_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO46 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO46_FSEL_MASK (0x7U)
#define PINMUX__GPIO46_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO46_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO46_FSEL_SHIFT)) & PINMUX__GPIO46_FSEL_MASK)
#define PINMUX__GPIO46_DI_EN_MASK (0x8U)
#define PINMUX__GPIO46_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO46_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO46_DI_EN_SHIFT)) & PINMUX__GPIO46_DI_EN_MASK)
#define PINMUX__GPIO46_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO46_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO46_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO46_SLP_VAL_SHIFT)) & PINMUX__GPIO46_SLP_VAL_MASK)
#define PINMUX__GPIO46_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO46_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO46_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO46_SLP_OE_SHIFT)) & PINMUX__GPIO46_SLP_OE_MASK)
#define PINMUX__GPIO46_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO46_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO46_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO46_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO46_PIO_PULL_DN_MASK)
#define PINMUX__GPIO46_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO46_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO46_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO46_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO46_PIO_PULL_UP_MASK)
#define PINMUX__GPIO46_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO46_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO46_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO46_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO46_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO47 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO47_FSEL_MASK (0x7U)
#define PINMUX__GPIO47_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO47_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO47_FSEL_SHIFT)) & PINMUX__GPIO47_FSEL_MASK)
#define PINMUX__GPIO47_DI_EN_MASK (0x8U)
#define PINMUX__GPIO47_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO47_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO47_DI_EN_SHIFT)) & PINMUX__GPIO47_DI_EN_MASK)
#define PINMUX__GPIO47_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO47_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO47_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO47_SLP_VAL_SHIFT)) & PINMUX__GPIO47_SLP_VAL_MASK)
#define PINMUX__GPIO47_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO47_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO47_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO47_SLP_OE_SHIFT)) & PINMUX__GPIO47_SLP_OE_MASK)
#define PINMUX__GPIO47_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO47_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO47_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO47_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO47_PIO_PULL_DN_MASK)
#define PINMUX__GPIO47_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO47_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO47_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO47_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO47_PIO_PULL_UP_MASK)
#define PINMUX__GPIO47_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO47_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO47_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO47_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO47_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO48 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO48_FSEL_MASK (0x7U)
#define PINMUX__GPIO48_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO48_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO48_FSEL_SHIFT)) & PINMUX__GPIO48_FSEL_MASK)
#define PINMUX__GPIO48_DI_EN_MASK (0x8U)
#define PINMUX__GPIO48_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO48_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO48_DI_EN_SHIFT)) & PINMUX__GPIO48_DI_EN_MASK)
#define PINMUX__GPIO48_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO48_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO48_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO48_SLP_VAL_SHIFT)) & PINMUX__GPIO48_SLP_VAL_MASK)
#define PINMUX__GPIO48_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO48_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO48_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO48_SLP_OE_SHIFT)) & PINMUX__GPIO48_SLP_OE_MASK)
#define PINMUX__GPIO48_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO48_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO48_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO48_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO48_PIO_PULL_DN_MASK)
#define PINMUX__GPIO48_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO48_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO48_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO48_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO48_PIO_PULL_UP_MASK)
#define PINMUX__GPIO48_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO48_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO48_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO48_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO48_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO49 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO49_FSEL_MASK (0x7U)
#define PINMUX__GPIO49_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO49_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO49_FSEL_SHIFT)) & PINMUX__GPIO49_FSEL_MASK)
#define PINMUX__GPIO49_DI_EN_MASK (0x8U)
#define PINMUX__GPIO49_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO49_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO49_DI_EN_SHIFT)) & PINMUX__GPIO49_DI_EN_MASK)
#define PINMUX__GPIO49_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO49_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO49_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO49_SLP_VAL_SHIFT)) & PINMUX__GPIO49_SLP_VAL_MASK)
#define PINMUX__GPIO49_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO49_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO49_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO49_SLP_OE_SHIFT)) & PINMUX__GPIO49_SLP_OE_MASK)
#define PINMUX__GPIO49_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO49_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO49_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO49_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO49_PIO_PULL_DN_MASK)
#define PINMUX__GPIO49_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO49_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO49_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO49_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO49_PIO_PULL_UP_MASK)
#define PINMUX__GPIO49_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO49_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO49_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO49_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO49_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO50 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO50_FSEL_MASK (0x7U)
#define PINMUX__GPIO50_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO50_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO50_FSEL_SHIFT)) & PINMUX__GPIO50_FSEL_MASK)
#define PINMUX__GPIO50_DI_EN_MASK (0x8U)
#define PINMUX__GPIO50_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO50_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO50_DI_EN_SHIFT)) & PINMUX__GPIO50_DI_EN_MASK)
#define PINMUX__GPIO50_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO50_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO50_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO50_SLP_VAL_SHIFT)) & PINMUX__GPIO50_SLP_VAL_MASK)
#define PINMUX__GPIO50_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO50_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO50_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO50_SLP_OE_SHIFT)) & PINMUX__GPIO50_SLP_OE_MASK)
#define PINMUX__GPIO50_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO50_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO50_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO50_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO50_PIO_PULL_DN_MASK)
#define PINMUX__GPIO50_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO50_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO50_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO50_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO50_PIO_PULL_UP_MASK)
#define PINMUX__GPIO50_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO50_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO50_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO50_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO50_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO51 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO51_FSEL_MASK (0x7U)
#define PINMUX__GPIO51_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO51_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO51_FSEL_SHIFT)) & PINMUX__GPIO51_FSEL_MASK)
#define PINMUX__GPIO51_DI_EN_MASK (0x8U)
#define PINMUX__GPIO51_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO51_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO51_DI_EN_SHIFT)) & PINMUX__GPIO51_DI_EN_MASK)
#define PINMUX__GPIO51_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO51_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO51_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO51_SLP_VAL_SHIFT)) & PINMUX__GPIO51_SLP_VAL_MASK)
#define PINMUX__GPIO51_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO51_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO51_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO51_SLP_OE_SHIFT)) & PINMUX__GPIO51_SLP_OE_MASK)
#define PINMUX__GPIO51_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO51_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO51_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO51_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO51_PIO_PULL_DN_MASK)
#define PINMUX__GPIO51_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO51_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO51_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO51_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO51_PIO_PULL_UP_MASK)
#define PINMUX__GPIO51_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO51_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO51_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO51_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO51_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO52 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO52_FSEL_MASK (0x7U)
#define PINMUX__GPIO52_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO52_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO52_FSEL_SHIFT)) & PINMUX__GPIO52_FSEL_MASK)
#define PINMUX__GPIO52_DI_EN_MASK (0x8U)
#define PINMUX__GPIO52_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO52_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO52_DI_EN_SHIFT)) & PINMUX__GPIO52_DI_EN_MASK)
#define PINMUX__GPIO52_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO52_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO52_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO52_SLP_VAL_SHIFT)) & PINMUX__GPIO52_SLP_VAL_MASK)
#define PINMUX__GPIO52_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO52_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO52_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO52_SLP_OE_SHIFT)) & PINMUX__GPIO52_SLP_OE_MASK)
#define PINMUX__GPIO52_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO52_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO52_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO52_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO52_PIO_PULL_DN_MASK)
#define PINMUX__GPIO52_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO52_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO52_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO52_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO52_PIO_PULL_UP_MASK)
#define PINMUX__GPIO52_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO52_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO52_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO52_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO52_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO53 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO53_FSEL_MASK (0x7U)
#define PINMUX__GPIO53_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO53_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO53_FSEL_SHIFT)) & PINMUX__GPIO53_FSEL_MASK)
#define PINMUX__GPIO53_DI_EN_MASK (0x8U)
#define PINMUX__GPIO53_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO53_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO53_DI_EN_SHIFT)) & PINMUX__GPIO53_DI_EN_MASK)
#define PINMUX__GPIO53_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO53_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO53_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO53_SLP_VAL_SHIFT)) & PINMUX__GPIO53_SLP_VAL_MASK)
#define PINMUX__GPIO53_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO53_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO53_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO53_SLP_OE_SHIFT)) & PINMUX__GPIO53_SLP_OE_MASK)
#define PINMUX__GPIO53_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO53_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO53_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO53_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO53_PIO_PULL_DN_MASK)
#define PINMUX__GPIO53_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO53_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO53_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO53_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO53_PIO_PULL_UP_MASK)
#define PINMUX__GPIO53_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO53_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO53_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO53_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO53_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO54 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO54_FSEL_MASK (0x7U)
#define PINMUX__GPIO54_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO54_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO54_FSEL_SHIFT)) & PINMUX__GPIO54_FSEL_MASK)
#define PINMUX__GPIO54_DI_EN_MASK (0x8U)
#define PINMUX__GPIO54_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO54_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO54_DI_EN_SHIFT)) & PINMUX__GPIO54_DI_EN_MASK)
#define PINMUX__GPIO54_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO54_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO54_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO54_SLP_VAL_SHIFT)) & PINMUX__GPIO54_SLP_VAL_MASK)
#define PINMUX__GPIO54_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO54_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO54_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO54_SLP_OE_SHIFT)) & PINMUX__GPIO54_SLP_OE_MASK)
#define PINMUX__GPIO54_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO54_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO54_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO54_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO54_PIO_PULL_DN_MASK)
#define PINMUX__GPIO54_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO54_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO54_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO54_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO54_PIO_PULL_UP_MASK)
#define PINMUX__GPIO54_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO54_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO54_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO54_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO54_PIO_PULL_SEL_MASK)
/*! @} */

/*! @name _GPIO55 - padring pin Register */
/*! @{ */
#define PINMUX__GPIO55_FSEL_MASK (0x7U)
#define PINMUX__GPIO55_FSEL_SHIFT (0U)
/*! FSEL - padring function select
 */
#define PINMUX__GPIO55_FSEL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO55_FSEL_SHIFT)) & PINMUX__GPIO55_FSEL_MASK)
#define PINMUX__GPIO55_DI_EN_MASK (0x8U)
#define PINMUX__GPIO55_DI_EN_SHIFT (3U)
/*! DI_EN - input enable control
 *  0b0..receiver will be tri-stated
 *  0b1..receive data from PAD
 */
#define PINMUX__GPIO55_DI_EN(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO55_DI_EN_SHIFT)) & PINMUX__GPIO55_DI_EN_MASK)
#define PINMUX__GPIO55_SLP_VAL_MASK (0x10U)
#define PINMUX__GPIO55_SLP_VAL_SHIFT (4U)
/*! SLP_VAL - reserved for test purpose
 */
#define PINMUX__GPIO55_SLP_VAL(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO55_SLP_VAL_SHIFT)) & PINMUX__GPIO55_SLP_VAL_MASK)
#define PINMUX__GPIO55_SLP_OE_MASK (0x20U)
#define PINMUX__GPIO55_SLP_OE_SHIFT (5U)
/*! SLP_OE - reserved for test purpose
 */
#define PINMUX__GPIO55_SLP_OE(x) (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO55_SLP_OE_SHIFT)) & PINMUX__GPIO55_SLP_OE_MASK)
#define PINMUX__GPIO55_PIO_PULL_DN_MASK (0x2000U)
#define PINMUX__GPIO55_PIO_PULL_DN_SHIFT (13U)
/*! PIO_PULL_DN - pull-down enable
 *  0b0..pull-down disabled
 *  0b1..pull-down enabled
 */
#define PINMUX__GPIO55_PIO_PULL_DN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO55_PIO_PULL_DN_SHIFT)) & PINMUX__GPIO55_PIO_PULL_DN_MASK)
#define PINMUX__GPIO55_PIO_PULL_UP_MASK (0x4000U)
#define PINMUX__GPIO55_PIO_PULL_UP_SHIFT (14U)
/*! PIO_PULL_UP - pull-up enable
 *  0b0..pull-up disabled
 *  0b1..pull-up enabled
 */
#define PINMUX__GPIO55_PIO_PULL_UP(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO55_PIO_PULL_UP_SHIFT)) & PINMUX__GPIO55_PIO_PULL_UP_MASK)
#define PINMUX__GPIO55_PIO_PULL_SEL_MASK (0x8000U)
#define PINMUX__GPIO55_PIO_PULL_SEL_SHIFT (15U)
/*! PIO_PULL_SEL - custom pull-up and -down configuration control
 *  0b0..pull-up and pull-down from io_mux
 *  0b1..pull-up and pull-down from bits [14:13]
 */
#define PINMUX__GPIO55_PIO_PULL_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PINMUX__GPIO55_PIO_PULL_SEL_SHIFT)) & PINMUX__GPIO55_PIO_PULL_SEL_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group PINMUX_Register_Masks */

/* PINMUX - Peripheral instance base addresses */
/** Peripheral PIN_MUX base address */
#define PIN_MUX_BASE (0x48010000u)
/** Peripheral PIN_MUX base pointer */
#define PIN_MUX ((PINMUX_Type *) PIN_MUX_BASE)
/** Array initializer of PINMUX peripheral base addresses */
#define PINMUX_BASE_ADDRS                                                                                                          \
    {                                                                                                                              \
        PIN_MUX_BASE                                                                                                               \
    }
/** Array initializer of PINMUX peripheral base pointers */
#define PINMUX_BASE_PTRS                                                                                                           \
    {                                                                                                                              \
        PIN_MUX                                                                                                                    \
    }

/*!
 * @}
 */ /* end of group PINMUX_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- PMU Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMU_Peripheral_Access_Layer PMU Peripheral Access Layer
 * @{
 */

/** PMU - Register Layout Typedef */
typedef struct
{
    __O uint32_t PWR_MODE;          /**< Power mode control register, offset: 0x0 */
    __IO uint32_t BOOT_JTAG;        /**< BOOT_JTAG register, offset: 0x4 */
    __I uint32_t LAST_RST_CAUSE;    /**< Last Reset Cause Register, offset: 0x8 */
    __IO uint32_t LAST_RST_CLR;     /**< Last Reset Cause Clear Register, offset: 0xC */
    __IO uint32_t WAKE_SRC_CLR;     /**< Wake up source clear register, offset: 0x10 */
    __I uint32_t PWR_MODE_STATUS;   /**< Power mode status register, offset: 0x14 */
    __IO uint32_t CLK_SRC;          /**< Clock source selection register, offset: 0x18 */
    __I uint32_t WAKEUP_STATUS;     /**< Wakeup status register, offset: 0x1C */
    __IO uint32_t PMIP_BRN_INT_SEL; /**< PMIP Brown Interrupt Select, offset: 0x20 */
    uint8_t RESERVED_0[4];
    __I uint32_t CLK_RDY;     /**< Clock ready register, offset: 0x28 */
    __IO uint32_t RC32M_CTRL; /**< RC 32M control Register, offset: 0x2C */
    uint8_t RESERVED_1[4];
    __IO uint32_t SFLL_CTRL1;    /**< SFLL control register 1, offset: 0x34 */
    __IO uint32_t ANA_GRP_CTRL0; /**< Analog group control register, offset: 0x38 */
    __IO uint32_t SFLL_CTRL0;    /**< SFLL control register 2, offset: 0x3C */
    __IO uint32_t PWR_CFG;       /**< Power configuration register, offset: 0x40 */
    __I uint32_t PWR_STAT;       /**< Power status register, offset: 0x44 */
    __IO uint32_t WF_OPT0;       /**< WF OPT Power-Saving register 0, offset: 0x48 */
    __IO uint32_t WF_OPT1;       /**< WF OPT Power-Saving register 1, offset: 0x4C */
    uint8_t RESERVED_2[4];
    __IO uint32_t PMIP_BRN_CFG;    /**< Brownout configuration register, offset: 0x54 */
    __IO uint32_t AUPLL_LOCK;      /**< AUPLL lock status register, offset: 0x58 */
    __IO uint32_t ANA_GRP_CTRL1;   /**< BG control register, offset: 0x5C */
    __IO uint32_t PMIP_PWR_CONFIG; /**< Power Configuration register, offset: 0x60 */
    uint8_t RESERVED_3[8];
    __IO uint32_t PMIP_TEST; /**< PMIP test register, offset: 0x6C */
    uint8_t RESERVED_4[8];
    __IO uint32_t AUPLL_CTRL0;       /**< Audio PLL control register, offset: 0x78 */
    __IO uint32_t PERI_CLK_EN;       /**< Peripheral clock enable register, offset: 0x7C */
    __IO uint32_t UART_FAST_CLK_DIV; /**< UART fast clock div register, offset: 0x80 */
    __IO uint32_t UART_SLOW_CLK_DIV; /**< UART slow clock div register, offset: 0x84 */
    __IO uint32_t UART_CLK_SEL;      /**< UART clock select register, offset: 0x88 */
    __IO uint32_t MCU_CORE_CLK_DIV;  /**< MCU CORE clock divider ratio register, offset: 0x8C */
    __IO uint32_t PERI0_CLK_DIV;     /**< Peripheral0 clock divider ratio register, offset: 0x90 */
    __IO uint32_t PERI1_CLK_DIV;     /**< Peripheral1 clock divider ratio register, offset: 0x94 */
    __IO uint32_t PERI2_CLK_DIV;     /**< Peripheral2 Clock Divider Ratio Register, offset: 0x98 */
    __IO uint32_t CAU_CLK_SEL;       /**< select signal for CAU MCLK register, offset: 0x9C */
    __IO uint32_t LOW_PWR_CTRL;      /**< low power control in PM3/PM4 mode register, offset: 0xA0 */
    __IO uint32_t IO_PAD_PWR_CFG;    /**< I/O Pad Power configuration register, offset: 0xA4 */
    __IO uint32_t EXT_SEL_REG0;      /**< extra interrupt select register 0, offset: 0xA8 */
    uint8_t RESERVED_5[4];
    __IO uint32_t AUPLL_CTRL1;      /**< USB and audio PLL control register, offset: 0xB0 */
    __IO uint32_t CAU_CTRL;         /**< CAU Control Register, offset: 0xB4 */
    __IO uint32_t RC32K_CTRL0;      /**< RC32k Control 0 Register, offset: 0xB8 */
    __IO uint32_t RC32K_CTRL1;      /**< RC32k Control 1 Register, offset: 0xBC */
    __IO uint32_t XTAL32K_CTRL;     /**< XTAL32k Control Register, offset: 0xC0 */
    __IO uint32_t PMIP_CMP_CTRL;    /**< PMIP Comparator Control Register, offset: 0xC4 */
    __IO uint32_t PMIP_BRNDET_AV18; /**< PMIP Brownout AV18 Register, offset: 0xC8 */
    uint8_t RESERVED_6[4];
    __IO uint32_t PMIP_BRNDET_VBAT;   /**< PMIP Brownout VBAT Register, offset: 0xD0 */
    __IO uint32_t PMIP_BRNDET_V12;    /**< PMIP Brownout V12 Register, offset: 0xD4 */
    __IO uint32_t PMIP_LDO_CTRL;      /**< PMIP LDO Control Register, offset: 0xD8 */
    __IO uint32_t PERI_CLK_SRC;       /**< PERI Clock Source Register, offset: 0xDC */
    __IO uint32_t PMIP_RSVD;          /**< Unused Register, offset: 0xE0 */
    __IO uint32_t GPT0_CTRL;          /**< GPT0 Control Register, offset: 0xE4 */
    __IO uint32_t GPT1_CTRL;          /**< GPT1 Control Register, offset: 0xE8 */
    __IO uint32_t GPT2_CTRL;          /**< GPT2 Control Register, offset: 0xEC */
    __IO uint32_t GPT3_CTRL;          /**< GPT3 Control Register, offset: 0xF0 */
    __IO uint32_t WAKEUP_EDGE_DETECT; /**< Wakeup Edge Detect Register, offset: 0xF4 */
    __IO uint32_t AON_CLK_CTRL;       /**< AON Clock Control Register, offset: 0xF8 */
    __IO uint32_t PERI3_CTRL;         /**< PERI3 Control Register, offset: 0xFC */
    __IO uint32_t IO_LPM_G03_;        /**< I/O LPM G03 Register, offset: 0x100 */
    __IO uint32_t IO_LPM_G47_;        /**< I/O LPM G47 Register, offset: 0x104 */
    __IO uint32_t IO_LPM_G811_;       /**< I/O LPM G811 Register, offset: 0x108 */
    __IO uint32_t IO_LPM_G1215_;      /**< I/O LPM G1215 Register, offset: 0x10C */
    __IO uint32_t IO_LPM_G1617_;      /**< I/O LPM G1617 Register, offset: 0x110 */
    __IO uint32_t WAKEUP_MASK;        /**< Wakeup Mask Interrupt Register, offset: 0x114 */
    __IO uint32_t WLAN_CTRL;          /**< WLAN Control Register, offset: 0x118 */
    __IO uint32_t WLAN_CTRL1;         /**< WLAN Control 1 Register, offset: 0x11C */
} PMU_Type;

/* ----------------------------------------------------------------------------
   -- PMU Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PMU_Register_Masks PMU Register Masks
 * @{
 */

/*! @name PWR_MODE - Power mode control register */
/*! @{ */
#define PMU_PWR_MODE_PWR_MODE_MASK (0x3U)
#define PMU_PWR_MODE_PWR_MODE_SHIFT (0U)
/*! pwr_mode - Power mode switch
 *  0b00..PM0 or PM1
 *  0b01..
 *  0b10..
 *  0b11..
 */
#define PMU_PWR_MODE_PWR_MODE(x) (((uint32_t)(((uint32_t)(x)) << PMU_PWR_MODE_PWR_MODE_SHIFT)) & PMU_PWR_MODE_PWR_MODE_MASK)
/*! @} */

/*! @name BOOT_JTAG - BOOT_JTAG register */
/*! @{ */
#define PMU_BOOT_JTAG_JTAG_EN_MASK (0x1U)
#define PMU_BOOT_JTAG_JTAG_EN_SHIFT (0U)
/*! jtag_en - JTAG Enable
 *  0b0..disable JTAG
 *  0b1..enable JTAG
 */
#define PMU_BOOT_JTAG_JTAG_EN(x) (((uint32_t)(((uint32_t)(x)) << PMU_BOOT_JTAG_JTAG_EN_SHIFT)) & PMU_BOOT_JTAG_JTAG_EN_MASK)
#define PMU_BOOT_JTAG_BOOT_MODE_REG_MASK (0x6U)
#define PMU_BOOT_JTAG_BOOT_MODE_REG_SHIFT (1U)
/*! boot_mode_reg - Boot Mode
 *  0b00..do not boot from Flash
 *  0b01..boot from Flash
 */
#define PMU_BOOT_JTAG_BOOT_MODE_REG(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_BOOT_JTAG_BOOT_MODE_REG_SHIFT)) & PMU_BOOT_JTAG_BOOT_MODE_REG_MASK)
#define PMU_BOOT_JTAG_FLASH_OPT_MASK (0x8U)
#define PMU_BOOT_JTAG_FLASH_OPT_SHIFT (3U)
/*! flash_opt - Flash opt
 *  0b0..chip with Flash
 *  0b1..chip without Flash
 */
#define PMU_BOOT_JTAG_FLASH_OPT(x) (((uint32_t)(((uint32_t)(x)) << PMU_BOOT_JTAG_FLASH_OPT_SHIFT)) & PMU_BOOT_JTAG_FLASH_OPT_MASK)
/*! @} */

/*! @name LAST_RST_CAUSE - Last Reset Cause Register */
/*! @{ */
#define PMU_LAST_RST_CAUSE_BROWNOUT_VBAT_MASK (0x1U)
#define PMU_LAST_RST_CAUSE_BROWNOUT_VBAT_SHIFT (0U)
/*! brownout_vbat - VBAT power brownout
 *  0b0..VBAT power brownout not detected
 *  0b1..VBAT power brownout detected
 */
#define PMU_LAST_RST_CAUSE_BROWNOUT_VBAT(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CAUSE_BROWNOUT_VBAT_SHIFT)) & PMU_LAST_RST_CAUSE_BROWNOUT_VBAT_MASK)
#define PMU_LAST_RST_CAUSE_BROWNOUT_V12_MASK (0x2U)
#define PMU_LAST_RST_CAUSE_BROWNOUT_V12_SHIFT (1U)
/*! brownout_v12 - AV12 power brownout
 *  0b0..AV12 power brownout not detected
 *  0b1..AV12 power brownout detected
 */
#define PMU_LAST_RST_CAUSE_BROWNOUT_V12(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CAUSE_BROWNOUT_V12_SHIFT)) & PMU_LAST_RST_CAUSE_BROWNOUT_V12_MASK)
#define PMU_LAST_RST_CAUSE_BROWNOUT_AV18_MASK (0x4U)
#define PMU_LAST_RST_CAUSE_BROWNOUT_AV18_SHIFT (2U)
/*! brownout_av18 - AV18 power brownout
 *  0b0..AV18 power brownout not detected
 *  0b1..AV18 power brownout detected
 */
#define PMU_LAST_RST_CAUSE_BROWNOUT_AV18(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CAUSE_BROWNOUT_AV18_SHIFT)) & PMU_LAST_RST_CAUSE_BROWNOUT_AV18_MASK)
#define PMU_LAST_RST_CAUSE_CM3_SYSRESETREQ_MASK (0x8U)
#define PMU_LAST_RST_CAUSE_CM3_SYSRESETREQ_SHIFT (3U)
/*! cm3_sysresetreq - CM3 System software reset request
 *  0b0..reset cause is not system software reset request
 *  0b1..reset cause is system software reset request
 */
#define PMU_LAST_RST_CAUSE_CM3_SYSRESETREQ(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CAUSE_CM3_SYSRESETREQ_SHIFT)) & PMU_LAST_RST_CAUSE_CM3_SYSRESETREQ_MASK)
#define PMU_LAST_RST_CAUSE_CM3_LOCKUP_MASK (0x10U)
#define PMU_LAST_RST_CAUSE_CM3_LOCKUP_SHIFT (4U)
/*! cm3_lockup - CM3 Lockup
 *  0b0..reset cause is not lockup
 *  0b1..reset cause is lockup
 */
#define PMU_LAST_RST_CAUSE_CM3_LOCKUP(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CAUSE_CM3_LOCKUP_SHIFT)) & PMU_LAST_RST_CAUSE_CM3_LOCKUP_MASK)
#define PMU_LAST_RST_CAUSE_WDT_RST_MASK (0x20U)
#define PMU_LAST_RST_CAUSE_WDT_RST_SHIFT (5U)
/*! wdt_rst - WDT Reset
 *  0b0..reset cause is not watchdog timer
 *  0b1..reset cause is watchdog timer
 */
#define PMU_LAST_RST_CAUSE_WDT_RST(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CAUSE_WDT_RST_SHIFT)) & PMU_LAST_RST_CAUSE_WDT_RST_MASK)
/*! @} */

/*! @name LAST_RST_CLR - Last Reset Cause Clear Register */
/*! @{ */
#define PMU_LAST_RST_CLR_BROWNOUT_VBAT_CLR_MASK (0x1U)
#define PMU_LAST_RST_CLR_BROWNOUT_VBAT_CLR_SHIFT (0U)
/*! brownout_vbat_clr - Brownout VBAT Clear
 */
#define PMU_LAST_RST_CLR_BROWNOUT_VBAT_CLR(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CLR_BROWNOUT_VBAT_CLR_SHIFT)) & PMU_LAST_RST_CLR_BROWNOUT_VBAT_CLR_MASK)
#define PMU_LAST_RST_CLR_BROWNOUT_V12_CLR_MASK (0x2U)
#define PMU_LAST_RST_CLR_BROWNOUT_V12_CLR_SHIFT (1U)
/*! brownout_v12_clr - Brownout V12 Clear
 */
#define PMU_LAST_RST_CLR_BROWNOUT_V12_CLR(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CLR_BROWNOUT_V12_CLR_SHIFT)) & PMU_LAST_RST_CLR_BROWNOUT_V12_CLR_MASK)
#define PMU_LAST_RST_CLR_BROWNOUT_AV18_CLR_MASK (0x4U)
#define PMU_LAST_RST_CLR_BROWNOUT_AV18_CLR_SHIFT (2U)
/*! brownout_av18_clr - Brownout V18 Clear
 */
#define PMU_LAST_RST_CLR_BROWNOUT_AV18_CLR(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CLR_BROWNOUT_AV18_CLR_SHIFT)) & PMU_LAST_RST_CLR_BROWNOUT_AV18_CLR_MASK)
#define PMU_LAST_RST_CLR_CM3_SYSRESETREQ_CLR_MASK (0x8U)
#define PMU_LAST_RST_CLR_CM3_SYSRESETREQ_CLR_SHIFT (3U)
/*! cm3_sysresetreq_clr - Clear system reset request
 */
#define PMU_LAST_RST_CLR_CM3_SYSRESETREQ_CLR(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CLR_CM3_SYSRESETREQ_CLR_SHIFT)) & PMU_LAST_RST_CLR_CM3_SYSRESETREQ_CLR_MASK)
#define PMU_LAST_RST_CLR_CM3_LOCKUP_CLR_MASK (0x10U)
#define PMU_LAST_RST_CLR_CM3_LOCKUP_CLR_SHIFT (4U)
/*! cm3_lockup_clr - Clear lockup request
 */
#define PMU_LAST_RST_CLR_CM3_LOCKUP_CLR(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CLR_CM3_LOCKUP_CLR_SHIFT)) & PMU_LAST_RST_CLR_CM3_LOCKUP_CLR_MASK)
#define PMU_LAST_RST_CLR_WDT_RST_CLR_MASK (0x20U)
#define PMU_LAST_RST_CLR_WDT_RST_CLR_SHIFT (5U)
/*! wdt_rst_clr - Clear watchdog timer reset request
 */
#define PMU_LAST_RST_CLR_WDT_RST_CLR(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_LAST_RST_CLR_WDT_RST_CLR_SHIFT)) & PMU_LAST_RST_CLR_WDT_RST_CLR_MASK)
/*! @} */

/*! @name WAKE_SRC_CLR - Wake up source clear register */
/*! @{ */
#define PMU_WAKE_SRC_CLR_CLR_PIN0_INT_MASK (0x1U)
#define PMU_WAKE_SRC_CLR_CLR_PIN0_INT_SHIFT (0U)
/*! clr_pin0_int - Clear Pin0 interrupt request
 */
#define PMU_WAKE_SRC_CLR_CLR_PIN0_INT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKE_SRC_CLR_CLR_PIN0_INT_SHIFT)) & PMU_WAKE_SRC_CLR_CLR_PIN0_INT_MASK)
#define PMU_WAKE_SRC_CLR_CLR_PIN1_INT_MASK (0x2U)
#define PMU_WAKE_SRC_CLR_CLR_PIN1_INT_SHIFT (1U)
/*! clr_pin1_int - Clear Pin1 interrupt request
 */
#define PMU_WAKE_SRC_CLR_CLR_PIN1_INT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKE_SRC_CLR_CLR_PIN1_INT_SHIFT)) & PMU_WAKE_SRC_CLR_CLR_PIN1_INT_MASK)
#define PMU_WAKE_SRC_CLR_CLR_WL_INT_MASK (0x4U)
#define PMU_WAKE_SRC_CLR_CLR_WL_INT_SHIFT (2U)
/*! clr_wl_int - Clear WL interrupt request
 */
#define PMU_WAKE_SRC_CLR_CLR_WL_INT(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKE_SRC_CLR_CLR_WL_INT_SHIFT)) & PMU_WAKE_SRC_CLR_CLR_WL_INT_MASK)
#define PMU_WAKE_SRC_CLR_CLR_RTC_INT_MASK (0x8U)
#define PMU_WAKE_SRC_CLR_CLR_RTC_INT_SHIFT (3U)
/*! clr_rtc_int - Clear RTC interrupt request
 */
#define PMU_WAKE_SRC_CLR_CLR_RTC_INT(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKE_SRC_CLR_CLR_RTC_INT_SHIFT)) & PMU_WAKE_SRC_CLR_CLR_RTC_INT_MASK)
#define PMU_WAKE_SRC_CLR_CLR_COMP_INT_MASK (0x10U)
#define PMU_WAKE_SRC_CLR_CLR_COMP_INT_SHIFT (4U)
/*! clr_comp_int - Clear PMIP comp interrupt request
 */
#define PMU_WAKE_SRC_CLR_CLR_COMP_INT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKE_SRC_CLR_CLR_COMP_INT_SHIFT)) & PMU_WAKE_SRC_CLR_CLR_COMP_INT_MASK)
/*! @} */

/*! @name PWR_MODE_STATUS - Power mode status register */
/*! @{ */
#define PMU_PWR_MODE_STATUS_PWR_MODE_STATUS_MASK (0x3U)
#define PMU_PWR_MODE_STATUS_PWR_MODE_STATUS_SHIFT (0U)
/*! pwr_mode_status - Power mode status
 *  0b00..reset the power system
 *  0b01..do not reset the power system
 */
#define PMU_PWR_MODE_STATUS_PWR_MODE_STATUS(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PWR_MODE_STATUS_PWR_MODE_STATUS_SHIFT)) & PMU_PWR_MODE_STATUS_PWR_MODE_STATUS_MASK)
/*! @} */

/*! @name CLK_SRC - Clock source selection register */
/*! @{ */
#define PMU_CLK_SRC_SYS_CLK_SEL_MASK (0x3U)
#define PMU_CLK_SRC_SYS_CLK_SEL_SHIFT (0U)
/*! sys_clk_sel - System Clock Select
 *  0b00..PLL 128 MHz clock
 *  0b01..RC 32 MHz clock
 *  0b10..XTAL 32 MHz clock
 *  0b11..RC 32 MHz clock
 */
#define PMU_CLK_SRC_SYS_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << PMU_CLK_SRC_SYS_CLK_SEL_SHIFT)) & PMU_CLK_SRC_SYS_CLK_SEL_MASK)
/*! @} */

/*! @name WAKEUP_STATUS - Wakeup status register */
/*! @{ */
#define PMU_WAKEUP_STATUS_PIN0_WAKEUP_STATUS_MASK (0x1U)
#define PMU_WAKEUP_STATUS_PIN0_WAKEUP_STATUS_SHIFT (0U)
/*! pin0_wakeup_status - External Pin0 wakeup status
 */
#define PMU_WAKEUP_STATUS_PIN0_WAKEUP_STATUS(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_STATUS_PIN0_WAKEUP_STATUS_SHIFT)) & PMU_WAKEUP_STATUS_PIN0_WAKEUP_STATUS_MASK)
#define PMU_WAKEUP_STATUS_PIN1_WAKEUP_STATUS_MASK (0x2U)
#define PMU_WAKEUP_STATUS_PIN1_WAKEUP_STATUS_SHIFT (1U)
/*! pin1_wakeup_status - External Pin1 wakeup status
 */
#define PMU_WAKEUP_STATUS_PIN1_WAKEUP_STATUS(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_STATUS_PIN1_WAKEUP_STATUS_SHIFT)) & PMU_WAKEUP_STATUS_PIN1_WAKEUP_STATUS_MASK)
#define PMU_WAKEUP_STATUS_WLINT_WAKEUP_STATUS_MASK (0x4U)
#define PMU_WAKEUP_STATUS_WLINT_WAKEUP_STATUS_SHIFT (2U)
/*! wlint_wakeup_status - WLAN interrupt wakeup status
 */
#define PMU_WAKEUP_STATUS_WLINT_WAKEUP_STATUS(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_STATUS_WLINT_WAKEUP_STATUS_SHIFT)) & PMU_WAKEUP_STATUS_WLINT_WAKEUP_STATUS_MASK)
#define PMU_WAKEUP_STATUS_RTC_WAKEUP_STATUS_MASK (0x8U)
#define PMU_WAKEUP_STATUS_RTC_WAKEUP_STATUS_SHIFT (3U)
/*! rtc_wakeup_status - RTC wakeup status
 */
#define PMU_WAKEUP_STATUS_RTC_WAKEUP_STATUS(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_STATUS_RTC_WAKEUP_STATUS_SHIFT)) & PMU_WAKEUP_STATUS_RTC_WAKEUP_STATUS_MASK)
#define PMU_WAKEUP_STATUS_PMIP_COMP_WAKEUP_STATUS_MASK (0x10U)
#define PMU_WAKEUP_STATUS_PMIP_COMP_WAKEUP_STATUS_SHIFT (4U)
/*! pmip_comp_wakeup_status - pmip_comp wakeup status
 */
#define PMU_WAKEUP_STATUS_PMIP_COMP_WAKEUP_STATUS(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_STATUS_PMIP_COMP_WAKEUP_STATUS_SHIFT)) &                                            \
     PMU_WAKEUP_STATUS_PMIP_COMP_WAKEUP_STATUS_MASK)
/*! @} */

/*! @name PMIP_BRN_INT_SEL - PMIP Brown Interrupt Select */
/*! @{ */
#define PMU_PMIP_BRN_INT_SEL_PMIP_BRN_INT_SEL_MASK (0x1U)
#define PMU_PMIP_BRN_INT_SEL_PMIP_BRN_INT_SEL_SHIFT (0U)
/*! pmip_brn_int_sel - PMIP Brownout Interrupt Select
 *  0b0..generate an interrupt when VBAT brownout
 *  0b1..reset chip when VBAT brownout
 */
#define PMU_PMIP_BRN_INT_SEL_PMIP_BRN_INT_SEL(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRN_INT_SEL_PMIP_BRN_INT_SEL_SHIFT)) & PMU_PMIP_BRN_INT_SEL_PMIP_BRN_INT_SEL_MASK)
/*! @} */

/*! @name CLK_RDY - Clock ready register */
/*! @{ */
#define PMU_CLK_RDY_PLL_CLK_RDY_MASK (0x1U)
#define PMU_CLK_RDY_PLL_CLK_RDY_SHIFT (0U)
/*! pll_clk_rdy - PLL clock ready
 *  0b0..PLL clock not ready for use
 *  0b1..PLL clock ready for use
 */
#define PMU_CLK_RDY_PLL_CLK_RDY(x) (((uint32_t)(((uint32_t)(x)) << PMU_CLK_RDY_PLL_CLK_RDY_SHIFT)) & PMU_CLK_RDY_PLL_CLK_RDY_MASK)
#define PMU_CLK_RDY_RC32M_RDY_MASK (0x4U)
#define PMU_CLK_RDY_RC32M_RDY_SHIFT (2U)
/*! rc32m_rdy - RC 32M Ready
 *  0b0..RC 32M clock not ready for use
 *  0b1..RC 32M clock ready for use
 */
#define PMU_CLK_RDY_RC32M_RDY(x) (((uint32_t)(((uint32_t)(x)) << PMU_CLK_RDY_RC32M_RDY_SHIFT)) & PMU_CLK_RDY_RC32M_RDY_MASK)
#define PMU_CLK_RDY_X32K_RDY_MASK (0x8U)
#define PMU_CLK_RDY_X32K_RDY_SHIFT (3U)
/*! x32k_rdy - XTAL 32k Ready
 *  0b0..XTAL 32k clock not ready for use
 *  0b1..XTAL 32k clock ready for use
 */
#define PMU_CLK_RDY_X32K_RDY(x) (((uint32_t)(((uint32_t)(x)) << PMU_CLK_RDY_X32K_RDY_SHIFT)) & PMU_CLK_RDY_X32K_RDY_MASK)
#define PMU_CLK_RDY_PLL_AUDIO_RDY_MASK (0x10U)
#define PMU_CLK_RDY_PLL_AUDIO_RDY_SHIFT (4U)
/*! pll_audio_rdy - PLL audio ready
 *  0b0..PLL audio clock not ready for use
 *  0b1..PLL audio clock ready for use
 */
#define PMU_CLK_RDY_PLL_AUDIO_RDY(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_CLK_RDY_PLL_AUDIO_RDY_SHIFT)) & PMU_CLK_RDY_PLL_AUDIO_RDY_MASK)
#define PMU_CLK_RDY_XTAL32M_CLK_RDY_MASK (0x40U)
#define PMU_CLK_RDY_XTAL32M_CLK_RDY_SHIFT (6U)
/*! xtal32m_clk_rdy - XTAL32M Clock Ready
 */
#define PMU_CLK_RDY_XTAL32M_CLK_RDY(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_CLK_RDY_XTAL32M_CLK_RDY_SHIFT)) & PMU_CLK_RDY_XTAL32M_CLK_RDY_MASK)
/*! @} */

/*! @name RC32M_CTRL - RC 32M control Register */
/*! @{ */
#define PMU_RC32M_CTRL_CAL_IN_PROGRESS_MASK (0x1U)
#define PMU_RC32M_CTRL_CAL_IN_PROGRESS_SHIFT (0U)
/*! cal_in_progress - Asserts high when calibration in progress
 */
#define PMU_RC32M_CTRL_CAL_IN_PROGRESS(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32M_CTRL_CAL_IN_PROGRESS_SHIFT)) & PMU_RC32M_CTRL_CAL_IN_PROGRESS_MASK)
#define PMU_RC32M_CTRL_CAL_ALLOW_MASK (0x2U)
#define PMU_RC32M_CTRL_CAL_ALLOW_SHIFT (1U)
/*! cal_allow - Allow calibration command from PMU
 */
#define PMU_RC32M_CTRL_CAL_ALLOW(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32M_CTRL_CAL_ALLOW_SHIFT)) & PMU_RC32M_CTRL_CAL_ALLOW_MASK)
/*! @} */

/*! @name SFLL_CTRL1 - SFLL control register 1 */
/*! @{ */
#define PMU_SFLL_CTRL1_SFLL_REFDIV_MASK (0x1FFU)
#define PMU_SFLL_CTRL1_SFLL_REFDIV_SHIFT (0U)
/*! sfll_refdiv - Reference clock divider select
 */
#define PMU_SFLL_CTRL1_SFLL_REFDIV(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL1_SFLL_REFDIV_SHIFT)) & PMU_SFLL_CTRL1_SFLL_REFDIV_MASK)
#define PMU_SFLL_CTRL1_SFLL_TEST_ANA_MASK (0xE00U)
#define PMU_SFLL_CTRL1_SFLL_TEST_ANA_SHIFT (9U)
/*! sfll_test_ana - DC points Testing control
 */
#define PMU_SFLL_CTRL1_SFLL_TEST_ANA(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL1_SFLL_TEST_ANA_SHIFT)) & PMU_SFLL_CTRL1_SFLL_TEST_ANA_MASK)
#define PMU_SFLL_CTRL1_SFLL_DIV_SEL_MASK (0x180000U)
#define PMU_SFLL_CTRL1_SFLL_DIV_SEL_SHIFT (19U)
/*! sfll_div_sel - Post divider
 *  0b00..divide by 1 (bypass)
 *  0b01..divide by 2
 *  0b10..divide by 4
 *  0b11..divide by 8
 */
#define PMU_SFLL_CTRL1_SFLL_DIV_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL1_SFLL_DIV_SEL_SHIFT)) & PMU_SFLL_CTRL1_SFLL_DIV_SEL_MASK)
#define PMU_SFLL_CTRL1_SFLL_RESERVE_IN_MASK (0x7F800000U)
#define PMU_SFLL_CTRL1_SFLL_RESERVE_IN_SHIFT (23U)
/*! sfll_reserve_in - SFLL Reserved Input
 */
#define PMU_SFLL_CTRL1_SFLL_RESERVE_IN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL1_SFLL_RESERVE_IN_SHIFT)) & PMU_SFLL_CTRL1_SFLL_RESERVE_IN_MASK)
#define PMU_SFLL_CTRL1_REG_PLL_PU_INT_MASK (0x80000000U)
#define PMU_SFLL_CTRL1_REG_PLL_PU_INT_SHIFT (31U)
/*! reg_pll_pu_int - PLL PU Int
 */
#define PMU_SFLL_CTRL1_REG_PLL_PU_INT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL1_REG_PLL_PU_INT_SHIFT)) & PMU_SFLL_CTRL1_REG_PLL_PU_INT_MASK)
/*! @} */

/*! @name ANA_GRP_CTRL0 - Analog group control register */
/*! @{ */
#define PMU_ANA_GRP_CTRL0_PU_OSC_MASK (0x1U)
#define PMU_ANA_GRP_CTRL0_PU_OSC_SHIFT (0U)
/*! PU_OSC - Power-up signal for OSC circuit
 */
#define PMU_ANA_GRP_CTRL0_PU_OSC(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_ANA_GRP_CTRL0_PU_OSC_SHIFT)) & PMU_ANA_GRP_CTRL0_PU_OSC_MASK)
#define PMU_ANA_GRP_CTRL0_PU_XTAL_MASK (0x2U)
#define PMU_ANA_GRP_CTRL0_PU_XTAL_SHIFT (1U)
/*! PU_XTAL - Power-up signal for XTAL circuit
 */
#define PMU_ANA_GRP_CTRL0_PU_XTAL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_ANA_GRP_CTRL0_PU_XTAL_SHIFT)) & PMU_ANA_GRP_CTRL0_PU_XTAL_MASK)
#define PMU_ANA_GRP_CTRL0_PU_MASK (0x4U)
#define PMU_ANA_GRP_CTRL0_PU_SHIFT (2U)
/*! PU - Power-up signal for whole block
 */
#define PMU_ANA_GRP_CTRL0_PU(x) (((uint32_t)(((uint32_t)(x)) << PMU_ANA_GRP_CTRL0_PU_SHIFT)) & PMU_ANA_GRP_CTRL0_PU_MASK)
/*! @} */

/*! @name SFLL_CTRL0 - SFLL control register 2 */
/*! @{ */
#define PMU_SFLL_CTRL0_SFLL_PU_MASK (0x1U)
#define PMU_SFLL_CTRL0_SFLL_PU_SHIFT (0U)
/*! sfll_pu - Power-up signal for the Flock
 *  0b0..power down
 *  0b1..power up
 */
#define PMU_SFLL_CTRL0_SFLL_PU(x) (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL0_SFLL_PU_SHIFT)) & PMU_SFLL_CTRL0_SFLL_PU_MASK)
#define PMU_SFLL_CTRL0_SFLL_FBDIV_MASK (0xFF80U)
#define PMU_SFLL_CTRL0_SFLL_FBDIV_SHIFT (7U)
/*! sfll_fbdiv - Feedback clock divider select
 */
#define PMU_SFLL_CTRL0_SFLL_FBDIV(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL0_SFLL_FBDIV_SHIFT)) & PMU_SFLL_CTRL0_SFLL_FBDIV_MASK)
#define PMU_SFLL_CTRL0_SFLL_KVCO_MASK (0x300000U)
#define PMU_SFLL_CTRL0_SFLL_KVCO_SHIFT (20U)
/*! sfll_kvco - Select VCO Running Range Default value for output clock=200M
 */
#define PMU_SFLL_CTRL0_SFLL_KVCO(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL0_SFLL_KVCO_SHIFT)) & PMU_SFLL_CTRL0_SFLL_KVCO_MASK)
#define PMU_SFLL_CTRL0_SFLL_REFCLK_SEL_MASK (0x2000000U)
#define PMU_SFLL_CTRL0_SFLL_REFCLK_SEL_SHIFT (25U)
/*! sfll_refclk_sel - Reference clock source select
 *  0b0..RC 32M
 *  0b1..XTAL 32M from WLAN
 */
#define PMU_SFLL_CTRL0_SFLL_REFCLK_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL0_SFLL_REFCLK_SEL_SHIFT)) & PMU_SFLL_CTRL0_SFLL_REFCLK_SEL_MASK)
#define PMU_SFLL_CTRL0_SFLL_LOCK_MASK (0x4000000U)
#define PMU_SFLL_CTRL0_SFLL_LOCK_SHIFT (26U)
/*! sfll_lock - SFLL Lock
 *  0b0..PLL module unlocked
 *  0b1..PLL module locked
 */
#define PMU_SFLL_CTRL0_SFLL_LOCK(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_SFLL_CTRL0_SFLL_LOCK_SHIFT)) & PMU_SFLL_CTRL0_SFLL_LOCK_MASK)
/*! @} */

/*! @name PWR_CFG - Power configuration register */
/*! @{ */
#define PMU_PWR_CFG_PM3_RET_MEM_CFG_MASK (0x7F0U)
#define PMU_PWR_CFG_PM3_RET_MEM_CFG_SHIFT (4U)
/*! PM3_RET_MEM_CFG - Retention memory enable register in PM3 mode
 */
#define PMU_PWR_CFG_PM3_RET_MEM_CFG(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PWR_CFG_PM3_RET_MEM_CFG_SHIFT)) & PMU_PWR_CFG_PM3_RET_MEM_CFG_MASK)
/*! @} */

/*! @name PWR_STAT - Power status register */
/*! @{ */
#define PMU_PWR_STAT_V12_LDO_RDY_MASK (0x2U)
#define PMU_PWR_STAT_V12_LDO_RDY_SHIFT (1U)
/*! v12_ldo_rdy - v12_ldo_rdy
 */
#define PMU_PWR_STAT_V12_LDO_RDY(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_PWR_STAT_V12_LDO_RDY_SHIFT)) & PMU_PWR_STAT_V12_LDO_RDY_MASK)
#define PMU_PWR_STAT_AV18_RDY_MASK (0x80U)
#define PMU_PWR_STAT_AV18_RDY_SHIFT (7U)
/*! av18_rdy - av18_rdy
 */
#define PMU_PWR_STAT_AV18_RDY(x) (((uint32_t)(((uint32_t)(x)) << PMU_PWR_STAT_AV18_RDY_SHIFT)) & PMU_PWR_STAT_AV18_RDY_MASK)
/*! @} */

/*! @name WF_OPT0 - WF OPT Power-Saving register 0 */
/*! @{ */
#define PMU_WF_OPT0_MAX_FREQ_CTRL_MASK (0x2U)
#define PMU_WF_OPT0_MAX_FREQ_CTRL_SHIFT (1U)
/*! max_freq_ctrl - maximum frequency control
 *  0b0..normal mode
 *  0b1..maximum frequency is 125 MHz
 */
#define PMU_WF_OPT0_MAX_FREQ_CTRL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_WF_OPT0_MAX_FREQ_CTRL_SHIFT)) & PMU_WF_OPT0_MAX_FREQ_CTRL_MASK)
#define PMU_WF_OPT0_MEM_CTRL_MASK (0x4U)
#define PMU_WF_OPT0_MEM_CTRL_SHIFT (2U)
/*! mem_ctrl - sram_memory control
 *  0b0..normal mode
 *  0b1..limit SRAM to 192K
 */
#define PMU_WF_OPT0_MEM_CTRL(x) (((uint32_t)(((uint32_t)(x)) << PMU_WF_OPT0_MEM_CTRL_SHIFT)) & PMU_WF_OPT0_MEM_CTRL_MASK)
/*! @} */

/*! @name WF_OPT1 - WF OPT Power-Saving register 1 */
/*! @{ */
#define PMU_WF_OPT1_SPARE_MASK (0xCU)
#define PMU_WF_OPT1_SPARE_SHIFT (2U)
/*! spare - Spare
 */
#define PMU_WF_OPT1_SPARE(x) (((uint32_t)(((uint32_t)(x)) << PMU_WF_OPT1_SPARE_SHIFT)) & PMU_WF_OPT1_SPARE_MASK)
/*! @} */

/*! @name PMIP_BRN_CFG - Brownout configuration register */
/*! @{ */
#define PMU_PMIP_BRN_CFG_BRNDET_V12_RST_EN_MASK (0x1U)
#define PMU_PMIP_BRN_CFG_BRNDET_V12_RST_EN_SHIFT (0U)
/*! brndet_v12_rst_en - Brownout AV12 Reset Enable
 */
#define PMU_PMIP_BRN_CFG_BRNDET_V12_RST_EN(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRN_CFG_BRNDET_V12_RST_EN_SHIFT)) & PMU_PMIP_BRN_CFG_BRNDET_V12_RST_EN_MASK)
#define PMU_PMIP_BRN_CFG_BRNDET_VBAT_RST_EN_MASK (0x2U)
#define PMU_PMIP_BRN_CFG_BRNDET_VBAT_RST_EN_SHIFT (1U)
/*! brndet_vbat_rst_en - Brownout VBAT Reset Enable
 */
#define PMU_PMIP_BRN_CFG_BRNDET_VBAT_RST_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRN_CFG_BRNDET_VBAT_RST_EN_SHIFT)) & PMU_PMIP_BRN_CFG_BRNDET_VBAT_RST_EN_MASK)
#define PMU_PMIP_BRN_CFG_BRNDET_AV18_RST_EN_MASK (0x8U)
#define PMU_PMIP_BRN_CFG_BRNDET_AV18_RST_EN_SHIFT (3U)
/*! brndet_av18_rst_en - Brownout AV18 Reset Enable
 */
#define PMU_PMIP_BRN_CFG_BRNDET_AV18_RST_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRN_CFG_BRNDET_AV18_RST_EN_SHIFT)) & PMU_PMIP_BRN_CFG_BRNDET_AV18_RST_EN_MASK)
/*! @} */

/*! @name AUPLL_LOCK - AUPLL lock status register */
/*! @{ */
#define PMU_AUPLL_LOCK_RESERVED_OUT_0_MASK (0x3U)
#define PMU_AUPLL_LOCK_RESERVED_OUT_0_SHIFT (0U)
/*! Reserved_out_0 - Reserved Out 0
 */
#define PMU_AUPLL_LOCK_RESERVED_OUT_0(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_LOCK_RESERVED_OUT_0_SHIFT)) & PMU_AUPLL_LOCK_RESERVED_OUT_0_MASK)
#define PMU_AUPLL_LOCK_AUPLL_LOCK_MASK (0x4U)
#define PMU_AUPLL_LOCK_AUPLL_LOCK_SHIFT (2U)
/*! aupll_lock - AUPLL Lock
 */
#define PMU_AUPLL_LOCK_AUPLL_LOCK(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_LOCK_AUPLL_LOCK_SHIFT)) & PMU_AUPLL_LOCK_AUPLL_LOCK_MASK)
#define PMU_AUPLL_LOCK_RESERVED_OUT_1_MASK (0xFFFFFFF8U)
#define PMU_AUPLL_LOCK_RESERVED_OUT_1_SHIFT (3U)
/*! Reserved_out_1 - Reserved Out 1
 */
#define PMU_AUPLL_LOCK_RESERVED_OUT_1(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_LOCK_RESERVED_OUT_1_SHIFT)) & PMU_AUPLL_LOCK_RESERVED_OUT_1_MASK)
/*! @} */

/*! @name ANA_GRP_CTRL1 - BG control register */
/*! @{ */
#define PMU_ANA_GRP_CTRL1_BG_CTRL_MASK (0x7U)
#define PMU_ANA_GRP_CTRL1_BG_CTRL_SHIFT (0U)
/*! bg_ctrl - bandgap control
 */
#define PMU_ANA_GRP_CTRL1_BG_CTRL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_ANA_GRP_CTRL1_BG_CTRL_SHIFT)) & PMU_ANA_GRP_CTRL1_BG_CTRL_MASK)
#define PMU_ANA_GRP_CTRL1_GAINX2_MASK (0x8U)
#define PMU_ANA_GRP_CTRL1_GAINX2_SHIFT (3U)
/*! GAINX2 - OSC gain control
 */
#define PMU_ANA_GRP_CTRL1_GAINX2(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_ANA_GRP_CTRL1_GAINX2_SHIFT)) & PMU_ANA_GRP_CTRL1_GAINX2_MASK)
#define PMU_ANA_GRP_CTRL1_R_ORIEN_SEL_MASK (0x10U)
#define PMU_ANA_GRP_CTRL1_R_ORIEN_SEL_SHIFT (4U)
/*! R_ORIEN_SEL - RPP resister orientation selection
 */
#define PMU_ANA_GRP_CTRL1_R_ORIEN_SEL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_ANA_GRP_CTRL1_R_ORIEN_SEL_SHIFT)) & PMU_ANA_GRP_CTRL1_R_ORIEN_SEL_MASK)
#define PMU_ANA_GRP_CTRL1_BG_SEL_MASK (0x60U)
#define PMU_ANA_GRP_CTRL1_BG_SEL_SHIFT (5U)
/*! BG_SEL - Selects the Bandgap Voltage
 */
#define PMU_ANA_GRP_CTRL1_BG_SEL(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_ANA_GRP_CTRL1_BG_SEL_SHIFT)) & PMU_ANA_GRP_CTRL1_BG_SEL_MASK)
#define PMU_ANA_GRP_CTRL1_TEST_MASK (0x380U)
#define PMU_ANA_GRP_CTRL1_TEST_SHIFT (7U)
/*! TEST - Analog test control bits
 */
#define PMU_ANA_GRP_CTRL1_TEST(x) (((uint32_t)(((uint32_t)(x)) << PMU_ANA_GRP_CTRL1_TEST_SHIFT)) & PMU_ANA_GRP_CTRL1_TEST_MASK)
#define PMU_ANA_GRP_CTRL1_BYPASS_MASK (0x400U)
#define PMU_ANA_GRP_CTRL1_BYPASS_SHIFT (10U)
/*! BYPASS - XTAL OSC bypass control signal
 */
#define PMU_ANA_GRP_CTRL1_BYPASS(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_ANA_GRP_CTRL1_BYPASS_SHIFT)) & PMU_ANA_GRP_CTRL1_BYPASS_MASK)
/*! @} */

/*! @name PMIP_PWR_CONFIG - Power Configuration register */
/*! @{ */
#define PMU_PMIP_PWR_CONFIG_STATUS_DEL_SEL_MASK (0x3U)
#define PMU_PMIP_PWR_CONFIG_STATUS_DEL_SEL_SHIFT (0U)
/*! status_del_sel - Control counter in delay for rdy/rdy<0> handshaking
 */
#define PMU_PMIP_PWR_CONFIG_STATUS_DEL_SEL(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_PWR_CONFIG_STATUS_DEL_SEL_SHIFT)) & PMU_PMIP_PWR_CONFIG_STATUS_DEL_SEL_MASK)
#define PMU_PMIP_PWR_CONFIG_AV18_EXT_MASK (0x4U)
#define PMU_PMIP_PWR_CONFIG_AV18_EXT_SHIFT (2U)
/*! av18_ext - AV18 External
 */
#define PMU_PMIP_PWR_CONFIG_AV18_EXT(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_PWR_CONFIG_AV18_EXT_SHIFT)) & PMU_PMIP_PWR_CONFIG_AV18_EXT_MASK)
/*! @} */

/*! @name PMIP_TEST - PMIP test register */
/*! @{ */
#define PMU_PMIP_TEST_PMIP_TEST_MASK (0xFU)
#define PMU_PMIP_TEST_PMIP_TEST_SHIFT (0U)
/*! pmip_test - Test mux output
 */
#define PMU_PMIP_TEST_PMIP_TEST(x) (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_TEST_PMIP_TEST_SHIFT)) & PMU_PMIP_TEST_PMIP_TEST_MASK)
#define PMU_PMIP_TEST_PMIP_TEST_EN_MASK (0x10U)
#define PMU_PMIP_TEST_PMIP_TEST_EN_SHIFT (4U)
/*! pmip_test_en - PMIP Test Enable
 *  0b0..disable PMIP analog test mux
 *  0b1..enable PMIP analog test mux
 */
#define PMU_PMIP_TEST_PMIP_TEST_EN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_TEST_PMIP_TEST_EN_SHIFT)) & PMU_PMIP_TEST_PMIP_TEST_EN_MASK)
#define PMU_PMIP_TEST_PMU_PMIP_TEST_MASK (0x1E0U)
#define PMU_PMIP_TEST_PMU_PMIP_TEST_SHIFT (5U)
/*! pmu_pmip_test - Test mux input
 */
#define PMU_PMIP_TEST_PMU_PMIP_TEST(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_TEST_PMU_PMIP_TEST_SHIFT)) & PMU_PMIP_TEST_PMU_PMIP_TEST_MASK)
#define PMU_PMIP_TEST_PMU_PMIP_TEST_EN_MASK (0x200U)
#define PMU_PMIP_TEST_PMU_PMIP_TEST_EN_SHIFT (9U)
/*! pmu_pmip_test_en - Enable test mux
 */
#define PMU_PMIP_TEST_PMU_PMIP_TEST_EN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_TEST_PMU_PMIP_TEST_EN_SHIFT)) & PMU_PMIP_TEST_PMU_PMIP_TEST_EN_MASK)
/*! @} */

/*! @name AUPLL_CTRL0 - Audio PLL control register */
/*! @{ */
#define PMU_AUPLL_CTRL0_FRACT_MASK (0xFFFFFU)
#define PMU_AUPLL_CTRL0_FRACT_SHIFT (0U)
/*! FRACT - Fractional Part of PLL feedback divider
 */
#define PMU_AUPLL_CTRL0_FRACT(x) (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL0_FRACT_SHIFT)) & PMU_AUPLL_CTRL0_FRACT_MASK)
#define PMU_AUPLL_CTRL0_PU_MASK (0x100000U)
#define PMU_AUPLL_CTRL0_PU_SHIFT (20U)
/*! PU - Power-up signal for the PLL
 */
#define PMU_AUPLL_CTRL0_PU(x) (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL0_PU_SHIFT)) & PMU_AUPLL_CTRL0_PU_MASK)
/*! @} */

/*! @name PERI_CLK_EN - Peripheral clock enable register */
/*! @{ */
#define PMU_PERI_CLK_EN_USIM_CLK_EN_MASK (0x1U)
#define PMU_PERI_CLK_EN_USIM_CLK_EN_SHIFT (0U)
/*! usim_clk_en - USIM clock enable
 */
#define PMU_PERI_CLK_EN_USIM_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_USIM_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_USIM_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_QSPI0_CLK_EN_MASK (0x2U)
#define PMU_PERI_CLK_EN_QSPI0_CLK_EN_SHIFT (1U)
/*! qspi0_clk_en - QSPI0 clock enable
 */
#define PMU_PERI_CLK_EN_QSPI0_CLK_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_QSPI0_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_QSPI0_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_IR_CLK_EN_MASK (0x4U)
#define PMU_PERI_CLK_EN_IR_CLK_EN_SHIFT (2U)
/*! ir_clk_en - IR clock enable
 */
#define PMU_PERI_CLK_EN_IR_CLK_EN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_IR_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_IR_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_PDM_CLK_EN_MASK (0x8U)
#define PMU_PERI_CLK_EN_PDM_CLK_EN_SHIFT (3U)
/*! pdm_clk_en - PDM clock enable
 */
#define PMU_PERI_CLK_EN_PDM_CLK_EN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_PDM_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_PDM_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_GPIO_CLK_EN_MASK (0x10U)
#define PMU_PERI_CLK_EN_GPIO_CLK_EN_SHIFT (4U)
/*! gpio_clk_en - GPIO clock enable
 */
#define PMU_PERI_CLK_EN_GPIO_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_GPIO_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_GPIO_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_UART0_CLK_EN_MASK (0x20U)
#define PMU_PERI_CLK_EN_UART0_CLK_EN_SHIFT (5U)
/*! uart0_clk_en - UART0 clock enable
 */
#define PMU_PERI_CLK_EN_UART0_CLK_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_UART0_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_UART0_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_UART1_CLK_EN_MASK (0x40U)
#define PMU_PERI_CLK_EN_UART1_CLK_EN_SHIFT (6U)
/*! uart1_clk_en - UART1 clock enable
 */
#define PMU_PERI_CLK_EN_UART1_CLK_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_UART1_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_UART1_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_I2C0_CLK_EN_MASK (0x80U)
#define PMU_PERI_CLK_EN_I2C0_CLK_EN_SHIFT (7U)
/*! i2c0_clk_en - I2C0 clock enable
 */
#define PMU_PERI_CLK_EN_I2C0_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_I2C0_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_I2C0_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_SSP0_CLK_EN_MASK (0x100U)
#define PMU_PERI_CLK_EN_SSP0_CLK_EN_SHIFT (8U)
/*! ssp0_clk_en - SSP0 clock enable
 */
#define PMU_PERI_CLK_EN_SSP0_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_SSP0_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_SSP0_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_SSP1_CLK_EN_MASK (0x200U)
#define PMU_PERI_CLK_EN_SSP1_CLK_EN_SHIFT (9U)
/*! ssp1_clk_en - SSP1 clock enable
 */
#define PMU_PERI_CLK_EN_SSP1_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_SSP1_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_SSP1_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_GPT0_CLK_EN_MASK (0x400U)
#define PMU_PERI_CLK_EN_GPT0_CLK_EN_SHIFT (10U)
/*! gpt0_clk_en - GPT0 clock enable
 */
#define PMU_PERI_CLK_EN_GPT0_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_GPT0_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_GPT0_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_GPT1_CLK_EN_MASK (0x800U)
#define PMU_PERI_CLK_EN_GPT1_CLK_EN_SHIFT (11U)
/*! gpt1_clk_en - GPT1 clock enable
 */
#define PMU_PERI_CLK_EN_GPT1_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_GPT1_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_GPT1_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_UART2_CLK_EN_MASK (0x8000U)
#define PMU_PERI_CLK_EN_UART2_CLK_EN_SHIFT (15U)
/*! uart2_clk_en - UART2 clock enable
 */
#define PMU_PERI_CLK_EN_UART2_CLK_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_UART2_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_UART2_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_UART3_CLK_EN_MASK (0x10000U)
#define PMU_PERI_CLK_EN_UART3_CLK_EN_SHIFT (16U)
/*! uart3_clk_en - UART3 clock enable
 */
#define PMU_PERI_CLK_EN_UART3_CLK_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_UART3_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_UART3_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_SSP2_CLK_EN_MASK (0x20000U)
#define PMU_PERI_CLK_EN_SSP2_CLK_EN_SHIFT (17U)
/*! ssp2_clk_en - SSP2 clock enable
 */
#define PMU_PERI_CLK_EN_SSP2_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_SSP2_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_SSP2_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_I2C1_CLK_EN_MASK (0x80000U)
#define PMU_PERI_CLK_EN_I2C1_CLK_EN_SHIFT (19U)
/*! i2c1_clk_en - I2C1 clock enable
 */
#define PMU_PERI_CLK_EN_I2C1_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_I2C1_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_I2C1_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_I2C2_CLK_EN_MASK (0x100000U)
#define PMU_PERI_CLK_EN_I2C2_CLK_EN_SHIFT (20U)
/*! i2c2_clk_en - I2C2 clock enable
 */
#define PMU_PERI_CLK_EN_I2C2_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_I2C2_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_I2C2_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_GPT2_CLK_EN_MASK (0x200000U)
#define PMU_PERI_CLK_EN_GPT2_CLK_EN_SHIFT (21U)
/*! gpt2_clk_en - GPT2 clock enable
 */
#define PMU_PERI_CLK_EN_GPT2_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_GPT2_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_GPT2_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_GPT3_CLK_EN_MASK (0x400000U)
#define PMU_PERI_CLK_EN_GPT3_CLK_EN_SHIFT (22U)
/*! gpt3_clk_en - GPT3 clock enable
 */
#define PMU_PERI_CLK_EN_GPT3_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_GPT3_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_GPT3_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_WDT_CLK_EN_MASK (0x800000U)
#define PMU_PERI_CLK_EN_WDT_CLK_EN_SHIFT (23U)
/*! wdt_clk_en - WDT clock enable
 */
#define PMU_PERI_CLK_EN_WDT_CLK_EN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_WDT_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_WDT_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_QSPI1_CLK_EN_MASK (0x1000000U)
#define PMU_PERI_CLK_EN_QSPI1_CLK_EN_SHIFT (24U)
/*! qspi1_clk_en - QSPI1 clock enable
 */
#define PMU_PERI_CLK_EN_QSPI1_CLK_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_QSPI1_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_QSPI1_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_SDIO_CLK_EN_MASK (0x2000000U)
#define PMU_PERI_CLK_EN_SDIO_CLK_EN_SHIFT (25U)
/*! sdio_clk_en - SDIO clock enable
 */
#define PMU_PERI_CLK_EN_SDIO_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_SDIO_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_SDIO_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_ADC_CLK_EN_MASK (0x4000000U)
#define PMU_PERI_CLK_EN_ADC_CLK_EN_SHIFT (26U)
/*! adc_clk_en - ADC clock enable
 */
#define PMU_PERI_CLK_EN_ADC_CLK_EN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_ADC_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_ADC_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_USBC_CLK_EN_MASK (0x8000000U)
#define PMU_PERI_CLK_EN_USBC_CLK_EN_SHIFT (27U)
/*! usbc_clk_en - USBC clock enable
 */
#define PMU_PERI_CLK_EN_USBC_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_USBC_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_USBC_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_USBC_AHB_CLK_EN_MASK (0x40000000U)
#define PMU_PERI_CLK_EN_USBC_AHB_CLK_EN_SHIFT (30U)
/*! usbc_ahb_clk_en - AHB USBC clock enable
 */
#define PMU_PERI_CLK_EN_USBC_AHB_CLK_EN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_USBC_AHB_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_USBC_AHB_CLK_EN_MASK)
#define PMU_PERI_CLK_EN_SDIO_AHB_CLK_EN_MASK (0x80000000U)
#define PMU_PERI_CLK_EN_SDIO_AHB_CLK_EN_SHIFT (31U)
/*! sdio_ahb_clk_en - AHB SDIO clock enable
 */
#define PMU_PERI_CLK_EN_SDIO_AHB_CLK_EN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_EN_SDIO_AHB_CLK_EN_SHIFT)) & PMU_PERI_CLK_EN_SDIO_AHB_CLK_EN_MASK)
/*! @} */

/*! @name UART_FAST_CLK_DIV - UART fast clock div register */
/*! @{ */
#define PMU_UART_FAST_CLK_DIV_DENOMINATOR_MASK (0x7FFU)
#define PMU_UART_FAST_CLK_DIV_DENOMINATOR_SHIFT (0U)
/*! denominator - 11-Bit denominator for fractional divider
 */
#define PMU_UART_FAST_CLK_DIV_DENOMINATOR(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_UART_FAST_CLK_DIV_DENOMINATOR_SHIFT)) & PMU_UART_FAST_CLK_DIV_DENOMINATOR_MASK)
#define PMU_UART_FAST_CLK_DIV_NOMINATOR_MASK (0xFFF800U)
#define PMU_UART_FAST_CLK_DIV_NOMINATOR_SHIFT (11U)
/*! nominator - 13-Bit nominator for fraction divider
 */
#define PMU_UART_FAST_CLK_DIV_NOMINATOR(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_UART_FAST_CLK_DIV_NOMINATOR_SHIFT)) & PMU_UART_FAST_CLK_DIV_NOMINATOR_MASK)
/*! @} */

/*! @name UART_SLOW_CLK_DIV - UART slow clock div register */
/*! @{ */
#define PMU_UART_SLOW_CLK_DIV_DENOMINATOR_MASK (0x7FFU)
#define PMU_UART_SLOW_CLK_DIV_DENOMINATOR_SHIFT (0U)
/*! denominator - 11-Bit denominator for fractional divider
 */
#define PMU_UART_SLOW_CLK_DIV_DENOMINATOR(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_UART_SLOW_CLK_DIV_DENOMINATOR_SHIFT)) & PMU_UART_SLOW_CLK_DIV_DENOMINATOR_MASK)
#define PMU_UART_SLOW_CLK_DIV_NOMINATOR_MASK (0xFFF800U)
#define PMU_UART_SLOW_CLK_DIV_NOMINATOR_SHIFT (11U)
/*! nominator - 13-Bit nominator for fraction divider
 */
#define PMU_UART_SLOW_CLK_DIV_NOMINATOR(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_UART_SLOW_CLK_DIV_NOMINATOR_SHIFT)) & PMU_UART_SLOW_CLK_DIV_NOMINATOR_MASK)
/*! @} */

/*! @name UART_CLK_SEL - UART clock select register */
/*! @{ */
#define PMU_UART_CLK_SEL_UART0_CLK_SEL_MASK (0x1U)
#define PMU_UART_CLK_SEL_UART0_CLK_SEL_SHIFT (0U)
/*! uart0_clk_sel - UART0 APB0 UART clock select
 *  0b0..
 *  0b1..
 */
#define PMU_UART_CLK_SEL_UART0_CLK_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_UART_CLK_SEL_UART0_CLK_SEL_SHIFT)) & PMU_UART_CLK_SEL_UART0_CLK_SEL_MASK)
#define PMU_UART_CLK_SEL_UART1_CLK_SEL_MASK (0x2U)
#define PMU_UART_CLK_SEL_UART1_CLK_SEL_SHIFT (1U)
/*! uart1_clk_sel - UART1 APB0 UART clock select
 *  0b0..
 *  0b1..
 */
#define PMU_UART_CLK_SEL_UART1_CLK_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_UART_CLK_SEL_UART1_CLK_SEL_SHIFT)) & PMU_UART_CLK_SEL_UART1_CLK_SEL_MASK)
#define PMU_UART_CLK_SEL_UART2_CLK_SEL_MASK (0x4U)
#define PMU_UART_CLK_SEL_UART2_CLK_SEL_SHIFT (2U)
/*! uart2_clk_sel - UART2 APB1 UART clock select
 *  0b0..
 *  0b1..
 */
#define PMU_UART_CLK_SEL_UART2_CLK_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_UART_CLK_SEL_UART2_CLK_SEL_SHIFT)) & PMU_UART_CLK_SEL_UART2_CLK_SEL_MASK)
#define PMU_UART_CLK_SEL_UART3_CLK_SEL_MASK (0x8U)
#define PMU_UART_CLK_SEL_UART3_CLK_SEL_SHIFT (3U)
/*! uart3_clk_sel - UART3 APB1 UART clock select
 *  0b0..
 *  0b1..
 */
#define PMU_UART_CLK_SEL_UART3_CLK_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_UART_CLK_SEL_UART3_CLK_SEL_SHIFT)) & PMU_UART_CLK_SEL_UART3_CLK_SEL_MASK)
/*! @} */

/*! @name MCU_CORE_CLK_DIV - MCU CORE clock divider ratio register */
/*! @{ */
#define PMU_MCU_CORE_CLK_DIV_FCLK_DIV_MASK (0x3FU)
#define PMU_MCU_CORE_CLK_DIV_FCLK_DIV_SHIFT (0U)
/*! fclk_div - FCLK divisor
 */
#define PMU_MCU_CORE_CLK_DIV_FCLK_DIV(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_MCU_CORE_CLK_DIV_FCLK_DIV_SHIFT)) & PMU_MCU_CORE_CLK_DIV_FCLK_DIV_MASK)
/*! @} */

/*! @name PERI0_CLK_DIV - Peripheral0 clock divider ratio register */
/*! @{ */
#define PMU_PERI0_CLK_DIV_SSP0_CLK_DIV_MASK (0x1FU)
#define PMU_PERI0_CLK_DIV_SSP0_CLK_DIV_SHIFT (0U)
/*! ssp0_clk_div - SSP0 APB0 clock divisor
 */
#define PMU_PERI0_CLK_DIV_SSP0_CLK_DIV(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI0_CLK_DIV_SSP0_CLK_DIV_SHIFT)) & PMU_PERI0_CLK_DIV_SSP0_CLK_DIV_MASK)
#define PMU_PERI0_CLK_DIV_SSP1_CLK_DIV_MASK (0x3E0U)
#define PMU_PERI0_CLK_DIV_SSP1_CLK_DIV_SHIFT (5U)
/*! ssp1_clk_div - SSP1 APB0 clock divisor
 */
#define PMU_PERI0_CLK_DIV_SSP1_CLK_DIV(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI0_CLK_DIV_SSP1_CLK_DIV_SHIFT)) & PMU_PERI0_CLK_DIV_SSP1_CLK_DIV_MASK)
#define PMU_PERI0_CLK_DIV_SSP2_CLK_DIV_MASK (0x7C00U)
#define PMU_PERI0_CLK_DIV_SSP2_CLK_DIV_SHIFT (10U)
/*! ssp2_clk_div - SSP2 APB1 clock divisor
 */
#define PMU_PERI0_CLK_DIV_SSP2_CLK_DIV(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI0_CLK_DIV_SSP2_CLK_DIV_SHIFT)) & PMU_PERI0_CLK_DIV_SSP2_CLK_DIV_MASK)
#define PMU_PERI0_CLK_DIV_SDIO_CLK_DIV_MASK (0xF0000U)
#define PMU_PERI0_CLK_DIV_SDIO_CLK_DIV_SHIFT (16U)
/*! sdio_clk_div - SDIO clock divisor
 */
#define PMU_PERI0_CLK_DIV_SDIO_CLK_DIV(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI0_CLK_DIV_SDIO_CLK_DIV_SHIFT)) & PMU_PERI0_CLK_DIV_SDIO_CLK_DIV_MASK)
#define PMU_PERI0_CLK_DIV_IR_CLK_DIV_MASK (0x3F00000U)
#define PMU_PERI0_CLK_DIV_IR_CLK_DIV_SHIFT (20U)
/*! ir_clk_div - IR clock divisor
 */
#define PMU_PERI0_CLK_DIV_IR_CLK_DIV(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI0_CLK_DIV_IR_CLK_DIV_SHIFT)) & PMU_PERI0_CLK_DIV_IR_CLK_DIV_MASK)
#define PMU_PERI0_CLK_DIV_PDM_CLK_DIV_MASK (0x7C000000U)
#define PMU_PERI0_CLK_DIV_PDM_CLK_DIV_SHIFT (26U)
/*! pdm_clk_div - PDM clock divisor
 */
#define PMU_PERI0_CLK_DIV_PDM_CLK_DIV(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI0_CLK_DIV_PDM_CLK_DIV_SHIFT)) & PMU_PERI0_CLK_DIV_PDM_CLK_DIV_MASK)
/*! @} */

/*! @name PERI1_CLK_DIV - Peripheral1 clock divider ratio register */
/*! @{ */
#define PMU_PERI1_CLK_DIV_FLASH_CLK_DIV_MASK (0x70U)
#define PMU_PERI1_CLK_DIV_FLASH_CLK_DIV_SHIFT (4U)
/*! flash_clk_div - Flash QSPI clock divisor
 */
#define PMU_PERI1_CLK_DIV_FLASH_CLK_DIV(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI1_CLK_DIV_FLASH_CLK_DIV_SHIFT)) & PMU_PERI1_CLK_DIV_FLASH_CLK_DIV_MASK)
#define PMU_PERI1_CLK_DIV_QSPI0_CLK_DIV_MASK (0x700U)
#define PMU_PERI1_CLK_DIV_QSPI0_CLK_DIV_SHIFT (8U)
/*! qspi0_clk_div - QSPI0 APB0 clock divisor
 */
#define PMU_PERI1_CLK_DIV_QSPI0_CLK_DIV(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI1_CLK_DIV_QSPI0_CLK_DIV_SHIFT)) & PMU_PERI1_CLK_DIV_QSPI0_CLK_DIV_MASK)
#define PMU_PERI1_CLK_DIV_QSPI1_CLK_DIV_MASK (0x7000U)
#define PMU_PERI1_CLK_DIV_QSPI1_CLK_DIV_SHIFT (12U)
/*! qspi1_clk_div - QSPI1 APB0 clock divisor
 */
#define PMU_PERI1_CLK_DIV_QSPI1_CLK_DIV(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI1_CLK_DIV_QSPI1_CLK_DIV_SHIFT)) & PMU_PERI1_CLK_DIV_QSPI1_CLK_DIV_MASK)
#define PMU_PERI1_CLK_DIV_USIM_CLK_DIV_MASK (0x1F00000U)
#define PMU_PERI1_CLK_DIV_USIM_CLK_DIV_SHIFT (20U)
/*! usim_clk_div - USIM clock divisor
 */
#define PMU_PERI1_CLK_DIV_USIM_CLK_DIV(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI1_CLK_DIV_USIM_CLK_DIV_SHIFT)) & PMU_PERI1_CLK_DIV_USIM_CLK_DIV_MASK)
/*! @} */

/*! @name PERI2_CLK_DIV - Peripheral2 Clock Divider Ratio Register */
/*! @{ */
#define PMU_PERI2_CLK_DIV_GPT_SAMPLE_CLK_DIV_MASK (0x7U)
#define PMU_PERI2_CLK_DIV_GPT_SAMPLE_CLK_DIV_SHIFT (0U)
/*! gpt_sample_clk_div - GPT sample clock divisor
 */
#define PMU_PERI2_CLK_DIV_GPT_SAMPLE_CLK_DIV(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI2_CLK_DIV_GPT_SAMPLE_CLK_DIV_SHIFT)) & PMU_PERI2_CLK_DIV_GPT_SAMPLE_CLK_DIV_MASK)
#define PMU_PERI2_CLK_DIV_WDT_CLK_DIV_5_3_MASK (0x70U)
#define PMU_PERI2_CLK_DIV_WDT_CLK_DIV_5_3_SHIFT (4U)
/*! wdt_clk_div_5_3 - See bit[25:24]
 */
#define PMU_PERI2_CLK_DIV_WDT_CLK_DIV_5_3(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI2_CLK_DIV_WDT_CLK_DIV_5_3_SHIFT)) & PMU_PERI2_CLK_DIV_WDT_CLK_DIV_5_3_MASK)
#define PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_2_0_MASK (0x700U)
#define PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_2_0_SHIFT (8U)
/*! gpt3_clk_div_2_0 - GPT3 clock divisor[2:0]
 *  0b000..(divisor = 1)
 */
#define PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_2_0(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_2_0_SHIFT)) & PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_2_0_MASK)
#define PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_5_3_MASK (0x7000U)
#define PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_5_3_SHIFT (12U)
/*! gpt3_clk_div_5_3 - See bit[10:8]
 */
#define PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_5_3(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_5_3_SHIFT)) & PMU_PERI2_CLK_DIV_GPT3_CLK_DIV_5_3_MASK)
#define PMU_PERI2_CLK_DIV_I2C_CLK_DIV_MASK (0x300000U)
#define PMU_PERI2_CLK_DIV_I2C_CLK_DIV_SHIFT (20U)
/*! i2c_clk_div - i2c function clock divisor, divisor = i2c_clk_div
 *  0b00..(divisor = 1)
 */
#define PMU_PERI2_CLK_DIV_I2C_CLK_DIV(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI2_CLK_DIV_I2C_CLK_DIV_SHIFT)) & PMU_PERI2_CLK_DIV_I2C_CLK_DIV_MASK)
#define PMU_PERI2_CLK_DIV_WDT_CLK_DIV_1_0_MASK (0x3000000U)
#define PMU_PERI2_CLK_DIV_WDT_CLK_DIV_1_0_SHIFT (24U)
/*! wdt_clk_div_1_0 - WDT clock divisor
 *  0b00..(divisor = 1)
 */
#define PMU_PERI2_CLK_DIV_WDT_CLK_DIV_1_0(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI2_CLK_DIV_WDT_CLK_DIV_1_0_SHIFT)) & PMU_PERI2_CLK_DIV_WDT_CLK_DIV_1_0_MASK)
#define PMU_PERI2_CLK_DIV_WDT_CLK_DIV_2_2_MASK (0x10000000U)
#define PMU_PERI2_CLK_DIV_WDT_CLK_DIV_2_2_SHIFT (28U)
/*! wdt_clk_div_2_2 - See bit[25:24]
 */
#define PMU_PERI2_CLK_DIV_WDT_CLK_DIV_2_2(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI2_CLK_DIV_WDT_CLK_DIV_2_2_SHIFT)) & PMU_PERI2_CLK_DIV_WDT_CLK_DIV_2_2_MASK)
/*! @} */

/*! @name CAU_CLK_SEL - select signal for CAU MCLK register */
/*! @{ */
#define PMU_CAU_CLK_SEL_CAU_CLK_SEL_MASK (0x3U)
#define PMU_CAU_CLK_SEL_CAU_CLK_SEL_SHIFT (0U)
/*! cau_clk_sel - select signal for cau mclk
 *  0b00..192M PLL clock
 *  0b01..RC32 MHz clock
 *  0b10..XTAL32 MHz clock
 *  0b11..AUDIO PLL clock
 */
#define PMU_CAU_CLK_SEL_CAU_CLK_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_CAU_CLK_SEL_CAU_CLK_SEL_SHIFT)) & PMU_CAU_CLK_SEL_CAU_CLK_SEL_MASK)
#define PMU_CAU_CLK_SEL_CAU_SW_GATE_MASK (0x4U)
#define PMU_CAU_CLK_SEL_CAU_SW_GATE_SHIFT (2U)
/*! cau_sw_gate - gate signal for cau mclk
 */
#define PMU_CAU_CLK_SEL_CAU_SW_GATE(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_CAU_CLK_SEL_CAU_SW_GATE_SHIFT)) & PMU_CAU_CLK_SEL_CAU_SW_GATE_MASK)
/*! @} */

/*! @name LOW_PWR_CTRL - low power control in PM3/PM4 mode register */
/*! @{ */
#define PMU_LOW_PWR_CTRL_CACHE_LINE_FLUSH_MASK (0x2U)
#define PMU_LOW_PWR_CTRL_CACHE_LINE_FLUSH_SHIFT (1U)
/*! cache_line_flush - flushes the cache
 */
#define PMU_LOW_PWR_CTRL_CACHE_LINE_FLUSH(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_LOW_PWR_CTRL_CACHE_LINE_FLUSH_SHIFT)) & PMU_LOW_PWR_CTRL_CACHE_LINE_FLUSH_MASK)
#define PMU_LOW_PWR_CTRL_SLP_CTRL_MASK (0x8U)
#define PMU_LOW_PWR_CTRL_SLP_CTRL_SHIFT (3U)
/*! SLP_CTRL - 32k output clock enable signal
 *  0b0..PU enabled while PD disabled
 *  0b1..PU disabled while PD enabled
 */
#define PMU_LOW_PWR_CTRL_SLP_CTRL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_LOW_PWR_CTRL_SLP_CTRL_SHIFT)) & PMU_LOW_PWR_CTRL_SLP_CTRL_MASK)
#define PMU_LOW_PWR_CTRL_RC_OSC_SEL_MASK (0x10U)
#define PMU_LOW_PWR_CTRL_RC_OSC_SEL_SHIFT (4U)
/*! RC_OSC_SEL - RC32k and XTAL32k output clock selection
 */
#define PMU_LOW_PWR_CTRL_RC_OSC_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_LOW_PWR_CTRL_RC_OSC_SEL_SHIFT)) & PMU_LOW_PWR_CTRL_RC_OSC_SEL_MASK)
/*! @} */

/*! @name IO_PAD_PWR_CFG - I/O Pad Power configuration register */
/*! @{ */
#define PMU_IO_PAD_PWR_CFG_GPIO0_PDB_MASK (0x1U)
#define PMU_IO_PAD_PWR_CFG_GPIO0_PDB_SHIFT (0U)
/*! GPIO0_PDB - GPIO0 PAD group power switch signal
 *  0b0..Power off
 *  0b1..Power on
 */
#define PMU_IO_PAD_PWR_CFG_GPIO0_PDB(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO0_PDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO0_PDB_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO1_PDB_MASK (0x2U)
#define PMU_IO_PAD_PWR_CFG_GPIO1_PDB_SHIFT (1U)
/*! GPIO1_PDB - GPIO1 PAD group power switch signal
 *  0b0..Power off
 *  0b1..Power on
 */
#define PMU_IO_PAD_PWR_CFG_GPIO1_PDB(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO1_PDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO1_PDB_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO2_PDB_MASK (0x4U)
#define PMU_IO_PAD_PWR_CFG_GPIO2_PDB_SHIFT (2U)
/*! GPIO2_PDB - GPIO2 PAD group power switch signal
 *  0b0..Power off
 *  0b1..Power on
 */
#define PMU_IO_PAD_PWR_CFG_GPIO2_PDB(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO2_PDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO2_PDB_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO3_PDB_MASK (0x8U)
#define PMU_IO_PAD_PWR_CFG_GPIO3_PDB_SHIFT (3U)
/*! GPIO3_PDB - GPIO3 PAD group power switch signal
 *  0b0..Power off
 *  0b1..Power on
 */
#define PMU_IO_PAD_PWR_CFG_GPIO3_PDB(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO3_PDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO3_PDB_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO0_V25_MASK (0x10U)
#define PMU_IO_PAD_PWR_CFG_GPIO0_V25_SHIFT (4U)
/*! GPIO0_V25 - GPIO0 PAD group voltage select signal
 *  0b0..3.3V
 *  0b1..2.5V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO0_V25(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO0_V25_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO0_V25_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO1_V25_MASK (0x20U)
#define PMU_IO_PAD_PWR_CFG_GPIO1_V25_SHIFT (5U)
/*! GPIO1_V25 - GPIO1 PAD group voltage select signal
 *  0b0..3.3V
 *  0b1..2.5V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO1_V25(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO1_V25_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO1_V25_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO2_V25_MASK (0x40U)
#define PMU_IO_PAD_PWR_CFG_GPIO2_V25_SHIFT (6U)
/*! GPIO2_V25 - GPIO2 PAD group voltage select signal
 *  0b0..3.3V
 *  0b1..2.5V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO2_V25(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO2_V25_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO2_V25_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO3_V25_MASK (0x80U)
#define PMU_IO_PAD_PWR_CFG_GPIO3_V25_SHIFT (7U)
/*! GPIO3_V25 - GPIO3 PAD group voltage select signal
 *  0b0..3.3V
 *  0b1..2.5V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO3_V25(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO3_V25_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO3_V25_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO0_V18_MASK (0x100U)
#define PMU_IO_PAD_PWR_CFG_GPIO0_V18_SHIFT (8U)
/*! GPIO0_V18 - GPIO0 PAD group voltage select signal
 *  0b0..2.5V or 3.3V
 *  0b1..1.8V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO0_V18(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO0_V18_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO0_V18_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO1_V18_MASK (0x200U)
#define PMU_IO_PAD_PWR_CFG_GPIO1_V18_SHIFT (9U)
/*! GPIO1_V18 - GPIO1 PAD group voltage select signal
 *  0b0..2.5V or 3.3V
 *  0b1..1.8V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO1_V18(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO1_V18_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO1_V18_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO2_V18_MASK (0x400U)
#define PMU_IO_PAD_PWR_CFG_GPIO2_V18_SHIFT (10U)
/*! GPIO2_V18 - GPIO2 PAD group voltage select signal
 *  0b0..2.5V or 3.3V
 *  0b1..1.8V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO2_V18(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO2_V18_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO2_V18_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO3_V18_MASK (0x800U)
#define PMU_IO_PAD_PWR_CFG_GPIO3_V18_SHIFT (11U)
/*! GPIO3_V18 - GPIO3 PAD group voltage select signal
 *  0b0..2.5V or 3.3V
 *  0b1..1.8V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO3_V18(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO3_V18_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO3_V18_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO0_LOW_VDDB_MASK (0x1000U)
#define PMU_IO_PAD_PWR_CFG_GPIO0_LOW_VDDB_SHIFT (12U)
/*! GPIO0_LOW_VDDB - GPIO0 PAD group power switch signal
 *  0b0..Power off
 *  0b1..Power on
 */
#define PMU_IO_PAD_PWR_CFG_GPIO0_LOW_VDDB(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO0_LOW_VDDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO0_LOW_VDDB_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO1_LOW_VDDB_MASK (0x2000U)
#define PMU_IO_PAD_PWR_CFG_GPIO1_LOW_VDDB_SHIFT (13U)
/*! GPIO1_LOW_VDDB - GPIO1 PAD group power switch signal
 *  0b0..Power off
 *  0b1..Power on
 */
#define PMU_IO_PAD_PWR_CFG_GPIO1_LOW_VDDB(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO1_LOW_VDDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO1_LOW_VDDB_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO2_LOW_VDDB_MASK (0x4000U)
#define PMU_IO_PAD_PWR_CFG_GPIO2_LOW_VDDB_SHIFT (14U)
/*! GPIO2_LOW_VDDB - GPIO2 PAD group power switch signal
 *  0b0..Power off
 *  0b1..Power on
 */
#define PMU_IO_PAD_PWR_CFG_GPIO2_LOW_VDDB(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO2_LOW_VDDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO2_LOW_VDDB_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO3_LOW_VDDB_MASK (0x8000U)
#define PMU_IO_PAD_PWR_CFG_GPIO3_LOW_VDDB_SHIFT (15U)
/*! GPIO3_LOW_VDDB - GPIO3 PAD group power switch signal
 *  0b0..Power off
 *  0b1..Power on
 */
#define PMU_IO_PAD_PWR_CFG_GPIO3_LOW_VDDB(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO3_LOW_VDDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO3_LOW_VDDB_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_LOW_VDDB_MASK (0x10000U)
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_LOW_VDDB_SHIFT (16U)
/*! GPIO_AON_LOW_VDDB - Always on PAD group power switch signal
 *  0b0..Power off
 *  0b1..Power on
 */
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_LOW_VDDB(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO_AON_LOW_VDDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO_AON_LOW_VDDB_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_V25_MASK (0x20000U)
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_V25_SHIFT (17U)
/*! GPIO_AON_V25 - Always on PAD group voltage select signal
 *  0b0..3.3V
 *  0b1..2.5V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_V25(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO_AON_V25_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO_AON_V25_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_V18_MASK (0x40000U)
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_V18_SHIFT (18U)
/*! GPIO_AON_V18 - Always on PAD group voltage select signal
 *  0b0..2.5V or 3.3V
 *  0b1..1.8V
 */
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_V18(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO_AON_V18_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO_AON_V18_MASK)
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_PDB_MASK (0x80000U)
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_PDB_SHIFT (19U)
/*! GPIO_AON_PDB - Always on PAD group power down mode control
 *  0b0..power down mode
 *  0b1..normal mode
 */
#define PMU_IO_PAD_PWR_CFG_GPIO_AON_PDB(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_PAD_PWR_CFG_GPIO_AON_PDB_SHIFT)) & PMU_IO_PAD_PWR_CFG_GPIO_AON_PDB_MASK)
/*! @} */

/*! @name EXT_SEL_REG0 - extra interrupt select register 0 */
/*! @{ */
#define PMU_EXT_SEL_REG0_SEL_34_MASK (0x1U)
#define PMU_EXT_SEL_REG0_SEL_34_SHIFT (0U)
/*! SEL_34 - select signal for extra interrupt 34
 *  0b0..from GPIO_0
 *  0b1..from GPIO_1
 */
#define PMU_EXT_SEL_REG0_SEL_34(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_34_SHIFT)) & PMU_EXT_SEL_REG0_SEL_34_MASK)
#define PMU_EXT_SEL_REG0_SEL_35_MASK (0x2U)
#define PMU_EXT_SEL_REG0_SEL_35_SHIFT (1U)
/*! SEL_35 - select signal for extra interrupt 35
 *  0b0..from GPIO_2
 *  0b1..from GPIO_3
 */
#define PMU_EXT_SEL_REG0_SEL_35(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_35_SHIFT)) & PMU_EXT_SEL_REG0_SEL_35_MASK)
#define PMU_EXT_SEL_REG0_SEL_36_MASK (0x4U)
#define PMU_EXT_SEL_REG0_SEL_36_SHIFT (2U)
/*! SEL_36 - select signal for extra interrupt 36
 *  0b0..from GPIO_4
 *  0b1..from GPIO_5
 */
#define PMU_EXT_SEL_REG0_SEL_36(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_36_SHIFT)) & PMU_EXT_SEL_REG0_SEL_36_MASK)
#define PMU_EXT_SEL_REG0_SEL_37_MASK (0x8U)
#define PMU_EXT_SEL_REG0_SEL_37_SHIFT (3U)
/*! SEL_37 - select signal for extra interrupt 37
 *  0b0..from GPIO_6
 *  0b1..from GPIO_7
 */
#define PMU_EXT_SEL_REG0_SEL_37(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_37_SHIFT)) & PMU_EXT_SEL_REG0_SEL_37_MASK)
#define PMU_EXT_SEL_REG0_SEL_38_MASK (0x10U)
#define PMU_EXT_SEL_REG0_SEL_38_SHIFT (4U)
/*! SEL_38 - select signal for extra interrupt 38
 *  0b0..from GPIO_8
 *  0b1..from GPIO_9
 */
#define PMU_EXT_SEL_REG0_SEL_38(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_38_SHIFT)) & PMU_EXT_SEL_REG0_SEL_38_MASK)
#define PMU_EXT_SEL_REG0_SEL_39_MASK (0x20U)
#define PMU_EXT_SEL_REG0_SEL_39_SHIFT (5U)
/*! SEL_39 - select signal for extra interrupt 39
 *  0b0..from GPIO_10
 *  0b1..from GPIO_11
 */
#define PMU_EXT_SEL_REG0_SEL_39(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_39_SHIFT)) & PMU_EXT_SEL_REG0_SEL_39_MASK)
#define PMU_EXT_SEL_REG0_SEL_40_MASK (0x40U)
#define PMU_EXT_SEL_REG0_SEL_40_SHIFT (6U)
/*! SEL_40 - select signal for extra interrupt 40
 *  0b0..from GPIO_12
 *  0b1..from GPIO_13
 */
#define PMU_EXT_SEL_REG0_SEL_40(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_40_SHIFT)) & PMU_EXT_SEL_REG0_SEL_40_MASK)
#define PMU_EXT_SEL_REG0_SEL_41_MASK (0x80U)
#define PMU_EXT_SEL_REG0_SEL_41_SHIFT (7U)
/*! SEL_41 - select signal for extra interrupt 41
 *  0b0..from GPIO_14
 *  0b1..from GPIO_15
 */
#define PMU_EXT_SEL_REG0_SEL_41(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_41_SHIFT)) & PMU_EXT_SEL_REG0_SEL_41_MASK)
#define PMU_EXT_SEL_REG0_SEL_42_MASK (0x100U)
#define PMU_EXT_SEL_REG0_SEL_42_SHIFT (8U)
/*! SEL_42 - select signal for extra interrupt 42
 *  0b0..from GPIO_16
 *  0b1..from GPIO_17
 */
#define PMU_EXT_SEL_REG0_SEL_42(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_42_SHIFT)) & PMU_EXT_SEL_REG0_SEL_42_MASK)
#define PMU_EXT_SEL_REG0_SEL_43_MASK (0x200U)
#define PMU_EXT_SEL_REG0_SEL_43_SHIFT (9U)
/*! SEL_43 - select signal for extra interrupt 43
 *  0b0..from GPIO_18
 *  0b1..from GPIO_19
 */
#define PMU_EXT_SEL_REG0_SEL_43(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_43_SHIFT)) & PMU_EXT_SEL_REG0_SEL_43_MASK)
#define PMU_EXT_SEL_REG0_SEL_44_MASK (0x400U)
#define PMU_EXT_SEL_REG0_SEL_44_SHIFT (10U)
/*! SEL_44 - select signal for extra interrupt 44
 *  0b0..from GPIO_20
 *  0b1..from GPIO_21
 */
#define PMU_EXT_SEL_REG0_SEL_44(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_44_SHIFT)) & PMU_EXT_SEL_REG0_SEL_44_MASK)
#define PMU_EXT_SEL_REG0_SEL_45_MASK (0x800U)
#define PMU_EXT_SEL_REG0_SEL_45_SHIFT (11U)
/*! SEL_45 - select signal for extra interrupt 45
 *  0b0..from GPIO_22
 *  0b1..from GPIO_23
 */
#define PMU_EXT_SEL_REG0_SEL_45(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_45_SHIFT)) & PMU_EXT_SEL_REG0_SEL_45_MASK)
#define PMU_EXT_SEL_REG0_SEL_46_MASK (0x1000U)
#define PMU_EXT_SEL_REG0_SEL_46_SHIFT (12U)
/*! SEL_46 - select signal for extra interrupt 46
 *  0b0..from GPIO_24
 *  0b1..from GPIO_25
 */
#define PMU_EXT_SEL_REG0_SEL_46(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_46_SHIFT)) & PMU_EXT_SEL_REG0_SEL_46_MASK)
#define PMU_EXT_SEL_REG0_SEL_47_MASK (0x2000U)
#define PMU_EXT_SEL_REG0_SEL_47_SHIFT (13U)
/*! SEL_47 - select signal for extra interrupt 47
 *  0b0..from GPIO_26
 *  0b1..from GPIO_27
 */
#define PMU_EXT_SEL_REG0_SEL_47(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_47_SHIFT)) & PMU_EXT_SEL_REG0_SEL_47_MASK)
#define PMU_EXT_SEL_REG0_SEL_48_MASK (0x4000U)
#define PMU_EXT_SEL_REG0_SEL_48_SHIFT (14U)
/*! SEL_48 - select signal for extra interrupt 48
 *  0b0..from GPIO_28
 *  0b1..from GPIO_29
 */
#define PMU_EXT_SEL_REG0_SEL_48(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_48_SHIFT)) & PMU_EXT_SEL_REG0_SEL_48_MASK)
#define PMU_EXT_SEL_REG0_SEL_49_MASK (0x8000U)
#define PMU_EXT_SEL_REG0_SEL_49_SHIFT (15U)
/*! SEL_49 - select signal for extra interrupt 49
 *  0b0..from GPIO_30
 *  0b1..from GPIO_31
 */
#define PMU_EXT_SEL_REG0_SEL_49(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_49_SHIFT)) & PMU_EXT_SEL_REG0_SEL_49_MASK)
#define PMU_EXT_SEL_REG0_SEL_50_MASK (0x10000U)
#define PMU_EXT_SEL_REG0_SEL_50_SHIFT (16U)
/*! SEL_50 - select signal for extra interrupt 50
 *  0b0..from GPIO_32
 *  0b1..from GPIO_33
 */
#define PMU_EXT_SEL_REG0_SEL_50(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_50_SHIFT)) & PMU_EXT_SEL_REG0_SEL_50_MASK)
#define PMU_EXT_SEL_REG0_SEL_51_MASK (0x20000U)
#define PMU_EXT_SEL_REG0_SEL_51_SHIFT (17U)
/*! SEL_51 - select signal for extra interrupt 51
 *  0b0..from GPIO_34
 *  0b1..from GPIO_35
 */
#define PMU_EXT_SEL_REG0_SEL_51(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_51_SHIFT)) & PMU_EXT_SEL_REG0_SEL_51_MASK)
#define PMU_EXT_SEL_REG0_SEL_52_MASK (0x40000U)
#define PMU_EXT_SEL_REG0_SEL_52_SHIFT (18U)
/*! SEL_52 - select signal for extra interrupt 52
 *  0b0..from GPIO_36
 *  0b1..from GPIO_37
 */
#define PMU_EXT_SEL_REG0_SEL_52(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_52_SHIFT)) & PMU_EXT_SEL_REG0_SEL_52_MASK)
#define PMU_EXT_SEL_REG0_SEL_53_MASK (0x80000U)
#define PMU_EXT_SEL_REG0_SEL_53_SHIFT (19U)
/*! SEL_53 - select signal for extra interrupt 53
 *  0b0..from GPIO_38
 *  0b1..from GPIO_39
 */
#define PMU_EXT_SEL_REG0_SEL_53(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_53_SHIFT)) & PMU_EXT_SEL_REG0_SEL_53_MASK)
#define PMU_EXT_SEL_REG0_SEL_54_MASK (0x100000U)
#define PMU_EXT_SEL_REG0_SEL_54_SHIFT (20U)
/*! SEL_54 - select signal for extra interrupt 54
 *  0b0..from GPIO_40
 *  0b1..from GPIO_41
 */
#define PMU_EXT_SEL_REG0_SEL_54(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_54_SHIFT)) & PMU_EXT_SEL_REG0_SEL_54_MASK)
#define PMU_EXT_SEL_REG0_SEL_55_MASK (0x200000U)
#define PMU_EXT_SEL_REG0_SEL_55_SHIFT (21U)
/*! SEL_55 - select signal for extra interrupt 55
 *  0b0..from GPIO_42
 *  0b1..from GPIO_43
 */
#define PMU_EXT_SEL_REG0_SEL_55(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_55_SHIFT)) & PMU_EXT_SEL_REG0_SEL_55_MASK)
#define PMU_EXT_SEL_REG0_SEL_56_MASK (0x400000U)
#define PMU_EXT_SEL_REG0_SEL_56_SHIFT (22U)
/*! SEL_56 - select signal for extra interrupt 56
 *  0b0..from GPIO_44
 *  0b1..from GPIO_45
 */
#define PMU_EXT_SEL_REG0_SEL_56(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_56_SHIFT)) & PMU_EXT_SEL_REG0_SEL_56_MASK)
#define PMU_EXT_SEL_REG0_SEL_57_MASK (0x800000U)
#define PMU_EXT_SEL_REG0_SEL_57_SHIFT (23U)
/*! SEL_57 - select signal for extra interrupt 57
 *  0b0..from GPIO_46
 *  0b1..from GPIO_47
 */
#define PMU_EXT_SEL_REG0_SEL_57(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_57_SHIFT)) & PMU_EXT_SEL_REG0_SEL_57_MASK)
#define PMU_EXT_SEL_REG0_SEL_58_MASK (0x1000000U)
#define PMU_EXT_SEL_REG0_SEL_58_SHIFT (24U)
/*! SEL_58 - select signal for extra interrupt 58
 *  0b0..from GPIO_48
 *  0b1..from GPIO_49
 */
#define PMU_EXT_SEL_REG0_SEL_58(x) (((uint32_t)(((uint32_t)(x)) << PMU_EXT_SEL_REG0_SEL_58_SHIFT)) & PMU_EXT_SEL_REG0_SEL_58_MASK)
/*! @} */

/*! @name AUPLL_CTRL1 - USB and audio PLL control register */
/*! @{ */
#define PMU_AUPLL_CTRL1_PD_OVPROT_MASK (0x1U)
#define PMU_AUPLL_CTRL1_PD_OVPROT_SHIFT (0U)
/*! PD_OVPROT - Enable Over-Voltage protection on VCO
 */
#define PMU_AUPLL_CTRL1_PD_OVPROT(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_PD_OVPROT_SHIFT)) & PMU_AUPLL_CTRL1_PD_OVPROT_MASK)
#define PMU_AUPLL_CTRL1_REFCLK_SEL_MASK (0x2U)
#define PMU_AUPLL_CTRL1_REFCLK_SEL_SHIFT (1U)
/*! REFCLK_SEL - Reference clock selection
 */
#define PMU_AUPLL_CTRL1_REFCLK_SEL(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_REFCLK_SEL_SHIFT)) & PMU_AUPLL_CTRL1_REFCLK_SEL_MASK)
#define PMU_AUPLL_CTRL1_ICP_MASK (0xCU)
#define PMU_AUPLL_CTRL1_ICP_SHIFT (2U)
/*! ICP - Charge-Pump current control bits
 */
#define PMU_AUPLL_CTRL1_ICP(x) (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_ICP_SHIFT)) & PMU_AUPLL_CTRL1_ICP_MASK)
#define PMU_AUPLL_CTRL1_ENA_DITHER_MASK (0x10U)
#define PMU_AUPLL_CTRL1_ENA_DITHER_SHIFT (4U)
/*! ENA_DITHER - ENA Dither
 */
#define PMU_AUPLL_CTRL1_ENA_DITHER(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_ENA_DITHER_SHIFT)) & PMU_AUPLL_CTRL1_ENA_DITHER_MASK)
#define PMU_AUPLL_CTRL1_DIV_OCLK_PATTERN_MASK (0x60U)
#define PMU_AUPLL_CTRL1_DIV_OCLK_PATTERN_SHIFT (5U)
/*! DIV_OCLK_PATTERN - Output clock divider control
 */
#define PMU_AUPLL_CTRL1_DIV_OCLK_PATTERN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_DIV_OCLK_PATTERN_SHIFT)) & PMU_AUPLL_CTRL1_DIV_OCLK_PATTERN_MASK)
#define PMU_AUPLL_CTRL1_DIV_OCLK_MODULO_MASK (0x380U)
#define PMU_AUPLL_CTRL1_DIV_OCLK_MODULO_SHIFT (7U)
/*! DIV_OCLK_MODULO - Output clock divider control
 */
#define PMU_AUPLL_CTRL1_DIV_OCLK_MODULO(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_DIV_OCLK_MODULO_SHIFT)) & PMU_AUPLL_CTRL1_DIV_OCLK_MODULO_MASK)
#define PMU_AUPLL_CTRL1_DIV_MCLK_MASK (0x3C00U)
#define PMU_AUPLL_CTRL1_DIV_MCLK_SHIFT (10U)
/*! DIV_MCLK - MCLK divider
 */
#define PMU_AUPLL_CTRL1_DIV_MCLK(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_DIV_MCLK_SHIFT)) & PMU_AUPLL_CTRL1_DIV_MCLK_MASK)
#define PMU_AUPLL_CTRL1_DIV_FBCCLK_MASK (0xFC000U)
#define PMU_AUPLL_CTRL1_DIV_FBCCLK_SHIFT (14U)
/*! DIV_FBCCLK - FBC divider
 */
#define PMU_AUPLL_CTRL1_DIV_FBCCLK(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_DIV_FBCCLK_SHIFT)) & PMU_AUPLL_CTRL1_DIV_FBCCLK_MASK)
#define PMU_AUPLL_CTRL1_ANA_TSTPNT_MASK (0x300000U)
#define PMU_AUPLL_CTRL1_ANA_TSTPNT_SHIFT (20U)
/*! ANA_TSTPNT - Analog test select
 */
#define PMU_AUPLL_CTRL1_ANA_TSTPNT(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_ANA_TSTPNT_SHIFT)) & PMU_AUPLL_CTRL1_ANA_TSTPNT_MASK)
#define PMU_AUPLL_CTRL1_DIG_TSTPNT_MASK (0xC00000U)
#define PMU_AUPLL_CTRL1_DIG_TSTPNT_SHIFT (22U)
/*! DIG_TSTPNT - Digital test select
 */
#define PMU_AUPLL_CTRL1_DIG_TSTPNT(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_DIG_TSTPNT_SHIFT)) & PMU_AUPLL_CTRL1_DIG_TSTPNT_MASK)
#define PMU_AUPLL_CTRL1_EN_VCOX2_MASK (0x20000000U)
#define PMU_AUPLL_CTRL1_EN_VCOX2_SHIFT (29U)
/*! EN_VCOX2 - Enable or Disable VCOCLK_X2
 */
#define PMU_AUPLL_CTRL1_EN_VCOX2(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_AUPLL_CTRL1_EN_VCOX2_SHIFT)) & PMU_AUPLL_CTRL1_EN_VCOX2_MASK)
/*! @} */

/*! @name CAU_CTRL - CAU Control Register */
/*! @{ */
#define PMU_CAU_CTRL_CAU_ACOMP_MCLK_EN_MASK (0x1U)
#define PMU_CAU_CTRL_CAU_ACOMP_MCLK_EN_SHIFT (0U)
/*! cau_acomp_mclk_en - cau_acomp module main clock enable signal
 *  0b0..do not enable
 *  0b1..
 */
#define PMU_CAU_CTRL_CAU_ACOMP_MCLK_EN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_CAU_CTRL_CAU_ACOMP_MCLK_EN_SHIFT)) & PMU_CAU_CTRL_CAU_ACOMP_MCLK_EN_MASK)
#define PMU_CAU_CTRL_CAU_GPDAC_MCLK_EN_MASK (0x2U)
#define PMU_CAU_CTRL_CAU_GPDAC_MCLK_EN_SHIFT (1U)
/*! cau_gpdac_mclk_en - cau_gpdac module main clock enable signal
 *  0b0..do not enable
 *  0b1..
 */
#define PMU_CAU_CTRL_CAU_GPDAC_MCLK_EN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_CAU_CTRL_CAU_GPDAC_MCLK_EN_SHIFT)) & PMU_CAU_CTRL_CAU_GPDAC_MCLK_EN_MASK)
#define PMU_CAU_CTRL_CAU_GPADC1_MCLK_EN_MASK (0x4U)
#define PMU_CAU_CTRL_CAU_GPADC1_MCLK_EN_SHIFT (2U)
/*! cau_gpadc1_mclk_en - cau_gpadc1 module main clock enable signal
 *  0b0..do not enable
 *  0b1..
 */
#define PMU_CAU_CTRL_CAU_GPADC1_MCLK_EN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_CAU_CTRL_CAU_GPADC1_MCLK_EN_SHIFT)) & PMU_CAU_CTRL_CAU_GPADC1_MCLK_EN_MASK)
#define PMU_CAU_CTRL_CAU_GPADC0_MCLK_EN_MASK (0x8U)
#define PMU_CAU_CTRL_CAU_GPADC0_MCLK_EN_SHIFT (3U)
/*! cau_gpadc0_mclk_en - cau_gpadc0 module main clock enable signal
 *  0b0..do not enable
 *  0b1..
 */
#define PMU_CAU_CTRL_CAU_GPADC0_MCLK_EN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_CAU_CTRL_CAU_GPADC0_MCLK_EN_SHIFT)) & PMU_CAU_CTRL_CAU_GPADC0_MCLK_EN_MASK)
#define PMU_CAU_CTRL_CAU_BG_MCLK_EN_MASK (0x10U)
#define PMU_CAU_CTRL_CAU_BG_MCLK_EN_SHIFT (4U)
/*! cau_bg_mclk_en - cau_bg module main clock enable signal
 *  0b0..do not enable
 *  0b1..
 */
#define PMU_CAU_CTRL_CAU_BG_MCLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_CAU_CTRL_CAU_BG_MCLK_EN_SHIFT)) & PMU_CAU_CTRL_CAU_BG_MCLK_EN_MASK)
/*! @} */

/*! @name RC32K_CTRL0 - RC32k Control 0 Register */
/*! @{ */
#define PMU_RC32K_CTRL0_RC32K_CODE_FR_EXT_MASK (0x3FFFU)
#define PMU_RC32K_CTRL0_RC32K_CODE_FR_EXT_SHIFT (0U)
/*! rc32k_code_fr_ext - External code In for frequency setting
 */
#define PMU_RC32K_CTRL0_RC32K_CODE_FR_EXT(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL0_RC32K_CODE_FR_EXT_SHIFT)) & PMU_RC32K_CTRL0_RC32K_CODE_FR_EXT_MASK)
#define PMU_RC32K_CTRL0_RC32K_CAL_EN_MASK (0x4000U)
#define PMU_RC32K_CTRL0_RC32K_CAL_EN_SHIFT (14U)
/*! rc32k_cal_en - Enable calibration of 32k oscillator
 */
#define PMU_RC32K_CTRL0_RC32K_CAL_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL0_RC32K_CAL_EN_SHIFT)) & PMU_RC32K_CTRL0_RC32K_CAL_EN_MASK)
#define PMU_RC32K_CTRL0_RC32K_PD_MASK (0x8000U)
#define PMU_RC32K_CTRL0_RC32K_PD_SHIFT (15U)
/*! rc32k_pd - Power down 32k oscillator
 */
#define PMU_RC32K_CTRL0_RC32K_PD(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL0_RC32K_PD_SHIFT)) & PMU_RC32K_CTRL0_RC32K_PD_MASK)
/*! @} */

/*! @name RC32K_CTRL1 - RC32k Control 1 Register */
/*! @{ */
#define PMU_RC32K_CTRL1_RC32K_CAL_DONE_MASK (0x1U)
#define PMU_RC32K_CTRL1_RC32K_CAL_DONE_SHIFT (0U)
/*! rc32k_cal_done - Asserts high when calibration is done
 */
#define PMU_RC32K_CTRL1_RC32K_CAL_DONE(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL1_RC32K_CAL_DONE_SHIFT)) & PMU_RC32K_CTRL1_RC32K_CAL_DONE_MASK)
#define PMU_RC32K_CTRL1_RC32K_RDY_MASK (0x2U)
#define PMU_RC32K_CTRL1_RC32K_RDY_SHIFT (1U)
/*! rc32k_rdy - Asserts high when 32k clock is ready upon pwrup
 */
#define PMU_RC32K_CTRL1_RC32K_RDY(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL1_RC32K_RDY_SHIFT)) & PMU_RC32K_CTRL1_RC32K_RDY_MASK)
#define PMU_RC32K_CTRL1_RC32K_MASK (0x4U)
#define PMU_RC32K_CTRL1_RC32K_SHIFT (2U)
/*! rc32k - RC32k
 */
#define PMU_RC32K_CTRL1_RC32K(x) (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL1_RC32K_SHIFT)) & PMU_RC32K_CTRL1_RC32K_MASK)
#define PMU_RC32K_CTRL1_RC32K_CAL_INPROGRESS_MASK (0x8U)
#define PMU_RC32K_CTRL1_RC32K_CAL_INPROGRESS_SHIFT (3U)
/*! rc32k_cal_inprogress - Asserts high when calibration is in progress
 */
#define PMU_RC32K_CTRL1_RC32K_CAL_INPROGRESS(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL1_RC32K_CAL_INPROGRESS_SHIFT)) & PMU_RC32K_CTRL1_RC32K_CAL_INPROGRESS_MASK)
#define PMU_RC32K_CTRL1_RC32K_CODE_FR_CAL_MASK (0x3FFF0U)
#define PMU_RC32K_CTRL1_RC32K_CODE_FR_CAL_SHIFT (4U)
/*! rc32k_code_fr_cal - After calibration hold calibrated code
 */
#define PMU_RC32K_CTRL1_RC32K_CODE_FR_CAL(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL1_RC32K_CODE_FR_CAL_SHIFT)) & PMU_RC32K_CTRL1_RC32K_CODE_FR_CAL_MASK)
#define PMU_RC32K_CTRL1_RC32K_ALLOW_CAL_MASK (0x40000U)
#define PMU_RC32K_CTRL1_RC32K_ALLOW_CAL_SHIFT (18U)
/*! rc32k_allow_cal - Allow calibration to be performed (monitor system clock)
 */
#define PMU_RC32K_CTRL1_RC32K_ALLOW_CAL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL1_RC32K_ALLOW_CAL_SHIFT)) & PMU_RC32K_CTRL1_RC32K_ALLOW_CAL_MASK)
#define PMU_RC32K_CTRL1_RC32K_CAL_DIV_MASK (0x380000U)
#define PMU_RC32K_CTRL1_RC32K_CAL_DIV_SHIFT (19U)
/*! rc32k_cal_div - Divider for the clock step during calibration
 */
#define PMU_RC32K_CTRL1_RC32K_CAL_DIV(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL1_RC32K_CAL_DIV_SHIFT)) & PMU_RC32K_CTRL1_RC32K_CAL_DIV_MASK)
#define PMU_RC32K_CTRL1_RC32K_REFCLK32K_MASK (0x400000U)
#define PMU_RC32K_CTRL1_RC32K_REFCLK32K_SHIFT (22U)
/*! rc32k_refclk32k - RC32k Reference Clock
 */
#define PMU_RC32K_CTRL1_RC32K_REFCLK32K(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL1_RC32K_REFCLK32K_SHIFT)) & PMU_RC32K_CTRL1_RC32K_REFCLK32K_MASK)
#define PMU_RC32K_CTRL1_RC32K_EXT_CODE_EN_MASK (0x800000U)
#define PMU_RC32K_CTRL1_RC32K_EXT_CODE_EN_SHIFT (23U)
/*! rc32k_ext_code_en - Allow external code in to go into the ckt
 */
#define PMU_RC32K_CTRL1_RC32K_EXT_CODE_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_RC32K_CTRL1_RC32K_EXT_CODE_EN_SHIFT)) & PMU_RC32K_CTRL1_RC32K_EXT_CODE_EN_MASK)
/*! @} */

/*! @name XTAL32K_CTRL - XTAL32k Control Register */
/*! @{ */
#define PMU_XTAL32K_CTRL_X32K_RDY_MASK (0x1U)
#define PMU_XTAL32K_CTRL_X32K_RDY_SHIFT (0U)
/*! x32k_rdy - Assert high when ready
 */
#define PMU_XTAL32K_CTRL_X32K_RDY(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_XTAL32K_CTRL_X32K_RDY_SHIFT)) & PMU_XTAL32K_CTRL_X32K_RDY_MASK)
#define PMU_XTAL32K_CTRL_XCLK32K_MASK (0x2U)
#define PMU_XTAL32K_CTRL_XCLK32K_SHIFT (1U)
/*! xclk32k - xclk32k
 */
#define PMU_XTAL32K_CTRL_XCLK32K(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_XTAL32K_CTRL_XCLK32K_SHIFT)) & PMU_XTAL32K_CTRL_XCLK32K_MASK)
#define PMU_XTAL32K_CTRL_X32K_STUP_ASSIST_MASK (0xCU)
#define PMU_XTAL32K_CTRL_X32K_STUP_ASSIST_SHIFT (2U)
/*! x32k_stup_assist - Use startup assist ckt for 32 kHz xosc
 */
#define PMU_XTAL32K_CTRL_X32K_STUP_ASSIST(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_XTAL32K_CTRL_X32K_STUP_ASSIST_SHIFT)) & PMU_XTAL32K_CTRL_X32K_STUP_ASSIST_MASK)
#define PMU_XTAL32K_CTRL_X32K_TEST_EN_MASK (0x10U)
#define PMU_XTAL32K_CTRL_X32K_TEST_EN_SHIFT (4U)
/*! x32k_test_en - Test enabling for 32k xtal ckt
 */
#define PMU_XTAL32K_CTRL_X32K_TEST_EN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_XTAL32K_CTRL_X32K_TEST_EN_SHIFT)) & PMU_XTAL32K_CTRL_X32K_TEST_EN_MASK)
#define PMU_XTAL32K_CTRL_X32K_TMODE_MASK (0x60U)
#define PMU_XTAL32K_CTRL_X32K_TMODE_SHIFT (5U)
/*! x32k_tmode - Test mode enabling for 32k xtal ckt
 */
#define PMU_XTAL32K_CTRL_X32K_TMODE(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_XTAL32K_CTRL_X32K_TMODE_SHIFT)) & PMU_XTAL32K_CTRL_X32K_TMODE_MASK)
#define PMU_XTAL32K_CTRL_X32K_VDDXO_CNTL_MASK (0x600U)
#define PMU_XTAL32K_CTRL_X32K_VDDXO_CNTL_SHIFT (9U)
/*! x32k_vddxo_cntl - Control VDDXO level
 */
#define PMU_XTAL32K_CTRL_X32K_VDDXO_CNTL(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << PMU_XTAL32K_CTRL_X32K_VDDXO_CNTL_SHIFT)) & PMU_XTAL32K_CTRL_X32K_VDDXO_CNTL_MASK)
#define PMU_XTAL32K_CTRL_X32K_EXT_OSC_EN_MASK (0x800U)
#define PMU_XTAL32K_CTRL_X32K_EXT_OSC_EN_SHIFT (11U)
/*! x32k_ext_osc_en - Enable external oscillator mode for outside clock
 */
#define PMU_XTAL32K_CTRL_X32K_EXT_OSC_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << PMU_XTAL32K_CTRL_X32K_EXT_OSC_EN_SHIFT)) & PMU_XTAL32K_CTRL_X32K_EXT_OSC_EN_MASK)
#define PMU_XTAL32K_CTRL_X32K_EN_MASK (0x1000U)
#define PMU_XTAL32K_CTRL_X32K_EN_SHIFT (12U)
/*! x32k_en - Enable 32k oscillator
 */
#define PMU_XTAL32K_CTRL_X32K_EN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_XTAL32K_CTRL_X32K_EN_SHIFT)) & PMU_XTAL32K_CTRL_X32K_EN_MASK)
#define PMU_XTAL32K_CTRL_X32K_DLY_SEL_MASK (0x6000U)
#define PMU_XTAL32K_CTRL_X32K_DLY_SEL_SHIFT (13U)
/*! x32k_dly_sel - 32k Delay Select
 */
#define PMU_XTAL32K_CTRL_X32K_DLY_SEL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_XTAL32K_CTRL_X32K_DLY_SEL_SHIFT)) & PMU_XTAL32K_CTRL_X32K_DLY_SEL_MASK)
/*! @} */

/*! @name PMIP_CMP_CTRL - PMIP Comparator Control Register */
/*! @{ */
#define PMU_PMIP_CMP_CTRL_COMP_OUT_MASK (0x1U)
#define PMU_PMIP_CMP_CTRL_COMP_OUT_SHIFT (0U)
/*! comp_out - Output of AON domain comparator
 */
#define PMU_PMIP_CMP_CTRL_COMP_OUT(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_CMP_CTRL_COMP_OUT_SHIFT)) & PMU_PMIP_CMP_CTRL_COMP_OUT_MASK)
#define PMU_PMIP_CMP_CTRL_COMP_RDY_MASK (0x2U)
#define PMU_PMIP_CMP_CTRL_COMP_RDY_SHIFT (1U)
/*! comp_rdy - Ready to use AON domain comparator
 */
#define PMU_PMIP_CMP_CTRL_COMP_RDY(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_CMP_CTRL_COMP_RDY_SHIFT)) & PMU_PMIP_CMP_CTRL_COMP_RDY_MASK)
#define PMU_PMIP_CMP_CTRL_COMP_REF_SEL_MASK (0x1CU)
#define PMU_PMIP_CMP_CTRL_COMP_REF_SEL_SHIFT (2U)
/*! comp_ref_sel - Select comparator reference for single-ended mode
 */
#define PMU_PMIP_CMP_CTRL_COMP_REF_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_CMP_CTRL_COMP_REF_SEL_SHIFT)) & PMU_PMIP_CMP_CTRL_COMP_REF_SEL_MASK)
#define PMU_PMIP_CMP_CTRL_COMP_DIFF_EN_MASK (0x20U)
#define PMU_PMIP_CMP_CTRL_COMP_DIFF_EN_SHIFT (5U)
/*! comp_diff_en - Enable Differential mode for AON comparator
 */
#define PMU_PMIP_CMP_CTRL_COMP_DIFF_EN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_CMP_CTRL_COMP_DIFF_EN_SHIFT)) & PMU_PMIP_CMP_CTRL_COMP_DIFF_EN_MASK)
#define PMU_PMIP_CMP_CTRL_COMP_EN_MASK (0x40U)
#define PMU_PMIP_CMP_CTRL_COMP_EN_SHIFT (6U)
/*! comp_en - Enable AON domain comparator
 */
#define PMU_PMIP_CMP_CTRL_COMP_EN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_CMP_CTRL_COMP_EN_SHIFT)) & PMU_PMIP_CMP_CTRL_COMP_EN_MASK)
#define PMU_PMIP_CMP_CTRL_COMP_HYST_MASK (0x180U)
#define PMU_PMIP_CMP_CTRL_COMP_HYST_SHIFT (7U)
/*! comp_hyst - Control of comparator hysteresis
 */
#define PMU_PMIP_CMP_CTRL_COMP_HYST(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_CMP_CTRL_COMP_HYST_SHIFT)) & PMU_PMIP_CMP_CTRL_COMP_HYST_MASK)
#define PMU_PMIP_CMP_CTRL_CAU_REF_EN_MASK (0x200U)
#define PMU_PMIP_CMP_CTRL_CAU_REF_EN_SHIFT (9U)
/*! cau_ref_en - CAU Reference Enable
 */
#define PMU_PMIP_CMP_CTRL_CAU_REF_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_CMP_CTRL_CAU_REF_EN_SHIFT)) & PMU_PMIP_CMP_CTRL_CAU_REF_EN_MASK)
/*! @} */

/*! @name PMIP_BRNDET_AV18 - PMIP Brownout AV18 Register */
/*! @{ */
#define PMU_PMIP_BRNDET_AV18_DEL_AV18_SEL_MASK (0x3U)
#define PMU_PMIP_BRNDET_AV18_DEL_AV18_SEL_SHIFT (0U)
/*! del_av18_sel - Control of rdygen_av18 rising edge delay circiut
 */
#define PMU_PMIP_BRNDET_AV18_DEL_AV18_SEL(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_DEL_AV18_SEL_SHIFT)) & PMU_PMIP_BRNDET_AV18_DEL_AV18_SEL_MASK)
#define PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_HYST_MASK (0xCU)
#define PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_HYST_SHIFT (2U)
/*! ldo_aon_av18_hyst - Control of ldo_aon_av18 hysteresis
 */
#define PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_HYST(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_HYST_SHIFT)) & PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_HYST_MASK)
#define PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_SEL_MASK (0x70U)
#define PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_SEL_SHIFT (4U)
/*! ldo_aon_av18_sel - Select output voltage of ldo_aon_av18
 */
#define PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_SEL(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_SEL_SHIFT)) & PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_SEL_MASK)
#define PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_EN_MASK (0x80U)
#define PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_EN_SHIFT (7U)
/*! ldo_aon_av18_en - Enable ldo_aon_av18
 */
#define PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_EN(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_EN_SHIFT)) & PMU_PMIP_BRNDET_AV18_LDO_AON_AV18_EN_MASK)
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_OUT_MASK (0x100U)
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_OUT_SHIFT (8U)
/*! brndet_av18_out - Assert high if av18 brnout happened
 */
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_OUT(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_BRNDET_AV18_OUT_SHIFT)) & PMU_PMIP_BRNDET_AV18_BRNDET_AV18_OUT_MASK)
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_RDY_MASK (0x200U)
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_RDY_SHIFT (9U)
/*! brndet_av18_rdy - Assert high if av18 brnout is rdy --> out can be taken
 */
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_RDY(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_BRNDET_AV18_RDY_SHIFT)) & PMU_PMIP_BRNDET_AV18_BRNDET_AV18_RDY_MASK)
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_FILT_MASK (0xC00U)
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_FILT_SHIFT (10U)
/*! brndet_av18_filt - Select filtering level for av18 pulse to av18 brndet
 */
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_FILT(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_BRNDET_AV18_FILT_SHIFT)) & PMU_PMIP_BRNDET_AV18_BRNDET_AV18_FILT_MASK)
#define PMU_PMIP_BRNDET_AV18_BRNHYST_AV18_CNTL_MASK (0x3000U)
#define PMU_PMIP_BRNDET_AV18_BRNHYST_AV18_CNTL_SHIFT (12U)
/*! brnhyst_av18_cntl - Control of av18 brown-out detector hysteresis
 */
#define PMU_PMIP_BRNDET_AV18_BRNHYST_AV18_CNTL(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_BRNHYST_AV18_CNTL_SHIFT)) & PMU_PMIP_BRNDET_AV18_BRNHYST_AV18_CNTL_MASK)
#define PMU_PMIP_BRNDET_AV18_BRNTRIG_AV18_CNTL_MASK (0x1C000U)
#define PMU_PMIP_BRNDET_AV18_BRNTRIG_AV18_CNTL_SHIFT (14U)
/*! brntrig_av18_cntl - Control trigger voltage of av18 brndet
 */
#define PMU_PMIP_BRNDET_AV18_BRNTRIG_AV18_CNTL(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_BRNTRIG_AV18_CNTL_SHIFT)) & PMU_PMIP_BRNDET_AV18_BRNTRIG_AV18_CNTL_MASK)
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_EN_MASK (0x20000U)
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_EN_SHIFT (17U)
/*! brndet_av18_en - Enable av18 brown-out detector
 */
#define PMU_PMIP_BRNDET_AV18_BRNDET_AV18_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_BRNDET_AV18_EN_SHIFT)) & PMU_PMIP_BRNDET_AV18_BRNDET_AV18_EN_MASK)
#define PMU_PMIP_BRNDET_AV18_DEL_AV18_HYST_MASK (0xC0000U)
#define PMU_PMIP_BRNDET_AV18_DEL_AV18_HYST_SHIFT (18U)
/*! del_av18_hyst - Del av18 Hysteresis
 */
#define PMU_PMIP_BRNDET_AV18_DEL_AV18_HYST(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_AV18_DEL_AV18_HYST_SHIFT)) & PMU_PMIP_BRNDET_AV18_DEL_AV18_HYST_MASK)
/*! @} */

/*! @name PMIP_BRNDET_VBAT - PMIP Brownout VBAT Register */
/*! @{ */
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_OUT_MASK (0x1U)
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_OUT_SHIFT (0U)
/*! mon_vbat_out - Assert high if vbat is lower than ~2.8V trigger level
 */
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_OUT(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_MON_VBAT_OUT_SHIFT)) & PMU_PMIP_BRNDET_VBAT_MON_VBAT_OUT_MASK)
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_RDY_MASK (0x2U)
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_RDY_SHIFT (1U)
/*! mon_vbat_rdy - Assert high if vbat monitor is rdy--> out can be taken
 */
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_RDY(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_MON_VBAT_RDY_SHIFT)) & PMU_PMIP_BRNDET_VBAT_MON_VBAT_RDY_MASK)
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_FILT_MASK (0xCU)
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_FILT_SHIFT (2U)
/*! mon_vbat_filt - Select filtering level for vbat pulse to vbat monitor
 */
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_FILT(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_MON_VBAT_FILT_SHIFT)) & PMU_PMIP_BRNDET_VBAT_MON_VBAT_FILT_MASK)
#define PMU_PMIP_BRNDET_VBAT_MONHYST_VBAT_CNTL_MASK (0x30U)
#define PMU_PMIP_BRNDET_VBAT_MONHYST_VBAT_CNTL_SHIFT (4U)
/*! monhyst_vbat_cntl - Control of vbat monitor hysteresis
 */
#define PMU_PMIP_BRNDET_VBAT_MONHYST_VBAT_CNTL(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_MONHYST_VBAT_CNTL_SHIFT)) & PMU_PMIP_BRNDET_VBAT_MONHYST_VBAT_CNTL_MASK)
#define PMU_PMIP_BRNDET_VBAT_MONTRIG_VBAT_CNTL_MASK (0x1C0U)
#define PMU_PMIP_BRNDET_VBAT_MONTRIG_VBAT_CNTL_SHIFT (6U)
/*! montrig_vbat_cntl - Control trigger voltage of vbat monitor (around 2.8V)
 */
#define PMU_PMIP_BRNDET_VBAT_MONTRIG_VBAT_CNTL(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_MONTRIG_VBAT_CNTL_SHIFT)) & PMU_PMIP_BRNDET_VBAT_MONTRIG_VBAT_CNTL_MASK)
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_EN_MASK (0x200U)
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_EN_SHIFT (9U)
/*! mon_vbat_en - Enable vbat monitor
 */
#define PMU_PMIP_BRNDET_VBAT_MON_VBAT_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_MON_VBAT_EN_SHIFT)) & PMU_PMIP_BRNDET_VBAT_MON_VBAT_EN_MASK)
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_OUT_MASK (0x400U)
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_OUT_SHIFT (10U)
/*! brndet_vbat_out - Assert high if vbat brnout happened
 */
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_OUT(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_OUT_SHIFT)) & PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_OUT_MASK)
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_RDY_MASK (0x800U)
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_RDY_SHIFT (11U)
/*! brndet_vbat_rdy - Assert high if vbat brnout is rdy--> out can be taken
 */
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_RDY(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_RDY_SHIFT)) & PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_RDY_MASK)
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_FILT_MASK (0x3000U)
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_FILT_SHIFT (12U)
/*! brndet_vbat_filt - Select filtering level for vbat pulse to vbat brndet
 */
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_FILT(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_FILT_SHIFT)) & PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_FILT_MASK)
#define PMU_PMIP_BRNDET_VBAT_BRNHYST_VBAT_CNTL_MASK (0xC000U)
#define PMU_PMIP_BRNDET_VBAT_BRNHYST_VBAT_CNTL_SHIFT (14U)
/*! brnhyst_vbat_cntl - Control of vbat brown-out detector hysteresis
 */
#define PMU_PMIP_BRNDET_VBAT_BRNHYST_VBAT_CNTL(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_BRNHYST_VBAT_CNTL_SHIFT)) & PMU_PMIP_BRNDET_VBAT_BRNHYST_VBAT_CNTL_MASK)
#define PMU_PMIP_BRNDET_VBAT_BRNTRIG_VBAT_CNTL_MASK (0x70000U)
#define PMU_PMIP_BRNDET_VBAT_BRNTRIG_VBAT_CNTL_SHIFT (16U)
/*! brntrig_vbat_cntl - Control trigger voltage of vbat brndet
 */
#define PMU_PMIP_BRNDET_VBAT_BRNTRIG_VBAT_CNTL(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_BRNTRIG_VBAT_CNTL_SHIFT)) & PMU_PMIP_BRNDET_VBAT_BRNTRIG_VBAT_CNTL_MASK)
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_EN_MASK (0x80000U)
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_EN_SHIFT (19U)
/*! brndet_vbat_en - Enable vbat brown-out detector
 */
#define PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_EN_SHIFT)) & PMU_PMIP_BRNDET_VBAT_BRNDET_VBAT_EN_MASK)
/*! @} */

/*! @name PMIP_BRNDET_V12 - PMIP Brownout V12 Register */
/*! @{ */
#define PMU_PMIP_BRNDET_V12_LDO_AON_V12_HYST_MASK (0x3U)
#define PMU_PMIP_BRNDET_V12_LDO_AON_V12_HYST_SHIFT (0U)
/*! ldo_aon_v12_hyst - Control of ldo_aon_v12 hysteresis
 */
#define PMU_PMIP_BRNDET_V12_LDO_AON_V12_HYST(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_V12_LDO_AON_V12_HYST_SHIFT)) & PMU_PMIP_BRNDET_V12_LDO_AON_V12_HYST_MASK)
#define PMU_PMIP_BRNDET_V12_LDO_AON_V12_SEL_MASK (0x1CU)
#define PMU_PMIP_BRNDET_V12_LDO_AON_V12_SEL_SHIFT (2U)
/*! ldo_aon_v12_sel - Select output voltage of ldo_aon_v12
 */
#define PMU_PMIP_BRNDET_V12_LDO_AON_V12_SEL(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_V12_LDO_AON_V12_SEL_SHIFT)) & PMU_PMIP_BRNDET_V12_LDO_AON_V12_SEL_MASK)
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_OUT_MASK (0x20U)
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_OUT_SHIFT (5U)
/*! brndet_v12_out - Assert high if v12 brnout happened
 */
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_OUT(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_V12_BRNDET_V12_OUT_SHIFT)) & PMU_PMIP_BRNDET_V12_BRNDET_V12_OUT_MASK)
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_RDY_MASK (0x40U)
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_RDY_SHIFT (6U)
/*! brndet_v12_rdy - Assert high if v12 brnout is rdy--> out can be taken
 */
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_RDY(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_V12_BRNDET_V12_RDY_SHIFT)) & PMU_PMIP_BRNDET_V12_BRNDET_V12_RDY_MASK)
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_FILT_MASK (0x180U)
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_FILT_SHIFT (7U)
/*! brndet_v12_filt - Select filtering level for v12 pulse to v12 brndet
 */
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_FILT(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_V12_BRNDET_V12_FILT_SHIFT)) & PMU_PMIP_BRNDET_V12_BRNDET_V12_FILT_MASK)
#define PMU_PMIP_BRNDET_V12_BRNHYST_V12_CNTL_MASK (0x600U)
#define PMU_PMIP_BRNDET_V12_BRNHYST_V12_CNTL_SHIFT (9U)
/*! brnhyst_v12_cntl - Control of v12 brown-out detector hysteresis
 */
#define PMU_PMIP_BRNDET_V12_BRNHYST_V12_CNTL(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_V12_BRNHYST_V12_CNTL_SHIFT)) & PMU_PMIP_BRNDET_V12_BRNHYST_V12_CNTL_MASK)
#define PMU_PMIP_BRNDET_V12_BRNTRIG_V12_CNTL_MASK (0x3800U)
#define PMU_PMIP_BRNDET_V12_BRNTRIG_V12_CNTL_SHIFT (11U)
/*! brntrig_v12_cntl - Control trigger voltage of v12 brndet
 */
#define PMU_PMIP_BRNDET_V12_BRNTRIG_V12_CNTL(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_V12_BRNTRIG_V12_CNTL_SHIFT)) & PMU_PMIP_BRNDET_V12_BRNTRIG_V12_CNTL_MASK)
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_EN_MASK (0x4000U)
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_EN_SHIFT (14U)
/*! brndet_v12_en - Enable v12 brown-out detector
 */
#define PMU_PMIP_BRNDET_V12_BRNDET_V12_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_BRNDET_V12_BRNDET_V12_EN_SHIFT)) & PMU_PMIP_BRNDET_V12_BRNDET_V12_EN_MASK)
/*! @} */

/*! @name PMIP_LDO_CTRL - PMIP LDO Control Register */
/*! @{ */
#define PMU_PMIP_LDO_CTRL_LDO_V12_REF_SEL_MASK (0x1U)
#define PMU_PMIP_LDO_CTRL_LDO_V12_REF_SEL_SHIFT (0U)
/*! ldo_v12_ref_sel - ldo v12 reference select
 *  0b0..from igen
 *  0b1..directly from bandgap
 */
#define PMU_PMIP_LDO_CTRL_LDO_V12_REF_SEL(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_LDO_CTRL_LDO_V12_REF_SEL_SHIFT)) & PMU_PMIP_LDO_CTRL_LDO_V12_REF_SEL_MASK)
#define PMU_PMIP_LDO_CTRL_LDO_V12_SOFTST_EN_MASK (0x2U)
#define PMU_PMIP_LDO_CTRL_LDO_V12_SOFTST_EN_SHIFT (1U)
/*! ldo_v12_softst_en - Enable soft-start for ldo_v12
 */
#define PMU_PMIP_LDO_CTRL_LDO_V12_SOFTST_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_LDO_CTRL_LDO_V12_SOFTST_EN_SHIFT)) & PMU_PMIP_LDO_CTRL_LDO_V12_SOFTST_EN_MASK)
#define PMU_PMIP_LDO_CTRL_LDO_V12_VOUT_SEL_MASK (0x1CU)
#define PMU_PMIP_LDO_CTRL_LDO_V12_VOUT_SEL_SHIFT (2U)
/*! ldo_v12_vout_sel - Select output voltage for v12
 */
#define PMU_PMIP_LDO_CTRL_LDO_V12_VOUT_SEL(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_LDO_CTRL_LDO_V12_VOUT_SEL_SHIFT)) & PMU_PMIP_LDO_CTRL_LDO_V12_VOUT_SEL_MASK)
#define PMU_PMIP_LDO_CTRL_LDO_V12_EN_MASK (0x20U)
#define PMU_PMIP_LDO_CTRL_LDO_V12_EN_SHIFT (5U)
/*! ldo_v12_en - Enable ldo_v12
 */
#define PMU_PMIP_LDO_CTRL_LDO_V12_EN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_LDO_CTRL_LDO_V12_EN_SHIFT)) & PMU_PMIP_LDO_CTRL_LDO_V12_EN_MASK)
#define PMU_PMIP_LDO_CTRL_LDO_AV18_PWRSW_EN_MASK (0x40U)
#define PMU_PMIP_LDO_CTRL_LDO_AV18_PWRSW_EN_SHIFT (6U)
/*! ldo_av18_pwrsw_en - Enable bypass (power switch mode) for ldo_av18
 */
#define PMU_PMIP_LDO_CTRL_LDO_AV18_PWRSW_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_LDO_CTRL_LDO_AV18_PWRSW_EN_SHIFT)) & PMU_PMIP_LDO_CTRL_LDO_AV18_PWRSW_EN_MASK)
#define PMU_PMIP_LDO_CTRL_LDO_AV18_SOFTST_EN_MASK (0x80U)
#define PMU_PMIP_LDO_CTRL_LDO_AV18_SOFTST_EN_SHIFT (7U)
/*! ldo_av18_softst_en - Enable soft-start for ldo_av18
 */
#define PMU_PMIP_LDO_CTRL_LDO_AV18_SOFTST_EN(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_LDO_CTRL_LDO_AV18_SOFTST_EN_SHIFT)) & PMU_PMIP_LDO_CTRL_LDO_AV18_SOFTST_EN_MASK)
#define PMU_PMIP_LDO_CTRL_LDO_AV18_VOUT_SEL_MASK (0x700U)
#define PMU_PMIP_LDO_CTRL_LDO_AV18_VOUT_SEL_SHIFT (8U)
/*! ldo_av18_vout_sel - Select output voltage for ldo_av18
 */
#define PMU_PMIP_LDO_CTRL_LDO_AV18_VOUT_SEL(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_LDO_CTRL_LDO_AV18_VOUT_SEL_SHIFT)) & PMU_PMIP_LDO_CTRL_LDO_AV18_VOUT_SEL_MASK)
#define PMU_PMIP_LDO_CTRL_LDO_AV18_EN_MASK (0x800U)
#define PMU_PMIP_LDO_CTRL_LDO_AV18_EN_SHIFT (11U)
/*! ldo_av18_en - Enable ldo_av18
 */
#define PMU_PMIP_LDO_CTRL_LDO_AV18_EN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_LDO_CTRL_LDO_AV18_EN_SHIFT)) & PMU_PMIP_LDO_CTRL_LDO_AV18_EN_MASK)
#define PMU_PMIP_LDO_CTRL_LDO_VFL_PWRSW_EN_MASK (0x1000U)
#define PMU_PMIP_LDO_CTRL_LDO_VFL_PWRSW_EN_SHIFT (12U)
/*! ldo_vfl_pwrsw_en - Enable bypass (power switch mode) for ldo_vfl
 */
#define PMU_PMIP_LDO_CTRL_LDO_VFL_PWRSW_EN(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_LDO_CTRL_LDO_VFL_PWRSW_EN_SHIFT)) & PMU_PMIP_LDO_CTRL_LDO_VFL_PWRSW_EN_MASK)
/*! @} */

/*! @name PERI_CLK_SRC - PERI Clock Source Register */
/*! @{ */
#define PMU_PERI_CLK_SRC_SSP0_AUDIO_SEL_MASK (0x1U)
#define PMU_PERI_CLK_SRC_SSP0_AUDIO_SEL_SHIFT (0U)
/*! ssp0_audio_sel - SSP0 Audio Select
 *  0b0..divided by system clock
 *  0b1..audio PLL clock
 */
#define PMU_PERI_CLK_SRC_SSP0_AUDIO_SEL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_SSP0_AUDIO_SEL_SHIFT)) & PMU_PERI_CLK_SRC_SSP0_AUDIO_SEL_MASK)
#define PMU_PERI_CLK_SRC_SSP1_AUDIO_SEL_MASK (0x2U)
#define PMU_PERI_CLK_SRC_SSP1_AUDIO_SEL_SHIFT (1U)
/*! ssp1_audio_sel - SSP1 Audio Select
 *  0b0..divided by system clock
 *  0b1..audio PLL clock
 */
#define PMU_PERI_CLK_SRC_SSP1_AUDIO_SEL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_SSP1_AUDIO_SEL_SHIFT)) & PMU_PERI_CLK_SRC_SSP1_AUDIO_SEL_MASK)
#define PMU_PERI_CLK_SRC_SSP2_AUDIO_SEL_MASK (0x4U)
#define PMU_PERI_CLK_SRC_SSP2_AUDIO_SEL_SHIFT (2U)
/*! ssp2_audio_sel - SSP2 Audio Select
 *  0b0..divided by system clock
 *  0b1..audio PLL clock
 */
#define PMU_PERI_CLK_SRC_SSP2_AUDIO_SEL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_SSP2_AUDIO_SEL_SHIFT)) & PMU_PERI_CLK_SRC_SSP2_AUDIO_SEL_MASK)
#define PMU_PERI_CLK_SRC_GPT_INT_SEL0_MASK (0x10U)
#define PMU_PERI_CLK_SRC_GPT_INT_SEL0_SHIFT (4U)
/*! gpt_int_sel0 - GPT Int Select 0
 */
#define PMU_PERI_CLK_SRC_GPT_INT_SEL0(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_GPT_INT_SEL0_SHIFT)) & PMU_PERI_CLK_SRC_GPT_INT_SEL0_MASK)
#define PMU_PERI_CLK_SRC_GPT_INT_SEL1_MASK (0x20U)
#define PMU_PERI_CLK_SRC_GPT_INT_SEL1_SHIFT (5U)
/*! gpt_int_sel1 - GPT Int Select 1
 */
#define PMU_PERI_CLK_SRC_GPT_INT_SEL1(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_GPT_INT_SEL1_SHIFT)) & PMU_PERI_CLK_SRC_GPT_INT_SEL1_MASK)
#define PMU_PERI_CLK_SRC_GPT_INT_SEL2_MASK (0x40U)
#define PMU_PERI_CLK_SRC_GPT_INT_SEL2_SHIFT (6U)
/*! gpt_int_sel2 - GPT Int Select 2
 */
#define PMU_PERI_CLK_SRC_GPT_INT_SEL2(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_GPT_INT_SEL2_SHIFT)) & PMU_PERI_CLK_SRC_GPT_INT_SEL2_MASK)
#define PMU_PERI_CLK_SRC_GPT_INT_SEL3_MASK (0x80U)
#define PMU_PERI_CLK_SRC_GPT_INT_SEL3_SHIFT (7U)
/*! gpt_int_sel3 - GPT Int Select 3
 */
#define PMU_PERI_CLK_SRC_GPT_INT_SEL3(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_GPT_INT_SEL3_SHIFT)) & PMU_PERI_CLK_SRC_GPT_INT_SEL3_MASK)
#define PMU_PERI_CLK_SRC_GPT0_INT_SEL_MASK (0x100U)
#define PMU_PERI_CLK_SRC_GPT0_INT_SEL_SHIFT (8U)
/*! gpt0_int_sel - GPT0 Int Select
 */
#define PMU_PERI_CLK_SRC_GPT0_INT_SEL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_GPT0_INT_SEL_SHIFT)) & PMU_PERI_CLK_SRC_GPT0_INT_SEL_MASK)
#define PMU_PERI_CLK_SRC_GPT1_INT_SEL_MASK (0x200U)
#define PMU_PERI_CLK_SRC_GPT1_INT_SEL_SHIFT (9U)
/*! gpt1_int_sel - GPT1 Int Select
 */
#define PMU_PERI_CLK_SRC_GPT1_INT_SEL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_GPT1_INT_SEL_SHIFT)) & PMU_PERI_CLK_SRC_GPT1_INT_SEL_MASK)
#define PMU_PERI_CLK_SRC_GPT2_INT_SEL_MASK (0x400U)
#define PMU_PERI_CLK_SRC_GPT2_INT_SEL_SHIFT (10U)
/*! gpt2_int_sel - GPT2 Int Select
 */
#define PMU_PERI_CLK_SRC_GPT2_INT_SEL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_GPT2_INT_SEL_SHIFT)) & PMU_PERI_CLK_SRC_GPT2_INT_SEL_MASK)
#define PMU_PERI_CLK_SRC_GPT3_INT_SEL_MASK (0x800U)
#define PMU_PERI_CLK_SRC_GPT3_INT_SEL_SHIFT (11U)
/*! gpt3_int_sel - GPT3 Int Select
 */
#define PMU_PERI_CLK_SRC_GPT3_INT_SEL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_GPT3_INT_SEL_SHIFT)) & PMU_PERI_CLK_SRC_GPT3_INT_SEL_MASK)
#define PMU_PERI_CLK_SRC_PDM_AUDIO_SEL_MASK (0x1000U)
#define PMU_PERI_CLK_SRC_PDM_AUDIO_SEL_SHIFT (12U)
/*! pdm_audio_sel - PDM Audio Select
 *  0b0..divided by system clock
 *  0b1..audio PLL clock
 */
#define PMU_PERI_CLK_SRC_PDM_AUDIO_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_PDM_AUDIO_SEL_SHIFT)) & PMU_PERI_CLK_SRC_PDM_AUDIO_SEL_MASK)
#define PMU_PERI_CLK_SRC_USIM_AUDIO_SEL_MASK (0x2000U)
#define PMU_PERI_CLK_SRC_USIM_AUDIO_SEL_SHIFT (13U)
/*! usim_audio_sel - USIM Audio Select
 *  0b0..divided by system clock
 *  0b1..audio PLL clock
 */
#define PMU_PERI_CLK_SRC_USIM_AUDIO_SEL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI_CLK_SRC_USIM_AUDIO_SEL_SHIFT)) & PMU_PERI_CLK_SRC_USIM_AUDIO_SEL_MASK)
/*! @} */

/*! @name PMIP_RSVD - Unused Register */
/*! @{ */
#define PMU_PMIP_RSVD_RESERVE_IN_MASK (0x3FFU)
#define PMU_PMIP_RSVD_RESERVE_IN_SHIFT (0U)
/*! reserve_in - Unused. Do not change the reset value.
 */
#define PMU_PMIP_RSVD_RESERVE_IN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_RSVD_RESERVE_IN_SHIFT)) & PMU_PMIP_RSVD_RESERVE_IN_MASK)
#define PMU_PMIP_RSVD_RESERVE_OUT_MASK (0xFC00U)
#define PMU_PMIP_RSVD_RESERVE_OUT_SHIFT (10U)
/*! reserve_out - Unused. Do not change the reset value.
 */
#define PMU_PMIP_RSVD_RESERVE_OUT(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_PMIP_RSVD_RESERVE_OUT_SHIFT)) & PMU_PMIP_RSVD_RESERVE_OUT_MASK)
/*! @} */

/*! @name GPT0_CTRL - GPT0 Control Register */
/*! @{ */
#define PMU_GPT0_CTRL_GPT0_CLK_DIV_MASK (0x3FU)
#define PMU_GPT0_CTRL_GPT0_CLK_DIV_SHIFT (0U)
/*! gpt0_clk_div - clock divisor
 */
#define PMU_GPT0_CTRL_GPT0_CLK_DIV(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT0_CTRL_GPT0_CLK_DIV_SHIFT)) & PMU_GPT0_CTRL_GPT0_CLK_DIV_MASK)
#define PMU_GPT0_CTRL_GPT0_FREQ_CHANGE_MASK (0x40U)
#define PMU_GPT0_CTRL_GPT0_FREQ_CHANGE_SHIFT (6U)
/*! gpt0_freq_change - frequency change enable
 */
#define PMU_GPT0_CTRL_GPT0_FREQ_CHANGE(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT0_CTRL_GPT0_FREQ_CHANGE_SHIFT)) & PMU_GPT0_CTRL_GPT0_FREQ_CHANGE_MASK)
#define PMU_GPT0_CTRL_GPT0_CLK_SEL1_MASK (0x180U)
#define PMU_GPT0_CTRL_GPT0_CLK_SEL1_SHIFT (7U)
/*! gpt0_clk_sel1 - select signal for mux after frequency divisor
 */
#define PMU_GPT0_CTRL_GPT0_CLK_SEL1(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT0_CTRL_GPT0_CLK_SEL1_SHIFT)) & PMU_GPT0_CTRL_GPT0_CLK_SEL1_MASK)
#define PMU_GPT0_CTRL_GPT0_CLK_SEL0_MASK (0x600U)
#define PMU_GPT0_CTRL_GPT0_CLK_SEL0_SHIFT (9U)
/*! gpt0_clk_sel0 - select signal for mux before frequency divisor
 */
#define PMU_GPT0_CTRL_GPT0_CLK_SEL0(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT0_CTRL_GPT0_CLK_SEL0_SHIFT)) & PMU_GPT0_CTRL_GPT0_CLK_SEL0_MASK)
/*! @} */

/*! @name GPT1_CTRL - GPT1 Control Register */
/*! @{ */
#define PMU_GPT1_CTRL_GPT1_CLK_DIV_MASK (0x3FU)
#define PMU_GPT1_CTRL_GPT1_CLK_DIV_SHIFT (0U)
/*! gpt1_clk_div - clock divisor
 */
#define PMU_GPT1_CTRL_GPT1_CLK_DIV(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT1_CTRL_GPT1_CLK_DIV_SHIFT)) & PMU_GPT1_CTRL_GPT1_CLK_DIV_MASK)
#define PMU_GPT1_CTRL_GPT1_FREQ_CHANGE_MASK (0x40U)
#define PMU_GPT1_CTRL_GPT1_FREQ_CHANGE_SHIFT (6U)
/*! gpt1_freq_change - frequency change enable
 */
#define PMU_GPT1_CTRL_GPT1_FREQ_CHANGE(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT1_CTRL_GPT1_FREQ_CHANGE_SHIFT)) & PMU_GPT1_CTRL_GPT1_FREQ_CHANGE_MASK)
#define PMU_GPT1_CTRL_GPT1_CLK_SEL1_MASK (0x180U)
#define PMU_GPT1_CTRL_GPT1_CLK_SEL1_SHIFT (7U)
/*! gpt1_clk_sel1 - select signal for mux after frequency divisor
 */
#define PMU_GPT1_CTRL_GPT1_CLK_SEL1(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT1_CTRL_GPT1_CLK_SEL1_SHIFT)) & PMU_GPT1_CTRL_GPT1_CLK_SEL1_MASK)
#define PMU_GPT1_CTRL_GPT1_CLK_SEL0_MASK (0x600U)
#define PMU_GPT1_CTRL_GPT1_CLK_SEL0_SHIFT (9U)
/*! gpt1_clk_sel0 - select signal for mux before frequency divisor
 */
#define PMU_GPT1_CTRL_GPT1_CLK_SEL0(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT1_CTRL_GPT1_CLK_SEL0_SHIFT)) & PMU_GPT1_CTRL_GPT1_CLK_SEL0_MASK)
/*! @} */

/*! @name GPT2_CTRL - GPT2 Control Register */
/*! @{ */
#define PMU_GPT2_CTRL_GPT2_CLK_DIV_MASK (0x3FU)
#define PMU_GPT2_CTRL_GPT2_CLK_DIV_SHIFT (0U)
/*! gpt2_clk_div - clock divisor
 */
#define PMU_GPT2_CTRL_GPT2_CLK_DIV(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT2_CTRL_GPT2_CLK_DIV_SHIFT)) & PMU_GPT2_CTRL_GPT2_CLK_DIV_MASK)
#define PMU_GPT2_CTRL_GPT2_FREQ_CHANGE_MASK (0x40U)
#define PMU_GPT2_CTRL_GPT2_FREQ_CHANGE_SHIFT (6U)
/*! gpt2_freq_change - frequency change enable
 */
#define PMU_GPT2_CTRL_GPT2_FREQ_CHANGE(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT2_CTRL_GPT2_FREQ_CHANGE_SHIFT)) & PMU_GPT2_CTRL_GPT2_FREQ_CHANGE_MASK)
#define PMU_GPT2_CTRL_GPT2_CLK_SEL1_MASK (0x180U)
#define PMU_GPT2_CTRL_GPT2_CLK_SEL1_SHIFT (7U)
/*! gpt2_clk_sel1 - select signal for mux after frequency divisor
 */
#define PMU_GPT2_CTRL_GPT2_CLK_SEL1(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT2_CTRL_GPT2_CLK_SEL1_SHIFT)) & PMU_GPT2_CTRL_GPT2_CLK_SEL1_MASK)
#define PMU_GPT2_CTRL_GPT2_CLK_SEL0_MASK (0x600U)
#define PMU_GPT2_CTRL_GPT2_CLK_SEL0_SHIFT (9U)
/*! gpt2_clk_sel0 - select signal for mux before frequency divisor
 */
#define PMU_GPT2_CTRL_GPT2_CLK_SEL0(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT2_CTRL_GPT2_CLK_SEL0_SHIFT)) & PMU_GPT2_CTRL_GPT2_CLK_SEL0_MASK)
/*! @} */

/*! @name GPT3_CTRL - GPT3 Control Register */
/*! @{ */
#define PMU_GPT3_CTRL_GPT3_CLK_DIV_MASK (0x3FU)
#define PMU_GPT3_CTRL_GPT3_CLK_DIV_SHIFT (0U)
/*! gpt3_clk_div - clock divisor
 */
#define PMU_GPT3_CTRL_GPT3_CLK_DIV(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT3_CTRL_GPT3_CLK_DIV_SHIFT)) & PMU_GPT3_CTRL_GPT3_CLK_DIV_MASK)
#define PMU_GPT3_CTRL_GPT3_FREQ_CHANGE_MASK (0x40U)
#define PMU_GPT3_CTRL_GPT3_FREQ_CHANGE_SHIFT (6U)
/*! gpt3_freq_change - frequency change enable
 */
#define PMU_GPT3_CTRL_GPT3_FREQ_CHANGE(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT3_CTRL_GPT3_FREQ_CHANGE_SHIFT)) & PMU_GPT3_CTRL_GPT3_FREQ_CHANGE_MASK)
#define PMU_GPT3_CTRL_GPT3_CLK_SEL1_MASK (0x180U)
#define PMU_GPT3_CTRL_GPT3_CLK_SEL1_SHIFT (7U)
/*! gpt3_clk_sel1 - select signal for mux after frequency divisor
 */
#define PMU_GPT3_CTRL_GPT3_CLK_SEL1(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT3_CTRL_GPT3_CLK_SEL1_SHIFT)) & PMU_GPT3_CTRL_GPT3_CLK_SEL1_MASK)
#define PMU_GPT3_CTRL_GPT3_CLK_SEL0_MASK (0x600U)
#define PMU_GPT3_CTRL_GPT3_CLK_SEL0_SHIFT (9U)
/*! gpt3_clk_sel0 - select signal for mux before frequency divisor
 */
#define PMU_GPT3_CTRL_GPT3_CLK_SEL0(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_GPT3_CTRL_GPT3_CLK_SEL0_SHIFT)) & PMU_GPT3_CTRL_GPT3_CLK_SEL0_MASK)
/*! @} */

/*! @name WAKEUP_EDGE_DETECT - Wakeup Edge Detect Register */
/*! @{ */
#define PMU_WAKEUP_EDGE_DETECT_WAKEUP0_MASK (0x1U)
#define PMU_WAKEUP_EDGE_DETECT_WAKEUP0_SHIFT (0U)
/*! wakeup0 - external pin0 wakeup_edge_detect
 */
#define PMU_WAKEUP_EDGE_DETECT_WAKEUP0(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_EDGE_DETECT_WAKEUP0_SHIFT)) & PMU_WAKEUP_EDGE_DETECT_WAKEUP0_MASK)
#define PMU_WAKEUP_EDGE_DETECT_WAKEUP1_MASK (0x2U)
#define PMU_WAKEUP_EDGE_DETECT_WAKEUP1_SHIFT (1U)
/*! wakeup1 - external pin1 wakeup_edge_detect
 */
#define PMU_WAKEUP_EDGE_DETECT_WAKEUP1(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_EDGE_DETECT_WAKEUP1_SHIFT)) & PMU_WAKEUP_EDGE_DETECT_WAKEUP1_MASK)
/*! @} */

/*! @name AON_CLK_CTRL - AON Clock Control Register */
/*! @{ */
#define PMU_AON_CLK_CTRL_PMU_CLK_DIV_MASK (0xFU)
#define PMU_AON_CLK_CTRL_PMU_CLK_DIV_SHIFT (0U)
/*! pmu_clk_div - PMU clock divisor
 */
#define PMU_AON_CLK_CTRL_PMU_CLK_DIV(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_AON_CLK_CTRL_PMU_CLK_DIV_SHIFT)) & PMU_AON_CLK_CTRL_PMU_CLK_DIV_MASK)
#define PMU_AON_CLK_CTRL_RTC_CLK_EN_MASK (0x10U)
#define PMU_AON_CLK_CTRL_RTC_CLK_EN_SHIFT (4U)
/*! rtc_clk_en - RTC clock enable
 */
#define PMU_AON_CLK_CTRL_RTC_CLK_EN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_AON_CLK_CTRL_RTC_CLK_EN_SHIFT)) & PMU_AON_CLK_CTRL_RTC_CLK_EN_MASK)
#define PMU_AON_CLK_CTRL_RTC_INT_SEL_MASK (0x20U)
#define PMU_AON_CLK_CTRL_RTC_INT_SEL_SHIFT (5U)
/*! rtc_int_sel - RTC Interrupt Select
 */
#define PMU_AON_CLK_CTRL_RTC_INT_SEL(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_AON_CLK_CTRL_RTC_INT_SEL_SHIFT)) & PMU_AON_CLK_CTRL_RTC_INT_SEL_MASK)
#define PMU_AON_CLK_CTRL_DMA_CLK_GATE_EN_MASK (0x40U)
#define PMU_AON_CLK_CTRL_DMA_CLK_GATE_EN_SHIFT (6U)
/*! dma_clk_gate_en - DMA Clock Gate Enable
 */
#define PMU_AON_CLK_CTRL_DMA_CLK_GATE_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << PMU_AON_CLK_CTRL_DMA_CLK_GATE_EN_SHIFT)) & PMU_AON_CLK_CTRL_DMA_CLK_GATE_EN_MASK)
#define PMU_AON_CLK_CTRL_APB0_CLK_DIV_MASK (0x180U)
#define PMU_AON_CLK_CTRL_APB0_CLK_DIV_SHIFT (7U)
/*! apb0_clk_div - APB0 clock divisor
 */
#define PMU_AON_CLK_CTRL_APB0_CLK_DIV(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_AON_CLK_CTRL_APB0_CLK_DIV_SHIFT)) & PMU_AON_CLK_CTRL_APB0_CLK_DIV_MASK)
#define PMU_AON_CLK_CTRL_APB1_CLK_DIV_MASK (0x600U)
#define PMU_AON_CLK_CTRL_APB1_CLK_DIV_SHIFT (9U)
/*! apb1_clk_div - APB1 clock divisor
 */
#define PMU_AON_CLK_CTRL_APB1_CLK_DIV(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << PMU_AON_CLK_CTRL_APB1_CLK_DIV_SHIFT)) & PMU_AON_CLK_CTRL_APB1_CLK_DIV_MASK)
/*! @} */

/*! @name PERI3_CTRL - PERI3 Control Register */
/*! @{ */
#define PMU_PERI3_CTRL_CAN_DIV_MASK (0x7U)
#define PMU_PERI3_CTRL_CAN_DIV_SHIFT (0U)
/*! can_div - CAN clock div ratio
 */
#define PMU_PERI3_CTRL_CAN_DIV(x) (((uint32_t)(((uint32_t)(x)) << PMU_PERI3_CTRL_CAN_DIV_SHIFT)) & PMU_PERI3_CTRL_CAN_DIV_MASK)
#define PMU_PERI3_CTRL_CAN_GATE_MASK (0x8U)
#define PMU_PERI3_CTRL_CAN_GATE_SHIFT (3U)
/*! can_gate - CAN clock gate
 */
#define PMU_PERI3_CTRL_CAN_GATE(x) (((uint32_t)(((uint32_t)(x)) << PMU_PERI3_CTRL_CAN_GATE_SHIFT)) & PMU_PERI3_CTRL_CAN_GATE_MASK)
#define PMU_PERI3_CTRL_KP_CLK_SEL_MASK (0x10U)
#define PMU_PERI3_CTRL_KP_CLK_SEL_SHIFT (4U)
/*! kp_clk_sel - keypad clock select
 */
#define PMU_PERI3_CTRL_KP_CLK_SEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI3_CTRL_KP_CLK_SEL_SHIFT)) & PMU_PERI3_CTRL_KP_CLK_SEL_MASK)
#define PMU_PERI3_CTRL_KP_GATE_MASK (0x20U)
#define PMU_PERI3_CTRL_KP_GATE_SHIFT (5U)
/*! kp_gate - keypad clock gate
 */
#define PMU_PERI3_CTRL_KP_GATE(x) (((uint32_t)(((uint32_t)(x)) << PMU_PERI3_CTRL_KP_GATE_SHIFT)) & PMU_PERI3_CTRL_KP_GATE_MASK)
#define PMU_PERI3_CTRL_CB_CLK_SEL_MASK (0x40U)
#define PMU_PERI3_CTRL_CB_CLK_SEL_SHIFT (6U)
/*! cb_clk_sel - cbutton clock select
 */
#define PMU_PERI3_CTRL_CB_CLK_SEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI3_CTRL_CB_CLK_SEL_SHIFT)) & PMU_PERI3_CTRL_CB_CLK_SEL_MASK)
#define PMU_PERI3_CTRL_CB_GATE_MASK (0x80U)
#define PMU_PERI3_CTRL_CB_GATE_SHIFT (7U)
/*! cb_gate - cbutton clock gate
 */
#define PMU_PERI3_CTRL_CB_GATE(x) (((uint32_t)(((uint32_t)(x)) << PMU_PERI3_CTRL_CB_GATE_SHIFT)) & PMU_PERI3_CTRL_CB_GATE_MASK)
#define PMU_PERI3_CTRL_GAU_DIV_MASK (0x1F00U)
#define PMU_PERI3_CTRL_GAU_DIV_SHIFT (8U)
/*! gau_div - GAU clock div ratio
 */
#define PMU_PERI3_CTRL_GAU_DIV(x) (((uint32_t)(((uint32_t)(x)) << PMU_PERI3_CTRL_GAU_DIV_SHIFT)) & PMU_PERI3_CTRL_GAU_DIV_MASK)
#define PMU_PERI3_CTRL_RC32M_DIV_MASK (0x3E000U)
#define PMU_PERI3_CTRL_RC32M_DIV_SHIFT (13U)
/*! rc32m_div - RC32M clock div ratio
 */
#define PMU_PERI3_CTRL_RC32M_DIV(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI3_CTRL_RC32M_DIV_SHIFT)) & PMU_PERI3_CTRL_RC32M_DIV_MASK)
#define PMU_PERI3_CTRL_RC32M_GATE_MASK (0x40000U)
#define PMU_PERI3_CTRL_RC32M_GATE_SHIFT (18U)
/*! rc32m_gate - RC32M reference clock gate
 */
#define PMU_PERI3_CTRL_RC32M_GATE(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << PMU_PERI3_CTRL_RC32M_GATE_SHIFT)) & PMU_PERI3_CTRL_RC32M_GATE_MASK)
/*! @} */

/*! @name IO_LPM_G03_ - I/O LPM G03 Register */
/*! @{ */
#define PMU_IO_LPM_G03__IO_LPM_G03_MASK (0xFFFFFFFFU)
#define PMU_IO_LPM_G03__IO_LPM_G03_SHIFT (0U)
/*! io_lpm_G03 - I/O low power mode
 */
#define PMU_IO_LPM_G03__IO_LPM_G03(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_LPM_G03__IO_LPM_G03_SHIFT)) & PMU_IO_LPM_G03__IO_LPM_G03_MASK)
/*! @} */

/*! @name IO_LPM_G47_ - I/O LPM G47 Register */
/*! @{ */
#define PMU_IO_LPM_G47__IO_LPM_G47_MASK (0xFFFFFFFFU)
#define PMU_IO_LPM_G47__IO_LPM_G47_SHIFT (0U)
/*! io_lpm_G47 - I/O low power mode
 */
#define PMU_IO_LPM_G47__IO_LPM_G47(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_LPM_G47__IO_LPM_G47_SHIFT)) & PMU_IO_LPM_G47__IO_LPM_G47_MASK)
/*! @} */

/*! @name IO_LPM_G811_ - I/O LPM G811 Register */
/*! @{ */
#define PMU_IO_LPM_G811__IO_LPM_G811_MASK (0xFFFFFFFFU)
#define PMU_IO_LPM_G811__IO_LPM_G811_SHIFT (0U)
/*! io_lpm_G811 - I/O low power mode
 */
#define PMU_IO_LPM_G811__IO_LPM_G811(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_LPM_G811__IO_LPM_G811_SHIFT)) & PMU_IO_LPM_G811__IO_LPM_G811_MASK)
/*! @} */

/*! @name IO_LPM_G1215_ - I/O LPM G1215 Register */
/*! @{ */
#define PMU_IO_LPM_G1215__IO_LPM_G1215_MASK (0xFFFFFFFFU)
#define PMU_IO_LPM_G1215__IO_LPM_G1215_SHIFT (0U)
/*! io_lpm_G1215 - I/O low power mode
 */
#define PMU_IO_LPM_G1215__IO_LPM_G1215(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_LPM_G1215__IO_LPM_G1215_SHIFT)) & PMU_IO_LPM_G1215__IO_LPM_G1215_MASK)
/*! @} */

/*! @name IO_LPM_G1617_ - I/O LPM G1617 Register */
/*! @{ */
#define PMU_IO_LPM_G1617__IO_LPM_G1617_MASK (0xFFFFFFFFU)
#define PMU_IO_LPM_G1617__IO_LPM_G1617_SHIFT (0U)
/*! io_lpm_G1617 - I/O low power mode
 */
#define PMU_IO_LPM_G1617__IO_LPM_G1617(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_IO_LPM_G1617__IO_LPM_G1617_SHIFT)) & PMU_IO_LPM_G1617__IO_LPM_G1617_MASK)
/*! @} */

/*! @name WAKEUP_MASK - Wakeup Mask Interrupt Register */
/*! @{ */
#define PMU_WAKEUP_MASK_PIN0_WAKEUP_MASK_MASK (0x8U)
#define PMU_WAKEUP_MASK_PIN0_WAKEUP_MASK_SHIFT (3U)
/*! pin0_wakeup_mask - Pin0 Wakeup Mask
 *  0b0..mask pin0 wakeup interrupt
 *  0b1..unmask pin0 wakeup interrupt
 */
#define PMU_WAKEUP_MASK_PIN0_WAKEUP_MASK(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_MASK_PIN0_WAKEUP_MASK_SHIFT)) & PMU_WAKEUP_MASK_PIN0_WAKEUP_MASK_MASK)
#define PMU_WAKEUP_MASK_PIN1_WAKEUP_MASK_MASK (0x10U)
#define PMU_WAKEUP_MASK_PIN1_WAKEUP_MASK_SHIFT (4U)
/*! pin1_wakeup_mask - Pin1 Wakeup Mask
 *  0b0..mask pin1 wakeup interrupt
 *  0b1..unmask pin1 wakeup interrupt
 */
#define PMU_WAKEUP_MASK_PIN1_WAKEUP_MASK(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_MASK_PIN1_WAKEUP_MASK_SHIFT)) & PMU_WAKEUP_MASK_PIN1_WAKEUP_MASK_MASK)
#define PMU_WAKEUP_MASK_RTC_WAKEUP_MASK_MASK (0x20U)
#define PMU_WAKEUP_MASK_RTC_WAKEUP_MASK_SHIFT (5U)
/*! rtc_wakeup_mask - RTC Wakeup Mask
 *  0b0..mask RTC wakeup interrupt
 *  0b1..unmask RTC wakeup interrupt
 */
#define PMU_WAKEUP_MASK_RTC_WAKEUP_MASK(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_MASK_RTC_WAKEUP_MASK_SHIFT)) & PMU_WAKEUP_MASK_RTC_WAKEUP_MASK_MASK)
#define PMU_WAKEUP_MASK_PMIP_COMP_WAKEUP_MASK_MASK (0x40U)
#define PMU_WAKEUP_MASK_PMIP_COMP_WAKEUP_MASK_SHIFT (6U)
/*! pmip_comp_wakeup_mask - PMIP Comparator Wakeup Mask
 *  0b0..mask PMIP comparator wakeup interrupt
 *  0b1..unmask PMIP comparator wakeup interrupt
 */
#define PMU_WAKEUP_MASK_PMIP_COMP_WAKEUP_MASK(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_MASK_PMIP_COMP_WAKEUP_MASK_SHIFT)) & PMU_WAKEUP_MASK_PMIP_COMP_WAKEUP_MASK_MASK)
#define PMU_WAKEUP_MASK_WL_WAKEUP_MASK_MASK (0x80U)
#define PMU_WAKEUP_MASK_WL_WAKEUP_MASK_SHIFT (7U)
/*! wl_wakeup_mask - WLAN Wakeup Mask
 *  0b0..mask WLAN wakeup interrupt
 *  0b1..unmask WLAN wakeup interrupt
 */
#define PMU_WAKEUP_MASK_WL_WAKEUP_MASK(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << PMU_WAKEUP_MASK_WL_WAKEUP_MASK_SHIFT)) & PMU_WAKEUP_MASK_WL_WAKEUP_MASK_MASK)
/*! @} */

/*! @name WLAN_CTRL - WLAN Control Register */
/*! @{ */
#define PMU_WLAN_CTRL_PD_MASK (0x1U)
#define PMU_WLAN_CTRL_PD_SHIFT (0U)
/*! pd - WLAN power down function
 */
#define PMU_WLAN_CTRL_PD(x) (((uint32_t)(((uint32_t)(x)) << PMU_WLAN_CTRL_PD_SHIFT)) & PMU_WLAN_CTRL_PD_MASK)
#define PMU_WLAN_CTRL_REFCLK_SYS_REQ_MASK (0x2U)
#define PMU_WLAN_CTRL_REFCLK_SYS_REQ_SHIFT (1U)
/*! refclk_sys_req - WLAN SYS reference clock request
 */
#define PMU_WLAN_CTRL_REFCLK_SYS_REQ(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_WLAN_CTRL_REFCLK_SYS_REQ_SHIFT)) & PMU_WLAN_CTRL_REFCLK_SYS_REQ_MASK)
#define PMU_WLAN_CTRL_REFCLK_AUD_REQ_MASK (0x4U)
#define PMU_WLAN_CTRL_REFCLK_AUD_REQ_SHIFT (2U)
/*! refclk_aud_req - WLAN AUD reference clock request
 */
#define PMU_WLAN_CTRL_REFCLK_AUD_REQ(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_WLAN_CTRL_REFCLK_AUD_REQ_SHIFT)) & PMU_WLAN_CTRL_REFCLK_AUD_REQ_MASK)
#define PMU_WLAN_CTRL_REFCLK_USB_REQ_MASK (0x8U)
#define PMU_WLAN_CTRL_REFCLK_USB_REQ_SHIFT (3U)
/*! refclk_usb_req - WLAN USB reference clock request
 */
#define PMU_WLAN_CTRL_REFCLK_USB_REQ(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_WLAN_CTRL_REFCLK_USB_REQ_SHIFT)) & PMU_WLAN_CTRL_REFCLK_USB_REQ_MASK)
#define PMU_WLAN_CTRL_REFCLK_SYS_RDY_MASK (0x10U)
#define PMU_WLAN_CTRL_REFCLK_SYS_RDY_SHIFT (4U)
/*! refclk_sys_rdy - WLAN reference clock ready
 */
#define PMU_WLAN_CTRL_REFCLK_SYS_RDY(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_WLAN_CTRL_REFCLK_SYS_RDY_SHIFT)) & PMU_WLAN_CTRL_REFCLK_SYS_RDY_MASK)
#define PMU_WLAN_CTRL_REFCLK_AUD_RDY_MASK (0x20U)
#define PMU_WLAN_CTRL_REFCLK_AUD_RDY_SHIFT (5U)
/*! refclk_aud_rdy - WLAN reference clock ready
 */
#define PMU_WLAN_CTRL_REFCLK_AUD_RDY(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_WLAN_CTRL_REFCLK_AUD_RDY_SHIFT)) & PMU_WLAN_CTRL_REFCLK_AUD_RDY_MASK)
#define PMU_WLAN_CTRL_REFCLK_USB_RDY_MASK (0x40U)
#define PMU_WLAN_CTRL_REFCLK_USB_RDY_SHIFT (6U)
/*! refclk_usb_rdy - WLAN reference clock ready
 */
#define PMU_WLAN_CTRL_REFCLK_USB_RDY(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_WLAN_CTRL_REFCLK_USB_RDY_SHIFT)) & PMU_WLAN_CTRL_REFCLK_USB_RDY_MASK)
#define PMU_WLAN_CTRL_WL_PD_DEL_CFG_MASK (0x3FF80U)
#define PMU_WLAN_CTRL_WL_PD_DEL_CFG_SHIFT (7U)
/*! wl_pd_del_cfg - count for 30ms
 */
#define PMU_WLAN_CTRL_WL_PD_DEL_CFG(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << PMU_WLAN_CTRL_WL_PD_DEL_CFG_SHIFT)) & PMU_WLAN_CTRL_WL_PD_DEL_CFG_MASK)
/*! @} */

/*! @name WLAN_CTRL1 - WLAN Control 1 Register */
/*! @{ */
#define PMU_WLAN_CTRL1_MCI_WL_WAKEUP_MASK (0x800U)
#define PMU_WLAN_CTRL1_MCI_WL_WAKEUP_SHIFT (11U)
/*! MCI_WL_WAKEUP - MCI_WL_WAKEUP
 */
#define PMU_WLAN_CTRL1_MCI_WL_WAKEUP(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << PMU_WLAN_CTRL1_MCI_WL_WAKEUP_SHIFT)) & PMU_WLAN_CTRL1_MCI_WL_WAKEUP_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group PMU_Register_Masks */

/* PMU - Peripheral instance base addresses */
/** Peripheral PMU base address */
#define PMU_BASE (0x480A0000u)
/** Peripheral PMU base pointer */
#define PMU ((PMU_Type *) PMU_BASE)
/** Array initializer of PMU peripheral base addresses */
#define PMU_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        PMU_BASE                                                                                                                   \
    }
/** Array initializer of PMU peripheral base pointers */
#define PMU_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        PMU                                                                                                                        \
    }
/** Interrupt vectors for the PMU peripheral type */
#define PMU_IRQS                                                                                                                   \
    {                                                                                                                              \
        PMU_IRQn                                                                                                                   \
    }

/*!
 * @}
 */ /* end of group PMU_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- QSPI Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup QSPI_Peripheral_Access_Layer QSPI Peripheral Access Layer
 * @{
 */

/** QSPI - Register Layout Typedef */
typedef struct
{
    __IO uint32_t CNTL;   /**< Serial Interface Control Register, offset: 0x0 */
    __IO uint32_t CONF;   /**< Serial Interface Configuration Register, offset: 0x4 */
    __IO uint32_t DOUT;   /**< Serial Interface Data Out Register, offset: 0x8 */
    __I uint32_t DIN;     /**< Serial Interface Data Input Register, offset: 0xC */
    __IO uint32_t INSTR;  /**< Serial Interface Instruction Register, offset: 0x10 */
    __IO uint32_t ADDR;   /**< Serial Interface Address Register, offset: 0x14 */
    __IO uint32_t RDMODE; /**< Serial Interface Read Mode Register, offset: 0x18 */
    __IO uint32_t HDRCNT; /**< Serial Interface Header Count Register, offset: 0x1C */
    __IO uint32_t DINCNT; /**< Serial Interface Data Input Count Register, offset: 0x20 */
    __IO uint32_t TIMING; /**< Serial Interface Timing Register, offset: 0x24 */
    __IO uint32_t CONF2;  /**< Serial Interface Configuration 2 Register, offset: 0x28 */
    __I uint32_t ISR;     /**< Serial Interface Interrupt Status Register, offset: 0x2C */
    __IO uint32_t IMR;    /**< Serial Interface Interrupt Mask Register, offset: 0x30 */
    __I uint32_t IRSR;    /**< Serial Interface Interrupt Raw Status Register, offset: 0x34 */
    __O uint32_t ISC;     /**< Serial Interface Interrupt Clear Register, offset: 0x38 */
} QSPI_Type;

/* ----------------------------------------------------------------------------
   -- QSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup QSPI_Register_Masks QSPI Register Masks
 * @{
 */

/*! @name CNTL - Serial Interface Control Register */
/*! @{ */
#define QSPI_CNTL_SS_EN_MASK (0x1U)
#define QSPI_CNTL_SS_EN_SHIFT (0U)
/*! SS_EN - Serial Select Enable.
 *  0b0..Serial select is de-activated, ss_n (serial interface select) output is driven high.
 *  0b1..Serial select is activated, ss_n (serial interface select) output is driven low
 */
#define QSPI_CNTL_SS_EN(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_SS_EN_SHIFT)) & QSPI_CNTL_SS_EN_MASK)
#define QSPI_CNTL_XFER_RDY_MASK (0x2U)
#define QSPI_CNTL_XFER_RDY_SHIFT (1U)
/*! XFER_RDY - Serial Interface Transfer Ready.
 *  0b0..Serial Interface is currently transferring data.
 *  0b1..Serial Interface is ready for a new transfer.
 */
#define QSPI_CNTL_XFER_RDY(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_XFER_RDY_SHIFT)) & QSPI_CNTL_XFER_RDY_MASK)
#define QSPI_CNTL_RFIFO_EMPTY_MASK (0x10U)
#define QSPI_CNTL_RFIFO_EMPTY_SHIFT (4U)
/*! RFIFO_EMPTY - Read FIFO Empty.
 *  0b0..Read FIFO is not emptied.
 *  0b1..Read FIFO is emptied
 */
#define QSPI_CNTL_RFIFO_EMPTY(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_RFIFO_EMPTY_SHIFT)) & QSPI_CNTL_RFIFO_EMPTY_MASK)
#define QSPI_CNTL_RFIFO_FULL_MASK (0x20U)
#define QSPI_CNTL_RFIFO_FULL_SHIFT (5U)
/*! RFIFO_FULL - Read FIFO Full.
 *  0b0..Read FIFO is not fulled.
 *  0b1..Read FIFO is fulled.
 */
#define QSPI_CNTL_RFIFO_FULL(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_RFIFO_FULL_SHIFT)) & QSPI_CNTL_RFIFO_FULL_MASK)
#define QSPI_CNTL_WFIFO_EMPTY_MASK (0x40U)
#define QSPI_CNTL_WFIFO_EMPTY_SHIFT (6U)
/*! WFIFO_EMPTY - Write FIFO Empty.
 *  0b0..Write FIFO is not emptied.
 *  0b1..Write FIFO is emptied.
 */
#define QSPI_CNTL_WFIFO_EMPTY(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_WFIFO_EMPTY_SHIFT)) & QSPI_CNTL_WFIFO_EMPTY_MASK)
#define QSPI_CNTL_WFIFO_FULL_MASK (0x80U)
#define QSPI_CNTL_WFIFO_FULL_SHIFT (7U)
/*! WFIFO_FULL - Write FIFO Full.
 *  0b0..Write FIFO is not fulled.
 *  0b1..Write FIFO is fulled.
 */
#define QSPI_CNTL_WFIFO_FULL(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_WFIFO_FULL_SHIFT)) & QSPI_CNTL_WFIFO_FULL_MASK)
#define QSPI_CNTL_RFIFO_UNDRFLW_MASK (0x100U)
#define QSPI_CNTL_RFIFO_UNDRFLW_SHIFT (8U)
/*! RFIFO_UNDRFLW - Read FIFO Underflow.
 *  0b0..Read FIFO is not underflowed.
 *  0b1..Read FIFO is underflowed.
 */
#define QSPI_CNTL_RFIFO_UNDRFLW(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_RFIFO_UNDRFLW_SHIFT)) & QSPI_CNTL_RFIFO_UNDRFLW_MASK)
#define QSPI_CNTL_RFIFO_OVRFLW_MASK (0x200U)
#define QSPI_CNTL_RFIFO_OVRFLW_SHIFT (9U)
/*! RFIFO_OVRFLW - Read FIFO Overflow.
 *  0b0..Read FIFO is not overflowed.
 *  0b1..Read FIFO is overflowed
 */
#define QSPI_CNTL_RFIFO_OVRFLW(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_RFIFO_OVRFLW_SHIFT)) & QSPI_CNTL_RFIFO_OVRFLW_MASK)
#define QSPI_CNTL_WFIFO_UNDRFLW_MASK (0x400U)
#define QSPI_CNTL_WFIFO_UNDRFLW_SHIFT (10U)
/*! WFIFO_UNDRFLW - Write FIFO Underflow.
 *  0b0..Write FIFO is not underflowed.
 *  0b1..Write FIFO is underflowed.
 */
#define QSPI_CNTL_WFIFO_UNDRFLW(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_WFIFO_UNDRFLW_SHIFT)) & QSPI_CNTL_WFIFO_UNDRFLW_MASK)
#define QSPI_CNTL_WFIFO_OVERFLW_MASK (0x800U)
#define QSPI_CNTL_WFIFO_OVERFLW_SHIFT (11U)
/*! WFIFO_OVERFLW - Write FIFO Overflow.
 *  0b0..Write FIFO is not overflowed.
 *  0b1..Write FIFO is overflowed.
 */
#define QSPI_CNTL_WFIFO_OVERFLW(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CNTL_WFIFO_OVERFLW_SHIFT)) & QSPI_CNTL_WFIFO_OVERFLW_MASK)
/*! @} */

/*! @name CONF - Serial Interface Configuration Register */
/*! @{ */
#define QSPI_CONF_CLK_PRESCALE_MASK (0x1FU)
#define QSPI_CONF_CLK_PRESCALE_SHIFT (0U)
/*! CLK_PRESCALE - Serial Interface Clock Prescaler (from SPI clock)
 *  0b00000..SPI clock/1
 *  0b00001..SPI clock/1
 *  0b00010..SPI clock/2
 *  0b00011..SPI clock/3
 *  0b00100..SPI clock/4
 *  0b00101..SPI clock/5
 *  0b01101..SPI clock/13
 *  0b01110..SPI clock/14
 *  0b01111..SPI clock/15
 *  0b10000..SPI clock/2
 *  0b10001..SPI clock/2
 *  0b10010..SPI clock/4
 *  0b10011..SPI clock/6
 *  0b10100..SPI clock/8
 *  0b10101..SPI clock/10
 *  0b11101..SPI clock/26
 *  0b11110..SPI clock/28
 *  0b11111..SPI clock/30
 */
#define QSPI_CONF_CLK_PRESCALE(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_CLK_PRESCALE_SHIFT)) & QSPI_CONF_CLK_PRESCALE_MASK)
#define QSPI_CONF_BYTE_LEN_MASK (0x20U)
#define QSPI_CONF_BYTE_LEN_SHIFT (5U)
/*! BYTE_LEN - Byte Length
 *  0b0..1 byte.
 *  0b1..4 bytes.
 */
#define QSPI_CONF_BYTE_LEN(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_BYTE_LEN_SHIFT)) & QSPI_CONF_BYTE_LEN_MASK)
#define QSPI_CONF_CLK_PHA_MASK (0x80U)
#define QSPI_CONF_CLK_PHA_SHIFT (7U)
/*! CLK_PHA - Serial Interface Clock Phase
 *  0b0..Data is latched at the rising edge of the serial interface clock when CLK_POL (R04h [8]) = 0, and at the
 *       falling edge of the serial interface clock when CLK_POL = 1.
 *  0b1..Data is latched at the falling edge of the serial interface clock when
 */
#define QSPI_CONF_CLK_PHA(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_CLK_PHA_SHIFT)) & QSPI_CONF_CLK_PHA_MASK)
#define QSPI_CONF_CLK_POL_MASK (0x100U)
#define QSPI_CONF_CLK_POL_SHIFT (8U)
/*! CLK_POL - Serial Interface Clock Polarity
 *  0b0..Serial interface clock is low when inactive.
 *  0b1..Serial interface clock is high when inactive.
 */
#define QSPI_CONF_CLK_POL(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_CLK_POL_SHIFT)) & QSPI_CONF_CLK_POL_MASK)
#define QSPI_CONF_FIFO_FLUSH_MASK (0x200U)
#define QSPI_CONF_FIFO_FLUSH_SHIFT (9U)
/*! FIFO_FLUSH - Flush Read and Write FIFOs
 *  0b0..Read and Write FIFOs are not flushed.
 *  0b1..Read and Write FIFOs are flushed.
 */
#define QSPI_CONF_FIFO_FLUSH(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_FIFO_FLUSH_SHIFT)) & QSPI_CONF_FIFO_FLUSH_MASK)
#define QSPI_CONF_DATA_PIN_MASK (0xC00U)
#define QSPI_CONF_DATA_PIN_SHIFT (10U)
/*! DATA_PIN - Data Transfer Pin
 *  0b00..Use 1 serial interface pin (use in single mode).
 *  0b01..Use 2 serial interface pins (use in dual mode).
 *  0b10..Use 4 serial interface pins (use in quad mode).
 *  0b11..Reserved.
 */
#define QSPI_CONF_DATA_PIN(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_DATA_PIN_SHIFT)) & QSPI_CONF_DATA_PIN_MASK)
#define QSPI_CONF_ADDR_PIN_MASK (0x1000U)
#define QSPI_CONF_ADDR_PIN_SHIFT (12U)
/*! ADDR_PIN - Address Transfer Pin
 *  0b0..Use one serial interface pin.
 *  0b1..Use the number of pins as indicated in DATA_PIN (R04h [11:10]).
 */
#define QSPI_CONF_ADDR_PIN(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_ADDR_PIN_SHIFT)) & QSPI_CONF_ADDR_PIN_MASK)
#define QSPI_CONF_RW_EN_MASK (0x2000U)
#define QSPI_CONF_RW_EN_SHIFT (13U)
/*! RW_EN - Read Write Enable.
 *  0b0..Read data from the serial interface.
 *  0b1..Write data to the serial interface.
 */
#define QSPI_CONF_RW_EN(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_RW_EN_SHIFT)) & QSPI_CONF_RW_EN_MASK)
#define QSPI_CONF_XFER_STOP_MASK (0x4000U)
#define QSPI_CONF_XFER_STOP_SHIFT (14U)
/*! XFER_STOP - Transfer Stop
 *  0b0..Continue current transfer
 *  0b1..Stop current transfer.
 */
#define QSPI_CONF_XFER_STOP(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_XFER_STOP_SHIFT)) & QSPI_CONF_XFER_STOP_MASK)
#define QSPI_CONF_XFER_START_MASK (0x8000U)
#define QSPI_CONF_XFER_START_SHIFT (15U)
/*! XFER_START - Transfer Start.
 *  0b0..Transfer has completed.
 *  0b1..Transfer has started.
 */
#define QSPI_CONF_XFER_START(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF_XFER_START_SHIFT)) & QSPI_CONF_XFER_START_MASK)
/*! @} */

/*! @name DOUT - Serial Interface Data Out Register */
/*! @{ */
#define QSPI_DOUT_DATA_OUT_MASK (0xFFFFFFFFU)
#define QSPI_DOUT_DATA_OUT_SHIFT (0U)
/*! DATA_OUT - Serial Interface Data Out.
 */
#define QSPI_DOUT_DATA_OUT(x) (((uint32_t)(((uint32_t)(x)) << QSPI_DOUT_DATA_OUT_SHIFT)) & QSPI_DOUT_DATA_OUT_MASK)
/*! @} */

/*! @name DIN - Serial Interface Data Input Register */
/*! @{ */
#define QSPI_DIN_DATA_IN_MASK (0xFFFFFFFFU)
#define QSPI_DIN_DATA_IN_SHIFT (0U)
/*! DATA_IN - Serial Interface Data In.
 */
#define QSPI_DIN_DATA_IN(x) (((uint32_t)(((uint32_t)(x)) << QSPI_DIN_DATA_IN_SHIFT)) & QSPI_DIN_DATA_IN_MASK)
/*! @} */

/*! @name INSTR - Serial Interface Instruction Register */
/*! @{ */
#define QSPI_INSTR_INSTR_MASK (0xFFFFU)
#define QSPI_INSTR_INSTR_SHIFT (0U)
/*! INSTR - Instruction
 */
#define QSPI_INSTR_INSTR(x) (((uint32_t)(((uint32_t)(x)) << QSPI_INSTR_INSTR_SHIFT)) & QSPI_INSTR_INSTR_MASK)
/*! @} */

/*! @name ADDR - Serial Interface Address Register */
/*! @{ */
#define QSPI_ADDR_ADDR_MASK (0xFFFFFFFFU)
#define QSPI_ADDR_ADDR_SHIFT (0U)
/*! ADDR - Serial Interface Address.
 */
#define QSPI_ADDR_ADDR(x) (((uint32_t)(((uint32_t)(x)) << QSPI_ADDR_ADDR_SHIFT)) & QSPI_ADDR_ADDR_MASK)
/*! @} */

/*! @name RDMODE - Serial Interface Read Mode Register */
/*! @{ */
#define QSPI_RDMODE_RMODE_MASK (0xFFFFU)
#define QSPI_RDMODE_RMODE_SHIFT (0U)
/*! RMODE - Serial Interface Read Mode.
 */
#define QSPI_RDMODE_RMODE(x) (((uint32_t)(((uint32_t)(x)) << QSPI_RDMODE_RMODE_SHIFT)) & QSPI_RDMODE_RMODE_MASK)
/*! @} */

/*! @name HDRCNT - Serial Interface Header Count Register */
/*! @{ */
#define QSPI_HDRCNT_INSTR_CNT_MASK (0x3U)
#define QSPI_HDRCNT_INSTR_CNT_SHIFT (0U)
/*! INSTR_CNT - Instruction Count.
 *  0b00..0 byte.
 *  0b01..1 byte.
 *  0b10..2 bytes.
 *  0b11..Reserved.
 */
#define QSPI_HDRCNT_INSTR_CNT(x) (((uint32_t)(((uint32_t)(x)) << QSPI_HDRCNT_INSTR_CNT_SHIFT)) & QSPI_HDRCNT_INSTR_CNT_MASK)
#define QSPI_HDRCNT_ADDR_CNT_MASK (0x70U)
#define QSPI_HDRCNT_ADDR_CNT_SHIFT (4U)
/*! ADDR_CNT - Address Count.
 *  0b000..0 byte.
 *  0b001..1 byte.
 *  0b010..2 bytes.
 *  0b011..3 bytes.
 *  0b100..4 bytes.
 */
#define QSPI_HDRCNT_ADDR_CNT(x) (((uint32_t)(((uint32_t)(x)) << QSPI_HDRCNT_ADDR_CNT_SHIFT)) & QSPI_HDRCNT_ADDR_CNT_MASK)
#define QSPI_HDRCNT_RM_CNT_MASK (0x300U)
#define QSPI_HDRCNT_RM_CNT_SHIFT (8U)
/*! RM_CNT - Read Mode Count.
 *  0b00..0 byte.
 *  0b01..1 byte.
 *  0b10..2 bytes.
 *  0b11..Reserved.
 */
#define QSPI_HDRCNT_RM_CNT(x) (((uint32_t)(((uint32_t)(x)) << QSPI_HDRCNT_RM_CNT_SHIFT)) & QSPI_HDRCNT_RM_CNT_MASK)
#define QSPI_HDRCNT_DUMMY_CNT_MASK (0x3000U)
#define QSPI_HDRCNT_DUMMY_CNT_SHIFT (12U)
/*! DUMMY_CNT - Dummy Count.
 *  0b00..0 byte.
 *  0b01..1 byte.
 *  0b10..2 bytes.
 *  0b11..3 bytes.
 */
#define QSPI_HDRCNT_DUMMY_CNT(x) (((uint32_t)(((uint32_t)(x)) << QSPI_HDRCNT_DUMMY_CNT_SHIFT)) & QSPI_HDRCNT_DUMMY_CNT_MASK)
/*! @} */

/*! @name DINCNT - Serial Interface Data Input Count Register */
/*! @{ */
#define QSPI_DINCNT_DATA_IN_CNT_MASK (0xFFFFFU)
#define QSPI_DINCNT_DATA_IN_CNT_SHIFT (0U)
/*! DATA_IN_CNT - Serial Interface Data In Count.
 */
#define QSPI_DINCNT_DATA_IN_CNT(x) (((uint32_t)(((uint32_t)(x)) << QSPI_DINCNT_DATA_IN_CNT_SHIFT)) & QSPI_DINCNT_DATA_IN_CNT_MASK)
/*! @} */

/*! @name TIMING - Serial Interface Timing Register */
/*! @{ */
#define QSPI_TIMING_DATA_IN_DLY_MASK (0x3U)
#define QSPI_TIMING_DATA_IN_DLY_SHIFT (0U)
/*! DATA_IN_DLY - Serial Interface Data Input Delay
 *  0b00..No delay.
 *  0b01..1 serial interface clock delay.
 *  0b10..2 serial interface clock delay.
 *  0b11..Reserved
 */
#define QSPI_TIMING_DATA_IN_DLY(x) (((uint32_t)(((uint32_t)(x)) << QSPI_TIMING_DATA_IN_DLY_SHIFT)) & QSPI_TIMING_DATA_IN_DLY_MASK)
#define QSPI_TIMING_CLK_IN_DLY_MASK (0x30U)
#define QSPI_TIMING_CLK_IN_DLY_SHIFT (4U)
/*! CLK_IN_DLY - Serial Interface Clock In Delay.
 *  0b00..No delay.
 *  0b01..Add 0.2 ns delay.
 *  0b10..Add 0.4 ns delay
 *  0b11..Add 0.6 ns delay
 */
#define QSPI_TIMING_CLK_IN_DLY(x) (((uint32_t)(((uint32_t)(x)) << QSPI_TIMING_CLK_IN_DLY_SHIFT)) & QSPI_TIMING_CLK_IN_DLY_MASK)
#define QSPI_TIMING_CLK_CAPT_EDGE_MASK (0x40U)
#define QSPI_TIMING_CLK_CAPT_EDGE_SHIFT (6U)
/*! CLK_CAPT_EDGE - Serial Interface Capture Clock Edge.
 *  0b0..rising edge
 *  0b1..falling edge
 */
#define QSPI_TIMING_CLK_CAPT_EDGE(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << QSPI_TIMING_CLK_CAPT_EDGE_SHIFT)) & QSPI_TIMING_CLK_CAPT_EDGE_MASK)
#define QSPI_TIMING_CLK_OUT_DLY_MASK (0x300U)
#define QSPI_TIMING_CLK_OUT_DLY_SHIFT (8U)
/*! CLK_OUT_DLY - Serial Interface Clock Out Delay.
 *  0b00..No delay.
 *  0b01..Add 0.2 ns delay.
 *  0b10..Add 0.4 ns delay.
 *  0b11..Add 0.6 ns delay.
 */
#define QSPI_TIMING_CLK_OUT_DLY(x) (((uint32_t)(((uint32_t)(x)) << QSPI_TIMING_CLK_OUT_DLY_SHIFT)) & QSPI_TIMING_CLK_OUT_DLY_MASK)
/*! @} */

/*! @name CONF2 - Serial Interface Configuration 2 Register */
/*! @{ */
#define QSPI_CONF2_SRST_MASK (0x1U)
#define QSPI_CONF2_SRST_SHIFT (0U)
/*! SRST - Soft Reset.
 *  0b0..Hardware is not in reset.
 *  0b1..Hardware is in reset.
 */
#define QSPI_CONF2_SRST(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF2_SRST_SHIFT)) & QSPI_CONF2_SRST_MASK)
#define QSPI_CONF2_DMA_RD_EN_MASK (0x2U)
#define QSPI_CONF2_DMA_RD_EN_SHIFT (1U)
/*! DMA_RD_EN - DMA Read Enable.
 *  0b0..DMA read is disabled.
 *  0b1..DMA read is enabled.
 */
#define QSPI_CONF2_DMA_RD_EN(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF2_DMA_RD_EN_SHIFT)) & QSPI_CONF2_DMA_RD_EN_MASK)
#define QSPI_CONF2_DMA_WR_EN_MASK (0x4U)
#define QSPI_CONF2_DMA_WR_EN_SHIFT (2U)
/*! DMA_WR_EN - DMA Write Enable.
 *  0b0..DMA write is disabled.
 *  0b1..DMA write is enabled.
 */
#define QSPI_CONF2_DMA_WR_EN(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF2_DMA_WR_EN_SHIFT)) & QSPI_CONF2_DMA_WR_EN_MASK)
#define QSPI_CONF2_DMA_RD_BURST_MASK (0x300U)
#define QSPI_CONF2_DMA_RD_BURST_SHIFT (8U)
/*! DMA_RD_BURST - DMA Read Burst.
 *  0b00..1 data.
 *  0b01..4 data.
 *  0b10..8 data.
 *  0b11..Reserved.
 */
#define QSPI_CONF2_DMA_RD_BURST(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF2_DMA_RD_BURST_SHIFT)) & QSPI_CONF2_DMA_RD_BURST_MASK)
#define QSPI_CONF2_DMA_WR_BURST_MASK (0x3000U)
#define QSPI_CONF2_DMA_WR_BURST_SHIFT (12U)
/*! DMA_WR_BURST - DMA Write Burst.
 *  0b00..1 data.
 *  0b01..4 data.
 *  0b10..8 data.
 *  0b11..Reserved.
 */
#define QSPI_CONF2_DMA_WR_BURST(x) (((uint32_t)(((uint32_t)(x)) << QSPI_CONF2_DMA_WR_BURST_SHIFT)) & QSPI_CONF2_DMA_WR_BURST_MASK)
/*! @} */

/*! @name ISR - Serial Interface Interrupt Status Register */
/*! @{ */
#define QSPI_ISR_XFER_DONE_IS_MASK (0x1U)
#define QSPI_ISR_XFER_DONE_IS_SHIFT (0U)
/*! XFER_DONE_IS - Transfer Done Interrupt Status.
 *  0b0..Transfer has not completed after masking.
 *  0b1..Transfer has completed after masking.
 */
#define QSPI_ISR_XFER_DONE_IS(x) (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_XFER_DONE_IS_SHIFT)) & QSPI_ISR_XFER_DONE_IS_MASK)
#define QSPI_ISR_XFER_RDY_IS_MASK (0x2U)
#define QSPI_ISR_XFER_RDY_IS_SHIFT (1U)
/*! XFER_RDY_IS - Serial Interface Transfer Ready Interrupt Status
 *  0b0..Serial interface is currently transferring data after masking.
 *  0b1..Serial interface is ready for a new transfer after masking.
 */
#define QSPI_ISR_XFER_RDY_IS(x) (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_XFER_RDY_IS_SHIFT)) & QSPI_ISR_XFER_RDY_IS_MASK)
#define QSPI_ISR_RFIFO_DMA_BURST_IS_MASK (0x4U)
#define QSPI_ISR_RFIFO_DMA_BURST_IS_SHIFT (2U)
/*! RFIFO_DMA_BURST_IS - Read FIFO DMA Burst Interrupt Status.
 *  0b0..Number of available data in the Read FIFO is less than DMA_RD_BURST (R28h [9:8]) after masking.
 *  0b1..Number of available data in the Read FIFO is greater than or equal to DMA_RD_BURST (R28h [9:8]) after masking.
 */
#define QSPI_ISR_RFIFO_DMA_BURST_IS(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_RFIFO_DMA_BURST_IS_SHIFT)) & QSPI_ISR_RFIFO_DMA_BURST_IS_MASK)
#define QSPI_ISR_WFIFO_DMA_BURST_IS_MASK (0x8U)
#define QSPI_ISR_WFIFO_DMA_BURST_IS_SHIFT (3U)
/*! WFIFO_DMA_BURST_IS - Write FIFO DMA burst Interrupt Status.
 *  0b0..Number of unused entries in the Write FIFO is less than DMA_WR_BURST (R28h [13:12]) after masking.
 *  0b1..Number of unused entries in the Write FIFO is greater than or equal to DMA_WR_BURST (R28h [13:12]) after masking.
 */
#define QSPI_ISR_WFIFO_DMA_BURST_IS(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_WFIFO_DMA_BURST_IS_SHIFT)) & QSPI_ISR_WFIFO_DMA_BURST_IS_MASK)
#define QSPI_ISR_RFIFO_EMPTY_IS_MASK (0x10U)
#define QSPI_ISR_RFIFO_EMPTY_IS_SHIFT (4U)
/*! RFIFO_EMPTY_IS - Read FIFO Empty Interrupt Status.
 *  0b0..Read FIFO is not emptied after masking.
 *  0b1..Read FIFO is empty after masking.
 */
#define QSPI_ISR_RFIFO_EMPTY_IS(x) (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_RFIFO_EMPTY_IS_SHIFT)) & QSPI_ISR_RFIFO_EMPTY_IS_MASK)
#define QSPI_ISR_RFIFO_FULL_IS_MASK (0x20U)
#define QSPI_ISR_RFIFO_FULL_IS_SHIFT (5U)
/*! RFIFO_FULL_IS - Read FIFO Full Interrupt Status.
 *  0b0..Read FIFO is not fulled after masking.
 *  0b1..Read FIFO is fulled after masking.
 */
#define QSPI_ISR_RFIFO_FULL_IS(x) (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_RFIFO_FULL_IS_SHIFT)) & QSPI_ISR_RFIFO_FULL_IS_MASK)
#define QSPI_ISR_WFIFO_EMPTY_IS_MASK (0x40U)
#define QSPI_ISR_WFIFO_EMPTY_IS_SHIFT (6U)
/*! WFIFO_EMPTY_IS - Write FIFO Empty Interrupt Status.
 *  0b0..Write FIFO is not emptied after masking.
 *  0b1..Write FIFO is emptied after masking.
 */
#define QSPI_ISR_WFIFO_EMPTY_IS(x) (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_WFIFO_EMPTY_IS_SHIFT)) & QSPI_ISR_WFIFO_EMPTY_IS_MASK)
#define QSPI_ISR_WFIFO_FULL_IS_MASK (0x80U)
#define QSPI_ISR_WFIFO_FULL_IS_SHIFT (7U)
/*! WFIFO_FULL_IS - Write FIFO Full Interrupt Status.
 *  0b0..Write FIFO is not fulled after masking.
 *  0b1..Write FIFO is fulled after masking.
 */
#define QSPI_ISR_WFIFO_FULL_IS(x) (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_WFIFO_FULL_IS_SHIFT)) & QSPI_ISR_WFIFO_FULL_IS_MASK)
#define QSPI_ISR_RFIFO_UNDRFLW_IS_MASK (0x100U)
#define QSPI_ISR_RFIFO_UNDRFLW_IS_SHIFT (8U)
/*! RFIFO_UNDRFLW_IS - Read FIFO Underflow Interrupt Status.
 *  0b0..Read FIFO is not underflowed after masking.
 *  0b1..Read FIFO is underflowed after masking.
 */
#define QSPI_ISR_RFIFO_UNDRFLW_IS(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_RFIFO_UNDRFLW_IS_SHIFT)) & QSPI_ISR_RFIFO_UNDRFLW_IS_MASK)
#define QSPI_ISR_RFIFO_OVRFLW_IS_MASK (0x200U)
#define QSPI_ISR_RFIFO_OVRFLW_IS_SHIFT (9U)
/*! RFIFO_OVRFLW_IS - Read FIFO Overflow Interrupt Status.
 *  0b0..Read FIFO is not overflowed after masking.
 *  0b1..Read FIFO is overflowed after masking.
 */
#define QSPI_ISR_RFIFO_OVRFLW_IS(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_RFIFO_OVRFLW_IS_SHIFT)) & QSPI_ISR_RFIFO_OVRFLW_IS_MASK)
#define QSPI_ISR_WFIFO_UNDRFLW_IS_MASK (0x400U)
#define QSPI_ISR_WFIFO_UNDRFLW_IS_SHIFT (10U)
/*! WFIFO_UNDRFLW_IS - Write FIFO Underflow Interrupt Status.
 *  0b0..Write FIFO is not underflowed after masking.
 *  0b1..Write FIFO is underflowed after masking.
 */
#define QSPI_ISR_WFIFO_UNDRFLW_IS(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_WFIFO_UNDRFLW_IS_SHIFT)) & QSPI_ISR_WFIFO_UNDRFLW_IS_MASK)
#define QSPI_ISR_WFIFO_OVRFLW_IS_MASK (0x800U)
#define QSPI_ISR_WFIFO_OVRFLW_IS_SHIFT (11U)
/*! WFIFO_OVRFLW_IS - Write FIFO Overflow Interrupt Status.
 *  0b0..Write FIFO is not overflowed after masking.
 *  0b1..Write FIFO is overflowed after masking.
 */
#define QSPI_ISR_WFIFO_OVRFLW_IS(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << QSPI_ISR_WFIFO_OVRFLW_IS_SHIFT)) & QSPI_ISR_WFIFO_OVRFLW_IS_MASK)
/*! @} */

/*! @name IMR - Serial Interface Interrupt Mask Register */
/*! @{ */
#define QSPI_IMR_XFER_DONE_IM_MASK (0x1U)
#define QSPI_IMR_XFER_DONE_IM_SHIFT (0U)
/*! XFER_DONE_IM - Transfer Done Interrupt Mask.
 *  0b0..Transfer done interrupt is not masked.
 *  0b1..Transfer done interrupt is masked.
 */
#define QSPI_IMR_XFER_DONE_IM(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_XFER_DONE_IM_SHIFT)) & QSPI_IMR_XFER_DONE_IM_MASK)
#define QSPI_IMR_XFER_RDY_IM_MASK (0x2U)
#define QSPI_IMR_XFER_RDY_IM_SHIFT (1U)
/*! XFER_RDY_IM - Serial Interface Transfer Ready Mask.
 *  0b0..Transfer ready interrupt is not masked.
 *  0b1..Transfer ready interrupt is masked.
 */
#define QSPI_IMR_XFER_RDY_IM(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_XFER_RDY_IM_SHIFT)) & QSPI_IMR_XFER_RDY_IM_MASK)
#define QSPI_IMR_RFIFO_DMA_BURST_IM_MASK (0x4U)
#define QSPI_IMR_RFIFO_DMA_BURST_IM_SHIFT (2U)
/*! RFIFO_DMA_BURST_IM - Read FIFO DMA Burst Interrupt Mask.
 *  0b0..Read FIFO DMA burst interrupt is not masked.
 *  0b1..Read FIFO DMA burst interrupt is masked.
 */
#define QSPI_IMR_RFIFO_DMA_BURST_IM(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_RFIFO_DMA_BURST_IM_SHIFT)) & QSPI_IMR_RFIFO_DMA_BURST_IM_MASK)
#define QSPI_IMR_WFIFO_DMA_BURST_IM_MASK (0x8U)
#define QSPI_IMR_WFIFO_DMA_BURST_IM_SHIFT (3U)
/*! WFIFO_DMA_BURST_IM - Write FIFO DMA Burst Interrupt Mask.
 *  0b0..Write FIFO DMA burst interrupt is not masked.
 *  0b1..Write FIFO DMA burst interrupt is masked.
 */
#define QSPI_IMR_WFIFO_DMA_BURST_IM(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_WFIFO_DMA_BURST_IM_SHIFT)) & QSPI_IMR_WFIFO_DMA_BURST_IM_MASK)
#define QSPI_IMR_RFIFO_EMPTY_IM_MASK (0x10U)
#define QSPI_IMR_RFIFO_EMPTY_IM_SHIFT (4U)
/*! RFIFO_EMPTY_IM - Read FIFO Empty Interrupt Mask.
 *  0b0..Read FIFO empty interrupt is not masked.
 *  0b1..Read FIFO empty interrupt is masked.
 */
#define QSPI_IMR_RFIFO_EMPTY_IM(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_RFIFO_EMPTY_IM_SHIFT)) & QSPI_IMR_RFIFO_EMPTY_IM_MASK)
#define QSPI_IMR_RFIFO_FULL_IM_MASK (0x20U)
#define QSPI_IMR_RFIFO_FULL_IM_SHIFT (5U)
/*! RFIFO_FULL_IM - Read FIFO Full Interrupt Mask.
 *  0b0..Read FIFO full interrupt is not masked.
 *  0b1..Read FIFO full interrupt is masked.
 */
#define QSPI_IMR_RFIFO_FULL_IM(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_RFIFO_FULL_IM_SHIFT)) & QSPI_IMR_RFIFO_FULL_IM_MASK)
#define QSPI_IMR_WFIFO_EMPTY_IM_MASK (0x40U)
#define QSPI_IMR_WFIFO_EMPTY_IM_SHIFT (6U)
/*! WFIFO_EMPTY_IM - Write FIFO Empty Interrupt Mask.
 *  0b0..Write FIFO empty interrupt is not masked.
 *  0b1..Write FIFO empty interrupt is masked.
 */
#define QSPI_IMR_WFIFO_EMPTY_IM(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_WFIFO_EMPTY_IM_SHIFT)) & QSPI_IMR_WFIFO_EMPTY_IM_MASK)
#define QSPI_IMR_WFIFO_FULL_IM_MASK (0x80U)
#define QSPI_IMR_WFIFO_FULL_IM_SHIFT (7U)
/*! WFIFO_FULL_IM - Write FIFO Full Interrupt Mask.
 *  0b0..Write FIFO full interrupt is not masked.
 *  0b1..Write FIFO full interrupt is masked.
 */
#define QSPI_IMR_WFIFO_FULL_IM(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_WFIFO_FULL_IM_SHIFT)) & QSPI_IMR_WFIFO_FULL_IM_MASK)
#define QSPI_IMR_RFIFO_UNDRFLW_IM_MASK (0x100U)
#define QSPI_IMR_RFIFO_UNDRFLW_IM_SHIFT (8U)
/*! RFIFO_UNDRFLW_IM - Read FIFO Underflow Interrupt Mask.
 *  0b0..Read FIFO underflow interrupt is not masked.
 *  0b1..Read FIFO underflow interrupt is masked.
 */
#define QSPI_IMR_RFIFO_UNDRFLW_IM(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_RFIFO_UNDRFLW_IM_SHIFT)) & QSPI_IMR_RFIFO_UNDRFLW_IM_MASK)
#define QSPI_IMR_RFIFO_OVRFLW_IM_MASK (0x200U)
#define QSPI_IMR_RFIFO_OVRFLW_IM_SHIFT (9U)
/*! RFIFO_OVRFLW_IM - Read FIFO Overflow Interrupt Mask.
 *  0b0..Read FIFO overflow interrupt is not masked.
 *  0b1..Read FIFO overflow interrupt is masked.
 */
#define QSPI_IMR_RFIFO_OVRFLW_IM(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_RFIFO_OVRFLW_IM_SHIFT)) & QSPI_IMR_RFIFO_OVRFLW_IM_MASK)
#define QSPI_IMR_WFIFO_UNDRFLW_IM_MASK (0x400U)
#define QSPI_IMR_WFIFO_UNDRFLW_IM_SHIFT (10U)
/*! WFIFO_UNDRFLW_IM - Write FIFO Underflow Interrupt Mask.
 *  0b0..Write FIFO underflow interrupt is not masked.
 *  0b1..Write FIFO underflow interrupt is masked.
 */
#define QSPI_IMR_WFIFO_UNDRFLW_IM(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_WFIFO_UNDRFLW_IM_SHIFT)) & QSPI_IMR_WFIFO_UNDRFLW_IM_MASK)
#define QSPI_IMR_WFIFO_OVRFLW_IM_MASK (0x800U)
#define QSPI_IMR_WFIFO_OVRFLW_IM_SHIFT (11U)
/*! WFIFO_OVRFLW_IM - Write FIFO Overflow Interrupt Mask.
 *  0b0..Write FIFO overflow interrupt is not masked.
 *  0b1..Write FIFO overflow interrupt is masked.
 */
#define QSPI_IMR_WFIFO_OVRFLW_IM(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IMR_WFIFO_OVRFLW_IM_SHIFT)) & QSPI_IMR_WFIFO_OVRFLW_IM_MASK)
/*! @} */

/*! @name IRSR - Serial Interface Interrupt Raw Status Register */
/*! @{ */
#define QSPI_IRSR_XFER_DONE_IR_MASK (0x1U)
#define QSPI_IRSR_XFER_DONE_IR_SHIFT (0U)
/*! XFER_DONE_IR - Transfer Done Interrupt Raw.
 *  0b0..Transfer has not completed before masking.
 *  0b1..Transfer has completed before masking.
 */
#define QSPI_IRSR_XFER_DONE_IR(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_XFER_DONE_IR_SHIFT)) & QSPI_IRSR_XFER_DONE_IR_MASK)
#define QSPI_IRSR_XFER_RDY_IR_MASK (0x2U)
#define QSPI_IRSR_XFER_RDY_IR_SHIFT (1U)
/*! XFER_RDY_IR - Serial Interface Transfer Ready Raw.
 *  0b0..Serial interface is currently transferring data before masking.
 *  0b1..Serial interface is ready for a new transfer before masking.
 */
#define QSPI_IRSR_XFER_RDY_IR(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_XFER_RDY_IR_SHIFT)) & QSPI_IRSR_XFER_RDY_IR_MASK)
#define QSPI_IRSR_RFIFO_DMA_BURST_IR_MASK (0x4U)
#define QSPI_IRSR_RFIFO_DMA_BURST_IR_SHIFT (2U)
/*! RFIFO_DMA_BURST_IR - Read FIFO DMA Burst Interrupt Raw.
 *  0b0..Number of available data in the Read FIFO is less than DMA_RD_BURST (R28h [9:8]) before masking.
 *  0b1..Number of available data in the Read FIFO is greater than or equal to DMA_RD_BURST (R28h [9:8]) before masking.
 */
#define QSPI_IRSR_RFIFO_DMA_BURST_IR(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_RFIFO_DMA_BURST_IR_SHIFT)) & QSPI_IRSR_RFIFO_DMA_BURST_IR_MASK)
#define QSPI_IRSR_WFIFO_DMA_BURST_IR_MASK (0x8U)
#define QSPI_IRSR_WFIFO_DMA_BURST_IR_SHIFT (3U)
/*! WFIFO_DMA_BURST_IR - Write FIFO DMA Burst Interrupt Raw.
 *  0b0..Number of unused entries in the Write FIFO is less than DMA_WR_BURST (R28h [13:12]) before masking.
 *  0b1..Number of unused entries in the Write FIFO is greater than or equal to DMA_WR_BURST (R28h [13:12]) before masking.
 */
#define QSPI_IRSR_WFIFO_DMA_BURST_IR(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_WFIFO_DMA_BURST_IR_SHIFT)) & QSPI_IRSR_WFIFO_DMA_BURST_IR_MASK)
#define QSPI_IRSR_RFIFO_EMPTY_IR_MASK (0x10U)
#define QSPI_IRSR_RFIFO_EMPTY_IR_SHIFT (4U)
/*! RFIFO_EMPTY_IR - Read FIFO Empty Interrupt Raw.
 *  0b0..Read FIFO is not emptied before masking.
 *  0b1..Read FIFO is empty before masking.
 */
#define QSPI_IRSR_RFIFO_EMPTY_IR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_RFIFO_EMPTY_IR_SHIFT)) & QSPI_IRSR_RFIFO_EMPTY_IR_MASK)
#define QSPI_IRSR_RFIFO_FULL_IR_MASK (0x20U)
#define QSPI_IRSR_RFIFO_FULL_IR_SHIFT (5U)
/*! RFIFO_FULL_IR - Read FIFO Full Interrupt Raw.
 *  0b0..Read FIFO is not fulled before masking.
 *  0b1..Read FIFO is fulled before masking.
 */
#define QSPI_IRSR_RFIFO_FULL_IR(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_RFIFO_FULL_IR_SHIFT)) & QSPI_IRSR_RFIFO_FULL_IR_MASK)
#define QSPI_IRSR_WFIFO_EMPTY_IR_MASK (0x40U)
#define QSPI_IRSR_WFIFO_EMPTY_IR_SHIFT (6U)
/*! WFIFO_EMPTY_IR - Write FIFO Empty Interrupt Raw.
 *  0b0..Write FIFO is not emptied before masking.
 *  0b1..Write FIFO is emptied before masking.
 */
#define QSPI_IRSR_WFIFO_EMPTY_IR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_WFIFO_EMPTY_IR_SHIFT)) & QSPI_IRSR_WFIFO_EMPTY_IR_MASK)
#define QSPI_IRSR_WFIFO_FULL_IR_MASK (0x80U)
#define QSPI_IRSR_WFIFO_FULL_IR_SHIFT (7U)
/*! WFIFO_FULL_IR - Write FIFO Full Interrupt Raw.
 *  0b0..Write FIFO is not fulled before masking.
 *  0b1..Write FIFO is fulled before masking.
 */
#define QSPI_IRSR_WFIFO_FULL_IR(x) (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_WFIFO_FULL_IR_SHIFT)) & QSPI_IRSR_WFIFO_FULL_IR_MASK)
#define QSPI_IRSR_RFIFO_UNDRFLW_IR_MASK (0x100U)
#define QSPI_IRSR_RFIFO_UNDRFLW_IR_SHIFT (8U)
/*! RFIFO_UNDRFLW_IR - Read FIFO Underflow Interrupt Raw.
 *  0b0..Read FIFO is not underflowed before masking.
 *  0b1..Read FIFO is underflowed before masking.
 */
#define QSPI_IRSR_RFIFO_UNDRFLW_IR(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_RFIFO_UNDRFLW_IR_SHIFT)) & QSPI_IRSR_RFIFO_UNDRFLW_IR_MASK)
#define QSPI_IRSR_RFIFO_OVRFLW_IR_MASK (0x200U)
#define QSPI_IRSR_RFIFO_OVRFLW_IR_SHIFT (9U)
/*! RFIFO_OVRFLW_IR - Read FIFO Overflow Interrupt Raw.
 *  0b0..Read FIFO is not overflowed before masking.
 *  0b1..Read FIFO is overflowed before masking.
 */
#define QSPI_IRSR_RFIFO_OVRFLW_IR(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_RFIFO_OVRFLW_IR_SHIFT)) & QSPI_IRSR_RFIFO_OVRFLW_IR_MASK)
#define QSPI_IRSR_WFIFO_UNDRFLW_IR_MASK (0x400U)
#define QSPI_IRSR_WFIFO_UNDRFLW_IR_SHIFT (10U)
/*! WFIFO_UNDRFLW_IR - Write FIFO Underflow Interrupt Raw.
 *  0b0..Write FIFO is not underflowed before masking.
 *  0b1..Write FIFO is underflowed before masking.
 */
#define QSPI_IRSR_WFIFO_UNDRFLW_IR(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_WFIFO_UNDRFLW_IR_SHIFT)) & QSPI_IRSR_WFIFO_UNDRFLW_IR_MASK)
#define QSPI_IRSR_WFIFO_OVRFLW_IR_MASK (0x800U)
#define QSPI_IRSR_WFIFO_OVRFLW_IR_SHIFT (11U)
/*! WFIFO_OVRFLW_IR - Write FIFO Overflow Interrupt Raw.
 *  0b0..Write FIFO is not overflowed before masking.
 *  0b1..Write FIFO is overflowed before masking.
 */
#define QSPI_IRSR_WFIFO_OVRFLW_IR(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << QSPI_IRSR_WFIFO_OVRFLW_IR_SHIFT)) & QSPI_IRSR_WFIFO_OVRFLW_IR_MASK)
/*! @} */

/*! @name ISC - Serial Interface Interrupt Clear Register */
/*! @{ */
#define QSPI_ISC_XFER_DONE_IC_MASK (0x1U)
#define QSPI_ISC_XFER_DONE_IC_SHIFT (0U)
/*! XFER_DONE_IC - Transfer Done Interrupt Clear.
 *  0b0..Transfer done interrupt is not cleared.
 *  0b1..Transfer done interrupt is cleared.
 */
#define QSPI_ISC_XFER_DONE_IC(x) (((uint32_t)(((uint32_t)(x)) << QSPI_ISC_XFER_DONE_IC_SHIFT)) & QSPI_ISC_XFER_DONE_IC_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group QSPI_Register_Masks */

/* QSPI - Peripheral instance base addresses */
/** Peripheral QSPI base address */
#define QSPI_BASE (0x46010000u)
/** Peripheral QSPI base pointer */
#define QSPI ((QSPI_Type *) QSPI_BASE)
/** Array initializer of QSPI peripheral base addresses */
#define QSPI_BASE_ADDRS                                                                                                            \
    {                                                                                                                              \
        QSPI_BASE                                                                                                                  \
    }
/** Array initializer of QSPI peripheral base pointers */
#define QSPI_BASE_PTRS                                                                                                             \
    {                                                                                                                              \
        QSPI                                                                                                                       \
    }
/** Interrupt vectors for the QSPI peripheral type */
#define QSPI_IRQS                                                                                                                  \
    {                                                                                                                              \
        QSPI_IRQn                                                                                                                  \
    }

/*!
 * @}
 */ /* end of group QSPI_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- RC32 Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RC32_Peripheral_Access_Layer RC32 Peripheral Access Layer
 * @{
 */

/** RC32 - Register Layout Typedef */
typedef struct
{
    __IO uint32_t CTRL;  /**< Control Register, offset: 0x0 */
    __I uint32_t STATUS; /**< Status Register, offset: 0x4 */
    __I uint32_t ISR;    /**< Interrupt Status Register, offset: 0x8 */
    __IO uint32_t IMR;   /**< Interrupt Mask Register, offset: 0xC */
    __I uint32_t IRSR;   /**< Interrupt Raw Status Register, offset: 0x10 */
    __IO uint32_t ICR;   /**< Interrupt Clear Register, offset: 0x14 */
    __IO uint32_t CLK;   /**< Clock Register, offset: 0x18 */
    __IO uint32_t RST;   /**< Soft Reset Register, offset: 0x1C */
} RC32_Type;

/* ----------------------------------------------------------------------------
   -- RC32 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RC32_Register_Masks RC32 Register Masks
 * @{
 */

/*! @name CTRL - Control Register */
/*! @{ */
#define RC32_CTRL_EN_MASK (0x1U)
#define RC32_CTRL_EN_SHIFT (0U)
/*! en - Calibration reference clock enable
 *  0b0..
 *  0b1..
 */
#define RC32_CTRL_EN(x) (((uint32_t)(((uint32_t)(x)) << RC32_CTRL_EN_SHIFT)) & RC32_CTRL_EN_MASK)
#define RC32_CTRL_CAL_EN_MASK (0x2U)
#define RC32_CTRL_CAL_EN_SHIFT (1U)
/*! cal_en - Calibration enable
 *  0b0..
 *  0b1..
 */
#define RC32_CTRL_CAL_EN(x) (((uint32_t)(((uint32_t)(x)) << RC32_CTRL_CAL_EN_SHIFT)) & RC32_CTRL_CAL_EN_MASK)
#define RC32_CTRL_EXT_CODE_EN_MASK (0x4U)
#define RC32_CTRL_EXT_CODE_EN_SHIFT (2U)
/*! ext_code_en - Calibration code from external enable
 *  0b0..calibration code from internal
 *  0b1..calibration code from external
 */
#define RC32_CTRL_EXT_CODE_EN(x) (((uint32_t)(((uint32_t)(x)) << RC32_CTRL_EXT_CODE_EN_SHIFT)) & RC32_CTRL_EXT_CODE_EN_MASK)
#define RC32_CTRL_PD_MASK (0x8U)
#define RC32_CTRL_PD_SHIFT (3U)
/*! pd - Clock Power down
 *  0b0..Power up.
 *  0b1..Power down
 */
#define RC32_CTRL_PD(x) (((uint32_t)(((uint32_t)(x)) << RC32_CTRL_PD_SHIFT)) & RC32_CTRL_PD_MASK)
#define RC32_CTRL_CODE_FR_EXT_MASK (0xFF0U)
#define RC32_CTRL_CODE_FR_EXT_SHIFT (4U)
/*! code_fr_ext - External code input for calibration.
 */
#define RC32_CTRL_CODE_FR_EXT(x) (((uint32_t)(((uint32_t)(x)) << RC32_CTRL_CODE_FR_EXT_SHIFT)) & RC32_CTRL_CODE_FR_EXT_MASK)
/*! @} */

/*! @name STATUS - Status Register */
/*! @{ */
#define RC32_STATUS_CLK_RDY_MASK (0x1U)
#define RC32_STATUS_CLK_RDY_SHIFT (0U)
/*! clk_rdy - Clock Ready
 */
#define RC32_STATUS_CLK_RDY(x) (((uint32_t)(((uint32_t)(x)) << RC32_STATUS_CLK_RDY_SHIFT)) & RC32_STATUS_CLK_RDY_MASK)
#define RC32_STATUS_CAL_DONE_MASK (0x2U)
#define RC32_STATUS_CAL_DONE_SHIFT (1U)
/*! cal_done - Calibration finish flag
 *  0b0..calibration not done
 *  0b1..calibration done
 */
#define RC32_STATUS_CAL_DONE(x) (((uint32_t)(((uint32_t)(x)) << RC32_STATUS_CAL_DONE_SHIFT)) & RC32_STATUS_CAL_DONE_MASK)
#define RC32_STATUS_CODE_FR_CAL_MASK (0x3FCU)
#define RC32_STATUS_CODE_FR_CAL_SHIFT (2U)
/*! code_fr_cal - Calibration code
 */
#define RC32_STATUS_CODE_FR_CAL(x) (((uint32_t)(((uint32_t)(x)) << RC32_STATUS_CODE_FR_CAL_SHIFT)) & RC32_STATUS_CODE_FR_CAL_MASK)
/*! @} */

/*! @name ISR - Interrupt Status Register */
/*! @{ */
#define RC32_ISR_CALDON_INT_MASK (0x1U)
#define RC32_ISR_CALDON_INT_SHIFT (0U)
/*! caldon_int - Calibration Done Interrupt
 */
#define RC32_ISR_CALDON_INT(x) (((uint32_t)(((uint32_t)(x)) << RC32_ISR_CALDON_INT_SHIFT)) & RC32_ISR_CALDON_INT_MASK)
#define RC32_ISR_CKRDY_INT_MASK (0x2U)
#define RC32_ISR_CKRDY_INT_SHIFT (1U)
/*! ckrdy_int - Clock Ready Interrupt
 */
#define RC32_ISR_CKRDY_INT(x) (((uint32_t)(((uint32_t)(x)) << RC32_ISR_CKRDY_INT_SHIFT)) & RC32_ISR_CKRDY_INT_MASK)
/*! @} */

/*! @name IMR - Interrupt Mask Register */
/*! @{ */
#define RC32_IMR_CALDON_INT_MSK_MASK (0x1U)
#define RC32_IMR_CALDON_INT_MSK_SHIFT (0U)
/*! caldon_int_msk - Calibration Done Interrupt Mask
 */
#define RC32_IMR_CALDON_INT_MSK(x) (((uint32_t)(((uint32_t)(x)) << RC32_IMR_CALDON_INT_MSK_SHIFT)) & RC32_IMR_CALDON_INT_MSK_MASK)
#define RC32_IMR_CKRDY_INT_MSK_MASK (0x2U)
#define RC32_IMR_CKRDY_INT_MSK_SHIFT (1U)
/*! ckrdy_int_msk - Clock Ready Interrupt Mask
 */
#define RC32_IMR_CKRDY_INT_MSK(x) (((uint32_t)(((uint32_t)(x)) << RC32_IMR_CKRDY_INT_MSK_SHIFT)) & RC32_IMR_CKRDY_INT_MSK_MASK)
/*! @} */

/*! @name IRSR - Interrupt Raw Status Register */
/*! @{ */
#define RC32_IRSR_CALDON_INT_RAW_MASK (0x1U)
#define RC32_IRSR_CALDON_INT_RAW_SHIFT (0U)
/*! caldon_int_raw - Calibration Done Interrupt Raw
 */
#define RC32_IRSR_CALDON_INT_RAW(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << RC32_IRSR_CALDON_INT_RAW_SHIFT)) & RC32_IRSR_CALDON_INT_RAW_MASK)
#define RC32_IRSR_CKRDY_INT_RAW_MASK (0x2U)
#define RC32_IRSR_CKRDY_INT_RAW_SHIFT (1U)
/*! ckrdy_int_raw - Clock Ready Interrupt Raw
 */
#define RC32_IRSR_CKRDY_INT_RAW(x) (((uint32_t)(((uint32_t)(x)) << RC32_IRSR_CKRDY_INT_RAW_SHIFT)) & RC32_IRSR_CKRDY_INT_RAW_MASK)
/*! @} */

/*! @name ICR - Interrupt Clear Register */
/*! @{ */
#define RC32_ICR_CALDON_INT_CLR_MASK (0x1U)
#define RC32_ICR_CALDON_INT_CLR_SHIFT (0U)
/*! caldon_int_clr - Calibration Done Interrupt Raw
 */
#define RC32_ICR_CALDON_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << RC32_ICR_CALDON_INT_CLR_SHIFT)) & RC32_ICR_CALDON_INT_CLR_MASK)
#define RC32_ICR_CKRDY_INT_CLR_MASK (0x2U)
#define RC32_ICR_CKRDY_INT_CLR_SHIFT (1U)
/*! ckrdy_int_clr - Clock Ready Interrupt Clear
 */
#define RC32_ICR_CKRDY_INT_CLR(x) (((uint32_t)(((uint32_t)(x)) << RC32_ICR_CKRDY_INT_CLR_SHIFT)) & RC32_ICR_CKRDY_INT_CLR_MASK)
/*! @} */

/*! @name CLK - Clock Register */
/*! @{ */
#define RC32_CLK_REF_SEL_MASK (0x4U)
#define RC32_CLK_REF_SEL_SHIFT (2U)
/*! ref_sel - Reference clock frequency select.
 *  0b0..Half-divided reference clock
 *  0b1..Original reference clock
 */
#define RC32_CLK_REF_SEL(x) (((uint32_t)(((uint32_t)(x)) << RC32_CLK_REF_SEL_SHIFT)) & RC32_CLK_REF_SEL_MASK)
#define RC32_CLK_SOFT_CLK_RST_MASK (0x8U)
#define RC32_CLK_SOFT_CLK_RST_SHIFT (3U)
/*! soft_clk_rst - Soft reset for clock divider
 *  0b0..No action
 *  0b1..
 */
#define RC32_CLK_SOFT_CLK_RST(x) (((uint32_t)(((uint32_t)(x)) << RC32_CLK_SOFT_CLK_RST_SHIFT)) & RC32_CLK_SOFT_CLK_RST_MASK)
/*! @} */

/*! @name RST - Soft Reset Register */
/*! @{ */
#define RC32_RST_SOFT_RST_MASK (0x1U)
#define RC32_RST_SOFT_RST_SHIFT (0U)
/*! soft_rst - Soft reset for module, active high
 *  0b0..No action
 *  0b1..
 */
#define RC32_RST_SOFT_RST(x) (((uint32_t)(((uint32_t)(x)) << RC32_RST_SOFT_RST_SHIFT)) & RC32_RST_SOFT_RST_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group RC32_Register_Masks */

/* RC32 - Peripheral instance base addresses */
/** Peripheral RC32 base address */
#define RC32_BASE (0x460A0000u)
/** Peripheral RC32 base pointer */
#define RC32 ((RC32_Type *) RC32_BASE)
/** Array initializer of RC32 peripheral base addresses */
#define RC32_BASE_ADDRS                                                                                                            \
    {                                                                                                                              \
        RC32_BASE                                                                                                                  \
    }
/** Array initializer of RC32 peripheral base pointers */
#define RC32_BASE_PTRS                                                                                                             \
    {                                                                                                                              \
        RC32                                                                                                                       \
    }
/** Interrupt vectors for the RC32 peripheral type */
#define RC32_IRQS                                                                                                                  \
    {                                                                                                                              \
        RC32M_IRQn                                                                                                                 \
    }

/*!
 * @}
 */ /* end of group RC32_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- RTC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTC_Peripheral_Access_Layer RTC Peripheral Access Layer
 * @{
 */

/** RTC - Register Layout Typedef */
typedef struct
{
    __IO uint32_t CNT_EN_REG; /**< Counter Enable Register, offset: 0x0 */
    uint8_t RESERVED_0[28];
    __IO uint32_t INT_RAW_REG; /**< Interrupt Raw Register, offset: 0x20 */
    __I uint32_t INT_REG;      /**< Interrupt Register, offset: 0x24 */
    __IO uint32_t INT_MSK_REG; /**< Interrupt Mask Register, offset: 0x28 */
    uint8_t RESERVED_1[20];
    __IO uint32_t CNT_CNTL_REG; /**< Counter Control Register, offset: 0x40 */
    uint8_t RESERVED_2[12];
    __I uint32_t CNT_VAL_REG; /**< Counter Value Register, offset: 0x50 */
    uint8_t RESERVED_3[12];
    __IO uint32_t CNT_UPP_VAL_REG; /**< Counter Upper Value Register, offset: 0x60 */
    uint8_t RESERVED_4[12];
    __IO uint32_t CNT_ALARM_VAL_REG; /**< Counter Alarm Value Register, offset: 0x70 */
    uint8_t RESERVED_5[12];
    __IO uint32_t CLK_CNTL_REG; /**< Clock control register, offset: 0x80 */
} RTC_Type;

/* ----------------------------------------------------------------------------
   -- RTC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RTC_Register_Masks RTC Register Masks
 * @{
 */

/*! @name CNT_EN_REG - Counter Enable Register */
/*! @{ */
#define RTC_CNT_EN_REG_CNT_START_MASK (0x1U)
#define RTC_CNT_EN_REG_CNT_START_SHIFT (0U)
/*! CNT_START - Counter Enable
 *  0b0..No action
 *  0b1..Enable the counter (poll CNT_RUN for 1 to confirm that the counter is enabled internally)
 */
#define RTC_CNT_EN_REG_CNT_START(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << RTC_CNT_EN_REG_CNT_START_SHIFT)) & RTC_CNT_EN_REG_CNT_START_MASK)
#define RTC_CNT_EN_REG_CNT_STOP_MASK (0x2U)
#define RTC_CNT_EN_REG_CNT_STOP_SHIFT (1U)
/*! CNT_STOP - Counter Disable
 *  0b0..No action
 *  0b1..Disable the counter (poll CNT_RUN for 0 to confirm that the counter is disabled internally)
 */
#define RTC_CNT_EN_REG_CNT_STOP(x) (((uint32_t)(((uint32_t)(x)) << RTC_CNT_EN_REG_CNT_STOP_SHIFT)) & RTC_CNT_EN_REG_CNT_STOP_MASK)
#define RTC_CNT_EN_REG_CNT_RESET_MASK (0x4U)
#define RTC_CNT_EN_REG_CNT_RESET_SHIFT (2U)
/*! CNT_RESET - Counter Reset
 *  0b0..No action
 *  0b1..Reset the counter (counter is reset to 0; channel output states are reset to 0; poll CNT_RST_DONE for 1
 *       before writing to any other registers)
 */
#define RTC_CNT_EN_REG_CNT_RESET(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << RTC_CNT_EN_REG_CNT_RESET_SHIFT)) & RTC_CNT_EN_REG_CNT_RESET_MASK)
#define RTC_CNT_EN_REG_CNT_RUN_MASK (0x10000U)
#define RTC_CNT_EN_REG_CNT_RUN_SHIFT (16U)
/*! CNT_RUN - Counter Enabled Status
 *  0b0..Counter is disabled
 *  0b1..Counter is enabled
 */
#define RTC_CNT_EN_REG_CNT_RUN(x) (((uint32_t)(((uint32_t)(x)) << RTC_CNT_EN_REG_CNT_RUN_SHIFT)) & RTC_CNT_EN_REG_CNT_RUN_MASK)
#define RTC_CNT_EN_REG_CNT_RST_DONE_MASK (0x20000U)
#define RTC_CNT_EN_REG_CNT_RST_DONE_SHIFT (17U)
/*! CNT_RST_DONE - Counter Reset Done Status
 *  0b0..Indicates that the counter is still resetting
 *  0b1..Indicates that the counter has been reset
 */
#define RTC_CNT_EN_REG_CNT_RST_DONE(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << RTC_CNT_EN_REG_CNT_RST_DONE_SHIFT)) & RTC_CNT_EN_REG_CNT_RST_DONE_MASK)
#define RTC_CNT_EN_REG_STS_RESETN_MASK (0x40000U)
#define RTC_CNT_EN_REG_STS_RESETN_SHIFT (18U)
/*! STS_RESETN - System Reset Status
 *  0b0..Indicates that the system reset is still asserted
 *  0b1..Indicates that the system reset is deasserted
 */
#define RTC_CNT_EN_REG_STS_RESETN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << RTC_CNT_EN_REG_STS_RESETN_SHIFT)) & RTC_CNT_EN_REG_STS_RESETN_MASK)
/*! @} */

/*! @name INT_RAW_REG - Interrupt Raw Register */
/*! @{ */
#define RTC_INT_RAW_REG_CNT_ALARM_INT_MASK (0x8000U)
#define RTC_INT_RAW_REG_CNT_ALARM_INT_SHIFT (15U)
/*! CNT_ALARM_INT - Counter-Reach-Alarm Interrupt Status
 *  0b0..Status cleared
 *  0b1..Counter has reached ALARM_VAL
 */
#define RTC_INT_RAW_REG_CNT_ALARM_INT(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << RTC_INT_RAW_REG_CNT_ALARM_INT_SHIFT)) & RTC_INT_RAW_REG_CNT_ALARM_INT_MASK)
#define RTC_INT_RAW_REG_CNT_UPP_INT_MASK (0x10000U)
#define RTC_INT_RAW_REG_CNT_UPP_INT_SHIFT (16U)
/*! CNT_UPP_INT - Counter-Reach-Upper Interrupt Status
 *  0b0..Status cleared
 *  0b1..Counter has reached UPP_VAL
 */
#define RTC_INT_RAW_REG_CNT_UPP_INT(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << RTC_INT_RAW_REG_CNT_UPP_INT_SHIFT)) & RTC_INT_RAW_REG_CNT_UPP_INT_MASK)
/*! @} */

/*! @name INT_REG - Interrupt Register */
/*! @{ */
#define RTC_INT_REG_CNT_ALARM_INTR_MASK (0x8000U)
#define RTC_INT_REG_CNT_ALARM_INTR_SHIFT (15U)
/*! CNT_ALARM_INTR - Masked Signal of CNT_ALARM_INT
 */
#define RTC_INT_REG_CNT_ALARM_INTR(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << RTC_INT_REG_CNT_ALARM_INTR_SHIFT)) & RTC_INT_REG_CNT_ALARM_INTR_MASK)
#define RTC_INT_REG_CNT_UPP_INTR_MASK (0x10000U)
#define RTC_INT_REG_CNT_UPP_INTR_SHIFT (16U)
/*! CNT_UPP_INTR - Masked Signal of CNT_UPP_INT
 */
#define RTC_INT_REG_CNT_UPP_INTR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << RTC_INT_REG_CNT_UPP_INTR_SHIFT)) & RTC_INT_REG_CNT_UPP_INTR_MASK)
/*! @} */

/*! @name INT_MSK_REG - Interrupt Mask Register */
/*! @{ */
#define RTC_INT_MSK_REG_CNT_ALARM_MSK_MASK (0x8000U)
#define RTC_INT_MSK_REG_CNT_ALARM_MSK_SHIFT (15U)
/*! CNT_ALARM_MSK - CNT_ALARM_INT Interrupt Mask
 *  0b0..Do not mask CNT_ALARM_INT
 *  0b1..Mask interrupt CNT_ALARM_INT
 */
#define RTC_INT_MSK_REG_CNT_ALARM_MSK(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << RTC_INT_MSK_REG_CNT_ALARM_MSK_SHIFT)) & RTC_INT_MSK_REG_CNT_ALARM_MSK_MASK)
#define RTC_INT_MSK_REG_CNT_UPP_MSK_MASK (0x10000U)
#define RTC_INT_MSK_REG_CNT_UPP_MSK_SHIFT (16U)
/*! CNT_UPP_MSK - CNT_UPP_INT Interrupt Mask
 *  0b0..Do not mask CNT_UPP_INT
 *  0b1..Mask interrupt CNT_UPP_INT
 */
#define RTC_INT_MSK_REG_CNT_UPP_MSK(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << RTC_INT_MSK_REG_CNT_UPP_MSK_SHIFT)) & RTC_INT_MSK_REG_CNT_UPP_MSK_MASK)
/*! @} */

/*! @name CNT_CNTL_REG - Counter Control Register */
/*! @{ */
#define RTC_CNT_CNTL_REG_CNT_DBG_ACT_MASK (0x10U)
#define RTC_CNT_CNTL_REG_CNT_DBG_ACT_SHIFT (4U)
/*! CNT_DBG_ACT - Counter Debug Mode Action Mask
 *  0b0..In debug mode, stop the counters
 *  0b1..In debug mode, counters are not affected
 */
#define RTC_CNT_CNTL_REG_CNT_DBG_ACT(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << RTC_CNT_CNTL_REG_CNT_DBG_ACT_SHIFT)) & RTC_CNT_CNTL_REG_CNT_DBG_ACT_MASK)
#define RTC_CNT_CNTL_REG_CNT_UPDT_MOD_MASK (0x300U)
#define RTC_CNT_CNTL_REG_CNT_UPDT_MOD_SHIFT (8U)
/*! CNT_UPDT_MOD - Counter Update Mode
 *  0b00..Update off
 *  0b01..Reserved.
 *  0b10..Auto-update (use when counter clock is at least 5 times slower than the register bus clock)
 *  0b11..Reserved
 */
#define RTC_CNT_CNTL_REG_CNT_UPDT_MOD(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << RTC_CNT_CNTL_REG_CNT_UPDT_MOD_SHIFT)) & RTC_CNT_CNTL_REG_CNT_UPDT_MOD_MASK)
/*! @} */

/*! @name CNT_VAL_REG - Counter Value Register */
/*! @{ */
#define RTC_CNT_VAL_REG_CNT_VAL_MASK (0xFFFFFFFFU)
#define RTC_CNT_VAL_REG_CNT_VAL_SHIFT (0U)
/*! CNT_VAL - Counter Value
 */
#define RTC_CNT_VAL_REG_CNT_VAL(x) (((uint32_t)(((uint32_t)(x)) << RTC_CNT_VAL_REG_CNT_VAL_SHIFT)) & RTC_CNT_VAL_REG_CNT_VAL_MASK)
/*! @} */

/*! @name CNT_UPP_VAL_REG - Counter Upper Value Register */
/*! @{ */
#define RTC_CNT_UPP_VAL_REG_UPP_VAL_MASK (0xFFFFFFFFU)
#define RTC_CNT_UPP_VAL_REG_UPP_VAL_SHIFT (0U)
/*! UPP_VAL - Counter Upper Value
 */
#define RTC_CNT_UPP_VAL_REG_UPP_VAL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << RTC_CNT_UPP_VAL_REG_UPP_VAL_SHIFT)) & RTC_CNT_UPP_VAL_REG_UPP_VAL_MASK)
/*! @} */

/*! @name CNT_ALARM_VAL_REG - Counter Alarm Value Register */
/*! @{ */
#define RTC_CNT_ALARM_VAL_REG_ALARM_VAL_MASK (0xFFFFFFFFU)
#define RTC_CNT_ALARM_VAL_REG_ALARM_VAL_SHIFT (0U)
/*! ALARM_VAL - Counter Alarm Value
 */
#define RTC_CNT_ALARM_VAL_REG_ALARM_VAL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << RTC_CNT_ALARM_VAL_REG_ALARM_VAL_SHIFT)) & RTC_CNT_ALARM_VAL_REG_ALARM_VAL_MASK)
/*! @} */

/*! @name CLK_CNTL_REG - Clock control register */
/*! @{ */
#define RTC_CLK_CNTL_REG_CLK_DIV_MASK (0xF00U)
#define RTC_CLK_CNTL_REG_CLK_DIV_SHIFT (8U)
/*! CLK_DIV - Clock Divider
 */
#define RTC_CLK_CNTL_REG_CLK_DIV(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << RTC_CLK_CNTL_REG_CLK_DIV_SHIFT)) & RTC_CLK_CNTL_REG_CLK_DIV_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group RTC_Register_Masks */

/* RTC - Peripheral instance base addresses */
/** Peripheral RTC base address */
#define RTC_BASE (0x48090000u)
/** Peripheral RTC base pointer */
#define RTC ((RTC_Type *) RTC_BASE)
/** Array initializer of RTC peripheral base addresses */
#define RTC_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        RTC_BASE                                                                                                                   \
    }
/** Array initializer of RTC peripheral base pointers */
#define RTC_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        RTC                                                                                                                        \
    }
/** Interrupt vectors for the RTC peripheral type */
#define RTC_IRQS                                                                                                                   \
    {                                                                                                                              \
        RTC_IRQn                                                                                                                   \
    }

/*!
 * @}
 */ /* end of group RTC_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- SDIOC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDIOC_Peripheral_Access_Layer SDIOC Peripheral Access Layer
 * @{
 */

/** SDIOC - Register Layout Typedef */
typedef struct
{
    __IO uint32_t MM4_SYSADDR;   /**< MMC4 System Address Register, offset: 0x0 */
    __IO uint32_t MM4_BLK_CNTL;  /**< MMC4 Block Control Register, offset: 0x4 */
    __IO uint32_t MM4_ARG;       /**< MMC4 Command Argument Register, offset: 0x8 */
    __IO uint32_t MM4_CMD_XFRMD; /**< MMC4 Command and Transfer Mode Register, offset: 0xC */
    __I uint32_t MM4_RESP0;      /**< MMC4 Command Response Register0, offset: 0x10 */
    __I uint32_t MM4_RESP1;      /**< MMC4 Command Response Register1, offset: 0x14 */
    __I uint32_t MM4_RESP2;      /**< MMC4 Command Response Register2, offset: 0x18 */
    __I uint32_t MM4_RESP3;      /**< MMC4 Command Response Register3, offset: 0x1C */
    __IO uint32_t MM4_DP;        /**< MMC4 Buffer Data Port Register, offset: 0x20 */
    __I uint32_t MM4_STATE;      /**< MMC4 Present State Register, offset: 0x24 */
    __IO uint32_t MM4_CNTL1;     /**< MMC4 Host Control Register 1, offset: 0x28 */
    __IO uint32_t MM4_CNTL2;     /**< MMC4 Host Control Register 2, offset: 0x2C */
    __IO uint32_t MM4_I_STAT;    /**< Align Detection Timeout Value Register, offset: 0x30 */
    __IO uint32_t MM4_I_STAT_EN; /**< MMC4 Interrupt Status Enable Register, offset: 0x34 */
    __IO uint32_t MM4_I_SIG_EN;  /**< MMC4 Interrupt Signal Enable Register, offset: 0x38 */
    __I uint32_t MM4_ACMD12_ER;  /**< MMC4 Auto CMD12 Error Status Register, offset: 0x3C */
    __I uint32_t MM4_CAP0;       /**< MMC4 Capabilities Register 0, offset: 0x40 */
    uint8_t RESERVED_0[4];
    __I uint32_t MM4_CUR_CAP0; /**< MMC4 Maximum Current Capabilities Register 0, offset: 0x48 */
    uint8_t RESERVED_1[176];
    __I uint32_t MM4_VER; /**< MMC4 Controller Version Status, offset: 0xFC */
} SDIOC_Type;

/* ----------------------------------------------------------------------------
   -- SDIOC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDIOC_Register_Masks SDIOC Register Masks
 * @{
 */

/*! @name MM4_SYSADDR - MMC4 System Address Register */
/*! @{ */
#define SDIOC_MM4_SYSADDR_SYSADDR_MASK (0xFFFFFFFFU)
#define SDIOC_MM4_SYSADDR_SYSADDR_SHIFT (0U)
/*! SYSADDR - SYSADDR
 */
#define SDIOC_MM4_SYSADDR_SYSADDR(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_SYSADDR_SYSADDR_SHIFT)) & SDIOC_MM4_SYSADDR_SYSADDR_MASK)
/*! @} */

/*! @name MM4_BLK_CNTL - MMC4 Block Control Register */
/*! @{ */
#define SDIOC_MM4_BLK_CNTL_XFR_BLKSZ_MASK (0xFFFU)
#define SDIOC_MM4_BLK_CNTL_XFR_BLKSZ_SHIFT (0U)
/*! XFR_BLKSZ - XFR_BLKSZ
 */
#define SDIOC_MM4_BLK_CNTL_XFR_BLKSZ(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_BLK_CNTL_XFR_BLKSZ_SHIFT)) & SDIOC_MM4_BLK_CNTL_XFR_BLKSZ_MASK)
#define SDIOC_MM4_BLK_CNTL_DMA_BUFSZ_MASK (0x7000U)
#define SDIOC_MM4_BLK_CNTL_DMA_BUFSZ_SHIFT (12U)
/*! DMA_BUFSZ - DMA_BUFSZ
 */
#define SDIOC_MM4_BLK_CNTL_DMA_BUFSZ(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_BLK_CNTL_DMA_BUFSZ_SHIFT)) & SDIOC_MM4_BLK_CNTL_DMA_BUFSZ_MASK)
#define SDIOC_MM4_BLK_CNTL_BLK_CNT_MASK (0xFFFF0000U)
#define SDIOC_MM4_BLK_CNTL_BLK_CNT_SHIFT (16U)
/*! BLK_CNT - BLK_CNT
 */
#define SDIOC_MM4_BLK_CNTL_BLK_CNT(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_BLK_CNTL_BLK_CNT_SHIFT)) & SDIOC_MM4_BLK_CNTL_BLK_CNT_MASK)
/*! @} */

/*! @name MM4_ARG - MMC4 Command Argument Register */
/*! @{ */
#define SDIOC_MM4_ARG_ARG_MASK (0xFFFFFFFFU)
#define SDIOC_MM4_ARG_ARG_SHIFT (0U)
/*! ARG - ARG
 */
#define SDIOC_MM4_ARG_ARG(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_ARG_ARG_SHIFT)) & SDIOC_MM4_ARG_ARG_MASK)
/*! @} */

/*! @name MM4_CMD_XFRMD - MMC4 Command and Transfer Mode Register */
/*! @{ */
#define SDIOC_MM4_CMD_XFRMD_DMA_EN_MASK (0x1U)
#define SDIOC_MM4_CMD_XFRMD_DMA_EN_SHIFT (0U)
/*! DMA_EN - DMA_EN
 */
#define SDIOC_MM4_CMD_XFRMD_DMA_EN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_DMA_EN_SHIFT)) & SDIOC_MM4_CMD_XFRMD_DMA_EN_MASK)
#define SDIOC_MM4_CMD_XFRMD_BLKCNTEN_MASK (0x2U)
#define SDIOC_MM4_CMD_XFRMD_BLKCNTEN_SHIFT (1U)
/*! BLKCNTEN - BLKCNTEN
 */
#define SDIOC_MM4_CMD_XFRMD_BLKCNTEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_BLKCNTEN_SHIFT)) & SDIOC_MM4_CMD_XFRMD_BLKCNTEN_MASK)
#define SDIOC_MM4_CMD_XFRMD_AUTOCMD12_MASK (0x4U)
#define SDIOC_MM4_CMD_XFRMD_AUTOCMD12_SHIFT (2U)
/*! AUTOCMD12 - AUTOCMD12
 */
#define SDIOC_MM4_CMD_XFRMD_AUTOCMD12(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_AUTOCMD12_SHIFT)) & SDIOC_MM4_CMD_XFRMD_AUTOCMD12_MASK)
#define SDIOC_MM4_CMD_XFRMD_DXFRDIR_MASK (0x10U)
#define SDIOC_MM4_CMD_XFRMD_DXFRDIR_SHIFT (4U)
/*! DXFRDIR - DXFRDIR
 */
#define SDIOC_MM4_CMD_XFRMD_DXFRDIR(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_DXFRDIR_SHIFT)) & SDIOC_MM4_CMD_XFRMD_DXFRDIR_MASK)
#define SDIOC_MM4_CMD_XFRMD_MS_BLKSEL_MASK (0x20U)
#define SDIOC_MM4_CMD_XFRMD_MS_BLKSEL_SHIFT (5U)
/*! MS_BLKSEL - MS_BLKSEL
 */
#define SDIOC_MM4_CMD_XFRMD_MS_BLKSEL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_MS_BLKSEL_SHIFT)) & SDIOC_MM4_CMD_XFRMD_MS_BLKSEL_MASK)
#define SDIOC_MM4_CMD_XFRMD_CMD_COMP_ATA_MASK (0x40U)
#define SDIOC_MM4_CMD_XFRMD_CMD_COMP_ATA_SHIFT (6U)
/*! CMD_COMP_ATA - CMD_COMP_ATA
 */
#define SDIOC_MM4_CMD_XFRMD_CMD_COMP_ATA(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_CMD_COMP_ATA_SHIFT)) & SDIOC_MM4_CMD_XFRMD_CMD_COMP_ATA_MASK)
#define SDIOC_MM4_CMD_XFRMD_RES_TYPE_MASK (0x30000U)
#define SDIOC_MM4_CMD_XFRMD_RES_TYPE_SHIFT (16U)
/*! RES_TYPE - RES_TYPE
 */
#define SDIOC_MM4_CMD_XFRMD_RES_TYPE(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_RES_TYPE_SHIFT)) & SDIOC_MM4_CMD_XFRMD_RES_TYPE_MASK)
#define SDIOC_MM4_CMD_XFRMD_CRCCHKEN_MASK (0x80000U)
#define SDIOC_MM4_CMD_XFRMD_CRCCHKEN_SHIFT (19U)
/*! CRCCHKEN - CRCCHKEN
 */
#define SDIOC_MM4_CMD_XFRMD_CRCCHKEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_CRCCHKEN_SHIFT)) & SDIOC_MM4_CMD_XFRMD_CRCCHKEN_MASK)
#define SDIOC_MM4_CMD_XFRMD_IDXCHKEN_MASK (0x100000U)
#define SDIOC_MM4_CMD_XFRMD_IDXCHKEN_SHIFT (20U)
/*! IDXCHKEN - IDXCHKEN
 */
#define SDIOC_MM4_CMD_XFRMD_IDXCHKEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_IDXCHKEN_SHIFT)) & SDIOC_MM4_CMD_XFRMD_IDXCHKEN_MASK)
#define SDIOC_MM4_CMD_XFRMD_DPSEL_MASK (0x200000U)
#define SDIOC_MM4_CMD_XFRMD_DPSEL_SHIFT (21U)
/*! DPSEL - DPSEL
 */
#define SDIOC_MM4_CMD_XFRMD_DPSEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_DPSEL_SHIFT)) & SDIOC_MM4_CMD_XFRMD_DPSEL_MASK)
#define SDIOC_MM4_CMD_XFRMD_CMD_TYPE_MASK (0xC00000U)
#define SDIOC_MM4_CMD_XFRMD_CMD_TYPE_SHIFT (22U)
/*! CMD_TYPE - CMD_TYPE
 */
#define SDIOC_MM4_CMD_XFRMD_CMD_TYPE(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_CMD_TYPE_SHIFT)) & SDIOC_MM4_CMD_XFRMD_CMD_TYPE_MASK)
#define SDIOC_MM4_CMD_XFRMD_CMD_IDX_MASK (0x3F000000U)
#define SDIOC_MM4_CMD_XFRMD_CMD_IDX_SHIFT (24U)
/*! CMD_IDX - CMD_IDX
 */
#define SDIOC_MM4_CMD_XFRMD_CMD_IDX(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CMD_XFRMD_CMD_IDX_SHIFT)) & SDIOC_MM4_CMD_XFRMD_CMD_IDX_MASK)
/*! @} */

/*! @name MM4_RESP0 - MMC4 Command Response Register0 */
/*! @{ */
#define SDIOC_MM4_RESP0_RESP_31_0_MASK (0xFFFFFFFFU)
#define SDIOC_MM4_RESP0_RESP_31_0_SHIFT (0U)
/*! RESP_31_0 - RESP[31:0]
 */
#define SDIOC_MM4_RESP0_RESP_31_0(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_RESP0_RESP_31_0_SHIFT)) & SDIOC_MM4_RESP0_RESP_31_0_MASK)
/*! @} */

/*! @name MM4_RESP1 - MMC4 Command Response Register1 */
/*! @{ */
#define SDIOC_MM4_RESP1_RESP_63_32_MASK (0xFFFFFFFFU)
#define SDIOC_MM4_RESP1_RESP_63_32_SHIFT (0U)
/*! RESP_63_32 - RESP[63:32]
 */
#define SDIOC_MM4_RESP1_RESP_63_32(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_RESP1_RESP_63_32_SHIFT)) & SDIOC_MM4_RESP1_RESP_63_32_MASK)
/*! @} */

/*! @name MM4_RESP2 - MMC4 Command Response Register2 */
/*! @{ */
#define SDIOC_MM4_RESP2_RESP_95_64_MASK (0xFFFFFFFFU)
#define SDIOC_MM4_RESP2_RESP_95_64_SHIFT (0U)
/*! RESP_95_64 - RESP[95:64]
 */
#define SDIOC_MM4_RESP2_RESP_95_64(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_RESP2_RESP_95_64_SHIFT)) & SDIOC_MM4_RESP2_RESP_95_64_MASK)
/*! @} */

/*! @name MM4_RESP3 - MMC4 Command Response Register3 */
/*! @{ */
#define SDIOC_MM4_RESP3_RESP_127_96_MASK (0xFFFFFFFFU)
#define SDIOC_MM4_RESP3_RESP_127_96_SHIFT (0U)
/*! RESP_127_96 - RESP[127:96]
 */
#define SDIOC_MM4_RESP3_RESP_127_96(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_RESP3_RESP_127_96_SHIFT)) & SDIOC_MM4_RESP3_RESP_127_96_MASK)
/*! @} */

/*! @name MM4_DP - MMC4 Buffer Data Port Register */
/*! @{ */
#define SDIOC_MM4_DP_BFR_DATA_MASK (0xFFFFFFFFU)
#define SDIOC_MM4_DP_BFR_DATA_SHIFT (0U)
/*! BFR_DATA - BFR_DATA
 */
#define SDIOC_MM4_DP_BFR_DATA(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_DP_BFR_DATA_SHIFT)) & SDIOC_MM4_DP_BFR_DATA_MASK)
/*! @} */

/*! @name MM4_STATE - MMC4 Present State Register */
/*! @{ */
#define SDIOC_MM4_STATE_CCMDINHBT_MASK (0x1U)
#define SDIOC_MM4_STATE_CCMDINHBT_SHIFT (0U)
/*! CCMDINHBT - CCMDINHBT
 */
#define SDIOC_MM4_STATE_CCMDINHBT(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_CCMDINHBT_SHIFT)) & SDIOC_MM4_STATE_CCMDINHBT_MASK)
#define SDIOC_MM4_STATE_DCMDINHBT_MASK (0x2U)
#define SDIOC_MM4_STATE_DCMDINHBT_SHIFT (1U)
/*! DCMDINHBT - DCMDINHBT
 */
#define SDIOC_MM4_STATE_DCMDINHBT(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_DCMDINHBT_SHIFT)) & SDIOC_MM4_STATE_DCMDINHBT_MASK)
#define SDIOC_MM4_STATE_DATACTV_MASK (0x4U)
#define SDIOC_MM4_STATE_DATACTV_SHIFT (2U)
/*! DATACTV - DATACTV
 */
#define SDIOC_MM4_STATE_DATACTV(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_DATACTV_SHIFT)) & SDIOC_MM4_STATE_DATACTV_MASK)
#define SDIOC_MM4_STATE_WRACTV_MASK (0x100U)
#define SDIOC_MM4_STATE_WRACTV_SHIFT (8U)
/*! WRACTV - WRACTV
 */
#define SDIOC_MM4_STATE_WRACTV(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_WRACTV_SHIFT)) & SDIOC_MM4_STATE_WRACTV_MASK)
#define SDIOC_MM4_STATE_RDACTV_MASK (0x200U)
#define SDIOC_MM4_STATE_RDACTV_SHIFT (9U)
/*! RDACTV - RDACTV
 */
#define SDIOC_MM4_STATE_RDACTV(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_RDACTV_SHIFT)) & SDIOC_MM4_STATE_RDACTV_MASK)
#define SDIOC_MM4_STATE_BUFWREN_MASK (0x400U)
#define SDIOC_MM4_STATE_BUFWREN_SHIFT (10U)
/*! BUFWREN - BUFWREN
 */
#define SDIOC_MM4_STATE_BUFWREN(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_BUFWREN_SHIFT)) & SDIOC_MM4_STATE_BUFWREN_MASK)
#define SDIOC_MM4_STATE_BUFRDEN_MASK (0x800U)
#define SDIOC_MM4_STATE_BUFRDEN_SHIFT (11U)
/*! BUFRDEN - BUFRDEN
 */
#define SDIOC_MM4_STATE_BUFRDEN(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_BUFRDEN_SHIFT)) & SDIOC_MM4_STATE_BUFRDEN_MASK)
#define SDIOC_MM4_STATE_CDINSTD_MASK (0x10000U)
#define SDIOC_MM4_STATE_CDINSTD_SHIFT (16U)
/*! CDINSTD - CDINSTD
 */
#define SDIOC_MM4_STATE_CDINSTD(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_CDINSTD_SHIFT)) & SDIOC_MM4_STATE_CDINSTD_MASK)
#define SDIOC_MM4_STATE_CDSTBL_MASK (0x20000U)
#define SDIOC_MM4_STATE_CDSTBL_SHIFT (17U)
/*! CDSTBL - CDSTBL
 */
#define SDIOC_MM4_STATE_CDSTBL(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_CDSTBL_SHIFT)) & SDIOC_MM4_STATE_CDSTBL_MASK)
#define SDIOC_MM4_STATE_CDDETLVL_MASK (0x40000U)
#define SDIOC_MM4_STATE_CDDETLVL_SHIFT (18U)
/*! CDDETLVL - CDDETLVL
 */
#define SDIOC_MM4_STATE_CDDETLVL(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_CDDETLVL_SHIFT)) & SDIOC_MM4_STATE_CDDETLVL_MASK)
#define SDIOC_MM4_STATE_WPSWLVL_MASK (0x80000U)
#define SDIOC_MM4_STATE_WPSWLVL_SHIFT (19U)
/*! WPSWLVL - WPSWLVL
 */
#define SDIOC_MM4_STATE_WPSWLVL(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_WPSWLVL_SHIFT)) & SDIOC_MM4_STATE_WPSWLVL_MASK)
#define SDIOC_MM4_STATE_LWRDATLVL_MASK (0xF00000U)
#define SDIOC_MM4_STATE_LWRDATLVL_SHIFT (20U)
/*! LWRDATLVL - LWRDATLVL
 */
#define SDIOC_MM4_STATE_LWRDATLVL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_LWRDATLVL_SHIFT)) & SDIOC_MM4_STATE_LWRDATLVL_MASK)
#define SDIOC_MM4_STATE_CMDLVL_MASK (0x1000000U)
#define SDIOC_MM4_STATE_CMDLVL_SHIFT (24U)
/*! CMDLVL - CMDLVL
 */
#define SDIOC_MM4_STATE_CMDLVL(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_CMDLVL_SHIFT)) & SDIOC_MM4_STATE_CMDLVL_MASK)
#define SDIOC_MM4_STATE_UPRDATLVL_MASK (0x1E000000U)
#define SDIOC_MM4_STATE_UPRDATLVL_SHIFT (25U)
/*! UPRDATLVL - UPRDATLVL
 */
#define SDIOC_MM4_STATE_UPRDATLVL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_STATE_UPRDATLVL_SHIFT)) & SDIOC_MM4_STATE_UPRDATLVL_MASK)
/*! @} */

/*! @name MM4_CNTL1 - MMC4 Host Control Register 1 */
/*! @{ */
#define SDIOC_MM4_CNTL1_LEDCNTL_MASK (0x1U)
#define SDIOC_MM4_CNTL1_LEDCNTL_SHIFT (0U)
/*! LEDCNTL - LEDCNTL
 */
#define SDIOC_MM4_CNTL1_LEDCNTL(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1_LEDCNTL_SHIFT)) & SDIOC_MM4_CNTL1_LEDCNTL_MASK)
#define SDIOC_MM4_CNTL1__4BITMD_MASK (0x2U)
#define SDIOC_MM4_CNTL1__4BITMD_SHIFT (1U)
/*! _4BITMD - 4BITMD
 */
#define SDIOC_MM4_CNTL1__4BITMD(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1__4BITMD_SHIFT)) & SDIOC_MM4_CNTL1__4BITMD_MASK)
#define SDIOC_MM4_CNTL1_HISPEED_MASK (0x4U)
#define SDIOC_MM4_CNTL1_HISPEED_SHIFT (2U)
/*! HISPEED - HISPEED
 */
#define SDIOC_MM4_CNTL1_HISPEED(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1_HISPEED_SHIFT)) & SDIOC_MM4_CNTL1_HISPEED_MASK)
#define SDIOC_MM4_CNTL1__8BITMD_MASK (0x20U)
#define SDIOC_MM4_CNTL1__8BITMD_SHIFT (5U)
/*! _8BITMD - 8BITMD
 */
#define SDIOC_MM4_CNTL1__8BITMD(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1__8BITMD_SHIFT)) & SDIOC_MM4_CNTL1__8BITMD_MASK)
#define SDIOC_MM4_CNTL1_BUSPWR_MASK (0x100U)
#define SDIOC_MM4_CNTL1_BUSPWR_SHIFT (8U)
/*! BUSPWR - BUSPWR
 */
#define SDIOC_MM4_CNTL1_BUSPWR(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1_BUSPWR_SHIFT)) & SDIOC_MM4_CNTL1_BUSPWR_MASK)
#define SDIOC_MM4_CNTL1_VLTGSEL_MASK (0xE00U)
#define SDIOC_MM4_CNTL1_VLTGSEL_SHIFT (9U)
/*! VLTGSEL - VLTGSEL
 */
#define SDIOC_MM4_CNTL1_VLTGSEL(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1_VLTGSEL_SHIFT)) & SDIOC_MM4_CNTL1_VLTGSEL_MASK)
#define SDIOC_MM4_CNTL1_BGREQSTP_MASK (0x10000U)
#define SDIOC_MM4_CNTL1_BGREQSTP_SHIFT (16U)
/*! BGREQSTP - BGREQSTP
 */
#define SDIOC_MM4_CNTL1_BGREQSTP(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1_BGREQSTP_SHIFT)) & SDIOC_MM4_CNTL1_BGREQSTP_MASK)
#define SDIOC_MM4_CNTL1_CONTREQ_MASK (0x20000U)
#define SDIOC_MM4_CNTL1_CONTREQ_SHIFT (17U)
/*! CONTREQ - CONTREQ
 */
#define SDIOC_MM4_CNTL1_CONTREQ(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1_CONTREQ_SHIFT)) & SDIOC_MM4_CNTL1_CONTREQ_MASK)
#define SDIOC_MM4_CNTL1_RDWTCNTL_MASK (0x40000U)
#define SDIOC_MM4_CNTL1_RDWTCNTL_SHIFT (18U)
/*! RDWTCNTL - RDWTCNTL
 */
#define SDIOC_MM4_CNTL1_RDWTCNTL(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1_RDWTCNTL_SHIFT)) & SDIOC_MM4_CNTL1_RDWTCNTL_MASK)
#define SDIOC_MM4_CNTL1_BGIRQEN_MASK (0x80000U)
#define SDIOC_MM4_CNTL1_BGIRQEN_SHIFT (19U)
/*! BGIRQEN - BGIRQEN
 */
#define SDIOC_MM4_CNTL1_BGIRQEN(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL1_BGIRQEN_SHIFT)) & SDIOC_MM4_CNTL1_BGIRQEN_MASK)
/*! @} */

/*! @name MM4_CNTL2 - MMC4 Host Control Register 2 */
/*! @{ */
#define SDIOC_MM4_CNTL2_INTCLKEN_MASK (0x1U)
#define SDIOC_MM4_CNTL2_INTCLKEN_SHIFT (0U)
/*! INTCLKEN - INTCLKEN
 */
#define SDIOC_MM4_CNTL2_INTCLKEN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL2_INTCLKEN_SHIFT)) & SDIOC_MM4_CNTL2_INTCLKEN_MASK)
#define SDIOC_MM4_CNTL2_MM4CLKEN_MASK (0x4U)
#define SDIOC_MM4_CNTL2_MM4CLKEN_SHIFT (2U)
/*! MM4CLKEN - MM4CLKEN
 */
#define SDIOC_MM4_CNTL2_MM4CLKEN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL2_MM4CLKEN_SHIFT)) & SDIOC_MM4_CNTL2_MM4CLKEN_MASK)
#define SDIOC_MM4_CNTL2_SDFREQ_MASK (0xFF00U)
#define SDIOC_MM4_CNTL2_SDFREQ_SHIFT (8U)
/*! SDFREQ - SDFREQ
 */
#define SDIOC_MM4_CNTL2_SDFREQ(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL2_SDFREQ_SHIFT)) & SDIOC_MM4_CNTL2_SDFREQ_MASK)
#define SDIOC_MM4_CNTL2_DTOCNTR_MASK (0xF0000U)
#define SDIOC_MM4_CNTL2_DTOCNTR_SHIFT (16U)
/*! DTOCNTR - DTOCNTR
 */
#define SDIOC_MM4_CNTL2_DTOCNTR(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL2_DTOCNTR_SHIFT)) & SDIOC_MM4_CNTL2_DTOCNTR_MASK)
#define SDIOC_MM4_CNTL2_MSWRST_MASK (0x1000000U)
#define SDIOC_MM4_CNTL2_MSWRST_SHIFT (24U)
/*! MSWRST - MSWRST
 */
#define SDIOC_MM4_CNTL2_MSWRST(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL2_MSWRST_SHIFT)) & SDIOC_MM4_CNTL2_MSWRST_MASK)
#define SDIOC_MM4_CNTL2_CMDSWRST_MASK (0x2000000U)
#define SDIOC_MM4_CNTL2_CMDSWRST_SHIFT (25U)
/*! CMDSWRST - CMDSWRST
 */
#define SDIOC_MM4_CNTL2_CMDSWRST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL2_CMDSWRST_SHIFT)) & SDIOC_MM4_CNTL2_CMDSWRST_MASK)
#define SDIOC_MM4_CNTL2_DATSWRST_MASK (0x4000000U)
#define SDIOC_MM4_CNTL2_DATSWRST_SHIFT (26U)
/*! DATSWRST - DATSWRST
 */
#define SDIOC_MM4_CNTL2_DATSWRST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CNTL2_DATSWRST_SHIFT)) & SDIOC_MM4_CNTL2_DATSWRST_MASK)
/*! @} */

/*! @name MM4_I_STAT - Align Detection Timeout Value Register */
/*! @{ */
#define SDIOC_MM4_I_STAT_CMDCOMP_MASK (0x1U)
#define SDIOC_MM4_I_STAT_CMDCOMP_SHIFT (0U)
/*! CMDCOMP - CMDCOMP
 */
#define SDIOC_MM4_I_STAT_CMDCOMP(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_CMDCOMP_SHIFT)) & SDIOC_MM4_I_STAT_CMDCOMP_MASK)
#define SDIOC_MM4_I_STAT_XFRCOMP_MASK (0x2U)
#define SDIOC_MM4_I_STAT_XFRCOMP_SHIFT (1U)
/*! XFRCOMP - XFRCOMP
 */
#define SDIOC_MM4_I_STAT_XFRCOMP(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_XFRCOMP_SHIFT)) & SDIOC_MM4_I_STAT_XFRCOMP_MASK)
#define SDIOC_MM4_I_STAT_BGEVNT_MASK (0x4U)
#define SDIOC_MM4_I_STAT_BGEVNT_SHIFT (2U)
/*! BGEVNT - BGEVNT
 */
#define SDIOC_MM4_I_STAT_BGEVNT(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_BGEVNT_SHIFT)) & SDIOC_MM4_I_STAT_BGEVNT_MASK)
#define SDIOC_MM4_I_STAT_DMAINT_MASK (0x8U)
#define SDIOC_MM4_I_STAT_DMAINT_SHIFT (3U)
/*! DMAINT - DMAINT
 */
#define SDIOC_MM4_I_STAT_DMAINT(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_DMAINT_SHIFT)) & SDIOC_MM4_I_STAT_DMAINT_MASK)
#define SDIOC_MM4_I_STAT_BUFWRRDY_MASK (0x10U)
#define SDIOC_MM4_I_STAT_BUFWRRDY_SHIFT (4U)
/*! BUFWRRDY - BUFWRRDY
 */
#define SDIOC_MM4_I_STAT_BUFWRRDY(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_BUFWRRDY_SHIFT)) & SDIOC_MM4_I_STAT_BUFWRRDY_MASK)
#define SDIOC_MM4_I_STAT_BUFRDRDY_MASK (0x20U)
#define SDIOC_MM4_I_STAT_BUFRDRDY_SHIFT (5U)
/*! BUFRDRDY - BUFRDRDY
 */
#define SDIOC_MM4_I_STAT_BUFRDRDY(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_BUFRDRDY_SHIFT)) & SDIOC_MM4_I_STAT_BUFRDRDY_MASK)
#define SDIOC_MM4_I_STAT_CDINS_MASK (0x40U)
#define SDIOC_MM4_I_STAT_CDINS_SHIFT (6U)
/*! CDINS - CDINS
 */
#define SDIOC_MM4_I_STAT_CDINS(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_CDINS_SHIFT)) & SDIOC_MM4_I_STAT_CDINS_MASK)
#define SDIOC_MM4_I_STAT_CDREM_MASK (0x80U)
#define SDIOC_MM4_I_STAT_CDREM_SHIFT (7U)
/*! CDREM - CDREM
 */
#define SDIOC_MM4_I_STAT_CDREM(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_CDREM_SHIFT)) & SDIOC_MM4_I_STAT_CDREM_MASK)
#define SDIOC_MM4_I_STAT_CDINT_MASK (0x100U)
#define SDIOC_MM4_I_STAT_CDINT_SHIFT (8U)
/*! CDINT - CDINT
 */
#define SDIOC_MM4_I_STAT_CDINT(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_CDINT_SHIFT)) & SDIOC_MM4_I_STAT_CDINT_MASK)
#define SDIOC_MM4_I_STAT_ERRINT_MASK (0x8000U)
#define SDIOC_MM4_I_STAT_ERRINT_SHIFT (15U)
/*! ERRINT - ERRINT
 */
#define SDIOC_MM4_I_STAT_ERRINT(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_ERRINT_SHIFT)) & SDIOC_MM4_I_STAT_ERRINT_MASK)
#define SDIOC_MM4_I_STAT_CTOERR_MASK (0x10000U)
#define SDIOC_MM4_I_STAT_CTOERR_SHIFT (16U)
/*! CTOERR - CTOERR
 */
#define SDIOC_MM4_I_STAT_CTOERR(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_CTOERR_SHIFT)) & SDIOC_MM4_I_STAT_CTOERR_MASK)
#define SDIOC_MM4_I_STAT_CCRCERR_MASK (0x20000U)
#define SDIOC_MM4_I_STAT_CCRCERR_SHIFT (17U)
/*! CCRCERR - CCRCERR
 */
#define SDIOC_MM4_I_STAT_CCRCERR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_CCRCERR_SHIFT)) & SDIOC_MM4_I_STAT_CCRCERR_MASK)
#define SDIOC_MM4_I_STAT_CENDERR_MASK (0x40000U)
#define SDIOC_MM4_I_STAT_CENDERR_SHIFT (18U)
/*! CENDERR - CENDERR
 */
#define SDIOC_MM4_I_STAT_CENDERR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_CENDERR_SHIFT)) & SDIOC_MM4_I_STAT_CENDERR_MASK)
#define SDIOC_MM4_I_STAT_CIDXERR_MASK (0x80000U)
#define SDIOC_MM4_I_STAT_CIDXERR_SHIFT (19U)
/*! CIDXERR - CIDXERR
 */
#define SDIOC_MM4_I_STAT_CIDXERR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_CIDXERR_SHIFT)) & SDIOC_MM4_I_STAT_CIDXERR_MASK)
#define SDIOC_MM4_I_STAT_DTOERR_MASK (0x100000U)
#define SDIOC_MM4_I_STAT_DTOERR_SHIFT (20U)
/*! DTOERR - DTOERR
 */
#define SDIOC_MM4_I_STAT_DTOERR(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_DTOERR_SHIFT)) & SDIOC_MM4_I_STAT_DTOERR_MASK)
#define SDIOC_MM4_I_STAT_DCRCERR_MASK (0x200000U)
#define SDIOC_MM4_I_STAT_DCRCERR_SHIFT (21U)
/*! DCRCERR - DCRCERR
 */
#define SDIOC_MM4_I_STAT_DCRCERR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_DCRCERR_SHIFT)) & SDIOC_MM4_I_STAT_DCRCERR_MASK)
#define SDIOC_MM4_I_STAT_DENDERR_MASK (0x400000U)
#define SDIOC_MM4_I_STAT_DENDERR_SHIFT (22U)
/*! DENDERR - DENDERR
 */
#define SDIOC_MM4_I_STAT_DENDERR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_DENDERR_SHIFT)) & SDIOC_MM4_I_STAT_DENDERR_MASK)
#define SDIOC_MM4_I_STAT_ILMTERR_MASK (0x800000U)
#define SDIOC_MM4_I_STAT_ILMTERR_SHIFT (23U)
/*! ILMTERR - ILMTERR
 */
#define SDIOC_MM4_I_STAT_ILMTERR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_ILMTERR_SHIFT)) & SDIOC_MM4_I_STAT_ILMTERR_MASK)
#define SDIOC_MM4_I_STAT_AC12ERR_MASK (0x1000000U)
#define SDIOC_MM4_I_STAT_AC12ERR_SHIFT (24U)
/*! AC12ERR - AC12ERR
 */
#define SDIOC_MM4_I_STAT_AC12ERR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_AC12ERR_SHIFT)) & SDIOC_MM4_I_STAT_AC12ERR_MASK)
#define SDIOC_MM4_I_STAT_AHBTERR_MASK (0x10000000U)
#define SDIOC_MM4_I_STAT_AHBTERR_SHIFT (28U)
/*! AHBTERR - AHBTERR
 */
#define SDIOC_MM4_I_STAT_AHBTERR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_AHBTERR_SHIFT)) & SDIOC_MM4_I_STAT_AHBTERR_MASK)
/*! @} */

/*! @name MM4_I_STAT_EN - MMC4 Interrupt Status Enable Register */
/*! @{ */
#define SDIOC_MM4_I_STAT_EN_CMDCOMPSTEN_MASK (0x1U)
#define SDIOC_MM4_I_STAT_EN_CMDCOMPSTEN_SHIFT (0U)
/*! CMDCOMPSTEN - CMDCOMPSTEN
 */
#define SDIOC_MM4_I_STAT_EN_CMDCOMPSTEN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_CMDCOMPSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_CMDCOMPSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_XFRCOMPSTEN_MASK (0x2U)
#define SDIOC_MM4_I_STAT_EN_XFRCOMPSTEN_SHIFT (1U)
/*! XFRCOMPSTEN - XFRCOMPSTEN
 */
#define SDIOC_MM4_I_STAT_EN_XFRCOMPSTEN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_XFRCOMPSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_XFRCOMPSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_BGEVNTSTEN_MASK (0x4U)
#define SDIOC_MM4_I_STAT_EN_BGEVNTSTEN_SHIFT (2U)
/*! BGEVNTSTEN - BGEVNTSTEN
 */
#define SDIOC_MM4_I_STAT_EN_BGEVNTSTEN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_BGEVNTSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_BGEVNTSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_DMAINTSTEN_MASK (0x8U)
#define SDIOC_MM4_I_STAT_EN_DMAINTSTEN_SHIFT (3U)
/*! DMAINTSTEN - DMAINTSTEN
 */
#define SDIOC_MM4_I_STAT_EN_DMAINTSTEN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_DMAINTSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_DMAINTSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_BUFWRRDYSTEN_MASK (0x10U)
#define SDIOC_MM4_I_STAT_EN_BUFWRRDYSTEN_SHIFT (4U)
/*! BUFWRRDYSTEN - BUFWRRDYSTEN
 */
#define SDIOC_MM4_I_STAT_EN_BUFWRRDYSTEN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_BUFWRRDYSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_BUFWRRDYSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_BUFRDRDYSTEN_MASK (0x20U)
#define SDIOC_MM4_I_STAT_EN_BUFRDRDYSTEN_SHIFT (5U)
/*! BUFRDRDYSTEN - BUFRDRDYSTEN
 */
#define SDIOC_MM4_I_STAT_EN_BUFRDRDYSTEN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_BUFRDRDYSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_BUFRDRDYSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_CDINSSTEN_MASK (0x40U)
#define SDIOC_MM4_I_STAT_EN_CDINSSTEN_SHIFT (6U)
/*! CDINSSTEN - CDINSSTEN
 */
#define SDIOC_MM4_I_STAT_EN_CDINSSTEN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_CDINSSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_CDINSSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_CDREMSTEN_MASK (0x80U)
#define SDIOC_MM4_I_STAT_EN_CDREMSTEN_SHIFT (7U)
/*! CDREMSTEN - CDREMSTEN
 */
#define SDIOC_MM4_I_STAT_EN_CDREMSTEN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_CDREMSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_CDREMSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_CDINTSTEN_MASK (0x100U)
#define SDIOC_MM4_I_STAT_EN_CDINTSTEN_SHIFT (8U)
/*! CDINTSTEN - CDINTSTEN
 */
#define SDIOC_MM4_I_STAT_EN_CDINTSTEN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_CDINTSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_CDINTSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_CTOSTEN_MASK (0x10000U)
#define SDIOC_MM4_I_STAT_EN_CTOSTEN_SHIFT (16U)
/*! CTOSTEN - CTOSTEN
 */
#define SDIOC_MM4_I_STAT_EN_CTOSTEN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_CTOSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_CTOSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_CCRCSTEN_MASK (0x20000U)
#define SDIOC_MM4_I_STAT_EN_CCRCSTEN_SHIFT (17U)
/*! CCRCSTEN - CCRCSTEN
 */
#define SDIOC_MM4_I_STAT_EN_CCRCSTEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_CCRCSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_CCRCSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_CENDSTEN_MASK (0x40000U)
#define SDIOC_MM4_I_STAT_EN_CENDSTEN_SHIFT (18U)
/*! CENDSTEN - CENDSTEN
 */
#define SDIOC_MM4_I_STAT_EN_CENDSTEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_CENDSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_CENDSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_CIDXSTEN_MASK (0x80000U)
#define SDIOC_MM4_I_STAT_EN_CIDXSTEN_SHIFT (19U)
/*! CIDXSTEN - CIDXSTEN
 */
#define SDIOC_MM4_I_STAT_EN_CIDXSTEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_CIDXSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_CIDXSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_DTOSTEN_MASK (0x100000U)
#define SDIOC_MM4_I_STAT_EN_DTOSTEN_SHIFT (20U)
/*! DTOSTEN - DTOSTEN
 */
#define SDIOC_MM4_I_STAT_EN_DTOSTEN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_DTOSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_DTOSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_DCRCSTEN_MASK (0x200000U)
#define SDIOC_MM4_I_STAT_EN_DCRCSTEN_SHIFT (21U)
/*! DCRCSTEN - DCRCSTEN
 */
#define SDIOC_MM4_I_STAT_EN_DCRCSTEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_DCRCSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_DCRCSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_DENDSTEN_MASK (0x400000U)
#define SDIOC_MM4_I_STAT_EN_DENDSTEN_SHIFT (22U)
/*! DENDSTEN - DENDSTEN
 */
#define SDIOC_MM4_I_STAT_EN_DENDSTEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_DENDSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_DENDSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_ILMTSTEN_MASK (0x800000U)
#define SDIOC_MM4_I_STAT_EN_ILMTSTEN_SHIFT (23U)
/*! ILMTSTEN - ILMTSTEN
 */
#define SDIOC_MM4_I_STAT_EN_ILMTSTEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_ILMTSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_ILMTSTEN_MASK)
#define SDIOC_MM4_I_STAT_EN_AC12STEN_MASK (0x1000000U)
#define SDIOC_MM4_I_STAT_EN_AC12STEN_SHIFT (24U)
/*! AC12STEN - AC12STEN
 */
#define SDIOC_MM4_I_STAT_EN_AC12STEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_AC12STEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_AC12STEN_MASK)
#define SDIOC_MM4_I_STAT_EN_ATERRSTEN_MASK (0x10000000U)
#define SDIOC_MM4_I_STAT_EN_ATERRSTEN_SHIFT (28U)
/*! ATERRSTEN - ATERRSTEN
 */
#define SDIOC_MM4_I_STAT_EN_ATERRSTEN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_STAT_EN_ATERRSTEN_SHIFT)) & SDIOC_MM4_I_STAT_EN_ATERRSTEN_MASK)
/*! @} */

/*! @name MM4_I_SIG_EN - MMC4 Interrupt Signal Enable Register */
/*! @{ */
#define SDIOC_MM4_I_SIG_EN_CMDCOMPSGEN_MASK (0x1U)
#define SDIOC_MM4_I_SIG_EN_CMDCOMPSGEN_SHIFT (0U)
/*! CMDCOMPSGEN - CMDCOMPSGEN
 */
#define SDIOC_MM4_I_SIG_EN_CMDCOMPSGEN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_CMDCOMPSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_CMDCOMPSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_XFRCOMPSGEN_MASK (0x2U)
#define SDIOC_MM4_I_SIG_EN_XFRCOMPSGEN_SHIFT (1U)
/*! XFRCOMPSGEN - XFRCOMPSGEN
 */
#define SDIOC_MM4_I_SIG_EN_XFRCOMPSGEN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_XFRCOMPSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_XFRCOMPSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_BGEVNTSGEN_MASK (0x4U)
#define SDIOC_MM4_I_SIG_EN_BGEVNTSGEN_SHIFT (2U)
/*! BGEVNTSGEN - BGEVNTSGEN
 */
#define SDIOC_MM4_I_SIG_EN_BGEVNTSGEN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_BGEVNTSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_BGEVNTSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_DMAINTSGEN_MASK (0x8U)
#define SDIOC_MM4_I_SIG_EN_DMAINTSGEN_SHIFT (3U)
/*! DMAINTSGEN - DMAINTSGEN
 */
#define SDIOC_MM4_I_SIG_EN_DMAINTSGEN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_DMAINTSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_DMAINTSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_BUFWRRDYSGEN_MASK (0x10U)
#define SDIOC_MM4_I_SIG_EN_BUFWRRDYSGEN_SHIFT (4U)
/*! BUFWRRDYSGEN - BUFWRRDYSGEN
 */
#define SDIOC_MM4_I_SIG_EN_BUFWRRDYSGEN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_BUFWRRDYSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_BUFWRRDYSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_BUFRDRDYSGEN_MASK (0x20U)
#define SDIOC_MM4_I_SIG_EN_BUFRDRDYSGEN_SHIFT (5U)
/*! BUFRDRDYSGEN - BUFRDRDYSGEN
 */
#define SDIOC_MM4_I_SIG_EN_BUFRDRDYSGEN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_BUFRDRDYSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_BUFRDRDYSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_CDINSSGEN_MASK (0x40U)
#define SDIOC_MM4_I_SIG_EN_CDINSSGEN_SHIFT (6U)
/*! CDINSSGEN - CDINSSGEN
 */
#define SDIOC_MM4_I_SIG_EN_CDINSSGEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_CDINSSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_CDINSSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_CDREMSGEN_MASK (0x80U)
#define SDIOC_MM4_I_SIG_EN_CDREMSGEN_SHIFT (7U)
/*! CDREMSGEN - CDREMSGEN
 */
#define SDIOC_MM4_I_SIG_EN_CDREMSGEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_CDREMSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_CDREMSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_CDINTSGEN_MASK (0x100U)
#define SDIOC_MM4_I_SIG_EN_CDINTSGEN_SHIFT (8U)
/*! CDINTSGEN - CDINTSGEN
 */
#define SDIOC_MM4_I_SIG_EN_CDINTSGEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_CDINTSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_CDINTSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_CTOSGEN_MASK (0x10000U)
#define SDIOC_MM4_I_SIG_EN_CTOSGEN_SHIFT (16U)
/*! CTOSGEN - CTOSGEN
 */
#define SDIOC_MM4_I_SIG_EN_CTOSGEN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_CTOSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_CTOSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_CCRCSGEN_MASK (0x20000U)
#define SDIOC_MM4_I_SIG_EN_CCRCSGEN_SHIFT (17U)
/*! CCRCSGEN - CCRCSGEN
 */
#define SDIOC_MM4_I_SIG_EN_CCRCSGEN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_CCRCSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_CCRCSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_CENDSGEN_MASK (0x40000U)
#define SDIOC_MM4_I_SIG_EN_CENDSGEN_SHIFT (18U)
/*! CENDSGEN - CENDSGEN
 */
#define SDIOC_MM4_I_SIG_EN_CENDSGEN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_CENDSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_CENDSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_CIDXSGEN_MASK (0x80000U)
#define SDIOC_MM4_I_SIG_EN_CIDXSGEN_SHIFT (19U)
/*! CIDXSGEN - CIDXSGEN
 */
#define SDIOC_MM4_I_SIG_EN_CIDXSGEN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_CIDXSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_CIDXSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_DTOSGEN_MASK (0x100000U)
#define SDIOC_MM4_I_SIG_EN_DTOSGEN_SHIFT (20U)
/*! DTOSGEN - DTOSGEN
 */
#define SDIOC_MM4_I_SIG_EN_DTOSGEN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_DTOSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_DTOSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_DCRCSGEN_MASK (0x200000U)
#define SDIOC_MM4_I_SIG_EN_DCRCSGEN_SHIFT (21U)
/*! DCRCSGEN - DCRCSGEN
 */
#define SDIOC_MM4_I_SIG_EN_DCRCSGEN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_DCRCSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_DCRCSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_DENDSGEN_MASK (0x400000U)
#define SDIOC_MM4_I_SIG_EN_DENDSGEN_SHIFT (22U)
/*! DENDSGEN - DENDSGEN
 */
#define SDIOC_MM4_I_SIG_EN_DENDSGEN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_DENDSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_DENDSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_ILMTSGEN_MASK (0x800000U)
#define SDIOC_MM4_I_SIG_EN_ILMTSGEN_SHIFT (23U)
/*! ILMTSGEN - ILMTSGEN
 */
#define SDIOC_MM4_I_SIG_EN_ILMTSGEN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_ILMTSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_ILMTSGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_AC12SGEN_MASK (0x1000000U)
#define SDIOC_MM4_I_SIG_EN_AC12SGEN_SHIFT (24U)
/*! AC12SGEN - AC12SGEN
 */
#define SDIOC_MM4_I_SIG_EN_AC12SGEN(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_AC12SGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_AC12SGEN_MASK)
#define SDIOC_MM4_I_SIG_EN_ATERRSGEN_MASK (0x10000000U)
#define SDIOC_MM4_I_SIG_EN_ATERRSGEN_SHIFT (28U)
/*! ATERRSGEN - ATERRSGEN
 */
#define SDIOC_MM4_I_SIG_EN_ATERRSGEN(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_I_SIG_EN_ATERRSGEN_SHIFT)) & SDIOC_MM4_I_SIG_EN_ATERRSGEN_MASK)
/*! @} */

/*! @name MM4_ACMD12_ER - MMC4 Auto CMD12 Error Status Register */
/*! @{ */
#define SDIOC_MM4_ACMD12_ER_AC12NEXE_MASK (0x1U)
#define SDIOC_MM4_ACMD12_ER_AC12NEXE_SHIFT (0U)
/*! AC12NEXE - AC12NEXE
 */
#define SDIOC_MM4_ACMD12_ER_AC12NEXE(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_ACMD12_ER_AC12NEXE_SHIFT)) & SDIOC_MM4_ACMD12_ER_AC12NEXE_MASK)
#define SDIOC_MM4_ACMD12_ER_AC12TOER_MASK (0x2U)
#define SDIOC_MM4_ACMD12_ER_AC12TOER_SHIFT (1U)
/*! AC12TOER - AC12TOER
 */
#define SDIOC_MM4_ACMD12_ER_AC12TOER(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_ACMD12_ER_AC12TOER_SHIFT)) & SDIOC_MM4_ACMD12_ER_AC12TOER_MASK)
#define SDIOC_MM4_ACMD12_ER_AC12CRCER_MASK (0x4U)
#define SDIOC_MM4_ACMD12_ER_AC12CRCER_SHIFT (2U)
/*! AC12CRCER - AC12CRCER
 */
#define SDIOC_MM4_ACMD12_ER_AC12CRCER(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_ACMD12_ER_AC12CRCER_SHIFT)) & SDIOC_MM4_ACMD12_ER_AC12CRCER_MASK)
#define SDIOC_MM4_ACMD12_ER_AC12ENDER_MASK (0x8U)
#define SDIOC_MM4_ACMD12_ER_AC12ENDER_SHIFT (3U)
/*! AC12ENDER - AC12ENDER
 */
#define SDIOC_MM4_ACMD12_ER_AC12ENDER(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_ACMD12_ER_AC12ENDER_SHIFT)) & SDIOC_MM4_ACMD12_ER_AC12ENDER_MASK)
#define SDIOC_MM4_ACMD12_ER_AC12IDXER_MASK (0x10U)
#define SDIOC_MM4_ACMD12_ER_AC12IDXER_SHIFT (4U)
/*! AC12IDXER - AC12IDXER
 */
#define SDIOC_MM4_ACMD12_ER_AC12IDXER(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_ACMD12_ER_AC12IDXER_SHIFT)) & SDIOC_MM4_ACMD12_ER_AC12IDXER_MASK)
#define SDIOC_MM4_ACMD12_ER_CMDNISUD_MASK (0x80U)
#define SDIOC_MM4_ACMD12_ER_CMDNISUD_SHIFT (7U)
/*! CMDNISUD - CMDNISUD
 */
#define SDIOC_MM4_ACMD12_ER_CMDNISUD(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_ACMD12_ER_CMDNISUD_SHIFT)) & SDIOC_MM4_ACMD12_ER_CMDNISUD_MASK)
/*! @} */

/*! @name MM4_CAP0 - MMC4 Capabilities Register 0 */
/*! @{ */
#define SDIOC_MM4_CAP0_TOCLKFREQ_MASK (0x3FU)
#define SDIOC_MM4_CAP0_TOCLKFREQ_SHIFT (0U)
/*! TOCLKFREQ - TOCLKFREQ
 */
#define SDIOC_MM4_CAP0_TOCLKFREQ(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0_TOCLKFREQ_SHIFT)) & SDIOC_MM4_CAP0_TOCLKFREQ_MASK)
#define SDIOC_MM4_CAP0_TOCLKUNIT_MASK (0x80U)
#define SDIOC_MM4_CAP0_TOCLKUNIT_SHIFT (7U)
/*! TOCLKUNIT - TOCLKUNIT
 */
#define SDIOC_MM4_CAP0_TOCLKUNIT(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0_TOCLKUNIT_SHIFT)) & SDIOC_MM4_CAP0_TOCLKUNIT_MASK)
#define SDIOC_MM4_CAP0_BSCLKFREQ_MASK (0x3F00U)
#define SDIOC_MM4_CAP0_BSCLKFREQ_SHIFT (8U)
/*! BSCLKFREQ - BSCLKFREQ
 */
#define SDIOC_MM4_CAP0_BSCLKFREQ(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0_BSCLKFREQ_SHIFT)) & SDIOC_MM4_CAP0_BSCLKFREQ_MASK)
#define SDIOC_MM4_CAP0_MAXBLEN_MASK (0x30000U)
#define SDIOC_MM4_CAP0_MAXBLEN_SHIFT (16U)
/*! MAXBLEN - MAXBLEN
 */
#define SDIOC_MM4_CAP0_MAXBLEN(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0_MAXBLEN_SHIFT)) & SDIOC_MM4_CAP0_MAXBLEN_MASK)
#define SDIOC_MM4_CAP0_HISPDSPRT_MASK (0x200000U)
#define SDIOC_MM4_CAP0_HISPDSPRT_SHIFT (21U)
/*! HISPDSPRT - HISPDSPRT
 */
#define SDIOC_MM4_CAP0_HISPDSPRT(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0_HISPDSPRT_SHIFT)) & SDIOC_MM4_CAP0_HISPDSPRT_MASK)
#define SDIOC_MM4_CAP0_DMASPRT_MASK (0x400000U)
#define SDIOC_MM4_CAP0_DMASPRT_SHIFT (22U)
/*! DMASPRT - DMASPRT
 */
#define SDIOC_MM4_CAP0_DMASPRT(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0_DMASPRT_SHIFT)) & SDIOC_MM4_CAP0_DMASPRT_MASK)
#define SDIOC_MM4_CAP0_SUSP_RES_MASK (0x800000U)
#define SDIOC_MM4_CAP0_SUSP_RES_SHIFT (23U)
/*! SUSP_RES - SUSP/RES
 */
#define SDIOC_MM4_CAP0_SUSP_RES(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0_SUSP_RES_SHIFT)) & SDIOC_MM4_CAP0_SUSP_RES_MASK)
#define SDIOC_MM4_CAP0__3_3VSPRT_MASK (0x1000000U)
#define SDIOC_MM4_CAP0__3_3VSPRT_SHIFT (24U)
/*! _3_3VSPRT - 3.3VSPRT
 */
#define SDIOC_MM4_CAP0__3_3VSPRT(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0__3_3VSPRT_SHIFT)) & SDIOC_MM4_CAP0__3_3VSPRT_MASK)
#define SDIOC_MM4_CAP0__3_0VSPRT_MASK (0x2000000U)
#define SDIOC_MM4_CAP0__3_0VSPRT_SHIFT (25U)
/*! _3_0VSPRT - 3.0VSPRT
 */
#define SDIOC_MM4_CAP0__3_0VSPRT(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0__3_0VSPRT_SHIFT)) & SDIOC_MM4_CAP0__3_0VSPRT_MASK)
#define SDIOC_MM4_CAP0__1_8VSPRT_MASK (0x4000000U)
#define SDIOC_MM4_CAP0__1_8VSPRT_SHIFT (26U)
/*! _1_8VSPRT - 1.8VSPRT
 */
#define SDIOC_MM4_CAP0__1_8VSPRT(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0__1_8VSPRT_SHIFT)) & SDIOC_MM4_CAP0__1_8VSPRT_MASK)
#define SDIOC_MM4_CAP0_IRQMODE_MASK (0x8000000U)
#define SDIOC_MM4_CAP0_IRQMODE_SHIFT (27U)
/*! IRQMODE - IRQMODE
 */
#define SDIOC_MM4_CAP0_IRQMODE(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CAP0_IRQMODE_SHIFT)) & SDIOC_MM4_CAP0_IRQMODE_MASK)
/*! @} */

/*! @name MM4_CUR_CAP0 - MMC4 Maximum Current Capabilities Register 0 */
/*! @{ */
#define SDIOC_MM4_CUR_CAP0__3_3VMAXI_MASK (0xFFU)
#define SDIOC_MM4_CUR_CAP0__3_3VMAXI_SHIFT (0U)
/*! _3_3VMAXI - 3.3VMAXI
 */
#define SDIOC_MM4_CUR_CAP0__3_3VMAXI(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CUR_CAP0__3_3VMAXI_SHIFT)) & SDIOC_MM4_CUR_CAP0__3_3VMAXI_MASK)
#define SDIOC_MM4_CUR_CAP0__3_0VMAXI_MASK (0xFF00U)
#define SDIOC_MM4_CUR_CAP0__3_0VMAXI_SHIFT (8U)
/*! _3_0VMAXI - 3.0VMAXI
 */
#define SDIOC_MM4_CUR_CAP0__3_0VMAXI(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CUR_CAP0__3_0VMAXI_SHIFT)) & SDIOC_MM4_CUR_CAP0__3_0VMAXI_MASK)
#define SDIOC_MM4_CUR_CAP0__1_8VMAXI_MASK (0xFF0000U)
#define SDIOC_MM4_CUR_CAP0__1_8VMAXI_SHIFT (16U)
/*! _1_8VMAXI - 1.8VMAXI
 */
#define SDIOC_MM4_CUR_CAP0__1_8VMAXI(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_CUR_CAP0__1_8VMAXI_SHIFT)) & SDIOC_MM4_CUR_CAP0__1_8VMAXI_MASK)
/*! @} */

/*! @name MM4_VER - MMC4 Controller Version Status */
/*! @{ */
#define SDIOC_MM4_VER_SPECVER_MASK (0xFF0000U)
#define SDIOC_MM4_VER_SPECVER_SHIFT (16U)
/*! SPECVER - SPECVER
 */
#define SDIOC_MM4_VER_SPECVER(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_VER_SPECVER_SHIFT)) & SDIOC_MM4_VER_SPECVER_MASK)
#define SDIOC_MM4_VER_VNDRVER_MASK (0xFF000000U)
#define SDIOC_MM4_VER_VNDRVER_SHIFT (24U)
/*! VNDRVER - VNDRVER
 */
#define SDIOC_MM4_VER_VNDRVER(x) (((uint32_t)(((uint32_t)(x)) << SDIOC_MM4_VER_VNDRVER_SHIFT)) & SDIOC_MM4_VER_VNDRVER_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group SDIOC_Register_Masks */

/* SDIOC - Peripheral instance base addresses */
/** Peripheral SDIOC base address */
#define SDIOC_BASE (0x44002000u)
/** Peripheral SDIOC base pointer */
#define SDIOC ((SDIOC_Type *) SDIOC_BASE)
/** Array initializer of SDIOC peripheral base addresses */
#define SDIOC_BASE_ADDRS                                                                                                           \
    {                                                                                                                              \
        SDIOC_BASE                                                                                                                 \
    }
/** Array initializer of SDIOC peripheral base pointers */
#define SDIOC_BASE_PTRS                                                                                                            \
    {                                                                                                                              \
        SDIOC                                                                                                                      \
    }
/** Interrupt vectors for the SDIOC peripheral type */
#define SDIOC_IRQS                                                                                                                 \
    {                                                                                                                              \
        SDIO_IRQn                                                                                                                  \
    }

/*!
 * @}
 */ /* end of group SDIOC_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- SSP Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SSP_Peripheral_Access_Layer SSP Peripheral Access Layer
 * @{
 */

/** SSP - Register Layout Typedef */
typedef struct
{
    __IO uint32_t SSP_SSCR0; /**< SSP Control Register 0, offset: 0x0 */
    __IO uint32_t SSP_SSCR1; /**< SSP Control Register 1, offset: 0x4 */
    __IO uint32_t SSP_SSSR;  /**< SSP Status Register, offset: 0x8 */
    __IO uint32_t SSP_SSITR; /**< SSP Interrupt Test Register, offset: 0xC */
    __IO uint32_t SSP_SSDR;  /**< SSP Data Register, offset: 0x10 */
    uint8_t RESERVED_0[20];
    __IO uint32_t SSP_SSTO;   /**< SSP Time Out Register, offset: 0x28 */
    __IO uint32_t SSP_SSPSP;  /**< SSP Programmable Serial Protocol Register, offset: 0x2C */
    __IO uint32_t SSP_SSTSA;  /**< SSP TX Time Slot Active Register, offset: 0x30 */
    __IO uint32_t SSP_SSRSA;  /**< SSP RX Time Slot Active Register, offset: 0x34 */
    __I uint32_t SSP_SSTSS;   /**< SSP Time Slot Status Register, offset: 0x38 */
    __IO uint32_t SSP_SSACD;  /**< SSP Audio Clock Divider Register, offset: 0x3C */
    __IO uint32_t SSP_SSACDD; /**< SSP Audio Clock Dither Divider Register, offset: 0x40 */
} SSP_Type;

/* ----------------------------------------------------------------------------
   -- SSP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SSP_Register_Masks SSP Register Masks
 * @{
 */

/*! @name SSP_SSCR0 - SSP Control Register 0 */
/*! @{ */
#define SSP_SSP_SSCR0_DSS_MASK (0xFU)
#define SSP_SSP_SSCR0_DSS_SHIFT (0U)
/*! DSS - Data Size Select
 */
#define SSP_SSP_SSCR0_DSS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_DSS_SHIFT)) & SSP_SSP_SSCR0_DSS_MASK)
#define SSP_SSP_SSCR0_FRF_MASK (0x30U)
#define SSP_SSP_SSCR0_FRF_SHIFT (4U)
/*! FRF - Frame Format
 *  0b00..Motorola* Serial Peripheral Interface (SPI)
 *  0b01..Texas Instruments* Synchronous Serial Protocol (SSP)
 *  0b10..National Semiconductor Microwire*
 *  0b11..Programmable Serial Protocol (PSP)
 */
#define SSP_SSP_SSCR0_FRF(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_FRF_SHIFT)) & SSP_SSP_SSCR0_FRF_MASK)
#define SSP_SSP_SSCR0_ECS_MASK (0x40U)
#define SSP_SSP_SSCR0_ECS_SHIFT (6U)
/*! ECS - External Clock Select
 *  0b0..On-chip SSPx Clock is used in the serial clock rate formula (above) to produce the SSPx port's SSPSCLKx
 *  0b1..SSPEXTCLKx (GPIO pin) is used in the serial clock rate formula to produce the SSPx port's SSPSCLKx
 */
#define SSP_SSP_SSCR0_ECS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_ECS_SHIFT)) & SSP_SSP_SSCR0_ECS_MASK)
#define SSP_SSP_SSCR0_SSE_MASK (0x80U)
#define SSP_SSP_SSCR0_SSE_SHIFT (7U)
/*! SSE - Synchronous Serial Port Enable
 *  0b0..SSPx port is disabled
 *  0b1..SSPx port is enabled
 */
#define SSP_SSP_SSCR0_SSE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_SSE_SHIFT)) & SSP_SSP_SSCR0_SSE_MASK)
#define SSP_SSP_SSCR0_SCR_MASK (0xFFF00U)
#define SSP_SSP_SSCR0_SCR_SHIFT (8U)
/*! SCR - Serial Clock Rate
 */
#define SSP_SSP_SSCR0_SCR(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_SCR_SHIFT)) & SSP_SSP_SSCR0_SCR_MASK)
#define SSP_SSP_SSCR0_EDSS_MASK (0x100000U)
#define SSP_SSP_SSCR0_EDSS_SHIFT (20U)
/*! EDSS - Extended Data Size Select
 *  0b0..A 0 is pre-appended to the DSS value to set the DSS range from 8 to 16 bits.
 *  0b1..A 1 is pre-appended to the DSS value to set the DSS range from 18 to 32 bits.
 */
#define SSP_SSP_SSCR0_EDSS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_EDSS_SHIFT)) & SSP_SSP_SSCR0_EDSS_MASK)
#define SSP_SSP_SSCR0_NCS_MASK (0x200000U)
#define SSP_SSP_SSCR0_NCS_SHIFT (21U)
/*! NCS - Network Clock Select
 *  0b0..Clock selection is determined by the <External Clock Select> field
 *  0b1..Network clock is used to create the SSP's serial clock (SSPSCLKx)
 */
#define SSP_SSP_SSCR0_NCS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_NCS_SHIFT)) & SSP_SSP_SSCR0_NCS_MASK)
#define SSP_SSP_SSCR0_RIM_MASK (0x400000U)
#define SSP_SSP_SSCR0_RIM_SHIFT (22U)
/*! RIM - Receive FIFO Overrun Interrupt Mask
 *  0b0..ROR events generate an SSP interrupt
 *  0b1..ROR events do NOT generate an SSP interrupt
 */
#define SSP_SSP_SSCR0_RIM(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_RIM_SHIFT)) & SSP_SSP_SSCR0_RIM_MASK)
#define SSP_SSP_SSCR0_TIM_MASK (0x800000U)
#define SSP_SSP_SSCR0_TIM_SHIFT (23U)
/*! TIM - Transmit FIFO Underrun Interrupt Mask
 *  0b0..TUR events generate an SSP interrupt
 *  0b1..TUR events do NOT generate an SSP interrupt
 */
#define SSP_SSP_SSCR0_TIM(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_TIM_SHIFT)) & SSP_SSP_SSCR0_TIM_MASK)
#define SSP_SSP_SSCR0_FRDC_MASK (0x7000000U)
#define SSP_SSP_SSCR0_FRDC_SHIFT (24U)
/*! FRDC - Frame Rate Divider Control
 */
#define SSP_SSP_SSCR0_FRDC(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_FRDC_SHIFT)) & SSP_SSP_SSCR0_FRDC_MASK)
#define SSP_SSP_SSCR0_MCRT_MASK (0x8000000U)
#define SSP_SSP_SSCR0_MCRT_SHIFT (27U)
/*! MCRT - Master Clock Return
 *  0b0..not seclect master return_clock
 *  0b1..master clock delay
 */
#define SSP_SSP_SSCR0_MCRT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_MCRT_SHIFT)) & SSP_SSP_SSCR0_MCRT_MASK)
#define SSP_SSP_SSCR0_RHCD_MASK (0x10000000U)
#define SSP_SSP_SSCR0_RHCD_SHIFT (28U)
/*! RHCD - RX half cycle delay
 *  0b0..not seclect RX half cycle delay
 *  0b1..receive data delay half cycle
 */
#define SSP_SSP_SSCR0_RHCD(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_RHCD_SHIFT)) & SSP_SSP_SSCR0_RHCD_MASK)
#define SSP_SSP_SSCR0_FPCKE_MASK (0x20000000U)
#define SSP_SSP_SSCR0_FPCKE_SHIFT (29U)
/*! FPCKE - FIFO Packing Enable
 *  0b0..FIFO packing mode disabled
 *  0b1..FIFO packing mode enabled
 */
#define SSP_SSP_SSCR0_FPCKE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_FPCKE_SHIFT)) & SSP_SSP_SSCR0_FPCKE_MASK)
#define SSP_SSP_SSCR0_ACS_MASK (0x40000000U)
#define SSP_SSP_SSCR0_ACS_SHIFT (30U)
/*! ACS - Audio Clock Select
 *  0b0..Clock selection is determined by the <Network Clock Select> and <External Clock Select> fields
 *  0b1..Audio clock (and audio clock divider) are used to create the SSP serial bit clock (SSPSCLKx)
 */
#define SSP_SSP_SSCR0_ACS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_ACS_SHIFT)) & SSP_SSP_SSCR0_ACS_MASK)
#define SSP_SSP_SSCR0_MOD_MASK (0x80000000U)
#define SSP_SSP_SSCR0_MOD_SHIFT (31U)
/*! MOD - Mode
 *  0b0..Normal SSP mode
 *  0b1..Network mode
 */
#define SSP_SSP_SSCR0_MOD(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR0_MOD_SHIFT)) & SSP_SSP_SSCR0_MOD_MASK)
/*! @} */

/*! @name SSP_SSCR1 - SSP Control Register 1 */
/*! @{ */
#define SSP_SSP_SSCR1_RIE_MASK (0x1U)
#define SSP_SSP_SSCR1_RIE_SHIFT (0U)
/*! RIE - Receive FIFO Interrupt Enable
 *  0b0..RXFIFO threshold-level-reached interrupt is disabled.
 *  0b1..RXFIFO threshold-level-reached interrupt is enabled.
 */
#define SSP_SSP_SSCR1_RIE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_RIE_SHIFT)) & SSP_SSP_SSCR1_RIE_MASK)
#define SSP_SSP_SSCR1_TIE_MASK (0x2U)
#define SSP_SSP_SSCR1_TIE_SHIFT (1U)
/*! TIE - Transmit FIFO Interrupt Enable
 *  0b0..TXFIFO threshold-level-reached interrupt is disabled.
 *  0b1..TXFIFO threshold-level-reached interrupt is enabled.
 */
#define SSP_SSP_SSCR1_TIE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_TIE_SHIFT)) & SSP_SSP_SSCR1_TIE_MASK)
#define SSP_SSP_SSCR1_LBM_MASK (0x4U)
#define SSP_SSP_SSCR1_LBM_SHIFT (2U)
/*! LBM - Loopback Mode
 *  0b0..Normal serial port operation is enabled.
 *  0b1..Output of TX serial shifter is internally connected to input of RX serial shifter.
 */
#define SSP_SSP_SSCR1_LBM(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_LBM_SHIFT)) & SSP_SSP_SSCR1_LBM_MASK)
#define SSP_SSP_SSCR1_SPO_MASK (0x8U)
#define SSP_SSP_SSCR1_SPO_SHIFT (3U)
/*! SPO - Motorola SPI SSPSCLK Polarity Setting
 *  0b0..The inactive or idle state of SSPSCLKx is low.
 *  0b1..The inactive or idle state of SSPSCLKx is high.
 */
#define SSP_SSP_SSCR1_SPO(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_SPO_SHIFT)) & SSP_SSP_SSCR1_SPO_MASK)
#define SSP_SSP_SSCR1_SPH_MASK (0x10U)
#define SSP_SSP_SSCR1_SPH_SHIFT (4U)
/*! SPH - Motorola SPI SSPSCLK phase setting
 *  0b0..SSPSCLKx is inactive until one cycle after the start of a frame and active until 1/2 cycle before the end of a frame.
 *  0b1..SSPSCLKx is inactive until 1/2 cycle after the start of a frame and active until one cycle
 */
#define SSP_SSP_SSCR1_SPH(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_SPH_SHIFT)) & SSP_SSP_SSCR1_SPH_MASK)
#define SSP_SSP_SSCR1_TFT_MASK (0x3C0U)
#define SSP_SSP_SSCR1_TFT_SHIFT (6U)
/*! TFT - TXFIFO Trigger Threshold
 */
#define SSP_SSP_SSCR1_TFT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_TFT_SHIFT)) & SSP_SSP_SSCR1_TFT_MASK)
#define SSP_SSP_SSCR1_RFT_MASK (0x3C00U)
#define SSP_SSP_SSCR1_RFT_SHIFT (10U)
/*! RFT - RXFIFO Trigger Threshold
 */
#define SSP_SSP_SSCR1_RFT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_RFT_SHIFT)) & SSP_SSP_SSCR1_RFT_MASK)
#define SSP_SSP_SSCR1_EFWR_MASK (0x4000U)
#define SSP_SSP_SSCR1_EFWR_SHIFT (14U)
/*! EFWR - Enable FIFO Write/read
 *  0b0..FIFO write/read special function is disabled (normal SSPx operational mode).
 *  0b1..FIFO write/read special function is enabled.
 */
#define SSP_SSP_SSCR1_EFWR(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_EFWR_SHIFT)) & SSP_SSP_SSCR1_EFWR_MASK)
#define SSP_SSP_SSCR1_STRF_MASK (0x8000U)
#define SSP_SSP_SSCR1_STRF_SHIFT (15U)
/*! STRF - Select FIFO For Efwr
 *  0b0..TXFIFO is selected for both writes and reads through the SSP Data Register.
 *  0b1..RXFIFO is selected for both writes and reads through the SSP Data Register.
 */
#define SSP_SSP_SSCR1_STRF(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_STRF_SHIFT)) & SSP_SSP_SSCR1_STRF_MASK)
#define SSP_SSP_SSCR1_IFS_MASK (0x10000U)
#define SSP_SSP_SSCR1_IFS_SHIFT (16U)
/*! IFS - Invert Frame Signal
 *  0b0..SSPSFRMx polarity is determined by the PSP polarity bits.
 *  0b1..SSPSFRMx is inverted from normal-SSPSFRMx (as defined by the PSP polarity bits). (Works in all frame formats: SPI, SSP, and
 * PSP)
 */
#define SSP_SSP_SSCR1_IFS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_IFS_SHIFT)) & SSP_SSP_SSCR1_IFS_MASK)
#define SSP_SSP_SSCR1_PDM_MASK (0x20000U)
#define SSP_SSP_SSCR1_PDM_SHIFT (17U)
/*! PDM - Pulse Desity Modulation Enable
 *  0b0..PDM function is disabled.
 *  0b1..PDM function is enabled ,ignore all the ssp module configration but sse bit .
 */
#define SSP_SSP_SSCR1_PDM(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_PDM_SHIFT)) & SSP_SSP_SSCR1_PDM_MASK)
#define SSP_SSP_SSCR1_PINTE_MASK (0x40000U)
#define SSP_SSP_SSCR1_PINTE_SHIFT (18U)
/*! PINTE - Peripheral Trailing Byte Interrupt Enable
 *  0b0..Peripheral trailing byte interrupt is disabled.
 *  0b1..Peripheral trailing byte interrupt is enabled.
 */
#define SSP_SSP_SSCR1_PINTE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_PINTE_SHIFT)) & SSP_SSP_SSCR1_PINTE_MASK)
#define SSP_SSP_SSCR1_TINTE_MASK (0x80000U)
#define SSP_SSP_SSCR1_TINTE_SHIFT (19U)
/*! TINTE - Receiver Time-out Interrupt Enable
 *  0b0..Receiver time-out interrupt is disabled.
 *  0b1..Receiver time-out interrupt is enabled.
 */
#define SSP_SSP_SSCR1_TINTE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_TINTE_SHIFT)) & SSP_SSP_SSCR1_TINTE_MASK)
#define SSP_SSP_SSCR1_RSRE_MASK (0x100000U)
#define SSP_SSP_SSCR1_RSRE_SHIFT (20U)
/*! RSRE - Receive Service Request Enable
 *  0b0..DMA service request is disabled
 *  0b1..DMA service request is enabled
 */
#define SSP_SSP_SSCR1_RSRE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_RSRE_SHIFT)) & SSP_SSP_SSCR1_RSRE_MASK)
#define SSP_SSP_SSCR1_TSRE_MASK (0x200000U)
#define SSP_SSP_SSCR1_TSRE_SHIFT (21U)
/*! TSRE - Transmit Service Request Enable
 *  0b0..DMA service request is disabled
 *  0b1..DMA service request is enabled
 */
#define SSP_SSP_SSCR1_TSRE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_TSRE_SHIFT)) & SSP_SSP_SSCR1_TSRE_MASK)
#define SSP_SSP_SSCR1_TRAIL_MASK (0x400000U)
#define SSP_SSP_SSCR1_TRAIL_SHIFT (22U)
/*! TRAIL - Trailing Byte
 *  0b0..Trailing bytes are handled by the Aspen (88AP168) Processor
 *  0b1..Trailing bytes are handled by DMA bursts
 */
#define SSP_SSP_SSCR1_TRAIL(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_TRAIL_SHIFT)) & SSP_SSP_SSCR1_TRAIL_MASK)
#define SSP_SSP_SSCR1_RWOT_MASK (0x800000U)
#define SSP_SSP_SSCR1_RWOT_SHIFT (23U)
/*! RWOT - Receive Without Transmit
 *  0b0..Transmit/Receive mode
 *  0b1..Receive without Transmit mode
 */
#define SSP_SSP_SSCR1_RWOT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_RWOT_SHIFT)) & SSP_SSP_SSCR1_RWOT_MASK)
#define SSP_SSP_SSCR1_SFRMDIR_MASK (0x1000000U)
#define SSP_SSP_SSCR1_SFRMDIR_SHIFT (24U)
/*! SFRMDIR - SSP Frame (SSPSFRMx) Direction
 *  0b0..Master mode, SSPx port drives SSPSFRMx
 *  0b1..Slave mode, SSPx port receives SSPSFRMx
 */
#define SSP_SSP_SSCR1_SFRMDIR(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_SFRMDIR_SHIFT)) & SSP_SSP_SSCR1_SFRMDIR_MASK)
#define SSP_SSP_SSCR1_SCLKDIR_MASK (0x2000000U)
#define SSP_SSP_SSCR1_SCLKDIR_SHIFT (25U)
/*! SCLKDIR - SSP Serial Bit Rate Clock (SSPSCLKx) Direction
 *  0b0..Master mode, SSPx port drives SSPSCLKx
 *  0b1..Slave mode, SSPx port receives SSPSCLKx
 */
#define SSP_SSP_SSCR1_SCLKDIR(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_SCLKDIR_SHIFT)) & SSP_SSP_SSCR1_SCLKDIR_MASK)
#define SSP_SSP_SSCR1_ECRB_MASK (0x4000000U)
#define SSP_SSP_SSCR1_ECRB_SHIFT (26U)
/*! ECRB - Enable Clock Request B
 *  0b0..Clock request from other SSPx is disabled.
 *  0b1..Clock request from other SSPx is enabled.
 */
#define SSP_SSP_SSCR1_ECRB(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_ECRB_SHIFT)) & SSP_SSP_SSCR1_ECRB_MASK)
#define SSP_SSP_SSCR1_ECRA_MASK (0x8000000U)
#define SSP_SSP_SSCR1_ECRA_SHIFT (27U)
/*! ECRA - Enable Clock Request A
 *  0b0..Clock request from other SSPx is disabled.
 *  0b1..Clock request from other SSPx is enabled.
 */
#define SSP_SSP_SSCR1_ECRA(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_ECRA_SHIFT)) & SSP_SSP_SSCR1_ECRA_MASK)
#define SSP_SSP_SSCR1_SCFR_MASK (0x10000000U)
#define SSP_SSP_SSCR1_SCFR_SHIFT (28U)
/*! SCFR - Slave Clock Free Running
 *  0b0..Clock input to SSPSCLKx is continuously running
 *  0b1..Clock input to SSPSCLKx is only active during data transfers. (ob1 Required for slave mode.)
 */
#define SSP_SSP_SSCR1_SCFR(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_SCFR_SHIFT)) & SSP_SSP_SSCR1_SCFR_MASK)
#define SSP_SSP_SSCR1_EBCEI_MASK (0x20000000U)
#define SSP_SSP_SSCR1_EBCEI_SHIFT (29U)
/*! EBCEI - Enable Bit Count Error Interrupt
 *  0b0..Interrupt due to a bit count error is disabled.
 *  0b1..Interrupt due to a bit count error is enabled.
 */
#define SSP_SSP_SSCR1_EBCEI(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_EBCEI_SHIFT)) & SSP_SSP_SSCR1_EBCEI_MASK)
#define SSP_SSP_SSCR1_TTE_MASK (0x40000000U)
#define SSP_SSP_SSCR1_TTE_SHIFT (30U)
/*! TTE - TXD Three-State Enable
 *  0b0..TXDx output signal is not three-stated.
 *  0b1..TXD is three-stated when not transmitting data.
 */
#define SSP_SSP_SSCR1_TTE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_TTE_SHIFT)) & SSP_SSP_SSCR1_TTE_MASK)
#define SSP_SSP_SSCR1_TTELP_MASK (0x80000000U)
#define SSP_SSP_SSCR1_TTELP_SHIFT (31U)
/*! TTELP - TXD Three-state Enable On Last Phase
 *  0b0..TXDx is three-stated 1/2 clock cycle after the beginning of the LSB.
 *  0b1..TXDx output signal is three-stated on the clock edge that ends the LSB.
 */
#define SSP_SSP_SSCR1_TTELP(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSCR1_TTELP_SHIFT)) & SSP_SSP_SSCR1_TTELP_MASK)
/*! @} */

/*! @name SSP_SSSR - SSP Status Register */
/*! @{ */
#define SSP_SSP_SSSR_TNF_MASK (0x4U)
#define SSP_SSP_SSSR_TNF_SHIFT (2U)
/*! TNF - Transmit FIFO Not Full
 *  0b0..TXFIFO is full.
 *  0b1..TXFIFO is not full.
 */
#define SSP_SSP_SSSR_TNF(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_TNF_SHIFT)) & SSP_SSP_SSSR_TNF_MASK)
#define SSP_SSP_SSSR_RNE_MASK (0x8U)
#define SSP_SSP_SSSR_RNE_SHIFT (3U)
/*! RNE - Receive FIFO Not Empty
 *  0b0..RXFIFO is empty.
 *  0b1..RXFIFO is not empty.
 */
#define SSP_SSP_SSSR_RNE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_RNE_SHIFT)) & SSP_SSP_SSSR_RNE_MASK)
#define SSP_SSP_SSSR_BSY_MASK (0x10U)
#define SSP_SSP_SSSR_BSY_SHIFT (4U)
/*! BSY - SSP Busy
 *  0b0..SSPx port is idle or disabled.
 *  0b1..SSPx port is currently transmitting or receiving framed data.
 */
#define SSP_SSP_SSSR_BSY(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_BSY_SHIFT)) & SSP_SSP_SSSR_BSY_MASK)
#define SSP_SSP_SSSR_TFS_MASK (0x20U)
#define SSP_SSP_SSSR_TFS_SHIFT (5U)
/*! TFS - Transmit FIFO Service Request
 *  0b0..TX FIFO level exceeds the TFT threshold (TFT + 1), or SSPx port disabled.
 *  0b1..TXFIFO level is at or below TFT threshold (TFT + 1), causes an interrupt request.
 */
#define SSP_SSP_SSSR_TFS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_TFS_SHIFT)) & SSP_SSP_SSSR_TFS_MASK)
#define SSP_SSP_SSSR_RFS_MASK (0x40U)
#define SSP_SSP_SSSR_RFS_SHIFT (6U)
/*! RFS - Receive FIFO Service Request
 *  0b0..RXFIFO level is at or below RFT threshold (RFT), or SSPx port is disabled
 *  0b1..RXFIFO level exceeds RFT threshold (RFT), causes an interrupt request
 */
#define SSP_SSP_SSSR_RFS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_RFS_SHIFT)) & SSP_SSP_SSSR_RFS_MASK)
#define SSP_SSP_SSSR_ROR_MASK (0x80U)
#define SSP_SSP_SSSR_ROR_SHIFT (7U)
/*! ROR - Receive FIFO Overrun
 *  0b0..RXFIFO has not experienced an overrun.
 *  0b1..Attempted data write to full RXFIFO, causes an interrupt request.
 */
#define SSP_SSP_SSSR_ROR(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_ROR_SHIFT)) & SSP_SSP_SSSR_ROR_MASK)
#define SSP_SSP_SSSR_TFL_MASK (0xF00U)
#define SSP_SSP_SSSR_TFL_SHIFT (8U)
/*! TFL - Transmit FIFO Level
 */
#define SSP_SSP_SSSR_TFL(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_TFL_SHIFT)) & SSP_SSP_SSSR_TFL_MASK)
#define SSP_SSP_SSSR_RFL_MASK (0xF000U)
#define SSP_SSP_SSSR_RFL_SHIFT (12U)
/*! RFL - Receive FIFO Level
 */
#define SSP_SSP_SSSR_RFL(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_RFL_SHIFT)) & SSP_SSP_SSSR_RFL_MASK)
#define SSP_SSP_SSSR_PINT_MASK (0x40000U)
#define SSP_SSP_SSSR_PINT_SHIFT (18U)
/*! PINT - Peripheral Trailing Byte Interrupt
 *  0b0..No peripheral trailing byte interrupt is pending.
 *  0b1..Peripheral trailing byte interrupt is pending.
 */
#define SSP_SSP_SSSR_PINT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_PINT_SHIFT)) & SSP_SSP_SSSR_PINT_MASK)
#define SSP_SSP_SSSR_TINT_MASK (0x80000U)
#define SSP_SSP_SSSR_TINT_SHIFT (19U)
/*! TINT - Receiver Time-out Interrupt
 *  0b0..No receiver time-out is pending.
 *  0b1..Receiver time-out pending, causes an interrupt request.
 */
#define SSP_SSP_SSSR_TINT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_TINT_SHIFT)) & SSP_SSP_SSSR_TINT_MASK)
#define SSP_SSP_SSSR_EOC_MASK (0x100000U)
#define SSP_SSP_SSSR_EOC_SHIFT (20U)
/*! EOC - End Of Chain
 *  0b0..DMA has not signaled an end of chain condition.
 *  0b1..DMA has signaled an end of chain condition.
 */
#define SSP_SSP_SSSR_EOC(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_EOC_SHIFT)) & SSP_SSP_SSSR_EOC_MASK)
#define SSP_SSP_SSSR_TUR_MASK (0x200000U)
#define SSP_SSP_SSSR_TUR_SHIFT (21U)
/*! TUR - Transmit FIFO Underrun
 *  0b0..The TXFIFO has not experienced an underrun.
 *  0b1..A read from the TXFIFO was attempted when the TXFIFO was empty, causes an interrupt if it is enabled
 *       (<Transmit FIFO Underrun Interrupt Mask> in the SSP Control Register 0 is 0).
 */
#define SSP_SSP_SSSR_TUR(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_TUR_SHIFT)) & SSP_SSP_SSSR_TUR_MASK)
#define SSP_SSP_SSSR_CSS_MASK (0x400000U)
#define SSP_SSP_SSSR_CSS_SHIFT (22U)
/*! CSS - Clock Synchronization Status
 *  0b0..The SSPx port is ready for slave clock operations.
 *  0b1..The SSPx port is currently busy synchronizing slave mode signals.
 */
#define SSP_SSP_SSSR_CSS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_CSS_SHIFT)) & SSP_SSP_SSSR_CSS_MASK)
#define SSP_SSP_SSSR_BCE_MASK (0x800000U)
#define SSP_SSP_SSSR_BCE_SHIFT (23U)
/*! BCE - Bit Count Error
 *  0b0..The SSPx port has not experienced a bit count error.
 *  0b1..The SSPSFRMx signal was asserted when the bit counter was not zero.
 */
#define SSP_SSP_SSSR_BCE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_BCE_SHIFT)) & SSP_SSP_SSSR_BCE_MASK)
#define SSP_SSP_SSSR_TX_OSS_MASK (0x40000000U)
#define SSP_SSP_SSSR_TX_OSS_SHIFT (30U)
/*! TX_OSS - TX FIFO Odd Sample Status
 *  0b0..TxFIFO entry has an even number of samples
 *  0b1..TxFIFO entry has an odd number of sample.
 */
#define SSP_SSP_SSSR_TX_OSS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_TX_OSS_SHIFT)) & SSP_SSP_SSSR_TX_OSS_MASK)
#define SSP_SSP_SSSR_OSS_MASK (0x80000000U)
#define SSP_SSP_SSSR_OSS_SHIFT (31U)
/*! OSS - Odd Sample Status
 *  0b0..RxFIFO entry has 2 samples
 *  0b1..RxFIFO entry has 1 sample.
 */
#define SSP_SSP_SSSR_OSS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSSR_OSS_SHIFT)) & SSP_SSP_SSSR_OSS_MASK)
/*! @} */

/*! @name SSP_SSITR - SSP Interrupt Test Register */
/*! @{ */
#define SSP_SSP_SSITR_TTFS_MASK (0x20U)
#define SSP_SSP_SSITR_TTFS_SHIFT (5U)
/*! TTFS - Test TXFIFO Service Request
 *  0b0..No TXFIFO-service request
 *  0b1..Generates a non-maskable TXFIFO-service interrupt request and DMA request
 */
#define SSP_SSP_SSITR_TTFS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSITR_TTFS_SHIFT)) & SSP_SSP_SSITR_TTFS_MASK)
#define SSP_SSP_SSITR_TRFS_MASK (0x40U)
#define SSP_SSP_SSITR_TRFS_SHIFT (6U)
/*! TRFS - Test RXFIFO Service Request
 *  0b0..No RXFIFO-service request.
 *  0b1..Generates a non-maskable RXFIFO-service interrupt request and DMA request
 */
#define SSP_SSP_SSITR_TRFS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSITR_TRFS_SHIFT)) & SSP_SSP_SSITR_TRFS_MASK)
#define SSP_SSP_SSITR_TROR_MASK (0x80U)
#define SSP_SSP_SSITR_TROR_SHIFT (7U)
/*! TROR - Test RXFIFO Overrun
 *  0b0..No RXFIFO-overrun service request.
 *  0b1..Generates a non-maskable RXFIFO-overrun interrupt request. No DMA request is generated
 */
#define SSP_SSP_SSITR_TROR(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSITR_TROR_SHIFT)) & SSP_SSP_SSITR_TROR_MASK)
/*! @} */

/*! @name SSP_SSDR - SSP Data Register */
/*! @{ */
#define SSP_SSP_SSDR_DATA_MASK (0xFFFFFFFFU)
#define SSP_SSP_SSDR_DATA_SHIFT (0U)
/*! DATA - DATA
 */
#define SSP_SSP_SSDR_DATA(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSDR_DATA_SHIFT)) & SSP_SSP_SSDR_DATA_MASK)
/*! @} */

/*! @name SSP_SSTO - SSP Time Out Register */
/*! @{ */
#define SSP_SSP_SSTO_TIMEOUT_MASK (0xFFFFFFU)
#define SSP_SSP_SSTO_TIMEOUT_SHIFT (0U)
/*! TIMEOUT - Timeout Value
 */
#define SSP_SSP_SSTO_TIMEOUT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSTO_TIMEOUT_SHIFT)) & SSP_SSP_SSTO_TIMEOUT_MASK)
/*! @} */

/*! @name SSP_SSPSP - SSP Programmable Serial Protocol Register */
/*! @{ */
#define SSP_SSP_SSPSP_SCMODE_MASK (0x3U)
#define SSP_SSP_SSPSP_SCMODE_SHIFT (0U)
/*! SCMODE - Serial Bit-rate Clock Mode
 *  0b00..Data Driven (Falling), Data Sampled (Rising), Idle State (Low)
 *  0b01..Data Driven (Rising), Data Sampled (Falling), Idle State (Low)
 *  0b10..Data Driven (Rising), Data Sampled (Falling), Idle State (High)
 *  0b11..Data Driven (Falling), Data Sampled (Rising), Idle State (High)
 */
#define SSP_SSP_SSPSP_SCMODE(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_SCMODE_SHIFT)) & SSP_SSP_SSPSP_SCMODE_MASK)
#define SSP_SSP_SSPSP_SFRMP_MASK (0x4U)
#define SSP_SSP_SSPSP_SFRMP_SHIFT (2U)
/*! SFRMP - Serial Frame Polarity
 *  0b0..SSPSFRMx is active low (0b0).
 *  0b1..SSPSFRMx is active high (0b1).
 */
#define SSP_SSP_SSPSP_SFRMP(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_SFRMP_SHIFT)) & SSP_SSP_SSPSP_SFRMP_MASK)
#define SSP_SSP_SSPSP_ETDS_MASK (0x8U)
#define SSP_SSP_SSPSP_ETDS_SHIFT (3U)
/*! ETDS - End Of Transfer Data State
 */
#define SSP_SSP_SSPSP_ETDS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_ETDS_SHIFT)) & SSP_SSP_SSPSP_ETDS_MASK)
#define SSP_SSP_SSPSP_STRTDLY_MASK (0x70U)
#define SSP_SSP_SSPSP_STRTDLY_SHIFT (4U)
/*! STRTDLY - Start Delay
 */
#define SSP_SSP_SSPSP_STRTDLY(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_STRTDLY_SHIFT)) & SSP_SSP_SSPSP_STRTDLY_MASK)
#define SSP_SSP_SSPSP_DMYSTRT_MASK (0x180U)
#define SSP_SSP_SSPSP_DMYSTRT_SHIFT (7U)
/*! DMYSTRT - Dummy Start
 */
#define SSP_SSP_SSPSP_DMYSTRT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_DMYSTRT_SHIFT)) & SSP_SSP_SSPSP_DMYSTRT_MASK)
#define SSP_SSP_SSPSP_SFRMDLY_MASK (0xFE00U)
#define SSP_SSP_SSPSP_SFRMDLY_SHIFT (9U)
/*! SFRMDLY - Serial Frame Delay
 */
#define SSP_SSP_SSPSP_SFRMDLY(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_SFRMDLY_SHIFT)) & SSP_SSP_SSPSP_SFRMDLY_MASK)
#define SSP_SSP_SSPSP_SFRMWDTH_MASK (0x3F0000U)
#define SSP_SSP_SSPSP_SFRMWDTH_SHIFT (16U)
/*! SFRMWDTH - Serial Frame Width
 */
#define SSP_SSP_SSPSP_SFRMWDTH(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_SFRMWDTH_SHIFT)) & SSP_SSP_SSPSP_SFRMWDTH_MASK)
#define SSP_SSP_SSPSP_DMYSTOP_MASK (0x1800000U)
#define SSP_SSP_SSPSP_DMYSTOP_SHIFT (23U)
/*! DMYSTOP - Dummy Stop
 */
#define SSP_SSP_SSPSP_DMYSTOP(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_DMYSTOP_SHIFT)) & SSP_SSP_SSPSP_DMYSTOP_MASK)
#define SSP_SSP_SSPSP_FSRT_MASK (0x2000000U)
#define SSP_SSP_SSPSP_FSRT_SHIFT (25U)
/*! FSRT - Frame Sync Relative Timing Bit
 *  0b0..Next frame is asserted after the end of the DMTSTOP timing.
 *  0b1..Next frame is asserted with the LSB of the previous frame.
 */
#define SSP_SSP_SSPSP_FSRT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_FSRT_SHIFT)) & SSP_SSP_SSPSP_FSRT_MASK)
#define SSP_SSP_SSPSP_EDMYSTRT_MASK (0xC000000U)
#define SSP_SSP_SSPSP_EDMYSTRT_SHIFT (26U)
/*! EDMYSTRT - Extended Dummy Start
 */
#define SSP_SSP_SSPSP_EDMYSTRT(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_EDMYSTRT_SHIFT)) & SSP_SSP_SSPSP_EDMYSTRT_MASK)
#define SSP_SSP_SSPSP_EDMYSTOP_MASK (0x70000000U)
#define SSP_SSP_SSPSP_EDMYSTOP_SHIFT (28U)
/*! EDMYSTOP - Extended Dummy Stop
 */
#define SSP_SSP_SSPSP_EDMYSTOP(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSPSP_EDMYSTOP_SHIFT)) & SSP_SSP_SSPSP_EDMYSTOP_MASK)
/*! @} */

/*! @name SSP_SSTSA - SSP TX Time Slot Active Register */
/*! @{ */
#define SSP_SSP_SSTSA_TTSA_MASK (0xFFU)
#define SSP_SSP_SSTSA_TTSA_SHIFT (0U)
/*! TTSA - TX Time Slot Active
 *  0b00000000..SSPx port does NOT transmit data in this time slot.
 *  0b00000001..SSPx port does transmit data in this time slot.
 */
#define SSP_SSP_SSTSA_TTSA(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSTSA_TTSA_SHIFT)) & SSP_SSP_SSTSA_TTSA_MASK)
/*! @} */

/*! @name SSP_SSRSA - SSP RX Time Slot Active Register */
/*! @{ */
#define SSP_SSP_SSRSA_RTSA_MASK (0xFFU)
#define SSP_SSP_SSRSA_RTSA_SHIFT (0U)
/*! RTSA - RX Time Slot Active
 *  0b00000000..SSPx port does not receive data in this time slot.
 *  0b00000001..SSPx port receives data in this time slot.
 */
#define SSP_SSP_SSRSA_RTSA(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSRSA_RTSA_SHIFT)) & SSP_SSP_SSRSA_RTSA_MASK)
/*! @} */

/*! @name SSP_SSTSS - SSP Time Slot Status Register */
/*! @{ */
#define SSP_SSP_SSTSS_TSS_MASK (0x7U)
#define SSP_SSP_SSTSS_TSS_SHIFT (0U)
/*! TSS - Time Slot Status
 */
#define SSP_SSP_SSTSS_TSS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSTSS_TSS_SHIFT)) & SSP_SSP_SSTSS_TSS_MASK)
#define SSP_SSP_SSTSS_NMBSY_MASK (0x80000000U)
#define SSP_SSP_SSTSS_NMBSY_SHIFT (31U)
/*! NMBSY - Network Mode Busy
 *  0b0..SSPx port is in network mode and no frame is currently active.
 *  0b1..SSPx port is in network mode and a frame is currently active.
 */
#define SSP_SSP_SSTSS_NMBSY(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSTSS_NMBSY_SHIFT)) & SSP_SSP_SSTSS_NMBSY_MASK)
/*! @} */

/*! @name SSP_SSACD - SSP Audio Clock Divider Register */
/*! @{ */
#define SSP_SSP_SSACD_ACDS_MASK (0x7U)
#define SSP_SSP_SSACD_ACDS_SHIFT (0U)
/*! ACDS - Audio Clock Divider Select
 */
#define SSP_SSP_SSACD_ACDS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSACD_ACDS_SHIFT)) & SSP_SSP_SSACD_ACDS_MASK)
#define SSP_SSP_SSACD_SCDB_MASK (0x8U)
#define SSP_SSP_SSACD_SCDB_SHIFT (3U)
/*! SCDB - SYSCLK Divider Bypass
 *  0b0..SYSCLK is divided by 4 (if SCDX8=0) or 8 (if SCDX8=1) to generate internal audio clock.
 *  0b1..SYSCLK is not divided.
 */
#define SSP_SSP_SSACD_SCDB(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSACD_SCDB_SHIFT)) & SSP_SSP_SSACD_SCDB_MASK)
#define SSP_SSP_SSACD_ACPS_MASK (0x70U)
#define SSP_SSP_SSACD_ACPS_SHIFT (4U)
/*! ACPS - Audio Clock PLL Select
 */
#define SSP_SSP_SSACD_ACPS(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSACD_ACPS_SHIFT)) & SSP_SSP_SSACD_ACPS_MASK)
#define SSP_SSP_SSACD_SCDX8_MASK (0x80U)
#define SSP_SSP_SSACD_SCDX8_SHIFT (7U)
/*! SCDX8 - SYSCLK Divided By 8
 *  0b0..SYSCLK is divided by 4 to generate internal audio clock.
 *  0b1..SYSCLK is divided by 8 to generate internal audio clock.
 */
#define SSP_SSP_SSACD_SCDX8(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSACD_SCDX8_SHIFT)) & SSP_SSP_SSACD_SCDX8_MASK)
/*! @} */

/*! @name SSP_SSACDD - SSP Audio Clock Dither Divider Register */
/*! @{ */
#define SSP_SSP_SSACDD_DEN_MASK (0xFFFU)
#define SSP_SSP_SSACDD_DEN_SHIFT (0U)
/*! DEN - Denominator
 */
#define SSP_SSP_SSACDD_DEN(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSACDD_DEN_SHIFT)) & SSP_SSP_SSACDD_DEN_MASK)
#define SSP_SSP_SSACDD_NUM_MASK (0x7FFF0000U)
#define SSP_SSP_SSACDD_NUM_SHIFT (16U)
/*! NUM - Numerator
 */
#define SSP_SSP_SSACDD_NUM(x) (((uint32_t)(((uint32_t)(x)) << SSP_SSP_SSACDD_NUM_SHIFT)) & SSP_SSP_SSACDD_NUM_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group SSP_Register_Masks */

/* SSP - Peripheral instance base addresses */
/** Peripheral SSP0 base address */
#define SSP0_BASE (0x46020000u)
/** Peripheral SSP0 base pointer */
#define SSP0 ((SSP_Type *) SSP0_BASE)
/** Peripheral SSP1 base address */
#define SSP1_BASE (0x460D0000u)
/** Peripheral SSP1 base pointer */
#define SSP1 ((SSP_Type *) SSP1_BASE)
/** Peripheral SSP2 base address */
#define SSP2_BASE (0x48000000u)
/** Peripheral SSP2 base pointer */
#define SSP2 ((SSP_Type *) SSP2_BASE)
/** Array initializer of SSP peripheral base addresses */
#define SSP_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        SSP0_BASE, SSP1_BASE, SSP2_BASE                                                                                            \
    }
/** Array initializer of SSP peripheral base pointers */
#define SSP_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        SSP0, SSP1, SSP2                                                                                                           \
    }
/** Interrupt vectors for the SSP peripheral type */
#define SSP_IRQS                                                                                                                   \
    {                                                                                                                              \
        SSP0_IRQn, SSP1_IRQn, SSP2_IRQn                                                                                            \
    }

/*!
 * @}
 */ /* end of group SSP_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- SYS_CTL Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYS_CTL_Peripheral_Access_Layer SYS_CTL Peripheral Access Layer
 * @{
 */

/** SYS_CTL - Register Layout Typedef */
typedef struct
{
    __I uint32_t REV_ID; /**< Chip Revision Register, offset: 0x0 */
    __IO uint32_t MEM;   /**< Memory Space Configuration Register, offset: 0x4 */
    __IO uint32_t RAM0;  /**< RAM0 Control Register, offset: 0x8 */
    __IO uint32_t RAM1;  /**< RAM1 Control Register, offset: 0xC */
    __IO uint32_t RAM2;  /**< RAM2 Control Register, offset: 0x10 */
    __IO uint32_t RAM3;  /**< RAM3 Control Register, offset: 0x14 */
    uint8_t RESERVED_0[16];
    __IO uint32_t ROM;     /**< ROM Control Register, offset: 0x28 */
    __IO uint32_t AON_MEM; /**< AON_MEM Control Register, offset: 0x2C */
    uint8_t RESERVED_1[4];
    __IO uint32_t GPT_IN;      /**< GPT Pin-in Selection Register, offset: 0x34 */
    __IO uint32_t CAL;         /**< Calibration channel selection register, offset: 0x38 */
    __IO uint32_t PERI_SW_RST; /**< Peripheral Software Reset register, offset: 0x3C */
    __IO uint32_t USB_CTRL;    /**< USB Control Register, offset: 0x40 */
    uint8_t RESERVED_2[8];
    __IO uint32_t MMC_TC;        /**< SDIO Timing Control Register, offset: 0x4C */
    __IO uint32_t EXT_FLASH_SEL; /**< External Flash select register, offset: 0x50 */
} SYS_CTL_Type;

/* ----------------------------------------------------------------------------
   -- SYS_CTL Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SYS_CTL_Register_Masks SYS_CTL Register Masks
 * @{
 */

/*! @name REV_ID - Chip Revision Register */
/*! @{ */
#define SYS_CTL_REV_ID_REV_ID_MASK (0xFFFFFFFFU)
#define SYS_CTL_REV_ID_REV_ID_SHIFT (0U)
/*! REV_ID - Chip revision ID
 */
#define SYS_CTL_REV_ID_REV_ID(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_REV_ID_REV_ID_SHIFT)) & SYS_CTL_REV_ID_REV_ID_MASK)
/*! @} */

/*! @name MEM - Memory Space Configuration Register */
/*! @{ */
#define SYS_CTL_MEM_CFG_MASK (0x3U)
#define SYS_CTL_MEM_CFG_SHIFT (0U)
/*! CFG - Memory space configuration
 */
#define SYS_CTL_MEM_CFG(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_MEM_CFG_SHIFT)) & SYS_CTL_MEM_CFG_MASK)
/*! @} */

/*! @name RAM0 - RAM0 Control Register */
/*! @{ */
#define SYS_CTL_RAM0_RTC_MASK (0x3U)
#define SYS_CTL_RAM0_RTC_SHIFT (0U)
/*! RTC - RTC
 */
#define SYS_CTL_RAM0_RTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_RAM0_RTC_SHIFT)) & SYS_CTL_RAM0_RTC_MASK)
#define SYS_CTL_RAM0_WTC_MASK (0xCU)
#define SYS_CTL_RAM0_WTC_SHIFT (2U)
/*! WTC - WTC
 */
#define SYS_CTL_RAM0_WTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_RAM0_WTC_SHIFT)) & SYS_CTL_RAM0_WTC_MASK)
/*! @} */

/*! @name RAM1 - RAM1 Control Register */
/*! @{ */
#define SYS_CTL_RAM1_RTC_MASK (0x3U)
#define SYS_CTL_RAM1_RTC_SHIFT (0U)
/*! RTC - RTC
 */
#define SYS_CTL_RAM1_RTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_RAM1_RTC_SHIFT)) & SYS_CTL_RAM1_RTC_MASK)
#define SYS_CTL_RAM1_WTC_MASK (0xCU)
#define SYS_CTL_RAM1_WTC_SHIFT (2U)
/*! WTC - WTC
 */
#define SYS_CTL_RAM1_WTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_RAM1_WTC_SHIFT)) & SYS_CTL_RAM1_WTC_MASK)
/*! @} */

/*! @name RAM2 - RAM2 Control Register */
/*! @{ */
#define SYS_CTL_RAM2_RTC_MASK (0x3U)
#define SYS_CTL_RAM2_RTC_SHIFT (0U)
/*! RTC - RTC
 */
#define SYS_CTL_RAM2_RTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_RAM2_RTC_SHIFT)) & SYS_CTL_RAM2_RTC_MASK)
#define SYS_CTL_RAM2_WTC_MASK (0xCU)
#define SYS_CTL_RAM2_WTC_SHIFT (2U)
/*! WTC - WTC
 */
#define SYS_CTL_RAM2_WTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_RAM2_WTC_SHIFT)) & SYS_CTL_RAM2_WTC_MASK)
/*! @} */

/*! @name RAM3 - RAM3 Control Register */
/*! @{ */
#define SYS_CTL_RAM3_RTC_MASK (0x3U)
#define SYS_CTL_RAM3_RTC_SHIFT (0U)
/*! RTC - RTC
 */
#define SYS_CTL_RAM3_RTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_RAM3_RTC_SHIFT)) & SYS_CTL_RAM3_RTC_MASK)
#define SYS_CTL_RAM3_WTC_MASK (0xCU)
#define SYS_CTL_RAM3_WTC_SHIFT (2U)
/*! WTC - WTC
 */
#define SYS_CTL_RAM3_WTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_RAM3_WTC_SHIFT)) & SYS_CTL_RAM3_WTC_MASK)
/*! @} */

/*! @name ROM - ROM Control Register */
/*! @{ */
#define SYS_CTL_ROM_RTC_MASK (0x7U)
#define SYS_CTL_ROM_RTC_SHIFT (0U)
/*! RTC - RTC Reference
 */
#define SYS_CTL_ROM_RTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_ROM_RTC_SHIFT)) & SYS_CTL_ROM_RTC_MASK)
#define SYS_CTL_ROM_RTC_REF_MASK (0x18U)
#define SYS_CTL_ROM_RTC_REF_SHIFT (3U)
/*! RTC_REF - RTC Reference
 */
#define SYS_CTL_ROM_RTC_REF(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_ROM_RTC_REF_SHIFT)) & SYS_CTL_ROM_RTC_REF_MASK)
/*! @} */

/*! @name AON_MEM - AON_MEM Control Register */
/*! @{ */
#define SYS_CTL_AON_MEM_RTC_MASK (0x3U)
#define SYS_CTL_AON_MEM_RTC_SHIFT (0U)
/*! RTC - RTC
 */
#define SYS_CTL_AON_MEM_RTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_AON_MEM_RTC_SHIFT)) & SYS_CTL_AON_MEM_RTC_MASK)
#define SYS_CTL_AON_MEM_WTC_MASK (0xCU)
#define SYS_CTL_AON_MEM_WTC_SHIFT (2U)
/*! WTC - WTC
 */
#define SYS_CTL_AON_MEM_WTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_AON_MEM_WTC_SHIFT)) & SYS_CTL_AON_MEM_WTC_MASK)
/*! @} */

/*! @name GPT_IN - GPT Pin-in Selection Register */
/*! @{ */
#define SYS_CTL_GPT_IN_SEL_MASK (0x1U)
#define SYS_CTL_GPT_IN_SEL_SHIFT (0U)
/*! sel - Select GPT Pin
 */
#define SYS_CTL_GPT_IN_SEL(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_GPT_IN_SEL_SHIFT)) & SYS_CTL_GPT_IN_SEL_MASK)
/*! @} */

/*! @name CAL - Calibration channel selection register */
/*! @{ */
#define SYS_CTL_CAL_RTC_DUTY_MASK (0x1U)
#define SYS_CTL_CAL_RTC_DUTY_SHIFT (0U)
/*! RTC_Duty - RTC Duty
 */
#define SYS_CTL_CAL_RTC_DUTY(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_CAL_RTC_DUTY_SHIFT)) & SYS_CTL_CAL_RTC_DUTY_MASK)
#define SYS_CTL_CAL_RTC_TRIG_MASK (0x2U)
#define SYS_CTL_CAL_RTC_TRIG_SHIFT (1U)
/*! RTC_Trig - RTC Trigger
 */
#define SYS_CTL_CAL_RTC_TRIG(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_CAL_RTC_TRIG_SHIFT)) & SYS_CTL_CAL_RTC_TRIG_MASK)
/*! @} */

/*! @name PERI_SW_RST - Peripheral Software Reset register */
/*! @{ */
#define SYS_CTL_PERI_SW_RST_WDT_RSTN_EN_MASK (0x1U)
#define SYS_CTL_PERI_SW_RST_WDT_RSTN_EN_SHIFT (0U)
/*! wdt_rstn_en - WDT Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_WDT_RSTN_EN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_WDT_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_WDT_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_USB_RSTN_EN_MASK (0x2U)
#define SYS_CTL_PERI_SW_RST_USB_RSTN_EN_SHIFT (1U)
/*! usb_rstn_en - USB Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_USB_RSTN_EN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_USB_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_USB_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_SDIO1_RSTN_EN_MASK (0x4U)
#define SYS_CTL_PERI_SW_RST_SDIO1_RSTN_EN_SHIFT (2U)
/*! sdio1_rstn_en - SDIO1 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_SDIO1_RSTN_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_SDIO1_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_SDIO1_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_SDIO0_RSTN_EN_MASK (0x8U)
#define SYS_CTL_PERI_SW_RST_SDIO0_RSTN_EN_SHIFT (3U)
/*! sdio0_rstn_en - SDIO0 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_SDIO0_RSTN_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_SDIO0_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_SDIO0_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_GPT3_RSTN_EN_MASK (0x10U)
#define SYS_CTL_PERI_SW_RST_GPT3_RSTN_EN_SHIFT (4U)
/*! gpt3_rstn_en - GPT3 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_GPT3_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_GPT3_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_GPT3_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_GPT2_RSTN_EN_MASK (0x20U)
#define SYS_CTL_PERI_SW_RST_GPT2_RSTN_EN_SHIFT (5U)
/*! gpt2_rstn_en - GPT2 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_GPT2_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_GPT2_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_GPT2_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_GPT1_RSTN_EN_MASK (0x40U)
#define SYS_CTL_PERI_SW_RST_GPT1_RSTN_EN_SHIFT (6U)
/*! gpt1_rstn_en - GPT1 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_GPT1_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_GPT1_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_GPT1_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_GPT0_RSTN_EN_MASK (0x80U)
#define SYS_CTL_PERI_SW_RST_GPT0_RSTN_EN_SHIFT (7U)
/*! gpt0_rstn_en - GPT0 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_GPT0_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_GPT0_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_GPT0_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_SSP2_RSTN_EN_MASK (0x100U)
#define SYS_CTL_PERI_SW_RST_SSP2_RSTN_EN_SHIFT (8U)
/*! ssp2_rstn_en - SSP2 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_SSP2_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_SSP2_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_SSP2_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_SSP1_RSTN_EN_MASK (0x200U)
#define SYS_CTL_PERI_SW_RST_SSP1_RSTN_EN_SHIFT (9U)
/*! ssp1_rstn_en - SSP01 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_SSP1_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_SSP1_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_SSP1_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_SSP0_RSTN_EN_MASK (0x400U)
#define SYS_CTL_PERI_SW_RST_SSP0_RSTN_EN_SHIFT (10U)
/*! ssp0_rstn_en - SSP0 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_SSP0_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_SSP0_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_SSP0_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_I2C2_RSTN_EN_MASK (0x800U)
#define SYS_CTL_PERI_SW_RST_I2C2_RSTN_EN_SHIFT (11U)
/*! i2c2_rstn_en - I2C2 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_I2C2_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_I2C2_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_I2C2_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_I2C1_RSTN_EN_MASK (0x1000U)
#define SYS_CTL_PERI_SW_RST_I2C1_RSTN_EN_SHIFT (12U)
/*! i2c1_rstn_en - I2C1 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_I2C1_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_I2C1_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_I2C1_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_I2C0_RSTN_EN_MASK (0x2000U)
#define SYS_CTL_PERI_SW_RST_I2C0_RSTN_EN_SHIFT (13U)
/*! i2c0_rstn_en - I2C0 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_I2C0_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_I2C0_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_I2C0_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_UART3_RSTN_EN_MASK (0x4000U)
#define SYS_CTL_PERI_SW_RST_UART3_RSTN_EN_SHIFT (14U)
/*! uart3_rstn_en - UART3 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_UART3_RSTN_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_UART3_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_UART3_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_UART2_RSTN_EN_MASK (0x8000U)
#define SYS_CTL_PERI_SW_RST_UART2_RSTN_EN_SHIFT (15U)
/*! uart2_rstn_en - UART2 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_UART2_RSTN_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_UART2_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_UART2_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_KEYPAD_RSTN_EN_MASK (0x10000U)
#define SYS_CTL_PERI_SW_RST_KEYPAD_RSTN_EN_SHIFT (16U)
/*! keypad_rstn_en - Keypad Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_KEYPAD_RSTN_EN(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_KEYPAD_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_KEYPAD_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_UART0_RSTN_EN_MASK (0x20000U)
#define SYS_CTL_PERI_SW_RST_UART0_RSTN_EN_SHIFT (17U)
/*! uart0_rstn_en - UART0 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_UART0_RSTN_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_UART0_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_UART0_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_FLASH_QSPI_RSTN_EN_MASK (0x40000U)
#define SYS_CTL_PERI_SW_RST_FLASH_QSPI_RSTN_EN_SHIFT (18U)
/*! flash_qspi_rstn_en - Flash QSPI Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_FLASH_QSPI_RSTN_EN(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_FLASH_QSPI_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_FLASH_QSPI_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_QSPI1_RSTN_EN_MASK (0x80000U)
#define SYS_CTL_PERI_SW_RST_QSPI1_RSTN_EN_SHIFT (19U)
/*! qspi1_rstn_en - QSPI1 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_QSPI1_RSTN_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_QSPI1_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_QSPI1_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_QSPI0_RSTN_EN_MASK (0x100000U)
#define SYS_CTL_PERI_SW_RST_QSPI0_RSTN_EN_SHIFT (20U)
/*! qspi0_rstn_en - QSPI0 Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_QSPI0_RSTN_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_QSPI0_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_QSPI0_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_IR_RSTN_EN_MASK (0x200000U)
#define SYS_CTL_PERI_SW_RST_IR_RSTN_EN_SHIFT (21U)
/*! ir_rstn_en - IR Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_IR_RSTN_EN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_IR_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_IR_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_PDM_RSTN_EN_MASK (0x400000U)
#define SYS_CTL_PERI_SW_RST_PDM_RSTN_EN_SHIFT (22U)
/*! pdm_rstn_en - PDM Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_PDM_RSTN_EN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_PDM_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_PDM_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_USIM_RSTN_EN_MASK (0x800000U)
#define SYS_CTL_PERI_SW_RST_USIM_RSTN_EN_SHIFT (23U)
/*! usim_rstn_en - USIM Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_USIM_RSTN_EN(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_USIM_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_USIM_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_CB_RSTN_EN_MASK (0x1000000U)
#define SYS_CTL_PERI_SW_RST_CB_RSTN_EN_SHIFT (24U)
/*! cb_rstn_en - CB Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_CB_RSTN_EN(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_CB_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_CB_RSTN_EN_MASK)
#define SYS_CTL_PERI_SW_RST_GAU_RSTN_EN_MASK (0x4000000U)
#define SYS_CTL_PERI_SW_RST_GAU_RSTN_EN_SHIFT (26U)
/*! gau_rstn_en - GAU Reset_n Enable
 */
#define SYS_CTL_PERI_SW_RST_GAU_RSTN_EN(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_PERI_SW_RST_GAU_RSTN_EN_SHIFT)) & SYS_CTL_PERI_SW_RST_GAU_RSTN_EN_MASK)
/*! @} */

/*! @name USB_CTRL - USB Control Register */
/*! @{ */
#define SYS_CTL_USB_CTRL_USB_PU_PLL_MASK (0x1U)
#define SYS_CTL_USB_CTRL_USB_PU_PLL_SHIFT (0U)
/*! usb_PU_PLL - USB PU PLL
 */
#define SYS_CTL_USB_CTRL_USB_PU_PLL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_USB_PU_PLL_SHIFT)) & SYS_CTL_USB_CTRL_USB_PU_PLL_MASK)
#define SYS_CTL_USB_CTRL_USB_PU_OTG_MASK (0x2U)
#define SYS_CTL_USB_CTRL_USB_PU_OTG_SHIFT (1U)
/*! usb_PU_OTG - USB PU OTG
 */
#define SYS_CTL_USB_CTRL_USB_PU_OTG(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_USB_PU_OTG_SHIFT)) & SYS_CTL_USB_CTRL_USB_PU_OTG_MASK)
#define SYS_CTL_USB_CTRL_USB_PU_MASK (0x4U)
#define SYS_CTL_USB_CTRL_USB_PU_SHIFT (2U)
/*! usb_PU - USB PU
 */
#define SYS_CTL_USB_CTRL_USB_PU(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_USB_PU_SHIFT)) & SYS_CTL_USB_CTRL_USB_PU_MASK)
#define SYS_CTL_USB_CTRL_REG_RX_PDFVSSM_MASK (0x8U)
#define SYS_CTL_USB_CTRL_REG_RX_PDFVSSM_SHIFT (3U)
/*! reg_rx_pdfvssm - reg_rx_pdfvssm
 */
#define SYS_CTL_USB_CTRL_REG_RX_PDFVSSM(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_REG_RX_PDFVSSM_SHIFT)) & SYS_CTL_USB_CTRL_REG_RX_PDFVSSM_MASK)
#define SYS_CTL_USB_CTRL_REG_RX_PDLVMC_MASK (0x10U)
#define SYS_CTL_USB_CTRL_REG_RX_PDLVMC_SHIFT (4U)
/*! reg_rx_pdlvmc - reg_rx_pdlvmc
 */
#define SYS_CTL_USB_CTRL_REG_RX_PDLVMC(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_REG_RX_PDLVMC_SHIFT)) & SYS_CTL_USB_CTRL_REG_RX_PDLVMC_MASK)
#define SYS_CTL_USB_CTRL_REG_TX_PDFVSSM_MASK (0x20U)
#define SYS_CTL_USB_CTRL_REG_TX_PDFVSSM_SHIFT (5U)
/*! reg_tx_pdfvssm - reg_tx_pdfvssm
 */
#define SYS_CTL_USB_CTRL_REG_TX_PDFVSSM(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_REG_TX_PDFVSSM_SHIFT)) & SYS_CTL_USB_CTRL_REG_TX_PDFVSSM_MASK)
#define SYS_CTL_USB_CTRL_REG_TX_PDLVMC_MASK (0x40U)
#define SYS_CTL_USB_CTRL_REG_TX_PDLVMC_SHIFT (6U)
/*! reg_tx_pdlvmc - reg_tx_pdlvmc
 */
#define SYS_CTL_USB_CTRL_REG_TX_PDLVMC(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_REG_TX_PDLVMC_SHIFT)) & SYS_CTL_USB_CTRL_REG_TX_PDLVMC_MASK)
#define SYS_CTL_USB_CTRL_REG_RX_BUF_RTC_MASK (0x180U)
#define SYS_CTL_USB_CTRL_REG_RX_BUF_RTC_SHIFT (7U)
/*! reg_rx_buf_rtc - reg_rx_buf_rtc
 */
#define SYS_CTL_USB_CTRL_REG_RX_BUF_RTC(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_REG_RX_BUF_RTC_SHIFT)) & SYS_CTL_USB_CTRL_REG_RX_BUF_RTC_MASK)
#define SYS_CTL_USB_CTRL_REG_RX_BUF_WTC_MASK (0x600U)
#define SYS_CTL_USB_CTRL_REG_RX_BUF_WTC_SHIFT (9U)
/*! reg_rx_buf_wtc - reg_rx_buf_wtc
 */
#define SYS_CTL_USB_CTRL_REG_RX_BUF_WTC(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_REG_RX_BUF_WTC_SHIFT)) & SYS_CTL_USB_CTRL_REG_RX_BUF_WTC_MASK)
#define SYS_CTL_USB_CTRL_REG_TX_BUF_RTC_MASK (0x1800U)
#define SYS_CTL_USB_CTRL_REG_TX_BUF_RTC_SHIFT (11U)
/*! reg_tx_buf_rtc - reg_tx_buf_rtc
 */
#define SYS_CTL_USB_CTRL_REG_TX_BUF_RTC(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_REG_TX_BUF_RTC_SHIFT)) & SYS_CTL_USB_CTRL_REG_TX_BUF_RTC_MASK)
#define SYS_CTL_USB_CTRL_REG_TX_BUF_WTC_MASK (0x6000U)
#define SYS_CTL_USB_CTRL_REG_TX_BUF_WTC_SHIFT (13U)
/*! reg_tx_buf_wtc - reg_tx_buf_wtc
 */
#define SYS_CTL_USB_CTRL_REG_TX_BUF_WTC(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_REG_TX_BUF_WTC_SHIFT)) & SYS_CTL_USB_CTRL_REG_TX_BUF_WTC_MASK)
#define SYS_CTL_USB_CTRL_USB_RESUME_MASK (0x8000U)
#define SYS_CTL_USB_CTRL_USB_RESUME_SHIFT (15U)
/*! usb_resume - USB Resume
 */
#define SYS_CTL_USB_CTRL_USB_RESUME(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_USB_RESUME_SHIFT)) & SYS_CTL_USB_CTRL_USB_RESUME_MASK)
#define SYS_CTL_USB_CTRL_IDDQ_TEST_MASK (0x10000U)
#define SYS_CTL_USB_CTRL_IDDQ_TEST_SHIFT (16U)
/*! iddq_test - iddq Test
 */
#define SYS_CTL_USB_CTRL_IDDQ_TEST(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_IDDQ_TEST_SHIFT)) & SYS_CTL_USB_CTRL_IDDQ_TEST_MASK)
#define SYS_CTL_USB_CTRL_SOFT_PHY_RESET_MASK (0x20000U)
#define SYS_CTL_USB_CTRL_SOFT_PHY_RESET_SHIFT (17U)
/*! soft_phy_reset - Soft PHY Reset
 */
#define SYS_CTL_USB_CTRL_SOFT_PHY_RESET(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_SOFT_PHY_RESET_SHIFT)) & SYS_CTL_USB_CTRL_SOFT_PHY_RESET_MASK)
#define SYS_CTL_USB_CTRL_PHY_RESET_SEL_MASK (0x40000U)
#define SYS_CTL_USB_CTRL_PHY_RESET_SEL_SHIFT (18U)
/*! phy_reset_sel - PHY Reset Select
 */
#define SYS_CTL_USB_CTRL_PHY_RESET_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_PHY_RESET_SEL_SHIFT)) & SYS_CTL_USB_CTRL_PHY_RESET_SEL_MASK)
#define SYS_CTL_USB_CTRL_SOFT_UTMI_SESSEND_MASK (0x80000U)
#define SYS_CTL_USB_CTRL_SOFT_UTMI_SESSEND_SHIFT (19U)
/*! soft_utmi_sessend - Soft UTMI sessend
 */
#define SYS_CTL_USB_CTRL_SOFT_UTMI_SESSEND(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_SOFT_UTMI_SESSEND_SHIFT)) & SYS_CTL_USB_CTRL_SOFT_UTMI_SESSEND_MASK)
#define SYS_CTL_USB_CTRL_SOFT_UTMI_XVALID_MASK (0x100000U)
#define SYS_CTL_USB_CTRL_SOFT_UTMI_XVALID_SHIFT (20U)
/*! soft_utmi_xvalid - Soft UTMI xvalid
 */
#define SYS_CTL_USB_CTRL_SOFT_UTMI_XVALID(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_SOFT_UTMI_XVALID_SHIFT)) & SYS_CTL_USB_CTRL_SOFT_UTMI_XVALID_MASK)
#define SYS_CTL_USB_CTRL_SOFT_UTMI_IDDIG_MASK (0x200000U)
#define SYS_CTL_USB_CTRL_SOFT_UTMI_IDDIG_SHIFT (21U)
/*! soft_utmi_iddig - Soft UTMI iddig
 */
#define SYS_CTL_USB_CTRL_SOFT_UTMI_IDDIG(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_SOFT_UTMI_IDDIG_SHIFT)) & SYS_CTL_USB_CTRL_SOFT_UTMI_IDDIG_MASK)
#define SYS_CTL_USB_CTRL_MAC_CTRL_SEL_MASK (0x400000U)
#define SYS_CTL_USB_CTRL_MAC_CTRL_SEL_SHIFT (22U)
/*! mac_ctrl_sel - MAC Control Select
 */
#define SYS_CTL_USB_CTRL_MAC_CTRL_SEL(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_USB_CTRL_MAC_CTRL_SEL_SHIFT)) & SYS_CTL_USB_CTRL_MAC_CTRL_SEL_MASK)
/*! @} */

/*! @name MMC_TC - SDIO Timing Control Register */
/*! @{ */
#define SYS_CTL_MMC_TC_MMC_RTC_MASK (0x3U)
#define SYS_CTL_MMC_TC_MMC_RTC_SHIFT (0U)
/*! mmc_rtc - MMC RTC
 */
#define SYS_CTL_MMC_TC_MMC_RTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_MMC_TC_MMC_RTC_SHIFT)) & SYS_CTL_MMC_TC_MMC_RTC_MASK)
#define SYS_CTL_MMC_TC_MMC_WTC_MASK (0xCU)
#define SYS_CTL_MMC_TC_MMC_WTC_SHIFT (2U)
/*! mmc_wtc - MMC WTC
 */
#define SYS_CTL_MMC_TC_MMC_WTC(x) (((uint32_t)(((uint32_t)(x)) << SYS_CTL_MMC_TC_MMC_WTC_SHIFT)) & SYS_CTL_MMC_TC_MMC_WTC_MASK)
/*! @} */

/*! @name EXT_FLASH_SEL - External Flash select register */
/*! @{ */
#define SYS_CTL_EXT_FLASH_SEL_EXTERNAL_FLASH_SEL_MASK (0x1U)
#define SYS_CTL_EXT_FLASH_SEL_EXTERNAL_FLASH_SEL_SHIFT (0U)
/*! external_flash_sel - Flash Controller Connect
 *  0b0..in-package FLASH
 *  0b1..external FLASH
 */
#define SYS_CTL_EXT_FLASH_SEL_EXTERNAL_FLASH_SEL(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << SYS_CTL_EXT_FLASH_SEL_EXTERNAL_FLASH_SEL_SHIFT)) &                                             \
     SYS_CTL_EXT_FLASH_SEL_EXTERNAL_FLASH_SEL_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group SYS_CTL_Register_Masks */

/* SYS_CTL - Peripheral instance base addresses */
/** Peripheral SYS_CTL base address */
#define SYS_CTL_BASE (0x480B0000u)
/** Peripheral SYS_CTL base pointer */
#define SYS_CTL ((SYS_CTL_Type *) SYS_CTL_BASE)
/** Array initializer of SYS_CTL peripheral base addresses */
#define SYS_CTL_BASE_ADDRS                                                                                                         \
    {                                                                                                                              \
        SYS_CTL_BASE                                                                                                               \
    }
/** Array initializer of SYS_CTL peripheral base pointers */
#define SYS_CTL_BASE_PTRS                                                                                                          \
    {                                                                                                                              \
        SYS_CTL                                                                                                                    \
    }

/*!
 * @}
 */ /* end of group SYS_CTL_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- UART Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Peripheral_Access_Layer UART Peripheral Access Layer
 * @{
 */

/** UART - Register Layout Typedef */
typedef struct
{
    union
    {                      /* offset: 0x0 */
        __IO uint32_t DLL; /**< Divisor Latch Low Byte Registers, offset: 0x0 */
        __I uint32_t RBR;  /**< Receive Buffer Register, offset: 0x0 */
        __O uint32_t THR;  /**< Transmit Holding Register, offset: 0x0 */
    };
    union
    {                      /* offset: 0x4 */
        __IO uint32_t DLH; /**< Divisor Latch High Byte Registers, offset: 0x4 */
        __IO uint32_t IER; /**< Interrupt Enable Register, offset: 0x4 */
    };
    union
    {                     /* offset: 0x8 */
        __O uint32_t FCR; /**< FIFO Control Register, offset: 0x8 */
        __I uint32_t IIR; /**< Interrupt Identification Register, offset: 0x8 */
    };
    __IO uint32_t LCR; /**< Line Control Register, offset: 0xC */
    __IO uint32_t MCR; /**< Modem Control Register, offset: 0x10 */
    __I uint32_t LSR;  /**< Line Status Register, offset: 0x14 */
    __I uint32_t MSR;  /**< Modem Status Register, offset: 0x18 */
    __IO uint32_t SCR; /**< Scratchpad Register, offset: 0x1C */
    __IO uint32_t ISR; /**< Infrared Selection Register, offset: 0x20 */
    __I uint32_t RFOR; /**< Receive FIFO Occupancy Register, offset: 0x24 */
    __IO uint32_t ABR; /**< Auto-Baud Control Register, offset: 0x28 */
    __I uint32_t ACR;  /**< Auto-Baud Count Register, offset: 0x2C */
} UART_Type;

/* ----------------------------------------------------------------------------
   -- UART Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Register_Masks UART Register Masks
 * @{
 */

/*! @name DLL - Divisor Latch Low Byte Registers */
/*! @{ */
#define UART_DLL_DLL_MASK (0xFFU)
#define UART_DLL_DLL_SHIFT (0U)
/*! DLL - DLL, Low-byte compare value to generate baud rate
 */
#define UART_DLL_DLL(x) (((uint32_t)(((uint32_t)(x)) << UART_DLL_DLL_SHIFT)) & UART_DLL_DLL_MASK)
/*! @} */

/*! @name RBR - Receive Buffer Register */
/*! @{ */
#define UART_RBR_BYTE_0_MASK (0xFFU)
#define UART_RBR_BYTE_0_SHIFT (0U)
/*! BYTE_0 - Byte 0
 */
#define UART_RBR_BYTE_0(x) (((uint32_t)(((uint32_t)(x)) << UART_RBR_BYTE_0_SHIFT)) & UART_RBR_BYTE_0_MASK)
#define UART_RBR_BYTE_1_MASK (0xFF00U)
#define UART_RBR_BYTE_1_SHIFT (8U)
/*! BYTE_1 - Byte 1(valid only in 32-bit peripheral bus mode)
 */
#define UART_RBR_BYTE_1(x) (((uint32_t)(((uint32_t)(x)) << UART_RBR_BYTE_1_SHIFT)) & UART_RBR_BYTE_1_MASK)
#define UART_RBR_BYTE_2_MASK (0xFF0000U)
#define UART_RBR_BYTE_2_SHIFT (16U)
/*! BYTE_2 - Byte 2(valid only in 32-bit peripheral bus mode)
 */
#define UART_RBR_BYTE_2(x) (((uint32_t)(((uint32_t)(x)) << UART_RBR_BYTE_2_SHIFT)) & UART_RBR_BYTE_2_MASK)
#define UART_RBR_BYTE_3_MASK (0xFF000000U)
#define UART_RBR_BYTE_3_SHIFT (24U)
/*! BYTE_3 - Byte 3(valid only in 32-bit peripheral bus mode)
 */
#define UART_RBR_BYTE_3(x) (((uint32_t)(((uint32_t)(x)) << UART_RBR_BYTE_3_SHIFT)) & UART_RBR_BYTE_3_MASK)
/*! @} */

/*! @name THR - Transmit Holding Register */
/*! @{ */
#define UART_THR_BYTE_0_MASK (0xFFU)
#define UART_THR_BYTE_0_SHIFT (0U)
/*! BYTE_0 - Byte 0
 */
#define UART_THR_BYTE_0(x) (((uint32_t)(((uint32_t)(x)) << UART_THR_BYTE_0_SHIFT)) & UART_THR_BYTE_0_MASK)
#define UART_THR_BYTE_1_MASK (0xFF00U)
#define UART_THR_BYTE_1_SHIFT (8U)
/*! BYTE_1 - Byte 1 (valid only in 32-bit peripheral bus mode)
 */
#define UART_THR_BYTE_1(x) (((uint32_t)(((uint32_t)(x)) << UART_THR_BYTE_1_SHIFT)) & UART_THR_BYTE_1_MASK)
#define UART_THR_BYTE_2_MASK (0xFF0000U)
#define UART_THR_BYTE_2_SHIFT (16U)
/*! BYTE_2 - Byte 2 (valid only in 32-bit peripheral bus mode)
 */
#define UART_THR_BYTE_2(x) (((uint32_t)(((uint32_t)(x)) << UART_THR_BYTE_2_SHIFT)) & UART_THR_BYTE_2_MASK)
#define UART_THR_BYTE_3_MASK (0xFF000000U)
#define UART_THR_BYTE_3_SHIFT (24U)
/*! BYTE_3 - Byte 3 (valid only in 32-bit peripheral bus mode)
 */
#define UART_THR_BYTE_3(x) (((uint32_t)(((uint32_t)(x)) << UART_THR_BYTE_3_SHIFT)) & UART_THR_BYTE_3_MASK)
/*! @} */

/*! @name DLH - Divisor Latch High Byte Registers */
/*! @{ */
#define UART_DLH_DLH_MASK (0xFFU)
#define UART_DLH_DLH_SHIFT (0U)
/*! DLH - DLH, High-byte compare value to generate baud rate
 */
#define UART_DLH_DLH(x) (((uint32_t)(((uint32_t)(x)) << UART_DLH_DLH_SHIFT)) & UART_DLH_DLH_MASK)
/*! @} */

/*! @name IER - Interrupt Enable Register */
/*! @{ */
#define UART_IER_RAVIE_MASK (0x1U)
#define UART_IER_RAVIE_SHIFT (0U)
/*! RAVIE - Receiver Data Available Interrupt Enable (Source IIR[IID])
 *  0b0..Receiver data available(trigger threshold reached) interrupt disabled
 *  0b1..Receiver data available(trigger threshold reached) interrupt enabled
 */
#define UART_IER_RAVIE(x) (((uint32_t)(((uint32_t)(x)) << UART_IER_RAVIE_SHIFT)) & UART_IER_RAVIE_MASK)
#define UART_IER_TIE_MASK (0x2U)
#define UART_IER_TIE_SHIFT (1U)
/*! TIE - Transmit Data Request Interrupt Enable(Source IIR[IID])
 *  0b0..Transmit FIFO data request interrupt disabled
 *  0b1..Transmit FIFO data request interrupt enabled
 */
#define UART_IER_TIE(x) (((uint32_t)(((uint32_t)(x)) << UART_IER_TIE_SHIFT)) & UART_IER_TIE_MASK)
#define UART_IER_RLSE_MASK (0x4U)
#define UART_IER_RLSE_SHIFT (2U)
/*! RLSE - Receiver Line Status Interrupt Enable (Source IIR[IID])
 *  0b0..Receiver line status interrupt disabled
 *  0b1..Receiver line status interrupt enabled
 */
#define UART_IER_RLSE(x) (((uint32_t)(((uint32_t)(x)) << UART_IER_RLSE_SHIFT)) & UART_IER_RLSE_MASK)
#define UART_IER_MIE_MASK (0x8U)
#define UART_IER_MIE_SHIFT (3U)
/*! MIE - Modem Interrupt Enable (Source IIR[IID])
 *  0b0..Modem status interrupt disabled
 *  0b1..Modem status interrupt enabled
 */
#define UART_IER_MIE(x) (((uint32_t)(((uint32_t)(x)) << UART_IER_MIE_SHIFT)) & UART_IER_MIE_MASK)
#define UART_IER_RTOIE_MASK (0x10U)
#define UART_IER_RTOIE_SHIFT (4U)
/*! RTOIE - Receiver Time-out Interrupt Enable (Source IIR[TOD])
 *  0b0..Receiver data time-out interrupt disabled
 *  0b1..Receiver data time-out interrupt enabled
 */
#define UART_IER_RTOIE(x) (((uint32_t)(((uint32_t)(x)) << UART_IER_RTOIE_SHIFT)) & UART_IER_RTOIE_MASK)
#define UART_IER_NRZE_MASK (0x20U)
#define UART_IER_NRZE_SHIFT (5U)
/*! NRZE - NRZ Coding Enable
 *  0b0..NRZ coding disabled
 *  0b1..NRZ coding enabled
 */
#define UART_IER_NRZE(x) (((uint32_t)(((uint32_t)(x)) << UART_IER_NRZE_SHIFT)) & UART_IER_NRZE_MASK)
#define UART_IER_UUE_MASK (0x40U)
#define UART_IER_UUE_SHIFT (6U)
/*! UUE - UART Unit Enable
 *  0b0..the unit is disabled
 *  0b1..the unit is enabled
 */
#define UART_IER_UUE(x) (((uint32_t)(((uint32_t)(x)) << UART_IER_UUE_SHIFT)) & UART_IER_UUE_MASK)
#define UART_IER_DMAE_MASK (0x80U)
#define UART_IER_DMAE_SHIFT (7U)
/*! DMAE - DMA Requests Enable
 *  0b0..DMA requests are disabled
 *  0b1..DMA requests are enabled
 */
#define UART_IER_DMAE(x) (((uint32_t)(((uint32_t)(x)) << UART_IER_DMAE_SHIFT)) & UART_IER_DMAE_MASK)
#define UART_IER_HSE_MASK (0x100U)
#define UART_IER_HSE_SHIFT (8U)
/*! HSE - High Speed UART Enable (HSE)
 */
#define UART_IER_HSE(x) (((uint32_t)(((uint32_t)(x)) << UART_IER_HSE_SHIFT)) & UART_IER_HSE_MASK)
/*! @} */

/*! @name FCR - FIFO Control Register */
/*! @{ */
#define UART_FCR_TRFIFOE_MASK (0x1U)
#define UART_FCR_TRFIFOE_SHIFT (0U)
/*! TRFIFOE - Transmit and Receive FIFO Enable
 *  0b0..FIFOs are disabled
 *  0b1..FIFOs are enabled
 */
#define UART_FCR_TRFIFOE(x) (((uint32_t)(((uint32_t)(x)) << UART_FCR_TRFIFOE_SHIFT)) & UART_FCR_TRFIFOE_MASK)
#define UART_FCR_RESETRF_MASK (0x2U)
#define UART_FCR_RESETRF_SHIFT (1U)
/*! RESETRF - Reset Receive FIFO
 *  0b0..Writing 0 has no effect
 *  0b1..The receive FIFO is cleared
 */
#define UART_FCR_RESETRF(x) (((uint32_t)(((uint32_t)(x)) << UART_FCR_RESETRF_SHIFT)) & UART_FCR_RESETRF_MASK)
#define UART_FCR_RESETTF_MASK (0x4U)
#define UART_FCR_RESETTF_SHIFT (2U)
/*! RESETTF - Reset Transmit FIFO
 *  0b0..Writing 0 has no effect
 *  0b1..The transmit FIFO is cleared
 */
#define UART_FCR_RESETTF(x) (((uint32_t)(((uint32_t)(x)) << UART_FCR_RESETTF_SHIFT)) & UART_FCR_RESETTF_MASK)
#define UART_FCR_TIL_MASK (0x8U)
#define UART_FCR_TIL_SHIFT (3U)
/*! TIL - Transmitter Interrupt Level
 *  0b0..Interrupt/DMA request when FIFO is half empty
 *  0b1..Interrupt/DMA request when FIFO is empty
 */
#define UART_FCR_TIL(x) (((uint32_t)(((uint32_t)(x)) << UART_FCR_TIL_SHIFT)) & UART_FCR_TIL_MASK)
#define UART_FCR_BUS_MASK (0x20U)
#define UART_FCR_BUS_SHIFT (5U)
/*! BUS - 32-Bit Peripheral Bus
 *  0b0..8-bit peripheral bus
 *  0b1..32-bit peripheral bus, Transmit and Receive FIFO need to be enabled in this mode
 */
#define UART_FCR_BUS(x) (((uint32_t)(((uint32_t)(x)) << UART_FCR_BUS_SHIFT)) & UART_FCR_BUS_MASK)
#define UART_FCR_ITL_MASK (0xC0U)
#define UART_FCR_ITL_SHIFT (6U)
/*! ITL - Interrupt Trigger Level
 *  0b00..1 byte or more in FIFO causes interrupt (Not valid in DMA mode)
 *  0b01..8 bytes or more in FIFO cause interrupt and DMA request
 *  0b10..16 bytes or more in FIFO causes interrupt and DMA request
 *  0b11..32 bytes or more in FIFO causes interrupt and DMA request
 */
#define UART_FCR_ITL(x) (((uint32_t)(((uint32_t)(x)) << UART_FCR_ITL_SHIFT)) & UART_FCR_ITL_MASK)
/*! @} */

/*! @name IIR - Interrupt Identification Register */
/*! @{ */
#define UART_IIR_NIP_MASK (0x1U)
#define UART_IIR_NIP_SHIFT (0U)
/*! NIP - Interrupt is pending
 *  0b0..Interrupt is pending (active low)
 *  0b1..No interrupt is pending
 */
#define UART_IIR_NIP(x) (((uint32_t)(((uint32_t)(x)) << UART_IIR_NIP_SHIFT)) & UART_IIR_NIP_MASK)
#define UART_IIR_IID10_MASK (0x6U)
#define UART_IIR_IID10_SHIFT (1U)
/*! IID10 - Interrupt Source Encoded
 *  0b00..Modern Status (CTS)
 *  0b01..Transmit FIFO request data
 *  0b10..Receive data available
 *  0b11..Receive error (overrun)
 */
#define UART_IIR_IID10(x) (((uint32_t)(((uint32_t)(x)) << UART_IIR_IID10_SHIFT)) & UART_IIR_IID10_MASK)
#define UART_IIR_TOD_MASK (0x8U)
#define UART_IIR_TOD_SHIFT (3U)
/*! TOD - Timeout Detected
 *  0b0..No timeout interrupt is pending
 *  0b1..Timeout interrupt is pending (FIFO mode only)
 */
#define UART_IIR_TOD(x) (((uint32_t)(((uint32_t)(x)) << UART_IIR_TOD_SHIFT)) & UART_IIR_TOD_MASK)
#define UART_IIR_ABL_MASK (0x10U)
#define UART_IIR_ABL_SHIFT (4U)
/*! ABL - Auto-baud Lock
 *  0b0..Auto-baud circuitry has not programmed Divisor Latch registers (DLR)
 *  0b1..Divisor Latch registers (DLR) programmed by auto-baud circuitry
 */
#define UART_IIR_ABL(x) (((uint32_t)(((uint32_t)(x)) << UART_IIR_ABL_SHIFT)) & UART_IIR_ABL_MASK)
#define UART_IIR_EOC_MASK (0x20U)
#define UART_IIR_EOC_SHIFT (5U)
/*! EOC - DMA End of Descriptor Chain
 *  0b0..DMA has not signaled the end of its programmed Descriptor Chain
 *  0b1..DMA has signaled the end of its programmed Descriptor Chain
 */
#define UART_IIR_EOC(x) (((uint32_t)(((uint32_t)(x)) << UART_IIR_EOC_SHIFT)) & UART_IIR_EOC_MASK)
#define UART_IIR_FIFOES10_MASK (0xC0U)
#define UART_IIR_FIFOES10_SHIFT (6U)
/*! FIFOES10 - FIFO Mode Enable Status
 *  0b00..Non-FIFO mode is selected
 *  0b01..reserved
 *  0b10..reserved
 *  0b11..FIFO mode is selected
 */
#define UART_IIR_FIFOES10(x) (((uint32_t)(((uint32_t)(x)) << UART_IIR_FIFOES10_SHIFT)) & UART_IIR_FIFOES10_MASK)
/*! @} */

/*! @name LCR - Line Control Register */
/*! @{ */
#define UART_LCR_WLS10_MASK (0x3U)
#define UART_LCR_WLS10_SHIFT (0U)
/*! WLS10 - World Length Select
 *  0b00..5-bit character
 *  0b01..6-bit character
 *  0b10..7-bit character
 *  0b11..8-bit character
 */
#define UART_LCR_WLS10(x) (((uint32_t)(((uint32_t)(x)) << UART_LCR_WLS10_SHIFT)) & UART_LCR_WLS10_MASK)
#define UART_LCR_STB_MASK (0x4U)
#define UART_LCR_STB_SHIFT (2U)
/*! STB - Stop Bits
 *  0b0..1 stop bit
 *  0b1..2 stop bit
 */
#define UART_LCR_STB(x) (((uint32_t)(((uint32_t)(x)) << UART_LCR_STB_SHIFT)) & UART_LCR_STB_MASK)
#define UART_LCR_PEN_MASK (0x8U)
#define UART_LCR_PEN_SHIFT (3U)
/*! PEN - Parity Enable
 *  0b0..No parity
 *  0b1..
 */
#define UART_LCR_PEN(x) (((uint32_t)(((uint32_t)(x)) << UART_LCR_PEN_SHIFT)) & UART_LCR_PEN_MASK)
#define UART_LCR_EPS_MASK (0x10U)
#define UART_LCR_EPS_SHIFT (4U)
/*! EPS - Even Parity Select
 *  0b0..Sends or checks for odd parity
 *  0b1..Sends or checks for even parity
 */
#define UART_LCR_EPS(x) (((uint32_t)(((uint32_t)(x)) << UART_LCR_EPS_SHIFT)) & UART_LCR_EPS_MASK)
#define UART_LCR_STKYP_MASK (0x20U)
#define UART_LCR_STKYP_SHIFT (5U)
/*! STKYP - Sticky Parity
 *  0b0..no effect on parity bit
 *  0b1..forces parity bit to be opposite of EPS bit value
 */
#define UART_LCR_STKYP(x) (((uint32_t)(((uint32_t)(x)) << UART_LCR_STKYP_SHIFT)) & UART_LCR_STKYP_MASK)
#define UART_LCR_SB_MASK (0x40U)
#define UART_LCR_SB_SHIFT (6U)
/*! SB - Set Break
 *  0b0..no effect on TXD output
 *  0b1..forces TXD output to 0
 */
#define UART_LCR_SB(x) (((uint32_t)(((uint32_t)(x)) << UART_LCR_SB_SHIFT)) & UART_LCR_SB_MASK)
#define UART_LCR_DLAB_MASK (0x80U)
#define UART_LCR_DLAB_SHIFT (7U)
/*! DLAB - Divisor Latch Access
 *  0b0..access Transmit Holding Register, Receive Buffer Register, and Interrupt Enable Register
 *  0b1..access Divisor Latch Registers
 */
#define UART_LCR_DLAB(x) (((uint32_t)(((uint32_t)(x)) << UART_LCR_DLAB_SHIFT)) & UART_LCR_DLAB_MASK)
/*! @} */

/*! @name MCR - Modem Control Register */
/*! @{ */
#define UART_MCR_DTR_MASK (0x1U)
#define UART_MCR_DTR_SHIFT (0U)
/*! DTR - Data Terminal Ready
 *  0b0..nDTR pin is 1
 *  0b1..nDTR pin is 0
 */
#define UART_MCR_DTR(x) (((uint32_t)(((uint32_t)(x)) << UART_MCR_DTR_SHIFT)) & UART_MCR_DTR_MASK)
#define UART_MCR_RTS_MASK (0x2U)
#define UART_MCR_RTS_SHIFT (1U)
/*! RTS - Request to Send
 *  0b0..non-auto-flow mode
 *  0b1..auto-flow mode
 */
#define UART_MCR_RTS(x) (((uint32_t)(((uint32_t)(x)) << UART_MCR_RTS_SHIFT)) & UART_MCR_RTS_MASK)
#define UART_MCR_OUT1_MASK (0x4U)
#define UART_MCR_OUT1_SHIFT (2U)
/*! OUT1 - Test Bit
 *  0b0..Force MSR[RI] forced to 0
 *  0b1..Force MSR[RI] forced to 1
 */
#define UART_MCR_OUT1(x) (((uint32_t)(((uint32_t)(x)) << UART_MCR_OUT1_SHIFT)) & UART_MCR_OUT1_MASK)
#define UART_MCR_OUT2_MASK (0x8U)
#define UART_MCR_OUT2_SHIFT (3U)
/*! OUT2 - OUT2 Signal Control
 *  0b0..UART interrupt is disabled when loop is clear; otherwise MSR[DCD] forced to 0
 *  0b1..UART interrupt is enabled when loop is clear; otherwise 1 = MSR[DCD] forced to 1
 */
#define UART_MCR_OUT2(x) (((uint32_t)(((uint32_t)(x)) << UART_MCR_OUT2_SHIFT)) & UART_MCR_OUT2_MASK)
#define UART_MCR_LOOP_MASK (0x10U)
#define UART_MCR_LOOP_SHIFT (4U)
/*! LOOP - Loopback Mode
 *  0b0..normal UART operation
 *  0b1..loopback mode UART operation
 */
#define UART_MCR_LOOP(x) (((uint32_t)(((uint32_t)(x)) << UART_MCR_LOOP_SHIFT)) & UART_MCR_LOOP_MASK)
#define UART_MCR_AFE_MASK (0x20U)
#define UART_MCR_AFE_SHIFT (5U)
/*! AFE - Auto-flow Control Enable
 *  0b0..auto-RTS and auto-CTS are disabled
 *  0b1..auto-RTS and auto-CTS are enabled
 */
#define UART_MCR_AFE(x) (((uint32_t)(((uint32_t)(x)) << UART_MCR_AFE_SHIFT)) & UART_MCR_AFE_MASK)
/*! @} */

/*! @name LSR - Line Status Register */
/*! @{ */
#define UART_LSR_DR_MASK (0x1U)
#define UART_LSR_DR_SHIFT (0U)
/*! DR - Data Ready
 *  0b0..No data has been received
 *  0b1..Data is available in RBR or the FIFO
 */
#define UART_LSR_DR(x) (((uint32_t)(((uint32_t)(x)) << UART_LSR_DR_SHIFT)) & UART_LSR_DR_MASK)
#define UART_LSR_OE_MASK (0x2U)
#define UART_LSR_OE_SHIFT (1U)
/*! OE - Overrun Error
 *  0b0..No data has been lost
 *  0b1..Receive data has been lost
 */
#define UART_LSR_OE(x) (((uint32_t)(((uint32_t)(x)) << UART_LSR_OE_SHIFT)) & UART_LSR_OE_MASK)
#define UART_LSR_PE_MASK (0x4U)
#define UART_LSR_PE_SHIFT (2U)
/*! PE - Parity Error
 *  0b0..No parity error
 *  0b1..Parity error has been detected
 */
#define UART_LSR_PE(x) (((uint32_t)(((uint32_t)(x)) << UART_LSR_PE_SHIFT)) & UART_LSR_PE_MASK)
#define UART_LSR_FE_MASK (0x8U)
#define UART_LSR_FE_SHIFT (3U)
/*! FE - Framing Error
 *  0b0..No Framing error
 *  0b1..Invalid stop bit has been detected
 */
#define UART_LSR_FE(x) (((uint32_t)(((uint32_t)(x)) << UART_LSR_FE_SHIFT)) & UART_LSR_FE_MASK)
#define UART_LSR_BI_MASK (0x10U)
#define UART_LSR_BI_SHIFT (4U)
/*! BI - Break Interrupt
 *  0b0..No break signal has been received
 *  0b1..Break signal received
 */
#define UART_LSR_BI(x) (((uint32_t)(((uint32_t)(x)) << UART_LSR_BI_SHIFT)) & UART_LSR_BI_MASK)
#define UART_LSR_TDRQ_MASK (0x20U)
#define UART_LSR_TDRQ_SHIFT (5U)
/*! TDRQ - Transmit Data Request
 *  0b0..There is data in the holding register or FIFO waiting to be shifted out
 *  0b1..transmit FIFO has half or less then half data
 */
#define UART_LSR_TDRQ(x) (((uint32_t)(((uint32_t)(x)) << UART_LSR_TDRQ_SHIFT)) & UART_LSR_TDRQ_MASK)
#define UART_LSR_TEMT_MASK (0x40U)
#define UART_LSR_TEMT_SHIFT (6U)
/*! TEMT - Transmitter Empty
 *  0b0..There is data in the transmit shift register, the Transmit Holding Register, or the FIFO
 *  0b1..All the data in the transmitter has been shifted out
 */
#define UART_LSR_TEMT(x) (((uint32_t)(((uint32_t)(x)) << UART_LSR_TEMT_SHIFT)) & UART_LSR_TEMT_MASK)
#define UART_LSR_FIFOE_MASK (0x80U)
#define UART_LSR_FIFOE_SHIFT (7U)
/*! FIFOE - FIFO Error Status
 *  0b0..No FIFO or no errors in receive FIFO
 *  0b1..At least one character in receive FIFO has errors
 */
#define UART_LSR_FIFOE(x) (((uint32_t)(((uint32_t)(x)) << UART_LSR_FIFOE_SHIFT)) & UART_LSR_FIFOE_MASK)
/*! @} */

/*! @name MSR - Modem Status Register */
/*! @{ */
#define UART_MSR_DCTS_MASK (0x1U)
#define UART_MSR_DCTS_SHIFT (0U)
/*! DCTS - Delta Clear to Send
 *  0b0..No change in nCTS pin since last read of MSR
 *  0b1..nCTS pin has changed state
 */
#define UART_MSR_DCTS(x) (((uint32_t)(((uint32_t)(x)) << UART_MSR_DCTS_SHIFT)) & UART_MSR_DCTS_MASK)
#define UART_MSR_DDSR_MASK (0x2U)
#define UART_MSR_DDSR_SHIFT (1U)
/*! DDSR - Delta Data Set Ready
 *  0b0..No change in nDSR pin since last read of MSR
 *  0b1..nDSR pin has changed state
 */
#define UART_MSR_DDSR(x) (((uint32_t)(((uint32_t)(x)) << UART_MSR_DDSR_SHIFT)) & UART_MSR_DDSR_MASK)
#define UART_MSR_TERI_MASK (0x4U)
#define UART_MSR_TERI_SHIFT (2U)
/*! TERI - Trailing Edge Ring Indicator
 *  0b0..nRI pin has not changed from 0 to 1 since last read of MSR
 *  0b1..nRI has changed state
 */
#define UART_MSR_TERI(x) (((uint32_t)(((uint32_t)(x)) << UART_MSR_TERI_SHIFT)) & UART_MSR_TERI_MASK)
#define UART_MSR_DDCD_MASK (0x8U)
#define UART_MSR_DDCD_SHIFT (3U)
/*! DDCD - Delta Data Carrier Detect
 *  0b0..No change in nDCD pin since last read of MSR
 *  0b1..nDCD pin has changed state
 */
#define UART_MSR_DDCD(x) (((uint32_t)(((uint32_t)(x)) << UART_MSR_DDCD_SHIFT)) & UART_MSR_DDCD_MASK)
#define UART_MSR_CTS_MASK (0x10U)
#define UART_MSR_CTS_SHIFT (4U)
/*! CTS - Clear to Send
 *  0b0..nCTS pin is 1
 *  0b1..nCTS pin is 0
 */
#define UART_MSR_CTS(x) (((uint32_t)(((uint32_t)(x)) << UART_MSR_CTS_SHIFT)) & UART_MSR_CTS_MASK)
#define UART_MSR_DSR_MASK (0x20U)
#define UART_MSR_DSR_SHIFT (5U)
/*! DSR - Data Set Ready
 *  0b0..nDSR pin is 1
 *  0b1..nDSR pin is 0
 */
#define UART_MSR_DSR(x) (((uint32_t)(((uint32_t)(x)) << UART_MSR_DSR_SHIFT)) & UART_MSR_DSR_MASK)
#define UART_MSR_RI_MASK (0x40U)
#define UART_MSR_RI_SHIFT (6U)
/*! RI - Ring Indicator
 *  0b0..nRI pin is 1
 *  0b1..nRI pin is 0
 */
#define UART_MSR_RI(x) (((uint32_t)(((uint32_t)(x)) << UART_MSR_RI_SHIFT)) & UART_MSR_RI_MASK)
#define UART_MSR_DCD_MASK (0x80U)
#define UART_MSR_DCD_SHIFT (7U)
/*! DCD - Data Carrier Detect
 *  0b0..nDCD pin is 1
 *  0b1..nDCD pin is 0
 */
#define UART_MSR_DCD(x) (((uint32_t)(((uint32_t)(x)) << UART_MSR_DCD_SHIFT)) & UART_MSR_DCD_MASK)
/*! @} */

/*! @name SCR - Scratchpad Register */
/*! @{ */
#define UART_SCR_SCRATCHPAD_MASK (0xFFU)
#define UART_SCR_SCRATCHPAD_SHIFT (0U)
/*! SCRATCHPAD - No effect on UART functions
 */
#define UART_SCR_SCRATCHPAD(x) (((uint32_t)(((uint32_t)(x)) << UART_SCR_SCRATCHPAD_SHIFT)) & UART_SCR_SCRATCHPAD_MASK)
/*! @} */

/*! @name ISR - Infrared Selection Register */
/*! @{ */
#define UART_ISR_XMITIR_MASK (0x1U)
#define UART_ISR_XMITIR_SHIFT (0U)
/*! XMITIR - Transmitter SIR Enable
 *  0b0..Transmitter is in UART mode
 *  0b1..Transmitter is in infrared mode
 */
#define UART_ISR_XMITIR(x) (((uint32_t)(((uint32_t)(x)) << UART_ISR_XMITIR_SHIFT)) & UART_ISR_XMITIR_MASK)
#define UART_ISR_RCVEIR_MASK (0x2U)
#define UART_ISR_RCVEIR_SHIFT (1U)
/*! RCVEIR - Receiver SIR Enable
 *  0b0..Receiver is in UART mode
 *  0b1..Receiver is in infrared mode
 */
#define UART_ISR_RCVEIR(x) (((uint32_t)(((uint32_t)(x)) << UART_ISR_RCVEIR_SHIFT)) & UART_ISR_RCVEIR_MASK)
#define UART_ISR_XMODE_MASK (0x4U)
#define UART_ISR_XMODE_SHIFT (2U)
/*! XMODE - Transmit Pulse Width Select
 *  0b0..Transmit pulse width is 3/16 of a bit time wide
 *  0b1..Transmit pulse width is 1.6 ms
 */
#define UART_ISR_XMODE(x) (((uint32_t)(((uint32_t)(x)) << UART_ISR_XMODE_SHIFT)) & UART_ISR_XMODE_MASK)
#define UART_ISR_TXPL_MASK (0x8U)
#define UART_ISR_TXPL_SHIFT (3U)
/*! TXPL - Transmit Data Polarity
 *  0b0..SIR encoder generates a positive pulse for a data bit of 0
 *  0b1..SIR encoder generates a negetive pulse for a data bit of 0
 */
#define UART_ISR_TXPL(x) (((uint32_t)(((uint32_t)(x)) << UART_ISR_TXPL_SHIFT)) & UART_ISR_TXPL_MASK)
#define UART_ISR_RXPL_MASK (0x10U)
#define UART_ISR_RXPL_SHIFT (4U)
/*! RXPL - Receive Data Polarity
 *  0b0..SIR decoder takes positive pulses as 0s
 *  0b1..SIR decoder takes negative pulses as 0s
 */
#define UART_ISR_RXPL(x) (((uint32_t)(((uint32_t)(x)) << UART_ISR_RXPL_SHIFT)) & UART_ISR_RXPL_MASK)
/*! @} */

/*! @name RFOR - Receive FIFO Occupancy Register */
/*! @{ */
#define UART_RFOR_BYTE_COUNT_MASK (0x3FU)
#define UART_RFOR_BYTE_COUNT_SHIFT (0U)
/*! BYTE_COUNT - Number of bytes (0-63) remaining in receive FIFO
 */
#define UART_RFOR_BYTE_COUNT(x) (((uint32_t)(((uint32_t)(x)) << UART_RFOR_BYTE_COUNT_SHIFT)) & UART_RFOR_BYTE_COUNT_MASK)
/*! @} */

/*! @name ABR - Auto-Baud Control Register */
/*! @{ */
#define UART_ABR_ABE_MASK (0x1U)
#define UART_ABR_ABE_SHIFT (0U)
/*! ABE - Auto-baud enable
 *  0b0..auto-baud disabled
 *  0b1..auto-baud enabled
 */
#define UART_ABR_ABE(x) (((uint32_t)(((uint32_t)(x)) << UART_ABR_ABE_SHIFT)) & UART_ABR_ABE_MASK)
#define UART_ABR_ABLIE_MASK (0x2U)
#define UART_ABR_ABLIE_SHIFT (1U)
/*! ABLIE - Auto-baud-lock interrupt enable
 *  0b0..auto-baud-lock interrupt is disabled
 *  0b1..auto-baud-lock interrupt is enabled
 */
#define UART_ABR_ABLIE(x) (((uint32_t)(((uint32_t)(x)) << UART_ABR_ABLIE_SHIFT)) & UART_ABR_ABLIE_MASK)
#define UART_ABR_ABUP_MASK (0x4U)
#define UART_ABR_ABUP_SHIFT (2U)
/*! ABUP - Auto-baud programmer select
 *  0b0..CPU programs Divisor Latch register
 *  0b1..UART programs Divisor Latch register
 */
#define UART_ABR_ABUP(x) (((uint32_t)(((uint32_t)(x)) << UART_ABR_ABUP_SHIFT)) & UART_ABR_ABUP_MASK)
#define UART_ABR_ABT_MASK (0x8U)
#define UART_ABR_ABT_SHIFT (3U)
/*! ABT - Auto-Baud table
 *  0b0..Formula used to calculate baud rates
 *  0b1..Table used to calculate baud rates, which limits UART to choosing common baud rates
 */
#define UART_ABR_ABT(x) (((uint32_t)(((uint32_t)(x)) << UART_ABR_ABT_SHIFT)) & UART_ABR_ABT_MASK)
/*! @} */

/*! @name ACR - Auto-Baud Count Register */
/*! @{ */
#define UART_ACR_COUNT_VALUE_MASK (0xFFFFU)
#define UART_ACR_COUNT_VALUE_SHIFT (0U)
/*! COUNT_VALUE - Number of 14.857 MHz clock cycles within a Start-Bit pulse
 */
#define UART_ACR_COUNT_VALUE(x) (((uint32_t)(((uint32_t)(x)) << UART_ACR_COUNT_VALUE_SHIFT)) & UART_ACR_COUNT_VALUE_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group UART_Register_Masks */

/* UART - Peripheral instance base addresses */
/** Peripheral UART0 base address */
#define UART0_BASE (0x46040000u)
/** Peripheral UART0 base pointer */
#define UART0 ((UART_Type *) UART0_BASE)
/** Peripheral UART1 base address */
#define UART1_BASE (0x460C0000u)
/** Peripheral UART1 base pointer */
#define UART1 ((UART_Type *) UART1_BASE)
/** Peripheral UART2 base address */
#define UART2_BASE (0x48020000u)
/** Peripheral UART2 base pointer */
#define UART2 ((UART_Type *) UART2_BASE)
/** Array initializer of UART peripheral base addresses */
#define UART_BASE_ADDRS                                                                                                            \
    {                                                                                                                              \
        UART0_BASE, UART1_BASE, UART2_BASE                                                                                         \
    }
/** Array initializer of UART peripheral base pointers */
#define UART_BASE_PTRS                                                                                                             \
    {                                                                                                                              \
        UART0, UART1, UART2                                                                                                        \
    }
/** Interrupt vectors for the UART peripheral type */
#define UART_IRQS                                                                                                                  \
    {                                                                                                                              \
        UART0_IRQn, UART1_IRQn, UART2_IRQn                                                                                         \
    }

/*!
 * @}
 */ /* end of group UART_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- USBC Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBC_Peripheral_Access_Layer USBC Peripheral Access Layer
 * @{
 */

/** USBC - Register Layout Typedef */
typedef struct
{
    __I uint32_t ID;        /**< , offset: 0x0 */
    __I uint32_t HWGENERAL; /**< , offset: 0x4 */
    __I uint32_t HWHOST;    /**< , offset: 0x8 */
    __I uint32_t HWDEVICE;  /**< , offset: 0xC */
    __I uint32_t HWTXBUF;   /**< , offset: 0x10 */
    __I uint32_t HWRXBUF;   /**< , offset: 0x14 */
    __IO uint32_t HWTXBUF0; /**< , offset: 0x18 */
    __IO uint32_t HWTXBUF1; /**< , offset: 0x1C */
    uint8_t RESERVED_0[96];
    __IO uint32_t GPTIMER0LD;   /**< , offset: 0x80 */
    __IO uint32_t GPTIMER0CTRL; /**< , offset: 0x84 */
    __IO uint32_t GPTTIMER1LD;  /**< , offset: 0x88 */
    __IO uint32_t GPTIMER1CTRL; /**< , offset: 0x8C */
    __IO uint32_t SBUSCFG;      /**< , offset: 0x90 */
    uint8_t RESERVED_1[108];
    __I uint32_t CAPLENGTH; /**< , offset: 0x100 */
    __I uint32_t HCSPARAMS; /**< , offset: 0x104 */
    __I uint32_t HCCPARAMS; /**< , offset: 0x108 */
    uint8_t RESERVED_2[20];
    __I uint32_t DCIVERSION; /**< , offset: 0x120 */
    __I uint32_t DCCPARAMS;  /**< , offset: 0x124 */
    __IO uint32_t DEVLPMCSR; /**< , offset: 0x128 */
    uint8_t RESERVED_3[20];
    __IO uint32_t USBCMD;  /**< , offset: 0x140 */
    __IO uint32_t USBSTS;  /**< , offset: 0x144 */
    __IO uint32_t USBINTR; /**< , offset: 0x148 */
    __IO uint32_t FRINDEX; /**< , offset: 0x14C */
    uint8_t RESERVED_4[4];
    __IO uint32_t PERIODICLISTBASE; /**< , offset: 0x154 */
    __IO uint32_t ASYNCLISTADDR;    /**< , offset: 0x158 */
    __IO uint32_t TTCTRL;           /**< , offset: 0x15C */
    __IO uint32_t BURSTSIZE;        /**< , offset: 0x160 */
    __IO uint32_t TXFILLTUNING;     /**< , offset: 0x164 */
    __IO uint32_t TXTTFILLTUNING;   /**< , offset: 0x168 */
    __IO uint32_t IC_USB;           /**< , offset: 0x16C */
    __IO uint32_t ULPI_VIEWPORT;    /**< , offset: 0x170 */
    uint8_t RESERVED_5[4];
    __IO uint32_t ENDPTNAK;   /**< , offset: 0x178 */
    __IO uint32_t ENDPTNAKEN; /**< , offset: 0x17C */
    uint8_t RESERVED_6[4];
    __IO uint32_t PORTSC1;             /**< , offset: 0x184 */
    __IO uint32_t PORTSC2;             /**< , offset: 0x188 */
    __IO uint32_t PORTSC3;             /**< , offset: 0x18C */
    __IO uint32_t PORTSC4;             /**< , offset: 0x190 */
    __IO uint32_t PORTSC5;             /**< , offset: 0x194 */
    __IO uint32_t PORTSC6;             /**< , offset: 0x198 */
    __IO uint32_t PORTSC7;             /**< , offset: 0x19C */
    __IO uint32_t PORTSC8;             /**< , offset: 0x1A0 */
    __IO uint32_t OTGSC;               /**< , offset: 0x1A4 */
    __IO uint32_t USBMODE;             /**< , offset: 0x1A8 */
    __I uint32_t ENDPTSETUPSTAT;       /**< , offset: 0x1AC */
    __I uint32_t ENDPTPRIME;           /**< , offset: 0x1B0 */
    __I uint32_t ENDPTFLUSH;           /**< , offset: 0x1B4 */
    __I uint32_t ENDPTSTAT;            /**< , offset: 0x1B8 */
    __I uint32_t ENDPTCOMPLETE;        /**< , offset: 0x1BC */
    __IO uint32_t ENDPTCTRL0;          /**< , offset: 0x1C0 */
    __IO uint32_t ENDPTCTRL1;          /**< , offset: 0x1C4 */
    __IO uint32_t ENDPTCTRL2;          /**< , offset: 0x1C8 */
    __IO uint32_t ENDPTCTRL3;          /**< , offset: 0x1CC */
    __IO uint32_t ENDPTCTRL4;          /**< , offset: 0x1D0 */
    __IO uint32_t ENDPTCTRL5;          /**< , offset: 0x1D4 */
    __IO uint32_t ENDPTCTRL6;          /**< , offset: 0x1D8 */
    __IO uint32_t ENDPTCTRL7;          /**< , offset: 0x1DC */
    __IO uint32_t ENDPTCTRL8;          /**< , offset: 0x1E0 */
    __IO uint32_t ENDPTCTRL9;          /**< , offset: 0x1E4 */
    __IO uint32_t ENDPTCTRL10;         /**< , offset: 0x1E8 */
    __IO uint32_t ENDPTCTRL11;         /**< , offset: 0x1EC */
    __IO uint32_t ENDPTCTRL12;         /**< , offset: 0x1F0 */
    __IO uint32_t ENDPTCTRL13;         /**< , offset: 0x1F4 */
    __IO uint32_t ENDPTCTRL14;         /**< , offset: 0x1F8 */
    __IO uint32_t ENDPTCTRL15;         /**< , offset: 0x1FC */
    __I uint32_t PHY_ID;               /**< , offset: 0x200 */
    __IO uint32_t PLL_CONTROL_0;       /**< , offset: 0x204 */
    __IO uint32_t PLL_CONTROL_1;       /**< , offset: 0x208 */
    __I uint32_t RESERVED_ADDR3;       /**< , offset: 0x20C */
    __IO uint32_t TX_CHANNEL_CONTRL_0; /**< , offset: 0x210 */
    __IO uint32_t TX_CHANNEL_CONTRL_1; /**< , offset: 0x214 */
    __IO uint32_t TX_CHANNEL_CONTRL_2; /**< , offset: 0x218 */
    __I uint32_t RESERVED_ADDR7;       /**< , offset: 0x21C */
    __IO uint32_t RX_CHANNEL_CONTRL_0; /**< , offset: 0x220 */
    __IO uint32_t RX_CHANNEL_CONTRL_1; /**< , offset: 0x224 */
    __IO uint32_t RX_CHANNEL_CONTRL_2; /**< , offset: 0x228 */
    uint8_t RESERVED_7[4];
    __IO uint32_t ANA_CONTRL_0;             /**< , offset: 0x230 */
    __IO uint32_t ANA_CONTRL_1;             /**< , offset: 0x234 */
    __IO uint32_t RESERVED_ADDR_C;          /**< , offset: 0x238 */
    __IO uint32_t DIGITAL_CONTROL_0;        /**< , offset: 0x23C */
    __IO uint32_t DIGITAL_CONTROL_1;        /**< , offset: 0x240 */
    __IO uint32_t DIGITAL_CONTROL_2;        /**< , offset: 0x244 */
    __I uint32_t RESERVED_ADDR_12H;         /**< , offset: 0x248 */
    __IO uint32_t TEST_CONTRL_AND_STATUS_0; /**< , offset: 0x24C */
    __IO uint32_t TEST_CONTRL_AND_STATUS_1; /**< , offset: 0x250 */
    __I uint32_t RESERVED_ADDR_15H;         /**< , offset: 0x254 */
    __IO uint32_t PHY_REG_CHGDTC_CONTRL;    /**< , offset: 0x258 */
    __IO uint32_t PHY_REG_OTG_CONTROL;      /**< , offset: 0x25C */
    __IO uint32_t USB2_PHY_MON0;            /**< , offset: 0x260 */
    __IO uint32_t PHY_REG_CHGDTC_CONTRL_1;  /**< , offset: 0x264 */
    __I uint32_t RESERVED_ADDR_1AH;         /**< , offset: 0x268 */
    __I uint32_t RESERVED_ADDR_1BH;         /**< , offset: 0x26C */
    __I uint32_t RESERVED_ADDR_1CH;         /**< , offset: 0x270 */
    __I uint32_t RESERVED_ADDR_1DH;         /**< , offset: 0x274 */
    __I uint32_t INTERNAL_CID;              /**< , offset: 0x278 */
    __I uint32_t USB2_ICID_REG1;            /**< , offset: 0x27C */
} USBC_Type;

/* ----------------------------------------------------------------------------
   -- USBC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBC_Register_Masks USBC Register Masks
 * @{
 */

/*! @name ID -  */
/*! @{ */
#define USBC_ID_ID_MASK (0x3FU)
#define USBC_ID_ID_SHIFT (0U)
#define USBC_ID_ID(x) (((uint32_t)(((uint32_t)(x)) << USBC_ID_ID_SHIFT)) & USBC_ID_ID_MASK)
#define USBC_ID_NID_MASK (0x3F00U)
#define USBC_ID_NID_SHIFT (8U)
#define USBC_ID_NID(x) (((uint32_t)(((uint32_t)(x)) << USBC_ID_NID_SHIFT)) & USBC_ID_NID_MASK)
#define USBC_ID_TAG_MASK (0x1F0000U)
#define USBC_ID_TAG_SHIFT (16U)
#define USBC_ID_TAG(x) (((uint32_t)(((uint32_t)(x)) << USBC_ID_TAG_SHIFT)) & USBC_ID_TAG_MASK)
#define USBC_ID_REVISION_MASK (0x1E00000U)
#define USBC_ID_REVISION_SHIFT (21U)
#define USBC_ID_REVISION(x) (((uint32_t)(((uint32_t)(x)) << USBC_ID_REVISION_SHIFT)) & USBC_ID_REVISION_MASK)
#define USBC_ID_VERSION_MASK (0x1E000000U)
#define USBC_ID_VERSION_SHIFT (25U)
#define USBC_ID_VERSION(x) (((uint32_t)(((uint32_t)(x)) << USBC_ID_VERSION_SHIFT)) & USBC_ID_VERSION_MASK)
#define USBC_ID_CIVERSION_MASK (0xE0000000U)
#define USBC_ID_CIVERSION_SHIFT (29U)
#define USBC_ID_CIVERSION(x) (((uint32_t)(((uint32_t)(x)) << USBC_ID_CIVERSION_SHIFT)) & USBC_ID_CIVERSION_MASK)
/*! @} */

/*! @name HWGENERAL -  */
/*! @{ */
#define USBC_HWGENERAL_RT_MASK (0x1U)
#define USBC_HWGENERAL_RT_SHIFT (0U)
#define USBC_HWGENERAL_RT(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWGENERAL_RT_SHIFT)) & USBC_HWGENERAL_RT_MASK)
#define USBC_HWGENERAL_CLKC_MASK (0x6U)
#define USBC_HWGENERAL_CLKC_SHIFT (1U)
#define USBC_HWGENERAL_CLKC(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWGENERAL_CLKC_SHIFT)) & USBC_HWGENERAL_CLKC_MASK)
#define USBC_HWGENERAL_BWT_MASK (0x8U)
#define USBC_HWGENERAL_BWT_SHIFT (3U)
#define USBC_HWGENERAL_BWT(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWGENERAL_BWT_SHIFT)) & USBC_HWGENERAL_BWT_MASK)
#define USBC_HWGENERAL_PHYW_MASK (0x30U)
#define USBC_HWGENERAL_PHYW_SHIFT (4U)
#define USBC_HWGENERAL_PHYW(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWGENERAL_PHYW_SHIFT)) & USBC_HWGENERAL_PHYW_MASK)
#define USBC_HWGENERAL_PHYM_MASK (0x3C0U)
#define USBC_HWGENERAL_PHYM_SHIFT (6U)
#define USBC_HWGENERAL_PHYM(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWGENERAL_PHYM_SHIFT)) & USBC_HWGENERAL_PHYM_MASK)
#define USBC_HWGENERAL_SM_MASK (0xC00U)
#define USBC_HWGENERAL_SM_SHIFT (10U)
#define USBC_HWGENERAL_SM(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWGENERAL_SM_SHIFT)) & USBC_HWGENERAL_SM_MASK)
#define USBC_HWGENERAL_RESERVED_12_MASK (0xFFFFF000U)
#define USBC_HWGENERAL_RESERVED_12_SHIFT (12U)
#define USBC_HWGENERAL_RESERVED_12(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_HWGENERAL_RESERVED_12_SHIFT)) & USBC_HWGENERAL_RESERVED_12_MASK)
/*! @} */

/*! @name HWHOST -  */
/*! @{ */
#define USBC_HWHOST_HC_MASK (0x1U)
#define USBC_HWHOST_HC_SHIFT (0U)
#define USBC_HWHOST_HC(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWHOST_HC_SHIFT)) & USBC_HWHOST_HC_MASK)
#define USBC_HWHOST_NPORT_MASK (0xEU)
#define USBC_HWHOST_NPORT_SHIFT (1U)
#define USBC_HWHOST_NPORT(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWHOST_NPORT_SHIFT)) & USBC_HWHOST_NPORT_MASK)
#define USBC_HWHOST_RESERVED_4_MASK (0xFFF0U)
#define USBC_HWHOST_RESERVED_4_SHIFT (4U)
#define USBC_HWHOST_RESERVED_4(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWHOST_RESERVED_4_SHIFT)) & USBC_HWHOST_RESERVED_4_MASK)
#define USBC_HWHOST_TTASY_MASK (0xFF0000U)
#define USBC_HWHOST_TTASY_SHIFT (16U)
#define USBC_HWHOST_TTASY(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWHOST_TTASY_SHIFT)) & USBC_HWHOST_TTASY_MASK)
#define USBC_HWHOST_TTPER_MASK (0xFF000000U)
#define USBC_HWHOST_TTPER_SHIFT (24U)
#define USBC_HWHOST_TTPER(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWHOST_TTPER_SHIFT)) & USBC_HWHOST_TTPER_MASK)
/*! @} */

/*! @name HWDEVICE -  */
/*! @{ */
#define USBC_HWDEVICE_DC_MASK (0x1U)
#define USBC_HWDEVICE_DC_SHIFT (0U)
#define USBC_HWDEVICE_DC(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWDEVICE_DC_SHIFT)) & USBC_HWDEVICE_DC_MASK)
#define USBC_HWDEVICE_DEVEP_MASK (0x3EU)
#define USBC_HWDEVICE_DEVEP_SHIFT (1U)
#define USBC_HWDEVICE_DEVEP(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWDEVICE_DEVEP_SHIFT)) & USBC_HWDEVICE_DEVEP_MASK)
#define USBC_HWDEVICE_RESERVED_6_MASK (0xFFFFFFC0U)
#define USBC_HWDEVICE_RESERVED_6_SHIFT (6U)
#define USBC_HWDEVICE_RESERVED_6(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_HWDEVICE_RESERVED_6_SHIFT)) & USBC_HWDEVICE_RESERVED_6_MASK)
/*! @} */

/*! @name HWTXBUF -  */
/*! @{ */
#define USBC_HWTXBUF_TXBURST_MASK (0xFFU)
#define USBC_HWTXBUF_TXBURST_SHIFT (0U)
#define USBC_HWTXBUF_TXBURST(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWTXBUF_TXBURST_SHIFT)) & USBC_HWTXBUF_TXBURST_MASK)
#define USBC_HWTXBUF_TXADD_MASK (0xFF00U)
#define USBC_HWTXBUF_TXADD_SHIFT (8U)
#define USBC_HWTXBUF_TXADD(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWTXBUF_TXADD_SHIFT)) & USBC_HWTXBUF_TXADD_MASK)
#define USBC_HWTXBUF_TXCHANADD_MASK (0xFF0000U)
#define USBC_HWTXBUF_TXCHANADD_SHIFT (16U)
#define USBC_HWTXBUF_TXCHANADD(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWTXBUF_TXCHANADD_SHIFT)) & USBC_HWTXBUF_TXCHANADD_MASK)
#define USBC_HWTXBUF_RESERVED_24_MASK (0x7F000000U)
#define USBC_HWTXBUF_RESERVED_24_SHIFT (24U)
#define USBC_HWTXBUF_RESERVED_24(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_HWTXBUF_RESERVED_24_SHIFT)) & USBC_HWTXBUF_RESERVED_24_MASK)
/*! @} */

/*! @name HWRXBUF -  */
/*! @{ */
#define USBC_HWRXBUF_RXBURST_MASK (0xFFU)
#define USBC_HWRXBUF_RXBURST_SHIFT (0U)
#define USBC_HWRXBUF_RXBURST(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWRXBUF_RXBURST_SHIFT)) & USBC_HWRXBUF_RXBURST_MASK)
#define USBC_HWRXBUF_RXADD_MASK (0xFF00U)
#define USBC_HWRXBUF_RXADD_SHIFT (8U)
#define USBC_HWRXBUF_RXADD(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWRXBUF_RXADD_SHIFT)) & USBC_HWRXBUF_RXADD_MASK)
#define USBC_HWRXBUF_RESERVED_16_MASK (0xFFFF0000U)
#define USBC_HWRXBUF_RESERVED_16_SHIFT (16U)
#define USBC_HWRXBUF_RESERVED_16(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_HWRXBUF_RESERVED_16_SHIFT)) & USBC_HWRXBUF_RESERVED_16_MASK)
/*! @} */

/*! @name HWTXBUF0 -  */
/*! @{ */
#define USBC_HWTXBUF0_TXBURST_MASK (0xFFFFFFFFU)
#define USBC_HWTXBUF0_TXBURST_SHIFT (0U)
#define USBC_HWTXBUF0_TXBURST(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWTXBUF0_TXBURST_SHIFT)) & USBC_HWTXBUF0_TXBURST_MASK)
/*! @} */

/*! @name HWTXBUF1 -  */
/*! @{ */
#define USBC_HWTXBUF1_TXBURST_MASK (0xFFFFFFFFU)
#define USBC_HWTXBUF1_TXBURST_SHIFT (0U)
#define USBC_HWTXBUF1_TXBURST(x) (((uint32_t)(((uint32_t)(x)) << USBC_HWTXBUF1_TXBURST_SHIFT)) & USBC_HWTXBUF1_TXBURST_MASK)
/*! @} */

/*! @name GPTIMER0LD -  */
/*! @{ */
#define USBC_GPTIMER0LD_GPTLD_MASK (0xFFFFFFU)
#define USBC_GPTIMER0LD_GPTLD_SHIFT (0U)
#define USBC_GPTIMER0LD_GPTLD(x) (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER0LD_GPTLD_SHIFT)) & USBC_GPTIMER0LD_GPTLD_MASK)
#define USBC_GPTIMER0LD_RESERVED_24_MASK (0xFF000000U)
#define USBC_GPTIMER0LD_RESERVED_24_SHIFT (24U)
#define USBC_GPTIMER0LD_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER0LD_RESERVED_24_SHIFT)) & USBC_GPTIMER0LD_RESERVED_24_MASK)
/*! @} */

/*! @name GPTIMER0CTRL -  */
/*! @{ */
#define USBC_GPTIMER0CTRL_GPTCNT_MASK (0xFFFFFFU)
#define USBC_GPTIMER0CTRL_GPTCNT_SHIFT (0U)
#define USBC_GPTIMER0CTRL_GPTCNT(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER0CTRL_GPTCNT_SHIFT)) & USBC_GPTIMER0CTRL_GPTCNT_MASK)
#define USBC_GPTIMER0CTRL_GPTMODE_MASK (0x1000000U)
#define USBC_GPTIMER0CTRL_GPTMODE_SHIFT (24U)
#define USBC_GPTIMER0CTRL_GPTMODE(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER0CTRL_GPTMODE_SHIFT)) & USBC_GPTIMER0CTRL_GPTMODE_MASK)
#define USBC_GPTIMER0CTRL_RESERVED_25_MASK (0x3E000000U)
#define USBC_GPTIMER0CTRL_RESERVED_25_SHIFT (25U)
#define USBC_GPTIMER0CTRL_RESERVED_25(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER0CTRL_RESERVED_25_SHIFT)) & USBC_GPTIMER0CTRL_RESERVED_25_MASK)
#define USBC_GPTIMER0CTRL_GPTRST_MASK (0x40000000U)
#define USBC_GPTIMER0CTRL_GPTRST_SHIFT (30U)
#define USBC_GPTIMER0CTRL_GPTRST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER0CTRL_GPTRST_SHIFT)) & USBC_GPTIMER0CTRL_GPTRST_MASK)
#define USBC_GPTIMER0CTRL_GPTRUN_MASK (0x80000000U)
#define USBC_GPTIMER0CTRL_GPTRUN_SHIFT (31U)
#define USBC_GPTIMER0CTRL_GPTRUN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER0CTRL_GPTRUN_SHIFT)) & USBC_GPTIMER0CTRL_GPTRUN_MASK)
/*! @} */

/*! @name GPTTIMER1LD -  */
/*! @{ */
#define USBC_GPTTIMER1LD_GPTLD_MASK (0xFFFFFFU)
#define USBC_GPTTIMER1LD_GPTLD_SHIFT (0U)
#define USBC_GPTTIMER1LD_GPTLD(x) (((uint32_t)(((uint32_t)(x)) << USBC_GPTTIMER1LD_GPTLD_SHIFT)) & USBC_GPTTIMER1LD_GPTLD_MASK)
#define USBC_GPTTIMER1LD_RESERVED_24_MASK (0xFF000000U)
#define USBC_GPTTIMER1LD_RESERVED_24_SHIFT (24U)
#define USBC_GPTTIMER1LD_RESERVED_24(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTTIMER1LD_RESERVED_24_SHIFT)) & USBC_GPTTIMER1LD_RESERVED_24_MASK)
/*! @} */

/*! @name GPTIMER1CTRL -  */
/*! @{ */
#define USBC_GPTIMER1CTRL_GPTCNT_MASK (0xFFFFFFU)
#define USBC_GPTIMER1CTRL_GPTCNT_SHIFT (0U)
#define USBC_GPTIMER1CTRL_GPTCNT(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER1CTRL_GPTCNT_SHIFT)) & USBC_GPTIMER1CTRL_GPTCNT_MASK)
#define USBC_GPTIMER1CTRL_GPTMODE_MASK (0x1000000U)
#define USBC_GPTIMER1CTRL_GPTMODE_SHIFT (24U)
#define USBC_GPTIMER1CTRL_GPTMODE(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER1CTRL_GPTMODE_SHIFT)) & USBC_GPTIMER1CTRL_GPTMODE_MASK)
#define USBC_GPTIMER1CTRL_RESERVED_25_MASK (0x3E000000U)
#define USBC_GPTIMER1CTRL_RESERVED_25_SHIFT (25U)
#define USBC_GPTIMER1CTRL_RESERVED_25(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER1CTRL_RESERVED_25_SHIFT)) & USBC_GPTIMER1CTRL_RESERVED_25_MASK)
#define USBC_GPTIMER1CTRL_GPTRST_MASK (0x40000000U)
#define USBC_GPTIMER1CTRL_GPTRST_SHIFT (30U)
#define USBC_GPTIMER1CTRL_GPTRST(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER1CTRL_GPTRST_SHIFT)) & USBC_GPTIMER1CTRL_GPTRST_MASK)
#define USBC_GPTIMER1CTRL_GPTRUN_MASK (0x80000000U)
#define USBC_GPTIMER1CTRL_GPTRUN_SHIFT (31U)
#define USBC_GPTIMER1CTRL_GPTRUN(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_GPTIMER1CTRL_GPTRUN_SHIFT)) & USBC_GPTIMER1CTRL_GPTRUN_MASK)
/*! @} */

/*! @name SBUSCFG -  */
/*! @{ */
#define USBC_SBUSCFG_AHBBRST_MASK (0x7U)
#define USBC_SBUSCFG_AHBBRST_SHIFT (0U)
#define USBC_SBUSCFG_AHBBRST(x) (((uint32_t)(((uint32_t)(x)) << USBC_SBUSCFG_AHBBRST_SHIFT)) & USBC_SBUSCFG_AHBBRST_MASK)
#define USBC_SBUSCFG_RESERVED_3_MASK (0xFFFFFFF8U)
#define USBC_SBUSCFG_RESERVED_3_SHIFT (3U)
#define USBC_SBUSCFG_RESERVED_3(x) (((uint32_t)(((uint32_t)(x)) << USBC_SBUSCFG_RESERVED_3_SHIFT)) & USBC_SBUSCFG_RESERVED_3_MASK)
/*! @} */

/*! @name CAPLENGTH -  */
/*! @{ */
#define USBC_CAPLENGTH_CAPLENGTH_MASK (0xFFU)
#define USBC_CAPLENGTH_CAPLENGTH_SHIFT (0U)
#define USBC_CAPLENGTH_CAPLENGTH(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_CAPLENGTH_CAPLENGTH_SHIFT)) & USBC_CAPLENGTH_CAPLENGTH_MASK)
#define USBC_CAPLENGTH_HCIVERSION_MASK (0xFFFF0000U)
#define USBC_CAPLENGTH_HCIVERSION_SHIFT (16U)
#define USBC_CAPLENGTH_HCIVERSION(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_CAPLENGTH_HCIVERSION_SHIFT)) & USBC_CAPLENGTH_HCIVERSION_MASK)
/*! @} */

/*! @name HCSPARAMS -  */
/*! @{ */
#define USBC_HCSPARAMS_N_PORTS_MASK (0xFU)
#define USBC_HCSPARAMS_N_PORTS_SHIFT (0U)
#define USBC_HCSPARAMS_N_PORTS(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_N_PORTS_SHIFT)) & USBC_HCSPARAMS_N_PORTS_MASK)
#define USBC_HCSPARAMS_PPC_MASK (0x10U)
#define USBC_HCSPARAMS_PPC_SHIFT (4U)
#define USBC_HCSPARAMS_PPC(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_PPC_SHIFT)) & USBC_HCSPARAMS_PPC_MASK)
#define USBC_HCSPARAMS_RESERVED_5_MASK (0xE0U)
#define USBC_HCSPARAMS_RESERVED_5_SHIFT (5U)
#define USBC_HCSPARAMS_RESERVED_5(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_RESERVED_5_SHIFT)) & USBC_HCSPARAMS_RESERVED_5_MASK)
#define USBC_HCSPARAMS_N_PCC_MASK (0xF00U)
#define USBC_HCSPARAMS_N_PCC_SHIFT (8U)
#define USBC_HCSPARAMS_N_PCC(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_N_PCC_SHIFT)) & USBC_HCSPARAMS_N_PCC_MASK)
#define USBC_HCSPARAMS_N_CC_MASK (0xF000U)
#define USBC_HCSPARAMS_N_CC_SHIFT (12U)
#define USBC_HCSPARAMS_N_CC(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_N_CC_SHIFT)) & USBC_HCSPARAMS_N_CC_MASK)
#define USBC_HCSPARAMS_PI_MASK (0x10000U)
#define USBC_HCSPARAMS_PI_SHIFT (16U)
#define USBC_HCSPARAMS_PI(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_PI_SHIFT)) & USBC_HCSPARAMS_PI_MASK)
#define USBC_HCSPARAMS_RESERVED_17_MASK (0xE0000U)
#define USBC_HCSPARAMS_RESERVED_17_SHIFT (17U)
#define USBC_HCSPARAMS_RESERVED_17(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_RESERVED_17_SHIFT)) & USBC_HCSPARAMS_RESERVED_17_MASK)
#define USBC_HCSPARAMS_N_PTT_MASK (0xF00000U)
#define USBC_HCSPARAMS_N_PTT_SHIFT (20U)
#define USBC_HCSPARAMS_N_PTT(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_N_PTT_SHIFT)) & USBC_HCSPARAMS_N_PTT_MASK)
#define USBC_HCSPARAMS_N_TT_MASK (0xF000000U)
#define USBC_HCSPARAMS_N_TT_SHIFT (24U)
#define USBC_HCSPARAMS_N_TT(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_N_TT_SHIFT)) & USBC_HCSPARAMS_N_TT_MASK)
#define USBC_HCSPARAMS_RESERVED_28_MASK (0xF0000000U)
#define USBC_HCSPARAMS_RESERVED_28_SHIFT (28U)
#define USBC_HCSPARAMS_RESERVED_28(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_HCSPARAMS_RESERVED_28_SHIFT)) & USBC_HCSPARAMS_RESERVED_28_MASK)
/*! @} */

/*! @name HCCPARAMS -  */
/*! @{ */
#define USBC_HCCPARAMS_ADC_MASK (0x1U)
#define USBC_HCCPARAMS_ADC_SHIFT (0U)
#define USBC_HCCPARAMS_ADC(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCCPARAMS_ADC_SHIFT)) & USBC_HCCPARAMS_ADC_MASK)
#define USBC_HCCPARAMS_PFL_MASK (0x2U)
#define USBC_HCCPARAMS_PFL_SHIFT (1U)
#define USBC_HCCPARAMS_PFL(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCCPARAMS_PFL_SHIFT)) & USBC_HCCPARAMS_PFL_MASK)
#define USBC_HCCPARAMS_ASP_MASK (0x4U)
#define USBC_HCCPARAMS_ASP_SHIFT (2U)
#define USBC_HCCPARAMS_ASP(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCCPARAMS_ASP_SHIFT)) & USBC_HCCPARAMS_ASP_MASK)
#define USBC_HCCPARAMS_RESERVED_3_MASK (0x8U)
#define USBC_HCCPARAMS_RESERVED_3_SHIFT (3U)
#define USBC_HCCPARAMS_RESERVED_3(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_HCCPARAMS_RESERVED_3_SHIFT)) & USBC_HCCPARAMS_RESERVED_3_MASK)
#define USBC_HCCPARAMS_IST_MASK (0xF0U)
#define USBC_HCCPARAMS_IST_SHIFT (4U)
#define USBC_HCCPARAMS_IST(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCCPARAMS_IST_SHIFT)) & USBC_HCCPARAMS_IST_MASK)
#define USBC_HCCPARAMS_EECP_MASK (0xFF00U)
#define USBC_HCCPARAMS_EECP_SHIFT (8U)
#define USBC_HCCPARAMS_EECP(x) (((uint32_t)(((uint32_t)(x)) << USBC_HCCPARAMS_EECP_SHIFT)) & USBC_HCCPARAMS_EECP_MASK)
#define USBC_HCCPARAMS_RESERVED_16_MASK (0xFFFF0000U)
#define USBC_HCCPARAMS_RESERVED_16_SHIFT (16U)
#define USBC_HCCPARAMS_RESERVED_16(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_HCCPARAMS_RESERVED_16_SHIFT)) & USBC_HCCPARAMS_RESERVED_16_MASK)
/*! @} */

/*! @name DCIVERSION -  */
/*! @{ */
#define USBC_DCIVERSION_DCIVERSION_MASK (0xFFFFU)
#define USBC_DCIVERSION_DCIVERSION_SHIFT (0U)
#define USBC_DCIVERSION_DCIVERSION(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_DCIVERSION_DCIVERSION_SHIFT)) & USBC_DCIVERSION_DCIVERSION_MASK)
/*! @} */

/*! @name DCCPARAMS -  */
/*! @{ */
#define USBC_DCCPARAMS_DEN_MASK (0x1FU)
#define USBC_DCCPARAMS_DEN_SHIFT (0U)
#define USBC_DCCPARAMS_DEN(x) (((uint32_t)(((uint32_t)(x)) << USBC_DCCPARAMS_DEN_SHIFT)) & USBC_DCCPARAMS_DEN_MASK)
#define USBC_DCCPARAMS_RESERVED_5_MASK (0x60U)
#define USBC_DCCPARAMS_RESERVED_5_SHIFT (5U)
#define USBC_DCCPARAMS_RESERVED_5(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DCCPARAMS_RESERVED_5_SHIFT)) & USBC_DCCPARAMS_RESERVED_5_MASK)
#define USBC_DCCPARAMS_DC_MASK (0x80U)
#define USBC_DCCPARAMS_DC_SHIFT (7U)
#define USBC_DCCPARAMS_DC(x) (((uint32_t)(((uint32_t)(x)) << USBC_DCCPARAMS_DC_SHIFT)) & USBC_DCCPARAMS_DC_MASK)
#define USBC_DCCPARAMS_HC_MASK (0x100U)
#define USBC_DCCPARAMS_HC_SHIFT (8U)
#define USBC_DCCPARAMS_HC(x) (((uint32_t)(((uint32_t)(x)) << USBC_DCCPARAMS_HC_SHIFT)) & USBC_DCCPARAMS_HC_MASK)
#define USBC_DCCPARAMS_RESERVED_9_MASK (0x7FFFFE00U)
#define USBC_DCCPARAMS_RESERVED_9_SHIFT (9U)
#define USBC_DCCPARAMS_RESERVED_9(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DCCPARAMS_RESERVED_9_SHIFT)) & USBC_DCCPARAMS_RESERVED_9_MASK)
#define USBC_DCCPARAMS_LPM_EN_MASK (0x80000000U)
#define USBC_DCCPARAMS_LPM_EN_SHIFT (31U)
#define USBC_DCCPARAMS_LPM_EN(x) (((uint32_t)(((uint32_t)(x)) << USBC_DCCPARAMS_LPM_EN_SHIFT)) & USBC_DCCPARAMS_LPM_EN_MASK)
/*! @} */

/*! @name DEVLPMCSR -  */
/*! @{ */
#define USBC_DEVLPMCSR_INT_L1RSM_MASK (0x1U)
#define USBC_DEVLPMCSR_INT_L1RSM_SHIFT (0U)
#define USBC_DEVLPMCSR_INT_L1RSM(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_INT_L1RSM_SHIFT)) & USBC_DEVLPMCSR_INT_L1RSM_MASK)
#define USBC_DEVLPMCSR_INT_LPMPKT_MASK (0x2U)
#define USBC_DEVLPMCSR_INT_LPMPKT_SHIFT (1U)
#define USBC_DEVLPMCSR_INT_LPMPKT(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_INT_LPMPKT_SHIFT)) & USBC_DEVLPMCSR_INT_LPMPKT_MASK)
#define USBC_DEVLPMCSR_INT_LPMACK_MASK (0x4U)
#define USBC_DEVLPMCSR_INT_LPMACK_SHIFT (2U)
#define USBC_DEVLPMCSR_INT_LPMACK(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_INT_LPMACK_SHIFT)) & USBC_DEVLPMCSR_INT_LPMACK_MASK)
#define USBC_DEVLPMCSR_INT_LPMERR_MASK (0x8U)
#define USBC_DEVLPMCSR_INT_LPMERR_SHIFT (3U)
#define USBC_DEVLPMCSR_INT_LPMERR(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_INT_LPMERR_SHIFT)) & USBC_DEVLPMCSR_INT_LPMERR_MASK)
#define USBC_DEVLPMCSR_IE_L1RSM_MASK (0x10U)
#define USBC_DEVLPMCSR_IE_L1RSM_SHIFT (4U)
#define USBC_DEVLPMCSR_IE_L1RSM(x) (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_IE_L1RSM_SHIFT)) & USBC_DEVLPMCSR_IE_L1RSM_MASK)
#define USBC_DEVLPMCSR_IE_LPMPKT_MASK (0x20U)
#define USBC_DEVLPMCSR_IE_LPMPKT_SHIFT (5U)
#define USBC_DEVLPMCSR_IE_LPMPKT(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_IE_LPMPKT_SHIFT)) & USBC_DEVLPMCSR_IE_LPMPKT_MASK)
#define USBC_DEVLPMCSR_IE_LPMACK_MASK (0x40U)
#define USBC_DEVLPMCSR_IE_LPMACK_SHIFT (6U)
#define USBC_DEVLPMCSR_IE_LPMACK(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_IE_LPMACK_SHIFT)) & USBC_DEVLPMCSR_IE_LPMACK_MASK)
#define USBC_DEVLPMCSR_IE_LPMERR_MASK (0x80U)
#define USBC_DEVLPMCSR_IE_LPMERR_SHIFT (7U)
#define USBC_DEVLPMCSR_IE_LPMERR(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_IE_LPMERR_SHIFT)) & USBC_DEVLPMCSR_IE_LPMERR_MASK)
#define USBC_DEVLPMCSR_RWAKE_EN_MASK (0x100U)
#define USBC_DEVLPMCSR_RWAKE_EN_SHIFT (8U)
#define USBC_DEVLPMCSR_RWAKE_EN(x) (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_RWAKE_EN_SHIFT)) & USBC_DEVLPMCSR_RWAKE_EN_MASK)
#define USBC_DEVLPMCSR_L1STATE_MASK (0x200U)
#define USBC_DEVLPMCSR_L1STATE_SHIFT (9U)
#define USBC_DEVLPMCSR_L1STATE(x) (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_L1STATE_SHIFT)) & USBC_DEVLPMCSR_L1STATE_MASK)
#define USBC_DEVLPMCSR_IE_L1STATE_MASK (0x400U)
#define USBC_DEVLPMCSR_IE_L1STATE_SHIFT (10U)
#define USBC_DEVLPMCSR_IE_L1STATE(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_IE_L1STATE_SHIFT)) & USBC_DEVLPMCSR_IE_L1STATE_MASK)
#define USBC_DEVLPMCSR_ACK_OK_MASK (0x800U)
#define USBC_DEVLPMCSR_ACK_OK_SHIFT (11U)
#define USBC_DEVLPMCSR_ACK_OK(x) (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_ACK_OK_SHIFT)) & USBC_DEVLPMCSR_ACK_OK_MASK)
#define USBC_DEVLPMCSR_STALL_OK_MASK (0x1000U)
#define USBC_DEVLPMCSR_STALL_OK_SHIFT (12U)
#define USBC_DEVLPMCSR_STALL_OK(x) (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_STALL_OK_SHIFT)) & USBC_DEVLPMCSR_STALL_OK_MASK)
#define USBC_DEVLPMCSR_MIN_SLP_EN_MASK (0x2000U)
#define USBC_DEVLPMCSR_MIN_SLP_EN_SHIFT (13U)
#define USBC_DEVLPMCSR_MIN_SLP_EN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_MIN_SLP_EN_SHIFT)) & USBC_DEVLPMCSR_MIN_SLP_EN_MASK)
#define USBC_DEVLPMCSR_ALWAYS_LOG_MASK (0x4000U)
#define USBC_DEVLPMCSR_ALWAYS_LOG_SHIFT (14U)
#define USBC_DEVLPMCSR_ALWAYS_LOG(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_ALWAYS_LOG_SHIFT)) & USBC_DEVLPMCSR_ALWAYS_LOG_MASK)
#define USBC_DEVLPMCSR_LPM_ON_MASK (0x8000U)
#define USBC_DEVLPMCSR_LPM_ON_SHIFT (15U)
#define USBC_DEVLPMCSR_LPM_ON(x) (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_LPM_ON_SHIFT)) & USBC_DEVLPMCSR_LPM_ON_MASK)
#define USBC_DEVLPMCSR_HST_RSM_EN_MASK (0x10000U)
#define USBC_DEVLPMCSR_HST_RSM_EN_SHIFT (16U)
#define USBC_DEVLPMCSR_HST_RSM_EN(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_HST_RSM_EN_SHIFT)) & USBC_DEVLPMCSR_HST_RSM_EN_MASK)
#define USBC_DEVLPMCSR_LPM_ANY_EP_MASK (0x20000U)
#define USBC_DEVLPMCSR_LPM_ANY_EP_SHIFT (17U)
#define USBC_DEVLPMCSR_LPM_ANY_EP(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_LPM_ANY_EP_SHIFT)) & USBC_DEVLPMCSR_LPM_ANY_EP_MASK)
#define USBC_DEVLPMCSR_RESERVED_18_MASK (0xC0000U)
#define USBC_DEVLPMCSR_RESERVED_18_SHIFT (18U)
#define USBC_DEVLPMCSR_RESERVED_18(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_RESERVED_18_SHIFT)) & USBC_DEVLPMCSR_RESERVED_18_MASK)
#define USBC_DEVLPMCSR_HIRD_MASK (0xF00000U)
#define USBC_DEVLPMCSR_HIRD_SHIFT (20U)
#define USBC_DEVLPMCSR_HIRD(x) (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_HIRD_SHIFT)) & USBC_DEVLPMCSR_HIRD_MASK)
#define USBC_DEVLPMCSR_LINKSTATE_MASK (0xF000000U)
#define USBC_DEVLPMCSR_LINKSTATE_SHIFT (24U)
#define USBC_DEVLPMCSR_LINKSTATE(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_LINKSTATE_SHIFT)) & USBC_DEVLPMCSR_LINKSTATE_MASK)
#define USBC_DEVLPMCSR_BRMTWAKE_MASK (0x10000000U)
#define USBC_DEVLPMCSR_BRMTWAKE_SHIFT (28U)
#define USBC_DEVLPMCSR_BRMTWAKE(x) (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_BRMTWAKE_SHIFT)) & USBC_DEVLPMCSR_BRMTWAKE_MASK)
#define USBC_DEVLPMCSR_LPM_PHCD_ONLY_MASK (0x20000000U)
#define USBC_DEVLPMCSR_LPM_PHCD_ONLY_SHIFT (29U)
#define USBC_DEVLPMCSR_LPM_PHCD_ONLY(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_LPM_PHCD_ONLY_SHIFT)) & USBC_DEVLPMCSR_LPM_PHCD_ONLY_MASK)
#define USBC_DEVLPMCSR_LPM_RSP_MASK (0xC0000000U)
#define USBC_DEVLPMCSR_LPM_RSP_SHIFT (30U)
#define USBC_DEVLPMCSR_LPM_RSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_DEVLPMCSR_LPM_RSP_SHIFT)) & USBC_DEVLPMCSR_LPM_RSP_MASK)
/*! @} */

/*! @name USBCMD -  */
/*! @{ */
#define USBC_USBCMD_RS_MASK (0x1U)
#define USBC_USBCMD_RS_SHIFT (0U)
#define USBC_USBCMD_RS(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_RS_SHIFT)) & USBC_USBCMD_RS_MASK)
#define USBC_USBCMD_RST_MASK (0x2U)
#define USBC_USBCMD_RST_SHIFT (1U)
#define USBC_USBCMD_RST(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_RST_SHIFT)) & USBC_USBCMD_RST_MASK)
#define USBC_USBCMD_FS0_MASK (0x4U)
#define USBC_USBCMD_FS0_SHIFT (2U)
/*! FS0 - HOST only
 */
#define USBC_USBCMD_FS0(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_FS0_SHIFT)) & USBC_USBCMD_FS0_MASK)
#define USBC_USBCMD_FS1_MASK (0x8U)
#define USBC_USBCMD_FS1_SHIFT (3U)
/*! FS1 - HOST only
 */
#define USBC_USBCMD_FS1(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_FS1_SHIFT)) & USBC_USBCMD_FS1_MASK)
#define USBC_USBCMD_PSE_MASK (0x10U)
#define USBC_USBCMD_PSE_SHIFT (4U)
/*! PSE - HOST only
 */
#define USBC_USBCMD_PSE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_PSE_SHIFT)) & USBC_USBCMD_PSE_MASK)
#define USBC_USBCMD_ASE_MASK (0x20U)
#define USBC_USBCMD_ASE_SHIFT (5U)
/*! ASE - HOST only
 */
#define USBC_USBCMD_ASE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_ASE_SHIFT)) & USBC_USBCMD_ASE_MASK)
#define USBC_USBCMD_IAA_MASK (0x40U)
#define USBC_USBCMD_IAA_SHIFT (6U)
/*! IAA - HOST only
 */
#define USBC_USBCMD_IAA(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_IAA_SHIFT)) & USBC_USBCMD_IAA_MASK)
#define USBC_USBCMD_LR_MASK (0x80U)
#define USBC_USBCMD_LR_SHIFT (7U)
#define USBC_USBCMD_LR(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_LR_SHIFT)) & USBC_USBCMD_LR_MASK)
#define USBC_USBCMD_ASP0_MASK (0x100U)
#define USBC_USBCMD_ASP0_SHIFT (8U)
/*! ASP0 - HOST only
 */
#define USBC_USBCMD_ASP0(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_ASP0_SHIFT)) & USBC_USBCMD_ASP0_MASK)
#define USBC_USBCMD_ASP1_MASK (0x200U)
#define USBC_USBCMD_ASP1_SHIFT (9U)
/*! ASP1 - HOST only
 */
#define USBC_USBCMD_ASP1(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_ASP1_SHIFT)) & USBC_USBCMD_ASP1_MASK)
#define USBC_USBCMD_RESERVED_10_MASK (0x400U)
#define USBC_USBCMD_RESERVED_10_SHIFT (10U)
#define USBC_USBCMD_RESERVED_10(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_RESERVED_10_SHIFT)) & USBC_USBCMD_RESERVED_10_MASK)
#define USBC_USBCMD_ASPE_MASK (0x800U)
#define USBC_USBCMD_ASPE_SHIFT (11U)
/*! ASPE - HOST only
 */
#define USBC_USBCMD_ASPE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_ASPE_SHIFT)) & USBC_USBCMD_ASPE_MASK)
#define USBC_USBCMD_RESERVED_12_MASK (0x1000U)
#define USBC_USBCMD_RESERVED_12_SHIFT (12U)
#define USBC_USBCMD_RESERVED_12(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_RESERVED_12_SHIFT)) & USBC_USBCMD_RESERVED_12_MASK)
#define USBC_USBCMD_SUTW_MASK (0x2000U)
#define USBC_USBCMD_SUTW_SHIFT (13U)
#define USBC_USBCMD_SUTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_SUTW_SHIFT)) & USBC_USBCMD_SUTW_MASK)
#define USBC_USBCMD_ATDTW_MASK (0x4000U)
#define USBC_USBCMD_ATDTW_SHIFT (14U)
#define USBC_USBCMD_ATDTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_ATDTW_SHIFT)) & USBC_USBCMD_ATDTW_MASK)
#define USBC_USBCMD_FS2_MASK (0x8000U)
#define USBC_USBCMD_FS2_SHIFT (15U)
/*! FS2 - HOST only
 */
#define USBC_USBCMD_FS2(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_FS2_SHIFT)) & USBC_USBCMD_FS2_MASK)
#define USBC_USBCMD_ITC_MASK (0xFF0000U)
#define USBC_USBCMD_ITC_SHIFT (16U)
#define USBC_USBCMD_ITC(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_ITC_SHIFT)) & USBC_USBCMD_ITC_MASK)
#define USBC_USBCMD_RESERVED_24_MASK (0xFF000000U)
#define USBC_USBCMD_RESERVED_24_SHIFT (24U)
#define USBC_USBCMD_RESERVED_24(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBCMD_RESERVED_24_SHIFT)) & USBC_USBCMD_RESERVED_24_MASK)
/*! @} */

/*! @name USBSTS -  */
/*! @{ */
#define USBC_USBSTS_UI_MASK (0x1U)
#define USBC_USBSTS_UI_SHIFT (0U)
/*! UI - rwc
 */
#define USBC_USBSTS_UI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_UI_SHIFT)) & USBC_USBSTS_UI_MASK)
#define USBC_USBSTS_UEI_MASK (0x2U)
#define USBC_USBSTS_UEI_SHIFT (1U)
/*! UEI - rwc
 */
#define USBC_USBSTS_UEI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_UEI_SHIFT)) & USBC_USBSTS_UEI_MASK)
#define USBC_USBSTS_PCI_MASK (0x4U)
#define USBC_USBSTS_PCI_SHIFT (2U)
/*! PCI - rwc
 */
#define USBC_USBSTS_PCI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_PCI_SHIFT)) & USBC_USBSTS_PCI_MASK)
#define USBC_USBSTS_FRI_MASK (0x8U)
#define USBC_USBSTS_FRI_SHIFT (3U)
/*! FRI - rwc
 */
#define USBC_USBSTS_FRI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_FRI_SHIFT)) & USBC_USBSTS_FRI_MASK)
#define USBC_USBSTS_SEI_MASK (0x10U)
#define USBC_USBSTS_SEI_SHIFT (4U)
/*! SEI - rwc
 */
#define USBC_USBSTS_SEI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_SEI_SHIFT)) & USBC_USBSTS_SEI_MASK)
#define USBC_USBSTS_AAI_MASK (0x20U)
#define USBC_USBSTS_AAI_SHIFT (5U)
/*! AAI - rwc
 */
#define USBC_USBSTS_AAI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_AAI_SHIFT)) & USBC_USBSTS_AAI_MASK)
#define USBC_USBSTS_URI_MASK (0x40U)
#define USBC_USBSTS_URI_SHIFT (6U)
/*! URI - rwc
 */
#define USBC_USBSTS_URI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_URI_SHIFT)) & USBC_USBSTS_URI_MASK)
#define USBC_USBSTS_SRI_MASK (0x80U)
#define USBC_USBSTS_SRI_SHIFT (7U)
/*! SRI - rwc
 */
#define USBC_USBSTS_SRI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_SRI_SHIFT)) & USBC_USBSTS_SRI_MASK)
#define USBC_USBSTS_SLI_MASK (0x100U)
#define USBC_USBSTS_SLI_SHIFT (8U)
/*! SLI - rwc
 */
#define USBC_USBSTS_SLI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_SLI_SHIFT)) & USBC_USBSTS_SLI_MASK)
#define USBC_USBSTS_RESERVED_9_MASK (0x200U)
#define USBC_USBSTS_RESERVED_9_SHIFT (9U)
#define USBC_USBSTS_RESERVED_9(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_RESERVED_9_SHIFT)) & USBC_USBSTS_RESERVED_9_MASK)
#define USBC_USBSTS_ULPII_MASK (0x400U)
#define USBC_USBSTS_ULPII_SHIFT (10U)
/*! ULPII - rwc
 */
#define USBC_USBSTS_ULPII(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_ULPII_SHIFT)) & USBC_USBSTS_ULPII_MASK)
#define USBC_USBSTS_RESERVED_11_MASK (0x800U)
#define USBC_USBSTS_RESERVED_11_SHIFT (11U)
#define USBC_USBSTS_RESERVED_11(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_RESERVED_11_SHIFT)) & USBC_USBSTS_RESERVED_11_MASK)
#define USBC_USBSTS_HCH_MASK (0x1000U)
#define USBC_USBSTS_HCH_SHIFT (12U)
/*! HCH - HOST only
 */
#define USBC_USBSTS_HCH(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_HCH_SHIFT)) & USBC_USBSTS_HCH_MASK)
#define USBC_USBSTS_RCL_MASK (0x2000U)
#define USBC_USBSTS_RCL_SHIFT (13U)
#define USBC_USBSTS_RCL(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_RCL_SHIFT)) & USBC_USBSTS_RCL_MASK)
#define USBC_USBSTS_PS_MASK (0x4000U)
#define USBC_USBSTS_PS_SHIFT (14U)
#define USBC_USBSTS_PS(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_PS_SHIFT)) & USBC_USBSTS_PS_MASK)
#define USBC_USBSTS_AS_MASK (0x8000U)
#define USBC_USBSTS_AS_SHIFT (15U)
#define USBC_USBSTS_AS(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_AS_SHIFT)) & USBC_USBSTS_AS_MASK)
#define USBC_USBSTS_NAKI_MASK (0x10000U)
#define USBC_USBSTS_NAKI_SHIFT (16U)
#define USBC_USBSTS_NAKI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_NAKI_SHIFT)) & USBC_USBSTS_NAKI_MASK)
#define USBC_USBSTS_RESERVED_17_MASK (0x20000U)
#define USBC_USBSTS_RESERVED_17_SHIFT (17U)
#define USBC_USBSTS_RESERVED_17(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_RESERVED_17_SHIFT)) & USBC_USBSTS_RESERVED_17_MASK)
#define USBC_USBSTS_UAI_MASK (0x40000U)
#define USBC_USBSTS_UAI_SHIFT (18U)
/*! UAI - rwc
 */
#define USBC_USBSTS_UAI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_UAI_SHIFT)) & USBC_USBSTS_UAI_MASK)
#define USBC_USBSTS_UPI_MASK (0x80000U)
#define USBC_USBSTS_UPI_SHIFT (19U)
/*! UPI - rwc
 */
#define USBC_USBSTS_UPI(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_UPI_SHIFT)) & USBC_USBSTS_UPI_MASK)
#define USBC_USBSTS_RESERVED_20_MASK (0xF00000U)
#define USBC_USBSTS_RESERVED_20_SHIFT (20U)
#define USBC_USBSTS_RESERVED_20(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_RESERVED_20_SHIFT)) & USBC_USBSTS_RESERVED_20_MASK)
#define USBC_USBSTS_TI0_MASK (0x1000000U)
#define USBC_USBSTS_TI0_SHIFT (24U)
/*! TI0 - rwc
 */
#define USBC_USBSTS_TI0(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_TI0_SHIFT)) & USBC_USBSTS_TI0_MASK)
#define USBC_USBSTS_TI1_MASK (0x2000000U)
#define USBC_USBSTS_TI1_SHIFT (25U)
/*! TI1 - rwc
 */
#define USBC_USBSTS_TI1(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_TI1_SHIFT)) & USBC_USBSTS_TI1_MASK)
#define USBC_USBSTS_RESERVED_26_MASK (0xFC000000U)
#define USBC_USBSTS_RESERVED_26_SHIFT (26U)
#define USBC_USBSTS_RESERVED_26(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBSTS_RESERVED_26_SHIFT)) & USBC_USBSTS_RESERVED_26_MASK)
/*! @} */

/*! @name USBINTR -  */
/*! @{ */
#define USBC_USBINTR_UE_MASK (0x1U)
#define USBC_USBINTR_UE_SHIFT (0U)
#define USBC_USBINTR_UE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_UE_SHIFT)) & USBC_USBINTR_UE_MASK)
#define USBC_USBINTR_UEE_MASK (0x2U)
#define USBC_USBINTR_UEE_SHIFT (1U)
/*! UEE - rwc
 */
#define USBC_USBINTR_UEE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_UEE_SHIFT)) & USBC_USBINTR_UEE_MASK)
#define USBC_USBINTR_PCE_MASK (0x4U)
#define USBC_USBINTR_PCE_SHIFT (2U)
#define USBC_USBINTR_PCE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_PCE_SHIFT)) & USBC_USBINTR_PCE_MASK)
#define USBC_USBINTR_FRE_MASK (0x8U)
#define USBC_USBINTR_FRE_SHIFT (3U)
/*! FRE - HOST only
 */
#define USBC_USBINTR_FRE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_FRE_SHIFT)) & USBC_USBINTR_FRE_MASK)
#define USBC_USBINTR_SEE_MASK (0x10U)
#define USBC_USBINTR_SEE_SHIFT (4U)
#define USBC_USBINTR_SEE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_SEE_SHIFT)) & USBC_USBINTR_SEE_MASK)
#define USBC_USBINTR_AAE_MASK (0x20U)
#define USBC_USBINTR_AAE_SHIFT (5U)
/*! AAE - HOST only
 */
#define USBC_USBINTR_AAE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_AAE_SHIFT)) & USBC_USBINTR_AAE_MASK)
#define USBC_USBINTR_URE_MASK (0x40U)
#define USBC_USBINTR_URE_SHIFT (6U)
#define USBC_USBINTR_URE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_URE_SHIFT)) & USBC_USBINTR_URE_MASK)
#define USBC_USBINTR_SRE_MASK (0x80U)
#define USBC_USBINTR_SRE_SHIFT (7U)
#define USBC_USBINTR_SRE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_SRE_SHIFT)) & USBC_USBINTR_SRE_MASK)
#define USBC_USBINTR_SLE_MASK (0x100U)
#define USBC_USBINTR_SLE_SHIFT (8U)
#define USBC_USBINTR_SLE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_SLE_SHIFT)) & USBC_USBINTR_SLE_MASK)
#define USBC_USBINTR_RESERVED_9_MASK (0x200U)
#define USBC_USBINTR_RESERVED_9_SHIFT (9U)
#define USBC_USBINTR_RESERVED_9(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_RESERVED_9_SHIFT)) & USBC_USBINTR_RESERVED_9_MASK)
#define USBC_USBINTR_ULPE_MASK (0x400U)
#define USBC_USBINTR_ULPE_SHIFT (10U)
/*! ULPE - ONLY used VUSB_HS_PHY_ULPI =1
 */
#define USBC_USBINTR_ULPE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_ULPE_SHIFT)) & USBC_USBINTR_ULPE_MASK)
#define USBC_USBINTR_RESERVED_11_MASK (0x800U)
#define USBC_USBINTR_RESERVED_11_SHIFT (11U)
#define USBC_USBINTR_RESERVED_11(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_RESERVED_11_SHIFT)) & USBC_USBINTR_RESERVED_11_MASK)
#define USBC_USBINTR_RESERVED_12_MASK (0x1000U)
#define USBC_USBINTR_RESERVED_12_SHIFT (12U)
#define USBC_USBINTR_RESERVED_12(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_RESERVED_12_SHIFT)) & USBC_USBINTR_RESERVED_12_MASK)
#define USBC_USBINTR_RESERVED_13_MASK (0x2000U)
#define USBC_USBINTR_RESERVED_13_SHIFT (13U)
/*! Reserved_13 - Not define in DUT,RCL
 */
#define USBC_USBINTR_RESERVED_13(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_RESERVED_13_SHIFT)) & USBC_USBINTR_RESERVED_13_MASK)
#define USBC_USBINTR_RESERVED_14_MASK (0x4000U)
#define USBC_USBINTR_RESERVED_14_SHIFT (14U)
/*! Reserved_14 - Not define in DUT, PS
 */
#define USBC_USBINTR_RESERVED_14(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_RESERVED_14_SHIFT)) & USBC_USBINTR_RESERVED_14_MASK)
#define USBC_USBINTR_RESERVED_15_MASK (0x8000U)
#define USBC_USBINTR_RESERVED_15_SHIFT (15U)
/*! Reserved_15 - Not define in DUT, AS
 */
#define USBC_USBINTR_RESERVED_15(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_RESERVED_15_SHIFT)) & USBC_USBINTR_RESERVED_15_MASK)
#define USBC_USBINTR_NAKE_MASK (0x10000U)
#define USBC_USBINTR_NAKE_SHIFT (16U)
#define USBC_USBINTR_NAKE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_NAKE_SHIFT)) & USBC_USBINTR_NAKE_MASK)
#define USBC_USBINTR_RESERVED_17_MASK (0x20000U)
#define USBC_USBINTR_RESERVED_17_SHIFT (17U)
#define USBC_USBINTR_RESERVED_17(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_RESERVED_17_SHIFT)) & USBC_USBINTR_RESERVED_17_MASK)
#define USBC_USBINTR_UAE_MASK (0x40000U)
#define USBC_USBINTR_UAE_SHIFT (18U)
/*! UAE - Not use in Device mode
 */
#define USBC_USBINTR_UAE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_UAE_SHIFT)) & USBC_USBINTR_UAE_MASK)
#define USBC_USBINTR_UPE_MASK (0x80000U)
#define USBC_USBINTR_UPE_SHIFT (19U)
/*! UPE - Not use in Device mode
 */
#define USBC_USBINTR_UPE(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_UPE_SHIFT)) & USBC_USBINTR_UPE_MASK)
#define USBC_USBINTR_RESERVED_20_MASK (0xF00000U)
#define USBC_USBINTR_RESERVED_20_SHIFT (20U)
#define USBC_USBINTR_RESERVED_20(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_RESERVED_20_SHIFT)) & USBC_USBINTR_RESERVED_20_MASK)
#define USBC_USBINTR_TIE0_MASK (0x1000000U)
#define USBC_USBINTR_TIE0_SHIFT (24U)
#define USBC_USBINTR_TIE0(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_TIE0_SHIFT)) & USBC_USBINTR_TIE0_MASK)
#define USBC_USBINTR_TIE1_MASK (0x2000000U)
#define USBC_USBINTR_TIE1_SHIFT (25U)
#define USBC_USBINTR_TIE1(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_TIE1_SHIFT)) & USBC_USBINTR_TIE1_MASK)
#define USBC_USBINTR_RESERVED_26_MASK (0xFC000000U)
#define USBC_USBINTR_RESERVED_26_SHIFT (26U)
#define USBC_USBINTR_RESERVED_26(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_USBINTR_RESERVED_26_SHIFT)) & USBC_USBINTR_RESERVED_26_MASK)
/*! @} */

/*! @name FRINDEX -  */
/*! @{ */
#define USBC_FRINDEX_FRINDEX_MASK (0x3FFFU)
#define USBC_FRINDEX_FRINDEX_SHIFT (0U)
/*! FRINDEX - device RO, Host RW
 */
#define USBC_FRINDEX_FRINDEX(x) (((uint32_t)(((uint32_t)(x)) << USBC_FRINDEX_FRINDEX_SHIFT)) & USBC_FRINDEX_FRINDEX_MASK)
#define USBC_FRINDEX_RESERVED_14_MASK (0xFFFFC000U)
#define USBC_FRINDEX_RESERVED_14_SHIFT (14U)
#define USBC_FRINDEX_RESERVED_14(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_FRINDEX_RESERVED_14_SHIFT)) & USBC_FRINDEX_RESERVED_14_MASK)
/*! @} */

/*! @name PERIODICLISTBASE -  */
/*! @{ */
#define USBC_PERIODICLISTBASE_RESERVED_0_MASK (0xFFFFFFU)
#define USBC_PERIODICLISTBASE_RESERVED_0_SHIFT (0U)
#define USBC_PERIODICLISTBASE_RESERVED_0(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << USBC_PERIODICLISTBASE_RESERVED_0_SHIFT)) & USBC_PERIODICLISTBASE_RESERVED_0_MASK)
#define USBC_PERIODICLISTBASE_USBADRA_MASK (0x1000000U)
#define USBC_PERIODICLISTBASE_USBADRA_SHIFT (24U)
#define USBC_PERIODICLISTBASE_USBADRA(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_PERIODICLISTBASE_USBADRA_SHIFT)) & USBC_PERIODICLISTBASE_USBADRA_MASK)
#define USBC_PERIODICLISTBASE_USBADR_MASK (0xFE000000U)
#define USBC_PERIODICLISTBASE_USBADR_SHIFT (25U)
#define USBC_PERIODICLISTBASE_USBADR(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_PERIODICLISTBASE_USBADR_SHIFT)) & USBC_PERIODICLISTBASE_USBADR_MASK)
/*! @} */

/*! @name ASYNCLISTADDR -  */
/*! @{ */
#define USBC_ASYNCLISTADDR_RESERVED_0_MASK (0x7FFU)
#define USBC_ASYNCLISTADDR_RESERVED_0_SHIFT (0U)
#define USBC_ASYNCLISTADDR_RESERVED_0(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_ASYNCLISTADDR_RESERVED_0_SHIFT)) & USBC_ASYNCLISTADDR_RESERVED_0_MASK)
#define USBC_ASYNCLISTADDR_EPBASE_MASK (0xFFFFF800U)
#define USBC_ASYNCLISTADDR_EPBASE_SHIFT (11U)
#define USBC_ASYNCLISTADDR_EPBASE(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_ASYNCLISTADDR_EPBASE_SHIFT)) & USBC_ASYNCLISTADDR_EPBASE_MASK)
/*! @} */

/*! @name TTCTRL -  */
/*! @{ */
#define USBC_TTCTRL_TTAS_MASK (0x1U)
#define USBC_TTCTRL_TTAS_SHIFT (0U)
#define USBC_TTCTRL_TTAS(x) (((uint32_t)(((uint32_t)(x)) << USBC_TTCTRL_TTAS_SHIFT)) & USBC_TTCTRL_TTAS_MASK)
#define USBC_TTCTRL_TTAC_MASK (0x2U)
#define USBC_TTCTRL_TTAC_SHIFT (1U)
#define USBC_TTCTRL_TTAC(x) (((uint32_t)(((uint32_t)(x)) << USBC_TTCTRL_TTAC_SHIFT)) & USBC_TTCTRL_TTAC_MASK)
#define USBC_TTCTRL_RESERVED_2_MASK (0xFFFFFCU)
#define USBC_TTCTRL_RESERVED_2_SHIFT (2U)
#define USBC_TTCTRL_RESERVED_2(x) (((uint32_t)(((uint32_t)(x)) << USBC_TTCTRL_RESERVED_2_SHIFT)) & USBC_TTCTRL_RESERVED_2_MASK)
#define USBC_TTCTRL_TTHA_MASK (0x7F000000U)
#define USBC_TTCTRL_TTHA_SHIFT (24U)
#define USBC_TTCTRL_TTHA(x) (((uint32_t)(((uint32_t)(x)) << USBC_TTCTRL_TTHA_SHIFT)) & USBC_TTCTRL_TTHA_MASK)
#define USBC_TTCTRL_RESERVED_31_MASK (0x80000000U)
#define USBC_TTCTRL_RESERVED_31_SHIFT (31U)
#define USBC_TTCTRL_RESERVED_31(x) (((uint32_t)(((uint32_t)(x)) << USBC_TTCTRL_RESERVED_31_SHIFT)) & USBC_TTCTRL_RESERVED_31_MASK)
/*! @} */

/*! @name BURSTSIZE -  */
/*! @{ */
#define USBC_BURSTSIZE_RXPBURST_MASK (0xFFU)
#define USBC_BURSTSIZE_RXPBURST_SHIFT (0U)
#define USBC_BURSTSIZE_RXPBURST(x) (((uint32_t)(((uint32_t)(x)) << USBC_BURSTSIZE_RXPBURST_SHIFT)) & USBC_BURSTSIZE_RXPBURST_MASK)
#define USBC_BURSTSIZE_TXPBURST_MASK (0xFF00U)
#define USBC_BURSTSIZE_TXPBURST_SHIFT (8U)
#define USBC_BURSTSIZE_TXPBURST(x) (((uint32_t)(((uint32_t)(x)) << USBC_BURSTSIZE_TXPBURST_SHIFT)) & USBC_BURSTSIZE_TXPBURST_MASK)
#define USBC_BURSTSIZE_RESERVED_16_MASK (0xFFFF0000U)
#define USBC_BURSTSIZE_RESERVED_16_SHIFT (16U)
#define USBC_BURSTSIZE_RESERVED_16(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_BURSTSIZE_RESERVED_16_SHIFT)) & USBC_BURSTSIZE_RESERVED_16_MASK)
/*! @} */

/*! @name TXFILLTUNING -  */
/*! @{ */
#define USBC_TXFILLTUNING_TXSCHOH_MASK (0x7FU)
#define USBC_TXFILLTUNING_TXSCHOH_SHIFT (0U)
/*! TXSCHOH - Only use in HOST & MPH mode
 */
#define USBC_TXFILLTUNING_TXSCHOH(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXFILLTUNING_TXSCHOH_SHIFT)) & USBC_TXFILLTUNING_TXSCHOH_MASK)
#define USBC_TXFILLTUNING_RESERVED_7_MASK (0x80U)
#define USBC_TXFILLTUNING_RESERVED_7_SHIFT (7U)
#define USBC_TXFILLTUNING_RESERVED_7(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXFILLTUNING_RESERVED_7_SHIFT)) & USBC_TXFILLTUNING_RESERVED_7_MASK)
#define USBC_TXFILLTUNING_TXSCHHEALTH_MASK (0x1F00U)
#define USBC_TXFILLTUNING_TXSCHHEALTH_SHIFT (8U)
/*! TXSCHHEALTH - Only use in HOST & MPH mode, rwc
 */
#define USBC_TXFILLTUNING_TXSCHHEALTH(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXFILLTUNING_TXSCHHEALTH_SHIFT)) & USBC_TXFILLTUNING_TXSCHHEALTH_MASK)
#define USBC_TXFILLTUNING_RESERVED_13_MASK (0xE000U)
#define USBC_TXFILLTUNING_RESERVED_13_SHIFT (13U)
#define USBC_TXFILLTUNING_RESERVED_13(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXFILLTUNING_RESERVED_13_SHIFT)) & USBC_TXFILLTUNING_RESERVED_13_MASK)
#define USBC_TXFILLTUNING_TXFIFOTHRES_MASK (0x3F0000U)
#define USBC_TXFILLTUNING_TXFIFOTHRES_SHIFT (16U)
/*! TXFIFOTHRES - Only use in HOST & MPH mode
 */
#define USBC_TXFILLTUNING_TXFIFOTHRES(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXFILLTUNING_TXFIFOTHRES_SHIFT)) & USBC_TXFILLTUNING_TXFIFOTHRES_MASK)
#define USBC_TXFILLTUNING_RESERVED_22_MASK (0xFFC00000U)
#define USBC_TXFILLTUNING_RESERVED_22_SHIFT (22U)
#define USBC_TXFILLTUNING_RESERVED_22(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXFILLTUNING_RESERVED_22_SHIFT)) & USBC_TXFILLTUNING_RESERVED_22_MASK)
/*! @} */

/*! @name TXTTFILLTUNING -  */
/*! @{ */
#define USBC_TXTTFILLTUNING_TXTTSCHOH_MASK (0x1FU)
#define USBC_TXTTFILLTUNING_TXTTSCHOH_SHIFT (0U)
/*! TXTTSCHOH - Only use in HOST & MPH mode
 */
#define USBC_TXTTFILLTUNING_TXTTSCHOH(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXTTFILLTUNING_TXTTSCHOH_SHIFT)) & USBC_TXTTFILLTUNING_TXTTSCHOH_MASK)
#define USBC_TXTTFILLTUNING_RESERVED_5_MASK (0xE0U)
#define USBC_TXTTFILLTUNING_RESERVED_5_SHIFT (5U)
#define USBC_TXTTFILLTUNING_RESERVED_5(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXTTFILLTUNING_RESERVED_5_SHIFT)) & USBC_TXTTFILLTUNING_RESERVED_5_MASK)
#define USBC_TXTTFILLTUNING_TXTTSCHHEALTJ_MASK (0x1F00U)
#define USBC_TXTTFILLTUNING_TXTTSCHHEALTJ_SHIFT (8U)
/*! TXTTSCHHEALTJ - Only use in HOST & MPH mode, rwc
 */
#define USBC_TXTTFILLTUNING_TXTTSCHHEALTJ(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXTTFILLTUNING_TXTTSCHHEALTJ_SHIFT)) & USBC_TXTTFILLTUNING_TXTTSCHHEALTJ_MASK)
#define USBC_TXTTFILLTUNING_RESERVED_13_MASK (0xFFFFE000U)
#define USBC_TXTTFILLTUNING_RESERVED_13_SHIFT (13U)
#define USBC_TXTTFILLTUNING_RESERVED_13(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << USBC_TXTTFILLTUNING_RESERVED_13_SHIFT)) & USBC_TXTTFILLTUNING_RESERVED_13_MASK)
/*! @} */

/*! @name IC_USB -  */
/*! @{ */
#define USBC_IC_USB_IC_VDD1_MASK (0x7U)
#define USBC_IC_USB_IC_VDD1_SHIFT (0U)
/*! IC_VDD1 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC_VDD1(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC_VDD1_SHIFT)) & USBC_IC_USB_IC_VDD1_MASK)
#define USBC_IC_USB_IC1_MASK (0x8U)
#define USBC_IC_USB_IC1_SHIFT (3U)
/*! IC1 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC1(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC1_SHIFT)) & USBC_IC_USB_IC1_MASK)
#define USBC_IC_USB_IC_VDD2_MASK (0x70U)
#define USBC_IC_USB_IC_VDD2_SHIFT (4U)
/*! IC_VDD2 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC_VDD2(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC_VDD2_SHIFT)) & USBC_IC_USB_IC_VDD2_MASK)
#define USBC_IC_USB_IC2_MASK (0x80U)
#define USBC_IC_USB_IC2_SHIFT (7U)
/*! IC2 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC2(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC2_SHIFT)) & USBC_IC_USB_IC2_MASK)
#define USBC_IC_USB_IC_VDD3_MASK (0x700U)
#define USBC_IC_USB_IC_VDD3_SHIFT (8U)
/*! IC_VDD3 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC_VDD3(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC_VDD3_SHIFT)) & USBC_IC_USB_IC_VDD3_MASK)
#define USBC_IC_USB_IC3_MASK (0x800U)
#define USBC_IC_USB_IC3_SHIFT (11U)
/*! IC3 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC3(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC3_SHIFT)) & USBC_IC_USB_IC3_MASK)
#define USBC_IC_USB_IC_VDD4_MASK (0x7000U)
#define USBC_IC_USB_IC_VDD4_SHIFT (12U)
/*! IC_VDD4 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC_VDD4(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC_VDD4_SHIFT)) & USBC_IC_USB_IC_VDD4_MASK)
#define USBC_IC_USB_IC4_MASK (0x8000U)
#define USBC_IC_USB_IC4_SHIFT (15U)
/*! IC4 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC4(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC4_SHIFT)) & USBC_IC_USB_IC4_MASK)
#define USBC_IC_USB_IC_VDD5_MASK (0x70000U)
#define USBC_IC_USB_IC_VDD5_SHIFT (16U)
/*! IC_VDD5 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC_VDD5(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC_VDD5_SHIFT)) & USBC_IC_USB_IC_VDD5_MASK)
#define USBC_IC_USB_IC5_MASK (0x80000U)
#define USBC_IC_USB_IC5_SHIFT (19U)
/*! IC5 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC5(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC5_SHIFT)) & USBC_IC_USB_IC5_MASK)
#define USBC_IC_USB_IC_VDD6_MASK (0x700000U)
#define USBC_IC_USB_IC_VDD6_SHIFT (20U)
/*! IC_VDD6 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC_VDD6(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC_VDD6_SHIFT)) & USBC_IC_USB_IC_VDD6_MASK)
#define USBC_IC_USB_IC6_MASK (0x800000U)
#define USBC_IC_USB_IC6_SHIFT (23U)
/*! IC6 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC6(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC6_SHIFT)) & USBC_IC_USB_IC6_MASK)
#define USBC_IC_USB_IC_VDD7_MASK (0x7000000U)
#define USBC_IC_USB_IC_VDD7_SHIFT (24U)
/*! IC_VDD7 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC_VDD7(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC_VDD7_SHIFT)) & USBC_IC_USB_IC_VDD7_MASK)
#define USBC_IC_USB_IC7_MASK (0x8000000U)
#define USBC_IC_USB_IC7_SHIFT (27U)
/*! IC7 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC7(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC7_SHIFT)) & USBC_IC_USB_IC7_MASK)
#define USBC_IC_USB_IC_VDD8_MASK (0x70000000U)
#define USBC_IC_USB_IC_VDD8_SHIFT (28U)
/*! IC_VDD8 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC_VDD8(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC_VDD8_SHIFT)) & USBC_IC_USB_IC_VDD8_MASK)
#define USBC_IC_USB_IC8_MASK (0x80000000U)
#define USBC_IC_USB_IC8_SHIFT (31U)
/*! IC8 - available in MPH & VUSB_HS_PHY_IC_USB =1
 */
#define USBC_IC_USB_IC8(x) (((uint32_t)(((uint32_t)(x)) << USBC_IC_USB_IC8_SHIFT)) & USBC_IC_USB_IC8_MASK)
/*! @} */

/*! @name ULPI_VIEWPORT -  */
/*! @{ */
#define USBC_ULPI_VIEWPORT_ULPIDATWR_MASK (0xFFU)
#define USBC_ULPI_VIEWPORT_ULPIDATWR_SHIFT (0U)
/*! ULPIDATWR - Not available
 */
#define USBC_ULPI_VIEWPORT_ULPIDATWR(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ULPI_VIEWPORT_ULPIDATWR_SHIFT)) & USBC_ULPI_VIEWPORT_ULPIDATWR_MASK)
#define USBC_ULPI_VIEWPORT_ULPIDATRD_MASK (0xFF00U)
#define USBC_ULPI_VIEWPORT_ULPIDATRD_SHIFT (8U)
/*! ULPIDATRD - Not available
 */
#define USBC_ULPI_VIEWPORT_ULPIDATRD(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ULPI_VIEWPORT_ULPIDATRD_SHIFT)) & USBC_ULPI_VIEWPORT_ULPIDATRD_MASK)
#define USBC_ULPI_VIEWPORT_ULPIADDR_MASK (0xFF0000U)
#define USBC_ULPI_VIEWPORT_ULPIADDR_SHIFT (16U)
/*! ULPIADDR - Not available
 */
#define USBC_ULPI_VIEWPORT_ULPIADDR(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ULPI_VIEWPORT_ULPIADDR_SHIFT)) & USBC_ULPI_VIEWPORT_ULPIADDR_MASK)
#define USBC_ULPI_VIEWPORT_ULPIPORT_MASK (0x7000000U)
#define USBC_ULPI_VIEWPORT_ULPIPORT_SHIFT (24U)
/*! ULPIPORT - Not available
 */
#define USBC_ULPI_VIEWPORT_ULPIPORT(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ULPI_VIEWPORT_ULPIPORT_SHIFT)) & USBC_ULPI_VIEWPORT_ULPIPORT_MASK)
#define USBC_ULPI_VIEWPORT_ULPISS_MASK (0x8000000U)
#define USBC_ULPI_VIEWPORT_ULPISS_SHIFT (27U)
/*! ULPISS - Not available
 */
#define USBC_ULPI_VIEWPORT_ULPISS(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_ULPI_VIEWPORT_ULPISS_SHIFT)) & USBC_ULPI_VIEWPORT_ULPISS_MASK)
#define USBC_ULPI_VIEWPORT_RESERVED_28_MASK (0x10000000U)
#define USBC_ULPI_VIEWPORT_RESERVED_28_SHIFT (28U)
/*! Reserved_28 - Not available
 */
#define USBC_ULPI_VIEWPORT_RESERVED_28(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << USBC_ULPI_VIEWPORT_RESERVED_28_SHIFT)) & USBC_ULPI_VIEWPORT_RESERVED_28_MASK)
#define USBC_ULPI_VIEWPORT_ULPIRW_MASK (0x20000000U)
#define USBC_ULPI_VIEWPORT_ULPIRW_SHIFT (29U)
/*! ULPIRW - Not available
 */
#define USBC_ULPI_VIEWPORT_ULPIRW(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_ULPI_VIEWPORT_ULPIRW_SHIFT)) & USBC_ULPI_VIEWPORT_ULPIRW_MASK)
#define USBC_ULPI_VIEWPORT_ULPIRUN_MASK (0x40000000U)
#define USBC_ULPI_VIEWPORT_ULPIRUN_SHIFT (30U)
/*! ULPIRUN - Not available
 */
#define USBC_ULPI_VIEWPORT_ULPIRUN(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ULPI_VIEWPORT_ULPIRUN_SHIFT)) & USBC_ULPI_VIEWPORT_ULPIRUN_MASK)
#define USBC_ULPI_VIEWPORT_ULPIWU_MASK (0x80000000U)
#define USBC_ULPI_VIEWPORT_ULPIWU_SHIFT (31U)
/*! ULPIWU - Not available
 */
#define USBC_ULPI_VIEWPORT_ULPIWU(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_ULPI_VIEWPORT_ULPIWU_SHIFT)) & USBC_ULPI_VIEWPORT_ULPIWU_MASK)
/*! @} */

/*! @name ENDPTNAK -  */
/*! @{ */
#define USBC_ENDPTNAK_EPRN_MASK (0xFFFFU)
#define USBC_ENDPTNAK_EPRN_SHIFT (0U)
/*! EPRN - rwc
 */
#define USBC_ENDPTNAK_EPRN(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTNAK_EPRN_SHIFT)) & USBC_ENDPTNAK_EPRN_MASK)
#define USBC_ENDPTNAK_EPTN_MASK (0xFFFF0000U)
#define USBC_ENDPTNAK_EPTN_SHIFT (16U)
/*! EPTN - rwc
 */
#define USBC_ENDPTNAK_EPTN(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTNAK_EPTN_SHIFT)) & USBC_ENDPTNAK_EPTN_MASK)
/*! @} */

/*! @name ENDPTNAKEN -  */
/*! @{ */
#define USBC_ENDPTNAKEN_EPRNE_MASK (0xFFFFU)
#define USBC_ENDPTNAKEN_EPRNE_SHIFT (0U)
/*! EPRNE - Only 3 PHY max
 */
#define USBC_ENDPTNAKEN_EPRNE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTNAKEN_EPRNE_SHIFT)) & USBC_ENDPTNAKEN_EPRNE_MASK)
#define USBC_ENDPTNAKEN_EPTNE_MASK (0xFFFF0000U)
#define USBC_ENDPTNAKEN_EPTNE_SHIFT (16U)
/*! EPTNE - Only 3 PHY max
 */
#define USBC_ENDPTNAKEN_EPTNE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTNAKEN_EPTNE_SHIFT)) & USBC_ENDPTNAKEN_EPTNE_MASK)
/*! @} */

/*! @name PORTSC1 -  */
/*! @{ */
#define USBC_PORTSC1_CCS_MASK (0x1U)
#define USBC_PORTSC1_CCS_SHIFT (0U)
#define USBC_PORTSC1_CCS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_CCS_SHIFT)) & USBC_PORTSC1_CCS_MASK)
#define USBC_PORTSC1_CSC_MASK (0x2U)
#define USBC_PORTSC1_CSC_SHIFT (1U)
/*! CSC - rwc
 */
#define USBC_PORTSC1_CSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_CSC_SHIFT)) & USBC_PORTSC1_CSC_MASK)
#define USBC_PORTSC1_PE_MASK (0x4U)
#define USBC_PORTSC1_PE_SHIFT (2U)
/*! PE - rwc
 */
#define USBC_PORTSC1_PE(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PE_SHIFT)) & USBC_PORTSC1_PE_MASK)
#define USBC_PORTSC1_PEC_MASK (0x8U)
#define USBC_PORTSC1_PEC_SHIFT (3U)
/*! PEC - rwc
 */
#define USBC_PORTSC1_PEC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PEC_SHIFT)) & USBC_PORTSC1_PEC_MASK)
#define USBC_PORTSC1_OCA_MASK (0x10U)
#define USBC_PORTSC1_OCA_SHIFT (4U)
#define USBC_PORTSC1_OCA(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_OCA_SHIFT)) & USBC_PORTSC1_OCA_MASK)
#define USBC_PORTSC1_OCC_MASK (0x20U)
#define USBC_PORTSC1_OCC_SHIFT (5U)
#define USBC_PORTSC1_OCC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_OCC_SHIFT)) & USBC_PORTSC1_OCC_MASK)
#define USBC_PORTSC1_FPR_MASK (0x40U)
#define USBC_PORTSC1_FPR_SHIFT (6U)
#define USBC_PORTSC1_FPR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_FPR_SHIFT)) & USBC_PORTSC1_FPR_MASK)
#define USBC_PORTSC1_SUSP_MASK (0x80U)
#define USBC_PORTSC1_SUSP_SHIFT (7U)
#define USBC_PORTSC1_SUSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_SUSP_SHIFT)) & USBC_PORTSC1_SUSP_MASK)
#define USBC_PORTSC1_PR_MASK (0x100U)
#define USBC_PORTSC1_PR_SHIFT (8U)
#define USBC_PORTSC1_PR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PR_SHIFT)) & USBC_PORTSC1_PR_MASK)
#define USBC_PORTSC1_HSP_MASK (0x200U)
#define USBC_PORTSC1_HSP_SHIFT (9U)
#define USBC_PORTSC1_HSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_HSP_SHIFT)) & USBC_PORTSC1_HSP_MASK)
#define USBC_PORTSC1_LS_MASK (0xC00U)
#define USBC_PORTSC1_LS_SHIFT (10U)
#define USBC_PORTSC1_LS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_LS_SHIFT)) & USBC_PORTSC1_LS_MASK)
#define USBC_PORTSC1_PP_MASK (0x1000U)
#define USBC_PORTSC1_PP_SHIFT (12U)
#define USBC_PORTSC1_PP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PP_SHIFT)) & USBC_PORTSC1_PP_MASK)
#define USBC_PORTSC1_PO_MASK (0x2000U)
#define USBC_PORTSC1_PO_SHIFT (13U)
#define USBC_PORTSC1_PO(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PO_SHIFT)) & USBC_PORTSC1_PO_MASK)
#define USBC_PORTSC1_PIC_MASK (0xC000U)
#define USBC_PORTSC1_PIC_SHIFT (14U)
#define USBC_PORTSC1_PIC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PIC_SHIFT)) & USBC_PORTSC1_PIC_MASK)
#define USBC_PORTSC1_PTC_MASK (0xF0000U)
#define USBC_PORTSC1_PTC_SHIFT (16U)
#define USBC_PORTSC1_PTC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PTC_SHIFT)) & USBC_PORTSC1_PTC_MASK)
#define USBC_PORTSC1_WKCN_MASK (0x100000U)
#define USBC_PORTSC1_WKCN_SHIFT (20U)
#define USBC_PORTSC1_WKCN(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_WKCN_SHIFT)) & USBC_PORTSC1_WKCN_MASK)
#define USBC_PORTSC1_WKDS_MASK (0x200000U)
#define USBC_PORTSC1_WKDS_SHIFT (21U)
#define USBC_PORTSC1_WKDS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_WKDS_SHIFT)) & USBC_PORTSC1_WKDS_MASK)
#define USBC_PORTSC1_WKOC_MASK (0x400000U)
#define USBC_PORTSC1_WKOC_SHIFT (22U)
#define USBC_PORTSC1_WKOC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_WKOC_SHIFT)) & USBC_PORTSC1_WKOC_MASK)
#define USBC_PORTSC1_PHCD_MASK (0x800000U)
#define USBC_PORTSC1_PHCD_SHIFT (23U)
#define USBC_PORTSC1_PHCD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PHCD_SHIFT)) & USBC_PORTSC1_PHCD_MASK)
#define USBC_PORTSC1_PFSC_MASK (0x1000000U)
#define USBC_PORTSC1_PFSC_SHIFT (24U)
#define USBC_PORTSC1_PFSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PFSC_SHIFT)) & USBC_PORTSC1_PFSC_MASK)
#define USBC_PORTSC1_PTS2_MASK (0x2000000U)
#define USBC_PORTSC1_PTS2_SHIFT (25U)
#define USBC_PORTSC1_PTS2(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PTS2_SHIFT)) & USBC_PORTSC1_PTS2_MASK)
#define USBC_PORTSC1_PSPD_MASK (0xC000000U)
#define USBC_PORTSC1_PSPD_SHIFT (26U)
#define USBC_PORTSC1_PSPD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PSPD_SHIFT)) & USBC_PORTSC1_PSPD_MASK)
#define USBC_PORTSC1_PTW_MASK (0x10000000U)
#define USBC_PORTSC1_PTW_SHIFT (28U)
#define USBC_PORTSC1_PTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PTW_SHIFT)) & USBC_PORTSC1_PTW_MASK)
#define USBC_PORTSC1_STS_MASK (0x20000000U)
#define USBC_PORTSC1_STS_SHIFT (29U)
#define USBC_PORTSC1_STS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_STS_SHIFT)) & USBC_PORTSC1_STS_MASK)
#define USBC_PORTSC1_PTS_MASK (0xC0000000U)
#define USBC_PORTSC1_PTS_SHIFT (30U)
#define USBC_PORTSC1_PTS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC1_PTS_SHIFT)) & USBC_PORTSC1_PTS_MASK)
/*! @} */

/*! @name PORTSC2 -  */
/*! @{ */
#define USBC_PORTSC2_CCS_MASK (0x1U)
#define USBC_PORTSC2_CCS_SHIFT (0U)
#define USBC_PORTSC2_CCS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_CCS_SHIFT)) & USBC_PORTSC2_CCS_MASK)
#define USBC_PORTSC2_CSC_MASK (0x2U)
#define USBC_PORTSC2_CSC_SHIFT (1U)
/*! CSC - rwc
 */
#define USBC_PORTSC2_CSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_CSC_SHIFT)) & USBC_PORTSC2_CSC_MASK)
#define USBC_PORTSC2_PE_MASK (0x4U)
#define USBC_PORTSC2_PE_SHIFT (2U)
/*! PE - rwc
 */
#define USBC_PORTSC2_PE(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PE_SHIFT)) & USBC_PORTSC2_PE_MASK)
#define USBC_PORTSC2_PEC_MASK (0x8U)
#define USBC_PORTSC2_PEC_SHIFT (3U)
/*! PEC - rwc
 */
#define USBC_PORTSC2_PEC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PEC_SHIFT)) & USBC_PORTSC2_PEC_MASK)
#define USBC_PORTSC2_OCA_MASK (0x10U)
#define USBC_PORTSC2_OCA_SHIFT (4U)
#define USBC_PORTSC2_OCA(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_OCA_SHIFT)) & USBC_PORTSC2_OCA_MASK)
#define USBC_PORTSC2_OCC_MASK (0x20U)
#define USBC_PORTSC2_OCC_SHIFT (5U)
#define USBC_PORTSC2_OCC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_OCC_SHIFT)) & USBC_PORTSC2_OCC_MASK)
#define USBC_PORTSC2_FPR_MASK (0x40U)
#define USBC_PORTSC2_FPR_SHIFT (6U)
#define USBC_PORTSC2_FPR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_FPR_SHIFT)) & USBC_PORTSC2_FPR_MASK)
#define USBC_PORTSC2_SUSP_MASK (0x80U)
#define USBC_PORTSC2_SUSP_SHIFT (7U)
#define USBC_PORTSC2_SUSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_SUSP_SHIFT)) & USBC_PORTSC2_SUSP_MASK)
#define USBC_PORTSC2_PR_MASK (0x100U)
#define USBC_PORTSC2_PR_SHIFT (8U)
#define USBC_PORTSC2_PR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PR_SHIFT)) & USBC_PORTSC2_PR_MASK)
#define USBC_PORTSC2_HSP_MASK (0x200U)
#define USBC_PORTSC2_HSP_SHIFT (9U)
#define USBC_PORTSC2_HSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_HSP_SHIFT)) & USBC_PORTSC2_HSP_MASK)
#define USBC_PORTSC2_LS_MASK (0xC00U)
#define USBC_PORTSC2_LS_SHIFT (10U)
#define USBC_PORTSC2_LS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_LS_SHIFT)) & USBC_PORTSC2_LS_MASK)
#define USBC_PORTSC2_PP_MASK (0x1000U)
#define USBC_PORTSC2_PP_SHIFT (12U)
#define USBC_PORTSC2_PP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PP_SHIFT)) & USBC_PORTSC2_PP_MASK)
#define USBC_PORTSC2_PO_MASK (0x2000U)
#define USBC_PORTSC2_PO_SHIFT (13U)
#define USBC_PORTSC2_PO(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PO_SHIFT)) & USBC_PORTSC2_PO_MASK)
#define USBC_PORTSC2_PIC_MASK (0xC000U)
#define USBC_PORTSC2_PIC_SHIFT (14U)
#define USBC_PORTSC2_PIC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PIC_SHIFT)) & USBC_PORTSC2_PIC_MASK)
#define USBC_PORTSC2_PTC_MASK (0xF0000U)
#define USBC_PORTSC2_PTC_SHIFT (16U)
#define USBC_PORTSC2_PTC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PTC_SHIFT)) & USBC_PORTSC2_PTC_MASK)
#define USBC_PORTSC2_WKCN_MASK (0x100000U)
#define USBC_PORTSC2_WKCN_SHIFT (20U)
#define USBC_PORTSC2_WKCN(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_WKCN_SHIFT)) & USBC_PORTSC2_WKCN_MASK)
#define USBC_PORTSC2_WKDS_MASK (0x200000U)
#define USBC_PORTSC2_WKDS_SHIFT (21U)
#define USBC_PORTSC2_WKDS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_WKDS_SHIFT)) & USBC_PORTSC2_WKDS_MASK)
#define USBC_PORTSC2_WKOC_MASK (0x400000U)
#define USBC_PORTSC2_WKOC_SHIFT (22U)
#define USBC_PORTSC2_WKOC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_WKOC_SHIFT)) & USBC_PORTSC2_WKOC_MASK)
#define USBC_PORTSC2_PHCD_MASK (0x800000U)
#define USBC_PORTSC2_PHCD_SHIFT (23U)
#define USBC_PORTSC2_PHCD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PHCD_SHIFT)) & USBC_PORTSC2_PHCD_MASK)
#define USBC_PORTSC2_PFSC_MASK (0x1000000U)
#define USBC_PORTSC2_PFSC_SHIFT (24U)
#define USBC_PORTSC2_PFSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PFSC_SHIFT)) & USBC_PORTSC2_PFSC_MASK)
#define USBC_PORTSC2_PTS2_MASK (0x2000000U)
#define USBC_PORTSC2_PTS2_SHIFT (25U)
#define USBC_PORTSC2_PTS2(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PTS2_SHIFT)) & USBC_PORTSC2_PTS2_MASK)
#define USBC_PORTSC2_PSPD_MASK (0xC000000U)
#define USBC_PORTSC2_PSPD_SHIFT (26U)
#define USBC_PORTSC2_PSPD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PSPD_SHIFT)) & USBC_PORTSC2_PSPD_MASK)
#define USBC_PORTSC2_PTW_MASK (0x10000000U)
#define USBC_PORTSC2_PTW_SHIFT (28U)
#define USBC_PORTSC2_PTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PTW_SHIFT)) & USBC_PORTSC2_PTW_MASK)
#define USBC_PORTSC2_STS_MASK (0x20000000U)
#define USBC_PORTSC2_STS_SHIFT (29U)
#define USBC_PORTSC2_STS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_STS_SHIFT)) & USBC_PORTSC2_STS_MASK)
#define USBC_PORTSC2_PTS_MASK (0xC0000000U)
#define USBC_PORTSC2_PTS_SHIFT (30U)
#define USBC_PORTSC2_PTS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC2_PTS_SHIFT)) & USBC_PORTSC2_PTS_MASK)
/*! @} */

/*! @name PORTSC3 -  */
/*! @{ */
#define USBC_PORTSC3_CCS_MASK (0x1U)
#define USBC_PORTSC3_CCS_SHIFT (0U)
#define USBC_PORTSC3_CCS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_CCS_SHIFT)) & USBC_PORTSC3_CCS_MASK)
#define USBC_PORTSC3_CSC_MASK (0x2U)
#define USBC_PORTSC3_CSC_SHIFT (1U)
/*! CSC - rwc
 */
#define USBC_PORTSC3_CSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_CSC_SHIFT)) & USBC_PORTSC3_CSC_MASK)
#define USBC_PORTSC3_PE_MASK (0x4U)
#define USBC_PORTSC3_PE_SHIFT (2U)
/*! PE - rwc
 */
#define USBC_PORTSC3_PE(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PE_SHIFT)) & USBC_PORTSC3_PE_MASK)
#define USBC_PORTSC3_PEC_MASK (0x8U)
#define USBC_PORTSC3_PEC_SHIFT (3U)
/*! PEC - rwc
 */
#define USBC_PORTSC3_PEC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PEC_SHIFT)) & USBC_PORTSC3_PEC_MASK)
#define USBC_PORTSC3_OCA_MASK (0x10U)
#define USBC_PORTSC3_OCA_SHIFT (4U)
#define USBC_PORTSC3_OCA(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_OCA_SHIFT)) & USBC_PORTSC3_OCA_MASK)
#define USBC_PORTSC3_OCC_MASK (0x20U)
#define USBC_PORTSC3_OCC_SHIFT (5U)
#define USBC_PORTSC3_OCC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_OCC_SHIFT)) & USBC_PORTSC3_OCC_MASK)
#define USBC_PORTSC3_FPR_MASK (0x40U)
#define USBC_PORTSC3_FPR_SHIFT (6U)
#define USBC_PORTSC3_FPR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_FPR_SHIFT)) & USBC_PORTSC3_FPR_MASK)
#define USBC_PORTSC3_SUSP_MASK (0x80U)
#define USBC_PORTSC3_SUSP_SHIFT (7U)
#define USBC_PORTSC3_SUSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_SUSP_SHIFT)) & USBC_PORTSC3_SUSP_MASK)
#define USBC_PORTSC3_PR_MASK (0x100U)
#define USBC_PORTSC3_PR_SHIFT (8U)
#define USBC_PORTSC3_PR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PR_SHIFT)) & USBC_PORTSC3_PR_MASK)
#define USBC_PORTSC3_HSP_MASK (0x200U)
#define USBC_PORTSC3_HSP_SHIFT (9U)
#define USBC_PORTSC3_HSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_HSP_SHIFT)) & USBC_PORTSC3_HSP_MASK)
#define USBC_PORTSC3_LS_MASK (0xC00U)
#define USBC_PORTSC3_LS_SHIFT (10U)
#define USBC_PORTSC3_LS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_LS_SHIFT)) & USBC_PORTSC3_LS_MASK)
#define USBC_PORTSC3_PP_MASK (0x1000U)
#define USBC_PORTSC3_PP_SHIFT (12U)
#define USBC_PORTSC3_PP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PP_SHIFT)) & USBC_PORTSC3_PP_MASK)
#define USBC_PORTSC3_PO_MASK (0x2000U)
#define USBC_PORTSC3_PO_SHIFT (13U)
#define USBC_PORTSC3_PO(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PO_SHIFT)) & USBC_PORTSC3_PO_MASK)
#define USBC_PORTSC3_PIC_MASK (0xC000U)
#define USBC_PORTSC3_PIC_SHIFT (14U)
#define USBC_PORTSC3_PIC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PIC_SHIFT)) & USBC_PORTSC3_PIC_MASK)
#define USBC_PORTSC3_PTC_MASK (0xF0000U)
#define USBC_PORTSC3_PTC_SHIFT (16U)
#define USBC_PORTSC3_PTC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PTC_SHIFT)) & USBC_PORTSC3_PTC_MASK)
#define USBC_PORTSC3_WKCN_MASK (0x100000U)
#define USBC_PORTSC3_WKCN_SHIFT (20U)
#define USBC_PORTSC3_WKCN(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_WKCN_SHIFT)) & USBC_PORTSC3_WKCN_MASK)
#define USBC_PORTSC3_WKDS_MASK (0x200000U)
#define USBC_PORTSC3_WKDS_SHIFT (21U)
#define USBC_PORTSC3_WKDS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_WKDS_SHIFT)) & USBC_PORTSC3_WKDS_MASK)
#define USBC_PORTSC3_WKOC_MASK (0x400000U)
#define USBC_PORTSC3_WKOC_SHIFT (22U)
#define USBC_PORTSC3_WKOC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_WKOC_SHIFT)) & USBC_PORTSC3_WKOC_MASK)
#define USBC_PORTSC3_PHCD_MASK (0x800000U)
#define USBC_PORTSC3_PHCD_SHIFT (23U)
#define USBC_PORTSC3_PHCD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PHCD_SHIFT)) & USBC_PORTSC3_PHCD_MASK)
#define USBC_PORTSC3_PFSC_MASK (0x1000000U)
#define USBC_PORTSC3_PFSC_SHIFT (24U)
#define USBC_PORTSC3_PFSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PFSC_SHIFT)) & USBC_PORTSC3_PFSC_MASK)
#define USBC_PORTSC3_PTS2_MASK (0x2000000U)
#define USBC_PORTSC3_PTS2_SHIFT (25U)
#define USBC_PORTSC3_PTS2(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PTS2_SHIFT)) & USBC_PORTSC3_PTS2_MASK)
#define USBC_PORTSC3_PSPD_MASK (0xC000000U)
#define USBC_PORTSC3_PSPD_SHIFT (26U)
#define USBC_PORTSC3_PSPD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PSPD_SHIFT)) & USBC_PORTSC3_PSPD_MASK)
#define USBC_PORTSC3_PTW_MASK (0x10000000U)
#define USBC_PORTSC3_PTW_SHIFT (28U)
#define USBC_PORTSC3_PTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PTW_SHIFT)) & USBC_PORTSC3_PTW_MASK)
#define USBC_PORTSC3_STS_MASK (0x20000000U)
#define USBC_PORTSC3_STS_SHIFT (29U)
#define USBC_PORTSC3_STS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_STS_SHIFT)) & USBC_PORTSC3_STS_MASK)
#define USBC_PORTSC3_PTS_MASK (0xC0000000U)
#define USBC_PORTSC3_PTS_SHIFT (30U)
#define USBC_PORTSC3_PTS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC3_PTS_SHIFT)) & USBC_PORTSC3_PTS_MASK)
/*! @} */

/*! @name PORTSC4 -  */
/*! @{ */
#define USBC_PORTSC4_CCS_MASK (0x1U)
#define USBC_PORTSC4_CCS_SHIFT (0U)
#define USBC_PORTSC4_CCS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_CCS_SHIFT)) & USBC_PORTSC4_CCS_MASK)
#define USBC_PORTSC4_CSC_MASK (0x2U)
#define USBC_PORTSC4_CSC_SHIFT (1U)
/*! CSC - rwc
 */
#define USBC_PORTSC4_CSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_CSC_SHIFT)) & USBC_PORTSC4_CSC_MASK)
#define USBC_PORTSC4_PE_MASK (0x4U)
#define USBC_PORTSC4_PE_SHIFT (2U)
/*! PE - rwc
 */
#define USBC_PORTSC4_PE(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PE_SHIFT)) & USBC_PORTSC4_PE_MASK)
#define USBC_PORTSC4_PEC_MASK (0x8U)
#define USBC_PORTSC4_PEC_SHIFT (3U)
/*! PEC - rwc
 */
#define USBC_PORTSC4_PEC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PEC_SHIFT)) & USBC_PORTSC4_PEC_MASK)
#define USBC_PORTSC4_OCA_MASK (0x10U)
#define USBC_PORTSC4_OCA_SHIFT (4U)
#define USBC_PORTSC4_OCA(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_OCA_SHIFT)) & USBC_PORTSC4_OCA_MASK)
#define USBC_PORTSC4_OCC_MASK (0x20U)
#define USBC_PORTSC4_OCC_SHIFT (5U)
#define USBC_PORTSC4_OCC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_OCC_SHIFT)) & USBC_PORTSC4_OCC_MASK)
#define USBC_PORTSC4_FPR_MASK (0x40U)
#define USBC_PORTSC4_FPR_SHIFT (6U)
#define USBC_PORTSC4_FPR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_FPR_SHIFT)) & USBC_PORTSC4_FPR_MASK)
#define USBC_PORTSC4_SUSP_MASK (0x80U)
#define USBC_PORTSC4_SUSP_SHIFT (7U)
#define USBC_PORTSC4_SUSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_SUSP_SHIFT)) & USBC_PORTSC4_SUSP_MASK)
#define USBC_PORTSC4_PR_MASK (0x100U)
#define USBC_PORTSC4_PR_SHIFT (8U)
#define USBC_PORTSC4_PR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PR_SHIFT)) & USBC_PORTSC4_PR_MASK)
#define USBC_PORTSC4_HSP_MASK (0x200U)
#define USBC_PORTSC4_HSP_SHIFT (9U)
#define USBC_PORTSC4_HSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_HSP_SHIFT)) & USBC_PORTSC4_HSP_MASK)
#define USBC_PORTSC4_LS_MASK (0xC00U)
#define USBC_PORTSC4_LS_SHIFT (10U)
#define USBC_PORTSC4_LS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_LS_SHIFT)) & USBC_PORTSC4_LS_MASK)
#define USBC_PORTSC4_PP_MASK (0x1000U)
#define USBC_PORTSC4_PP_SHIFT (12U)
#define USBC_PORTSC4_PP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PP_SHIFT)) & USBC_PORTSC4_PP_MASK)
#define USBC_PORTSC4_PO_MASK (0x2000U)
#define USBC_PORTSC4_PO_SHIFT (13U)
#define USBC_PORTSC4_PO(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PO_SHIFT)) & USBC_PORTSC4_PO_MASK)
#define USBC_PORTSC4_PIC_MASK (0xC000U)
#define USBC_PORTSC4_PIC_SHIFT (14U)
#define USBC_PORTSC4_PIC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PIC_SHIFT)) & USBC_PORTSC4_PIC_MASK)
#define USBC_PORTSC4_PTC_MASK (0xF0000U)
#define USBC_PORTSC4_PTC_SHIFT (16U)
#define USBC_PORTSC4_PTC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PTC_SHIFT)) & USBC_PORTSC4_PTC_MASK)
#define USBC_PORTSC4_WKCN_MASK (0x100000U)
#define USBC_PORTSC4_WKCN_SHIFT (20U)
#define USBC_PORTSC4_WKCN(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_WKCN_SHIFT)) & USBC_PORTSC4_WKCN_MASK)
#define USBC_PORTSC4_WKDS_MASK (0x200000U)
#define USBC_PORTSC4_WKDS_SHIFT (21U)
#define USBC_PORTSC4_WKDS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_WKDS_SHIFT)) & USBC_PORTSC4_WKDS_MASK)
#define USBC_PORTSC4_WKOC_MASK (0x400000U)
#define USBC_PORTSC4_WKOC_SHIFT (22U)
#define USBC_PORTSC4_WKOC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_WKOC_SHIFT)) & USBC_PORTSC4_WKOC_MASK)
#define USBC_PORTSC4_PHCD_MASK (0x800000U)
#define USBC_PORTSC4_PHCD_SHIFT (23U)
#define USBC_PORTSC4_PHCD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PHCD_SHIFT)) & USBC_PORTSC4_PHCD_MASK)
#define USBC_PORTSC4_PFSC_MASK (0x1000000U)
#define USBC_PORTSC4_PFSC_SHIFT (24U)
#define USBC_PORTSC4_PFSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PFSC_SHIFT)) & USBC_PORTSC4_PFSC_MASK)
#define USBC_PORTSC4_PTS2_MASK (0x2000000U)
#define USBC_PORTSC4_PTS2_SHIFT (25U)
#define USBC_PORTSC4_PTS2(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PTS2_SHIFT)) & USBC_PORTSC4_PTS2_MASK)
#define USBC_PORTSC4_PSPD_MASK (0xC000000U)
#define USBC_PORTSC4_PSPD_SHIFT (26U)
#define USBC_PORTSC4_PSPD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PSPD_SHIFT)) & USBC_PORTSC4_PSPD_MASK)
#define USBC_PORTSC4_PTW_MASK (0x10000000U)
#define USBC_PORTSC4_PTW_SHIFT (28U)
#define USBC_PORTSC4_PTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PTW_SHIFT)) & USBC_PORTSC4_PTW_MASK)
#define USBC_PORTSC4_STS_MASK (0x20000000U)
#define USBC_PORTSC4_STS_SHIFT (29U)
#define USBC_PORTSC4_STS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_STS_SHIFT)) & USBC_PORTSC4_STS_MASK)
#define USBC_PORTSC4_PTS_MASK (0xC0000000U)
#define USBC_PORTSC4_PTS_SHIFT (30U)
#define USBC_PORTSC4_PTS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC4_PTS_SHIFT)) & USBC_PORTSC4_PTS_MASK)
/*! @} */

/*! @name PORTSC5 -  */
/*! @{ */
#define USBC_PORTSC5_CCS_MASK (0x1U)
#define USBC_PORTSC5_CCS_SHIFT (0U)
#define USBC_PORTSC5_CCS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_CCS_SHIFT)) & USBC_PORTSC5_CCS_MASK)
#define USBC_PORTSC5_CSC_MASK (0x2U)
#define USBC_PORTSC5_CSC_SHIFT (1U)
/*! CSC - rwc
 */
#define USBC_PORTSC5_CSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_CSC_SHIFT)) & USBC_PORTSC5_CSC_MASK)
#define USBC_PORTSC5_PE_MASK (0x4U)
#define USBC_PORTSC5_PE_SHIFT (2U)
/*! PE - rwc
 */
#define USBC_PORTSC5_PE(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PE_SHIFT)) & USBC_PORTSC5_PE_MASK)
#define USBC_PORTSC5_PEC_MASK (0x8U)
#define USBC_PORTSC5_PEC_SHIFT (3U)
/*! PEC - rwc
 */
#define USBC_PORTSC5_PEC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PEC_SHIFT)) & USBC_PORTSC5_PEC_MASK)
#define USBC_PORTSC5_OCA_MASK (0x10U)
#define USBC_PORTSC5_OCA_SHIFT (4U)
#define USBC_PORTSC5_OCA(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_OCA_SHIFT)) & USBC_PORTSC5_OCA_MASK)
#define USBC_PORTSC5_OCC_MASK (0x20U)
#define USBC_PORTSC5_OCC_SHIFT (5U)
#define USBC_PORTSC5_OCC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_OCC_SHIFT)) & USBC_PORTSC5_OCC_MASK)
#define USBC_PORTSC5_FPR_MASK (0x40U)
#define USBC_PORTSC5_FPR_SHIFT (6U)
#define USBC_PORTSC5_FPR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_FPR_SHIFT)) & USBC_PORTSC5_FPR_MASK)
#define USBC_PORTSC5_SUSP_MASK (0x80U)
#define USBC_PORTSC5_SUSP_SHIFT (7U)
#define USBC_PORTSC5_SUSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_SUSP_SHIFT)) & USBC_PORTSC5_SUSP_MASK)
#define USBC_PORTSC5_PR_MASK (0x100U)
#define USBC_PORTSC5_PR_SHIFT (8U)
#define USBC_PORTSC5_PR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PR_SHIFT)) & USBC_PORTSC5_PR_MASK)
#define USBC_PORTSC5_HSP_MASK (0x200U)
#define USBC_PORTSC5_HSP_SHIFT (9U)
#define USBC_PORTSC5_HSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_HSP_SHIFT)) & USBC_PORTSC5_HSP_MASK)
#define USBC_PORTSC5_LS_MASK (0xC00U)
#define USBC_PORTSC5_LS_SHIFT (10U)
#define USBC_PORTSC5_LS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_LS_SHIFT)) & USBC_PORTSC5_LS_MASK)
#define USBC_PORTSC5_PP_MASK (0x1000U)
#define USBC_PORTSC5_PP_SHIFT (12U)
#define USBC_PORTSC5_PP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PP_SHIFT)) & USBC_PORTSC5_PP_MASK)
#define USBC_PORTSC5_PO_MASK (0x2000U)
#define USBC_PORTSC5_PO_SHIFT (13U)
#define USBC_PORTSC5_PO(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PO_SHIFT)) & USBC_PORTSC5_PO_MASK)
#define USBC_PORTSC5_PIC_MASK (0xC000U)
#define USBC_PORTSC5_PIC_SHIFT (14U)
#define USBC_PORTSC5_PIC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PIC_SHIFT)) & USBC_PORTSC5_PIC_MASK)
#define USBC_PORTSC5_PTC_MASK (0xF0000U)
#define USBC_PORTSC5_PTC_SHIFT (16U)
#define USBC_PORTSC5_PTC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PTC_SHIFT)) & USBC_PORTSC5_PTC_MASK)
#define USBC_PORTSC5_WKCN_MASK (0x100000U)
#define USBC_PORTSC5_WKCN_SHIFT (20U)
#define USBC_PORTSC5_WKCN(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_WKCN_SHIFT)) & USBC_PORTSC5_WKCN_MASK)
#define USBC_PORTSC5_WKDS_MASK (0x200000U)
#define USBC_PORTSC5_WKDS_SHIFT (21U)
#define USBC_PORTSC5_WKDS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_WKDS_SHIFT)) & USBC_PORTSC5_WKDS_MASK)
#define USBC_PORTSC5_WKOC_MASK (0x400000U)
#define USBC_PORTSC5_WKOC_SHIFT (22U)
#define USBC_PORTSC5_WKOC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_WKOC_SHIFT)) & USBC_PORTSC5_WKOC_MASK)
#define USBC_PORTSC5_PHCD_MASK (0x800000U)
#define USBC_PORTSC5_PHCD_SHIFT (23U)
#define USBC_PORTSC5_PHCD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PHCD_SHIFT)) & USBC_PORTSC5_PHCD_MASK)
#define USBC_PORTSC5_PFSC_MASK (0x1000000U)
#define USBC_PORTSC5_PFSC_SHIFT (24U)
#define USBC_PORTSC5_PFSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PFSC_SHIFT)) & USBC_PORTSC5_PFSC_MASK)
#define USBC_PORTSC5_PTS2_MASK (0x2000000U)
#define USBC_PORTSC5_PTS2_SHIFT (25U)
#define USBC_PORTSC5_PTS2(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PTS2_SHIFT)) & USBC_PORTSC5_PTS2_MASK)
#define USBC_PORTSC5_PSPD_MASK (0xC000000U)
#define USBC_PORTSC5_PSPD_SHIFT (26U)
#define USBC_PORTSC5_PSPD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PSPD_SHIFT)) & USBC_PORTSC5_PSPD_MASK)
#define USBC_PORTSC5_PTW_MASK (0x10000000U)
#define USBC_PORTSC5_PTW_SHIFT (28U)
#define USBC_PORTSC5_PTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PTW_SHIFT)) & USBC_PORTSC5_PTW_MASK)
#define USBC_PORTSC5_STS_MASK (0x20000000U)
#define USBC_PORTSC5_STS_SHIFT (29U)
#define USBC_PORTSC5_STS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_STS_SHIFT)) & USBC_PORTSC5_STS_MASK)
#define USBC_PORTSC5_PTS_MASK (0xC0000000U)
#define USBC_PORTSC5_PTS_SHIFT (30U)
#define USBC_PORTSC5_PTS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC5_PTS_SHIFT)) & USBC_PORTSC5_PTS_MASK)
/*! @} */

/*! @name PORTSC6 -  */
/*! @{ */
#define USBC_PORTSC6_CCS_MASK (0x1U)
#define USBC_PORTSC6_CCS_SHIFT (0U)
#define USBC_PORTSC6_CCS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_CCS_SHIFT)) & USBC_PORTSC6_CCS_MASK)
#define USBC_PORTSC6_CSC_MASK (0x2U)
#define USBC_PORTSC6_CSC_SHIFT (1U)
/*! CSC - rwc
 */
#define USBC_PORTSC6_CSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_CSC_SHIFT)) & USBC_PORTSC6_CSC_MASK)
#define USBC_PORTSC6_PE_MASK (0x4U)
#define USBC_PORTSC6_PE_SHIFT (2U)
/*! PE - rwc
 */
#define USBC_PORTSC6_PE(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PE_SHIFT)) & USBC_PORTSC6_PE_MASK)
#define USBC_PORTSC6_PEC_MASK (0x8U)
#define USBC_PORTSC6_PEC_SHIFT (3U)
/*! PEC - rwc
 */
#define USBC_PORTSC6_PEC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PEC_SHIFT)) & USBC_PORTSC6_PEC_MASK)
#define USBC_PORTSC6_OCA_MASK (0x10U)
#define USBC_PORTSC6_OCA_SHIFT (4U)
#define USBC_PORTSC6_OCA(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_OCA_SHIFT)) & USBC_PORTSC6_OCA_MASK)
#define USBC_PORTSC6_OCC_MASK (0x20U)
#define USBC_PORTSC6_OCC_SHIFT (5U)
#define USBC_PORTSC6_OCC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_OCC_SHIFT)) & USBC_PORTSC6_OCC_MASK)
#define USBC_PORTSC6_FPR_MASK (0x40U)
#define USBC_PORTSC6_FPR_SHIFT (6U)
#define USBC_PORTSC6_FPR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_FPR_SHIFT)) & USBC_PORTSC6_FPR_MASK)
#define USBC_PORTSC6_SUSP_MASK (0x80U)
#define USBC_PORTSC6_SUSP_SHIFT (7U)
#define USBC_PORTSC6_SUSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_SUSP_SHIFT)) & USBC_PORTSC6_SUSP_MASK)
#define USBC_PORTSC6_PR_MASK (0x100U)
#define USBC_PORTSC6_PR_SHIFT (8U)
#define USBC_PORTSC6_PR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PR_SHIFT)) & USBC_PORTSC6_PR_MASK)
#define USBC_PORTSC6_HSP_MASK (0x200U)
#define USBC_PORTSC6_HSP_SHIFT (9U)
#define USBC_PORTSC6_HSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_HSP_SHIFT)) & USBC_PORTSC6_HSP_MASK)
#define USBC_PORTSC6_LS_MASK (0xC00U)
#define USBC_PORTSC6_LS_SHIFT (10U)
#define USBC_PORTSC6_LS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_LS_SHIFT)) & USBC_PORTSC6_LS_MASK)
#define USBC_PORTSC6_PP_MASK (0x1000U)
#define USBC_PORTSC6_PP_SHIFT (12U)
#define USBC_PORTSC6_PP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PP_SHIFT)) & USBC_PORTSC6_PP_MASK)
#define USBC_PORTSC6_PO_MASK (0x2000U)
#define USBC_PORTSC6_PO_SHIFT (13U)
#define USBC_PORTSC6_PO(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PO_SHIFT)) & USBC_PORTSC6_PO_MASK)
#define USBC_PORTSC6_PIC_MASK (0xC000U)
#define USBC_PORTSC6_PIC_SHIFT (14U)
#define USBC_PORTSC6_PIC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PIC_SHIFT)) & USBC_PORTSC6_PIC_MASK)
#define USBC_PORTSC6_PTC_MASK (0xF0000U)
#define USBC_PORTSC6_PTC_SHIFT (16U)
#define USBC_PORTSC6_PTC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PTC_SHIFT)) & USBC_PORTSC6_PTC_MASK)
#define USBC_PORTSC6_WKCN_MASK (0x100000U)
#define USBC_PORTSC6_WKCN_SHIFT (20U)
#define USBC_PORTSC6_WKCN(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_WKCN_SHIFT)) & USBC_PORTSC6_WKCN_MASK)
#define USBC_PORTSC6_WKDS_MASK (0x200000U)
#define USBC_PORTSC6_WKDS_SHIFT (21U)
#define USBC_PORTSC6_WKDS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_WKDS_SHIFT)) & USBC_PORTSC6_WKDS_MASK)
#define USBC_PORTSC6_WKOC_MASK (0x400000U)
#define USBC_PORTSC6_WKOC_SHIFT (22U)
#define USBC_PORTSC6_WKOC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_WKOC_SHIFT)) & USBC_PORTSC6_WKOC_MASK)
#define USBC_PORTSC6_PHCD_MASK (0x800000U)
#define USBC_PORTSC6_PHCD_SHIFT (23U)
#define USBC_PORTSC6_PHCD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PHCD_SHIFT)) & USBC_PORTSC6_PHCD_MASK)
#define USBC_PORTSC6_PFSC_MASK (0x1000000U)
#define USBC_PORTSC6_PFSC_SHIFT (24U)
#define USBC_PORTSC6_PFSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PFSC_SHIFT)) & USBC_PORTSC6_PFSC_MASK)
#define USBC_PORTSC6_PTS2_MASK (0x2000000U)
#define USBC_PORTSC6_PTS2_SHIFT (25U)
#define USBC_PORTSC6_PTS2(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PTS2_SHIFT)) & USBC_PORTSC6_PTS2_MASK)
#define USBC_PORTSC6_PSPD_MASK (0xC000000U)
#define USBC_PORTSC6_PSPD_SHIFT (26U)
#define USBC_PORTSC6_PSPD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PSPD_SHIFT)) & USBC_PORTSC6_PSPD_MASK)
#define USBC_PORTSC6_PTW_MASK (0x10000000U)
#define USBC_PORTSC6_PTW_SHIFT (28U)
#define USBC_PORTSC6_PTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PTW_SHIFT)) & USBC_PORTSC6_PTW_MASK)
#define USBC_PORTSC6_STS_MASK (0x20000000U)
#define USBC_PORTSC6_STS_SHIFT (29U)
#define USBC_PORTSC6_STS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_STS_SHIFT)) & USBC_PORTSC6_STS_MASK)
#define USBC_PORTSC6_PTS_MASK (0xC0000000U)
#define USBC_PORTSC6_PTS_SHIFT (30U)
#define USBC_PORTSC6_PTS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC6_PTS_SHIFT)) & USBC_PORTSC6_PTS_MASK)
/*! @} */

/*! @name PORTSC7 -  */
/*! @{ */
#define USBC_PORTSC7_CCS_MASK (0x1U)
#define USBC_PORTSC7_CCS_SHIFT (0U)
#define USBC_PORTSC7_CCS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_CCS_SHIFT)) & USBC_PORTSC7_CCS_MASK)
#define USBC_PORTSC7_CSC_MASK (0x2U)
#define USBC_PORTSC7_CSC_SHIFT (1U)
/*! CSC - rwc
 */
#define USBC_PORTSC7_CSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_CSC_SHIFT)) & USBC_PORTSC7_CSC_MASK)
#define USBC_PORTSC7_PE_MASK (0x4U)
#define USBC_PORTSC7_PE_SHIFT (2U)
/*! PE - rwc
 */
#define USBC_PORTSC7_PE(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PE_SHIFT)) & USBC_PORTSC7_PE_MASK)
#define USBC_PORTSC7_PEC_MASK (0x8U)
#define USBC_PORTSC7_PEC_SHIFT (3U)
/*! PEC - rwc
 */
#define USBC_PORTSC7_PEC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PEC_SHIFT)) & USBC_PORTSC7_PEC_MASK)
#define USBC_PORTSC7_OCA_MASK (0x10U)
#define USBC_PORTSC7_OCA_SHIFT (4U)
#define USBC_PORTSC7_OCA(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_OCA_SHIFT)) & USBC_PORTSC7_OCA_MASK)
#define USBC_PORTSC7_OCC_MASK (0x20U)
#define USBC_PORTSC7_OCC_SHIFT (5U)
#define USBC_PORTSC7_OCC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_OCC_SHIFT)) & USBC_PORTSC7_OCC_MASK)
#define USBC_PORTSC7_FPR_MASK (0x40U)
#define USBC_PORTSC7_FPR_SHIFT (6U)
#define USBC_PORTSC7_FPR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_FPR_SHIFT)) & USBC_PORTSC7_FPR_MASK)
#define USBC_PORTSC7_SUSP_MASK (0x80U)
#define USBC_PORTSC7_SUSP_SHIFT (7U)
#define USBC_PORTSC7_SUSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_SUSP_SHIFT)) & USBC_PORTSC7_SUSP_MASK)
#define USBC_PORTSC7_PR_MASK (0x100U)
#define USBC_PORTSC7_PR_SHIFT (8U)
#define USBC_PORTSC7_PR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PR_SHIFT)) & USBC_PORTSC7_PR_MASK)
#define USBC_PORTSC7_HSP_MASK (0x200U)
#define USBC_PORTSC7_HSP_SHIFT (9U)
#define USBC_PORTSC7_HSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_HSP_SHIFT)) & USBC_PORTSC7_HSP_MASK)
#define USBC_PORTSC7_LS_MASK (0xC00U)
#define USBC_PORTSC7_LS_SHIFT (10U)
#define USBC_PORTSC7_LS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_LS_SHIFT)) & USBC_PORTSC7_LS_MASK)
#define USBC_PORTSC7_PP_MASK (0x1000U)
#define USBC_PORTSC7_PP_SHIFT (12U)
#define USBC_PORTSC7_PP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PP_SHIFT)) & USBC_PORTSC7_PP_MASK)
#define USBC_PORTSC7_PO_MASK (0x2000U)
#define USBC_PORTSC7_PO_SHIFT (13U)
#define USBC_PORTSC7_PO(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PO_SHIFT)) & USBC_PORTSC7_PO_MASK)
#define USBC_PORTSC7_PIC_MASK (0xC000U)
#define USBC_PORTSC7_PIC_SHIFT (14U)
#define USBC_PORTSC7_PIC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PIC_SHIFT)) & USBC_PORTSC7_PIC_MASK)
#define USBC_PORTSC7_PTC_MASK (0xF0000U)
#define USBC_PORTSC7_PTC_SHIFT (16U)
#define USBC_PORTSC7_PTC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PTC_SHIFT)) & USBC_PORTSC7_PTC_MASK)
#define USBC_PORTSC7_WKCN_MASK (0x100000U)
#define USBC_PORTSC7_WKCN_SHIFT (20U)
#define USBC_PORTSC7_WKCN(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_WKCN_SHIFT)) & USBC_PORTSC7_WKCN_MASK)
#define USBC_PORTSC7_WKDS_MASK (0x200000U)
#define USBC_PORTSC7_WKDS_SHIFT (21U)
#define USBC_PORTSC7_WKDS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_WKDS_SHIFT)) & USBC_PORTSC7_WKDS_MASK)
#define USBC_PORTSC7_WKOC_MASK (0x400000U)
#define USBC_PORTSC7_WKOC_SHIFT (22U)
#define USBC_PORTSC7_WKOC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_WKOC_SHIFT)) & USBC_PORTSC7_WKOC_MASK)
#define USBC_PORTSC7_PHCD_MASK (0x800000U)
#define USBC_PORTSC7_PHCD_SHIFT (23U)
#define USBC_PORTSC7_PHCD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PHCD_SHIFT)) & USBC_PORTSC7_PHCD_MASK)
#define USBC_PORTSC7_PFSC_MASK (0x1000000U)
#define USBC_PORTSC7_PFSC_SHIFT (24U)
#define USBC_PORTSC7_PFSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PFSC_SHIFT)) & USBC_PORTSC7_PFSC_MASK)
#define USBC_PORTSC7_PTS2_MASK (0x2000000U)
#define USBC_PORTSC7_PTS2_SHIFT (25U)
#define USBC_PORTSC7_PTS2(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PTS2_SHIFT)) & USBC_PORTSC7_PTS2_MASK)
#define USBC_PORTSC7_PSPD_MASK (0xC000000U)
#define USBC_PORTSC7_PSPD_SHIFT (26U)
#define USBC_PORTSC7_PSPD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PSPD_SHIFT)) & USBC_PORTSC7_PSPD_MASK)
#define USBC_PORTSC7_PTW_MASK (0x10000000U)
#define USBC_PORTSC7_PTW_SHIFT (28U)
#define USBC_PORTSC7_PTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PTW_SHIFT)) & USBC_PORTSC7_PTW_MASK)
#define USBC_PORTSC7_STS_MASK (0x20000000U)
#define USBC_PORTSC7_STS_SHIFT (29U)
#define USBC_PORTSC7_STS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_STS_SHIFT)) & USBC_PORTSC7_STS_MASK)
#define USBC_PORTSC7_PTS_MASK (0xC0000000U)
#define USBC_PORTSC7_PTS_SHIFT (30U)
#define USBC_PORTSC7_PTS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC7_PTS_SHIFT)) & USBC_PORTSC7_PTS_MASK)
/*! @} */

/*! @name PORTSC8 -  */
/*! @{ */
#define USBC_PORTSC8_CCS_MASK (0x1U)
#define USBC_PORTSC8_CCS_SHIFT (0U)
#define USBC_PORTSC8_CCS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_CCS_SHIFT)) & USBC_PORTSC8_CCS_MASK)
#define USBC_PORTSC8_CSC_MASK (0x2U)
#define USBC_PORTSC8_CSC_SHIFT (1U)
/*! CSC - rwc
 */
#define USBC_PORTSC8_CSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_CSC_SHIFT)) & USBC_PORTSC8_CSC_MASK)
#define USBC_PORTSC8_PE_MASK (0x4U)
#define USBC_PORTSC8_PE_SHIFT (2U)
/*! PE - rwc
 */
#define USBC_PORTSC8_PE(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PE_SHIFT)) & USBC_PORTSC8_PE_MASK)
#define USBC_PORTSC8_PEC_MASK (0x8U)
#define USBC_PORTSC8_PEC_SHIFT (3U)
/*! PEC - rwc
 */
#define USBC_PORTSC8_PEC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PEC_SHIFT)) & USBC_PORTSC8_PEC_MASK)
#define USBC_PORTSC8_OCA_MASK (0x10U)
#define USBC_PORTSC8_OCA_SHIFT (4U)
#define USBC_PORTSC8_OCA(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_OCA_SHIFT)) & USBC_PORTSC8_OCA_MASK)
#define USBC_PORTSC8_OCC_MASK (0x20U)
#define USBC_PORTSC8_OCC_SHIFT (5U)
#define USBC_PORTSC8_OCC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_OCC_SHIFT)) & USBC_PORTSC8_OCC_MASK)
#define USBC_PORTSC8_FPR_MASK (0x40U)
#define USBC_PORTSC8_FPR_SHIFT (6U)
#define USBC_PORTSC8_FPR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_FPR_SHIFT)) & USBC_PORTSC8_FPR_MASK)
#define USBC_PORTSC8_SUSP_MASK (0x80U)
#define USBC_PORTSC8_SUSP_SHIFT (7U)
#define USBC_PORTSC8_SUSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_SUSP_SHIFT)) & USBC_PORTSC8_SUSP_MASK)
#define USBC_PORTSC8_PR_MASK (0x100U)
#define USBC_PORTSC8_PR_SHIFT (8U)
#define USBC_PORTSC8_PR(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PR_SHIFT)) & USBC_PORTSC8_PR_MASK)
#define USBC_PORTSC8_HSP_MASK (0x200U)
#define USBC_PORTSC8_HSP_SHIFT (9U)
#define USBC_PORTSC8_HSP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_HSP_SHIFT)) & USBC_PORTSC8_HSP_MASK)
#define USBC_PORTSC8_LS_MASK (0xC00U)
#define USBC_PORTSC8_LS_SHIFT (10U)
#define USBC_PORTSC8_LS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_LS_SHIFT)) & USBC_PORTSC8_LS_MASK)
#define USBC_PORTSC8_PP_MASK (0x1000U)
#define USBC_PORTSC8_PP_SHIFT (12U)
#define USBC_PORTSC8_PP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PP_SHIFT)) & USBC_PORTSC8_PP_MASK)
#define USBC_PORTSC8_PO_MASK (0x2000U)
#define USBC_PORTSC8_PO_SHIFT (13U)
#define USBC_PORTSC8_PO(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PO_SHIFT)) & USBC_PORTSC8_PO_MASK)
#define USBC_PORTSC8_PIC_MASK (0xC000U)
#define USBC_PORTSC8_PIC_SHIFT (14U)
#define USBC_PORTSC8_PIC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PIC_SHIFT)) & USBC_PORTSC8_PIC_MASK)
#define USBC_PORTSC8_PTC_MASK (0xF0000U)
#define USBC_PORTSC8_PTC_SHIFT (16U)
#define USBC_PORTSC8_PTC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PTC_SHIFT)) & USBC_PORTSC8_PTC_MASK)
#define USBC_PORTSC8_WKCN_MASK (0x100000U)
#define USBC_PORTSC8_WKCN_SHIFT (20U)
#define USBC_PORTSC8_WKCN(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_WKCN_SHIFT)) & USBC_PORTSC8_WKCN_MASK)
#define USBC_PORTSC8_WKDS_MASK (0x200000U)
#define USBC_PORTSC8_WKDS_SHIFT (21U)
#define USBC_PORTSC8_WKDS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_WKDS_SHIFT)) & USBC_PORTSC8_WKDS_MASK)
#define USBC_PORTSC8_WKOC_MASK (0x400000U)
#define USBC_PORTSC8_WKOC_SHIFT (22U)
#define USBC_PORTSC8_WKOC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_WKOC_SHIFT)) & USBC_PORTSC8_WKOC_MASK)
#define USBC_PORTSC8_PHCD_MASK (0x800000U)
#define USBC_PORTSC8_PHCD_SHIFT (23U)
#define USBC_PORTSC8_PHCD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PHCD_SHIFT)) & USBC_PORTSC8_PHCD_MASK)
#define USBC_PORTSC8_PFSC_MASK (0x1000000U)
#define USBC_PORTSC8_PFSC_SHIFT (24U)
#define USBC_PORTSC8_PFSC(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PFSC_SHIFT)) & USBC_PORTSC8_PFSC_MASK)
#define USBC_PORTSC8_PTS2_MASK (0x2000000U)
#define USBC_PORTSC8_PTS2_SHIFT (25U)
#define USBC_PORTSC8_PTS2(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PTS2_SHIFT)) & USBC_PORTSC8_PTS2_MASK)
#define USBC_PORTSC8_PSPD_MASK (0xC000000U)
#define USBC_PORTSC8_PSPD_SHIFT (26U)
#define USBC_PORTSC8_PSPD(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PSPD_SHIFT)) & USBC_PORTSC8_PSPD_MASK)
#define USBC_PORTSC8_PTW_MASK (0x10000000U)
#define USBC_PORTSC8_PTW_SHIFT (28U)
#define USBC_PORTSC8_PTW(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PTW_SHIFT)) & USBC_PORTSC8_PTW_MASK)
#define USBC_PORTSC8_STS_MASK (0x20000000U)
#define USBC_PORTSC8_STS_SHIFT (29U)
#define USBC_PORTSC8_STS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_STS_SHIFT)) & USBC_PORTSC8_STS_MASK)
#define USBC_PORTSC8_PTS_MASK (0xC0000000U)
#define USBC_PORTSC8_PTS_SHIFT (30U)
#define USBC_PORTSC8_PTS(x) (((uint32_t)(((uint32_t)(x)) << USBC_PORTSC8_PTS_SHIFT)) & USBC_PORTSC8_PTS_MASK)
/*! @} */

/*! @name OTGSC -  */
/*! @{ */
#define USBC_OTGSC_VD_MASK (0x1U)
#define USBC_OTGSC_VD_SHIFT (0U)
/*! VD - OTG not enable
 */
#define USBC_OTGSC_VD(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_VD_SHIFT)) & USBC_OTGSC_VD_MASK)
#define USBC_OTGSC_VC_MASK (0x2U)
#define USBC_OTGSC_VC_SHIFT (1U)
/*! VC - OTG not enable
 */
#define USBC_OTGSC_VC(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_VC_SHIFT)) & USBC_OTGSC_VC_MASK)
#define USBC_OTGSC_HAAR_MASK (0x4U)
#define USBC_OTGSC_HAAR_SHIFT (2U)
/*! HAAR - OTG not enable
 */
#define USBC_OTGSC_HAAR(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_HAAR_SHIFT)) & USBC_OTGSC_HAAR_MASK)
#define USBC_OTGSC_OT_MASK (0x8U)
#define USBC_OTGSC_OT_SHIFT (3U)
/*! OT - OTG not enable
 */
#define USBC_OTGSC_OT(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_OT_SHIFT)) & USBC_OTGSC_OT_MASK)
#define USBC_OTGSC_DP_MASK (0x10U)
#define USBC_OTGSC_DP_SHIFT (4U)
/*! DP - OTG not enable
 */
#define USBC_OTGSC_DP(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_DP_SHIFT)) & USBC_OTGSC_DP_MASK)
#define USBC_OTGSC_IDPU_MASK (0x20U)
#define USBC_OTGSC_IDPU_SHIFT (5U)
/*! IDPU - OTG not enable
 */
#define USBC_OTGSC_IDPU(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_IDPU_SHIFT)) & USBC_OTGSC_IDPU_MASK)
#define USBC_OTGSC_HADP_MASK (0x40U)
#define USBC_OTGSC_HADP_SHIFT (6U)
/*! HADP - OTG not enable
 */
#define USBC_OTGSC_HADP(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_HADP_SHIFT)) & USBC_OTGSC_HADP_MASK)
#define USBC_OTGSC_HABA_MASK (0x80U)
#define USBC_OTGSC_HABA_SHIFT (7U)
/*! HABA - OTG not enable
 */
#define USBC_OTGSC_HABA(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_HABA_SHIFT)) & USBC_OTGSC_HABA_MASK)
#define USBC_OTGSC_ID_MASK (0x100U)
#define USBC_OTGSC_ID_SHIFT (8U)
/*! ID - OTG not enable
 */
#define USBC_OTGSC_ID(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_ID_SHIFT)) & USBC_OTGSC_ID_MASK)
#define USBC_OTGSC_AVV_MASK (0x200U)
#define USBC_OTGSC_AVV_SHIFT (9U)
/*! AVV - OTG not enable
 */
#define USBC_OTGSC_AVV(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_AVV_SHIFT)) & USBC_OTGSC_AVV_MASK)
#define USBC_OTGSC_ASV_MASK (0x400U)
#define USBC_OTGSC_ASV_SHIFT (10U)
/*! ASV - OTG not enable
 */
#define USBC_OTGSC_ASV(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_ASV_SHIFT)) & USBC_OTGSC_ASV_MASK)
#define USBC_OTGSC_BSV_MASK (0x800U)
#define USBC_OTGSC_BSV_SHIFT (11U)
/*! BSV - OTG not enable
 */
#define USBC_OTGSC_BSV(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_BSV_SHIFT)) & USBC_OTGSC_BSV_MASK)
#define USBC_OTGSC_BSE_MASK (0x1000U)
#define USBC_OTGSC_BSE_SHIFT (12U)
/*! BSE - OTG not enable
 */
#define USBC_OTGSC_BSE(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_BSE_SHIFT)) & USBC_OTGSC_BSE_MASK)
#define USBC_OTGSC_OTGSC_1MST_MASK (0x2000U)
#define USBC_OTGSC_OTGSC_1MST_SHIFT (13U)
/*! OTGSC_1msT - OTG not enable
 */
#define USBC_OTGSC_OTGSC_1MST(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_OTGSC_1MST_SHIFT)) & USBC_OTGSC_OTGSC_1MST_MASK)
#define USBC_OTGSC_DPS_MASK (0x4000U)
#define USBC_OTGSC_DPS_SHIFT (14U)
/*! DPS - OTG not enable
 */
#define USBC_OTGSC_DPS(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_DPS_SHIFT)) & USBC_OTGSC_DPS_MASK)
#define USBC_OTGSC_RESERVED_15_MASK (0x8000U)
#define USBC_OTGSC_RESERVED_15_SHIFT (15U)
/*! Reserved_15 - OTG not enable
 */
#define USBC_OTGSC_RESERVED_15(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_RESERVED_15_SHIFT)) & USBC_OTGSC_RESERVED_15_MASK)
#define USBC_OTGSC_IDIS_MASK (0x10000U)
#define USBC_OTGSC_IDIS_SHIFT (16U)
/*! IDIS - rwc
 */
#define USBC_OTGSC_IDIS(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_IDIS_SHIFT)) & USBC_OTGSC_IDIS_MASK)
#define USBC_OTGSC_AVVIS_MASK (0x20000U)
#define USBC_OTGSC_AVVIS_SHIFT (17U)
/*! AVVIS - rwc
 */
#define USBC_OTGSC_AVVIS(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_AVVIS_SHIFT)) & USBC_OTGSC_AVVIS_MASK)
#define USBC_OTGSC_ASVIS_MASK (0x40000U)
#define USBC_OTGSC_ASVIS_SHIFT (18U)
/*! ASVIS - rwc
 */
#define USBC_OTGSC_ASVIS(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_ASVIS_SHIFT)) & USBC_OTGSC_ASVIS_MASK)
#define USBC_OTGSC_BSVIS_MASK (0x80000U)
#define USBC_OTGSC_BSVIS_SHIFT (19U)
/*! BSVIS - rwc
 */
#define USBC_OTGSC_BSVIS(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_BSVIS_SHIFT)) & USBC_OTGSC_BSVIS_MASK)
#define USBC_OTGSC_BSEIS_MASK (0x100000U)
#define USBC_OTGSC_BSEIS_SHIFT (20U)
/*! BSEIS - rwc
 */
#define USBC_OTGSC_BSEIS(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_BSEIS_SHIFT)) & USBC_OTGSC_BSEIS_MASK)
#define USBC_OTGSC_OTGSC_1MSS_MASK (0x200000U)
#define USBC_OTGSC_OTGSC_1MSS_SHIFT (21U)
/*! OTGSC_1msS - rwc
 */
#define USBC_OTGSC_OTGSC_1MSS(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_OTGSC_1MSS_SHIFT)) & USBC_OTGSC_OTGSC_1MSS_MASK)
#define USBC_OTGSC_DPIS_MASK (0x400000U)
#define USBC_OTGSC_DPIS_SHIFT (22U)
/*! DPIS - rwc
 */
#define USBC_OTGSC_DPIS(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_DPIS_SHIFT)) & USBC_OTGSC_DPIS_MASK)
#define USBC_OTGSC_RESERVED_23_MASK (0x800000U)
#define USBC_OTGSC_RESERVED_23_SHIFT (23U)
/*! Reserved_23 - OTG not enable
 */
#define USBC_OTGSC_RESERVED_23(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_RESERVED_23_SHIFT)) & USBC_OTGSC_RESERVED_23_MASK)
#define USBC_OTGSC_IDIE_MASK (0x1000000U)
#define USBC_OTGSC_IDIE_SHIFT (24U)
/*! IDIE - OTG not enable
 */
#define USBC_OTGSC_IDIE(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_IDIE_SHIFT)) & USBC_OTGSC_IDIE_MASK)
#define USBC_OTGSC_AVVIE_MASK (0x2000000U)
#define USBC_OTGSC_AVVIE_SHIFT (25U)
/*! AVVIE - OTG not enable
 */
#define USBC_OTGSC_AVVIE(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_AVVIE_SHIFT)) & USBC_OTGSC_AVVIE_MASK)
#define USBC_OTGSC_ASVIE_MASK (0x4000000U)
#define USBC_OTGSC_ASVIE_SHIFT (26U)
/*! ASVIE - OTG not enable
 */
#define USBC_OTGSC_ASVIE(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_ASVIE_SHIFT)) & USBC_OTGSC_ASVIE_MASK)
#define USBC_OTGSC_BSVIE_MASK (0x8000000U)
#define USBC_OTGSC_BSVIE_SHIFT (27U)
/*! BSVIE - OTG not enable
 */
#define USBC_OTGSC_BSVIE(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_BSVIE_SHIFT)) & USBC_OTGSC_BSVIE_MASK)
#define USBC_OTGSC_BSEIE_MASK (0x10000000U)
#define USBC_OTGSC_BSEIE_SHIFT (28U)
/*! BSEIE - OTG not enable
 */
#define USBC_OTGSC_BSEIE(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_BSEIE_SHIFT)) & USBC_OTGSC_BSEIE_MASK)
#define USBC_OTGSC_OTGSC_1MSE_MASK (0x20000000U)
#define USBC_OTGSC_OTGSC_1MSE_SHIFT (29U)
/*! OTGSC_1msE - OTG not enable
 */
#define USBC_OTGSC_OTGSC_1MSE(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_OTGSC_1MSE_SHIFT)) & USBC_OTGSC_OTGSC_1MSE_MASK)
#define USBC_OTGSC_DPIE_MASK (0x40000000U)
#define USBC_OTGSC_DPIE_SHIFT (30U)
/*! DPIE - OTG not enable
 */
#define USBC_OTGSC_DPIE(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_DPIE_SHIFT)) & USBC_OTGSC_DPIE_MASK)
#define USBC_OTGSC_RESERVED_31_MASK (0x80000000U)
#define USBC_OTGSC_RESERVED_31_SHIFT (31U)
/*! Reserved_31 - OTG not enable
 */
#define USBC_OTGSC_RESERVED_31(x) (((uint32_t)(((uint32_t)(x)) << USBC_OTGSC_RESERVED_31_SHIFT)) & USBC_OTGSC_RESERVED_31_MASK)
/*! @} */

/*! @name USBMODE -  */
/*! @{ */
#define USBC_USBMODE_CM_MASK (0x3U)
#define USBC_USBMODE_CM_SHIFT (0U)
/*! CM - fix device mode
 */
#define USBC_USBMODE_CM(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBMODE_CM_SHIFT)) & USBC_USBMODE_CM_MASK)
#define USBC_USBMODE_ES_MASK (0x4U)
#define USBC_USBMODE_ES_SHIFT (2U)
#define USBC_USBMODE_ES(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBMODE_ES_SHIFT)) & USBC_USBMODE_ES_MASK)
#define USBC_USBMODE_SLOM_MASK (0x8U)
#define USBC_USBMODE_SLOM_SHIFT (3U)
#define USBC_USBMODE_SLOM(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBMODE_SLOM_SHIFT)) & USBC_USBMODE_SLOM_MASK)
#define USBC_USBMODE_SDIS_MASK (0x10U)
#define USBC_USBMODE_SDIS_SHIFT (4U)
#define USBC_USBMODE_SDIS(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBMODE_SDIS_SHIFT)) & USBC_USBMODE_SDIS_MASK)
#define USBC_USBMODE_VBPS_MASK (0x20U)
#define USBC_USBMODE_VBPS_SHIFT (5U)
/*! VBPS - Only used in Host
 */
#define USBC_USBMODE_VBPS(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBMODE_VBPS_SHIFT)) & USBC_USBMODE_VBPS_MASK)
#define USBC_USBMODE_RESERVED_6_MASK (0xFC0U)
#define USBC_USBMODE_RESERVED_6_SHIFT (6U)
#define USBC_USBMODE_RESERVED_6(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBMODE_RESERVED_6_SHIFT)) & USBC_USBMODE_RESERVED_6_MASK)
#define USBC_USBMODE_TXHSD_MASK (0x7000U)
#define USBC_USBMODE_TXHSD_SHIFT (12U)
#define USBC_USBMODE_TXHSD(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBMODE_TXHSD_SHIFT)) & USBC_USBMODE_TXHSD_MASK)
#define USBC_USBMODE_SRT_MASK (0x8000U)
#define USBC_USBMODE_SRT_SHIFT (15U)
#define USBC_USBMODE_SRT(x) (((uint32_t)(((uint32_t)(x)) << USBC_USBMODE_SRT_SHIFT)) & USBC_USBMODE_SRT_MASK)
#define USBC_USBMODE_RESERVED_16_MASK (0xFFFF0000U)
#define USBC_USBMODE_RESERVED_16_SHIFT (16U)
#define USBC_USBMODE_RESERVED_16(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_USBMODE_RESERVED_16_SHIFT)) & USBC_USBMODE_RESERVED_16_MASK)
/*! @} */

/*! @name ENDPTSETUPSTAT -  */
/*! @{ */
#define USBC_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK (0xFFFFU)
#define USBC_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT (0U)
/*! ENDPTSETUPSTAT - rwc
 */
#define USBC_ENDPTSETUPSTAT_ENDPTSETUPSTAT(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT)) & USBC_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK)
#define USBC_ENDPTSETUPSTAT_RESERVED_16_MASK (0xFFFF0000U)
#define USBC_ENDPTSETUPSTAT_RESERVED_16_SHIFT (16U)
#define USBC_ENDPTSETUPSTAT_RESERVED_16(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTSETUPSTAT_RESERVED_16_SHIFT)) & USBC_ENDPTSETUPSTAT_RESERVED_16_MASK)
/*! @} */

/*! @name ENDPTPRIME -  */
/*! @{ */
#define USBC_ENDPTPRIME_PERB_MASK (0xFFFFU)
#define USBC_ENDPTPRIME_PERB_SHIFT (0U)
/*! PERB - rws
 */
#define USBC_ENDPTPRIME_PERB(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTPRIME_PERB_SHIFT)) & USBC_ENDPTPRIME_PERB_MASK)
#define USBC_ENDPTPRIME_PETB_MASK (0xFFFF0000U)
#define USBC_ENDPTPRIME_PETB_SHIFT (16U)
/*! PETB - rws
 */
#define USBC_ENDPTPRIME_PETB(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTPRIME_PETB_SHIFT)) & USBC_ENDPTPRIME_PETB_MASK)
/*! @} */

/*! @name ENDPTFLUSH -  */
/*! @{ */
#define USBC_ENDPTFLUSH_FERB_MASK (0xFFFFU)
#define USBC_ENDPTFLUSH_FERB_SHIFT (0U)
/*! FERB - rws
 */
#define USBC_ENDPTFLUSH_FERB(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTFLUSH_FERB_SHIFT)) & USBC_ENDPTFLUSH_FERB_MASK)
#define USBC_ENDPTFLUSH_FETB_MASK (0xFFFF0000U)
#define USBC_ENDPTFLUSH_FETB_SHIFT (16U)
/*! FETB - rws
 */
#define USBC_ENDPTFLUSH_FETB(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTFLUSH_FETB_SHIFT)) & USBC_ENDPTFLUSH_FETB_MASK)
/*! @} */

/*! @name ENDPTSTAT -  */
/*! @{ */
#define USBC_ENDPTSTAT_ERBR_MASK (0xFFFFU)
#define USBC_ENDPTSTAT_ERBR_SHIFT (0U)
#define USBC_ENDPTSTAT_ERBR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTSTAT_ERBR_SHIFT)) & USBC_ENDPTSTAT_ERBR_MASK)
#define USBC_ENDPTSTAT_ETBR_MASK (0xFFFF0000U)
#define USBC_ENDPTSTAT_ETBR_SHIFT (16U)
#define USBC_ENDPTSTAT_ETBR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTSTAT_ETBR_SHIFT)) & USBC_ENDPTSTAT_ETBR_MASK)
/*! @} */

/*! @name ENDPTCOMPLETE -  */
/*! @{ */
#define USBC_ENDPTCOMPLETE_ERCE_MASK (0xFFFFU)
#define USBC_ENDPTCOMPLETE_ERCE_SHIFT (0U)
/*! ERCE - rwc
 */
#define USBC_ENDPTCOMPLETE_ERCE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCOMPLETE_ERCE_SHIFT)) & USBC_ENDPTCOMPLETE_ERCE_MASK)
#define USBC_ENDPTCOMPLETE_ETCE_MASK (0xFFFF0000U)
#define USBC_ENDPTCOMPLETE_ETCE_SHIFT (16U)
/*! ETCE - rwc
 */
#define USBC_ENDPTCOMPLETE_ETCE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCOMPLETE_ETCE_SHIFT)) & USBC_ENDPTCOMPLETE_ETCE_MASK)
/*! @} */

/*! @name ENDPTCTRL0 -  */
/*! @{ */
#define USBC_ENDPTCTRL0_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL0_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL0_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_RXS_SHIFT)) & USBC_ENDPTCTRL0_RXS_MASK)
#define USBC_ENDPTCTRL0_RESERVED_1_MASK (0x2U)
#define USBC_ENDPTCTRL0_RESERVED_1_SHIFT (1U)
#define USBC_ENDPTCTRL0_RESERVED_1(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_RESERVED_1_SHIFT)) & USBC_ENDPTCTRL0_RESERVED_1_MASK)
#define USBC_ENDPTCTRL0_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL0_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL0_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_RXT_SHIFT)) & USBC_ENDPTCTRL0_RXT_MASK)
#define USBC_ENDPTCTRL0_RESERVED_4_MASK (0x70U)
#define USBC_ENDPTCTRL0_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL0_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL0_RESERVED_4_MASK)
#define USBC_ENDPTCTRL0_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL0_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL0_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_RXE_SHIFT)) & USBC_ENDPTCTRL0_RXE_MASK)
#define USBC_ENDPTCTRL0_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL0_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL0_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL0_RESERVED_8_MASK)
#define USBC_ENDPTCTRL0_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL0_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL0_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_TXS_SHIFT)) & USBC_ENDPTCTRL0_TXS_MASK)
#define USBC_ENDPTCTRL0_RESERVED_17_MASK (0x20000U)
#define USBC_ENDPTCTRL0_RESERVED_17_SHIFT (17U)
#define USBC_ENDPTCTRL0_RESERVED_17(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_RESERVED_17_SHIFT)) & USBC_ENDPTCTRL0_RESERVED_17_MASK)
#define USBC_ENDPTCTRL0_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL0_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL0_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_TXT_SHIFT)) & USBC_ENDPTCTRL0_TXT_MASK)
#define USBC_ENDPTCTRL0_RESERVED_20_MASK (0x700000U)
#define USBC_ENDPTCTRL0_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL0_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL0_RESERVED_20_MASK)
#define USBC_ENDPTCTRL0_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL0_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL0_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_TXE_SHIFT)) & USBC_ENDPTCTRL0_TXE_MASK)
#define USBC_ENDPTCTRL0_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL0_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL0_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL0_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL0_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL1 -  */
/*! @{ */
#define USBC_ENDPTCTRL1_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL1_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL1_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RXS_SHIFT)) & USBC_ENDPTCTRL1_RXS_MASK)
#define USBC_ENDPTCTRL1_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL1_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL1_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RXD_SHIFT)) & USBC_ENDPTCTRL1_RXD_MASK)
#define USBC_ENDPTCTRL1_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL1_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL1_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RXT_SHIFT)) & USBC_ENDPTCTRL1_RXT_MASK)
#define USBC_ENDPTCTRL1_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL1_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL1_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL1_RESERVED_4_MASK)
#define USBC_ENDPTCTRL1_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL1_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL1_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RXI_SHIFT)) & USBC_ENDPTCTRL1_RXI_MASK)
#define USBC_ENDPTCTRL1_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL1_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL1_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RXR_SHIFT)) & USBC_ENDPTCTRL1_RXR_MASK)
#define USBC_ENDPTCTRL1_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL1_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL1_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RXE_SHIFT)) & USBC_ENDPTCTRL1_RXE_MASK)
#define USBC_ENDPTCTRL1_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL1_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL1_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL1_RESERVED_8_MASK)
#define USBC_ENDPTCTRL1_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL1_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL1_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_TXS_SHIFT)) & USBC_ENDPTCTRL1_TXS_MASK)
#define USBC_ENDPTCTRL1_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL1_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL1_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_TXD_SHIFT)) & USBC_ENDPTCTRL1_TXD_MASK)
#define USBC_ENDPTCTRL1_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL1_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL1_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_TXT_SHIFT)) & USBC_ENDPTCTRL1_TXT_MASK)
#define USBC_ENDPTCTRL1_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL1_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL1_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL1_RESERVED_20_MASK)
#define USBC_ENDPTCTRL1_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL1_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL1_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_TXI_SHIFT)) & USBC_ENDPTCTRL1_TXI_MASK)
#define USBC_ENDPTCTRL1_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL1_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL1_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_TXR_SHIFT)) & USBC_ENDPTCTRL1_TXR_MASK)
#define USBC_ENDPTCTRL1_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL1_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL1_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_TXE_SHIFT)) & USBC_ENDPTCTRL1_TXE_MASK)
#define USBC_ENDPTCTRL1_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL1_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL1_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL1_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL1_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL2 -  */
/*! @{ */
#define USBC_ENDPTCTRL2_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL2_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL2_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RXS_SHIFT)) & USBC_ENDPTCTRL2_RXS_MASK)
#define USBC_ENDPTCTRL2_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL2_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL2_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RXD_SHIFT)) & USBC_ENDPTCTRL2_RXD_MASK)
#define USBC_ENDPTCTRL2_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL2_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL2_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RXT_SHIFT)) & USBC_ENDPTCTRL2_RXT_MASK)
#define USBC_ENDPTCTRL2_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL2_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL2_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL2_RESERVED_4_MASK)
#define USBC_ENDPTCTRL2_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL2_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL2_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RXI_SHIFT)) & USBC_ENDPTCTRL2_RXI_MASK)
#define USBC_ENDPTCTRL2_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL2_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL2_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RXR_SHIFT)) & USBC_ENDPTCTRL2_RXR_MASK)
#define USBC_ENDPTCTRL2_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL2_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL2_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RXE_SHIFT)) & USBC_ENDPTCTRL2_RXE_MASK)
#define USBC_ENDPTCTRL2_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL2_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL2_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL2_RESERVED_8_MASK)
#define USBC_ENDPTCTRL2_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL2_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL2_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_TXS_SHIFT)) & USBC_ENDPTCTRL2_TXS_MASK)
#define USBC_ENDPTCTRL2_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL2_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL2_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_TXD_SHIFT)) & USBC_ENDPTCTRL2_TXD_MASK)
#define USBC_ENDPTCTRL2_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL2_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL2_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_TXT_SHIFT)) & USBC_ENDPTCTRL2_TXT_MASK)
#define USBC_ENDPTCTRL2_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL2_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL2_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL2_RESERVED_20_MASK)
#define USBC_ENDPTCTRL2_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL2_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL2_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_TXI_SHIFT)) & USBC_ENDPTCTRL2_TXI_MASK)
#define USBC_ENDPTCTRL2_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL2_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL2_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_TXR_SHIFT)) & USBC_ENDPTCTRL2_TXR_MASK)
#define USBC_ENDPTCTRL2_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL2_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL2_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_TXE_SHIFT)) & USBC_ENDPTCTRL2_TXE_MASK)
#define USBC_ENDPTCTRL2_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL2_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL2_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL2_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL2_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL3 -  */
/*! @{ */
#define USBC_ENDPTCTRL3_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL3_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL3_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RXS_SHIFT)) & USBC_ENDPTCTRL3_RXS_MASK)
#define USBC_ENDPTCTRL3_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL3_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL3_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RXD_SHIFT)) & USBC_ENDPTCTRL3_RXD_MASK)
#define USBC_ENDPTCTRL3_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL3_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL3_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RXT_SHIFT)) & USBC_ENDPTCTRL3_RXT_MASK)
#define USBC_ENDPTCTRL3_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL3_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL3_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL3_RESERVED_4_MASK)
#define USBC_ENDPTCTRL3_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL3_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL3_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RXI_SHIFT)) & USBC_ENDPTCTRL3_RXI_MASK)
#define USBC_ENDPTCTRL3_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL3_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL3_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RXR_SHIFT)) & USBC_ENDPTCTRL3_RXR_MASK)
#define USBC_ENDPTCTRL3_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL3_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL3_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RXE_SHIFT)) & USBC_ENDPTCTRL3_RXE_MASK)
#define USBC_ENDPTCTRL3_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL3_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL3_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL3_RESERVED_8_MASK)
#define USBC_ENDPTCTRL3_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL3_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL3_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_TXS_SHIFT)) & USBC_ENDPTCTRL3_TXS_MASK)
#define USBC_ENDPTCTRL3_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL3_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL3_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_TXD_SHIFT)) & USBC_ENDPTCTRL3_TXD_MASK)
#define USBC_ENDPTCTRL3_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL3_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL3_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_TXT_SHIFT)) & USBC_ENDPTCTRL3_TXT_MASK)
#define USBC_ENDPTCTRL3_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL3_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL3_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL3_RESERVED_20_MASK)
#define USBC_ENDPTCTRL3_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL3_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL3_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_TXI_SHIFT)) & USBC_ENDPTCTRL3_TXI_MASK)
#define USBC_ENDPTCTRL3_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL3_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL3_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_TXR_SHIFT)) & USBC_ENDPTCTRL3_TXR_MASK)
#define USBC_ENDPTCTRL3_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL3_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL3_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_TXE_SHIFT)) & USBC_ENDPTCTRL3_TXE_MASK)
#define USBC_ENDPTCTRL3_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL3_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL3_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL3_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL3_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL4 -  */
/*! @{ */
#define USBC_ENDPTCTRL4_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL4_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL4_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RXS_SHIFT)) & USBC_ENDPTCTRL4_RXS_MASK)
#define USBC_ENDPTCTRL4_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL4_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL4_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RXD_SHIFT)) & USBC_ENDPTCTRL4_RXD_MASK)
#define USBC_ENDPTCTRL4_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL4_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL4_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RXT_SHIFT)) & USBC_ENDPTCTRL4_RXT_MASK)
#define USBC_ENDPTCTRL4_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL4_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL4_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL4_RESERVED_4_MASK)
#define USBC_ENDPTCTRL4_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL4_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL4_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RXI_SHIFT)) & USBC_ENDPTCTRL4_RXI_MASK)
#define USBC_ENDPTCTRL4_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL4_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL4_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RXR_SHIFT)) & USBC_ENDPTCTRL4_RXR_MASK)
#define USBC_ENDPTCTRL4_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL4_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL4_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RXE_SHIFT)) & USBC_ENDPTCTRL4_RXE_MASK)
#define USBC_ENDPTCTRL4_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL4_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL4_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL4_RESERVED_8_MASK)
#define USBC_ENDPTCTRL4_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL4_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL4_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_TXS_SHIFT)) & USBC_ENDPTCTRL4_TXS_MASK)
#define USBC_ENDPTCTRL4_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL4_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL4_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_TXD_SHIFT)) & USBC_ENDPTCTRL4_TXD_MASK)
#define USBC_ENDPTCTRL4_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL4_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL4_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_TXT_SHIFT)) & USBC_ENDPTCTRL4_TXT_MASK)
#define USBC_ENDPTCTRL4_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL4_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL4_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL4_RESERVED_20_MASK)
#define USBC_ENDPTCTRL4_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL4_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL4_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_TXI_SHIFT)) & USBC_ENDPTCTRL4_TXI_MASK)
#define USBC_ENDPTCTRL4_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL4_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL4_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_TXR_SHIFT)) & USBC_ENDPTCTRL4_TXR_MASK)
#define USBC_ENDPTCTRL4_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL4_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL4_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_TXE_SHIFT)) & USBC_ENDPTCTRL4_TXE_MASK)
#define USBC_ENDPTCTRL4_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL4_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL4_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL4_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL4_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL5 -  */
/*! @{ */
#define USBC_ENDPTCTRL5_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL5_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL5_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RXS_SHIFT)) & USBC_ENDPTCTRL5_RXS_MASK)
#define USBC_ENDPTCTRL5_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL5_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL5_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RXD_SHIFT)) & USBC_ENDPTCTRL5_RXD_MASK)
#define USBC_ENDPTCTRL5_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL5_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL5_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RXT_SHIFT)) & USBC_ENDPTCTRL5_RXT_MASK)
#define USBC_ENDPTCTRL5_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL5_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL5_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL5_RESERVED_4_MASK)
#define USBC_ENDPTCTRL5_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL5_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL5_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RXI_SHIFT)) & USBC_ENDPTCTRL5_RXI_MASK)
#define USBC_ENDPTCTRL5_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL5_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL5_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RXR_SHIFT)) & USBC_ENDPTCTRL5_RXR_MASK)
#define USBC_ENDPTCTRL5_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL5_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL5_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RXE_SHIFT)) & USBC_ENDPTCTRL5_RXE_MASK)
#define USBC_ENDPTCTRL5_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL5_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL5_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL5_RESERVED_8_MASK)
#define USBC_ENDPTCTRL5_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL5_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL5_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_TXS_SHIFT)) & USBC_ENDPTCTRL5_TXS_MASK)
#define USBC_ENDPTCTRL5_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL5_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL5_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_TXD_SHIFT)) & USBC_ENDPTCTRL5_TXD_MASK)
#define USBC_ENDPTCTRL5_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL5_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL5_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_TXT_SHIFT)) & USBC_ENDPTCTRL5_TXT_MASK)
#define USBC_ENDPTCTRL5_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL5_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL5_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL5_RESERVED_20_MASK)
#define USBC_ENDPTCTRL5_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL5_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL5_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_TXI_SHIFT)) & USBC_ENDPTCTRL5_TXI_MASK)
#define USBC_ENDPTCTRL5_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL5_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL5_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_TXR_SHIFT)) & USBC_ENDPTCTRL5_TXR_MASK)
#define USBC_ENDPTCTRL5_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL5_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL5_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_TXE_SHIFT)) & USBC_ENDPTCTRL5_TXE_MASK)
#define USBC_ENDPTCTRL5_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL5_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL5_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL5_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL5_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL6 -  */
/*! @{ */
#define USBC_ENDPTCTRL6_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL6_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL6_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RXS_SHIFT)) & USBC_ENDPTCTRL6_RXS_MASK)
#define USBC_ENDPTCTRL6_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL6_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL6_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RXD_SHIFT)) & USBC_ENDPTCTRL6_RXD_MASK)
#define USBC_ENDPTCTRL6_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL6_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL6_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RXT_SHIFT)) & USBC_ENDPTCTRL6_RXT_MASK)
#define USBC_ENDPTCTRL6_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL6_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL6_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL6_RESERVED_4_MASK)
#define USBC_ENDPTCTRL6_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL6_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL6_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RXI_SHIFT)) & USBC_ENDPTCTRL6_RXI_MASK)
#define USBC_ENDPTCTRL6_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL6_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL6_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RXR_SHIFT)) & USBC_ENDPTCTRL6_RXR_MASK)
#define USBC_ENDPTCTRL6_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL6_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL6_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RXE_SHIFT)) & USBC_ENDPTCTRL6_RXE_MASK)
#define USBC_ENDPTCTRL6_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL6_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL6_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL6_RESERVED_8_MASK)
#define USBC_ENDPTCTRL6_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL6_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL6_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_TXS_SHIFT)) & USBC_ENDPTCTRL6_TXS_MASK)
#define USBC_ENDPTCTRL6_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL6_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL6_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_TXD_SHIFT)) & USBC_ENDPTCTRL6_TXD_MASK)
#define USBC_ENDPTCTRL6_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL6_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL6_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_TXT_SHIFT)) & USBC_ENDPTCTRL6_TXT_MASK)
#define USBC_ENDPTCTRL6_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL6_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL6_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL6_RESERVED_20_MASK)
#define USBC_ENDPTCTRL6_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL6_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL6_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_TXI_SHIFT)) & USBC_ENDPTCTRL6_TXI_MASK)
#define USBC_ENDPTCTRL6_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL6_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL6_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_TXR_SHIFT)) & USBC_ENDPTCTRL6_TXR_MASK)
#define USBC_ENDPTCTRL6_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL6_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL6_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_TXE_SHIFT)) & USBC_ENDPTCTRL6_TXE_MASK)
#define USBC_ENDPTCTRL6_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL6_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL6_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL6_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL6_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL7 -  */
/*! @{ */
#define USBC_ENDPTCTRL7_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL7_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL7_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RXS_SHIFT)) & USBC_ENDPTCTRL7_RXS_MASK)
#define USBC_ENDPTCTRL7_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL7_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL7_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RXD_SHIFT)) & USBC_ENDPTCTRL7_RXD_MASK)
#define USBC_ENDPTCTRL7_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL7_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL7_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RXT_SHIFT)) & USBC_ENDPTCTRL7_RXT_MASK)
#define USBC_ENDPTCTRL7_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL7_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL7_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL7_RESERVED_4_MASK)
#define USBC_ENDPTCTRL7_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL7_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL7_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RXI_SHIFT)) & USBC_ENDPTCTRL7_RXI_MASK)
#define USBC_ENDPTCTRL7_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL7_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL7_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RXR_SHIFT)) & USBC_ENDPTCTRL7_RXR_MASK)
#define USBC_ENDPTCTRL7_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL7_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL7_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RXE_SHIFT)) & USBC_ENDPTCTRL7_RXE_MASK)
#define USBC_ENDPTCTRL7_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL7_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL7_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL7_RESERVED_8_MASK)
#define USBC_ENDPTCTRL7_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL7_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL7_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_TXS_SHIFT)) & USBC_ENDPTCTRL7_TXS_MASK)
#define USBC_ENDPTCTRL7_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL7_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL7_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_TXD_SHIFT)) & USBC_ENDPTCTRL7_TXD_MASK)
#define USBC_ENDPTCTRL7_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL7_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL7_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_TXT_SHIFT)) & USBC_ENDPTCTRL7_TXT_MASK)
#define USBC_ENDPTCTRL7_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL7_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL7_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL7_RESERVED_20_MASK)
#define USBC_ENDPTCTRL7_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL7_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL7_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_TXI_SHIFT)) & USBC_ENDPTCTRL7_TXI_MASK)
#define USBC_ENDPTCTRL7_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL7_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL7_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_TXR_SHIFT)) & USBC_ENDPTCTRL7_TXR_MASK)
#define USBC_ENDPTCTRL7_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL7_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL7_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_TXE_SHIFT)) & USBC_ENDPTCTRL7_TXE_MASK)
#define USBC_ENDPTCTRL7_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL7_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL7_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL7_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL7_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL8 -  */
/*! @{ */
#define USBC_ENDPTCTRL8_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL8_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL8_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RXS_SHIFT)) & USBC_ENDPTCTRL8_RXS_MASK)
#define USBC_ENDPTCTRL8_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL8_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL8_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RXD_SHIFT)) & USBC_ENDPTCTRL8_RXD_MASK)
#define USBC_ENDPTCTRL8_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL8_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL8_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RXT_SHIFT)) & USBC_ENDPTCTRL8_RXT_MASK)
#define USBC_ENDPTCTRL8_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL8_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL8_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL8_RESERVED_4_MASK)
#define USBC_ENDPTCTRL8_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL8_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL8_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RXI_SHIFT)) & USBC_ENDPTCTRL8_RXI_MASK)
#define USBC_ENDPTCTRL8_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL8_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL8_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RXR_SHIFT)) & USBC_ENDPTCTRL8_RXR_MASK)
#define USBC_ENDPTCTRL8_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL8_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL8_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RXE_SHIFT)) & USBC_ENDPTCTRL8_RXE_MASK)
#define USBC_ENDPTCTRL8_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL8_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL8_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL8_RESERVED_8_MASK)
#define USBC_ENDPTCTRL8_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL8_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL8_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_TXS_SHIFT)) & USBC_ENDPTCTRL8_TXS_MASK)
#define USBC_ENDPTCTRL8_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL8_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL8_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_TXD_SHIFT)) & USBC_ENDPTCTRL8_TXD_MASK)
#define USBC_ENDPTCTRL8_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL8_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL8_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_TXT_SHIFT)) & USBC_ENDPTCTRL8_TXT_MASK)
#define USBC_ENDPTCTRL8_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL8_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL8_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL8_RESERVED_20_MASK)
#define USBC_ENDPTCTRL8_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL8_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL8_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_TXI_SHIFT)) & USBC_ENDPTCTRL8_TXI_MASK)
#define USBC_ENDPTCTRL8_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL8_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL8_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_TXR_SHIFT)) & USBC_ENDPTCTRL8_TXR_MASK)
#define USBC_ENDPTCTRL8_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL8_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL8_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_TXE_SHIFT)) & USBC_ENDPTCTRL8_TXE_MASK)
#define USBC_ENDPTCTRL8_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL8_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL8_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL8_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL8_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL9 -  */
/*! @{ */
#define USBC_ENDPTCTRL9_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL9_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL9_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RXS_SHIFT)) & USBC_ENDPTCTRL9_RXS_MASK)
#define USBC_ENDPTCTRL9_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL9_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL9_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RXD_SHIFT)) & USBC_ENDPTCTRL9_RXD_MASK)
#define USBC_ENDPTCTRL9_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL9_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL9_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RXT_SHIFT)) & USBC_ENDPTCTRL9_RXT_MASK)
#define USBC_ENDPTCTRL9_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL9_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL9_RESERVED_4(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL9_RESERVED_4_MASK)
#define USBC_ENDPTCTRL9_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL9_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL9_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RXI_SHIFT)) & USBC_ENDPTCTRL9_RXI_MASK)
#define USBC_ENDPTCTRL9_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL9_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL9_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RXR_SHIFT)) & USBC_ENDPTCTRL9_RXR_MASK)
#define USBC_ENDPTCTRL9_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL9_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL9_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RXE_SHIFT)) & USBC_ENDPTCTRL9_RXE_MASK)
#define USBC_ENDPTCTRL9_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL9_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL9_RESERVED_8(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL9_RESERVED_8_MASK)
#define USBC_ENDPTCTRL9_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL9_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL9_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_TXS_SHIFT)) & USBC_ENDPTCTRL9_TXS_MASK)
#define USBC_ENDPTCTRL9_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL9_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL9_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_TXD_SHIFT)) & USBC_ENDPTCTRL9_TXD_MASK)
#define USBC_ENDPTCTRL9_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL9_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL9_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_TXT_SHIFT)) & USBC_ENDPTCTRL9_TXT_MASK)
#define USBC_ENDPTCTRL9_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL9_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL9_RESERVED_20(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL9_RESERVED_20_MASK)
#define USBC_ENDPTCTRL9_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL9_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL9_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_TXI_SHIFT)) & USBC_ENDPTCTRL9_TXI_MASK)
#define USBC_ENDPTCTRL9_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL9_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL9_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_TXR_SHIFT)) & USBC_ENDPTCTRL9_TXR_MASK)
#define USBC_ENDPTCTRL9_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL9_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL9_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_TXE_SHIFT)) & USBC_ENDPTCTRL9_TXE_MASK)
#define USBC_ENDPTCTRL9_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL9_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL9_RESERVED_24(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL9_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL9_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL10 -  */
/*! @{ */
#define USBC_ENDPTCTRL10_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL10_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL10_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RXS_SHIFT)) & USBC_ENDPTCTRL10_RXS_MASK)
#define USBC_ENDPTCTRL10_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL10_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL10_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RXD_SHIFT)) & USBC_ENDPTCTRL10_RXD_MASK)
#define USBC_ENDPTCTRL10_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL10_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL10_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RXT_SHIFT)) & USBC_ENDPTCTRL10_RXT_MASK)
#define USBC_ENDPTCTRL10_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL10_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL10_RESERVED_4(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL10_RESERVED_4_MASK)
#define USBC_ENDPTCTRL10_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL10_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL10_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RXI_SHIFT)) & USBC_ENDPTCTRL10_RXI_MASK)
#define USBC_ENDPTCTRL10_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL10_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL10_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RXR_SHIFT)) & USBC_ENDPTCTRL10_RXR_MASK)
#define USBC_ENDPTCTRL10_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL10_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL10_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RXE_SHIFT)) & USBC_ENDPTCTRL10_RXE_MASK)
#define USBC_ENDPTCTRL10_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL10_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL10_RESERVED_8(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL10_RESERVED_8_MASK)
#define USBC_ENDPTCTRL10_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL10_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL10_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_TXS_SHIFT)) & USBC_ENDPTCTRL10_TXS_MASK)
#define USBC_ENDPTCTRL10_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL10_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL10_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_TXD_SHIFT)) & USBC_ENDPTCTRL10_TXD_MASK)
#define USBC_ENDPTCTRL10_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL10_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL10_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_TXT_SHIFT)) & USBC_ENDPTCTRL10_TXT_MASK)
#define USBC_ENDPTCTRL10_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL10_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL10_RESERVED_20(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL10_RESERVED_20_MASK)
#define USBC_ENDPTCTRL10_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL10_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL10_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_TXI_SHIFT)) & USBC_ENDPTCTRL10_TXI_MASK)
#define USBC_ENDPTCTRL10_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL10_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL10_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_TXR_SHIFT)) & USBC_ENDPTCTRL10_TXR_MASK)
#define USBC_ENDPTCTRL10_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL10_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL10_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_TXE_SHIFT)) & USBC_ENDPTCTRL10_TXE_MASK)
#define USBC_ENDPTCTRL10_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL10_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL10_RESERVED_24(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL10_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL10_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL11 -  */
/*! @{ */
#define USBC_ENDPTCTRL11_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL11_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL11_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RXS_SHIFT)) & USBC_ENDPTCTRL11_RXS_MASK)
#define USBC_ENDPTCTRL11_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL11_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL11_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RXD_SHIFT)) & USBC_ENDPTCTRL11_RXD_MASK)
#define USBC_ENDPTCTRL11_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL11_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL11_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RXT_SHIFT)) & USBC_ENDPTCTRL11_RXT_MASK)
#define USBC_ENDPTCTRL11_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL11_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL11_RESERVED_4(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL11_RESERVED_4_MASK)
#define USBC_ENDPTCTRL11_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL11_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL11_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RXI_SHIFT)) & USBC_ENDPTCTRL11_RXI_MASK)
#define USBC_ENDPTCTRL11_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL11_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL11_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RXR_SHIFT)) & USBC_ENDPTCTRL11_RXR_MASK)
#define USBC_ENDPTCTRL11_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL11_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL11_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RXE_SHIFT)) & USBC_ENDPTCTRL11_RXE_MASK)
#define USBC_ENDPTCTRL11_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL11_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL11_RESERVED_8(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL11_RESERVED_8_MASK)
#define USBC_ENDPTCTRL11_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL11_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL11_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_TXS_SHIFT)) & USBC_ENDPTCTRL11_TXS_MASK)
#define USBC_ENDPTCTRL11_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL11_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL11_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_TXD_SHIFT)) & USBC_ENDPTCTRL11_TXD_MASK)
#define USBC_ENDPTCTRL11_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL11_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL11_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_TXT_SHIFT)) & USBC_ENDPTCTRL11_TXT_MASK)
#define USBC_ENDPTCTRL11_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL11_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL11_RESERVED_20(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL11_RESERVED_20_MASK)
#define USBC_ENDPTCTRL11_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL11_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL11_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_TXI_SHIFT)) & USBC_ENDPTCTRL11_TXI_MASK)
#define USBC_ENDPTCTRL11_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL11_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL11_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_TXR_SHIFT)) & USBC_ENDPTCTRL11_TXR_MASK)
#define USBC_ENDPTCTRL11_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL11_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL11_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_TXE_SHIFT)) & USBC_ENDPTCTRL11_TXE_MASK)
#define USBC_ENDPTCTRL11_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL11_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL11_RESERVED_24(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL11_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL11_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL12 -  */
/*! @{ */
#define USBC_ENDPTCTRL12_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL12_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL12_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RXS_SHIFT)) & USBC_ENDPTCTRL12_RXS_MASK)
#define USBC_ENDPTCTRL12_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL12_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL12_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RXD_SHIFT)) & USBC_ENDPTCTRL12_RXD_MASK)
#define USBC_ENDPTCTRL12_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL12_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL12_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RXT_SHIFT)) & USBC_ENDPTCTRL12_RXT_MASK)
#define USBC_ENDPTCTRL12_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL12_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL12_RESERVED_4(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL12_RESERVED_4_MASK)
#define USBC_ENDPTCTRL12_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL12_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL12_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RXI_SHIFT)) & USBC_ENDPTCTRL12_RXI_MASK)
#define USBC_ENDPTCTRL12_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL12_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL12_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RXR_SHIFT)) & USBC_ENDPTCTRL12_RXR_MASK)
#define USBC_ENDPTCTRL12_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL12_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL12_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RXE_SHIFT)) & USBC_ENDPTCTRL12_RXE_MASK)
#define USBC_ENDPTCTRL12_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL12_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL12_RESERVED_8(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL12_RESERVED_8_MASK)
#define USBC_ENDPTCTRL12_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL12_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL12_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_TXS_SHIFT)) & USBC_ENDPTCTRL12_TXS_MASK)
#define USBC_ENDPTCTRL12_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL12_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL12_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_TXD_SHIFT)) & USBC_ENDPTCTRL12_TXD_MASK)
#define USBC_ENDPTCTRL12_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL12_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL12_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_TXT_SHIFT)) & USBC_ENDPTCTRL12_TXT_MASK)
#define USBC_ENDPTCTRL12_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL12_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL12_RESERVED_20(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL12_RESERVED_20_MASK)
#define USBC_ENDPTCTRL12_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL12_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL12_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_TXI_SHIFT)) & USBC_ENDPTCTRL12_TXI_MASK)
#define USBC_ENDPTCTRL12_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL12_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL12_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_TXR_SHIFT)) & USBC_ENDPTCTRL12_TXR_MASK)
#define USBC_ENDPTCTRL12_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL12_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL12_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_TXE_SHIFT)) & USBC_ENDPTCTRL12_TXE_MASK)
#define USBC_ENDPTCTRL12_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL12_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL12_RESERVED_24(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL12_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL12_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL13 -  */
/*! @{ */
#define USBC_ENDPTCTRL13_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL13_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL13_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RXS_SHIFT)) & USBC_ENDPTCTRL13_RXS_MASK)
#define USBC_ENDPTCTRL13_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL13_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL13_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RXD_SHIFT)) & USBC_ENDPTCTRL13_RXD_MASK)
#define USBC_ENDPTCTRL13_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL13_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL13_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RXT_SHIFT)) & USBC_ENDPTCTRL13_RXT_MASK)
#define USBC_ENDPTCTRL13_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL13_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL13_RESERVED_4(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL13_RESERVED_4_MASK)
#define USBC_ENDPTCTRL13_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL13_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL13_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RXI_SHIFT)) & USBC_ENDPTCTRL13_RXI_MASK)
#define USBC_ENDPTCTRL13_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL13_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL13_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RXR_SHIFT)) & USBC_ENDPTCTRL13_RXR_MASK)
#define USBC_ENDPTCTRL13_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL13_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL13_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RXE_SHIFT)) & USBC_ENDPTCTRL13_RXE_MASK)
#define USBC_ENDPTCTRL13_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL13_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL13_RESERVED_8(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL13_RESERVED_8_MASK)
#define USBC_ENDPTCTRL13_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL13_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL13_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_TXS_SHIFT)) & USBC_ENDPTCTRL13_TXS_MASK)
#define USBC_ENDPTCTRL13_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL13_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL13_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_TXD_SHIFT)) & USBC_ENDPTCTRL13_TXD_MASK)
#define USBC_ENDPTCTRL13_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL13_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL13_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_TXT_SHIFT)) & USBC_ENDPTCTRL13_TXT_MASK)
#define USBC_ENDPTCTRL13_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL13_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL13_RESERVED_20(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL13_RESERVED_20_MASK)
#define USBC_ENDPTCTRL13_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL13_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL13_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_TXI_SHIFT)) & USBC_ENDPTCTRL13_TXI_MASK)
#define USBC_ENDPTCTRL13_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL13_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL13_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_TXR_SHIFT)) & USBC_ENDPTCTRL13_TXR_MASK)
#define USBC_ENDPTCTRL13_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL13_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL13_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_TXE_SHIFT)) & USBC_ENDPTCTRL13_TXE_MASK)
#define USBC_ENDPTCTRL13_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL13_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL13_RESERVED_24(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL13_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL13_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL14 -  */
/*! @{ */
#define USBC_ENDPTCTRL14_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL14_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL14_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RXS_SHIFT)) & USBC_ENDPTCTRL14_RXS_MASK)
#define USBC_ENDPTCTRL14_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL14_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL14_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RXD_SHIFT)) & USBC_ENDPTCTRL14_RXD_MASK)
#define USBC_ENDPTCTRL14_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL14_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL14_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RXT_SHIFT)) & USBC_ENDPTCTRL14_RXT_MASK)
#define USBC_ENDPTCTRL14_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL14_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL14_RESERVED_4(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL14_RESERVED_4_MASK)
#define USBC_ENDPTCTRL14_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL14_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL14_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RXI_SHIFT)) & USBC_ENDPTCTRL14_RXI_MASK)
#define USBC_ENDPTCTRL14_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL14_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL14_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RXR_SHIFT)) & USBC_ENDPTCTRL14_RXR_MASK)
#define USBC_ENDPTCTRL14_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL14_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL14_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RXE_SHIFT)) & USBC_ENDPTCTRL14_RXE_MASK)
#define USBC_ENDPTCTRL14_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL14_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL14_RESERVED_8(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL14_RESERVED_8_MASK)
#define USBC_ENDPTCTRL14_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL14_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL14_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_TXS_SHIFT)) & USBC_ENDPTCTRL14_TXS_MASK)
#define USBC_ENDPTCTRL14_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL14_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL14_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_TXD_SHIFT)) & USBC_ENDPTCTRL14_TXD_MASK)
#define USBC_ENDPTCTRL14_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL14_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL14_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_TXT_SHIFT)) & USBC_ENDPTCTRL14_TXT_MASK)
#define USBC_ENDPTCTRL14_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL14_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL14_RESERVED_20(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL14_RESERVED_20_MASK)
#define USBC_ENDPTCTRL14_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL14_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL14_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_TXI_SHIFT)) & USBC_ENDPTCTRL14_TXI_MASK)
#define USBC_ENDPTCTRL14_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL14_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL14_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_TXR_SHIFT)) & USBC_ENDPTCTRL14_TXR_MASK)
#define USBC_ENDPTCTRL14_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL14_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL14_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_TXE_SHIFT)) & USBC_ENDPTCTRL14_TXE_MASK)
#define USBC_ENDPTCTRL14_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL14_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL14_RESERVED_24(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL14_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL14_RESERVED_24_MASK)
/*! @} */

/*! @name ENDPTCTRL15 -  */
/*! @{ */
#define USBC_ENDPTCTRL15_RXS_MASK (0x1U)
#define USBC_ENDPTCTRL15_RXS_SHIFT (0U)
#define USBC_ENDPTCTRL15_RXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RXS_SHIFT)) & USBC_ENDPTCTRL15_RXS_MASK)
#define USBC_ENDPTCTRL15_RXD_MASK (0x2U)
#define USBC_ENDPTCTRL15_RXD_SHIFT (1U)
#define USBC_ENDPTCTRL15_RXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RXD_SHIFT)) & USBC_ENDPTCTRL15_RXD_MASK)
#define USBC_ENDPTCTRL15_RXT_MASK (0xCU)
#define USBC_ENDPTCTRL15_RXT_SHIFT (2U)
#define USBC_ENDPTCTRL15_RXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RXT_SHIFT)) & USBC_ENDPTCTRL15_RXT_MASK)
#define USBC_ENDPTCTRL15_RESERVED_4_MASK (0x10U)
#define USBC_ENDPTCTRL15_RESERVED_4_SHIFT (4U)
#define USBC_ENDPTCTRL15_RESERVED_4(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RESERVED_4_SHIFT)) & USBC_ENDPTCTRL15_RESERVED_4_MASK)
#define USBC_ENDPTCTRL15_RXI_MASK (0x20U)
#define USBC_ENDPTCTRL15_RXI_SHIFT (5U)
#define USBC_ENDPTCTRL15_RXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RXI_SHIFT)) & USBC_ENDPTCTRL15_RXI_MASK)
#define USBC_ENDPTCTRL15_RXR_MASK (0x40U)
#define USBC_ENDPTCTRL15_RXR_SHIFT (6U)
/*! RXR - ws
 */
#define USBC_ENDPTCTRL15_RXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RXR_SHIFT)) & USBC_ENDPTCTRL15_RXR_MASK)
#define USBC_ENDPTCTRL15_RXE_MASK (0x80U)
#define USBC_ENDPTCTRL15_RXE_SHIFT (7U)
#define USBC_ENDPTCTRL15_RXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RXE_SHIFT)) & USBC_ENDPTCTRL15_RXE_MASK)
#define USBC_ENDPTCTRL15_RESERVED_8_MASK (0xFF00U)
#define USBC_ENDPTCTRL15_RESERVED_8_SHIFT (8U)
#define USBC_ENDPTCTRL15_RESERVED_8(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RESERVED_8_SHIFT)) & USBC_ENDPTCTRL15_RESERVED_8_MASK)
#define USBC_ENDPTCTRL15_TXS_MASK (0x10000U)
#define USBC_ENDPTCTRL15_TXS_SHIFT (16U)
#define USBC_ENDPTCTRL15_TXS(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_TXS_SHIFT)) & USBC_ENDPTCTRL15_TXS_MASK)
#define USBC_ENDPTCTRL15_TXD_MASK (0x20000U)
#define USBC_ENDPTCTRL15_TXD_SHIFT (17U)
#define USBC_ENDPTCTRL15_TXD(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_TXD_SHIFT)) & USBC_ENDPTCTRL15_TXD_MASK)
#define USBC_ENDPTCTRL15_TXT_MASK (0xC0000U)
#define USBC_ENDPTCTRL15_TXT_SHIFT (18U)
#define USBC_ENDPTCTRL15_TXT(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_TXT_SHIFT)) & USBC_ENDPTCTRL15_TXT_MASK)
#define USBC_ENDPTCTRL15_RESERVED_20_MASK (0x100000U)
#define USBC_ENDPTCTRL15_RESERVED_20_SHIFT (20U)
#define USBC_ENDPTCTRL15_RESERVED_20(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RESERVED_20_SHIFT)) & USBC_ENDPTCTRL15_RESERVED_20_MASK)
#define USBC_ENDPTCTRL15_TXI_MASK (0x200000U)
#define USBC_ENDPTCTRL15_TXI_SHIFT (21U)
#define USBC_ENDPTCTRL15_TXI(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_TXI_SHIFT)) & USBC_ENDPTCTRL15_TXI_MASK)
#define USBC_ENDPTCTRL15_TXR_MASK (0x400000U)
#define USBC_ENDPTCTRL15_TXR_SHIFT (22U)
/*! TXR - ws
 */
#define USBC_ENDPTCTRL15_TXR(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_TXR_SHIFT)) & USBC_ENDPTCTRL15_TXR_MASK)
#define USBC_ENDPTCTRL15_TXE_MASK (0x800000U)
#define USBC_ENDPTCTRL15_TXE_SHIFT (23U)
#define USBC_ENDPTCTRL15_TXE(x) (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_TXE_SHIFT)) & USBC_ENDPTCTRL15_TXE_MASK)
#define USBC_ENDPTCTRL15_RESERVED_24_MASK (0xFF000000U)
#define USBC_ENDPTCTRL15_RESERVED_24_SHIFT (24U)
#define USBC_ENDPTCTRL15_RESERVED_24(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_ENDPTCTRL15_RESERVED_24_SHIFT)) & USBC_ENDPTCTRL15_RESERVED_24_MASK)
/*! @} */

/*! @name PHY_ID -  */
/*! @{ */
#define USBC_PHY_ID_CID0_MASK (0xFFU)
#define USBC_PHY_ID_CID0_SHIFT (0U)
#define USBC_PHY_ID_CID0(x) (((uint32_t)(((uint32_t)(x)) << USBC_PHY_ID_CID0_SHIFT)) & USBC_PHY_ID_CID0_MASK)
#define USBC_PHY_ID_CID1_MASK (0xFF00U)
#define USBC_PHY_ID_CID1_SHIFT (8U)
#define USBC_PHY_ID_CID1(x) (((uint32_t)(((uint32_t)(x)) << USBC_PHY_ID_CID1_SHIFT)) & USBC_PHY_ID_CID1_MASK)
/*! @} */

/*! @name PLL_CONTROL_0 -  */
/*! @{ */
#define USBC_PLL_CONTROL_0_FBDIV_MASK (0x1FFU)
#define USBC_PLL_CONTROL_0_FBDIV_SHIFT (0U)
#define USBC_PLL_CONTROL_0_FBDIV(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_0_FBDIV_SHIFT)) & USBC_PLL_CONTROL_0_FBDIV_MASK)
#define USBC_PLL_CONTROL_0_REFDIV_MASK (0x3E00U)
#define USBC_PLL_CONTROL_0_REFDIV_SHIFT (9U)
#define USBC_PLL_CONTROL_0_REFDIV(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_0_REFDIV_SHIFT)) & USBC_PLL_CONTROL_0_REFDIV_MASK)
#define USBC_PLL_CONTROL_0_PLLVDD18_MASK (0xC000U)
#define USBC_PLL_CONTROL_0_PLLVDD18_SHIFT (14U)
#define USBC_PLL_CONTROL_0_PLLVDD18(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_0_PLLVDD18_SHIFT)) & USBC_PLL_CONTROL_0_PLLVDD18_MASK)
/*! @} */

/*! @name PLL_CONTROL_1 -  */
/*! @{ */
#define USBC_PLL_CONTROL_1_PLLCAL12_MASK (0x3U)
#define USBC_PLL_CONTROL_1_PLLCAL12_SHIFT (0U)
#define USBC_PLL_CONTROL_1_PLLCAL12(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_PLLCAL12_SHIFT)) & USBC_PLL_CONTROL_1_PLLCAL12_MASK)
#define USBC_PLL_CONTROL_1_VCOCAL_START_MASK (0x4U)
#define USBC_PLL_CONTROL_1_VCOCAL_START_SHIFT (2U)
#define USBC_PLL_CONTROL_1_VCOCAL_START(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_VCOCAL_START_SHIFT)) & USBC_PLL_CONTROL_1_VCOCAL_START_MASK)
#define USBC_PLL_CONTROL_1_CLK_BLK_EN_MASK (0x8U)
#define USBC_PLL_CONTROL_1_CLK_BLK_EN_SHIFT (3U)
#define USBC_PLL_CONTROL_1_CLK_BLK_EN(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_CLK_BLK_EN_SHIFT)) & USBC_PLL_CONTROL_1_CLK_BLK_EN_MASK)
#define USBC_PLL_CONTROL_1_KVCO_MASK (0x70U)
#define USBC_PLL_CONTROL_1_KVCO_SHIFT (4U)
#define USBC_PLL_CONTROL_1_KVCO(x) (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_KVCO_SHIFT)) & USBC_PLL_CONTROL_1_KVCO_MASK)
#define USBC_PLL_CONTROL_1_KVCO_EXT_MASK (0x80U)
#define USBC_PLL_CONTROL_1_KVCO_EXT_SHIFT (7U)
#define USBC_PLL_CONTROL_1_KVCO_EXT(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_KVCO_EXT_SHIFT)) & USBC_PLL_CONTROL_1_KVCO_EXT_MASK)
#define USBC_PLL_CONTROL_1_ICP_MASK (0x700U)
#define USBC_PLL_CONTROL_1_ICP_SHIFT (8U)
#define USBC_PLL_CONTROL_1_ICP(x) (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_ICP_SHIFT)) & USBC_PLL_CONTROL_1_ICP_MASK)
#define USBC_PLL_CONTROL_1_DLL_RESET_BLK_MASK (0x800U)
#define USBC_PLL_CONTROL_1_DLL_RESET_BLK_SHIFT (11U)
#define USBC_PLL_CONTROL_1_DLL_RESET_BLK(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_DLL_RESET_BLK_SHIFT)) & USBC_PLL_CONTROL_1_DLL_RESET_BLK_MASK)
#define USBC_PLL_CONTROL_1_PLL_LOCK_BYPASS_MASK (0x1000U)
#define USBC_PLL_CONTROL_1_PLL_LOCK_BYPASS_SHIFT (12U)
#define USBC_PLL_CONTROL_1_PLL_LOCK_BYPASS(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_PLL_LOCK_BYPASS_SHIFT)) & USBC_PLL_CONTROL_1_PLL_LOCK_BYPASS_MASK)
#define USBC_PLL_CONTROL_1_PU_PLL_MASK (0x2000U)
#define USBC_PLL_CONTROL_1_PU_PLL_SHIFT (13U)
#define USBC_PLL_CONTROL_1_PU_PLL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_PU_PLL_SHIFT)) & USBC_PLL_CONTROL_1_PU_PLL_MASK)
#define USBC_PLL_CONTROL_1_PLL_CONTRL_BY_PIN_MASK (0x4000U)
#define USBC_PLL_CONTROL_1_PLL_CONTRL_BY_PIN_SHIFT (14U)
#define USBC_PLL_CONTROL_1_PLL_CONTRL_BY_PIN(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_PLL_CONTRL_BY_PIN_SHIFT)) & USBC_PLL_CONTROL_1_PLL_CONTRL_BY_PIN_MASK)
#define USBC_PLL_CONTROL_1_PLL_READY_MASK (0x8000U)
#define USBC_PLL_CONTROL_1_PLL_READY_SHIFT (15U)
#define USBC_PLL_CONTROL_1_PLL_READY(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_PLL_CONTROL_1_PLL_READY_SHIFT)) & USBC_PLL_CONTROL_1_PLL_READY_MASK)
/*! @} */

/*! @name RESERVED_ADDR3 -  */
/*! @{ */
#define USBC_RESERVED_ADDR3_RESERVED_BIT_15_0_MASK (0xFFFFU)
#define USBC_RESERVED_ADDR3_RESERVED_BIT_15_0_SHIFT (0U)
#define USBC_RESERVED_ADDR3_RESERVED_BIT_15_0(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_RESERVED_ADDR3_RESERVED_BIT_15_0_SHIFT)) & USBC_RESERVED_ADDR3_RESERVED_BIT_15_0_MASK)
/*! @} */

/*! @name TX_CHANNEL_CONTRL_0 -  */
/*! @{ */
#define USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL_MASK (0xFU)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL_SHIFT (0U)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL_SHIFT)) & USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL_MASK)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL_MASK (0xF0U)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL_SHIFT (4U)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL_SHIFT)) & USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL_MASK)
#define USBC_TX_CHANNEL_CONTRL_0_IMPCAL_VTH_MASK (0x700U)
#define USBC_TX_CHANNEL_CONTRL_0_IMPCAL_VTH_SHIFT (8U)
#define USBC_TX_CHANNEL_CONTRL_0_IMPCAL_VTH(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_0_IMPCAL_VTH_SHIFT)) & USBC_TX_CHANNEL_CONTRL_0_IMPCAL_VTH_MASK)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL_EN_MASK (0x800U)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL_EN_SHIFT (11U)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL_EN(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL_EN_SHIFT)) & USBC_TX_CHANNEL_CONTRL_0_EXT_FS_RCAL_EN_MASK)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL_EN_MASK (0x1000U)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL_EN_SHIFT (12U)
#define USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL_EN(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL_EN_SHIFT)) & USBC_TX_CHANNEL_CONTRL_0_EXT_HS_RCAL_EN_MASK)
#define USBC_TX_CHANNEL_CONTRL_0_RCAL_START_MASK (0x2000U)
#define USBC_TX_CHANNEL_CONTRL_0_RCAL_START_SHIFT (13U)
#define USBC_TX_CHANNEL_CONTRL_0_RCAL_START(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_0_RCAL_START_SHIFT)) & USBC_TX_CHANNEL_CONTRL_0_RCAL_START_MASK)
#define USBC_TX_CHANNEL_CONTRL_0_TXDATA_BLOCK_EN_MASK (0x4000U)
#define USBC_TX_CHANNEL_CONTRL_0_TXDATA_BLOCK_EN_SHIFT (14U)
#define USBC_TX_CHANNEL_CONTRL_0_TXDATA_BLOCK_EN(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_0_TXDATA_BLOCK_EN_SHIFT)) &                                             \
     USBC_TX_CHANNEL_CONTRL_0_TXDATA_BLOCK_EN_MASK)
#define USBC_TX_CHANNEL_CONTRL_0_ND_MASK (0x8000U)
#define USBC_TX_CHANNEL_CONTRL_0_ND_SHIFT (15U)
#define USBC_TX_CHANNEL_CONTRL_0_ND(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_0_ND_SHIFT)) & USBC_TX_CHANNEL_CONTRL_0_ND_MASK)
/*! @} */

/*! @name TX_CHANNEL_CONTRL_1 -  */
/*! @{ */
#define USBC_TX_CHANNEL_CONTRL_1_CK60_PHSEL_MASK (0xFU)
#define USBC_TX_CHANNEL_CONTRL_1_CK60_PHSEL_SHIFT (0U)
#define USBC_TX_CHANNEL_CONTRL_1_CK60_PHSEL(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_1_CK60_PHSEL_SHIFT)) & USBC_TX_CHANNEL_CONTRL_1_CK60_PHSEL_MASK)
#define USBC_TX_CHANNEL_CONTRL_1_AMP_MASK (0x70U)
#define USBC_TX_CHANNEL_CONTRL_1_AMP_SHIFT (4U)
#define USBC_TX_CHANNEL_CONTRL_1_AMP(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_1_AMP_SHIFT)) & USBC_TX_CHANNEL_CONTRL_1_AMP_MASK)
#define USBC_TX_CHANNEL_CONTRL_1_LOWVDD_EN_MASK (0x80U)
#define USBC_TX_CHANNEL_CONTRL_1_LOWVDD_EN_SHIFT (7U)
#define USBC_TX_CHANNEL_CONTRL_1_LOWVDD_EN(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_1_LOWVDD_EN_SHIFT)) & USBC_TX_CHANNEL_CONTRL_1_LOWVDD_EN_MASK)
#define USBC_TX_CHANNEL_CONTRL_1_TXVDD12_MASK (0x300U)
#define USBC_TX_CHANNEL_CONTRL_1_TXVDD12_SHIFT (8U)
#define USBC_TX_CHANNEL_CONTRL_1_TXVDD12(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_1_TXVDD12_SHIFT)) & USBC_TX_CHANNEL_CONTRL_1_TXVDD12_MASK)
#define USBC_TX_CHANNEL_CONTRL_1_TXVDD15_MASK (0xC00U)
#define USBC_TX_CHANNEL_CONTRL_1_TXVDD15_SHIFT (10U)
#define USBC_TX_CHANNEL_CONTRL_1_TXVDD15(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_1_TXVDD15_SHIFT)) & USBC_TX_CHANNEL_CONTRL_1_TXVDD15_MASK)
#define USBC_TX_CHANNEL_CONTRL_1_ND_MASK (0xF000U)
#define USBC_TX_CHANNEL_CONTRL_1_ND_SHIFT (12U)
#define USBC_TX_CHANNEL_CONTRL_1_ND(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_1_ND_SHIFT)) & USBC_TX_CHANNEL_CONTRL_1_ND_MASK)
/*! @} */

/*! @name TX_CHANNEL_CONTRL_2 -  */
/*! @{ */
#define USBC_TX_CHANNEL_CONTRL_2_HSDRV_EN_MASK (0xFU)
#define USBC_TX_CHANNEL_CONTRL_2_HSDRV_EN_SHIFT (0U)
#define USBC_TX_CHANNEL_CONTRL_2_HSDRV_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_2_HSDRV_EN_SHIFT)) & USBC_TX_CHANNEL_CONTRL_2_HSDRV_EN_MASK)
#define USBC_TX_CHANNEL_CONTRL_2_FSDRV_EN_MASK (0xF0U)
#define USBC_TX_CHANNEL_CONTRL_2_FSDRV_EN_SHIFT (4U)
#define USBC_TX_CHANNEL_CONTRL_2_FSDRV_EN(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_2_FSDRV_EN_SHIFT)) & USBC_TX_CHANNEL_CONTRL_2_FSDRV_EN_MASK)
#define USBC_TX_CHANNEL_CONTRL_2_IMP_CAL_DLY_MASK (0x300U)
#define USBC_TX_CHANNEL_CONTRL_2_IMP_CAL_DLY_SHIFT (8U)
#define USBC_TX_CHANNEL_CONTRL_2_IMP_CAL_DLY(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_2_IMP_CAL_DLY_SHIFT)) & USBC_TX_CHANNEL_CONTRL_2_IMP_CAL_DLY_MASK)
#define USBC_TX_CHANNEL_CONTRL_2_DRV_SLEWRATE_MASK (0xC00U)
#define USBC_TX_CHANNEL_CONTRL_2_DRV_SLEWRATE_SHIFT (10U)
#define USBC_TX_CHANNEL_CONTRL_2_DRV_SLEWRATE(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_2_DRV_SLEWRATE_SHIFT)) & USBC_TX_CHANNEL_CONTRL_2_DRV_SLEWRATE_MASK)
#define USBC_TX_CHANNEL_CONTRL_2_ND_MASK (0xF000U)
#define USBC_TX_CHANNEL_CONTRL_2_ND_SHIFT (12U)
#define USBC_TX_CHANNEL_CONTRL_2_ND(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_TX_CHANNEL_CONTRL_2_ND_SHIFT)) & USBC_TX_CHANNEL_CONTRL_2_ND_MASK)
/*! @} */

/*! @name RESERVED_ADDR7 -  */
/*! @{ */
#define USBC_RESERVED_ADDR7_RESERVED_BIT_15_0_MASK (0xFFFFU)
#define USBC_RESERVED_ADDR7_RESERVED_BIT_15_0_SHIFT (0U)
#define USBC_RESERVED_ADDR7_RESERVED_BIT_15_0(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_RESERVED_ADDR7_RESERVED_BIT_15_0_SHIFT)) & USBC_RESERVED_ADDR7_RESERVED_BIT_15_0_MASK)
/*! @} */

/*! @name RX_CHANNEL_CONTRL_0 -  */
/*! @{ */
#define USBC_RX_CHANNEL_CONTRL_0_INTPI_MASK (0x3U)
#define USBC_RX_CHANNEL_CONTRL_0_INTPI_SHIFT (0U)
#define USBC_RX_CHANNEL_CONTRL_0_INTPI(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_0_INTPI_SHIFT)) & USBC_RX_CHANNEL_CONTRL_0_INTPI_MASK)
#define USBC_RX_CHANNEL_CONTRL_0_LPF_COEF_MASK (0xCU)
#define USBC_RX_CHANNEL_CONTRL_0_LPF_COEF_SHIFT (2U)
#define USBC_RX_CHANNEL_CONTRL_0_LPF_COEF(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_0_LPF_COEF_SHIFT)) & USBC_RX_CHANNEL_CONTRL_0_LPF_COEF_MASK)
#define USBC_RX_CHANNEL_CONTRL_0_SQ_THRESH_MASK (0xF0U)
#define USBC_RX_CHANNEL_CONTRL_0_SQ_THRESH_SHIFT (4U)
#define USBC_RX_CHANNEL_CONTRL_0_SQ_THRESH(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_0_SQ_THRESH_SHIFT)) & USBC_RX_CHANNEL_CONTRL_0_SQ_THRESH_MASK)
#define USBC_RX_CHANNEL_CONTRL_0_DISCON_THRESH_MASK (0x300U)
#define USBC_RX_CHANNEL_CONTRL_0_DISCON_THRESH_SHIFT (8U)
#define USBC_RX_CHANNEL_CONTRL_0_DISCON_THRESH(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_0_DISCON_THRESH_SHIFT)) & USBC_RX_CHANNEL_CONTRL_0_DISCON_THRESH_MASK)
#define USBC_RX_CHANNEL_CONTRL_0_SQ_LENGTH_MASK (0xC00U)
#define USBC_RX_CHANNEL_CONTRL_0_SQ_LENGTH_SHIFT (10U)
#define USBC_RX_CHANNEL_CONTRL_0_SQ_LENGTH(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_0_SQ_LENGTH_SHIFT)) & USBC_RX_CHANNEL_CONTRL_0_SQ_LENGTH_MASK)
#define USBC_RX_CHANNEL_CONTRL_0_ACQ_LENGTH_MASK (0x3000U)
#define USBC_RX_CHANNEL_CONTRL_0_ACQ_LENGTH_SHIFT (12U)
#define USBC_RX_CHANNEL_CONTRL_0_ACQ_LENGTH(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_0_ACQ_LENGTH_SHIFT)) & USBC_RX_CHANNEL_CONTRL_0_ACQ_LENGTH_MASK)
#define USBC_RX_CHANNEL_CONTRL_0_USQ_LENGTH_MASK (0x4000U)
#define USBC_RX_CHANNEL_CONTRL_0_USQ_LENGTH_SHIFT (14U)
#define USBC_RX_CHANNEL_CONTRL_0_USQ_LENGTH(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_0_USQ_LENGTH_SHIFT)) & USBC_RX_CHANNEL_CONTRL_0_USQ_LENGTH_MASK)
#define USBC_RX_CHANNEL_CONTRL_0_PHASE_FREEZE_DLY_MASK (0x8000U)
#define USBC_RX_CHANNEL_CONTRL_0_PHASE_FREEZE_DLY_SHIFT (15U)
#define USBC_RX_CHANNEL_CONTRL_0_PHASE_FREEZE_DLY(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_0_PHASE_FREEZE_DLY_SHIFT)) &                                            \
     USBC_RX_CHANNEL_CONTRL_0_PHASE_FREEZE_DLY_MASK)
/*! @} */

/*! @name RX_CHANNEL_CONTRL_1 -  */
/*! @{ */
#define USBC_RX_CHANNEL_CONTRL_1_S2TO3_DLY_SEL_MASK (0x3U)
#define USBC_RX_CHANNEL_CONTRL_1_S2TO3_DLY_SEL_SHIFT (0U)
#define USBC_RX_CHANNEL_CONTRL_1_S2TO3_DLY_SEL(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_S2TO3_DLY_SEL_SHIFT)) & USBC_RX_CHANNEL_CONTRL_1_S2TO3_DLY_SEL_MASK)
#define USBC_RX_CHANNEL_CONTRL_1_CDR_FASTLOCK_EN_MASK (0x4U)
#define USBC_RX_CHANNEL_CONTRL_1_CDR_FASTLOCK_EN_SHIFT (2U)
#define USBC_RX_CHANNEL_CONTRL_1_CDR_FASTLOCK_EN(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_CDR_FASTLOCK_EN_SHIFT)) &                                             \
     USBC_RX_CHANNEL_CONTRL_1_CDR_FASTLOCK_EN_MASK)
#define USBC_RX_CHANNEL_CONTRL_1_CDR_COEF_SEL_MASK (0x8U)
#define USBC_RX_CHANNEL_CONTRL_1_CDR_COEF_SEL_SHIFT (3U)
#define USBC_RX_CHANNEL_CONTRL_1_CDR_COEF_SEL(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_CDR_COEF_SEL_SHIFT)) & USBC_RX_CHANNEL_CONTRL_1_CDR_COEF_SEL_MASK)
#define USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_SEL_MASK (0x30U)
#define USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_SEL_SHIFT (4U)
#define USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_SEL(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_SEL_SHIFT)) & USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_SEL_MASK)
#define USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_LENGTH_MASK (0xC0U)
#define USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_LENGTH_SHIFT (6U)
#define USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_LENGTH(x)                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_LENGTH_SHIFT)) &                                         \
     USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_LENGTH_MASK)
#define USBC_RX_CHANNEL_CONTRL_1_CAP_SEL_MASK (0x700U)
#define USBC_RX_CHANNEL_CONTRL_1_CAP_SEL_SHIFT (8U)
#define USBC_RX_CHANNEL_CONTRL_1_CAP_SEL(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_CAP_SEL_SHIFT)) & USBC_RX_CHANNEL_CONTRL_1_CAP_SEL_MASK)
#define USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_EN_MASK (0x800U)
#define USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_EN_SHIFT (11U)
#define USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_EN(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_EN_SHIFT)) & USBC_RX_CHANNEL_CONTRL_1_EDGE_DET_EN_MASK)
#define USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_EN_MASK (0x1000U)
#define USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_EN_SHIFT (12U)
#define USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_EN(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_EN_SHIFT)) &                                             \
     USBC_RX_CHANNEL_CONTRL_1_RXDATA_BLOCK_EN_MASK)
#define USBC_RX_CHANNEL_CONTRL_1_EARLY_VOS_ON_EN_MASK (0x2000U)
#define USBC_RX_CHANNEL_CONTRL_1_EARLY_VOS_ON_EN_SHIFT (13U)
#define USBC_RX_CHANNEL_CONTRL_1_EARLY_VOS_ON_EN(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_EARLY_VOS_ON_EN_SHIFT)) &                                             \
     USBC_RX_CHANNEL_CONTRL_1_EARLY_VOS_ON_EN_MASK)
#define USBC_RX_CHANNEL_CONTRL_1_ND_MASK (0xC000U)
#define USBC_RX_CHANNEL_CONTRL_1_ND_SHIFT (14U)
#define USBC_RX_CHANNEL_CONTRL_1_ND(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_1_ND_SHIFT)) & USBC_RX_CHANNEL_CONTRL_1_ND_MASK)
/*! @} */

/*! @name RX_CHANNEL_CONTRL_2 -  */
/*! @{ */
#define USBC_RX_CHANNEL_CONTRL_2_RXVDD12_MASK (0x3U)
#define USBC_RX_CHANNEL_CONTRL_2_RXVDD12_SHIFT (0U)
#define USBC_RX_CHANNEL_CONTRL_2_RXVDD12(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_2_RXVDD12_SHIFT)) & USBC_RX_CHANNEL_CONTRL_2_RXVDD12_MASK)
#define USBC_RX_CHANNEL_CONTRL_2_RXVDD18_MASK (0xCU)
#define USBC_RX_CHANNEL_CONTRL_2_RXVDD18_SHIFT (2U)
#define USBC_RX_CHANNEL_CONTRL_2_RXVDD18(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_2_RXVDD18_SHIFT)) & USBC_RX_CHANNEL_CONTRL_2_RXVDD18_MASK)
#define USBC_RX_CHANNEL_CONTRL_2_SQ_ALWAYS_ON_MASK (0x10U)
#define USBC_RX_CHANNEL_CONTRL_2_SQ_ALWAYS_ON_SHIFT (4U)
#define USBC_RX_CHANNEL_CONTRL_2_SQ_ALWAYS_ON(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_2_SQ_ALWAYS_ON_SHIFT)) & USBC_RX_CHANNEL_CONTRL_2_SQ_ALWAYS_ON_MASK)
#define USBC_RX_CHANNEL_CONTRL_2_SQ_BUFFER_EN_MASK (0x20U)
#define USBC_RX_CHANNEL_CONTRL_2_SQ_BUFFER_EN_SHIFT (5U)
#define USBC_RX_CHANNEL_CONTRL_2_SQ_BUFFER_EN(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_2_SQ_BUFFER_EN_SHIFT)) & USBC_RX_CHANNEL_CONTRL_2_SQ_BUFFER_EN_MASK)
#define USBC_RX_CHANNEL_CONTRL_2_SAMPLER_CTRL_MASK (0x40U)
#define USBC_RX_CHANNEL_CONTRL_2_SAMPLER_CTRL_SHIFT (6U)
#define USBC_RX_CHANNEL_CONTRL_2_SAMPLER_CTRL(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_2_SAMPLER_CTRL_SHIFT)) & USBC_RX_CHANNEL_CONTRL_2_SAMPLER_CTRL_MASK)
#define USBC_RX_CHANNEL_CONTRL_2_SQ_CM_SEL_MASK (0x80U)
#define USBC_RX_CHANNEL_CONTRL_2_SQ_CM_SEL_SHIFT (7U)
#define USBC_RX_CHANNEL_CONTRL_2_SQ_CM_SEL(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_2_SQ_CM_SEL_SHIFT)) & USBC_RX_CHANNEL_CONTRL_2_SQ_CM_SEL_MASK)
#define USBC_RX_CHANNEL_CONTRL_2_USQ_FILTER_MASK (0x100U)
#define USBC_RX_CHANNEL_CONTRL_2_USQ_FILTER_SHIFT (8U)
#define USBC_RX_CHANNEL_CONTRL_2_USQ_FILTER(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_2_USQ_FILTER_SHIFT)) & USBC_RX_CHANNEL_CONTRL_2_USQ_FILTER_MASK)
#define USBC_RX_CHANNEL_CONTRL_2_ND_MASK (0xFE00U)
#define USBC_RX_CHANNEL_CONTRL_2_ND_SHIFT (9U)
#define USBC_RX_CHANNEL_CONTRL_2_ND(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_RX_CHANNEL_CONTRL_2_ND_SHIFT)) & USBC_RX_CHANNEL_CONTRL_2_ND_MASK)
/*! @} */

/*! @name ANA_CONTRL_0 -  */
/*! @{ */
#define USBC_ANA_CONTRL_0_IPTAT_SEL_MASK (0x7U)
#define USBC_ANA_CONTRL_0_IPTAT_SEL_SHIFT (0U)
#define USBC_ANA_CONTRL_0_IPTAT_SEL(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_0_IPTAT_SEL_SHIFT)) & USBC_ANA_CONTRL_0_IPTAT_SEL_MASK)
#define USBC_ANA_CONTRL_0_VDD_USB2_DIG_TOP_SEL_MASK (0x8U)
#define USBC_ANA_CONTRL_0_VDD_USB2_DIG_TOP_SEL_SHIFT (3U)
#define USBC_ANA_CONTRL_0_VDD_USB2_DIG_TOP_SEL(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_0_VDD_USB2_DIG_TOP_SEL_SHIFT)) & USBC_ANA_CONTRL_0_VDD_USB2_DIG_TOP_SEL_MASK)
#define USBC_ANA_CONTRL_0_TOPVDD18_MASK (0x30U)
#define USBC_ANA_CONTRL_0_TOPVDD18_SHIFT (4U)
#define USBC_ANA_CONTRL_0_TOPVDD18(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_0_TOPVDD18_SHIFT)) & USBC_ANA_CONTRL_0_TOPVDD18_MASK)
#define USBC_ANA_CONTRL_0_DIG_SEL_MASK (0xC0U)
#define USBC_ANA_CONTRL_0_DIG_SEL_SHIFT (6U)
#define USBC_ANA_CONTRL_0_DIG_SEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_0_DIG_SEL_SHIFT)) & USBC_ANA_CONTRL_0_DIG_SEL_MASK)
#define USBC_ANA_CONTRL_0_BG_VSEL_MASK (0x300U)
#define USBC_ANA_CONTRL_0_BG_VSEL_SHIFT (8U)
#define USBC_ANA_CONTRL_0_BG_VSEL(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_0_BG_VSEL_SHIFT)) & USBC_ANA_CONTRL_0_BG_VSEL_MASK)
#define USBC_ANA_CONTRL_0_ND_MASK (0xFC00U)
#define USBC_ANA_CONTRL_0_ND_SHIFT (10U)
#define USBC_ANA_CONTRL_0_ND(x) (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_0_ND_SHIFT)) & USBC_ANA_CONTRL_0_ND_MASK)
/*! @} */

/*! @name ANA_CONTRL_1 -  */
/*! @{ */
#define USBC_ANA_CONTRL_1_TESTMON_ANA_MASK (0x3FU)
#define USBC_ANA_CONTRL_1_TESTMON_ANA_SHIFT (0U)
#define USBC_ANA_CONTRL_1_TESTMON_ANA(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_1_TESTMON_ANA_SHIFT)) & USBC_ANA_CONTRL_1_TESTMON_ANA_MASK)
#define USBC_ANA_CONTRL_1_STRESS_TEST_MODE_MASK (0x40U)
#define USBC_ANA_CONTRL_1_STRESS_TEST_MODE_SHIFT (6U)
#define USBC_ANA_CONTRL_1_STRESS_TEST_MODE(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_1_STRESS_TEST_MODE_SHIFT)) & USBC_ANA_CONTRL_1_STRESS_TEST_MODE_MASK)
#define USBC_ANA_CONTRL_1_R_ROTATE_SEL_MASK (0x80U)
#define USBC_ANA_CONTRL_1_R_ROTATE_SEL_SHIFT (7U)
#define USBC_ANA_CONTRL_1_R_ROTATE_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_1_R_ROTATE_SEL_SHIFT)) & USBC_ANA_CONTRL_1_R_ROTATE_SEL_MASK)
#define USBC_ANA_CONTRL_1_V2I_MASK (0x700U)
#define USBC_ANA_CONTRL_1_V2I_SHIFT (8U)
#define USBC_ANA_CONTRL_1_V2I(x) (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_1_V2I_SHIFT)) & USBC_ANA_CONTRL_1_V2I_MASK)
#define USBC_ANA_CONTRL_1_V2I_EXT_MASK (0x800U)
#define USBC_ANA_CONTRL_1_V2I_EXT_SHIFT (11U)
#define USBC_ANA_CONTRL_1_V2I_EXT(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_1_V2I_EXT_SHIFT)) & USBC_ANA_CONTRL_1_V2I_EXT_MASK)
#define USBC_ANA_CONTRL_1_SEL_LPFR_MASK (0x1000U)
#define USBC_ANA_CONTRL_1_SEL_LPFR_SHIFT (12U)
#define USBC_ANA_CONTRL_1_SEL_LPFR(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_1_SEL_LPFR_SHIFT)) & USBC_ANA_CONTRL_1_SEL_LPFR_MASK)
#define USBC_ANA_CONTRL_1_ANA_CONTRL_BY_PIN_MASK (0x2000U)
#define USBC_ANA_CONTRL_1_ANA_CONTRL_BY_PIN_SHIFT (13U)
#define USBC_ANA_CONTRL_1_ANA_CONTRL_BY_PIN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_1_ANA_CONTRL_BY_PIN_SHIFT)) & USBC_ANA_CONTRL_1_ANA_CONTRL_BY_PIN_MASK)
#define USBC_ANA_CONTRL_1_PU_ANA_MASK (0x4000U)
#define USBC_ANA_CONTRL_1_PU_ANA_SHIFT (14U)
#define USBC_ANA_CONTRL_1_PU_ANA(x)                                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_1_PU_ANA_SHIFT)) & USBC_ANA_CONTRL_1_PU_ANA_MASK)
#define USBC_ANA_CONTRL_1_ND_MASK (0x8000U)
#define USBC_ANA_CONTRL_1_ND_SHIFT (15U)
#define USBC_ANA_CONTRL_1_ND(x) (((uint32_t)(((uint32_t)(x)) << USBC_ANA_CONTRL_1_ND_SHIFT)) & USBC_ANA_CONTRL_1_ND_MASK)
/*! @} */

/*! @name RESERVED_ADDR_C -  */
/*! @{ */
#define USBC_RESERVED_ADDR_C_RESERVED_BIT_15_0_MASK (0xFFFFU)
#define USBC_RESERVED_ADDR_C_RESERVED_BIT_15_0_SHIFT (0U)
#define USBC_RESERVED_ADDR_C_RESERVED_BIT_15_0(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << USBC_RESERVED_ADDR_C_RESERVED_BIT_15_0_SHIFT)) & USBC_RESERVED_ADDR_C_RESERVED_BIT_15_0_MASK)
/*! @} */

/*! @name DIGITAL_CONTROL_0 -  */
/*! @{ */
#define USBC_DIGITAL_CONTROL_0_FIFO_FILL_NUM_MASK (0xFU)
#define USBC_DIGITAL_CONTROL_0_FIFO_FILL_NUM_SHIFT (0U)
#define USBC_DIGITAL_CONTROL_0_FIFO_FILL_NUM(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_FIFO_FILL_NUM_SHIFT)) & USBC_DIGITAL_CONTROL_0_FIFO_FILL_NUM_MASK)
#define USBC_DIGITAL_CONTROL_0_SYNC_NUM_MASK (0x30U)
#define USBC_DIGITAL_CONTROL_0_SYNC_NUM_SHIFT (4U)
#define USBC_DIGITAL_CONTROL_0_SYNC_NUM(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_SYNC_NUM_SHIFT)) & USBC_DIGITAL_CONTROL_0_SYNC_NUM_MASK)
#define USBC_DIGITAL_CONTROL_0_HS_DRIBBLE_EN_MASK (0x40U)
#define USBC_DIGITAL_CONTROL_0_HS_DRIBBLE_EN_SHIFT (6U)
#define USBC_DIGITAL_CONTROL_0_HS_DRIBBLE_EN(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_HS_DRIBBLE_EN_SHIFT)) & USBC_DIGITAL_CONTROL_0_HS_DRIBBLE_EN_MASK)
#define USBC_DIGITAL_CONTROL_0_CLK_SUSPEND_EN_MASK (0x80U)
#define USBC_DIGITAL_CONTROL_0_CLK_SUSPEND_EN_SHIFT (7U)
#define USBC_DIGITAL_CONTROL_0_CLK_SUSPEND_EN(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_CLK_SUSPEND_EN_SHIFT)) & USBC_DIGITAL_CONTROL_0_CLK_SUSPEND_EN_MASK)
#define USBC_DIGITAL_CONTROL_0_SYNCDET_WINDOW_EN_MASK (0x100U)
#define USBC_DIGITAL_CONTROL_0_SYNCDET_WINDOW_EN_SHIFT (8U)
#define USBC_DIGITAL_CONTROL_0_SYNCDET_WINDOW_EN(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_SYNCDET_WINDOW_EN_SHIFT)) &                                             \
     USBC_DIGITAL_CONTROL_0_SYNCDET_WINDOW_EN_MASK)
#define USBC_DIGITAL_CONTROL_0_EARLY_TX_EN_MASK (0x200U)
#define USBC_DIGITAL_CONTROL_0_EARLY_TX_EN_SHIFT (9U)
#define USBC_DIGITAL_CONTROL_0_EARLY_TX_EN(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_EARLY_TX_EN_SHIFT)) & USBC_DIGITAL_CONTROL_0_EARLY_TX_EN_MASK)
#define USBC_DIGITAL_CONTROL_0_FORCE_END_EN_MASK (0x400U)
#define USBC_DIGITAL_CONTROL_0_FORCE_END_EN_SHIFT (10U)
#define USBC_DIGITAL_CONTROL_0_FORCE_END_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_FORCE_END_EN_SHIFT)) & USBC_DIGITAL_CONTROL_0_FORCE_END_EN_MASK)
#define USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL0_MASK (0x800U)
#define USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL0_SHIFT (11U)
#define USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL0(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL0_SHIFT)) & USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL0_MASK)
#define USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL1_MASK (0x1000U)
#define USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL1_SHIFT (12U)
#define USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL1(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL1_SHIFT)) & USBC_DIGITAL_CONTROL_0_HOST_DISCON_SEL1_MASK)
#define USBC_DIGITAL_CONTROL_0_FS_EOP_MODE_MASK (0x2000U)
#define USBC_DIGITAL_CONTROL_0_FS_EOP_MODE_SHIFT (13U)
#define USBC_DIGITAL_CONTROL_0_FS_EOP_MODE(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_FS_EOP_MODE_SHIFT)) & USBC_DIGITAL_CONTROL_0_FS_EOP_MODE_MASK)
#define USBC_DIGITAL_CONTROL_0_FIFO_OV_MASK (0x4000U)
#define USBC_DIGITAL_CONTROL_0_FIFO_OV_SHIFT (14U)
#define USBC_DIGITAL_CONTROL_0_FIFO_OV(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_FIFO_OV_SHIFT)) & USBC_DIGITAL_CONTROL_0_FIFO_OV_MASK)
#define USBC_DIGITAL_CONTROL_0_FIFO_UF_MASK (0x8000U)
#define USBC_DIGITAL_CONTROL_0_FIFO_UF_SHIFT (15U)
#define USBC_DIGITAL_CONTROL_0_FIFO_UF(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_0_FIFO_UF_SHIFT)) & USBC_DIGITAL_CONTROL_0_FIFO_UF_MASK)
/*! @} */

/*! @name DIGITAL_CONTROL_1 -  */
/*! @{ */
#define USBC_DIGITAL_CONTROL_1_MON_SEL_MASK (0x3FU)
#define USBC_DIGITAL_CONTROL_1_MON_SEL_SHIFT (0U)
#define USBC_DIGITAL_CONTROL_1_MON_SEL(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_MON_SEL_SHIFT)) & USBC_DIGITAL_CONTROL_1_MON_SEL_MASK)
#define USBC_DIGITAL_CONTROL_1_SQ_RST_RX_MASK (0x40U)
#define USBC_DIGITAL_CONTROL_1_SQ_RST_RX_SHIFT (6U)
#define USBC_DIGITAL_CONTROL_1_SQ_RST_RX(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_SQ_RST_RX_SHIFT)) & USBC_DIGITAL_CONTROL_1_SQ_RST_RX_MASK)
#define USBC_DIGITAL_CONTROL_1_SYNC_IGNORE_SQ_MASK (0x80U)
#define USBC_DIGITAL_CONTROL_1_SYNC_IGNORE_SQ_SHIFT (7U)
#define USBC_DIGITAL_CONTROL_1_SYNC_IGNORE_SQ(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_SYNC_IGNORE_SQ_SHIFT)) & USBC_DIGITAL_CONTROL_1_SYNC_IGNORE_SQ_MASK)
#define USBC_DIGITAL_CONTROL_1_DM_PULLDOWN_MASK (0x100U)
#define USBC_DIGITAL_CONTROL_1_DM_PULLDOWN_SHIFT (8U)
#define USBC_DIGITAL_CONTROL_1_DM_PULLDOWN(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_DM_PULLDOWN_SHIFT)) & USBC_DIGITAL_CONTROL_1_DM_PULLDOWN_MASK)
#define USBC_DIGITAL_CONTROL_1_DP_PULLDOWN_MASK (0x200U)
#define USBC_DIGITAL_CONTROL_1_DP_PULLDOWN_SHIFT (9U)
#define USBC_DIGITAL_CONTROL_1_DP_PULLDOWN(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_DP_PULLDOWN_SHIFT)) & USBC_DIGITAL_CONTROL_1_DP_PULLDOWN_MASK)
#define USBC_DIGITAL_CONTROL_1_ARC_DPDM_MODE_MASK (0x400U)
#define USBC_DIGITAL_CONTROL_1_ARC_DPDM_MODE_SHIFT (10U)
#define USBC_DIGITAL_CONTROL_1_ARC_DPDM_MODE(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_ARC_DPDM_MODE_SHIFT)) & USBC_DIGITAL_CONTROL_1_ARC_DPDM_MODE_MASK)
#define USBC_DIGITAL_CONTROL_1_EXT_TX_CLK_SEL_MASK (0x800U)
#define USBC_DIGITAL_CONTROL_1_EXT_TX_CLK_SEL_SHIFT (11U)
#define USBC_DIGITAL_CONTROL_1_EXT_TX_CLK_SEL(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_EXT_TX_CLK_SEL_SHIFT)) & USBC_DIGITAL_CONTROL_1_EXT_TX_CLK_SEL_MASK)
#define USBC_DIGITAL_CONTROL_1_CLK_OUT_SEL_MASK (0x1000U)
#define USBC_DIGITAL_CONTROL_1_CLK_OUT_SEL_SHIFT (12U)
#define USBC_DIGITAL_CONTROL_1_CLK_OUT_SEL(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_CLK_OUT_SEL_SHIFT)) & USBC_DIGITAL_CONTROL_1_CLK_OUT_SEL_MASK)
#define USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE_MASK (0x2000U)
#define USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE_SHIFT (13U)
#define USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE_SHIFT)) & USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE_MASK)
#define USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE1_MASK (0x4000U)
#define USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE1_SHIFT (14U)
#define USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE1(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE1_SHIFT)) &                                             \
     USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE1_MASK)
#define USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE2_MASK (0x8000U)
#define USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE2_SHIFT (15U)
#define USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE2(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE2_SHIFT)) &                                             \
     USBC_DIGITAL_CONTROL_1_FS_RX_ERROR_MODE2_MASK)
/*! @} */

/*! @name DIGITAL_CONTROL_2 -  */
/*! @{ */
#define USBC_DIGITAL_CONTROL_2_FS_HDL_OPMD_MASK (0x1U)
#define USBC_DIGITAL_CONTROL_2_FS_HDL_OPMD_SHIFT (0U)
#define USBC_DIGITAL_CONTROL_2_FS_HDL_OPMD(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_2_FS_HDL_OPMD_SHIFT)) & USBC_DIGITAL_CONTROL_2_FS_HDL_OPMD_MASK)
#define USBC_DIGITAL_CONTROL_2_HS_HDL_SYNC_MASK (0x2U)
#define USBC_DIGITAL_CONTROL_2_HS_HDL_SYNC_SHIFT (1U)
#define USBC_DIGITAL_CONTROL_2_HS_HDL_SYNC(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_2_HS_HDL_SYNC_SHIFT)) & USBC_DIGITAL_CONTROL_2_HS_HDL_SYNC_MASK)
#define USBC_DIGITAL_CONTROL_2_ALIGN_FS_OUTEN_MASK (0x4U)
#define USBC_DIGITAL_CONTROL_2_ALIGN_FS_OUTEN_SHIFT (2U)
#define USBC_DIGITAL_CONTROL_2_ALIGN_FS_OUTEN(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_2_ALIGN_FS_OUTEN_SHIFT)) & USBC_DIGITAL_CONTROL_2_ALIGN_FS_OUTEN_MASK)
#define USBC_DIGITAL_CONTROL_2_DISABLE_EL16_MASK (0x8U)
#define USBC_DIGITAL_CONTROL_2_DISABLE_EL16_SHIFT (3U)
#define USBC_DIGITAL_CONTROL_2_DISABLE_EL16(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_2_DISABLE_EL16_SHIFT)) & USBC_DIGITAL_CONTROL_2_DISABLE_EL16_MASK)
#define USBC_DIGITAL_CONTROL_2_NOVBUS_DPDM00_MASK (0x10U)
#define USBC_DIGITAL_CONTROL_2_NOVBUS_DPDM00_SHIFT (4U)
#define USBC_DIGITAL_CONTROL_2_NOVBUS_DPDM00(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_2_NOVBUS_DPDM00_SHIFT)) & USBC_DIGITAL_CONTROL_2_NOVBUS_DPDM00_MASK)
#define USBC_DIGITAL_CONTROL_2_LONG_EOP_MASK (0x20U)
#define USBC_DIGITAL_CONTROL_2_LONG_EOP_SHIFT (5U)
#define USBC_DIGITAL_CONTROL_2_LONG_EOP(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_2_LONG_EOP_SHIFT)) & USBC_DIGITAL_CONTROL_2_LONG_EOP_MASK)
#define USBC_DIGITAL_CONTROL_2_ND_MASK (0xC0U)
#define USBC_DIGITAL_CONTROL_2_ND_SHIFT (6U)
#define USBC_DIGITAL_CONTROL_2_ND(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_2_ND_SHIFT)) & USBC_DIGITAL_CONTROL_2_ND_MASK)
#define USBC_DIGITAL_CONTROL_2_PAD_STRENGTH_MASK (0x1F00U)
#define USBC_DIGITAL_CONTROL_2_PAD_STRENGTH_SHIFT (8U)
#define USBC_DIGITAL_CONTROL_2_PAD_STRENGTH(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_2_PAD_STRENGTH_SHIFT)) & USBC_DIGITAL_CONTROL_2_PAD_STRENGTH_MASK)
#define USBC_DIGITAL_CONTROL_2_ND_15_13_MASK (0xE000U)
#define USBC_DIGITAL_CONTROL_2_ND_15_13_SHIFT (13U)
#define USBC_DIGITAL_CONTROL_2_ND_15_13(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << USBC_DIGITAL_CONTROL_2_ND_15_13_SHIFT)) & USBC_DIGITAL_CONTROL_2_ND_15_13_MASK)
/*! @} */

/*! @name RESERVED_ADDR_12H -  */
/*! @{ */
#define USBC_RESERVED_ADDR_12H_RESERVED_BIT_15_0_MASK (0xFFFFU)
#define USBC_RESERVED_ADDR_12H_RESERVED_BIT_15_0_SHIFT (0U)
#define USBC_RESERVED_ADDR_12H_RESERVED_BIT_15_0(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_RESERVED_ADDR_12H_RESERVED_BIT_15_0_SHIFT)) &                                             \
     USBC_RESERVED_ADDR_12H_RESERVED_BIT_15_0_MASK)
/*! @} */

/*! @name TEST_CONTRL_AND_STATUS_0 -  */
/*! @{ */
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_TX_PATTERN_MASK (0xFFU)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_TX_PATTERN_SHIFT (0U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_TX_PATTERN(x)                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_0_TEST_TX_PATTERN_SHIFT)) &                                        \
     USBC_TEST_CONTRL_AND_STATUS_0_TEST_TX_PATTERN_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_MODE_2_0_MASK (0x700U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_MODE_2_0_SHIFT (8U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_MODE_2_0(x)                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_0_TEST_MODE_2_0_SHIFT)) &                                          \
     USBC_TEST_CONTRL_AND_STATUS_0_TEST_MODE_2_0_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_BYPASS_MASK (0x800U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_BYPASS_SHIFT (11U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_BYPASS(x)                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_0_TEST_BYPASS_SHIFT)) &                                            \
     USBC_TEST_CONTRL_AND_STATUS_0_TEST_BYPASS_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_LENGTH_1_0_MASK (0x3000U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_LENGTH_1_0_SHIFT (12U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_LENGTH_1_0(x)                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_0_TEST_LENGTH_1_0_SHIFT)) &                                        \
     USBC_TEST_CONTRL_AND_STATUS_0_TEST_LENGTH_1_0_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_ANA_LPBK_MASK (0x4000U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_ANA_LPBK_SHIFT (14U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_ANA_LPBK(x)                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_0_TEST_ANA_LPBK_SHIFT)) &                                          \
     USBC_TEST_CONTRL_AND_STATUS_0_TEST_ANA_LPBK_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_DIG_LPBK_MASK (0x8000U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_DIG_LPBK_SHIFT (15U)
#define USBC_TEST_CONTRL_AND_STATUS_0_TEST_DIG_LPBK(x)                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_0_TEST_DIG_LPBK_SHIFT)) &                                          \
     USBC_TEST_CONTRL_AND_STATUS_0_TEST_DIG_LPBK_MASK)
/*! @} */

/*! @name TEST_CONTRL_AND_STATUS_1 -  */
/*! @{ */
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_XCVR_SELECT_MASK (0x3U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_XCVR_SELECT_SHIFT (0U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_XCVR_SELECT(x)                                                                          \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_XCVR_SELECT_SHIFT)) &                                       \
     USBC_TEST_CONTRL_AND_STATUS_1_TEST_XCVR_SELECT_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_OP_MODE_MASK (0xCU)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_OP_MODE_SHIFT (2U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_OP_MODE(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_OP_MODE_SHIFT)) &                                           \
     USBC_TEST_CONTRL_AND_STATUS_1_TEST_OP_MODE_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_TERM_SELECT_MASK (0x10U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_TERM_SELECT_SHIFT (4U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_TERM_SELECT(x)                                                                          \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_TERM_SELECT_SHIFT)) &                                       \
     USBC_TEST_CONTRL_AND_STATUS_1_TEST_TERM_SELECT_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_TX_BITSTUFF_EN_MASK (0x20U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_TX_BITSTUFF_EN_SHIFT (5U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_TX_BITSTUFF_EN(x)                                                                       \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_TX_BITSTUFF_EN_SHIFT)) &                                    \
     USBC_TEST_CONTRL_AND_STATUS_1_TEST_TX_BITSTUFF_EN_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_SUSPENDM_MASK (0x40U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_SUSPENDM_SHIFT (6U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_SUSPENDM(x)                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_SUSPENDM_SHIFT)) &                                          \
     USBC_TEST_CONTRL_AND_STATUS_1_TEST_SUSPENDM_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_UTMI_SEL_MASK (0x80U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_UTMI_SEL_SHIFT (7U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_UTMI_SEL(x)                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_UTMI_SEL_SHIFT)) &                                          \
     USBC_TEST_CONTRL_AND_STATUS_1_TEST_UTMI_SEL_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_SKIP_2_0_MASK (0x700U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_SKIP_2_0_SHIFT (8U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_SKIP_2_0(x)                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_SKIP_2_0_SHIFT)) &                                          \
     USBC_TEST_CONTRL_AND_STATUS_1_TEST_SKIP_2_0_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_ND_MASK (0x800U)
#define USBC_TEST_CONTRL_AND_STATUS_1_ND_SHIFT (11U)
#define USBC_TEST_CONTRL_AND_STATUS_1_ND(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_ND_SHIFT)) & USBC_TEST_CONTRL_AND_STATUS_1_ND_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_RESET_MASK (0x1000U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_RESET_SHIFT (12U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_RESET(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_RESET_SHIFT)) &                                             \
     USBC_TEST_CONTRL_AND_STATUS_1_TEST_RESET_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_EN_MASK (0x2000U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_EN_SHIFT (13U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_EN(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_EN_SHIFT)) & USBC_TEST_CONTRL_AND_STATUS_1_TEST_EN_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_FLAG_MASK (0x4000U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_FLAG_SHIFT (14U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_FLAG(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_FLAG_SHIFT)) & USBC_TEST_CONTRL_AND_STATUS_1_TEST_FLAG_MASK)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_DONE_MASK (0x8000U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_DONE_SHIFT (15U)
#define USBC_TEST_CONTRL_AND_STATUS_1_TEST_DONE(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << USBC_TEST_CONTRL_AND_STATUS_1_TEST_DONE_SHIFT)) & USBC_TEST_CONTRL_AND_STATUS_1_TEST_DONE_MASK)
/*! @} */

/*! @name RESERVED_ADDR_15H -  */
/*! @{ */
#define USBC_RESERVED_ADDR_15H_RESERVED_BIT_15_0_MASK (0xFFFFU)
#define USBC_RESERVED_ADDR_15H_RESERVED_BIT_15_0_SHIFT (0U)
#define USBC_RESERVED_ADDR_15H_RESERVED_BIT_15_0(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_RESERVED_ADDR_15H_RESERVED_BIT_15_0_SHIFT)) &                                             \
     USBC_RESERVED_ADDR_15H_RESERVED_BIT_15_0_MASK)
/*! @} */

/*! @name PHY_REG_CHGDTC_CONTRL -  */
/*! @{ */
#define USBC_PHY_REG_CHGDTC_CONTRL_TESTMON_CHRGDTC_MASK (0x3U)
#define USBC_PHY_REG_CHGDTC_CONTRL_TESTMON_CHRGDTC_SHIFT (0U)
#define USBC_PHY_REG_CHGDTC_CONTRL_TESTMON_CHRGDTC(x)                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_TESTMON_CHRGDTC_SHIFT)) &                                           \
     USBC_PHY_REG_CHGDTC_CONTRL_TESTMON_CHRGDTC_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_PU_CHRG_DTC_MASK (0x4U)
#define USBC_PHY_REG_CHGDTC_CONTRL_PU_CHRG_DTC_SHIFT (2U)
#define USBC_PHY_REG_CHGDTC_CONTRL_PU_CHRG_DTC(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_PU_CHRG_DTC_SHIFT)) & USBC_PHY_REG_CHGDTC_CONTRL_PU_CHRG_DTC_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_ENABLE_SWITCH_MASK (0x8U)
#define USBC_PHY_REG_CHGDTC_CONTRL_ENABLE_SWITCH_SHIFT (3U)
#define USBC_PHY_REG_CHGDTC_CONTRL_ENABLE_SWITCH(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_ENABLE_SWITCH_SHIFT)) &                                             \
     USBC_PHY_REG_CHGDTC_CONTRL_ENABLE_SWITCH_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_ND_MASK (0xFFF0U)
#define USBC_PHY_REG_CHGDTC_CONTRL_ND_SHIFT (4U)
#define USBC_PHY_REG_CHGDTC_CONTRL_ND(x)                                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_ND_SHIFT)) & USBC_PHY_REG_CHGDTC_CONTRL_ND_MASK)
/*! @} */

/*! @name PHY_REG_OTG_CONTROL -  */
/*! @{ */
#define USBC_PHY_REG_OTG_CONTROL_TESTMON_OTG_2_0_MASK (0x7U)
#define USBC_PHY_REG_OTG_CONTROL_TESTMON_OTG_2_0_SHIFT (0U)
#define USBC_PHY_REG_OTG_CONTROL_TESTMON_OTG_2_0(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_OTG_CONTROL_TESTMON_OTG_2_0_SHIFT)) &                                             \
     USBC_PHY_REG_OTG_CONTROL_TESTMON_OTG_2_0_MASK)
#define USBC_PHY_REG_OTG_CONTROL_PU_OTG_MASK (0x8U)
#define USBC_PHY_REG_OTG_CONTROL_PU_OTG_SHIFT (3U)
#define USBC_PHY_REG_OTG_CONTROL_PU_OTG(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_OTG_CONTROL_PU_OTG_SHIFT)) & USBC_PHY_REG_OTG_CONTROL_PU_OTG_MASK)
#define USBC_PHY_REG_OTG_CONTROL_OTG_CONTROL_BY_PIN_MASK (0x10U)
#define USBC_PHY_REG_OTG_CONTROL_OTG_CONTROL_BY_PIN_SHIFT (4U)
#define USBC_PHY_REG_OTG_CONTROL_OTG_CONTROL_BY_PIN(x)                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_OTG_CONTROL_OTG_CONTROL_BY_PIN_SHIFT)) &                                          \
     USBC_PHY_REG_OTG_CONTROL_OTG_CONTROL_BY_PIN_MASK)
#define USBC_PHY_REG_OTG_CONTROL_ND_MASK (0xFFE0U)
#define USBC_PHY_REG_OTG_CONTROL_ND_SHIFT (5U)
#define USBC_PHY_REG_OTG_CONTROL_ND(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_OTG_CONTROL_ND_SHIFT)) & USBC_PHY_REG_OTG_CONTROL_ND_MASK)
/*! @} */

/*! @name USB2_PHY_MON0 -  */
/*! @{ */
#define USBC_USB2_PHY_MON0_PHY_MON_MASK (0xFFFFU)
#define USBC_USB2_PHY_MON0_PHY_MON_SHIFT (0U)
#define USBC_USB2_PHY_MON0_PHY_MON(x)                                                                                              \
    (((uint32_t)(((uint32_t)(x)) << USBC_USB2_PHY_MON0_PHY_MON_SHIFT)) & USBC_USB2_PHY_MON0_PHY_MON_MASK)
/*! @} */

/*! @name PHY_REG_CHGDTC_CONTRL_1 -  */
/*! @{ */
#define USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_0_MASK (0x3U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_0_SHIFT (0U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_0(x)                                                                                 \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_0_SHIFT)) & USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_0_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_EN_MASK (0x4U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_EN_SHIFT (2U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_EN_SHIFT)) & USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_EN_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_DCP_EN_MASK (0x8U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_DCP_EN_SHIFT (3U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_DCP_EN(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_DCP_EN_SHIFT)) & USBC_PHY_REG_CHGDTC_CONTRL_1_DCP_EN_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_PD_EN_MASK (0x10U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_PD_EN_SHIFT (4U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_PD_EN(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_PD_EN_SHIFT)) & USBC_PHY_REG_CHGDTC_CONTRL_1_PD_EN_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_DM_AUTO_SWITCH_MASK (0x20U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_DM_AUTO_SWITCH_SHIFT (5U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_DM_AUTO_SWITCH(x)                                                                         \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_DM_AUTO_SWITCH_SHIFT)) &                                      \
     USBC_PHY_REG_CHGDTC_CONTRL_1_CDP_DM_AUTO_SWITCH_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DM_MASK (0x40U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DM_SHIFT (6U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DM(x)                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DM_SHIFT)) &                                        \
     USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DM_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DP_MASK (0x80U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DP_SHIFT (7U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DP(x)                                                                           \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DP_SHIFT)) &                                        \
     USBC_PHY_REG_CHGDTC_CONTRL_1_ENABLE_SWITCH_DP_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_VDAT_CHARGE_MASK (0x300U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_VDAT_CHARGE_SHIFT (8U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_VDAT_CHARGE(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_VDAT_CHARGE_SHIFT)) &                                             \
     USBC_PHY_REG_CHGDTC_CONTRL_1_VDAT_CHARGE_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_VSRC_CHARGE_MASK (0xC00U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_VSRC_CHARGE_SHIFT (10U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_VSRC_CHARGE(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_VSRC_CHARGE_SHIFT)) &                                             \
     USBC_PHY_REG_CHGDTC_CONTRL_1_VSRC_CHARGE_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_PLLVDD12_MASK (0x3000U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_PLLVDD12_SHIFT (12U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_PLLVDD12(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_PLLVDD12_SHIFT)) & USBC_PHY_REG_CHGDTC_CONTRL_1_PLLVDD12_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_14_MASK (0x4000U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_14_SHIFT (14U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_14(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_14_SHIFT)) &                                             \
     USBC_PHY_REG_CHGDTC_CONTRL_1_RESERVED_14_MASK)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_DP_DM_SWAP_CTRL_MASK (0x8000U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_DP_DM_SWAP_CTRL_SHIFT (15U)
#define USBC_PHY_REG_CHGDTC_CONTRL_1_DP_DM_SWAP_CTRL(x)                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_PHY_REG_CHGDTC_CONTRL_1_DP_DM_SWAP_CTRL_SHIFT)) &                                         \
     USBC_PHY_REG_CHGDTC_CONTRL_1_DP_DM_SWAP_CTRL_MASK)
/*! @} */

/*! @name RESERVED_ADDR_1AH -  */
/*! @{ */
#define USBC_RESERVED_ADDR_1AH_RESERVED_BIT_15_0_MASK (0xFFFFU)
#define USBC_RESERVED_ADDR_1AH_RESERVED_BIT_15_0_SHIFT (0U)
#define USBC_RESERVED_ADDR_1AH_RESERVED_BIT_15_0(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_RESERVED_ADDR_1AH_RESERVED_BIT_15_0_SHIFT)) &                                             \
     USBC_RESERVED_ADDR_1AH_RESERVED_BIT_15_0_MASK)
/*! @} */

/*! @name RESERVED_ADDR_1BH -  */
/*! @{ */
#define USBC_RESERVED_ADDR_1BH_RESERVED_BIT_15_0_MASK (0xFFFFU)
#define USBC_RESERVED_ADDR_1BH_RESERVED_BIT_15_0_SHIFT (0U)
#define USBC_RESERVED_ADDR_1BH_RESERVED_BIT_15_0(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_RESERVED_ADDR_1BH_RESERVED_BIT_15_0_SHIFT)) &                                             \
     USBC_RESERVED_ADDR_1BH_RESERVED_BIT_15_0_MASK)
/*! @} */

/*! @name RESERVED_ADDR_1CH -  */
/*! @{ */
#define USBC_RESERVED_ADDR_1CH_RESERVED_BIT_15_0_MASK (0xFFFFU)
#define USBC_RESERVED_ADDR_1CH_RESERVED_BIT_15_0_SHIFT (0U)
#define USBC_RESERVED_ADDR_1CH_RESERVED_BIT_15_0(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_RESERVED_ADDR_1CH_RESERVED_BIT_15_0_SHIFT)) &                                             \
     USBC_RESERVED_ADDR_1CH_RESERVED_BIT_15_0_MASK)
/*! @} */

/*! @name RESERVED_ADDR_1DH -  */
/*! @{ */
#define USBC_RESERVED_ADDR_1DH_RESERVED_BIT_15_0_MASK (0xFFFFU)
#define USBC_RESERVED_ADDR_1DH_RESERVED_BIT_15_0_SHIFT (0U)
#define USBC_RESERVED_ADDR_1DH_RESERVED_BIT_15_0(x)                                                                                \
    (((uint32_t)(((uint32_t)(x)) << USBC_RESERVED_ADDR_1DH_RESERVED_BIT_15_0_SHIFT)) &                                             \
     USBC_RESERVED_ADDR_1DH_RESERVED_BIT_15_0_MASK)
/*! @} */

/*! @name INTERNAL_CID -  */
/*! @{ */
#define USBC_INTERNAL_CID_ICID1_MASK (0xFFU)
#define USBC_INTERNAL_CID_ICID1_SHIFT (0U)
#define USBC_INTERNAL_CID_ICID1(x) (((uint32_t)(((uint32_t)(x)) << USBC_INTERNAL_CID_ICID1_SHIFT)) & USBC_INTERNAL_CID_ICID1_MASK)
#define USBC_INTERNAL_CID_ICID0_MASK (0xFF00U)
#define USBC_INTERNAL_CID_ICID0_SHIFT (8U)
#define USBC_INTERNAL_CID_ICID0(x) (((uint32_t)(((uint32_t)(x)) << USBC_INTERNAL_CID_ICID0_SHIFT)) & USBC_INTERNAL_CID_ICID0_MASK)
/*! @} */

/*! @name USB2_ICID_REG1 -  */
/*! @{ */
#define USBC_USB2_ICID_REG1_PHY_MULTIPORT_MASK (0x1U)
#define USBC_USB2_ICID_REG1_PHY_MULTIPORT_SHIFT (0U)
#define USBC_USB2_ICID_REG1_PHY_MULTIPORT(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << USBC_USB2_ICID_REG1_PHY_MULTIPORT_SHIFT)) & USBC_USB2_ICID_REG1_PHY_MULTIPORT_MASK)
#define USBC_USB2_ICID_REG1_ND_MASK (0x6U)
#define USBC_USB2_ICID_REG1_ND_SHIFT (1U)
#define USBC_USB2_ICID_REG1_ND(x) (((uint32_t)(((uint32_t)(x)) << USBC_USB2_ICID_REG1_ND_SHIFT)) & USBC_USB2_ICID_REG1_ND_MASK)
#define USBC_USB2_ICID_REG1_DIG_REGULATOR_MASK (0x8U)
#define USBC_USB2_ICID_REG1_DIG_REGULATOR_SHIFT (3U)
#define USBC_USB2_ICID_REG1_DIG_REGULATOR(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << USBC_USB2_ICID_REG1_DIG_REGULATOR_SHIFT)) & USBC_USB2_ICID_REG1_DIG_REGULATOR_MASK)
#define USBC_USB2_ICID_REG1_PHY_ULPI_MASK (0x10U)
#define USBC_USB2_ICID_REG1_PHY_ULPI_SHIFT (4U)
#define USBC_USB2_ICID_REG1_PHY_ULPI(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_USB2_ICID_REG1_PHY_ULPI_SHIFT)) & USBC_USB2_ICID_REG1_PHY_ULPI_MASK)
#define USBC_USB2_ICID_REG1_PHY_HSIC_MASK (0x20U)
#define USBC_USB2_ICID_REG1_PHY_HSIC_SHIFT (5U)
#define USBC_USB2_ICID_REG1_PHY_HSIC(x)                                                                                            \
    (((uint32_t)(((uint32_t)(x)) << USBC_USB2_ICID_REG1_PHY_HSIC_SHIFT)) & USBC_USB2_ICID_REG1_PHY_HSIC_MASK)
#define USBC_USB2_ICID_REG1_PHY_CHG_DTC_MASK (0x40U)
#define USBC_USB2_ICID_REG1_PHY_CHG_DTC_SHIFT (6U)
#define USBC_USB2_ICID_REG1_PHY_CHG_DTC(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << USBC_USB2_ICID_REG1_PHY_CHG_DTC_SHIFT)) & USBC_USB2_ICID_REG1_PHY_CHG_DTC_MASK)
#define USBC_USB2_ICID_REG1_PHY_OTG_MASK (0x80U)
#define USBC_USB2_ICID_REG1_PHY_OTG_SHIFT (7U)
#define USBC_USB2_ICID_REG1_PHY_OTG(x)                                                                                             \
    (((uint32_t)(((uint32_t)(x)) << USBC_USB2_ICID_REG1_PHY_OTG_SHIFT)) & USBC_USB2_ICID_REG1_PHY_OTG_MASK)
#define USBC_USB2_ICID_REG1_ICID2_MASK (0xFF00U)
#define USBC_USB2_ICID_REG1_ICID2_SHIFT (8U)
#define USBC_USB2_ICID_REG1_ICID2(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << USBC_USB2_ICID_REG1_ICID2_SHIFT)) & USBC_USB2_ICID_REG1_ICID2_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group USBC_Register_Masks */

/* USBC - Peripheral instance base addresses */
/** Peripheral USBC base address */
#define USBC_BASE (0x44001000u)
/** Peripheral USBC base pointer */
#define USBC ((USBC_Type *) USBC_BASE)
/** Array initializer of USBC peripheral base addresses */
#define USBC_BASE_ADDRS                                                                                                            \
    {                                                                                                                              \
        USBC_BASE                                                                                                                  \
    }
/** Array initializer of USBC peripheral base pointers */
#define USBC_BASE_PTRS                                                                                                             \
    {                                                                                                                              \
        USBC                                                                                                                       \
    }
/** Interrupt vectors for the USBC peripheral type */
#define USBC_IRQS                                                                                                                  \
    {                                                                                                                              \
        USB_IRQn                                                                                                                   \
    }

/*!
 * @}
 */ /* end of group USBC_Peripheral_Access_Layer */

/* ----------------------------------------------------------------------------
   -- WDT Peripheral Access Layer
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDT_Peripheral_Access_Layer WDT Peripheral Access Layer
 * @{
 */

/** WDT - Register Layout Typedef */
typedef struct
{
    __IO uint32_t WDT_CR;   /**< , offset: 0x0 */
    __IO uint32_t WDT_TORR; /**< , offset: 0x4 */
    __I uint32_t WDT_CCVR;  /**< , offset: 0x8 */
    __O uint32_t WDT_CRR;   /**< , offset: 0xC */
    __I uint32_t WDT_STAT;  /**< , offset: 0x10 */
    __I uint32_t WDT_EOI;   /**< , offset: 0x14 */
    uint8_t RESERVED_0[204];
    __I uint32_t WDT_COMP_PARAM_5; /**< , offset: 0xE4 */
    __I uint32_t WDT_COMP_PARAM_4; /**< , offset: 0xE8 */
    __I uint32_t WDT_COMP_PARAM_3; /**< , offset: 0xEC */
    __I uint32_t WDT_COMP_PARAM_2; /**< , offset: 0xF0 */
    __I uint32_t WDT_COMP_PARAM_1; /**< , offset: 0xF4 */
    __I uint32_t WDT_COMP_VERSION; /**< , offset: 0xF8 */
    __I uint32_t WDT_COMP_TYPE;    /**< , offset: 0xFC */
} WDT_Type;

/* ----------------------------------------------------------------------------
   -- WDT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDT_Register_Masks WDT Register Masks
 * @{
 */

/*! @name WDT_CR -  */
/*! @{ */
#define WDT_WDT_CR_WDT_EN_MASK (0x1U)
#define WDT_WDT_CR_WDT_EN_SHIFT (0U)
/*! WDT_EN
 *  0b0..WDT disabled.
 *  0b1..WDT enabled.
 */
#define WDT_WDT_CR_WDT_EN(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_CR_WDT_EN_SHIFT)) & WDT_WDT_CR_WDT_EN_MASK)
#define WDT_WDT_CR_RMOD_MASK (0x2U)
#define WDT_WDT_CR_RMOD_SHIFT (1U)
/*! RMOD
 *  0b0..Generate a system reset.
 *  0b1..First generate an interrupt and if it is not cleared by the time a second timeout occurs then generate a system reset.
 */
#define WDT_WDT_CR_RMOD(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_CR_RMOD_SHIFT)) & WDT_WDT_CR_RMOD_MASK)
#define WDT_WDT_CR_RPL_MASK (0x1CU)
#define WDT_WDT_CR_RPL_SHIFT (2U)
/*! RPL
 *  0b000..2 pclk cycles
 *  0b001..4 pclk cycles
 *  0b010..8 pclk cycles
 *  0b011..16 pclk cycles
 *  0b100..32 pclk cycles
 *  0b101..64 pclk cycles
 *  0b110..128 pclk cycles
 *  0b111..256 pclk cycles
 */
#define WDT_WDT_CR_RPL(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_CR_RPL_SHIFT)) & WDT_WDT_CR_RPL_MASK)
/*! @} */

/*! @name WDT_TORR -  */
/*! @{ */
#define WDT_WDT_TORR_TOP_MASK (0xFU)
#define WDT_WDT_TORR_TOP_SHIFT (0U)
#define WDT_WDT_TORR_TOP(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_TORR_TOP_SHIFT)) & WDT_WDT_TORR_TOP_MASK)
#define WDT_WDT_TORR_TOP_INIT_MASK (0xF0U)
#define WDT_WDT_TORR_TOP_INIT_SHIFT (4U)
#define WDT_WDT_TORR_TOP_INIT(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_TORR_TOP_INIT_SHIFT)) & WDT_WDT_TORR_TOP_INIT_MASK)
#define WDT_WDT_TORR_RESERVED_MASK (0xFFFFFF00U)
#define WDT_WDT_TORR_RESERVED_SHIFT (8U)
#define WDT_WDT_TORR_RESERVED(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_TORR_RESERVED_SHIFT)) & WDT_WDT_TORR_RESERVED_MASK)
/*! @} */

/*! @name WDT_CCVR -  */
/*! @{ */
#define WDT_WDT_CCVR_WDT_CCVR_MASK (0xFFFFFFFFU)
#define WDT_WDT_CCVR_WDT_CCVR_SHIFT (0U)
#define WDT_WDT_CCVR_WDT_CCVR(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_CCVR_WDT_CCVR_SHIFT)) & WDT_WDT_CCVR_WDT_CCVR_MASK)
/*! @} */

/*! @name WDT_CRR -  */
/*! @{ */
#define WDT_WDT_CRR_WDT_CRR_MASK (0xFFU)
#define WDT_WDT_CRR_WDT_CRR_SHIFT (0U)
#define WDT_WDT_CRR_WDT_CRR(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_CRR_WDT_CRR_SHIFT)) & WDT_WDT_CRR_WDT_CRR_MASK)
/*! @} */

/*! @name WDT_STAT -  */
/*! @{ */
#define WDT_WDT_STAT_WDT_STAT_MASK (0x1U)
#define WDT_WDT_STAT_WDT_STAT_SHIFT (0U)
/*! wdt_stat
 *  0b0..Interrupt is inactive.
 *  0b1..Interrupt is active regardless of polarity.
 */
#define WDT_WDT_STAT_WDT_STAT(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_STAT_WDT_STAT_SHIFT)) & WDT_WDT_STAT_WDT_STAT_MASK)
/*! @} */

/*! @name WDT_EOI -  */
/*! @{ */
#define WDT_WDT_EOI_WDT_EOI_MASK (0x1U)
#define WDT_WDT_EOI_WDT_EOI_SHIFT (0U)
#define WDT_WDT_EOI_WDT_EOI(x) (((uint32_t)(((uint32_t)(x)) << WDT_WDT_EOI_WDT_EOI_SHIFT)) & WDT_WDT_EOI_WDT_EOI_MASK)
/*! @} */

/*! @name WDT_COMP_PARAM_5 -  */
/*! @{ */
#define WDT_WDT_COMP_PARAM_5_DATA_MASK (0xFFFFFFFFU)
#define WDT_WDT_COMP_PARAM_5_DATA_SHIFT (0U)
#define WDT_WDT_COMP_PARAM_5_DATA(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_5_DATA_SHIFT)) & WDT_WDT_COMP_PARAM_5_DATA_MASK)
/*! @} */

/*! @name WDT_COMP_PARAM_4 -  */
/*! @{ */
#define WDT_WDT_COMP_PARAM_4_DATA_MASK (0xFFFFFFFFU)
#define WDT_WDT_COMP_PARAM_4_DATA_SHIFT (0U)
#define WDT_WDT_COMP_PARAM_4_DATA(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_4_DATA_SHIFT)) & WDT_WDT_COMP_PARAM_4_DATA_MASK)
/*! @} */

/*! @name WDT_COMP_PARAM_3 -  */
/*! @{ */
#define WDT_WDT_COMP_PARAM_3_DATA_MASK (0xFFFFFFFFU)
#define WDT_WDT_COMP_PARAM_3_DATA_SHIFT (0U)
#define WDT_WDT_COMP_PARAM_3_DATA(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_3_DATA_SHIFT)) & WDT_WDT_COMP_PARAM_3_DATA_MASK)
/*! @} */

/*! @name WDT_COMP_PARAM_2 -  */
/*! @{ */
#define WDT_WDT_COMP_PARAM_2_DATA_MASK (0xFFFFFFFFU)
#define WDT_WDT_COMP_PARAM_2_DATA_SHIFT (0U)
#define WDT_WDT_COMP_PARAM_2_DATA(x)                                                                                               \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_2_DATA_SHIFT)) & WDT_WDT_COMP_PARAM_2_DATA_MASK)
/*! @} */

/*! @name WDT_COMP_PARAM_1 -  */
/*! @{ */
#define WDT_WDT_COMP_PARAM_1_WDT_ALWAYS_EN_MASK (0x1U)
#define WDT_WDT_COMP_PARAM_1_WDT_ALWAYS_EN_SHIFT (0U)
#define WDT_WDT_COMP_PARAM_1_WDT_ALWAYS_EN(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_ALWAYS_EN_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_ALWAYS_EN_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_RMOD_MASK (0x2U)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_RMOD_SHIFT (1U)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_RMOD(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_DFLT_RMOD_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_DFLT_RMOD_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_DUAL_TOP_MASK (0x4U)
#define WDT_WDT_COMP_PARAM_1_WDT_DUAL_TOP_SHIFT (2U)
#define WDT_WDT_COMP_PARAM_1_WDT_DUAL_TOP(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_DUAL_TOP_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_DUAL_TOP_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_HC_RMOD_MASK (0x8U)
#define WDT_WDT_COMP_PARAM_1_WDT_HC_RMOD_SHIFT (3U)
#define WDT_WDT_COMP_PARAM_1_WDT_HC_RMOD(x)                                                                                        \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_HC_RMOD_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_HC_RMOD_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_HC_RPL_MASK (0x10U)
#define WDT_WDT_COMP_PARAM_1_WDT_HC_RPL_SHIFT (4U)
#define WDT_WDT_COMP_PARAM_1_WDT_HC_RPL(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_HC_RPL_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_HC_RPL_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_HC_TOP_MASK (0x20U)
#define WDT_WDT_COMP_PARAM_1_WDT_HC_TOP_SHIFT (5U)
#define WDT_WDT_COMP_PARAM_1_WDT_HC_TOP(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_HC_TOP_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_HC_TOP_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_USE_FIX_TOP_MASK (0x40U)
#define WDT_WDT_COMP_PARAM_1_WDT_USE_FIX_TOP_SHIFT (6U)
#define WDT_WDT_COMP_PARAM_1_WDT_USE_FIX_TOP(x)                                                                                    \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_USE_FIX_TOP_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_USE_FIX_TOP_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_PAUSE_MASK (0x80U)
#define WDT_WDT_COMP_PARAM_1_WDT_PAUSE_SHIFT (7U)
#define WDT_WDT_COMP_PARAM_1_WDT_PAUSE(x)                                                                                          \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_PAUSE_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_PAUSE_MASK)
#define WDT_WDT_COMP_PARAM_1_APB_DATA_WIDTH_MASK (0x300U)
#define WDT_WDT_COMP_PARAM_1_APB_DATA_WIDTH_SHIFT (8U)
#define WDT_WDT_COMP_PARAM_1_APB_DATA_WIDTH(x)                                                                                     \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_APB_DATA_WIDTH_SHIFT)) & WDT_WDT_COMP_PARAM_1_APB_DATA_WIDTH_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_RPL_MASK (0x1C00U)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_RPL_SHIFT (10U)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_RPL(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_DFLT_RPL_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_DFLT_RPL_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP_MASK (0xF0000U)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP_SHIFT (16U)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP(x)                                                                                       \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP_INIT_MASK (0xF00000U)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP_INIT_SHIFT (20U)
#define WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP_INIT(x)                                                                                  \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP_INIT_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_DFLT_TOP_INIT_MASK)
#define WDT_WDT_COMP_PARAM_1_WDT_CNT_WIDTH_MASK (0x1F000000U)
#define WDT_WDT_COMP_PARAM_1_WDT_CNT_WIDTH_SHIFT (24U)
#define WDT_WDT_COMP_PARAM_1_WDT_CNT_WIDTH(x)                                                                                      \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_PARAM_1_WDT_CNT_WIDTH_SHIFT)) & WDT_WDT_COMP_PARAM_1_WDT_CNT_WIDTH_MASK)
/*! @} */

/*! @name WDT_COMP_VERSION -  */
/*! @{ */
#define WDT_WDT_COMP_VERSION_WDT_COMP_VERSION_MASK (0xFFFFFFFFU)
#define WDT_WDT_COMP_VERSION_WDT_COMP_VERSION_SHIFT (0U)
#define WDT_WDT_COMP_VERSION_WDT_COMP_VERSION(x)                                                                                   \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_VERSION_WDT_COMP_VERSION_SHIFT)) & WDT_WDT_COMP_VERSION_WDT_COMP_VERSION_MASK)
/*! @} */

/*! @name WDT_COMP_TYPE -  */
/*! @{ */
#define WDT_WDT_COMP_TYPE_WDT_COMP_TYPE_MASK (0xFFFFFFFFU)
#define WDT_WDT_COMP_TYPE_WDT_COMP_TYPE_SHIFT (0U)
#define WDT_WDT_COMP_TYPE_WDT_COMP_TYPE(x)                                                                                         \
    (((uint32_t)(((uint32_t)(x)) << WDT_WDT_COMP_TYPE_WDT_COMP_TYPE_SHIFT)) & WDT_WDT_COMP_TYPE_WDT_COMP_TYPE_MASK)
/*! @} */

/*!
 * @}
 */ /* end of group WDT_Register_Masks */

/* WDT - Peripheral instance base addresses */
/** Peripheral WDT base address */
#define WDT_BASE (0x48040000u)
/** Peripheral WDT base pointer */
#define WDT ((WDT_Type *) WDT_BASE)
/** Array initializer of WDT peripheral base addresses */
#define WDT_BASE_ADDRS                                                                                                             \
    {                                                                                                                              \
        WDT_BASE                                                                                                                   \
    }
/** Array initializer of WDT peripheral base pointers */
#define WDT_BASE_PTRS                                                                                                              \
    {                                                                                                                              \
        WDT                                                                                                                        \
    }
/** Interrupt vectors for the WDT peripheral type */
#define WDT_IRQS                                                                                                                   \
    {                                                                                                                              \
        WDT_IRQn                                                                                                                   \
    }

/*!
 * @}
 */ /* end of group WDT_Peripheral_Access_Layer */

/*
** End of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
#if (__ARMCC_VERSION >= 6010050)
#pragma clang diagnostic pop
#else
#pragma pop
#endif
#elif defined(__GNUC__)
/* leave anonymous unions enabled */
#elif defined(__IAR_SYSTEMS_ICC__)
#pragma language = default
#else
#error Not supported compiler type
#endif

/*!
 * @}
 */ /* end of group Peripheral_access_layer */

/* ----------------------------------------------------------------------------
   -- Macros for use with bit field definitions (xxx_SHIFT, xxx_MASK).
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Bit_Field_Generic_Macros Macros for use with bit field definitions (xxx_SHIFT, xxx_MASK).
 * @{
 */

#if defined(__ARMCC_VERSION)
#if (__ARMCC_VERSION >= 6010050)
#pragma clang system_header
#endif
#elif defined(__IAR_SYSTEMS_ICC__)
#pragma system_include
#endif

/**
 * @brief Mask and left-shift a bit field value for use in a register bit range.
 * @param field Name of the register bit field.
 * @param value Value of the bit field.
 * @return Masked and shifted value.
 */
#define NXP_VAL2FLD(field, value) (((value) << (field##_SHIFT)) & (field##_MASK))
/**
 * @brief Mask and right-shift a register value to extract a bit field value.
 * @param field Name of the register bit field.
 * @param value Value of the register.
 * @return Masked and shifted bit field value.
 */
#define NXP_FLD2VAL(field, value) (((value) & (field##_MASK)) >> (field##_SHIFT))

/*!
 * @}
 */ /* end of group Bit_Field_Generic_Macros */

/* ----------------------------------------------------------------------------
   -- SDK Compatibility
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDK_Compatibility_Symbols SDK Compatibility
 * @{
 */

/* No SDK compatibility issues. */

/*!
 * @}
 */ /* end of group SDK_Compatibility_Symbols */

#endif /* _88MW320_H_ */
