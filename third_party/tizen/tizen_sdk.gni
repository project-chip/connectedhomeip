# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/tizen.gni")

import("${build_root}/config/tizen/config.gni")

tizen_manifest_parser = get_path_info("tizen_manifest_parser.py", "abspath")

template("tizen_sdk") {
  forward_variables_from(invoker,
                         [
                           "project_build_dir",
                           "project_app_name",
                         ])

  if (!defined(project_app_name)) {
    project_app_name = "tizen-app"
  }

  # Create a dummy project definition file, so the Tizen Studio CLI
  # will recognize our build directory as a Tizen project.
  write_file("${project_build_dir}/project_def.prop",
             [
               "# Generated by the GN script. DO NOT EDIT!",
               "APPNAME = " + project_app_name,
               "type = app",
             ])

  # Create a dummy project file, so the Tizen Studio CLI will not
  # complain about invalid XPath (this file is not used anyway...)
  write_file("${project_build_dir}/.project",
             [
               "<!-- Generated by the build script. DO NOT EDIT! -->",
               "<projectDescription></projectDescription>",
             ])

  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "outputs",
                           ])
    script = "${build_root}/gn_run_binary.py"
    args = [ "${tizen_sdk_root}/tools/ide/bin/tizen" ] + invoker.args
  }
}

template("tizen_sdk_package") {
  # Output directory where packaging will occur. We need a separate directory
  # for this, because Tizen Studio CLI scans "res" (resources), "shared" and
  # "lib" directories for items to pack. In our case it could include in the
  # TPK package libraries available in ${root_out_dir}/lib directory.
  tizen_package_dir = "${root_build_dir}/package"
  tizen_package_out_dir = "${tizen_package_dir}/out"

  assert(defined(invoker.manifest),
         "It is required to specify Tizen `manifest` XML file.")
  assert(defined(invoker.sign_security_profile),
         "It is required to specify a `sign_security_profile` which " +
             "should be used for signing TPK package.")

  # Extract data from Tizen XML manifest.
  manifest = exec_script(tizen_manifest_parser,
                         [ rebase_path(invoker.manifest, root_build_dir) ],
                         "json")
  manifest_package = manifest["package"]
  manifest_apps = manifest["apps"]

  # Copy Tizen manifest from the source directory.
  copy("${target_name}:manifest") {
    sources = [ invoker.manifest ]
    outputs = [ "${tizen_package_dir}/{{source_file_part}}" ]
    deps = invoker.deps
  }

  # List of dependencies for Tizen Studio CLI packager.
  dependencies = [ ":${target_name}:manifest" ]

  # Copy executable(s) to temporary output directory. This action is required,
  # because Tizen Studio CLI expects particular directory layout - it is not
  # possible to specify input files manually.
  if (manifest_apps["service"] != "") {
    dependencies += [ ":${target_name}:app:service" ]
    copy("${target_name}:app:service") {
      sources = [ root_out_dir + "/" + manifest_apps["service"] ]
      outputs = [ "${tizen_package_out_dir}/{{source_file_part}}" ]
      deps = invoker.deps
    }
  }

  tpk = manifest_package["name"] + "-" + manifest_package["version"] + ".tpk"
  tizen_sdk(target_name) {
    deps = invoker.deps + dependencies
    outputs = [ "${tizen_package_out_dir}/" + tpk ]
    project_build_dir = tizen_package_dir
    args = [
      "package",
      "--type",
      "tpk",
      "--sign",
      invoker.sign_security_profile,
      "--",
      tizen_package_out_dir,
    ]
  }
}
