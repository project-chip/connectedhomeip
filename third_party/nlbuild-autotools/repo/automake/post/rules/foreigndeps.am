#
#    Copyright 2020 nlbuild-autotools Authors. All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

#
#    Description:
#      This file is the automake header for building foreign make
#      (that is, outside of the current make directory) dependencies.
#
#      Two types of foreign make dependencies are supported:
#
#        * file
#
#            EXPLICIT dependecies that follow the form '<DIR>/<TARGET>'
#            where '$(MAKE) -C <DIR> <TARGET>' will produce and satisfy
#            the desired dependency expected by the current make file
#
#        * subdir
#
#            IMPLICIT dependecies that follow the form '<DIR>'
#            where '$(MAKE) -C <DIR>' will produce and satisfy
#            the desired dependencies expected by the current
#            make file.
#
#      This defines make targets and commands for handling such
#      foreign make dependencies.  overridden by project make files.
#

# The user-supported and -visible targets for foreign dependencies are:
#
#   * nlforeign-deps
#
#       Build all foreign target dependencies, including both files or
#       subdirectories.
#
#   * nlforeign-file-deps
#
#       Build only foreign file target dependencies.
#
#   * nlforeign-subdir-deps
#
#       Build only foreign subdirectory target dependencies.
#

.PHONY: nlforeign-file-deps nlforeign-subdir-deps nlforeign-deps

nlforeign-deps: nlforeign-file-deps nlforeign-subdir-deps

nlforeign-file-deps:

nlforeign-subdir-deps:

#
# if defined(NLFOREIGN_FILE_DEPENDENCIES) || defined(NLFOREIGN_SUBDIR_DEPENDENCIES)
#
ifneq ($(strip $(NLFOREIGN_FILE_DEPENDENCIES)$(NLFOREIGN_SUBDIR_DEPENDENCIES)),)

#
# Foreign target dependency sentinel file management
#

# All foreign target dependency sentinel files are of the form
# [.<path>]<sentinel file stem><unique invocation qualifier, where
# [.<path>] is only included if the <path> is non-empty.

# This defines the <sentinel file stem>.

NLFOREIGN_DEPENDENCIES_SENTINEL_STEM      := .nlbuild_foreign_deps_

# This defines the <unique invocation qualifier>.
#
# Check to see if NLFOREIGN_DEPENDENCIES_SENTINEL_ID has been set for
# this make invocation.

ifneq ($(origin NLFOREIGN_DEPENDENCIES_SENTINEL_ID),environment)

  # the parent of this shell is the "root" make invocation
  override NLFOREIGN_DEPENDENCIES_SENTINEL_ID:=$(shell echo $$PPID)

  # makes makedirs_id an environment var
  export NLFOREIGN_DEPENDENCIES_SENTINEL_ID

endif

#
# nlforeign-create-dependencies-sentinel-name <target path> <unique invocation qualifier>
#
# This creates a name for a foreign target dependency sentinel
# file using the specified target path and unique invocation
# qualifier.
#
# The target path will be transformed by eliding double-dot (..)
# sequences, transforming path separators (/) into underscores (_),
# and transforming dots (.) into underscores (_).
#
define nlforeign-create-dependencies-sentinel-name
$(if $(1),.$(subst .,_,$(subst /,_,$(subst ..,,$(1)))),)$(NLFOREIGN_DEPENDENCIES_SENTINEL_STEM)$(2)
endef

#
# nlforeign-create-unique-dependencies-sentinel-name <target path> <unique invocation qualifier>
#
# This creates a unique name for a foreign target dependency sentinel
# file using the specified target path, qualified by the current make
# process identifier.
#
define nlforeign-create-unique-dependencies-sentinel-name
$(call nlforeign-create-dependencies-sentinel-name,$(1),$(NLFOREIGN_DEPENDENCIES_SENTINEL_ID))
endef

#
# MARK: NLFOREIGN_SUBDIR_DEPENDENCIES
#
ifdef NLFOREIGN_SUBDIR_DEPENDENCIES

ifeq ($(MAKECMDGOALS),$(filter-out clean distclean maintainer-clean,$(MAKECMDGOALS)))

# Always ensure that nlforeign-subdir-deps runs first against any
# non-clean target goals such that make file maintainers do not have
# to set up any explicit dependencies when they define
# NLFOREIGN_SUBDIR_DEPENDENCIES.
#
# Do this by tricking make into building nlforeign-subdir-deps first
# by forcing it to try to make an include file that depends on
# nlforeign-subdir-deps.

-include .nlforeign_deps_trick_never_exists.min

.nlforeign_deps_trick_never_exists.min: nlforeign-subdir-deps

endif # ifeq ($(MAKECMDGOALS),$(filter-out clean distclean maintainer-clean,$(MAKECMDGOALS)))

define nlforeign-subdir-make
	$(NL_V_PROGRESS) "MAKE" "$(1)"
	+$(NL_V_AT)$(MAKE) $(MFLAGS) -C "$(1)"
endef # nlforeign-subdir-make

#
# nlforeign-create-unique-subdir-dependencies-sentinel-name <target subdirectory>
#
# This creates the name of a foreign subdirectory dependency sentinel
# file of the form:
#
#   <target subdirectory>/<sentinel stem><sentinel unique id>
#
define nlforeign-create-unique-subdir-dependencies-sentinel-name
$(call Deslashify,$(1))/$(call nlforeign-create-unique-dependencies-sentinel-name,$(notdir $(call Slashify,$(1))))
endef

#
# nlforeign-create-unique-subdir-dependencies-sentinel-name-glob <target subdirectory> <glob pattern>
#
# This creates the glob name pattern of a foreign subdirectory
# dependency sentinel file of the form:
#
#   <target subdirectory>/<sentinel stem><glob pattern>
#
define nlforeign-create-unique-subdir-dependencies-sentinel-name-glob
$(call Deslashify,$(1))/$(call nlforeign-create-dependencies-sentinel-name,$(notdir $(call Slashify,$(1))),$(2))
endef

#
# nlforeign-subdir-dependency-template <foreign subdir target>
#
# This template defines targets and associated commands for building a
# foreign subdir target depedendency via a subdirectory make (for
# example, `make -C ../foo` for directory '../foo').
#
define nlforeign-subdir-dependency-template

# The foreign subdirectory dependency depends on a sentinel for it such that
# make is forced to visit the directory (should any of its
# dependencies have changed since the last visit).

NLFOREIGN_SUBDIR_CLEANFILE_GLOBS += $(call nlforeign-create-unique-subdir-dependencies-sentinel-name-glob,$(1),*)

nlforeign-subdir-deps: $(call nlforeign-create-unique-subdir-dependencies-sentinel-name,$(1)) 

$$(call nlforeign-create-unique-subdir-dependencies-sentinel-name,$(1)):
	$(NL_V_AT)touch "$$(@)"
	$(call nlforeign-subdir-make,$(1))
	$(NL_V_AT)$(RM) $(filter-out $$(@),$(wildcard $(call nlforeign-create-unique-subdir-dependencies-sentinel-name-glob,$(1),*)))

endef # nlforeign-subdir-dependency-template

# Clean up any foreign subdirectory dependency sentinel files by
# hooking on any clean target is invoked.
#
# NOTE: We CANNOT just hook on 'clean-local' since it won't be recognized
# unless the make file including this one uses it.

clean distclean maintainer-clean: nlforeign-subdir-dependency-clean

nlforeign-subdir-dependency-clean:
	$(NL_V_AT)$(RM) $(NLFOREIGN_SUBDIR_CLEANFILE_GLOBS)

# Instantiate the foreign subdirectory dependency template for each
# subdirectory in NLFOREIGN_SUBDIR_DEPENDENCIES.

$(foreach nlforeign-subdir-dependency,$(NLFOREIGN_SUBDIR_DEPENDENCIES),$(eval $(call nlforeign-subdir-dependency-template,$(nlforeign-subdir-dependency))))

endif # NLFOREIGN_SUBDIR_DEPENDENCIES

#
# MARK: NLFOREIGN_FILE_DEPENDENCIES
#
ifdef NLFOREIGN_FILE_DEPENDENCIES

nlforeign-file-deps: $(NLFOREIGN_FILE_DEPENDENCIES)

define nlforeign-file-make
	$(NL_V_PROGRESS) "MAKE" "$(1)"
	+$(NL_V_AT)$(MAKE) $(MFLAGS) -C "$(dir $(1))" "$(notdir $(1))"
endef # nlforeign-file-make

#
# nlforeign-create-unique-file-dependencies-sentinel-name <target file
#
# This creates the name of a foreign file dependency sentinel file of
# the form:
#
#   $(dir <target file>)/$(notdir <target file>)<sentinel stem><sentinel unique id>
#
define nlforeign-create-unique-file-dependencies-sentinel-name
$(call Deslashify,$(dir $(1)))/$(call nlforeign-create-unique-dependencies-sentinel-name,$(notdir $(1)))
endef

#
# nlforeign-create-unique-file-dependencies-sentinel-name-glob <target file <glob pattern>
#
# This creates the glob name pattern of a foreign file dependency
# sentinel file of the form:
#
#    $(dir <target file>)/$(notdir <target file>)<sentinel stem><glob pattern>
#
define nlforeign-create-unique-file-dependencies-sentinel-name-glob
$(call Deslashify,$(dir $(1)))/$(call nlforeign-create-dependencies-sentinel-name,$(notdir $(1)),$(2))
endef

#
# nlforeign-file-dependency-template <foreign file target>
#
# This template defines targets and associated commands for building a
# foreign file target depedendency via a subdirectory make (for
# example, `make -C ../foo bar` for target 'bar' in directory
# '../foo').
#
define nlforeign-file-dependency-template

# The foreign file dependency depends on a sentinel for it such that
# make is forced to visit the directory that creates it (should any of
# its dependencies have changed since the last visit).

NLFOREIGN_FILE_CLEANFILE_GLOBS += $(call nlforeign-create-unique-file-dependencies-sentinel-name-glob,$(1),*)

$(1): $$(call nlforeign-create-unique-file-dependencies-sentinel-name,$(1))
	$(call nlforeign-file-make,$(1))

$$(call nlforeign-create-unique-file-dependencies-sentinel-name,$(1)):
	$(NL_V_AT)touch "$$(@)"
	$(NL_V_AT)$(RM) $(filter-out $$(@),$(wildcard $(call nlforeign-create-unique-file-dependencies-sentinel-name-glob,$(1),*)))

endef # nlforeign-file-dependency-template

# Clean up any foreign file dependency sentinel files by hooking on
# any clean target is invoked.
#
# NOTE: We CANNOT just hook on 'clean-local' since it won't be recognized
# unless the make file including this one uses it.

clean distclean maintainer-clean: nlforeign-file-dependency-clean

nlforeign-file-dependency-clean:
	$(NL_V_AT)$(RM) $(NLFOREIGN_FILE_CLEANFILE_GLOBS)

# Instantiate the foreign file dependency template for each file in
# NLFOREIGN_FILE_DEPENDENCIES.

$(foreach nlforeign-file-dependency,$(NLFOREIGN_FILE_DEPENDENCIES),$(eval $(call nlforeign-file-dependency-template,$(nlforeign-file-dependency))))

endif # NLFOREIGN_FILE_DEPENDENCIES

endif # NLFOREIGN_FILE_DEPENDENCIES || NLFOREIGN_SUBDIR_DEPENDENCIES
