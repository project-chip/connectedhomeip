# Copyright (c) 2021 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//args.gni")
import("//build_overrides/bouffalolab_iot_sdk.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/mbedtls.gni")
import("${chip_root}/src/lib/lib.gni")

declare_args() {
  # Location of the bl616 SDK.
  bouffalo_sdk_root = "${chip_root}/third_party/bouffalolab/bouffalo_sdk"

  enable_debug_coredump = false
  coredump_binary_id = 0
  bouffalo_sdk_coredump_version = 1
}

assert(bouffalo_sdk_root != "", "bouffalo_sdk_root must be specified")

# Defines an bl616 SDK build target.
#
# Parameters:
#   bouffalo_sdk_root - The location of the bl616 SDK.
#   sources - The sources files to build.
template("bouffalo_sdk") {
  if (defined(invoker.bouffalo_sdk_root)) {
    bouffalo_sdk_root = invoker.bouffalo_sdk_root
  }

  assert(bouffalo_sdk_root != "", "bouffalo_sdk_root must be specified")

  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    defines = [
      "BL616=BL616",
      "ARCH_RISCV",
    ]

    include_dirs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }

    cflags_c = [
      "-fno-jump-tables",
      "-fstrict-volatile-bitfields",
      "-fshort-enums",
      "-Wno-unused-but-set-variable",
    ]

    cflags = [
      "-Wno-conversion",
      "-fstack-usage",
    ]

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
  }

  config("${sdk_target_name}_config_startup") {
    include_dirs = [ "${bouffalo_sdk_root}/drivers/soc/bl616/std/startup" ]
  }

  source_set("${sdk_target_name}_startup") {
    defines = [
      "ARCH_RISCV",
      "BFLB_USE_HAL_DRIVER",
      "CONFIG_IRQ_NUM=80",
    ]

    if (defined(invoker.enable_debug_coredump) &&
        invoker.enable_debug_coredump) {
      defines += [ "CONFIG_COREDUMP" ]
    }

    include_dirs = [ "${bouffalo_sdk_root}/drivers/soc/bl616/std/startup" ]

    sources = [
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/startup/interrupt.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/startup/riscv_fpu.S",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/startup/start.S",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/startup/start_load.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/startup/system_bl616.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/startup/vector.S",
    ]

    configs += [
      ":${sdk_target_name}_config_freertos",
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_utils",
    ]

    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_startup",
    ]
  }

  config("${sdk_target_name}_config_std_drv") {
    include_dirs = [
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/include",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/include/hardware",
    ]

    defines = [
      "ARCH_RISCV",
      "BFLB_USE_HAL_DRIVER",
    ]

    cflags = [ "-Wsign-compare" ]
  }

  source_set("${sdk_target_name}_std_drv") {
    defines = [
      "ARCH_RISCV",
      "BFLB_USE_HAL_DRIVER",
      "BFLB_USE_ROM_DRIVER",
    ]

    include_dirs = [
      #bl616 startup
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/include",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/include/hardware",
    ]

    sources = [
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/port/bl616_clock.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/port/bl616_gpio.c",
    ]

    sources += [
      #use rom api default
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_clock.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_common.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_ef_cfg.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_mfg_efuse.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_mfg_flash.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_mfg_media.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_pm.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_psram.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_romapi_e907.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_romapi_patch.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_sdh.c",
      "${bouffalo_sdk_root}/drivers/soc/bl616/std/src/bl616_tzc_sec.c",
    ]

    cflags_c = [
      "-Wno-sign-compare",
      "-Wno-enum-conversion",
      "-Wno-type-limits",
    ]

    configs += [
      ":${sdk_target_name}_config_startup",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_freertos",
    ]
    public_configs = [
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config",
    ]
  }

  config("${sdk_target_name}_config_lhal") {
    include_dirs = [
      #bl616 lhal
      "${bouffalo_sdk_root}/drivers/lhal/include",
      "${bouffalo_sdk_root}/drivers/lhal/include/arch",
      "${bouffalo_sdk_root}/drivers/lhal/include/arch/risc-v/t-head",
      "${bouffalo_sdk_root}/drivers/lhal/include/arch/risc-v/t-head/Core/Include",
      "${bouffalo_sdk_root}/drivers/lhal/include/arch/risc-v/t-head/csi_dsp/include",
      "${bouffalo_sdk_root}/drivers/lhal/src/flash",
      "${bouffalo_sdk_root}/drivers/lhal/config/bl616",
    ]
  }

  source_set("${sdk_target_name}_lhal") {
    defines = [
      "CPU_M0",
      "CONFIG_IRQ_NUM=80",
    ]

    include_dirs = [
      #bl616 lhal
      "${bouffalo_sdk_root}/drivers/lhal/include",
    ]

    sources = [
      "${bouffalo_sdk_root}/drivers/lhal/config/bl616/device_table.c",
      "${bouffalo_sdk_root}/drivers/lhal/include/arch/risc-v/t-head/rv_hart.c",
      "${bouffalo_sdk_root}/drivers/lhal/include/arch/risc-v/t-head/rv_pmp.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_acomp.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_adc.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_auadc.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_audac.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_cam.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_cks.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_common.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_dac.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_dbi.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_dma.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_ef_ctrl.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_emac.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_flash.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_gpio.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_i2c.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_i2s.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_ir.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_irq.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_l1c.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_mjpeg.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_mtimer.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_pwm_v2.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_rtc.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_sdio2.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_sec_aes.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_sec_sha.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_sec_trng.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_spi.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_timer.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_uart.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/bflb_wdg.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/flash/bflb_sf_cfg.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/flash/bflb_sf_ctrl.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/flash/bflb_sflash.c",
      "${bouffalo_sdk_root}/drivers/lhal/src/flash/bflb_xip_sflash.c",
    ]

    libs = [ "${bouffalo_sdk_root}/drivers/lhal/src/pka/libpka.a" ]

    cflags_c = [
      "-Wno-shadow",
      "-Wno-sign-compare",
      "-Wno-implicit-fallthrough",
      "-Wno-format",
      "-Wno-format-nonliteral",
      "-Wno-format-security",
      "-Wno-unused-function",
    ]

    configs += [
      ":${sdk_target_name}_config_startup",
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_freertos",
    ]

    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_lhal",
    ]
  }

  config("${sdk_target_name}_config_sys") {
    include_dirs = [
      "${bouffalo_sdk_root}/drivers/sys",
      "${bouffalo_sdk_root}/drivers/sys/bl616",
    ]
  }

  source_set("${sdk_target_name}_sys") {
    defines = [ "BL_WIFI_LP_FW" ]
    sources = [
      "${bouffalo_sdk_root}/drivers/sys/bl616/bl616_lp.c",
      "${bouffalo_sdk_root}/drivers/sys/bl616/bl616_sys.c",
    ]

    cflags_c = [
      "-Wno-sign-compare",
      "-Wno-shadow",
      "-Wno-format",
      "-Wno-format-nonliteral",
      "-Wno-format-security",
    ]

    configs += [
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_lhal",
    ]
    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_sys",
    ]
  }

  config("${sdk_target_name}_config_board") {
    include_dirs = [ "${bouffalo_sdk_root}/bsp/board" ]
  }

  source_set("${sdk_target_name}_board") {
    defines = [
      "CONFIG_MBEDTLS",
      "CONFIG_BFLOG",
      "BL616",
    ]

    include_dirs = [ "${bouffalo_sdk_root}/bsp/board/bl616dk" ]

    sources = [
      "${bouffalo_sdk_root}/bsp/board/bl616dk/board.c",
      "${bouffalo_sdk_root}/bsp/board/bl616dk/board_rf.c",
      "${bouffalo_sdk_root}/bsp/board/bl616dk/fw_header.c",
    ]

    cflags_c = [
      "-Wno-shadow",
      "-Wno-enum-conversion",
      "-Wno-format",
      "-Wno-format-nonliteral",
      "-Wno-format-security",
    ]

    configs += [
      ":${sdk_target_name}_config_startup",
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_freertos",
      ":${sdk_target_name}_config_mm",
      ":${sdk_target_name}_config_rf",
    ]

    public_configs = [ ":${sdk_target_name}_config_board" ]
  }

  config("${sdk_target_name}_config_shell") {
    include_dirs = [ "${bouffalo_sdk_root}/components/shell" ]
  }

  source_set("${sdk_target_name}_shell") {
    include_dirs = [ "${bouffalo_sdk_root}/bsp/board/bl616dk" ]

    sources = [
      "${bouffalo_sdk_root}/components/shell/shell.c",
      "${bouffalo_sdk_root}/components/shell/shell_freertos.c",
    ]

    cflags_c = [
      "-Wno-shadow",
      "-Wno-enum-conversion",
      "-Wno-format-security",
      "-Wno-format-truncation",
      "-Wno-format-nonliteral",
      "-Wno-sign-compare",
    ]

    configs += [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_utils",
      ":${sdk_target_name}_config_board",
      ":${sdk_target_name}_config_freertos",
      ":${sdk_target_name}_config_mm",
    ]
    public_configs = [ ":${sdk_target_name}_config_shell" ]
  }

  config("${sdk_target_name}_config_rf") {
    include_dirs = [
      "${bouffalo_sdk_root}/drivers/soc/bl616/phyrf/include",
      "${bouffalo_sdk_root}/drivers/rfparam/Inc",
    ]

    defines = [ "WL_BL616=1" ]
  }

  source_set("${sdk_target_name}_rf") {
    defines = [ "RFPARAM_BL616" ]

    include_dirs = [ "${bouffalo_sdk_root}/drivers/rfparam/Inc" ]

    sources = [
      "${bouffalo_sdk_root}/drivers/rfparam/Src/rfparam_adapter.c",
      "${bouffalo_sdk_root}/drivers/rfparam/Src/rfparam_rftlv.c",
    ]

    libs = [ "${bouffalo_sdk_root}/drivers/soc/bl616/phyrf/lib-gcc_10.2.0-toolchain_V2.6.1/libbl616_phyrf.a" ]

    cflags_c = [
      "-Wno-shadow",
      "-Wno-sign-compare",
    ]

    configs += [
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_utils",
    ]
    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_rf",
    ]
  }

  source_set("${sdk_target_name}_libc") {
    include_dirs = [ "${bouffalo_sdk_root}/components/libc" ]

    sources = [
      "${bouffalo_sdk_root}/components/libc/newlib/port_init_fini.c",
      "${bouffalo_sdk_root}/components/libc/newlib/port_memory.c",
      "${bouffalo_sdk_root}/components/libc/newlib/syscalls_nosys.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_abs.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_atof.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_atoi.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_atol.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_atoll.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_bsearch.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_checkbase.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_itoa.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_llabs.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_lldiv.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_qsort.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/stdlib/lib_strtod.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_ffs.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_ffsl.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_ffsll.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_fls.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_flsl.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_flsll.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_index.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_memccpy.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_memchr.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_memcmp.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_memmove.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_memrchr.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_memset.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_stpcpy.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_stpncpy.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strcasecmp.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strcasestr.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strcat.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strchr.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strcmp.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strcspn.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strdup.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strnlen.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strpbrk.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strsep.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strspn.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strstr.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strtok.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_strtokr.c",
      "${bouffalo_sdk_root}/components/libc/nuttx/libc/string/lib_vikmemcpy.c",
      "${bouffalo_sdk_root}/components/libc/printf.c",
      "${bouffalo_sdk_root}/components/libc/snprintf.c",
      "${bouffalo_sdk_root}/components/libc/sprintf.c",
      "${bouffalo_sdk_root}/components/libc/stdatomic.c",
      "${bouffalo_sdk_root}/components/libc/vsnprintf.c",
      "${bouffalo_sdk_root}/components/libc/vsprintf.c",
    ]

    cflags = [
      "-fno-builtin",
      "-Wno-sign-compare",
      "-Wno-implicit-fallthrough",
      "-Wno-builtin-declaration-mismatch",
    ]
    configs += [
      ":${sdk_target_name}_config_mm",
      ":${sdk_target_name}_config_lhal",
    ]
    public_configs = [ ":${sdk_target_name}_config" ]
  }

  config("${sdk_target_name}_config_freertos") {
    defines = [
      "CONFIG_FREERTOS",
      "configSTACK_ALLOCATION_FROM_SEPARATE_HEAP=1",
    ]

    include_dirs = [
      "${bouffalo_sdk_root}/components/os/freertos/include",
      "${bouffalo_sdk_root}/components/os/freertos/portable/GCC/RISC-V/common",
      "${bouffalo_sdk_root}/components/os/freertos/portable/GCC/RISC-V/common/chip_specific_extensions/RV32I_CLINT_no_extensions",

      #"${bouffalo_sdk_root}/components/os/freertos/posix/include",
      "${chip_root}/examples/platform/bouffalolab/bl616",
    ]
  }

  source_set("${sdk_target_name}_freertos") {
    defines = [
      "portasmHANDLE_INTERRUPT=interrupt_entry",
      "default_interrupt_handler=freertos_risc_v_trap_handler",

      #"CONFIG_POSIX",
    ]

    include_dirs = [
      #memory heap
      "${bouffalo_sdk_root}/components/os/freertos/include",
      "${bouffalo_sdk_root}/components/os/freertos/portable/GCC/RISC-V/common",
      "${bouffalo_sdk_root}/components/os/freertos/portable/GCC/RISC-V/common/chip_specific_extensions/RV32I_CLINT_no_extensions",
    ]

    sources = [
      "${bouffalo_sdk_root}/components/os/freertos/croutine.c",
      "${bouffalo_sdk_root}/components/os/freertos/event_groups.c",
      "${bouffalo_sdk_root}/components/os/freertos/freertos_port.c",
      "${bouffalo_sdk_root}/components/os/freertos/list.c",
      "${bouffalo_sdk_root}/components/os/freertos/portable/GCC/RISC-V/common/port.c",
      "${bouffalo_sdk_root}/components/os/freertos/portable/GCC/RISC-V/common/portASM.S",
      "${bouffalo_sdk_root}/components/os/freertos/portable/MemMang/heap_3.c",
      "${bouffalo_sdk_root}/components/os/freertos/queue.c",
      "${bouffalo_sdk_root}/components/os/freertos/tasks.c",
      "${bouffalo_sdk_root}/components/os/freertos/timers.c",
    ]

    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_freertos",
    ]
  }

  config("${sdk_target_name}_config_mm") {
    include_dirs = [
      "${bouffalo_sdk_root}/components/mm",
      "${bouffalo_sdk_root}/components/mm/tlsf",
    ]
  }

  source_set("${sdk_target_name}_mm") {
    defines = [
      "configSTACK_ALLOCATION_FROM_SEPARATE_HEAP=1",
      "CONFIG_TLSF",
    ]

    include_dirs = [
      #memory heap
      "${bouffalo_sdk_root}/components/mm",
      "${bouffalo_sdk_root}/components/mm/tlsf",
    ]

    sources = [
      "${bouffalo_sdk_root}/components/mm/mem.c",
      "${bouffalo_sdk_root}/components/mm/tlsf/bflb_tlsf.c",
      "${bouffalo_sdk_root}/components/mm/tlsf/tlsf.c",
    ]

    cflags_c = [
      "-Wno-sign-compare",
      "-Wno-format",
      "-Wno-format-nonliteral",
      "-Wno-format-security",
    ]

    configs += [
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_freertos",
    ]

    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_mm",
    ]
  }

  config("${sdk_target_name}_config_easyflash4") {
    include_dirs = [ "${bouffalo_sdk_root}/components/easyflash4/inc" ]
  }

  source_set("${sdk_target_name}_easyflash4") {
    defines = [
      "CONFIG_EASYFLASH4",
      "BL616",
      "EF_ENV_CACHE_TABLE_SIZE=100",
    ]

    include_dirs = [ "${bouffalo_sdk_root}/components/easyflash4/inc" ]

    sources = [
      "${bouffalo_sdk_root}/components/easyflash4/src/easyflash.c",
      "${bouffalo_sdk_root}/components/easyflash4/src/easyflash_cli.c",
      "${bouffalo_sdk_root}/components/easyflash4/src/ef_env.c",
      "${bouffalo_sdk_root}/components/easyflash4/src/ef_env_legacy.c",
      "${bouffalo_sdk_root}/components/easyflash4/src/ef_env_legacy_wl.c",
      "${bouffalo_sdk_root}/components/easyflash4/src/ef_port.c",
      "${bouffalo_sdk_root}/components/easyflash4/src/ef_utils.c",
    ]

    cflags_c = [ "-Wno-sign-compare" ]

    configs += [
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_freertos",
      ":${sdk_target_name}_config_utils",
    ]

    public_configs = [ ":${sdk_target_name}_config_easyflash4" ]
  }

  config("${sdk_target_name}_config_littlefs") {
    include_dirs = [
      "${bouffalo_sdk_root}/components/fs/littlefs/littlefs",
      "${bouffalo_sdk_root}/components/fs/littlefs/port",
    ]

    defines = [ "LFS_THREADSAFE" ]
  }

  source_set("${sdk_target_name}_littlefs") {
    defines = [
      "CONFIG_LITTLEFS",
      "CONFIG_FREERTOS",
    ]

    include_dirs = [
      "${bouffalo_sdk_root}/components/fs/littlefs/littlefs",
      "${bouffalo_sdk_root}/components/fs/littlefs/port",
    ]

    sources = [
      "${bouffalo_sdk_root}/components/fs/littlefs/easyflash_port/lfs_easyflash.c",
      "${bouffalo_sdk_root}/components/fs/littlefs/littlefs/lfs.c",
      "${bouffalo_sdk_root}/components/fs/littlefs/littlefs/lfs_util.c",
      "${bouffalo_sdk_root}/components/fs/littlefs/port/lfs_xip_flash.c",
    ]

    cflags_c = [
      "-Wno-sign-compare",
      "-Wno-format",
      "-Wno-format-nonliteral",
      "-Wno-format-security",
      "-Wno-shadow",
    ]

    configs += [
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_freertos",
      ":${sdk_target_name}_config_utils",
    ]

    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_littlefs",
    ]
  }

  config("${sdk_target_name}_config_utils") {
    include_dirs = [
      "${bouffalo_sdk_root}/components/utils/log",
      "${bouffalo_sdk_root}/components/utils/log/bflog",
      "${bouffalo_sdk_root}/components/utils/bflb_mtd/include",
      "${bouffalo_sdk_root}/components/utils/bflb_ota",
      "${bouffalo_sdk_root}/components/utils/coredump",
      "${bouffalo_sdk_root}/components/utils/partition",
      "${bouffalo_sdk_root}/components/utils/getopt",
      "${bouffalo_sdk_root}/components/utils/ring_buffer",
      "${bouffalo_sdk_root}/components/utils/math/include",
      "${bouffalo_sdk_root}/components/utils/list",
    ]

    defines = [
      "CONFIG_LOG_LEVEL=0",
      "CONFIG_BFLOG",
      "CONFIG_BFLOG_DEBUG",
    ]
  }

  source_set("${sdk_target_name}_utils") {
    defines = [
      "CONFIG_LOG_LEVEL=0",
      "CONFIG_BFLOG",
      "CONFIG_BFLOG_DEBUG",
    ]

    if (defined(invoker.enable_debug_coredump) &&
        invoker.enable_debug_coredump) {
      defines += [ "CONFIG_COREDUMP" ]
    }

    sources = [
      "${bouffalo_sdk_root}/components/utils/bflb_mtd/bflb_boot2.c",
      "${bouffalo_sdk_root}/components/utils/bflb_mtd/bflb_mtd.c",
      "${bouffalo_sdk_root}/components/utils/bflb_ota/bflb_ota.c",
      "${bouffalo_sdk_root}/components/utils/bflb_ota/utils_sha256.c",
      "${bouffalo_sdk_root}/components/utils/getopt/utils_getopt.c",
      "${bouffalo_sdk_root}/components/utils/log/bflog/bflog.c",
      "${bouffalo_sdk_root}/components/utils/log/log.c",
      "${bouffalo_sdk_root}/components/utils/log/log_freertos.c",
      "${bouffalo_sdk_root}/components/utils/math/src/utils_base64.c",
      "${bouffalo_sdk_root}/components/utils/math/src/utils_crc.c",
      "${bouffalo_sdk_root}/components/utils/math/src/utils_hex.c",
      "${bouffalo_sdk_root}/components/utils/partition/partition.c",
      "${bouffalo_sdk_root}/components/utils/ring_buffer/ring_buffer.c",
    ]

    if (defined(invoker.enable_debug_coredump) &&
        invoker.enable_debug_coredump) {
      if (bouffalo_sdk_coredump_version == 1) {
        sources += [
          "${bouffalo_sdk_root}/components/utils/coredump/bin_fmt_v1.c",
          "${bouffalo_sdk_root}/components/utils/coredump/coredump.c",
          "${bouffalo_sdk_root}/components/utils/coredump/encoder_v1.c",
        ]
      } else if (bouffalo_sdk_coredump_version == 2) {
        sources += [
          "${bouffalo_sdk_root}/components/utils/coredump/bin_fmt_v2.c",
          "${bouffalo_sdk_root}/components/utils/coredump/coredump.c",
          "${bouffalo_sdk_root}/components/utils/coredump/encoder_v2.c",
        ]
      }
    }

    cflags_c = [
      "-Wno-sign-compare",
      "-Wno-type-limits",
      "-Wno-stringop-truncation",
      "-Wno-format",
      "-Wno-format-nonliteral",
      "-Wno-format-security",
      "-Wno-implicit-function-declaration",
    ]

    configs += [
      ":${sdk_target_name}_config_startup",
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_freertos",
    ]

    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_utils",
    ]
  }

  config("${sdk_target_name}_config_mbedtls") {
    include_dirs = [
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/include",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/hw_acc",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port",
    ]

    defines = [ "MBEDTLS_CONFIG_FILE=\"bl616-chip-mbedtls-config.h\"" ]
  }

  source_set("${sdk_target_name}_mbedtls") {
    defines = [ "CONFIG_FREERTOS" ]

    include_dirs =
        [ "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library" ]

    sources = [
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/hw_acc/aes_alt.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/hw_acc/bignum_alt.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/hw_acc/bignum_ext.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/hw_acc/ecp_alt.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/hw_acc/ecp_curves_alt.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/hw_acc/sha1_alt.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/hw_acc/sha256_alt.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/hw_acc/sha512_alt.c",
    ]

    sources += [
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/bignum.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/entropy_poll_alt.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/net_sockets.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/port/sec_mutex.c",
    ]

    sources += [
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls//library/poly1305.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls//library/ripemd160.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls//library/rsa.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls//library/rsa_internal.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/aes.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/aesni.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/arc4.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/aria.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/asn1parse.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/asn1write.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/base64.c",

      #      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/bignum.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/blowfish.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/camellia.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ccm.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/certs.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/chacha20.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/chachapoly.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/cipher.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/cipher_wrap.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/cmac.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/constant_time.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ctr_drbg.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/debug.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/des.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/dhm.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ecdh.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ecdsa.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ecjpake.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ecp.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ecp_curves.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/entropy.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/entropy_poll.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/error.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/gcm.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/havege.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/hkdf.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/hmac_drbg.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/md.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/md2.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/md4.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/md5.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/memory_buffer_alloc.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/mps_reader.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/mps_trace.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/nist_kw.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/oid.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/padlock.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/pem.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/pk.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/pk_wrap.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/pkcs11.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/pkcs12.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/pkcs5.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/pkparse.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/pkwrite.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/platform.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/platform_util.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/sha1.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/sha256.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/sha512.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ssl_cache.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ssl_ciphersuites.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ssl_cli.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ssl_cookie.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ssl_msg.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ssl_srv.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ssl_ticket.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ssl_tls.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/ssl_tls13_keys.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/threading.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/timing.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/version.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/version_features.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/x509.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/x509_create.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/x509_crl.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/x509_crt.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/x509_csr.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/x509write_crt.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/x509write_csr.c",
      "${bouffalo_sdk_root}/components/crypto/mbedtls/mbedtls/library/xtea.c",
    ]

    cflags_c = [
      "-Wno-sign-compare",
      "-Wno-implicit-function-declaration",
      "-Wno-format",
      "-Wno-format-security",
      "-Wno-format-nonliteral",
    ]

    configs += [
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_freertos",
      ":${sdk_target_name}_config_mm",
      ":${sdk_target_name}_config_lwip",
    ]

    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_mbedtls",
    ]
  }

  config("${sdk_target_name}_config_lwip") {
    include_dirs = [
      "${bouffalolab_iot_sdk_build_root}/bl616",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/system",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/include",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/compat/posix",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/include/compat/posix",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/lwip-port",
    ]

    include_dirs +=
        [ "${bouffalo_sdk_root}/components/net/lwip/lwip/src/apps/dhcpd" ]

    defines = [
      "CONFIG_LWIP",
      "CONFIG_MAC_TXQ_DEPTH=8",
      "CONFIG_MAC_RXQ_DEPTH=8",
    ]
  }

  source_set("${sdk_target_name}_lwip") {
    sources = [
      "${bouffalo_sdk_root}/components/net/lwip/lwip/lwip-port/FreeRTOS/sys_arch.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/api/api_lib.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/api/api_msg.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/api/err.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/api/netbuf.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/api/netdb.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/api/netifapi.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/api/sockets.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/api/tcpip.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/apps/http/fs.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/apps/mdns/mdns.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/def.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/dns.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/inet_chksum.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/init.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ip.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv4/autoip.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv4/dhcp.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv4/etharp.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv4/icmp.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv4/igmp.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv4/ip4.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv4/ip4_addr.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv4/ip4_frag.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv6/dhcp6.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv6/ethip6.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv6/icmp6.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv6/inet6.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv6/ip6.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv6/ip6_addr.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv6/ip6_frag.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv6/mld6.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/ipv6/nd6.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/mem.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/memp.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/netif.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/pbuf.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/raw.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/stats.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/sys.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/tcp.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/tcp_in.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/tcp_out.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/timeouts.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/core/udp.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/netif/ethernet.c",
    ]

    sources += [
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/apps/dhcpd/dhcp_server_raw.c",
      "${bouffalo_sdk_root}/components/net/lwip/lwip/src/apps/lwiperf/lwiperf.c",
    ]

    cflags_c = [
      "-Wno-sign-compare",
      "-Wno-format",
      "-Wno-format-nonliteral",
      "-Wno-format-security",
      "-Wno-unused-variable",
    ]

    configs += [
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_freertos",
      ":${sdk_target_name}_config_utils",
      ":${sdk_target_name}_config_mm",
      ":${sdk_target_name}_config_wifi",
    ]

    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_lwip",
    ]
  }

  config("${sdk_target_name}_config_wifi") {
    defines = [
      "CFG_VIF_MAX=2",
      "CFG_STA_MAX=4",
      "CFG_UMAC",
    ]

    include_dirs = [
      "${bouffalo_sdk_root}/components/wireless/wifi6/include",
      "${bouffalo_sdk_root}/components/wireless/wifi6/bl6_os_adapter/include",
      "${bouffalo_sdk_root}/components/wireless/wifi6/wifi6_lwip_adapter/include",
    ]
  }

  source_set("${sdk_target_name}_wifi") {
    defines = [ "CFG_IPV6" ]
    libs = [ "${bouffalo_sdk_root}/components/wireless/wifi6/lib/libwifi6.a" ]

    include_dirs =
        [ "${bouffalo_sdk_root}/components/wireless/wifi6/wifi6_lwip_adapter" ]

    sources = [
      "${bouffalo_sdk_root}/components/wireless/wifi6/bl6_os_adapter/src/platform_bouffalo_sdk.c",
      "${bouffalo_sdk_root}/components/wireless/wifi6/bl6_os_adapter/src/rtos_al.c",
      "${bouffalo_sdk_root}/components/wireless/wifi6/wifi6_lwip_adapter/cli_al.c",
      "${bouffalo_sdk_root}/components/wireless/wifi6/wifi6_lwip_adapter/mat.c",
      "${bouffalo_sdk_root}/components/wireless/wifi6/wifi6_lwip_adapter/net_al.c",
      "${bouffalo_sdk_root}/components/wireless/wifi6/wifi6_lwip_adapter/net_al_ext.c",
      "${bouffalo_sdk_root}/components/wireless/wifi6/wifi6_lwip_adapter/pbuf_custom_ref.c",
      "${bouffalo_sdk_root}/components/wireless/wifi6/wifi6_lwip_adapter/tx_buffer_copy.c",
      "${bouffalo_sdk_root}/components/wireless/wifi6/wifi6_lwip_adapter/wifi_pkt_hooks.c",
    ]

    cflags_c = [
      "-Wno-error",
      "-Wno-sign-compare",
      "-Wno-int-conversion",
      "-Wno-shadow",
      "-Wno-incompatible-pointer-types",
      "-Wno-implicit-function-declaration",
      "-Wno-format",
      "-Wno-format-nonliteral",
      "-Wno-discarded-qualifiers",
      "-Wno-format-security",
    ]

    configs += [
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_utils",
      ":${sdk_target_name}_config_shell",
      ":${sdk_target_name}_config_freertos",
      ":${sdk_target_name}_config_lwip",
    ]
    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_wifi",
    ]
  }

  config("${sdk_target_name}_config_ble") {
    defines = [
      "BFLB_BLE",
      "CONFIG_BT_CONN=1",

      "CONFIG_SET_TX_PWR",
      "CFG_CON=1",
      "CFG_BLE",
      "CFG_SLEEP",
      "CFG_BT_RESET",
      "CONFIG_BT_PERIPHERAL=1",
      "CFG_BLE_TX_BUFF_DATA=2",
      "CONFIG_BT_GATT_DYNAMIC_DB",
      "CONFIG_BT_GATT_SERVICE_CHANGED",
      "CONFIG_BT_SETTINGS_CCC_LAZY_LOADING",
      "CONFIG_BT_KEYS_OVERWRITE_OLDEST",
      "CONFIG_BT_GAP_PERIPHERAL_PREF_PARAMS",
      "CONFIG_BT_BONDABLE",
      "CONFIG_BT_ASSERT",
      "CFG_BLE_STACK_DBG_PRINT",
    ]

    include_dirs = [
      "${bouffalo_sdk_root}/components/wireless/bluetooth/btblecontroller/btble_inc",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/include",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/include/bluetooth",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/port/include",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/include/zephyr",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/include/misc",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/include",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/include/drivers/bluetooth",
    ]
  }

  source_set("${sdk_target_name}_ble") {
    defines = [
      "CONFIG_BT_L2CAP_DYNAMIC_CHANNEL",
      "CONFIG_BT_GATT_CLIENT",
      "CONFIG_BT_CONN=1",
      "CONFIG_BT_GATT_DIS_PNP",
      "CONFIG_BT_GATT_DIS_SERIAL_NUMBER",
      "CONFIG_BT_GATT_DIS_FW_REV",
      "CONFIG_BT_GATT_DIS_HW_REV",
      "CONFIG_BT_GATT_DIS_SW_REV",
      "CONFIG_BT_ECC",
      "CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING",
      "CONFIG_BT_HCI_VS_EVT_USER",
      "CONFIG_BT_SETTINGS_USE_PRINTK",
      "CONFIG_BLE_MULTI_ADV",
    ]

    libs = [ "${bouffalo_sdk_root}/components/wireless/bluetooth/btblecontroller/lib/libbtblecontroller_bl616_ble1m0s1bredr0.a" ]

    include_dirs = [
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/bl_hci_wrapper",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/include",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/include/misc",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/tinycrypt/include/tinycrypt",
    ]

    sources = [
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/bl_hci_wrapper/bl_hci_wrapper.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/atomic_c.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/buf.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/dec.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/log.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/poll.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/common/work_q.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/hci_onchip/hci_driver.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/att.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/bl_host_assist.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/conn.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/crypto.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/gatt.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/hci_core.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/l2cap.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/multi_adv.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/settings.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/host/uuid.c",
      "${bouffalo_sdk_root}/components/wireless/bluetooth/blestack/src/port/bl_port.c",
    ]

    cflags_c = [
      "-Wno-sign-compare",
      "-Wno-implicit-function-declaration",
      "-Wno-format",
      "-Wno-format-nonliteral",
      "-Wno-format-security",
      "-Wno-discarded-qualifiers",
      "-Wno-misleading-indentation",
    ]

    configs += [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_utils",
      ":${sdk_target_name}_config_freertos",
    ]
    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_ble",
    ]
  }

  config("${sdk_target_name}_config_openthread_port") {
    include_dirs = [
      "${bouffalo_sdk_root}/components/wireless/thread/openthread_port/include",
      "${bouffalo_sdk_root}/components/wireless/thread/openthread_utils/include",
    ]
  }

  source_set("${sdk_target_name}_openthread_port") {
    import("//build_overrides/openthread.gni")

    defines = [
      "CONFIG_BL_SDK",
      "CHIP_HDR=<bl616.h>",
      "CHIP_GLB_HDR=<bl616_glb.h>",
      "MAC_ADDRESS_MAX_NUM=3",
    ]

    include_dirs = [
      "${bouffalo_sdk_root}/components/wireless/lmac154/lmac154/include",
      "${bouffalo_sdk_root}/components/wireless/thread/openthread_port",
    ]

    sources = [
      "${bouffalo_sdk_root}/components/wireless/thread/openthread_port/ot_alarm_bl616.c",
      "${bouffalo_sdk_root}/components/wireless/thread/openthread_port/ot_radio.c",
      "${bouffalo_sdk_root}/components/wireless/thread/openthread_port/ot_radio_bflb.c",
      "${bouffalo_sdk_root}/components/wireless/thread/openthread_port/ot_sys_bflb.c",
    ]

    if (defined(invoker.bouffalo_sdk_component_easyflash_enabled) &&
        invoker.bouffalo_sdk_component_easyflash_enabled) {
      sources += [ "${bouffalo_sdk_root}/components/wireless/thread/openthread_port/ot_settings_easyflash.c" ]
    } else {
      sources += [ "${bouffalo_sdk_root}/components/wireless/thread/openthread_port/ot_settings_littlefs.c" ]
    }

    libs = [
      "${bouffalo_sdk_root}/components/wireless/lmac154/lmac154/lib/liblmac154.a",
      "${bouffalo_sdk_root}/components/wireless/thread/openthread_utils/lib/libopenthread_utils.a",
    ]

    cflags_c = [ "-Wno-sign-compare" ]

    configs += [ ":${sdk_target_name}_config_freertos" ]
    public_configs = [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_utils",
      ":${sdk_target_name}_config_mm",
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_shell",
      ":${sdk_target_name}_config_littlefs",
      ":${sdk_target_name}_config_openthread_port",
    ]

    public_deps = [
      "${chip_root}/third_party/openthread/platforms:libopenthread-platform-utils",
      "${openthread_root}/src/core:libopenthread_core_headers",
    ]
  }

  config("${sdk_target_name}_config_factory_data") {
    include_dirs =
        [ "${bouffalo_sdk_root}/components/wireless/matter/mfd/include" ]
  }

  source_set("${sdk_target_name}_factory_data") {
    defines = [ "BL_MFD_PLAT_H=\"bl_mfd_bl616.h\"" ]
    sources = [
      "${bouffalo_sdk_root}/components/wireless/matter/mfd/bl_mfd.c",
      "${bouffalo_sdk_root}/components/wireless/matter/mfd/bl_mfd_decrypt_bl616.c",
    ]

    configs += [
      ":${sdk_target_name}_config",
      ":${sdk_target_name}_config_std_drv",
      ":${sdk_target_name}_config_lhal",
      ":${sdk_target_name}_config_utils",
    ]
    public_configs = [ ":${sdk_target_name}_config_factory_data" ]
  }

  group(sdk_target_name) {
    public_deps = [
      ":${sdk_target_name}_board",
      ":${sdk_target_name}_freertos",
      ":${sdk_target_name}_lhal",
      ":${sdk_target_name}_libc",
      ":${sdk_target_name}_mbedtls",
      ":${sdk_target_name}_mm",
      ":${sdk_target_name}_rf",
      ":${sdk_target_name}_shell",
      ":${sdk_target_name}_startup",
      ":${sdk_target_name}_std_drv",
      ":${sdk_target_name}_sys",
      ":${sdk_target_name}_utils",
    ]

    if (defined(invoker.bouffalo_sdk_component_easyflash_enabled) &&
        invoker.bouffalo_sdk_component_easyflash_enabled) {
      public_deps += [ ":${sdk_target_name}_easyflash4" ]
    } else {
      public_deps += [ ":${sdk_target_name}_littlefs" ]
    }

    if (defined(invoker.chip_enable_wifi) && invoker.chip_enable_wifi) {
      public_deps += [ ":${sdk_target_name}_wifi" ]
      public_deps += [ ":${sdk_target_name}_lwip" ]
    } else if (defined(invoker.chip_enable_openthread) &&
               invoker.chip_enable_openthread) {
      public_deps += [ ":${sdk_target_name}_openthread_port" ]
    }

    if (defined(invoker.chip_config_network_layer_ble) &&
        invoker.chip_config_network_layer_ble) {
      public_deps += [ ":${sdk_target_name}_ble" ]
    }

    if (defined(invoker.chip_enable_factory_data) &&
        invoker.chip_enable_factory_data) {
      public_deps += [ ":${sdk_target_name}_factory_data" ]
    }
  }
}
