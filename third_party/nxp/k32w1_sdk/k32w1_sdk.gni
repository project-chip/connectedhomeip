# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/k32w1_sdk.gni")
import("//build_overrides/mbedtls.gni")
import("//build_overrides/openthread.gni")

import("${build_root}/config/compiler/compiler.gni")
import("${chip_root}/src/crypto/crypto.gni")
import("${chip_root}/src/lib/core/core.gni")
import("${chip_root}/src/platform/device.gni")
import("${chip_root}/src/platform/nxp/k32w/k32w1/args.gni")

declare_args() {
  # Location of the k32w1 SDK.
  k32w1_sdk_root = getenv("NXP_K32W1_SDK_ROOT")
  use_smu2_as_system_memory = false
}

openthread_nxp_root = "${chip_root}/third_party/openthread/ot-nxp"

assert(k32w1_sdk_root != "", "k32w1_sdk_root must be specified")

assert(!(use_smu2_as_system_memory && !chip_openthread_ftd),
       "SMU2 can be used as system memory only with OT-FTD suppport")

# Defines an k32w1 SDK build target.
#
# Parameters:
#   k32w1_sdk_root - The location of the k32w1 SDK.
#   sources - Extra source files to build.
template("k32w1_sdk") {
  if (defined(invoker.k32w1_sdk_root)) {
    k32w1_sdk_root = invoker.k32w1_sdk_root
  }

  assert(chip_with_low_power == 0 ||
             (chip_with_low_power == 1 && chip_with_ot_cli == 0),
         "Please disable low power if openthread CLI is needed!")

  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    # We want to treat SDK headers as system headers, so that warnings in those
    # headers are not fatal.  Therefore don't add them directly to include_dirs;
    # we will add them to cflags below instead.
    _sdk_include_dirs = [
      "${k32w1_sdk_root}/devices/K32W1480",
      "${k32w1_sdk_root}/CMSIS/Core/Include",
      "${k32w1_sdk_root}/platform/drivers/snt",
      "${k32w1_sdk_root}/platform/drivers/spc",
      "${k32w1_sdk_root}/platform/drivers/ccm32k",
      "${k32w1_sdk_root}/platform/drivers/wuu",
      "${k32w1_sdk_root}/platform/drivers/cmc",
      "${k32w1_sdk_root}/platform/drivers/lpspi",
      "${k32w1_sdk_root}/components/osa",
      "${k32w1_sdk_root}/components/lists",
      "${k32w1_sdk_root}/components/messaging",
      "${k32w1_sdk_root}/components/mem_manager",
      "${k32w1_sdk_root}/components/panic",
      "${k32w1_sdk_root}/components/serial_manager",
      "${k32w1_sdk_root}/components/uart",
      "${k32w1_sdk_root}/components/gpio",
      "${k32w1_sdk_root}/components/led",
      "${k32w1_sdk_root}/components/button",
      "${k32w1_sdk_root}/components/timer_manager",
      "${k32w1_sdk_root}/components/time_stamp",
      "${k32w1_sdk_root}/components/timer",
      "${k32w1_sdk_root}/components/rpmsg",
      "${k32w1_sdk_root}/components/internal_flash",
      "${k32w1_sdk_root}/components/reset",
      "${k32w1_sdk_root}/components/flash/nor/lpspi",
      "${k32w1_sdk_root}/components/flash/nor",
      "${k32w1_sdk_root}/components/power_manager/boards",
      "${k32w1_sdk_root}/components/power_manager/boards/K32W148-EVK",
      "${k32w1_sdk_root}/components/power_manager/core",

      "${k32w1_sdk_root}/middleware/wireless/framework/DBG",
      "${k32w1_sdk_root}/middleware/wireless/framework/Common",
      "${k32w1_sdk_root}/middleware/wireless/framework/FunctionLib",
      "${k32w1_sdk_root}/middleware/wireless/framework/HWParameter",
      "${k32w1_sdk_root}/middleware/wireless/framework/SecLib",
      "${k32w1_sdk_root}/middleware/wireless/framework/RNG",
      "${k32w1_sdk_root}/middleware/wireless/framework/Sensors",
      "${k32w1_sdk_root}/middleware/wireless/framework/LowPower",
      "${k32w1_sdk_root}/middleware/wireless/framework/NVM/Source",
      "${k32w1_sdk_root}/middleware/wireless/framework/NVM/Interface",
      "${k32w1_sdk_root}/middleware/wireless/framework/ModuleInfo",
      "${k32w1_sdk_root}/middleware/wireless/framework/OtaSupport/Interface",
      "${k32w1_sdk_root}/middleware/wireless/framework/OtaSupport/Source",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/K32W1480",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/kw45_k32w1",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/include",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/kw45_k32w1/configs",
      "${openthread_nxp_root}/third_party/k32w1_sdk",

      "${k32w1_sdk_root}/middleware/multicore/rpmsg_lite/lib/include",
      "${k32w1_sdk_root}/middleware/multicore/rpmsg_lite/lib/include/platform/k32w1",
      "${k32w1_sdk_root}/middleware/multicore/mcmgr/src",

      "${k32w1_sdk_root}/middleware/wireless/ble_controller/interface",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/hci_transport/interface",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/port",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/application/common",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/application/common/gatt_db",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/application/common/gatt_db/macros",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/host/config",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/host/interface",

      "${k32w1_sdk_root}/middleware/mbedtls/port/sssapi",
      "${k32w1_sdk_root}/middleware/mbedtls/port/ksdk",
      "${k32w1_sdk_root}/middleware/mbedtls/include/mbedtls",
      "${k32w1_sdk_root}/middleware/mbedtls/include",
      "${k32w1_sdk_root}/middleware/secure-subsystem/inc",
      "${k32w1_sdk_root}/middleware/secure-subsystem/inc/snt",
      "${k32w1_sdk_root}/middleware/secure-subsystem/port/kw45_k4w1",

      "${k32w1_sdk_root}/middleware/wireless/XCVR/drv",
      "${k32w1_sdk_root}/middleware/wireless/XCVR/drv/nb2p4ghz",
      "${k32w1_sdk_root}/middleware/wireless/XCVR/drv/nb2p4ghz/configs/gen45",
      "${k32w1_sdk_root}/middleware/wireless/ieee-802.15.4/ieee_802_15_4/phy/interface",
      "${k32w1_sdk_root}/middleware/wireless/ieee-802.15.4/utils",

      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/include",
      "${k32w1_sdk_root}/rtos/freertos/libraries/3rdparty/mbedtls_config",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/portable/GCC/ARM_CM33_NTZ/non_secure",

      "${chip_root}/src/platform/nxp/k32w/k32w1",
    ]

    if (sdk_release == 1) {
      _sdk_include_dirs += [
        "${k32w1_sdk_root}/middleware/wireless/bluetooth/application/common/matter",
        "${k32w1_sdk_root}/devices/K32W1480/drivers",
        "${k32w1_sdk_root}/devices/K32W1480/utilities",
        "${k32w1_sdk_root}/devices/K32W1480/utilities/debug_console",
        "${k32w1_sdk_root}/devices/K32W1480/utilities/str",
        "${k32w1_sdk_root}/devices/K32W1480/utilities/format",
      ]
    } else {
      _sdk_include_dirs += [
        "${k32w1_sdk_root}/devices/KW45B41Z83/drivers",
        "${k32w1_sdk_root}/devices/KW45B41Z83/drivers/romapi",
        "${k32w1_sdk_root}/platform/drivers/common",
        "${k32w1_sdk_root}/platform/drivers/flash_k4",
        "${k32w1_sdk_root}/platform/drivers/gpio",
        "${k32w1_sdk_root}/platform/drivers/lpuart",
        "${k32w1_sdk_root}/platform/drivers/ltc",
        "${k32w1_sdk_root}/platform/drivers/port",
        "${k32w1_sdk_root}/platform/drivers/lptmr",
        "${k32w1_sdk_root}/platform/drivers/ccm32k",
        "${k32w1_sdk_root}/platform/drivers/imu",
        "${k32w1_sdk_root}/platform/drivers/crc",
        "${k32w1_sdk_root}/platform/utilities/misc_utilities",
        "${k32w1_sdk_root}/platform/utilities/debug_console",
        "${k32w1_sdk_root}/platform/utilities/str",
      ]
    }

    libs = [
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/host/lib/lib_ble_host_matter_cm33_gcc.a",
      "${k32w1_sdk_root}/middleware/wireless/framework/SecLib/lib_crypto_m33.a",
    ]

    defines = [
      "gMainThreadPriority_c=5",
      "CPU_K32W1480VFTA",
      "__STARTUP_CLEAR_BSS",
      "SERIAL_MANAGER_NON_BLOCKING_MODE=1",
      "SERIAL_USE_CONFIGURE_STRUCTURE=1",
      "SDK_COMPONENT_INTEGRATION=1",
      "SERIAL_PORT_TYPE_UART=1",
      "gSerialManagerMaxInterfaces_c=1",
      "SDK_OS_FREE_RTOS",
      "gAppHighSystemClockFrequency_d=1",

      "USE_NBU=1",
      "KW45_A0_SUPPORT=0",
      "HAL_RPMSG_SELECT_ROLE=0",
      "TM_ENABLE_TIME_STAMP=1",
      "FSL_OSA_TASK_ENABLE=1",
      "FSL_OSA_MAIN_FUNC_ENABLE=1",
      "gAspCapability_d=1",
      "gNvStorageIncluded_d=1",
      "gUnmirroredFeatureSet_d=1",
      "gNvFragmentation_Enabled_d=1",
      "gAppButtonCnt_c=2",
      "gAppLowpowerEnabled_d=1",
      "BUTTON_SHORT_PRESS_THRESHOLD=1500",
      "BUTTON_LONG_PRESS_THRESHOLD=2500",
      "SSS_CONFIG_FILE=\"fsl_sss_config_snt.h\"",
      "SSCP_CONFIG_FILE=\"fsl_sscp_config_snt.h\"",

      "SDK_DEBUGCONSOLE=1",
      "NO_SYSCORECLK_UPD=0",
      "USE_RTOS=1",
      "USE_SDK_OSA=0",
      "FSL_RTOS_FREE_RTOS=1",
      "MinimalHeapSize_c=0x8C00",
      "gMemManagerLightExtendHeapAreaUsage=0",
      "DEBUG_SERIAL_INTERFACE_INSTANCE=0",
      "APP_SERIAL_INTERFACE_INSTANCE=1",

      "configFRTOS_MEMORY_SCHEME=4",
      "osCustomStartup=1",

      "ENABLE_RAM_VECTOR_TABLE=1",

      "CHIP_ENABLE_OPENTHREAD=1",
      "gUseHciTransportDownward_d=1",
      "gAppMaxConnections_c=1",
      "gL2caMaxLeCbChannels_c=2",
      "gGapSimultaneousEAChainedReports_c=0",
      "gTmrStackTimers_c= 3 + gAppMaxConnections_c * 2 + gL2caMaxLeCbChannels_c + gGapSimultaneousEAChainedReports_c",
      "gAppUseBonding_d=0",
      "gAppUsePairing_d=0",
      "gAppUsePrivacy_d=0",
      "gGattUseUpdateDatabaseCopyProc_c=0",
      "gBleBondIdentityHeaderSize_c=56",
      "gPasskeyValue_c=999999",
      "gMainThreadStackSize_c=3096",
      "gHost_TaskStackSize_c=2400",
      "gBleSetMacAddrFromVendorCommand_d=1",
      "gLoggingActive_d=0",
      "gLogRingPlacementOffset_c=0xF000",
      "CHIP_PLAT_NVM_SUPPORT=1",
      "mAdvertisingDefaultTxPower_c=0",  # default advertising TX power
      "mConnectionDefaultTxPower_c=0",  # default connection TX power
      "BLE_HIGH_TX_POWER=0",  # when enabled overwrite default tx power with
                              # following values gAdvertisingPowerLeveldBm_c and
                              # gConnectPowerLeveldBm_c
      "gAdvertisingPowerLeveldBm_c=0",
      "gConnectPowerLeveldBm_c=0",
    ]

    if (chip_with_low_power == 1 && chip_logging == true) {
      print(
          "WARNING: enabling logs in low power might break the LP timings. Use at your own risk!")
      print("WARNING: set chip_logging=false to disable logging.")
    }

    if (chip_mdns == "platform") {
      defines += [
        "OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE=1",
        "OPENTHREAD_CONFIG_ECDSA_ENABLE=1",
        "OPENTHREAD_CONFIG_DNS_CLIENT_SERVICE_DISCOVERY_ENABLE=1",
        "OPENTHREAD_CONFIG_DNS_CLIENT_ENABLE=1",
      ]
    }

    if (chip_with_ot_cli == 1) {
      defines += [ "CHIP_DEVICE_CONFIG_THREAD_ENABLE_CLI=1" ]
    }

    if (use_smu2_as_system_memory) {
      defines += [
        "__STARTUP_CLEAR_SMU2",
        "USE_SMU2_AS_SYSTEM_MEMORY",
      ]
    }

    if (chip_with_low_power == 1) {
      defines += [
        "chip_with_low_power=1",
        "cPWR_UsePowerDownMode=1",
        "gAppLowpowerEnabled_d=1",
      ]

      if (chip_logging == false) {
        defines += [
          "K32W_LOG_ENABLED=0",
          "gUartDebugConsole_d=0",
        ]
      } else {
        defines += [
          "K32W_LOG_ENABLED=1",
          "OSA_USED=1",
          "gUartDebugConsole_d=1",
        ]
      }
    } else {
      defines += [
        "gAppLedCnt_c=2",
        "K32W_LOG_ENABLED=1",
        "gUartDebugConsole_d=1",
      ]
    }

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }

    cflags = [
      "-Wno-unused-function",
      "-Wno-conversion",
      "-Wno-sign-compare",
      "-Wno-clobbered",
      "-Wno-implicit-fallthrough",
      "-fno-optimize-strlen",
      "-mthumb",
      "-MMD",
      "-MP",
    ]

    cflags += [
      # TODO After upgrading the compiler we started to see new error from address
      # warning. To allow PR that rolls up compiler we have suppress this warning
      # as an error temporarily.
      # see https://github.com/project-chip/connectedhomeip/issues/26221
      "-Wno-error=address",
    ]

    # Now add our "system-header" include dirs
    foreach(include_dir, _sdk_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }
  }

  # TODO - Break up this monolith and make it configurable.
  source_set(sdk_target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }

    if (sdk_release == 1) {
      sources += [
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_ccm32k.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_clock.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_cmc.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_crc.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_gpio.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_imu.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_k4_controller.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_k4_flash.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_lpspi.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_lptmr.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_lpuart.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_ltc.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_snt.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_spc.c",
        "${k32w1_sdk_root}/devices/K32W1480/drivers/fsl_wuu.c",
        "${k32w1_sdk_root}/devices/K32W1480/utilities/debug_console/fsl_debug_console.c",
        "${k32w1_sdk_root}/devices/K32W1480/utilities/fsl_assert.c",
        "${k32w1_sdk_root}/devices/K32W1480/utilities/str/fsl_str.c",
        "${k32w1_sdk_root}/middleware/wireless/bluetooth/application/common/matter/ble_init.c",
      ]
    } else {
      sources += [
        "${k32w1_sdk_root}/devices/KW45B41Z83/drivers/fsl_clock.c",
        "${k32w1_sdk_root}/middleware/wireless/bluetooth/application/common/ble_init.c",
        "${k32w1_sdk_root}/platform/drivers/ccm32k/fsl_ccm32k.c",
        "${k32w1_sdk_root}/platform/drivers/cmc/fsl_cmc.c",
        "${k32w1_sdk_root}/platform/drivers/crc/fsl_crc.c",
        "${k32w1_sdk_root}/platform/drivers/flash_k4/fsl_k4_controller.c",
        "${k32w1_sdk_root}/platform/drivers/flash_k4/fsl_k4_flash.c",
        "${k32w1_sdk_root}/platform/drivers/gpio/fsl_gpio.c",
        "${k32w1_sdk_root}/platform/drivers/imu/fsl_imu.c",
        "${k32w1_sdk_root}/platform/drivers/lpspi/fsl_lpspi.c",
        "${k32w1_sdk_root}/platform/drivers/lptmr/fsl_lptmr.c",
        "${k32w1_sdk_root}/platform/drivers/lpuart/fsl_lpuart.c",
        "${k32w1_sdk_root}/platform/drivers/ltc/fsl_ltc.c",
        "${k32w1_sdk_root}/platform/drivers/snt/fsl_snt.c",
        "${k32w1_sdk_root}/platform/drivers/spc/fsl_spc.c",
        "${k32w1_sdk_root}/platform/drivers/wuu/fsl_wuu.c",
        "${k32w1_sdk_root}/platform/utilities/assert/fsl_assert.c",
        "${k32w1_sdk_root}/platform/utilities/debug_console/fsl_debug_console.c",
        "${k32w1_sdk_root}/platform/utilities/str/fsl_str.c",
      ]
    }

    sources += [
      "${k32w1_sdk_root}/components/button/fsl_component_button.c",
      "${k32w1_sdk_root}/components/flash//nor/lpspi/fsl_lpspi_mem_adapter.c",
      "${k32w1_sdk_root}/components/flash//nor/lpspi/fsl_lpspi_nor_flash.c",
      "${k32w1_sdk_root}/components/gpio/fsl_adapter_gpio.c",
      "${k32w1_sdk_root}/components/internal_flash/fsl_adapter_k4_flash.c",
      "${k32w1_sdk_root}/components/led/fsl_component_led.c",
      "${k32w1_sdk_root}/components/lists/fsl_component_generic_list.c",
      "${k32w1_sdk_root}/components/mem_manager/fsl_component_mem_manager_light.c",
      "${k32w1_sdk_root}/components/messaging/fsl_component_messaging.c",
      "${k32w1_sdk_root}/components/osa/fsl_os_abstraction_free_rtos.c",
      "${k32w1_sdk_root}/components/panic/fsl_component_panic.c",
      "${k32w1_sdk_root}/components/power_manager/boards/K32W148-EVK/fsl_pm_board.c",
      "${k32w1_sdk_root}/components/power_manager/core/fsl_pm_core.c",
      "${k32w1_sdk_root}/components/reset/fsl_adapter_reset.c",
      "${k32w1_sdk_root}/components/rpmsg/fsl_adapter_rpmsg.c",
      "${k32w1_sdk_root}/components/serial_manager/fsl_component_serial_manager.c",
      "${k32w1_sdk_root}/components/serial_manager/fsl_component_serial_port_uart.c",
      "${k32w1_sdk_root}/components/time_stamp/fsl_adapter_lptmr_time_stamp.c",
      "${k32w1_sdk_root}/components/timer/fsl_adapter_lptmr.c",
      "${k32w1_sdk_root}/components/timer_manager/fsl_component_timer_manager.c",
      "${k32w1_sdk_root}/components/uart/fsl_adapter_lpuart.c",
      "${k32w1_sdk_root}/devices/K32W1480/gcc/startup_K32W1480.S",
      "${k32w1_sdk_root}/devices/K32W1480/system_K32W1480.c",
      "${k32w1_sdk_root}/middleware/multicore/mcmgr/src/mcmgr.c",
      "${k32w1_sdk_root}/middleware/multicore/mcmgr/src/mcmgr_imu_internal.c",
      "${k32w1_sdk_root}/middleware/multicore/mcmgr/src/mcmgr_internal_core_api_k32w1.c",
      "${k32w1_sdk_root}/middleware/multicore/rpmsg_lite/lib/common/llist.c",
      "${k32w1_sdk_root}/middleware/multicore/rpmsg_lite/lib/rpmsg_lite/porting/environment/rpmsg_env_freertos.c",
      "${k32w1_sdk_root}/middleware/multicore/rpmsg_lite/lib/rpmsg_lite/porting/platform/k32w1/rpmsg_platform.c",
      "${k32w1_sdk_root}/middleware/multicore/rpmsg_lite/lib/rpmsg_lite/rpmsg_lite.c",
      "${k32w1_sdk_root}/middleware/multicore/rpmsg_lite/lib/virtio/virtqueue.c",
      "${k32w1_sdk_root}/middleware/secure-subsystem/port/kw45_k4w1/sss_aes.c",
      "${k32w1_sdk_root}/middleware/secure-subsystem/port/kw45_k4w1/sss_aes_cmac.c",
      "${k32w1_sdk_root}/middleware/secure-subsystem/port/kw45_k4w1/sss_ecdh.c",
      "${k32w1_sdk_root}/middleware/secure-subsystem/port/kw45_k4w1/sss_init.c",
      "${k32w1_sdk_root}/middleware/secure-subsystem/port/kw45_k4w1/sss_sha256.c",
      "${k32w1_sdk_root}/middleware/secure-subsystem/src/sscp/fsl_sscp_mu.c",
      "${k32w1_sdk_root}/middleware/secure-subsystem/src/sscp/fsl_sss_mgmt.c",
      "${k32w1_sdk_root}/middleware/secure-subsystem/src/sscp/fsl_sss_sscp.c",
      "${k32w1_sdk_root}/middleware/wireless/ble_controller/src/controller_api.c",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/application/common/ble_conn_manager.c",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/application/common/gatt_db/gatt_database.c",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/hci_transport/source/hcit_generic_adapter_interface.c",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/host/config/ble_globals.c",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/port/fwk_generic_list.c",
      "${k32w1_sdk_root}/middleware/wireless/bluetooth/port/fwk_timer_manager.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/Common/rtos/freertos/heap_mem_manager.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/FunctionLib/FunctionLib.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/HWParameter/HWParameter.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/LowPower/PWR.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/LowPower/PWR_systicks.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/NVM/Source/NV_Flash.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/OtaSupport/Source/OtaExternalFlash.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/OtaSupport/Source/OtaSupport.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/RNG/RNG.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/SecLib/SecLib_sss.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/Sensors/sensors.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/K32W1480/clock_config.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/K32W1480/pin_mux.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/app_services_init.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/board.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/board_comp.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/board_dcdc.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/board_extflash.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/board_lp.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/boards/kw45_k32w1/hardware_init.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/kw45_k32w1/fwk_platform.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/kw45_k32w1/fwk_platform_ble.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/kw45_k32w1/fwk_platform_extflash.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/kw45_k32w1/fwk_platform_ics.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/kw45_k32w1/fwk_platform_lowpower.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/kw45_k32w1/fwk_platform_ot.c",
      "${k32w1_sdk_root}/middleware/wireless/framework/platform/kw45_k32w1/fwk_platform_ota.c",
      "${k32w1_sdk_root}/middleware/wireless/ieee-802.15.4/ieee_802_15_4/phy/source/PhyTime.c",
      "${k32w1_sdk_root}/middleware/wireless/ieee-802.15.4/ieee_802_15_4/phy/source/SerialDevice/ASP.c",
      "${k32w1_sdk_root}/middleware/wireless/ieee-802.15.4/ieee_802_15_4/phy/source/SerialDevice/Phy.c",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/croutine.c",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/event_groups.c",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/list.c",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/portable/GCC/ARM_CM33_NTZ/non_secure/port.c",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/portable/GCC/ARM_CM33_NTZ/non_secure/portasm.c",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/queue.c",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/stream_buffer.c",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/tasks.c",
      "${k32w1_sdk_root}/rtos/freertos/freertos_kernel/timers.c",
    ]

    if (chip_with_low_power == 1) {
      sources += []
    }

    if (!defined(public_deps)) {
      public_deps = []
    }

    public_deps += [ "${openthread_root}/src/core:libopenthread_core_headers" ]

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${sdk_target_name}_config" ]
  }
}
