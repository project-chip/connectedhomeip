/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.openthread.commissioner;

public class commissionerModuleJNI {
  public final static native long new_ByteArray__SWIG_0();
  public final static native long new_ByteArray__SWIG_1(long jarg1, ByteArray jarg1_);
  public final static native long ByteArray_capacity(long jarg1, ByteArray jarg1_);
  public final static native void ByteArray_reserve(long jarg1, ByteArray jarg1_, long jarg2);
  public final static native boolean ByteArray_isEmpty(long jarg1, ByteArray jarg1_);
  public final static native void ByteArray_clear(long jarg1, ByteArray jarg1_);
  public final static native long new_ByteArray__SWIG_2(int jarg1, byte jarg2);
  public final static native int ByteArray_doSize(long jarg1, ByteArray jarg1_);
  public final static native void ByteArray_doAdd__SWIG_0(long jarg1, ByteArray jarg1_, byte jarg2);
  public final static native void ByteArray_doAdd__SWIG_1(long jarg1, ByteArray jarg1_, int jarg2, byte jarg3);
  public final static native byte ByteArray_doRemove(long jarg1, ByteArray jarg1_, int jarg2);
  public final static native byte ByteArray_doGet(long jarg1, ByteArray jarg1_, int jarg2);
  public final static native byte ByteArray_doSet(long jarg1, ByteArray jarg1_, int jarg2, byte jarg3);
  public final static native void ByteArray_doRemoveRange(long jarg1, ByteArray jarg1_, int jarg2, int jarg3);
  public final static native void delete_ByteArray(long jarg1);

    static {
        try {
            System.loadLibrary("commissioner-java");
        } catch (UnsatisfiedLinkError e) {
            System.err.println("failed to load native commissioner library!\n" + e);
            System.exit(1);
        }
    }

  public final static native long new_ChannelMask__SWIG_0();
  public final static native long new_ChannelMask__SWIG_1(long jarg1, ChannelMask jarg1_);
  public final static native long ChannelMask_capacity(long jarg1, ChannelMask jarg1_);
  public final static native void ChannelMask_reserve(long jarg1, ChannelMask jarg1_, long jarg2);
  public final static native boolean ChannelMask_isEmpty(long jarg1, ChannelMask jarg1_);
  public final static native void ChannelMask_clear(long jarg1, ChannelMask jarg1_);
  public final static native long new_ChannelMask__SWIG_2(int jarg1, long jarg2, ChannelMaskEntry jarg2_);
  public final static native int ChannelMask_doSize(long jarg1, ChannelMask jarg1_);
  public final static native void ChannelMask_doAdd__SWIG_0(long jarg1, ChannelMask jarg1_, long jarg2, ChannelMaskEntry jarg2_);
  public final static native void ChannelMask_doAdd__SWIG_1(long jarg1, ChannelMask jarg1_, int jarg2, long jarg3, ChannelMaskEntry jarg3_);
  public final static native long ChannelMask_doRemove(long jarg1, ChannelMask jarg1_, int jarg2);
  public final static native long ChannelMask_doGet(long jarg1, ChannelMask jarg1_, int jarg2);
  public final static native long ChannelMask_doSet(long jarg1, ChannelMask jarg1_, int jarg2, long jarg3, ChannelMaskEntry jarg3_);
  public final static native void ChannelMask_doRemoveRange(long jarg1, ChannelMask jarg1_, int jarg2, int jarg3);
  public final static native void delete_ChannelMask(long jarg1);
  public final static native long new_StringVector__SWIG_0();
  public final static native long new_StringVector__SWIG_1(long jarg1, StringVector jarg1_);
  public final static native long StringVector_capacity(long jarg1, StringVector jarg1_);
  public final static native void StringVector_reserve(long jarg1, StringVector jarg1_, long jarg2);
  public final static native boolean StringVector_isEmpty(long jarg1, StringVector jarg1_);
  public final static native void StringVector_clear(long jarg1, StringVector jarg1_);
  public final static native long new_StringVector__SWIG_2(int jarg1, String jarg2);
  public final static native int StringVector_doSize(long jarg1, StringVector jarg1_);
  public final static native void StringVector_doAdd__SWIG_0(long jarg1, StringVector jarg1_, String jarg2);
  public final static native void StringVector_doAdd__SWIG_1(long jarg1, StringVector jarg1_, int jarg2, String jarg3);
  public final static native String StringVector_doRemove(long jarg1, StringVector jarg1_, int jarg2);
  public final static native String StringVector_doGet(long jarg1, StringVector jarg1_, int jarg2);
  public final static native String StringVector_doSet(long jarg1, StringVector jarg1_, int jarg2, String jarg3);
  public final static native void StringVector_doRemoveRange(long jarg1, StringVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_StringVector(long jarg1);
  public final static native long kMinCommissionerCredentialLength_get();
  public final static native long kMaxCommissionerCredentialLength_get();
  public final static native long kMinJoinerDeviceCredentialLength_get();
  public final static native long kMaxJoinerDeviceCredentialLength_get();
  public final static native long kMaxPSKcLength_get();
  public final static native long kMaxNetworkNameLength_get();
  public final static native long kExtendedAddrLength_get();
  public final static native long kExtendedPanIdLength_get();
  public final static native long kMaxSteeringDataLength_get();
  public final static native long kJoinerIdLength_get();
  public final static native long kJoinerRouterKekLength_get();
  public final static native int kDefaultJoinerUdpPort_get();
  public final static native int kDefaultAeUdpPort_get();
  public final static native int kDefaultNmkpUdpPort_get();
  public final static native int kPrimaryBbrAloc16_get();
  public final static native boolean kRadio915Mhz_get();
  public final static native long kRadio915MhzOqpskChannelMask_get();
  public final static native long kRadio2P4GhzOqpskChannelMask_get();
  public final static native short kRadioChannelPage0_get();
  public final static native short kRadioChannelPage2_get();
  public final static native int ErrorCode_kNone_get();
  public final static native int ErrorCode_kCancelled_get();
  public final static native int ErrorCode_kInvalidArgs_get();
  public final static native int ErrorCode_kInvalidCommand_get();
  public final static native int ErrorCode_kTimeout_get();
  public final static native int ErrorCode_kNotFound_get();
  public final static native int ErrorCode_kSecurity_get();
  public final static native int ErrorCode_kUnimplemented_get();
  public final static native int ErrorCode_kBadFormat_get();
  public final static native int ErrorCode_kBusy_get();
  public final static native int ErrorCode_kOutOfMemory_get();
  public final static native int ErrorCode_kIOError_get();
  public final static native int ErrorCode_kIOBusy_get();
  public final static native int ErrorCode_kAlreadyExists_get();
  public final static native int ErrorCode_kAborted_get();
  public final static native int ErrorCode_kInvalidState_get();
  public final static native int ErrorCode_kRejected_get();
  public final static native int ErrorCode_kUnknown_get();
  public final static native long new_Error__SWIG_0();
  public final static native long new_Error__SWIG_1(int jarg1, String jarg2);
  public final static native long new_Error__SWIG_2(long jarg1, Error jarg1_);
  public final static native int Error_getCode(long jarg1, Error jarg1_);
  public final static native String Error_getMessage(long jarg1, Error jarg1_);
  public final static native String Error_toString(long jarg1, Error jarg1_);
  public final static native void Error_ignoreError(long jarg1, Error jarg1_);
  public final static native void delete_Error(long jarg1);
  public final static native short kMlrStatusSuccess_get();
  public final static native short kMlrStatusInvalid_get();
  public final static native short kMlrStatusNoResources_get();
  public final static native short kMlrStatusNotPrimary_get();
  public final static native short kMlrStatusFailure_get();
  public final static native void CommissionerDataset_BorderAgentLocator_set(long jarg1, CommissionerDataset jarg1_, int jarg2);
  public final static native int CommissionerDataset_BorderAgentLocator_get(long jarg1, CommissionerDataset jarg1_);
  public final static native void CommissionerDataset_SessionId_set(long jarg1, CommissionerDataset jarg1_, int jarg2);
  public final static native int CommissionerDataset_SessionId_get(long jarg1, CommissionerDataset jarg1_);
  public final static native void CommissionerDataset_SteeringData_set(long jarg1, CommissionerDataset jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long CommissionerDataset_SteeringData_get(long jarg1, CommissionerDataset jarg1_);
  public final static native void CommissionerDataset_AeSteeringData_set(long jarg1, CommissionerDataset jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long CommissionerDataset_AeSteeringData_get(long jarg1, CommissionerDataset jarg1_);
  public final static native void CommissionerDataset_NmkpSteeringData_set(long jarg1, CommissionerDataset jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long CommissionerDataset_NmkpSteeringData_get(long jarg1, CommissionerDataset jarg1_);
  public final static native void CommissionerDataset_JoinerUdpPort_set(long jarg1, CommissionerDataset jarg1_, int jarg2);
  public final static native int CommissionerDataset_JoinerUdpPort_get(long jarg1, CommissionerDataset jarg1_);
  public final static native void CommissionerDataset_AeUdpPort_set(long jarg1, CommissionerDataset jarg1_, int jarg2);
  public final static native int CommissionerDataset_AeUdpPort_get(long jarg1, CommissionerDataset jarg1_);
  public final static native void CommissionerDataset_NmkpUdpPort_set(long jarg1, CommissionerDataset jarg1_, int jarg2);
  public final static native int CommissionerDataset_NmkpUdpPort_get(long jarg1, CommissionerDataset jarg1_);
  public final static native void CommissionerDataset_PresentFlags_set(long jarg1, CommissionerDataset jarg1_, int jarg2);
  public final static native int CommissionerDataset_PresentFlags_get(long jarg1, CommissionerDataset jarg1_);
  public final static native int CommissionerDataset_kBorderAgentLocatorBit_get();
  public final static native int CommissionerDataset_kSessionIdBit_get();
  public final static native int CommissionerDataset_kSteeringDataBit_get();
  public final static native int CommissionerDataset_kAeSteeringDataBit_get();
  public final static native int CommissionerDataset_kNmkpSteeringDataBit_get();
  public final static native int CommissionerDataset_kJoinerUdpPortBit_get();
  public final static native int CommissionerDataset_kAeUdpPortBit_get();
  public final static native int CommissionerDataset_kNmkpUdpPortBit_get();
  public final static native long new_CommissionerDataset();
  public final static native void delete_CommissionerDataset(long jarg1);
  public final static native void Timestamp_Seconds_set(long jarg1, Timestamp jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger Timestamp_Seconds_get(long jarg1, Timestamp jarg1_);
  public final static native void Timestamp_Ticks_set(long jarg1, Timestamp jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger Timestamp_Ticks_get(long jarg1, Timestamp jarg1_);
  public final static native void Timestamp_U_set(long jarg1, Timestamp jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger Timestamp_U_get(long jarg1, Timestamp jarg1_);
  public final static native long Timestamp_cur();
  public final static native long Timestamp_decode(java.math.BigInteger jarg1);
  public final static native java.math.BigInteger Timestamp_encode(long jarg1, Timestamp jarg1_);
  public final static native long new_Timestamp();
  public final static native void delete_Timestamp(long jarg1);
  public final static native void Channel_Page_set(long jarg1, Channel jarg1_, short jarg2);
  public final static native short Channel_Page_get(long jarg1, Channel jarg1_);
  public final static native void Channel_Number_set(long jarg1, Channel jarg1_, int jarg2);
  public final static native int Channel_Number_get(long jarg1, Channel jarg1_);
  public final static native long new_Channel();
  public final static native void delete_Channel(long jarg1);
  public final static native void ChannelMaskEntry_Page_set(long jarg1, ChannelMaskEntry jarg1_, short jarg2);
  public final static native short ChannelMaskEntry_Page_get(long jarg1, ChannelMaskEntry jarg1_);
  public final static native void ChannelMaskEntry_Masks_set(long jarg1, ChannelMaskEntry jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long ChannelMaskEntry_Masks_get(long jarg1, ChannelMaskEntry jarg1_);
  public final static native long new_ChannelMaskEntry();
  public final static native void delete_ChannelMaskEntry(long jarg1);
  public final static native void SecurityPolicy_RotationTime_set(long jarg1, SecurityPolicy jarg1_, int jarg2);
  public final static native int SecurityPolicy_RotationTime_get(long jarg1, SecurityPolicy jarg1_);
  public final static native void SecurityPolicy_Flags_set(long jarg1, SecurityPolicy jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long SecurityPolicy_Flags_get(long jarg1, SecurityPolicy jarg1_);
  public final static native long new_SecurityPolicy();
  public final static native void delete_SecurityPolicy(long jarg1);
  public final static native void ActiveOperationalDataset_ActiveTimestamp_set(long jarg1, ActiveOperationalDataset jarg1_, long jarg2, Timestamp jarg2_);
  public final static native long ActiveOperationalDataset_ActiveTimestamp_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_Channel_set(long jarg1, ActiveOperationalDataset jarg1_, long jarg2, Channel jarg2_);
  public final static native long ActiveOperationalDataset_Channel_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_ChannelMask_set(long jarg1, ActiveOperationalDataset jarg1_, long jarg2, ChannelMask jarg2_);
  public final static native long ActiveOperationalDataset_ChannelMask_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_ExtendedPanId_set(long jarg1, ActiveOperationalDataset jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long ActiveOperationalDataset_ExtendedPanId_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_MeshLocalPrefix_set(long jarg1, ActiveOperationalDataset jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long ActiveOperationalDataset_MeshLocalPrefix_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_NetworkMasterKey_set(long jarg1, ActiveOperationalDataset jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long ActiveOperationalDataset_NetworkMasterKey_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_NetworkName_set(long jarg1, ActiveOperationalDataset jarg1_, String jarg2);
  public final static native String ActiveOperationalDataset_NetworkName_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_PanId_set(long jarg1, ActiveOperationalDataset jarg1_, int jarg2);
  public final static native int ActiveOperationalDataset_PanId_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_PSKc_set(long jarg1, ActiveOperationalDataset jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long ActiveOperationalDataset_PSKc_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_SecurityPolicy_set(long jarg1, ActiveOperationalDataset jarg1_, long jarg2, SecurityPolicy jarg2_);
  public final static native long ActiveOperationalDataset_SecurityPolicy_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native void ActiveOperationalDataset_PresentFlags_set(long jarg1, ActiveOperationalDataset jarg1_, int jarg2);
  public final static native int ActiveOperationalDataset_PresentFlags_get(long jarg1, ActiveOperationalDataset jarg1_);
  public final static native int ActiveOperationalDataset_kActiveTimestampBit_get();
  public final static native int ActiveOperationalDataset_kChannelBit_get();
  public final static native int ActiveOperationalDataset_kChannelMaskBit_get();
  public final static native int ActiveOperationalDataset_kExtendedPanIdBit_get();
  public final static native int ActiveOperationalDataset_kMeshLocalPrefixBit_get();
  public final static native int ActiveOperationalDataset_kNetworkMasterKeyBit_get();
  public final static native int ActiveOperationalDataset_kNetworkNameBit_get();
  public final static native int ActiveOperationalDataset_kPanIdBit_get();
  public final static native int ActiveOperationalDataset_kPSKcBit_get();
  public final static native int ActiveOperationalDataset_kSecurityPolicyBit_get();
  public final static native long new_ActiveOperationalDataset();
  public final static native void delete_ActiveOperationalDataset(long jarg1);
  public final static native void PendingOperationalDataset_DelayTimer_set(long jarg1, PendingOperationalDataset jarg1_, long jarg2);
  public final static native long PendingOperationalDataset_DelayTimer_get(long jarg1, PendingOperationalDataset jarg1_);
  public final static native void PendingOperationalDataset_PendingTimestamp_set(long jarg1, PendingOperationalDataset jarg1_, long jarg2, Timestamp jarg2_);
  public final static native long PendingOperationalDataset_PendingTimestamp_get(long jarg1, PendingOperationalDataset jarg1_);
  public final static native int PendingOperationalDataset_kDelayTimerBit_get();
  public final static native int PendingOperationalDataset_kPendingTimestampBit_get();
  public final static native long new_PendingOperationalDataset();
  public final static native void delete_PendingOperationalDataset(long jarg1);
  public final static native void BbrDataset_TriHostname_set(long jarg1, BbrDataset jarg1_, String jarg2);
  public final static native String BbrDataset_TriHostname_get(long jarg1, BbrDataset jarg1_);
  public final static native void BbrDataset_RegistrarHostname_set(long jarg1, BbrDataset jarg1_, String jarg2);
  public final static native String BbrDataset_RegistrarHostname_get(long jarg1, BbrDataset jarg1_);
  public final static native void BbrDataset_RegistrarIpv6Addr_set(long jarg1, BbrDataset jarg1_, String jarg2);
  public final static native String BbrDataset_RegistrarIpv6Addr_get(long jarg1, BbrDataset jarg1_);
  public final static native void BbrDataset_PresentFlags_set(long jarg1, BbrDataset jarg1_, int jarg2);
  public final static native int BbrDataset_PresentFlags_get(long jarg1, BbrDataset jarg1_);
  public final static native int BbrDataset_kTriHostnameBit_get();
  public final static native int BbrDataset_kRegistrarHostnameBit_get();
  public final static native int BbrDataset_kRegistrarIpv6AddrBit_get();
  public final static native long new_BbrDataset();
  public final static native void delete_BbrDataset(long jarg1);
  public final static native long ipv6PrefixFromString(long jarg1, ByteArray jarg1_, String jarg2);
  public final static native String ipv6PrefixToString(long jarg1, ByteArray jarg1_);
  public final static native int State_kDisabled_get();
  public final static native int LogLevel_kOff_get();
  public final static native void delete_Logger(long jarg1);
  public final static native void Logger_log(long jarg1, Logger jarg1_, int jarg2, String jarg3, String jarg4);
  public final static native long new_Logger();
  public final static native void Logger_director_connect(Logger obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Logger_change_ownership(Logger obj, long cptr, boolean take_or_release);
  public final static native void Config_EnableCcm_set(long jarg1, Config jarg1_, boolean jarg2);
  public final static native boolean Config_EnableCcm_get(long jarg1, Config jarg1_);
  public final static native void Config_KeepAliveInterval_set(long jarg1, Config jarg1_, long jarg2);
  public final static native long Config_KeepAliveInterval_get(long jarg1, Config jarg1_);
  public final static native void Config_MaxConnectionNum_set(long jarg1, Config jarg1_, long jarg2);
  public final static native long Config_MaxConnectionNum_get(long jarg1, Config jarg1_);
  public final static native void Config_Logger_set(long jarg1, Config jarg1_, long jarg2, Logger jarg2_);
  public final static native long Config_Logger_get(long jarg1, Config jarg1_);
  public final static native void Config_EnableDtlsDebugLogging_set(long jarg1, Config jarg1_, boolean jarg2);
  public final static native boolean Config_EnableDtlsDebugLogging_get(long jarg1, Config jarg1_);
  public final static native void Config_DomainName_set(long jarg1, Config jarg1_, String jarg2);
  public final static native String Config_DomainName_get(long jarg1, Config jarg1_);
  public final static native void Config_Id_set(long jarg1, Config jarg1_, String jarg2);
  public final static native String Config_Id_get(long jarg1, Config jarg1_);
  public final static native void Config_PSKc_set(long jarg1, Config jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long Config_PSKc_get(long jarg1, Config jarg1_);
  public final static native void Config_PrivateKey_set(long jarg1, Config jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long Config_PrivateKey_get(long jarg1, Config jarg1_);
  public final static native void Config_Certificate_set(long jarg1, Config jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long Config_Certificate_get(long jarg1, Config jarg1_);
  public final static native void Config_TrustAnchor_set(long jarg1, Config jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long Config_TrustAnchor_get(long jarg1, Config jarg1_);
  public final static native long new_Config();
  public final static native void delete_Config(long jarg1);
  public final static native String CommissionerHandler_onJoinerRequest(long jarg1, CommissionerHandler jarg1_, long jarg2, ByteArray jarg2_);
  public final static native String CommissionerHandler_onJoinerRequestSwigExplicitCommissionerHandler(long jarg1, CommissionerHandler jarg1_, long jarg2, ByteArray jarg2_);
  public final static native void CommissionerHandler_onJoinerConnected(long jarg1, CommissionerHandler jarg1_, long jarg2, ByteArray jarg2_, long jarg3, Error jarg3_);
  public final static native void CommissionerHandler_onJoinerConnectedSwigExplicitCommissionerHandler(long jarg1, CommissionerHandler jarg1_, long jarg2, ByteArray jarg2_, long jarg3, Error jarg3_);
  public final static native boolean CommissionerHandler_onJoinerFinalize(long jarg1, CommissionerHandler jarg1_, long jarg2, ByteArray jarg2_, String jarg3, String jarg4, String jarg5, long jarg6, ByteArray jarg6_, String jarg7, long jarg8, ByteArray jarg8_);
  public final static native boolean CommissionerHandler_onJoinerFinalizeSwigExplicitCommissionerHandler(long jarg1, CommissionerHandler jarg1_, long jarg2, ByteArray jarg2_, String jarg3, String jarg4, String jarg5, long jarg6, ByteArray jarg6_, String jarg7, long jarg8, ByteArray jarg8_);
  public final static native void CommissionerHandler_onKeepAliveResponse(long jarg1, CommissionerHandler jarg1_, long jarg2, Error jarg2_);
  public final static native void CommissionerHandler_onKeepAliveResponseSwigExplicitCommissionerHandler(long jarg1, CommissionerHandler jarg1_, long jarg2, Error jarg2_);
  public final static native void CommissionerHandler_onPanIdConflict(long jarg1, CommissionerHandler jarg1_, String jarg2, long jarg3, ChannelMask jarg3_, int jarg4);
  public final static native void CommissionerHandler_onPanIdConflictSwigExplicitCommissionerHandler(long jarg1, CommissionerHandler jarg1_, String jarg2, long jarg3, ChannelMask jarg3_, int jarg4);
  public final static native void CommissionerHandler_onEnergyReport(long jarg1, CommissionerHandler jarg1_, String jarg2, long jarg3, ChannelMask jarg3_, long jarg4, ByteArray jarg4_);
  public final static native void CommissionerHandler_onEnergyReportSwigExplicitCommissionerHandler(long jarg1, CommissionerHandler jarg1_, String jarg2, long jarg3, ChannelMask jarg3_, long jarg4, ByteArray jarg4_);
  public final static native void CommissionerHandler_onDatasetChanged(long jarg1, CommissionerHandler jarg1_);
  public final static native void CommissionerHandler_onDatasetChangedSwigExplicitCommissionerHandler(long jarg1, CommissionerHandler jarg1_);
  public final static native void delete_CommissionerHandler(long jarg1);
  public final static native long new_CommissionerHandler();
  public final static native void CommissionerHandler_director_connect(CommissionerHandler obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void CommissionerHandler_change_ownership(CommissionerHandler obj, long cptr, boolean take_or_release);
  public final static native long Commissioner_create(long jarg1, CommissionerHandler jarg1_);
  public final static native void delete_Commissioner(long jarg1);
  public final static native long Commissioner_init(long jarg1, Commissioner jarg1_, long jarg2, Config jarg2_);
  public final static native long Commissioner_getConfig(long jarg1, Commissioner jarg1_);
  public final static native long Commissioner_connect(long jarg1, Commissioner jarg1_, String jarg2, int jarg3);
  public final static native void Commissioner_disconnect(long jarg1, Commissioner jarg1_);
  public final static native int Commissioner_getSessionId(long jarg1, Commissioner jarg1_);
  public final static native int Commissioner_getState(long jarg1, Commissioner jarg1_);
  public final static native boolean Commissioner_isActive(long jarg1, Commissioner jarg1_);
  public final static native boolean Commissioner_isCcmMode(long jarg1, Commissioner jarg1_);
  public final static native String Commissioner_getDomainName(long jarg1, Commissioner jarg1_);
  public final static native void Commissioner_cancelRequests(long jarg1, Commissioner jarg1_);
  public final static native long Commissioner_petition(long jarg1, Commissioner jarg1_, String[] jarg2, String jarg3, int jarg4);
  public final static native long Commissioner_resign(long jarg1, Commissioner jarg1_);
  public final static native long Commissioner_getCommissionerDataset(long jarg1, Commissioner jarg1_, long jarg2, CommissionerDataset jarg2_, int jarg3);
  public final static native long Commissioner_setCommissionerDataset(long jarg1, Commissioner jarg1_, long jarg2, CommissionerDataset jarg2_);
  public final static native long Commissioner_setBbrDataset(long jarg1, Commissioner jarg1_, long jarg2, BbrDataset jarg2_);
  public final static native long Commissioner_getBbrDataset(long jarg1, Commissioner jarg1_, long jarg2, BbrDataset jarg2_, int jarg3);
  public final static native long Commissioner_getActiveDataset(long jarg1, Commissioner jarg1_, long jarg2, ActiveOperationalDataset jarg2_, int jarg3);
  public final static native long Commissioner_getRawActiveDataset(long jarg1, Commissioner jarg1_, long jarg2, ByteArray jarg2_, int jarg3);
  public final static native long Commissioner_setActiveDataset(long jarg1, Commissioner jarg1_, long jarg2, ActiveOperationalDataset jarg2_);
  public final static native long Commissioner_getPendingDataset(long jarg1, Commissioner jarg1_, long jarg2, PendingOperationalDataset jarg2_, int jarg3);
  public final static native long Commissioner_setPendingDataset(long jarg1, Commissioner jarg1_, long jarg2, PendingOperationalDataset jarg2_);
  public final static native long Commissioner_setSecurePendingDataset(long jarg1, Commissioner jarg1_, String jarg2, long jarg3, long jarg4, PendingOperationalDataset jarg4_);
  public final static native long Commissioner_commandReenroll(long jarg1, Commissioner jarg1_, String jarg2);
  public final static native long Commissioner_commandDomainReset(long jarg1, Commissioner jarg1_, String jarg2);
  public final static native long Commissioner_commandMigrate(long jarg1, Commissioner jarg1_, String jarg2, String jarg3);
  public final static native long Commissioner_announceBegin(long jarg1, Commissioner jarg1_, long jarg2, short jarg3, int jarg4, String jarg5);
  public final static native long Commissioner_panIdQuery(long jarg1, Commissioner jarg1_, long jarg2, int jarg3, String jarg4);
  public final static native long Commissioner_energyScan(long jarg1, Commissioner jarg1_, long jarg2, short jarg3, int jarg4, int jarg5, String jarg6);
  public final static native long Commissioner_registerMulticastListener(long jarg1, Commissioner jarg1_, short[] jarg2, String jarg3, long jarg4, StringVector jarg4_, long jarg5);
  public final static native long Commissioner_requestToken(long jarg1, Commissioner jarg1_, long jarg2, ByteArray jarg2_, String jarg3, int jarg4);
  public final static native long Commissioner_setToken(long jarg1, Commissioner jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long Commissioner_generatePSKc(long jarg1, ByteArray jarg1_, String jarg2, String jarg3, long jarg4, ByteArray jarg4_);
  public final static native long Commissioner_computeJoinerId(java.math.BigInteger jarg1);
  public final static native void Commissioner_addJoiner(long jarg1, ByteArray jarg1_, long jarg2, ByteArray jarg2_);
  public final static native long Commissioner_getMeshLocalAddr(String[] jarg1, String jarg2, int jarg3);
  public final static native long PendingOperationalDataset_SWIGUpcast(long jarg1);

  public static void SwigDirector_Logger_log(Logger jself, int aLevel, String aRegion, String aMsg) {
    jself.log(LogLevel.swigToEnum(aLevel), aRegion, aMsg);
  }
  public static String SwigDirector_CommissionerHandler_onJoinerRequest(CommissionerHandler jself, long aJoinerId) {
    return jself.onJoinerRequest(new ByteArray(aJoinerId, false));
  }
  public static void SwigDirector_CommissionerHandler_onJoinerConnected(CommissionerHandler jself, long aJoinerId, long aError) {
    jself.onJoinerConnected(new ByteArray(aJoinerId, false), new Error(aError, true));
  }
  public static boolean SwigDirector_CommissionerHandler_onJoinerFinalize(CommissionerHandler jself, long aJoinerId, String aVendorName, String aVendorModel, String aVendorSwVersion, long aVendorStackVersion, String aProvisioningUrl, long aVendorData) {
    return jself.onJoinerFinalize(new ByteArray(aJoinerId, false), aVendorName, aVendorModel, aVendorSwVersion, new ByteArray(aVendorStackVersion, false), aProvisioningUrl, new ByteArray(aVendorData, false));
  }
  public static void SwigDirector_CommissionerHandler_onKeepAliveResponse(CommissionerHandler jself, long aError) {
    jself.onKeepAliveResponse(new Error(aError, true));
  }
  public static void SwigDirector_CommissionerHandler_onPanIdConflict(CommissionerHandler jself, String aPeerAddr, long aChannelMask, int aPanId) {
    jself.onPanIdConflict(aPeerAddr, new ChannelMask(aChannelMask, false), aPanId);
  }
  public static void SwigDirector_CommissionerHandler_onEnergyReport(CommissionerHandler jself, String aPeerAddr, long aChannelMask, long aEnergyList) {
    jself.onEnergyReport(aPeerAddr, new ChannelMask(aChannelMask, false), new ByteArray(aEnergyList, false));
  }
  public static void SwigDirector_CommissionerHandler_onDatasetChanged(CommissionerHandler jself) {
    jself.onDatasetChanged();
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
