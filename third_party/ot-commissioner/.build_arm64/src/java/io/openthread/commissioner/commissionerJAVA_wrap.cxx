/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_commissionerModuleJNI = NULL;
    jmethodID director_method_ids[8];
  }
}

#include <commissioner/defines.hpp>
#include <commissioner/error.hpp>
#include <commissioner/network_data.hpp>
#include <commissioner/commissioner.hpp>


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< uint8_t > *new_std_vector_Sl_uint8_t_Sg___SWIG_2(jint count,uint8_t const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< uint8_t >(static_cast<std::vector< uint8_t >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint8_t_Sg__doSize(std::vector< uint8_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(std::vector< uint8_t > *self,std::vector< uint8_t >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(std::vector< uint8_t > *self,jint index,std::vector< uint8_t >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< uint8_t >::value_type std_vector_Sl_uint8_t_Sg__doRemove(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          uint8_t const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< uint8_t >::value_type const &std_vector_Sl_uint8_t_Sg__doGet(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< uint8_t >::value_type std_vector_Sl_uint8_t_Sg__doSet(std::vector< uint8_t > *self,jint index,std::vector< uint8_t >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          uint8_t const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doRemoveRange(std::vector< uint8_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< ot::commissioner::ChannelMaskEntry > *new_std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg___SWIG_2(jint count,ot::commissioner::ChannelMaskEntry const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< ot::commissioner::ChannelMaskEntry >(static_cast<std::vector< ot::commissioner::ChannelMaskEntry >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doSize(std::vector< ot::commissioner::ChannelMaskEntry > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doAdd__SWIG_0(std::vector< ot::commissioner::ChannelMaskEntry > *self,std::vector< ot::commissioner::ChannelMaskEntry >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doAdd__SWIG_1(std::vector< ot::commissioner::ChannelMaskEntry > *self,jint index,std::vector< ot::commissioner::ChannelMaskEntry >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< ot::commissioner::ChannelMaskEntry >::value_type std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doRemove(std::vector< ot::commissioner::ChannelMaskEntry > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          ot::commissioner::ChannelMaskEntry const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< ot::commissioner::ChannelMaskEntry >::value_type const &std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doGet(std::vector< ot::commissioner::ChannelMaskEntry > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< ot::commissioner::ChannelMaskEntry >::value_type std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doSet(std::vector< ot::commissioner::ChannelMaskEntry > *self,jint index,std::vector< ot::commissioner::ChannelMaskEntry >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          ot::commissioner::ChannelMaskEntry const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doRemoveRange(std::vector< ot::commissioner::ChannelMaskEntry > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "commissionerJAVA_wrap.h"

SwigDirector_Logger::SwigDirector_Logger(JNIEnv *jenv) : ot::commissioner::Logger(), Swig::Director(jenv) {
}

SwigDirector_Logger::~SwigDirector_Logger() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Logger::Log(ot::commissioner::LogLevel aLevel, std::string const &aRegion, std::string const &aMsg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jaLevel  ;
  jstring jaRegion = 0 ;
  jstring jaMsg = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ot::commissioner::Logger::Log.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaLevel = (jint) aLevel;
    jaRegion = jenv->NewStringUTF((&aRegion)->c_str());
    Swig::LocalRefGuard aRegion_refguard(jenv, jaRegion); 
    jaMsg = jenv->NewStringUTF((&aMsg)->c_str());
    Swig::LocalRefGuard aMsg_refguard(jenv, jaMsg); 
    jenv->CallStaticVoidMethod(Swig::jclass_commissionerModuleJNI, Swig::director_method_ids[0], swigjobj, jaLevel, jaRegion, jaMsg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ot::commissioner::Logger::Log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Logger::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "log", "(Lio/openthread/commissioner/LogLevel;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/openthread/commissioner/Logger");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_CommissionerHandler::SwigDirector_CommissionerHandler(JNIEnv *jenv) : ot::commissioner::CommissionerHandler(), Swig::Director(jenv) {
}

std::string SwigDirector_CommissionerHandler::OnJoinerRequest(ot::commissioner::ByteArray const &aJoinerId) {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jaJoinerId = 0 ;
  
  if (!swig_override[0]) {
    return ot::commissioner::CommissionerHandler::OnJoinerRequest(aJoinerId);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(ot::commissioner::ByteArray **)&jaJoinerId = (ot::commissioner::ByteArray *) &aJoinerId; 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_commissionerModuleJNI, Swig::director_method_ids[1], swigjobj, jaJoinerId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ot::commissioner::CommissionerHandler::OnJoinerRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_CommissionerHandler::OnJoinerConnected(ot::commissioner::ByteArray const &aJoinerId, ot::commissioner::Error aError) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jaJoinerId = 0 ;
  jlong jaError  ;
  
  if (!swig_override[1]) {
    ot::commissioner::CommissionerHandler::OnJoinerConnected(aJoinerId,aError);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(ot::commissioner::ByteArray **)&jaJoinerId = (ot::commissioner::ByteArray *) &aJoinerId; 
    jaError = 0;
    *((ot::commissioner::Error **)&jaError) = new ot::commissioner::Error((const ot::commissioner::Error &)aError); 
    jenv->CallStaticVoidMethod(Swig::jclass_commissionerModuleJNI, Swig::director_method_ids[2], swigjobj, jaJoinerId, jaError);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ot::commissioner::CommissionerHandler::OnJoinerConnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_CommissionerHandler::OnJoinerFinalize(ot::commissioner::ByteArray const &aJoinerId, std::string const &aVendorName, std::string const &aVendorModel, std::string const &aVendorSwVersion, ot::commissioner::ByteArray const &aVendorStackVersion, std::string const &aProvisioningUrl, ot::commissioner::ByteArray const &aVendorData) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jaJoinerId = 0 ;
  jstring jaVendorName = 0 ;
  jstring jaVendorModel = 0 ;
  jstring jaVendorSwVersion = 0 ;
  jlong jaVendorStackVersion = 0 ;
  jstring jaProvisioningUrl = 0 ;
  jlong jaVendorData = 0 ;
  
  if (!swig_override[2]) {
    return ot::commissioner::CommissionerHandler::OnJoinerFinalize(aJoinerId,aVendorName,aVendorModel,aVendorSwVersion,aVendorStackVersion,aProvisioningUrl,aVendorData);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(ot::commissioner::ByteArray **)&jaJoinerId = (ot::commissioner::ByteArray *) &aJoinerId; 
    jaVendorName = jenv->NewStringUTF((&aVendorName)->c_str());
    Swig::LocalRefGuard aVendorName_refguard(jenv, jaVendorName); 
    jaVendorModel = jenv->NewStringUTF((&aVendorModel)->c_str());
    Swig::LocalRefGuard aVendorModel_refguard(jenv, jaVendorModel); 
    jaVendorSwVersion = jenv->NewStringUTF((&aVendorSwVersion)->c_str());
    Swig::LocalRefGuard aVendorSwVersion_refguard(jenv, jaVendorSwVersion); 
    *(ot::commissioner::ByteArray **)&jaVendorStackVersion = (ot::commissioner::ByteArray *) &aVendorStackVersion; 
    jaProvisioningUrl = jenv->NewStringUTF((&aProvisioningUrl)->c_str());
    Swig::LocalRefGuard aProvisioningUrl_refguard(jenv, jaProvisioningUrl); 
    *(ot::commissioner::ByteArray **)&jaVendorData = (ot::commissioner::ByteArray *) &aVendorData; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_commissionerModuleJNI, Swig::director_method_ids[3], swigjobj, jaJoinerId, jaVendorName, jaVendorModel, jaVendorSwVersion, jaVendorStackVersion, jaProvisioningUrl, jaVendorData);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ot::commissioner::CommissionerHandler::OnJoinerFinalize ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_CommissionerHandler::OnKeepAliveResponse(ot::commissioner::Error aError) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jaError  ;
  
  if (!swig_override[3]) {
    ot::commissioner::CommissionerHandler::OnKeepAliveResponse(aError);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaError = 0;
    *((ot::commissioner::Error **)&jaError) = new ot::commissioner::Error((const ot::commissioner::Error &)aError); 
    jenv->CallStaticVoidMethod(Swig::jclass_commissionerModuleJNI, Swig::director_method_ids[4], swigjobj, jaError);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ot::commissioner::CommissionerHandler::OnKeepAliveResponse ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CommissionerHandler::OnPanIdConflict(std::string const &aPeerAddr, ot::commissioner::ChannelMask const &aChannelMask, uint16_t aPanId) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaPeerAddr = 0 ;
  jlong jaChannelMask = 0 ;
  jint jaPanId  ;
  
  if (!swig_override[4]) {
    ot::commissioner::CommissionerHandler::OnPanIdConflict(aPeerAddr,aChannelMask,aPanId);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaPeerAddr = jenv->NewStringUTF((&aPeerAddr)->c_str());
    Swig::LocalRefGuard aPeerAddr_refguard(jenv, jaPeerAddr); 
    *(ot::commissioner::ChannelMask **)&jaChannelMask = (ot::commissioner::ChannelMask *) &aChannelMask; 
    jaPanId = (jint) aPanId;
    jenv->CallStaticVoidMethod(Swig::jclass_commissionerModuleJNI, Swig::director_method_ids[5], swigjobj, jaPeerAddr, jaChannelMask, jaPanId);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ot::commissioner::CommissionerHandler::OnPanIdConflict ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CommissionerHandler::OnEnergyReport(std::string const &aPeerAddr, ot::commissioner::ChannelMask const &aChannelMask, ot::commissioner::ByteArray const &aEnergyList) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaPeerAddr = 0 ;
  jlong jaChannelMask = 0 ;
  jlong jaEnergyList = 0 ;
  
  if (!swig_override[5]) {
    ot::commissioner::CommissionerHandler::OnEnergyReport(aPeerAddr,aChannelMask,aEnergyList);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaPeerAddr = jenv->NewStringUTF((&aPeerAddr)->c_str());
    Swig::LocalRefGuard aPeerAddr_refguard(jenv, jaPeerAddr); 
    *(ot::commissioner::ChannelMask **)&jaChannelMask = (ot::commissioner::ChannelMask *) &aChannelMask; 
    *(ot::commissioner::ByteArray **)&jaEnergyList = (ot::commissioner::ByteArray *) &aEnergyList; 
    jenv->CallStaticVoidMethod(Swig::jclass_commissionerModuleJNI, Swig::director_method_ids[6], swigjobj, jaPeerAddr, jaChannelMask, jaEnergyList);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ot::commissioner::CommissionerHandler::OnEnergyReport ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CommissionerHandler::OnDatasetChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    ot::commissioner::CommissionerHandler::OnDatasetChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_commissionerModuleJNI, Swig::director_method_ids[7], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ot::commissioner::CommissionerHandler::OnDatasetChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_CommissionerHandler::~SwigDirector_CommissionerHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_CommissionerHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onJoinerRequest", "(Lio/openthread/commissioner/ByteArray;)Ljava/lang/String;", NULL 
    },
    {
      "onJoinerConnected", "(Lio/openthread/commissioner/ByteArray;Lio/openthread/commissioner/Error;)V", NULL 
    },
    {
      "onJoinerFinalize", "(Lio/openthread/commissioner/ByteArray;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lio/openthread/commissioner/ByteArray;Ljava/lang/String;Lio/openthread/commissioner/ByteArray;)Z", NULL 
    },
    {
      "onKeepAliveResponse", "(Lio/openthread/commissioner/Error;)V", NULL 
    },
    {
      "onPanIdConflict", "(Ljava/lang/String;Lio/openthread/commissioner/ChannelMask;I)V", NULL 
    },
    {
      "onEnergyReport", "(Ljava/lang/String;Lio/openthread/commissioner/ChannelMask;Lio/openthread/commissioner/ByteArray;)V", NULL 
    },
    {
      "onDatasetChanged", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/openthread/commissioner/CommissionerHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1ByteArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1ByteArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return 0;
  } 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< uint8_t >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< uint8_t >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (std::vector< uint8_t >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1ByteArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jbyte jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  uint8_t *arg2 = 0 ;
  uint8_t temp2 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (uint8_t)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< uint8_t > *)new_std_vector_Sl_uint8_t_Sg___SWIG_2(arg1,(uint8_t const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  try {
    result = std_vector_Sl_uint8_t_Sg__doSize((std::vector< uint8_t > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< uint8_t >::value_type *arg2 = 0 ;
  std::vector< uint8_t >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  temp2 = (std::vector< uint8_t >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(arg1,(uint8_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< uint8_t >::value_type *arg3 = 0 ;
  std::vector< uint8_t >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< uint8_t >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(arg1,arg2,(uint8_t const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jbyte JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< uint8_t >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_uint8_t_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< uint8_t >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< uint8_t >::value_type *) &std_vector_Sl_uint8_t_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  jbyte jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< uint8_t >::value_type *arg3 = 0 ;
  std::vector< uint8_t >::value_type temp3 ;
  std::vector< uint8_t >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< uint8_t >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = std_vector_Sl_uint8_t_Sg__doSet(arg1,arg2,(uint8_t const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ByteArray_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_uint8_t_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1ByteArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1ChannelMask_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< ot::commissioner::ChannelMaskEntry > *)new std::vector< ot::commissioner::ChannelMaskEntry >();
  *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1ChannelMask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ot::commissioner::ChannelMaskEntry > const & reference is null");
    return 0;
  } 
  result = (std::vector< ot::commissioner::ChannelMaskEntry > *)new std::vector< ot::commissioner::ChannelMaskEntry >((std::vector< ot::commissioner::ChannelMaskEntry > const &)*arg1);
  *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  result = ((std::vector< ot::commissioner::ChannelMaskEntry > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  arg2 = (std::vector< ot::commissioner::ChannelMaskEntry >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  result = (bool)((std::vector< ot::commissioner::ChannelMaskEntry > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1ChannelMask_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  ot::commissioner::ChannelMaskEntry *arg2 = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(ot::commissioner::ChannelMaskEntry **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ChannelMaskEntry const & reference is null");
    return 0;
  } 
  try {
    result = (std::vector< ot::commissioner::ChannelMaskEntry > *)new_std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg___SWIG_2(arg1,(ot::commissioner::ChannelMaskEntry const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  try {
    result = std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doSize((std::vector< ot::commissioner::ChannelMaskEntry > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  arg2 = *(std::vector< ot::commissioner::ChannelMaskEntry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ot::commissioner::ChannelMaskEntry >::value_type const & reference is null");
    return ;
  } 
  std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doAdd__SWIG_0(arg1,(ot::commissioner::ChannelMaskEntry const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  jint arg2 ;
  std::vector< ot::commissioner::ChannelMaskEntry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< ot::commissioner::ChannelMaskEntry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ot::commissioner::ChannelMaskEntry >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doAdd__SWIG_1(arg1,arg2,(ot::commissioner::ChannelMaskEntry const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  jint arg2 ;
  std::vector< ot::commissioner::ChannelMaskEntry >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< ot::commissioner::ChannelMaskEntry >::value_type **)&jresult = new std::vector< ot::commissioner::ChannelMaskEntry >::value_type((const std::vector< ot::commissioner::ChannelMaskEntry >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  jint arg2 ;
  std::vector< ot::commissioner::ChannelMaskEntry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< ot::commissioner::ChannelMaskEntry >::value_type *) &std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< ot::commissioner::ChannelMaskEntry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  jint arg2 ;
  std::vector< ot::commissioner::ChannelMaskEntry >::value_type *arg3 = 0 ;
  std::vector< ot::commissioner::ChannelMaskEntry >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< ot::commissioner::ChannelMaskEntry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< ot::commissioner::ChannelMaskEntry >::value_type const & reference is null");
    return 0;
  } 
  try {
    result = std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doSet(arg1,arg2,(ot::commissioner::ChannelMaskEntry const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< ot::commissioner::ChannelMaskEntry >::value_type **)&jresult = new std::vector< ot::commissioner::ChannelMaskEntry >::value_type((const std::vector< ot::commissioner::ChannelMaskEntry >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMask_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_ot_commissioner_ChannelMaskEntry_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1ChannelMask(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< ot::commissioner::ChannelMaskEntry > *arg1 = (std::vector< ot::commissioner::ChannelMaskEntry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< ot::commissioner::ChannelMaskEntry > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1StringVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  try {
    result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__doSet(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_StringVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_std_string_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMinCommissionerCredentialLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMinCommissionerCredentialLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMaxCommissionerCredentialLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMaxCommissionerCredentialLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMinJoinerDeviceCredentialLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMinJoinerDeviceCredentialLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMaxJoinerDeviceCredentialLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMaxJoinerDeviceCredentialLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMaxPSKcLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMaxPSKcLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMaxNetworkNameLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMaxNetworkNameLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kExtendedAddrLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kExtendedAddrLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kExtendedPanIdLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kExtendedPanIdLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMaxSteeringDataLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMaxSteeringDataLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kJoinerIdLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kJoinerIdLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kJoinerRouterKekLength_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kJoinerRouterKekLength;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kDefaultJoinerUdpPort_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kDefaultJoinerUdpPort;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kDefaultAeUdpPort_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kDefaultAeUdpPort;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kDefaultNmkpUdpPort_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kDefaultNmkpUdpPort;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kPrimaryBbrAloc16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kPrimaryBbrAloc16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kRadio915Mhz_1get(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)ot::commissioner::kRadio915Mhz;
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kRadio915MhzOqpskChannelMask_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kRadio915MhzOqpskChannelMask;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kRadio2P4GhzOqpskChannelMask_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kRadio2P4GhzOqpskChannelMask;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kRadioChannelPage0_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kRadioChannelPage0;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kRadioChannelPage2_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kRadioChannelPage2;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kNone_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kNone;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kCancelled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kCancelled;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kInvalidArgs_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kInvalidArgs;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kInvalidCommand_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kInvalidCommand;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kTimeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kTimeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kNotFound_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kNotFound;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kSecurity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kSecurity;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kUnimplemented_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kUnimplemented;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kBadFormat_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kBadFormat;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kBusy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kBusy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kOutOfMemory_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kOutOfMemory;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kIOError_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kIOError;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kIOBusy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kIOBusy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kAlreadyExists_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kAlreadyExists;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kAborted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kAborted;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kInvalidState_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kInvalidState;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kRejected_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kRejected;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ErrorCode_1kUnknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ErrorCode)ot::commissioner::ErrorCode::kUnknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1Error_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::Error *)new ot::commissioner::Error();
  *(ot::commissioner::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1Error_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  ot::commissioner::ErrorCode arg1 ;
  std::string *arg2 = 0 ;
  ot::commissioner::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ot::commissioner::ErrorCode)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ot::commissioner::Error *)new ot::commissioner::Error(arg1,(std::string const &)*arg2);
  *(ot::commissioner::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1Error_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Error *arg1 = 0 ;
  ot::commissioner::Error *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Error **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::Error const & reference is null");
    return 0;
  } 
  result = (ot::commissioner::Error *)new ot::commissioner::Error((ot::commissioner::Error const &)*arg1);
  *(ot::commissioner::Error **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Error_1getCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::Error *arg1 = (ot::commissioner::Error *) 0 ;
  ot::commissioner::ErrorCode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Error **)&jarg1; 
  result = (ot::commissioner::ErrorCode)((ot::commissioner::Error const *)arg1)->GetCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Error_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::Error *arg1 = (ot::commissioner::Error *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Error **)&jarg1; 
  result = (std::string *) &((ot::commissioner::Error const *)arg1)->GetMessage();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Error_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::Error *arg1 = (ot::commissioner::Error *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Error **)&jarg1; 
  result = ((ot::commissioner::Error const *)arg1)->ToString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Error_1ignoreError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ot::commissioner::Error *arg1 = (ot::commissioner::Error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Error **)&jarg1; 
  ((ot::commissioner::Error const *)arg1)->IgnoreError();
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1Error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::Error *arg1 = (ot::commissioner::Error *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::Error **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMlrStatusSuccess_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMlrStatusSuccess;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMlrStatusInvalid_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMlrStatusInvalid;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMlrStatusNoResources_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMlrStatusNoResources;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMlrStatusNotPrimary_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMlrStatusNotPrimary;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_kMlrStatusFailure_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::kMlrStatusFailure;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1BorderAgentLocator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mBorderAgentLocator = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1BorderAgentLocator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  result =  ((arg1)->mBorderAgentLocator);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1SessionId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mSessionId = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1SessionId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  result =  ((arg1)->mSessionId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1SteeringData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mSteeringData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1SteeringData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mSteeringData);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1AeSteeringData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mAeSteeringData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1AeSteeringData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mAeSteeringData);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1NmkpSteeringData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mNmkpSteeringData = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1NmkpSteeringData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mNmkpSteeringData);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1JoinerUdpPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mJoinerUdpPort = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1JoinerUdpPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  result =  ((arg1)->mJoinerUdpPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1AeUdpPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mAeUdpPort = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1AeUdpPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  result =  ((arg1)->mAeUdpPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1NmkpUdpPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mNmkpUdpPort = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1NmkpUdpPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  result =  ((arg1)->mNmkpUdpPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1PresentFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mPresentFlags = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1PresentFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  result =  ((arg1)->mPresentFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1kBorderAgentLocatorBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::CommissionerDataset::kBorderAgentLocatorBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1kSessionIdBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::CommissionerDataset::kSessionIdBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1kSteeringDataBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::CommissionerDataset::kSteeringDataBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1kAeSteeringDataBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::CommissionerDataset::kAeSteeringDataBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1kNmkpSteeringDataBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::CommissionerDataset::kNmkpSteeringDataBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1kJoinerUdpPortBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::CommissionerDataset::kJoinerUdpPortBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1kAeUdpPortBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::CommissionerDataset::kAeUdpPortBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerDataset_1kNmkpUdpPortBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::CommissionerDataset::kNmkpUdpPortBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1CommissionerDataset(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::CommissionerDataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::CommissionerDataset *)new ot::commissioner::CommissionerDataset();
  *(ot::commissioner::CommissionerDataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1CommissionerDataset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::CommissionerDataset *arg1 = (ot::commissioner::CommissionerDataset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::CommissionerDataset **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Timestamp_1Seconds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  ot::commissioner::Timestamp *arg1 = (ot::commissioner::Timestamp *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Timestamp **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->mSeconds = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Timestamp_1Seconds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  ot::commissioner::Timestamp *arg1 = (ot::commissioner::Timestamp *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Timestamp **)&jarg1; 
  result =  ((arg1)->mSeconds);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Timestamp_1Ticks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  ot::commissioner::Timestamp *arg1 = (ot::commissioner::Timestamp *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Timestamp **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->mTicks = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Timestamp_1Ticks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  ot::commissioner::Timestamp *arg1 = (ot::commissioner::Timestamp *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Timestamp **)&jarg1; 
  result =  ((arg1)->mTicks);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Timestamp_1U_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  ot::commissioner::Timestamp *arg1 = (ot::commissioner::Timestamp *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Timestamp **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->mU = arg2;
}


SWIGEXPORT jobject JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Timestamp_1U_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  ot::commissioner::Timestamp *arg1 = (ot::commissioner::Timestamp *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Timestamp **)&jarg1; 
  result =  ((arg1)->mU);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Timestamp_1cur(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::Timestamp::Cur();
  *(ot::commissioner::Timestamp **)&jresult = new ot::commissioner::Timestamp((const ot::commissioner::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Timestamp_1decode(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  uint64_t arg1 ;
  ot::commissioner::Timestamp result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ot::commissioner::Timestamp::Decode(arg1);
  *(ot::commissioner::Timestamp **)&jresult = new ot::commissioner::Timestamp((const ot::commissioner::Timestamp &)result); 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Timestamp_1encode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  ot::commissioner::Timestamp *arg1 = (ot::commissioner::Timestamp *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Timestamp **)&jarg1; 
  result = ((ot::commissioner::Timestamp const *)arg1)->Encode();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1Timestamp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::Timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::Timestamp *)new ot::commissioner::Timestamp();
  *(ot::commissioner::Timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1Timestamp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::Timestamp *arg1 = (ot::commissioner::Timestamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::Timestamp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Channel_1Page_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ot::commissioner::Channel *arg1 = (ot::commissioner::Channel *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Channel **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->mPage = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Channel_1Page_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ot::commissioner::Channel *arg1 = (ot::commissioner::Channel *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Channel **)&jarg1; 
  result =  ((arg1)->mPage);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Channel_1Number_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::Channel *arg1 = (ot::commissioner::Channel *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Channel **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mNumber = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Channel_1Number_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::Channel *arg1 = (ot::commissioner::Channel *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Channel **)&jarg1; 
  result =  ((arg1)->mNumber);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1Channel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::Channel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::Channel *)new ot::commissioner::Channel();
  *(ot::commissioner::Channel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1Channel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::Channel *arg1 = (ot::commissioner::Channel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::Channel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMaskEntry_1Page_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  ot::commissioner::ChannelMaskEntry *arg1 = (ot::commissioner::ChannelMaskEntry *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ChannelMaskEntry **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->mPage = arg2;
}


SWIGEXPORT jshort JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMaskEntry_1Page_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ot::commissioner::ChannelMaskEntry *arg1 = (ot::commissioner::ChannelMaskEntry *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ChannelMaskEntry **)&jarg1; 
  result =  ((arg1)->mPage);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMaskEntry_1Masks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ChannelMaskEntry *arg1 = (ot::commissioner::ChannelMaskEntry *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ChannelMaskEntry **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mMasks = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ChannelMaskEntry_1Masks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::ChannelMaskEntry *arg1 = (ot::commissioner::ChannelMaskEntry *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ChannelMaskEntry **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mMasks);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1ChannelMaskEntry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::ChannelMaskEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ChannelMaskEntry *)new ot::commissioner::ChannelMaskEntry();
  *(ot::commissioner::ChannelMaskEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1ChannelMaskEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::ChannelMaskEntry *arg1 = (ot::commissioner::ChannelMaskEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::ChannelMaskEntry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_SecurityPolicy_1RotationTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::SecurityPolicy *arg1 = (ot::commissioner::SecurityPolicy *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::SecurityPolicy **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mRotationTime = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_SecurityPolicy_1RotationTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::SecurityPolicy *arg1 = (ot::commissioner::SecurityPolicy *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::SecurityPolicy **)&jarg1; 
  result =  ((arg1)->mRotationTime);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_SecurityPolicy_1Flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::SecurityPolicy *arg1 = (ot::commissioner::SecurityPolicy *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::SecurityPolicy **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mFlags = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_SecurityPolicy_1Flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::SecurityPolicy *arg1 = (ot::commissioner::SecurityPolicy *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::SecurityPolicy **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mFlags);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1SecurityPolicy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::SecurityPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::SecurityPolicy *)new ot::commissioner::SecurityPolicy();
  *(ot::commissioner::SecurityPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1SecurityPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::SecurityPolicy *arg1 = (ot::commissioner::SecurityPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::SecurityPolicy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1ActiveTimestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::Timestamp *arg2 = (ot::commissioner::Timestamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = *(ot::commissioner::Timestamp **)&jarg2; 
  if (arg1) (arg1)->mActiveTimestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1ActiveTimestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::Timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result = (ot::commissioner::Timestamp *)& ((arg1)->mActiveTimestamp);
  *(ot::commissioner::Timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1Channel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::Channel *arg2 = (ot::commissioner::Channel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = *(ot::commissioner::Channel **)&jarg2; 
  if (arg1) (arg1)->mChannel = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1Channel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::Channel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result = (ot::commissioner::Channel *)& ((arg1)->mChannel);
  *(ot::commissioner::Channel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1ChannelMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ChannelMask *arg2 = (ot::commissioner::ChannelMask *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = *(ot::commissioner::ChannelMask **)&jarg2; 
  if (arg1) (arg1)->mChannelMask = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1ChannelMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ChannelMask *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result = (ot::commissioner::ChannelMask *)& ((arg1)->mChannelMask);
  *(ot::commissioner::ChannelMask **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1ExtendedPanId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mExtendedPanId = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1ExtendedPanId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mExtendedPanId);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1MeshLocalPrefix_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mMeshLocalPrefix = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1MeshLocalPrefix_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mMeshLocalPrefix);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1NetworkMasterKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mNetworkMasterKey = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1NetworkMasterKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mNetworkMasterKey);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1NetworkName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mNetworkName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1NetworkName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result = (std::string *) & ((arg1)->mNetworkName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1PanId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mPanId = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1PanId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result =  ((arg1)->mPanId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1PSKc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mPSKc = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1PSKc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mPSKc);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1SecurityPolicy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::SecurityPolicy *arg2 = (ot::commissioner::SecurityPolicy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = *(ot::commissioner::SecurityPolicy **)&jarg2; 
  if (arg1) (arg1)->mSecurityPolicy = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1SecurityPolicy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  ot::commissioner::SecurityPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result = (ot::commissioner::SecurityPolicy *)& ((arg1)->mSecurityPolicy);
  *(ot::commissioner::SecurityPolicy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1PresentFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mPresentFlags = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1PresentFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  result =  ((arg1)->mPresentFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kActiveTimestampBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kActiveTimestampBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kChannelBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kChannelBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kChannelMaskBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kChannelMaskBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kExtendedPanIdBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kExtendedPanIdBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kMeshLocalPrefixBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kMeshLocalPrefixBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kNetworkMasterKeyBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kNetworkMasterKeyBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kNetworkNameBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kNetworkNameBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kPanIdBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kPanIdBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kPSKcBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kPSKcBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ActiveOperationalDataset_1kSecurityPolicyBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::ActiveOperationalDataset::kSecurityPolicyBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1ActiveOperationalDataset(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::ActiveOperationalDataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::ActiveOperationalDataset *)new ot::commissioner::ActiveOperationalDataset();
  *(ot::commissioner::ActiveOperationalDataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1ActiveOperationalDataset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::ActiveOperationalDataset *arg1 = (ot::commissioner::ActiveOperationalDataset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::ActiveOperationalDataset **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_PendingOperationalDataset_1DelayTimer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ot::commissioner::PendingOperationalDataset *arg1 = (ot::commissioner::PendingOperationalDataset *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::PendingOperationalDataset **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->mDelayTimer = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_PendingOperationalDataset_1DelayTimer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::PendingOperationalDataset *arg1 = (ot::commissioner::PendingOperationalDataset *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::PendingOperationalDataset **)&jarg1; 
  result =  ((arg1)->mDelayTimer);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_PendingOperationalDataset_1PendingTimestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::PendingOperationalDataset *arg1 = (ot::commissioner::PendingOperationalDataset *) 0 ;
  ot::commissioner::Timestamp *arg2 = (ot::commissioner::Timestamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::PendingOperationalDataset **)&jarg1; 
  arg2 = *(ot::commissioner::Timestamp **)&jarg2; 
  if (arg1) (arg1)->mPendingTimestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_PendingOperationalDataset_1PendingTimestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::PendingOperationalDataset *arg1 = (ot::commissioner::PendingOperationalDataset *) 0 ;
  ot::commissioner::Timestamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::PendingOperationalDataset **)&jarg1; 
  result = (ot::commissioner::Timestamp *)& ((arg1)->mPendingTimestamp);
  *(ot::commissioner::Timestamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_PendingOperationalDataset_1kDelayTimerBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::PendingOperationalDataset::kDelayTimerBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_PendingOperationalDataset_1kPendingTimestampBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::PendingOperationalDataset::kPendingTimestampBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1PendingOperationalDataset(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::PendingOperationalDataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::PendingOperationalDataset *)new ot::commissioner::PendingOperationalDataset();
  *(ot::commissioner::PendingOperationalDataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1PendingOperationalDataset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::PendingOperationalDataset *arg1 = (ot::commissioner::PendingOperationalDataset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::PendingOperationalDataset **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1TriHostname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ot::commissioner::BbrDataset *arg1 = (ot::commissioner::BbrDataset *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::BbrDataset **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mTriHostname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1TriHostname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::BbrDataset *arg1 = (ot::commissioner::BbrDataset *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::BbrDataset **)&jarg1; 
  result = (std::string *) & ((arg1)->mTriHostname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1RegistrarHostname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ot::commissioner::BbrDataset *arg1 = (ot::commissioner::BbrDataset *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::BbrDataset **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mRegistrarHostname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1RegistrarHostname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::BbrDataset *arg1 = (ot::commissioner::BbrDataset *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::BbrDataset **)&jarg1; 
  result = (std::string *) & ((arg1)->mRegistrarHostname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1RegistrarIpv6Addr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ot::commissioner::BbrDataset *arg1 = (ot::commissioner::BbrDataset *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::BbrDataset **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mRegistrarIpv6Addr = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1RegistrarIpv6Addr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::BbrDataset *arg1 = (ot::commissioner::BbrDataset *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::BbrDataset **)&jarg1; 
  result = (std::string *) & ((arg1)->mRegistrarIpv6Addr);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1PresentFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ot::commissioner::BbrDataset *arg1 = (ot::commissioner::BbrDataset *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::BbrDataset **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->mPresentFlags = arg2;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1PresentFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::BbrDataset *arg1 = (ot::commissioner::BbrDataset *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::BbrDataset **)&jarg1; 
  result =  ((arg1)->mPresentFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1kTriHostnameBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::BbrDataset::kTriHostnameBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1kRegistrarHostnameBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::BbrDataset::kRegistrarHostnameBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_BbrDataset_1kRegistrarIpv6AddrBit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  result = ot::commissioner::BbrDataset::kRegistrarIpv6AddrBit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1BbrDataset(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::BbrDataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::BbrDataset *)new ot::commissioner::BbrDataset();
  *(ot::commissioner::BbrDataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1BbrDataset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::BbrDataset *arg1 = (ot::commissioner::BbrDataset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::BbrDataset **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ipv6PrefixFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ot::commissioner::ByteArray *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::ByteArray **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ot::commissioner::Ipv6PrefixFromString(*arg1,(std::string const &)*arg2);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_ipv6PrefixToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::ByteArray arg1 ;
  ot::commissioner::ByteArray *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(ot::commissioner::ByteArray **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ot::commissioner::ByteArray");
    return 0;
  }
  arg1 = *argp1; 
  result = ot::commissioner::Ipv6PrefixToString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_State_1kDisabled_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::State result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::State)ot::commissioner::State::kDisabled;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_LogLevel_1kOff_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ot::commissioner::LogLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::LogLevel)ot::commissioner::LogLevel::kOff;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1Logger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::Logger *arg1 = (ot::commissioner::Logger *) 0 ;
  std::shared_ptr< ot::commissioner::Logger > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Logger > **)&jarg1;
  arg1 = (ot::commissioner::Logger *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Logger_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  ot::commissioner::Logger *arg1 = (ot::commissioner::Logger *) 0 ;
  ot::commissioner::LogLevel arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< ot::commissioner::Logger > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Logger > **)&jarg1;
  arg1 = (ot::commissioner::Logger *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ot::commissioner::LogLevel)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Log(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1Logger(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::Logger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::Logger *)new SwigDirector_Logger(jenv);
  
  *(std::shared_ptr<  ot::commissioner::Logger > **)&jresult = result ? new std::shared_ptr<  ot::commissioner::Logger >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Logger_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< ot::commissioner::Logger > *obj = *((std::shared_ptr< ot::commissioner::Logger > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_Logger *director = static_cast<SwigDirector_Logger *>(obj->operator->());
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Logger_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  std::shared_ptr< ot::commissioner::Logger > *obj = *((std::shared_ptr< ot::commissioner::Logger > **)&objarg);
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_Logger *director = dynamic_cast<SwigDirector_Logger *>(obj->operator->());
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1EnableCcm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mEnableCcm = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1EnableCcm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result = (bool) ((arg1)->mEnableCcm);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1KeepAliveInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->mKeepAliveInterval = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1KeepAliveInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result =  ((arg1)->mKeepAliveInterval);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1MaxConnectionNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->mMaxConnectionNum = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1MaxConnectionNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result =  ((arg1)->mMaxConnectionNum);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1Logger_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  std::shared_ptr< ot::commissioner::Logger > *arg2 = 0 ;
  std::shared_ptr< ot::commissioner::Logger > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  arg2 = jarg2 ? *(std::shared_ptr< ot::commissioner::Logger > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->mLogger = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1Logger_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  std::shared_ptr< ot::commissioner::Logger > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result = (std::shared_ptr< ot::commissioner::Logger > *) & ((arg1)->mLogger);
  *(std::shared_ptr< ot::commissioner::Logger > **)&jresult = *result ? new std::shared_ptr< ot::commissioner::Logger >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1EnableDtlsDebugLogging_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mEnableDtlsDebugLogging = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1EnableDtlsDebugLogging_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result = (bool) ((arg1)->mEnableDtlsDebugLogging);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1DomainName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mDomainName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1DomainName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->mDomainName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1Id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->mId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1Id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result = (std::string *) & ((arg1)->mId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1PSKc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mPSKc = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1PSKc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mPSKc);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1PrivateKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mPrivateKey = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1PrivateKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mPrivateKey);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1Certificate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mCertificate = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1Certificate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mCertificate);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1TrustAnchor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  ot::commissioner::ByteArray *arg2 = (ot::commissioner::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2; 
  if (arg1) (arg1)->mTrustAnchor = *arg2;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Config_1TrustAnchor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  ot::commissioner::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  result = (ot::commissioner::ByteArray *)& ((arg1)->mTrustAnchor);
  *(ot::commissioner::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1Config(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::Config *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::Config *)new ot::commissioner::Config();
  *(ot::commissioner::Config **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1Config(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::Config *arg1 = (ot::commissioner::Config *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::Config **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onJoinerRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  result = (arg1)->OnJoinerRequest((ot::commissioner::ByteArray const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onJoinerRequestSwigExplicitCommissionerHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  result = (arg1)->ot::commissioner::CommissionerHandler::OnJoinerRequest((ot::commissioner::ByteArray const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onJoinerConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  ot::commissioner::Error arg3 ;
  ot::commissioner::Error *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return ;
  } 
  argp3 = *(ot::commissioner::Error **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ot::commissioner::Error");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->OnJoinerConnected((ot::commissioner::ByteArray const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onJoinerConnectedSwigExplicitCommissionerHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  ot::commissioner::Error arg3 ;
  ot::commissioner::Error *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return ;
  } 
  argp3 = *(ot::commissioner::Error **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ot::commissioner::Error");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->ot::commissioner::CommissionerHandler::OnJoinerConnected((ot::commissioner::ByteArray const &)*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onJoinerFinalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_, jstring jarg7, jlong jarg8, jobject jarg8_) {
  jboolean jresult = 0 ;
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  ot::commissioner::ByteArray *arg6 = 0 ;
  std::string *arg7 = 0 ;
  ot::commissioner::ByteArray *arg8 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg8_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = *(ot::commissioner::ByteArray **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  arg8 = *(ot::commissioner::ByteArray **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->OnJoinerFinalize((ot::commissioner::ByteArray const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(ot::commissioner::ByteArray const &)*arg6,(std::string const &)*arg7,(ot::commissioner::ByteArray const &)*arg8);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onJoinerFinalizeSwigExplicitCommissionerHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_, jstring jarg7, jlong jarg8, jobject jarg8_) {
  jboolean jresult = 0 ;
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  ot::commissioner::ByteArray *arg6 = 0 ;
  std::string *arg7 = 0 ;
  ot::commissioner::ByteArray *arg8 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg8_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = *(ot::commissioner::ByteArray **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  std::string arg7_str(arg7_pstr);
  arg7 = &arg7_str;
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  arg8 = *(ot::commissioner::ByteArray **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->ot::commissioner::CommissionerHandler::OnJoinerFinalize((ot::commissioner::ByteArray const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(ot::commissioner::ByteArray const &)*arg6,(std::string const &)*arg7,(ot::commissioner::ByteArray const &)*arg8);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onKeepAliveResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  ot::commissioner::Error arg2 ;
  ot::commissioner::Error *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  argp2 = *(ot::commissioner::Error **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ot::commissioner::Error");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->OnKeepAliveResponse(arg2);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onKeepAliveResponseSwigExplicitCommissionerHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  ot::commissioner::Error arg2 ;
  ot::commissioner::Error *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  argp2 = *(ot::commissioner::Error **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ot::commissioner::Error");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->ot::commissioner::CommissionerHandler::OnKeepAliveResponse(arg2);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onPanIdConflict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  std::string *arg2 = 0 ;
  ot::commissioner::ChannelMask *arg3 = 0 ;
  uint16_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ot::commissioner::ChannelMask **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ChannelMask const & reference is null");
    return ;
  } 
  arg4 = (uint16_t)jarg4; 
  (arg1)->OnPanIdConflict((std::string const &)*arg2,(ot::commissioner::ChannelMask const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onPanIdConflictSwigExplicitCommissionerHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  std::string *arg2 = 0 ;
  ot::commissioner::ChannelMask *arg3 = 0 ;
  uint16_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ot::commissioner::ChannelMask **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ChannelMask const & reference is null");
    return ;
  } 
  arg4 = (uint16_t)jarg4; 
  (arg1)->ot::commissioner::CommissionerHandler::OnPanIdConflict((std::string const &)*arg2,(ot::commissioner::ChannelMask const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onEnergyReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  std::string *arg2 = 0 ;
  ot::commissioner::ChannelMask *arg3 = 0 ;
  ot::commissioner::ByteArray *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ot::commissioner::ChannelMask **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ChannelMask const & reference is null");
    return ;
  } 
  arg4 = *(ot::commissioner::ByteArray **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return ;
  } 
  (arg1)->OnEnergyReport((std::string const &)*arg2,(ot::commissioner::ChannelMask const &)*arg3,(ot::commissioner::ByteArray const &)*arg4);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onEnergyReportSwigExplicitCommissionerHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  std::string *arg2 = 0 ;
  ot::commissioner::ChannelMask *arg3 = 0 ;
  ot::commissioner::ByteArray *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(ot::commissioner::ChannelMask **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ChannelMask const & reference is null");
    return ;
  } 
  arg4 = *(ot::commissioner::ByteArray **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return ;
  } 
  (arg1)->ot::commissioner::CommissionerHandler::OnEnergyReport((std::string const &)*arg2,(ot::commissioner::ChannelMask const &)*arg3,(ot::commissioner::ByteArray const &)*arg4);
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onDatasetChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  (arg1)->OnDatasetChanged();
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1onDatasetChangedSwigExplicitCommissionerHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  (arg1)->ot::commissioner::CommissionerHandler::OnDatasetChanged();
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1CommissionerHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::CommissionerHandler *arg1 = (ot::commissioner::CommissionerHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_new_1CommissionerHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ot::commissioner::CommissionerHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ot::commissioner::CommissionerHandler *)new SwigDirector_CommissionerHandler(jenv);
  *(ot::commissioner::CommissionerHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ot::commissioner::CommissionerHandler *obj = *((ot::commissioner::CommissionerHandler **)&objarg);
  (void)jcls;
  SwigDirector_CommissionerHandler *director = static_cast<SwigDirector_CommissionerHandler *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_CommissionerHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ot::commissioner::CommissionerHandler *obj = *((ot::commissioner::CommissionerHandler **)&objarg);
  SwigDirector_CommissionerHandler *director = dynamic_cast<SwigDirector_CommissionerHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::CommissionerHandler *arg1 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ot::commissioner::CommissionerHandler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::CommissionerHandler & reference is null");
    return 0;
  } 
  result = ot::commissioner::Commissioner::Create(*arg1);
  *(std::shared_ptr< ot::commissioner::Commissioner > **)&jresult = result ? new std::shared_ptr< ot::commissioner::Commissioner >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_delete_1Commissioner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::Config *arg2 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::Config const & reference is null");
    return 0;
  } 
  result = (arg1)->Init((ot::commissioner::Config const &)*arg2);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner const > *smartarg1 = 0 ;
  ot::commissioner::Config *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  result = (ot::commissioner::Config *) &((ot::commissioner::Commissioner const *)arg1)->GetConfig();
  *(ot::commissioner::Config **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  result = (arg1)->Connect((std::string const &)*arg2,arg3);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->Disconnect();
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getSessionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner const > *smartarg1 = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((ot::commissioner::Commissioner const *)arg1)->GetSessionId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner const > *smartarg1 = 0 ;
  ot::commissioner::State result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  result = (ot::commissioner::State)((ot::commissioner::Commissioner const *)arg1)->GetState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((ot::commissioner::Commissioner const *)arg1)->IsActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1isCcmMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((ot::commissioner::Commissioner const *)arg1)->IsCcmMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getDomainName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) &((ot::commissioner::Commissioner const *)arg1)->GetDomainName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1cancelRequests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->CancelRequests();
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1petition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  std::string temp2 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
    }
    arg2 = &temp2;
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (uint16_t)jarg4; 
  result = (arg1)->Petition(*arg2,(std::string const &)*arg3,arg4);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  {
    jstring jvalue = jenv->NewStringUTF(temp2.c_str()); 
    jenv->SetObjectArrayElement(jarg2, 0, jvalue);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1resign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->Resign();
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getCommissionerDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::CommissionerDataset *arg2 = 0 ;
  uint16_t arg3 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::CommissionerDataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::CommissionerDataset & reference is null");
    return 0;
  } 
  arg3 = (uint16_t)jarg3; 
  result = (arg1)->GetCommissionerDataset(*arg2,arg3);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1setCommissionerDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::CommissionerDataset *arg2 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::CommissionerDataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::CommissionerDataset const & reference is null");
    return 0;
  } 
  result = (arg1)->SetCommissionerDataset((ot::commissioner::CommissionerDataset const &)*arg2);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1setBbrDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::BbrDataset *arg2 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::BbrDataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::BbrDataset const & reference is null");
    return 0;
  } 
  result = (arg1)->SetBbrDataset((ot::commissioner::BbrDataset const &)*arg2);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getBbrDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::BbrDataset *arg2 = 0 ;
  uint16_t arg3 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::BbrDataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::BbrDataset & reference is null");
    return 0;
  } 
  arg3 = (uint16_t)jarg3; 
  result = (arg1)->GetBbrDataset(*arg2,arg3);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getActiveDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::ActiveOperationalDataset *arg2 = 0 ;
  uint16_t arg3 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::ActiveOperationalDataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ActiveOperationalDataset & reference is null");
    return 0;
  } 
  arg3 = (uint16_t)jarg3; 
  result = (arg1)->GetActiveDataset(*arg2,arg3);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getRawActiveDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  uint16_t arg3 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray & reference is null");
    return 0;
  } 
  arg3 = (uint16_t)jarg3; 
  result = (arg1)->GetRawActiveDataset(*arg2,arg3);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1setActiveDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::ActiveOperationalDataset *arg2 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::ActiveOperationalDataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ActiveOperationalDataset const & reference is null");
    return 0;
  } 
  result = (arg1)->SetActiveDataset((ot::commissioner::ActiveOperationalDataset const &)*arg2);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getPendingDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::PendingOperationalDataset *arg2 = 0 ;
  uint16_t arg3 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::PendingOperationalDataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::PendingOperationalDataset & reference is null");
    return 0;
  } 
  arg3 = (uint16_t)jarg3; 
  result = (arg1)->GetPendingDataset(*arg2,arg3);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1setPendingDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::PendingOperationalDataset *arg2 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::PendingOperationalDataset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::PendingOperationalDataset const & reference is null");
    return 0;
  } 
  result = (arg1)->SetPendingDataset((ot::commissioner::PendingOperationalDataset const &)*arg2);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1setSecurePendingDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t arg3 ;
  ot::commissioner::PendingOperationalDataset *arg4 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(ot::commissioner::PendingOperationalDataset **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::PendingOperationalDataset const & reference is null");
    return 0;
  } 
  result = (arg1)->SetSecurePendingDataset((std::string const &)*arg2,arg3,(ot::commissioner::PendingOperationalDataset const &)*arg4);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1commandReenroll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->CommandReenroll((std::string const &)*arg2);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1commandDomainReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->CommandDomainReset((std::string const &)*arg2);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1commandMigrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->CommandMigrate((std::string const &)*arg2,(std::string const &)*arg3);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1announceBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  uint32_t arg2 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  std::string *arg5 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (arg1)->AnnounceBegin(arg2,arg3,arg4,(std::string const &)*arg5);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1panIdQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  std::string *arg4 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (arg1)->PanIdQuery(arg2,arg3,(std::string const &)*arg4);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1energyScan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jshort jarg3, jint jarg4, jint jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  uint32_t arg2 ;
  uint8_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  std::string *arg6 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  arg5 = (uint16_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (arg1)->EnergyScan(arg2,arg3,arg4,arg5,(std::string const &)*arg6);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1registerMulticastListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  uint8_t *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  uint32_t arg5 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  uint8_t temp2 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (uint8_t)0;
    arg2 = &temp2; 
  }
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::vector< std::string > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  arg5 = (uint32_t)jarg5; 
  result = (arg1)->RegisterMulticastListener(*arg2,(std::string const &)*arg3,(std::vector< std::string > const &)*arg4,arg5);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  {
    jshort jvalue = (jshort)temp2;
    jenv->SetShortArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1requestToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint16_t arg4 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (uint16_t)jarg4; 
  result = (arg1)->RequestToken(*arg2,(std::string const &)*arg3,arg4);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1setToken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ot::commissioner::Commissioner *arg1 = (ot::commissioner::Commissioner *) 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  std::shared_ptr< ot::commissioner::Commissioner > *smartarg1 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ot::commissioner::Commissioner > **)&jarg1;
  arg1 = (ot::commissioner::Commissioner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  result = (arg1)->SetToken((ot::commissioner::ByteArray const &)*arg2);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1generatePSKc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  ot::commissioner::ByteArray *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ot::commissioner::ByteArray *arg4 = 0 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ot::commissioner::ByteArray **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(ot::commissioner::ByteArray **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return 0;
  } 
  result = ot::commissioner::Commissioner::GeneratePSKc(*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::vector< uint8_t > const &)*arg4);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1computeJoinerId(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  uint64_t arg1 ;
  ot::commissioner::ByteArray result;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = ot::commissioner::Commissioner::ComputeJoinerId(arg1);
  *(ot::commissioner::ByteArray **)&jresult = new ot::commissioner::ByteArray((const ot::commissioner::ByteArray &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1addJoiner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ot::commissioner::ByteArray *arg1 = 0 ;
  ot::commissioner::ByteArray *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ot::commissioner::ByteArray **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray & reference is null");
    return ;
  } 
  arg2 = *(ot::commissioner::ByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ot::commissioner::ByteArray const & reference is null");
    return ;
  } 
  ot::commissioner::Commissioner::AddJoiner(*arg1,(std::vector< uint8_t > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_Commissioner_1getMeshLocalAddr(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  std::string temp1 ;
  ot::commissioner::Error result;
  
  (void)jenv;
  (void)jcls;
  {
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg1) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
    }
    arg1 = &temp1;
  }
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  result = ot::commissioner::Commissioner::GetMeshLocalAddr(*arg1,(std::string const &)*arg2,arg3);
  *(ot::commissioner::Error **)&jresult = new ot::commissioner::Error((const ot::commissioner::Error &)result); 
  {
    jstring jvalue = jenv->NewStringUTF(temp1.c_str()); 
    jenv->SetObjectArrayElement(jarg1, 0, jvalue);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_PendingOperationalDataset_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ot::commissioner::ActiveOperationalDataset **)&baseptr = *(ot::commissioner::PendingOperationalDataset **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_io_openthread_commissioner_commissionerModuleJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[8] = {
    {
      "SwigDirector_Logger_log", "(Lio/openthread/commissioner/Logger;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_CommissionerHandler_onJoinerRequest", "(Lio/openthread/commissioner/CommissionerHandler;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_CommissionerHandler_onJoinerConnected", "(Lio/openthread/commissioner/CommissionerHandler;JJ)V" 
    },
    {
      "SwigDirector_CommissionerHandler_onJoinerFinalize", "(Lio/openthread/commissioner/CommissionerHandler;JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;JLjava/lang/String;J)Z" 
    },
    {
      "SwigDirector_CommissionerHandler_onKeepAliveResponse", "(Lio/openthread/commissioner/CommissionerHandler;J)V" 
    },
    {
      "SwigDirector_CommissionerHandler_onPanIdConflict", "(Lio/openthread/commissioner/CommissionerHandler;Ljava/lang/String;JI)V" 
    },
    {
      "SwigDirector_CommissionerHandler_onEnergyReport", "(Lio/openthread/commissioner/CommissionerHandler;Ljava/lang/String;JJ)V" 
    },
    {
      "SwigDirector_CommissionerHandler_onDatasetChanged", "(Lio/openthread/commissioner/CommissionerHandler;)V" 
    }
  };
  Swig::jclass_commissionerModuleJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_commissionerModuleJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

