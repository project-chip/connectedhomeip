/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.openthread.commissioner;

public class commissionerModule {
  public static long getKMinCommissionerCredentialLength() {
    return commissionerModuleJNI.kMinCommissionerCredentialLength_get();
  }

  public static long getKMaxCommissionerCredentialLength() {
    return commissionerModuleJNI.kMaxCommissionerCredentialLength_get();
  }

  public static long getKMinJoinerDeviceCredentialLength() {
    return commissionerModuleJNI.kMinJoinerDeviceCredentialLength_get();
  }

  public static long getKMaxJoinerDeviceCredentialLength() {
    return commissionerModuleJNI.kMaxJoinerDeviceCredentialLength_get();
  }

  public static long getKMaxPSKcLength() {
    return commissionerModuleJNI.kMaxPSKcLength_get();
  }

  public static long getKMaxNetworkNameLength() {
    return commissionerModuleJNI.kMaxNetworkNameLength_get();
  }

  public static long getKExtendedAddrLength() {
    return commissionerModuleJNI.kExtendedAddrLength_get();
  }

  public static long getKExtendedPanIdLength() {
    return commissionerModuleJNI.kExtendedPanIdLength_get();
  }

  public static long getKMaxSteeringDataLength() {
    return commissionerModuleJNI.kMaxSteeringDataLength_get();
  }

  public static long getKJoinerIdLength() {
    return commissionerModuleJNI.kJoinerIdLength_get();
  }

  public static long getKJoinerRouterKekLength() {
    return commissionerModuleJNI.kJoinerRouterKekLength_get();
  }

  public static int getKDefaultJoinerUdpPort() {
    return commissionerModuleJNI.kDefaultJoinerUdpPort_get();
  }

  public static int getKDefaultAeUdpPort() {
    return commissionerModuleJNI.kDefaultAeUdpPort_get();
  }

  public static int getKDefaultNmkpUdpPort() {
    return commissionerModuleJNI.kDefaultNmkpUdpPort_get();
  }

  public static int getKPrimaryBbrAloc16() {
    return commissionerModuleJNI.kPrimaryBbrAloc16_get();
  }

  public static boolean getKRadio915Mhz() {
    return commissionerModuleJNI.kRadio915Mhz_get();
  }

  public static long getKRadio915MhzOqpskChannelMask() {
    return commissionerModuleJNI.kRadio915MhzOqpskChannelMask_get();
  }

  public static long getKRadio2P4GhzOqpskChannelMask() {
    return commissionerModuleJNI.kRadio2P4GhzOqpskChannelMask_get();
  }

  public static short getKRadioChannelPage0() {
    return commissionerModuleJNI.kRadioChannelPage0_get();
  }

  public static short getKRadioChannelPage2() {
    return commissionerModuleJNI.kRadioChannelPage2_get();
  }

  public static short getKMlrStatusSuccess() {
    return commissionerModuleJNI.kMlrStatusSuccess_get();
  }

  public static short getKMlrStatusInvalid() {
    return commissionerModuleJNI.kMlrStatusInvalid_get();
  }

  public static short getKMlrStatusNoResources() {
    return commissionerModuleJNI.kMlrStatusNoResources_get();
  }

  public static short getKMlrStatusNotPrimary() {
    return commissionerModuleJNI.kMlrStatusNotPrimary_get();
  }

  public static short getKMlrStatusFailure() {
    return commissionerModuleJNI.kMlrStatusFailure_get();
  }

  public static Error ipv6PrefixFromString(ByteArray aPrefix, String aStr) {
    return new Error(commissionerModuleJNI.ipv6PrefixFromString(ByteArray.getCPtr(aPrefix), aPrefix, aStr), true);
  }

  public static String ipv6PrefixToString(ByteArray aPrefix) {
    return commissionerModuleJNI.ipv6PrefixToString(ByteArray.getCPtr(aPrefix), aPrefix);
  }

}
