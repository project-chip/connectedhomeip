# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/qpg_sdk.gni")
import("${qpg_sdk_build_root}/qpg_sdk.gni")

declare_args() {
  # Build target to use for QPG SDK. Use this to set global SDK defines.
  qpg_sdk_target = ""
}

assert(qpg_sdk_target != "", "qpg_sdk_target must be specified")

group("qpg_sdk") {
  public_deps = [ qpg_sdk_target ]
  public_configs = [ ":qpg_include_paths_config" ]
}

config("qpg_include_paths_config") {
  include_dirs = [
    "${qpg_sdk_root}/Components/Qorvo/BaseUtils/gpNvm/inc",
    "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/inc",
    "${qpg_sdk_root}/Components/Qorvo/HAL_PLATFORM/inc/compiler/ARMGCCEMB",
    "${qpg_sdk_root}/Components/Qorvo/Matter/qvCHIP/inc",
    "${qpg_sdk_root}/Components/Qorvo/Matter/qvIO/inc",
    "${qpg_sdk_root}/Components/Qorvo/OS/gpAssert/inc",
    "${qpg_sdk_root}/Components/Qorvo/OS/gpLog/inc",
    "${qpg_sdk_root}/Components/Qorvo/OS/gpReset/inc",
    "${qpg_sdk_root}/Components/Qorvo/OS/gpSched/inc",
  ]
}

config("qpg_freertos_config") {
  include_dirs = [
    "${freertos_root}/repo/include",
    "${qpg_sdk_root}/Applications/Matter/shared/config/inc",
    "${qpg_sdk_root}/Components/ThirdParty/Lwip",
  ]

  if (qpg_target_ic == "qpg6200") {
    include_dirs += [ "${freertos_root}/repo/portable/GCC/ARM_CM4F" ]
  } else {
    include_dirs += [ "${freertos_root}/repo/portable/GCC/ARM_CM3" ]
  }
}

template("qpg_make_build") {
  forward_variables_from(invoker,
                         [
                           "make_sources",
                           "make_args",
                           "make_output",
                         ])
  action(target_name) {
    script = "make.py"
    sources = make_sources
    outputs = make_output
    args = [
      "-s",

      #use PATH variable lookup for compiler
      "TOOLCHAIN=",
    ]
    args += make_args
  }
}

qpg_make_build("qpg_mbedtls_alt") {
  if (qpg_target_ic == "qpg6200") {
    make_sources =
        [ "${qpg_sdk_root}/Components/ThirdParty/secure_element/software" ]
    make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/mbedtls_alt_${qpg_target_ic}${qpg_flavour}/libmbedtls_alt_${qpg_target_ic}${qpg_flavour}.a" ]
    make_args = [
      "-f",
      rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/mbedtls_alt/Makefile.mbedtls_alt_${qpg_target_ic}${qpg_flavour}",
      "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
          "/${qpg_sdk_lib_dir}/mbedtls_alt_${qpg_target_ic}${qpg_flavour}",
    ]
  }
}

static_library("qpg_mbedtls_alt_lib") {
  if (qpg_target_ic == "qpg6200") {
    deps = [ "${chip_root}/third_party/qpg_sdk:qpg_mbedtls_alt" ]
    libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/mbedtls_alt_${qpg_target_ic}${qpg_flavour}/libmbedtls_alt_${qpg_target_ic}${qpg_flavour}.a" ]
  }
}

qpg_make_build("qpg_stack") {
  make_sources = [ "${qpg_sdk_root}/Components/Qorvo" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/QorvoStack/libQorvoStack_${qpg_target_ic}${qpg_flavour}.a" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/QorvoStack/Makefile.QorvoStack_${qpg_target_ic}${qpg_flavour}",
    "FREERTOS_REPO_DIR=" + rebase_path("${freertos_root}/repo", root_build_dir),
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/QorvoStack",
  ]
}

static_library("qpg_stack_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_stack" ]
  libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/QorvoStack/libQorvoStack_${qpg_target_ic}${qpg_flavour}.a" ]
}

qpg_make_build("qpg_glue") {
  make_sources = [ "${qpg_sdk_root}/Components/Qorvo/Matter" ]

  if (qpg_target_ic == "qpg6200") {
    make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/MatterQorvoGlue/libMatterQorvoGlue_${qpg_target_ic}${qpg_flavour}_libbuild.a" ]
    make_args = [
      "-f",
      rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/MatterQorvoGlue/Makefile.MatterQorvoGlue_${qpg_target_ic}${qpg_flavour}_libbuild",
      "FREERTOS_REPO_DIR=" +
          rebase_path("${freertos_root}/repo", root_build_dir),
      "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
          "/${qpg_sdk_lib_dir}/MatterQorvoGlue",
    ]
  } else {
    assert(false, "QPG target not specified")
  }
}
static_library("qpg_glue_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_glue" ]
  if (qpg_target_ic == "qpg6200") {
    libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/MatterQorvoGlue/libMatterQorvoGlue_${qpg_target_ic}${qpg_flavour}_libbuild.a" ]
  } else {
    assert(false, "QPG target not specified")
  }
}

# openthread toevoegen
# bootloader build
#
qpg_make_build("qpg_bootloader_hex") {
  make_sources = [ "${qpg_sdk_root}/Applications/Bootloader" ]

  if (qpg_target_ic == "qpg6200") {
    make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/Bootloader_${qpg_target_ic}${qpg_flavour}_compr/Bootloader_${qpg_target_ic}${qpg_flavour}_compr.hex" ]
    make_args = [
      "-f",
      rebase_path(qpg_sdk_root, root_build_dir) + "/Applications/Bootloader/Makefile.Bootloader_${qpg_target_ic}${qpg_flavour}_compr",
      "FREERTOS_REPO_DIR=" +
          rebase_path("${freertos_root}/repo", root_build_dir),
      "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
          "/${qpg_sdk_lib_dir}/Bootloader_${qpg_target_ic}${qpg_flavour}_compr",
      "UMB_WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
          "/${qpg_sdk_lib_dir}/Bootloader_${qpg_target_ic}${qpg_flavour}_compr",
    ]
  } else {
    assert(false, "QPG board not specified")
  }
}
config("qpg_retain_bootloader") {
  ldflags = [ "-Wl,--no-warn-rwx-segment" ]
}

static_library("qpg_bootloader_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_bootloader_hex" ]
  if (qpg_target_ic == "qpg6200") {
    libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/BootloaderSections_${qpg_target_ic}${qpg_flavour}_compr/libBootloaderSections_${qpg_target_ic}${qpg_flavour}_compr.a" ]
  } else {
    assert(false, "QPG Board not selected")
  }

  public_configs = [ ":qpg_retain_bootloader" ]
}

copy("qpg_bootloader") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }
  sources = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/Bootloader${fd_suffix}${qpg_flavour}_compr/Bootloader${fd_suffix}${qpg_flavour}_compr.hex" ]
  outputs = [ "${root_build_dir}/bootloader${fd_suffix}${qpg_flavour}.hex" ]
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_bootloader_hex" ]
}

qpg_make_build("qpg_openthread_glue") {
  make_sources = [ "${qpg_sdk_root}/Components/Qorvo/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/OpenThreadQorvoGlue_${qpg_target_ic}_ftd/libOpenThreadQorvoGlue_${qpg_target_ic}_ftd.a" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/OpenThreadQorvoGlue/Makefile.OpenThreadQorvoGlue_${qpg_target_ic}_ftd",
    "FREERTOS_REPO_DIR=" + rebase_path("${freertos_root}/repo", root_build_dir),
    "OPENTHREAD_REPO_DIR =" + rebase_path(chip_root, root_build_dir) +
        "/third_party/openthread/repo",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/OpenThreadQorvoGlue_${qpg_target_ic}_ftd",
  ]
}
static_library("qpg_openthread_glue_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_openthread_glue" ]
  libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/OpenThreadQorvoGlue_${qpg_target_ic}_ftd/libOpenThreadQorvoGlue_${qpg_target_ic}_ftd.a" ]
}

qpg_make_build("qpg_light_factorydata_hex") {
  # factory data suffix
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }

  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_light_static_pake${fd_suffix}/FactoryData_light_static_pake${fd_suffix}.hex" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/FactoryData/Makefile.FactoryData_light_static_pake${fd_suffix}",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FactoryData_light_static_pake${fd_suffix}",
  ]
}
copy("qpg_light_factorydata") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }
  sources = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_light_static_pake${fd_suffix}/FactoryData_light_static_pake${fd_suffix}.hex" ]
  outputs = [ "${root_build_dir}/chip-${qpg_target_ic}${qpg_flavour}-lighting-example.factorydata.hex" ]
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_light_factorydata_hex" ]
}

qpg_make_build("qpg_lock_factorydata_hex") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }

  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_lock_static_pake${fd_suffix}/FactoryData_lock_static_pake${fd_suffix}.hex" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/FactoryData/Makefile.FactoryData_lock_static_pake${fd_suffix}",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FactoryData_lock_static_pake${fd_suffix}",
  ]
}
copy("qpg_lock_factorydata") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }
  sources = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_lock_static_pake${fd_suffix}/FactoryData_lock_static_pake${fd_suffix}.hex" ]
  outputs = [ "${root_build_dir}/chip-${qpg_target_ic}${qpg_flavour}-lock-example.factorydata.hex" ]
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_lock_factorydata_hex" ]
}

qpg_make_build("qpg_switch_factorydata_hex") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }

  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_switch_static_pake${fd_suffix}/FactoryData_switch_static_pake${fd_suffix}.hex" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/FactoryData/Makefile.FactoryData_switch_static_pake${fd_suffix}",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FactoryData_switch_static_pake${fd_suffix}",
  ]
}

copy("qpg_switch_factorydata") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }
  sources = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_switch_static_pake${fd_suffix}/FactoryData_switch_static_pake${fd_suffix}.hex" ]
  outputs = [ "${root_build_dir}/chip-${qpg_target_ic}${qpg_flavour}-light-switch-example.factorydata.hex" ]
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_switch_factorydata_hex" ]
}

qpg_make_build("qpg_thermostat_factorydata_hex") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }

  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_thermostaticRadiatorValve_static_pake${fd_suffix}/FactoryData_thermostaticRadiatorValve_static_pake${fd_suffix}.hex" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/FactoryData/Makefile.FactoryData_thermostaticRadiatorValve_static_pake${fd_suffix}",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) + "/${qpg_sdk_lib_dir}/FactoryData_thermostaticRadiatorValve_static_pake${fd_suffix}",
  ]
}

copy("qpg_thermostat_factorydata") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }
  sources = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_thermostaticRadiatorValve_static_pake${fd_suffix}/FactoryData_thermostaticRadiatorValve_static_pake${fd_suffix}.hex" ]
  outputs = [ "${root_build_dir}/chip-${qpg_target_ic}${qpg_flavour}-thermostat-example.factorydata.hex" ]
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_thermostat_factorydata_hex" ]
}

qpg_make_build("qpg_doorwindow_factorydata_hex") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }

  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_doorWindow_static_pake${fd_suffix}/FactoryData_doorWindow_static_pake${fd_suffix}.hex" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/FactoryData/Makefile.FactoryData_doorWindow_static_pake${fd_suffix}",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FactoryData_doorWindow_static_pake${fd_suffix}",
  ]
}

copy("qpg_doorwindow_factorydata") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }
  sources = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_doorWindow_static_pake${fd_suffix}/FactoryData_doorWindow_static_pake${fd_suffix}.hex" ]
  outputs = [ "${root_build_dir}/chip-${qpg_target_ic}${qpg_flavour}-contact-sensor-example.factorydata.hex" ]
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_doorwindow_factorydata_hex" ]
}

qpg_make_build("qpg_motionsensor_factorydata_hex") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }

  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_motionSensor_static_pake${fd_suffix}/FactoryData_motionSensor_static_pake${fd_suffix}.hex" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/FactoryData/Makefile.FactoryData_motionSensor_static_pake${fd_suffix}",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FactoryData_motionSensor_static_pake${fd_suffix}",
  ]
}

copy("qpg_motionsensor_factorydata") {
  fd_suffix = ""
  if (qpg_target_ic == "qpg6200") {
    fd_suffix = "_qpg6200"
  }
  sources = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FactoryData_motionSensor_static_pake${fd_suffix}/FactoryData_motionSensor_static_pake${fd_suffix}.hex" ]
  outputs = [ "${root_build_dir}/chip-${qpg_target_ic}${qpg_flavour}-occupancy-sensor-example.factorydata.hex" ]
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_motionsensor_factorydata_hex" ]
}

qpg_make_build("qpg_light_firmwaredata") {
  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_light/libFirmwareData_light.a" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) +
        "/Libraries/Qorvo/FactoryData/Makefile.FirmwareData_light",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FirmwareData_light",
  ]
}
static_library("qpg_light_firmwaredata_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_light_firmwaredata" ]
  libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_light/libFirmwareData_light.a" ]
}

qpg_make_build("qpg_lock_firmwaredata") {
  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_lock/libFirmwareData_lock.a" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) +
        "/Libraries/Qorvo/FactoryData/Makefile.FirmwareData_lock",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FirmwareData_lock",
  ]
}
static_library("qpg_lock_firmwaredata_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_lock_firmwaredata" ]
  libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_lock/libFirmwareData_lock.a" ]
}

qpg_make_build("qpg_switch_firmwaredata") {
  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_switch/libFirmwareData_switch.a" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) +
        "/Libraries/Qorvo/FactoryData/Makefile.FirmwareData_switch",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FirmwareData_switch",
  ]
}
static_library("qpg_switch_firmwaredata_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_switch_firmwaredata" ]
  libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_switch/libFirmwareData_switch.a" ]
}

qpg_make_build("qpg_thermostat_firmwaredata") {
  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_thermostaticRadiatorValve/libFirmwareData_thermostaticRadiatorValve.a" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) + "/Libraries/Qorvo/FactoryData/Makefile.FirmwareData_thermostaticRadiatorValve",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FirmwareData_thermostaticRadiatorValve",
  ]
}
static_library("qpg_thermostat_firmwaredata_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_thermostat_firmwaredata" ]
  libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_thermostaticRadiatorValve/libFirmwareData_thermostaticRadiatorValve.a" ]
}

qpg_make_build("qpg_doorwindow_firmwaredata") {
  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_doorWindow/libFirmwareData_doorWindow.a" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) +
        "/Libraries/Qorvo/FactoryData/Makefile.FirmwareData_doorWindow",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FirmwareData_doorWindow",
  ]
}
static_library("qpg_doorwindow_firmwaredata_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_doorwindow_firmwaredata" ]
  libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_doorWindow/libFirmwareData_doorWindow.a" ]
}

qpg_make_build("qpg_motionsensor_firmwaredata") {
  make_sources = [ "${qpg_sdk_root}/Tools/QorvoPlatformTools/Matter" ]
  make_output = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_motionSensor/libFirmwareData_motionSensor.a" ]
  make_args = [
    "-f",
    rebase_path(qpg_sdk_root, root_build_dir) +
        "/Libraries/Qorvo/FactoryData/Makefile.FirmwareData_motionSensor",
    "WORKDIR=" + rebase_path(target_gen_dir, root_build_dir) +
        "/${qpg_sdk_lib_dir}/FirmwareData_motionSensor",
  ]
}
static_library("qpg_motionsensor_firmwaredata_lib") {
  deps = [ "${chip_root}/third_party/qpg_sdk:qpg_motionsensor_firmwaredata" ]
  libs = [ "${target_gen_dir}/${qpg_sdk_lib_dir}/FirmwareData_motionSensor/libFirmwareData_motionSensor.a" ]
}
