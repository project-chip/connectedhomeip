# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/jlink.gni")
import("//build_overrides/mbedtls.gni")
import("//build_overrides/openthread.gni")
import("//build_overrides/qpg6100_sdk.gni")

declare_args() {
  # Location of the QPG6100 SDK.
  qpg6100_sdk_root = "${chip_root}/third_party/qpg_sdk/repo"
}

qpg6100_sdk_root_env = getenv("QPG6100_SDK_ROOT")
if (qpg6100_sdk_root_env != "") {
  qpg6100_sdk_root = qpg6100_sdk_root_env
}

assert(qpg6100_sdk_root != "", "qpg6100_sdk_root must be specified")

# Defines an QPG6100 SDK build target.
#
# Parameters:
#   qpg6100_sdk_root - The location of the QPG6100 SDK.
#   sources - The sources files to build.
template("qpg6100_sdk") {
  if (defined(invoker.qpg6100_sdk_root)) {
    qpg6100_sdk_root = invoker.qpg6100_sdk_root
  }

  assert(qpg6100_sdk_root != "", "qpg6100_sdk_root must be specified")

  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    libs = []

    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    include_dirs += [
      "${qpg6100_sdk_root}/qpg6100/comps/qvCHIP/inc",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/config",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/Portable/GCC/ARM_CM3",
      "${qpg6100_sdk_root}/qpg6100/comps/libmbedtls",
      "${mbedtls_root}/repo/include",
      "${openthread_root}/include",
    ]

    lib_dirs = []

    libs += [
      "${qpg6100_sdk_root}/qpg6100/lib/libCHIP_qpg6100.a",
      "${qpg6100_sdk_root}/qpg6100/lib/libmbedtls_alt_qpg6100.a",
    ]

    #MBed TLS built from third_party/mbedtls tree - OT config not used
    defines = [
      "QORVO_CRYPTO_ENGINE",
      "MBEDTLS_CONFIG_FILE=\"qpg6100-mbedtls-config.h\"",
    ]
    cflags = []

    # Allow warning due to mbedtls
    cflags += [ "-Wno-maybe-uninitialized" ]

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
  }

  source_set(sdk_target_name) {
    sources = [
      "${chip_root}/third_party/mbedtls/repo/include/mbedtls/platform.h",
      "${chip_root}/third_party/mbedtls/repo/library/aes.c",
      "${chip_root}/third_party/mbedtls/repo/library/aesni.c",
      "${chip_root}/third_party/mbedtls/repo/library/arc4.c",
      "${chip_root}/third_party/mbedtls/repo/library/aria.c",
      "${chip_root}/third_party/mbedtls/repo/library/asn1parse.c",
      "${chip_root}/third_party/mbedtls/repo/library/asn1write.c",
      "${chip_root}/third_party/mbedtls/repo/library/base64.c",
      "${chip_root}/third_party/mbedtls/repo/library/bignum.c",
      "${chip_root}/third_party/mbedtls/repo/library/blowfish.c",
      "${chip_root}/third_party/mbedtls/repo/library/camellia.c",
      "${chip_root}/third_party/mbedtls/repo/library/ccm.c",
      "${chip_root}/third_party/mbedtls/repo/library/certs.c",
      "${chip_root}/third_party/mbedtls/repo/library/chacha20.c",
      "${chip_root}/third_party/mbedtls/repo/library/chachapoly.c",
      "${chip_root}/third_party/mbedtls/repo/library/cipher.c",
      "${chip_root}/third_party/mbedtls/repo/library/cipher_wrap.c",
      "${chip_root}/third_party/mbedtls/repo/library/cmac.c",
      "${chip_root}/third_party/mbedtls/repo/library/ctr_drbg.c",
      "${chip_root}/third_party/mbedtls/repo/library/debug.c",
      "${chip_root}/third_party/mbedtls/repo/library/des.c",
      "${chip_root}/third_party/mbedtls/repo/library/dhm.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecdh.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecdsa.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecjpake.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecp.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecp_curves.c",
      "${chip_root}/third_party/mbedtls/repo/library/entropy.c",
      "${chip_root}/third_party/mbedtls/repo/library/entropy_poll.c",
      "${chip_root}/third_party/mbedtls/repo/library/error.c",
      "${chip_root}/third_party/mbedtls/repo/library/gcm.c",
      "${chip_root}/third_party/mbedtls/repo/library/havege.c",
      "${chip_root}/third_party/mbedtls/repo/library/hkdf.c",
      "${chip_root}/third_party/mbedtls/repo/library/hmac_drbg.c",
      "${chip_root}/third_party/mbedtls/repo/library/md.c",
      "${chip_root}/third_party/mbedtls/repo/library/md2.c",
      "${chip_root}/third_party/mbedtls/repo/library/md4.c",
      "${chip_root}/third_party/mbedtls/repo/library/md5.c",
      "${chip_root}/third_party/mbedtls/repo/library/memory_buffer_alloc.c",
      "${chip_root}/third_party/mbedtls/repo/library/net_sockets.c",
      "${chip_root}/third_party/mbedtls/repo/library/nist_kw.c",
      "${chip_root}/third_party/mbedtls/repo/library/oid.c",
      "${chip_root}/third_party/mbedtls/repo/library/padlock.c",
      "${chip_root}/third_party/mbedtls/repo/library/pem.c",
      "${chip_root}/third_party/mbedtls/repo/library/pk.c",
      "${chip_root}/third_party/mbedtls/repo/library/pk_wrap.c",
      "${chip_root}/third_party/mbedtls/repo/library/pkcs11.c",
      "${chip_root}/third_party/mbedtls/repo/library/pkcs12.c",
      "${chip_root}/third_party/mbedtls/repo/library/pkcs5.c",
      "${chip_root}/third_party/mbedtls/repo/library/pkparse.c",
      "${chip_root}/third_party/mbedtls/repo/library/pkwrite.c",
      "${chip_root}/third_party/mbedtls/repo/library/platform.c",
      "${chip_root}/third_party/mbedtls/repo/library/platform_util.c",
      "${chip_root}/third_party/mbedtls/repo/library/poly1305.c",
      "${chip_root}/third_party/mbedtls/repo/library/psa_crypto.c",
      "${chip_root}/third_party/mbedtls/repo/library/psa_crypto_driver_wrappers.c",
      "${chip_root}/third_party/mbedtls/repo/library/psa_crypto_se.c",
      "${chip_root}/third_party/mbedtls/repo/library/psa_crypto_slot_management.c",
      "${chip_root}/third_party/mbedtls/repo/library/psa_crypto_storage.c",
      "${chip_root}/third_party/mbedtls/repo/library/psa_its_file.c",
      "${chip_root}/third_party/mbedtls/repo/library/ripemd160.c",
      "${chip_root}/third_party/mbedtls/repo/library/rsa.c",
      "${chip_root}/third_party/mbedtls/repo/library/rsa_internal.c",
      "${chip_root}/third_party/mbedtls/repo/library/sha1.c",
      "${chip_root}/third_party/mbedtls/repo/library/sha256.c",
      "${chip_root}/third_party/mbedtls/repo/library/sha512.c",
      "${chip_root}/third_party/mbedtls/repo/library/ssl_cache.c",
      "${chip_root}/third_party/mbedtls/repo/library/ssl_ciphersuites.c",
      "${chip_root}/third_party/mbedtls/repo/library/ssl_cli.c",
      "${chip_root}/third_party/mbedtls/repo/library/ssl_cookie.c",
      "${chip_root}/third_party/mbedtls/repo/library/ssl_msg.c",
      "${chip_root}/third_party/mbedtls/repo/library/ssl_srv.c",
      "${chip_root}/third_party/mbedtls/repo/library/ssl_ticket.c",
      "${chip_root}/third_party/mbedtls/repo/library/ssl_tls.c",
      "${chip_root}/third_party/mbedtls/repo/library/ssl_tls13_keys.c",
      "${chip_root}/third_party/mbedtls/repo/library/threading.c",
      "${chip_root}/third_party/mbedtls/repo/library/timing.c",
      "${chip_root}/third_party/mbedtls/repo/library/version.c",
      "${chip_root}/third_party/mbedtls/repo/library/version_features.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509_create.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509_crl.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509_crt.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509_csr.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509write_crt.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509write_csr.c",
      "${chip_root}/third_party/mbedtls/repo/library/xtea.c",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/Portable/GCC/ARM_CM3/portmacro.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/FreeRTOS.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/deprecated_definitions.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/list.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/mpu_wrappers.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/portable.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/projdefs.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/queue.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/semphr.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/stack_macros.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/task.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/timers.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/config/FreeRTOSConfig.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/config/hooks.c",
      "${qpg6100_sdk_root}/qpg6100/comps/libmbedtls/aes_alt.h",
      "${qpg6100_sdk_root}/qpg6100/comps/libmbedtls/ccm_alt.h",
      "${qpg6100_sdk_root}/qpg6100/comps/libmbedtls/ecjpake_alt.h",
      "${qpg6100_sdk_root}/qpg6100/comps/libmbedtls/ecp_alt.h",
      "${qpg6100_sdk_root}/qpg6100/comps/libmbedtls/qpg6100-mbedtls-config.h",
      "${qpg6100_sdk_root}/qpg6100/comps/libmbedtls/sha256_alt.h",
      "${qpg6100_sdk_root}/qpg6100/comps/libmbedtls/trng.c",  #add this for
                                                              # mbedtls_hardware_poll
      "${qpg6100_sdk_root}/qpg6100/comps/qvCHIP/inc/qvCHIP.h",
    ]

    if (defined(invoker.sources)) {
      sources += invoker.sources
    }

    public_configs = [ ":${sdk_target_name}_config" ]
  }
}
