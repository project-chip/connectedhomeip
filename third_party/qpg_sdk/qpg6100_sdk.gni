# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/jlink.gni")
import("//build_overrides/mbedtls.gni")
import("//build_overrides/qpg6100_sdk.gni")

#import("//build_overrides/openthread.gni")

declare_args() {
  # Location of the QPG6100 SDK.
  qpg6100_sdk_root = "${chip_root}/third_party/qpg_sdk/repo"
}

qpg6100_sdk_root_env = getenv("QPG6100_SDK_ROOT")
if (qpg6100_sdk_root_env != "") {
  qpg6100_sdk_root = qpg6100_sdk_root_env
}

assert(qpg6100_sdk_root != "", "qpg6100_sdk_root must be specified")

# Defines an QPG6100 SDK build target.
#
# Parameters:
#   qpg6100_sdk_root - The location of the QPG6100 SDK.
#   sources - The sources files to build.
template("qpg6100_sdk") {
  if (defined(invoker.qpg6100_sdk_root)) {
    qpg6100_sdk_root = invoker.qpg6100_sdk_root
  }

  assert(qpg6100_sdk_root != "", "qpg6100_sdk_root must be specified")

  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    libs = []

    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    include_dirs += [
      "${qpg6100_sdk_root}/qpg6100/comps/qvCHIP/inc",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/config",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/Portable/GCC/ARM_CM3",
      "${mbedtls_root}/repo/include",
    ]

    lib_dirs = []

    libs += [ "${qpg6100_sdk_root}/qpg6100/lib/libCHIP_qpg6100.a" ]

    defines = []

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
  }

  source_set(sdk_target_name) {
    sources = [
      "${chip_root}/third_party/mbedtls/repo/include/mbedtls/platform.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/Portable/GCC/ARM_CM3/portmacro.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/FreeRTOS.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/deprecated_definitions.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/list.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/mpu_wrappers.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/portable.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/projdefs.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/queue.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/semphr.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/stack_macros.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/task.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/Source/include/timers.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/config/FreeRTOSConfig.h",
      "${qpg6100_sdk_root}/qpg6100/comps/gpFreeRTOS/config/hooks.c",
      "${qpg6100_sdk_root}/qpg6100/comps/qvCHIP/inc/qvCHIP.h",
    ]

    public_deps = [
      #      "${segger_rtt_root}:segger_rtt",
      #      "${segger_rtt_root}:segger_rtt_printf",
      #      "${segger_rtt_root}:segger_rtt_syscalls",
    ]

    if (defined(invoker.sources)) {
      sources += invoker.sources
    }

    public_configs = [ ":${sdk_target_name}_config" ]
  }
}
