# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/pigweed.gni")

import("${build_root}/toolchain/flashable_executable.gni")
import("${chip_root}/src/platform/device.gni")
import("${dir_pw_build}/python.gni")

template("qpg_executable") {
  output_base_name = get_path_info(invoker.output_name, "name")

  qpg_target_name = target_name
  executable_target_name = "${target_name}.out"
  if (chip_enable_ota_requestor) {
    # Generate OTA image after executable
    ota_target_name = "${target_name}_ota"
    final_target = ota_target_name
  } else {
    # The executable is the final target.
    final_target = executable_target_name
  }

  objcopy_image_name = invoker.output_name + ".hex"
  objcopy_image_format = "ihex"
  objcopy = "arm-none-eabi-objcopy"

  # Copy flashing dependencies to the output directory so that the output
  # is collectively self-contained; this allows flashing to work reliably
  # even if the build and flashing steps take place on different machines
  # or in different containers.

  flashing_runtime_target = target_name + ".flashing_runtime"
  flashing_script_inputs = [
    "${chip_root}/scripts/flashing/firmware_utils.py",
    "${chip_root}/scripts/flashing/qpg_firmware_utils.py",
  ]

  copy(flashing_runtime_target) {
    sources = flashing_script_inputs
    outputs = [ "${root_out_dir}/{{source_file_part}}" ]
  }

  flashing_script_generator =
      "${chip_root}/scripts/flashing/gen_flashing_script.py"
  flashing_script_name = output_base_name + ".flash.py"
  flashing_options = [ "qpg" ]

  flashable_executable(executable_target_name) {
    forward_variables_from(invoker, "*")
    data_deps = [ ":${flashing_runtime_target}" ]
  }

  # If OTA requestor is enabled, generate OTA image from HEX
  if (chip_enable_ota_requestor) {
    pw_python_action(ota_target_name) {
      public_deps = [ ":${qpg_target_name}.out.image" ]
      sources = [ "${root_out_dir}/${objcopy_image_name}" ]
      outputs = [ "${root_out_dir}/${objcopy_image_name}.ota" ]
      script =
          "${chip_root}/third_party/qpg_sdk/repo/Tools/ota/generate_ota_img.py"
      out_dir = rebase_path(root_out_dir, root_build_dir)

      args = [
        rebase_path(chip_root, root_build_dir),
        "${out_dir}/${invoker.output_name}.hex",
        "${out_dir}/${invoker.output_name}.ota",
      ]
    }
  }

  group(qpg_target_name) {
    data_deps = [ ":$final_target" ]

    if (defined(invoker.data_deps)) {
      data_deps += invoker.data_deps
    }
  }
}
